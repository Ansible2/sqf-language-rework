import { IJSON, SQFGrammarType } from "../SQFParser.namespace";

export const SQFGrammarTypeMap: IJSON<SQFGrammarType> = {
	'if': SQFGrammarType.ConrolStatement,
	'apply': SQFGrammarType.ConrolStatement,
	'foreach': SQFGrammarType.ConrolStatement,
	'or': SQFGrammarType.ConditionOperator,
	'private': SQFGrammarType.AccessModifier,
	'%': SQFGrammarType.ManipulativeOperator,
	'==': SQFGrammarType.ComparisonOperator,
	'!': SQFGrammarType.ConditionOperator,
	not: SQFGrammarType.ConditionOperator,
	controlnull: SQFGrammarType.NullLiteral,
	displaynull: SQFGrammarType.NullLiteral,
	diaryRecordnull: SQFGrammarType.NullLiteral,
	netObjnull: SQFGrammarType.NullLiteral,
	grpnull: SQFGrammarType.NullLiteral,
	locationnull: SQFGrammarType.NullLiteral,
	nil: SQFGrammarType.NullLiteral,
	objnull: SQFGrammarType.NullLiteral,
	scriptnull: SQFGrammarType.NullLiteral,
	tasknull: SQFGrammarType.NullLiteral,
	teamMembernull: SQFGrammarType.NullLiteral,
	confignull: SQFGrammarType.NullLiteral,
	switch: SQFGrammarType.ConrolStatement,
	try: SQFGrammarType.ConrolStatement,
	catch: SQFGrammarType.ConrolStatement,
	case: SQFGrammarType.ConrolStatement,
	for: SQFGrammarType.ConrolStatement,
	while: SQFGrammarType.ConrolStatement,
	do: SQFGrammarType.ConrolStatement,
	from: SQFGrammarType.ConrolStatement,
	get: SQFGrammarType.PropertyAccessor,
	set: SQFGrammarType.PropertyAccessor,
	select: SQFGrammarType.PropertyAccessor,
	getOrDefault: SQFGrammarType.PropertyAccessor,
	getOrDefaultCall: SQFGrammarType.PropertyAccessor,
	'#': SQFGrammarType.PropertyAccessor,
	insert: SQFGrammarType.PropertyAccessor,
	this: SQFGrammarType.ReservedLiteral,
	_this: SQFGrammarType.ReservedLiteral,
	_x: SQFGrammarType.ReservedLiteral,
	_forEachIndex: SQFGrammarType.ReservedLiteral,
	_exception: SQFGrammarType.ReservedLiteral,
	_thisScript: SQFGrammarType.ReservedLiteral,
	_thisFSM: SQFGrammarType.ReservedLiteral,
	thisList: SQFGrammarType.ReservedLiteral,
	thisTrigger: SQFGrammarType.ReservedLiteral,
	west: SQFGrammarType.ReservedLiteral,
	east: SQFGrammarType.ReservedLiteral,
	resistance: SQFGrammarType.ReservedLiteral,
	civilian: SQFGrammarType.ReservedLiteral,
	independent: SQFGrammarType.ReservedLiteral,
	blufor: SQFGrammarType.ReservedLiteral,
	opfor: SQFGrammarType.ReservedLiteral,
	compile: SQFGrammarType.AccessModifier, // TODO: decide what the SQFGrammarType for these types of commands is
	// compile|compileFinal|exec|execFSM|execVM|callExtension //
}