import { SQFItemConfig } from "../sqf.namespace";

export const configs: SQFItemConfig[] = [
    {
        "documentation": {
            "description": "Subtracts numbers or arrays from each another, negates a number. For arrays also see `deleteAt` and `deleteRange`.\n**Arma 3**: In Arma 3 it is possible to subtract nested arrays.",
            "examples": [
                {
                    "text": "```sqf\n_result = 10 - 7; // result is 3\n```"
                },
                {
                    "text": "```sqf\n\n_numA = 4;\n_numB = -_numA; // result is -4\n_numB = -_numB; // result is  4\n\n```"
                },
                {
                    "text": "```sqf\n_result = [1, 2, 2, player, \"String\"] - [2, player, player, \"String\"]; // _result is [1]\n```"
                },
                {
                    "text": "```sqf\n_result = [0, [0], [[0]]] - [0]; // [[0], [[0]]]\n```"
                },
                {
                    "text": "```sqf\n\n_result = [0, [0], [[0]]] - [[0]];\t\t// [0, [<nowiki/>[0]]]\t- Since {{arma3}}\n_result = [0, [0], [[0]]] - [[[0]]];\t// [0, [0]]\t\t- Since {{arma3}}\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "numberA",
                            "description": "`Number`"
                        },
                        {
                            "name": "numberB",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "numberA [[-]] numberB",
                    "returns": "`Number`"
                },
                {
                    "parameters": [
                        {
                            "name": "numberA",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "[[-]] numberA",
                    "returns": "`Number` - the negative of _numberA_"
                },
                {
                    "parameters": [
                        {
                            "name": "arrayA",
                            "description": "`Array`"
                        },
                        {
                            "name": "arrayB",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "arrayA [[-]] arrayB",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/-"
        },
        "configuration": {
            "label": "-",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the negation of a Boolean expression. This means `**`true`**` becomes `**`false`**` and vice versa.",
            "examples": [
                {
                    "text": "The code\n\n```sqf\nprivate _isAlive = alive player;\nif (!_isAlive) then\n{\n\thint \"The player is dead!\";\n};\n```\n\nis the same as\n\n```sqf\nprivate _isAlive = alive player;\nif (not _isAlive) then\n{\n\thint \"The player is dead!\";\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "a",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "[[! a|!]] a",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/!"
        },
        "configuration": {
            "label": "!",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the value of _a_ multiplied by _b_.",
            "examples": [
                {
                    "text": "```sqf\n_percentage = 0.5 * 100;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "a",
                            "description": "`Number`"
                        },
                        {
                            "name": "b",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "a [[a * b|*]] b",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/*"
        },
        "configuration": {
            "label": "*",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Selects an element from an `Array`, same as `select` command for arrays, but has [higher precedence](https://community.bistudio.com/wiki/Order%20of%20Precedence).\n**NOTE**: **#** has higher precedence than all binary operators, but it has lower precedence than unary operators (see _Example 3_).",
            "examples": [
                {
                    "text": "```sqf\n[1, 2, 3, 4] # 2;\t\t\t// result is 3\n```"
                },
                {
                    "text": "```sqf\ngetPosASL player # 2;\t\t// result is Z component of player's position\n```"
                },
                {
                    "text": "```sqf\n\n//'getPosASL' is unary; '#' and '+' are binary; precedence is: 'getPosASL' > '#' > '+'\ngetPosASL player # 2 + 1; // equivalent to (getPosASL player # 2) + 1, not (getPosASL player)#(2+1)\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "array  [[a_hash_b|#]] index",
                    "returns": "`Anything`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/#"
        },
        "configuration": {
            "label": "#",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns if _a_ is lesser than _b_.",
            "examples": [
                {
                    "text": "```sqf\n_test = 1 < 2; // true\n```"
                },
                {
                    "text": "```sqf\n_test = 2 < 1; // false\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "a",
                            "description": "`Number`"
                        },
                        {
                            "name": "b",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "a [[a less b|&lt;]] b",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/<"
        },
        "configuration": {
            "label": "<",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if **a** is greater than **b**, else returns `false`.",
            "examples": [
                {
                    "text": "```sqf\nif (fuel truck1 > 0) then { hint \"Truck1 has some fuel left.\"; };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "a",
                            "description": "`Number`"
                        },
                        {
                            "name": "b",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "a [[a greater b|>]] b",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/>"
        },
        "configuration": {
            "label": ">",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns [ config](https://community.bistudio.com/wiki/Config%20) entry with given name (alias of [a / b](https://community.bistudio.com/wiki/a%20%2F%20b), slightly faster but with [lower precedence](https://community.bistudio.com/wiki/Operators%23Order%20of%20Precedence))",
            "examples": [
                {
                    "text": "```sqf\nconfigFile >> \"CfgVehicles\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "config",
                            "description": "`Config`"
                        },
                        {
                            "name": "name",
                            "description": "`String`"
                        }
                    ],
                    "outline": "config [[config greater greater name|>>]] name",
                    "returns": "`Config` - config entry"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/>>"
        },
        "configuration": {
            "label": ">>",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if one or both conditions are `true`. In case of the alternative syntax, {{Link|https://en.wikipedia.org/wiki/Lazy_evaluation#Control_structures|lazy evaluation}} is used. That means that if left operand is `true`, evaluation of the right side is skipped completely.",
            "examples": [
                {
                    "text": "```sqf\nif (OBJ1 || _enemycount == 0) then { hint \"you win !\" };\n```"
                },
                {
                    "text": "```sqf\n\nif (count _array == 0 || { (_array select 0) != player }) then\n{\n\thint \"It works! Without lazy evaluation it would throw an error if array was empty.\";\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "a",
                            "description": "`Boolean` - test condition or variable"
                        },
                        {
                            "name": "b",
                            "description": "`Boolean` - test condition or variable"
                        }
                    ],
                    "outline": "a [[a or b|{{!}}{{!}}]] b",
                    "returns": "`Boolean`"
                },
                {
                    "parameters": [
                        {
                            "name": "a",
                            "description": "`Boolean` - test condition or variable"
                        },
                        {
                            "name": "b",
                            "description": "`Code` - code that returns `Boolean`. It is not evaluated if _a_ returns `true`"
                        }
                    ],
                    "outline": "a [[a or b|{{!}}{{!}}]] b",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/||"
        },
        "configuration": {
            "label": "||",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns absolute (positive) value of a real number.",
            "examples": [
                {
                    "text": "```sqf\n_n = abs -3; // Returns 3\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "x",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`abs` x",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/abs"
        },
        "configuration": {
            "label": "abs",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the current simulation acceleration factor.",
            "examples": [
                {
                    "text": "```sqf\n_acc = accTime;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`accTime`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/accTime"
        },
        "configuration": {
            "label": "accTime",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "ArcCosine of a number, result in [Degrees](https://community.bistudio.com/wiki/Number%23Degrees)",
            "examples": [
                {
                    "text": "```sqf\n_degrees = acos 0.5; // Returns 60\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "x",
                            "description": "`Number` - in range -1..+1 (both included); any other value returns `NaN`"
                        }
                    ],
                    "outline": "`acos` x",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/acos"
        },
        "configuration": {
            "label": "acos",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Make a unit perform an action. See [:Category:Actions](https://community.bistudio.com/wiki/%3ACategory%3AActions) for action names and syntaxes.\n**Arma 3**: \nSince Arma 3 2.18 it is possible to use `actionNow` to perform some actions immediately without any animation.\nHowever, note that some actions do require animations (for example, opening inventory while on foot), otherwise they will get cancelled.\n\n**NOTE**: \n* in singleplayer, when user Alt-Tabs the simulation is paused and so the action will also halt until user returns to the game. For example, <sqf inline>player action [\"GetInDriver\", car]; executed while user is Alt-Tabbed will result in the user seeing the action happening when he returns to the game screen. This does not happen in Multiplayer.\n* the alternative syntax creates a temporary Logic entity in place of _unit_.",
            "examples": [
                {
                    "text": "```sqf\nplayer action [\"SitDown\", player];\n```"
                },
                {
                    "text": "```sqf\n_soldier action [\"Eject\", vehicle _soldier];\n```"
                },
                {
                    "text": "```sqf\n\nplayer action [\"UseWeapon\", player, player, 7]; // plays pick up animation before throwing grenade\naction [\"UseWeapon\", player, player, 7]; // normal grenade throw\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "actionArray",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "unit `action` actionArray",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "actionArray",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "`action` actionArray",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/action"
        },
        "configuration": {
            "label": "action",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `Array` of `Number`s, where numbers are IDs of all user actions added to given entity with `addAction` command.",
            "examples": [
                {
                    "text": "```sqf\n_actions = actionIDs player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "`Object` - entity with added user actions"
                        }
                    ],
                    "outline": "`actionIDs` entity",
                    "returns": "`Array` - array with user action IDs"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/actionIDs"
        },
        "configuration": {
            "label": "actionIDs",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `Array` containing [dikCodes](https://community.bistudio.com/wiki/DIK_KeyCodes) of keys, buttons and combos assigned to the given user action. Action names could be found in config class ControllerSchemes or [user action names](https://community.bistudio.com/wiki/%3ACategory%3AKey%20Actions) or user profile, for example:\n```cpp\nkeyWatch[] = { 24 };\n```\nTo retrieve the value, use the property name without 'key':\n\n```sqf\nactionKeys \"Watch\"; // 24\n```\n\nIn addition, some of the actions are also listed in here: [inputAction/actions](https://community.bistudio.com/wiki/inputAction%2Factions)",
            "examples": [
                {
                    "text": "```sqf\n_arrayOfNumbers = actionKeys \"ReloadMagazine\";\n```"
                },
                {
                    "text": "From Arma 3 v2.08: \n```sqf\n_arrayOfStrings = actionKeys [\"ReloadMagazine\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "userAction",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`actionKeys` userAction",
                    "returns": "`Array` of `Number`s"
                },
                {
                    "parameters": [
                        {
                            "name": "userAction",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`actionKeys` [userAction]",
                    "returns": "`Array` of `String`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/actionKeys"
        },
        "configuration": {
            "label": "actionKeys",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gives a broken down version of `actionKeys` return. Returns an `Array` containing the breakdowns of the [dikCodes](https://community.bistudio.com/wiki/DIK_KeyCodes) of keys, buttons and combos assigned to the given user action.\n\nAction names can be found in config class ControllerSchemes or [user action names](https://community.bistudio.com/wiki/%3ACategory%3AKey%20Actions) or user profile (see _Example 1_).\n\nIn addition, some of the actions are also listed here: [inputAction/actions](https://community.bistudio.com/wiki/inputAction%2Factions)\n\nThe Key Device can be one of several types:\n{{Columns|3|\n* `**\"KEYBOARD\"**`\n* `**\"MOUSE_BUTTON\"**`\n* `**\"MOUSE_AXIS\"**`\n* `**\"JOYSTICK_BUTTON\"**`\n* `**\"JOYSTICK_AXIS\"**`\n* `**\"JOYSTICK_POV\"**`\n* `**\"XINPUT\"**` - (Xbox) Controller Input\n* `**\"TRACKER\"**` - Motion Tracking (TrackIR, Tobii etc)\n}}",
            "examples": [
                {
                    "text": "To retrieve the following key's data, use the property name without 'key':\n```cpp\nkeyWatch[] = { 24 };\n```\n\n```sqf\nactionKeysEx \"Watch\"; // [[[24, \"KEYBOARD\"], [], false]]\n```"
                },
                {
                    "text": "```sqf\nprivate _result = actionKeysEx \"OpticsMode\"; // [[[129,\"MOUSE_BUTTON\"],[29,\"KEYBOARD\"],false],[[181,\"KEYBOARD\"],[],false]]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "userAction",
                            "description": "`String` - user action name (see [inputAction/actions](https://community.bistudio.com/wiki/inputAction%2Factions))"
                        }
                    ],
                    "outline": "`actionKeysEx` userAction",
                    "returns": "`Array` of `Array`s in format [mainKeyArray, comboKeyArray, isDoubleTap]:\n* mainKeyArray: `Array` in format [dikCode, device, deviceId]:\n** dikCode: `Number`\n** device: `String`\n** deviceId: `Number` - only given if the device is a Joystick type\n* comboKeyArray: `Array` identical to _mainKeyArray_ - filled only if the action key is a key combination\n** dikCode: `Number`\n** device: `String`\n** deviceId: `Number` - identical to _mainKeyArray_<nowiki/>'s _deviceId_ as it is impossible to use two different Joystick devices in a key combination\n* isDoubleTap: `Boolean` - is the action key a double-tap. In case of a combination key this applies to the main key."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/actionKeysEx"
        },
        "configuration": {
            "label": "actionKeysEx",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a list of button images or names assigned to the given user action.\nA maximum of maxKeys keys is listed.\nYou can find the action names in config class ControllerSchemes or [user action names](https://community.bistudio.com/wiki/%3ACategory%3AKey%20Actions).",
            "examples": [
                {
                    "text": "```sqf\n_text = actionKeysImages \"ReloadMagazine\";\n```"
                },
                {
                    "text": "```sqf\n_reload = actionKeysImages [\"ReloadMagazine\", 1] // will return \"R\" (incl. the quotation marks!)\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "userAction",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`actionKeysImages` userAction",
                    "returns": "[Structured Text](https://community.bistudio.com/wiki/Structured%20Text)"
                },
                {
                    "parameters": [
                        {
                            "name": "userAction",
                            "description": "`String`"
                        },
                        {
                            "name": "maxKeys",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`actionKeysImages` [userAction, maxKeys]",
                    "returns": "[Structured Text](https://community.bistudio.com/wiki/Structured%20Text)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/actionKeysImages"
        },
        "configuration": {
            "label": "actionKeysImages",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a list of button names assigned to the given user action.\nAction names can be found in config class `**ControllerSchemes**` or [user action names](https://community.bistudio.com/wiki/%3ACategory%3AKey%20Actions).",
            "examples": [
                {
                    "text": "```sqf\n_list = actionKeysNames \"ReloadMagazine\"; // \"\"\"R\"\" or \"\"XBox X\"\"\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "userAction",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`actionKeysNames`  userAction",
                    "returns": "`String`"
                },
                {
                    "parameters": [
                        {
                            "name": "userAction",
                            "description": "`String`"
                        },
                        {
                            "name": "maxKeys",
                            "description": "`Number` - maximum number of keys to return"
                        },
                        {
                            "name": "inputDevicePriority",
                            "description": "`String` - result sorted by inputDevicePriority with values:\n* `**\"Mouse\"**`\n* `**\"Keyboard\"**`\n* `**\"Stick\"**`\n* `**\"Gamepad\"**`\n* `**\"Tracker\"**`\n* `**\"Combo\"**` (mouse and keyboard combinations)\n* {{sic|`**\"Controler\"**`}} (any controller other than mouse or keyboard)\nOther values are considered as: \n* `**\"Unsorted\"**`"
                        }
                    ],
                    "outline": "`actionKeysNames` [userAction, maxKeys, inputDevicePriority]",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/actionKeysNames"
        },
        "configuration": {
            "label": "actionKeysNames",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a list of button names assigned to the given user action. You can find the action names in config class ControllerSchemes or [user action names](https://community.bistudio.com/wiki/%3ACategory%3AKey_Actions).",
            "examples": [
                {
                    "text": "```sqf\n_actionList = actionKeysNamesArray \"ReloadMagazine\";\n```"
                },
                {
                    "text": "```sqf\n_actionList = actionKeysNamesArray [\"ReloadMagazine\", 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "userAction",
                            "description": "`String` - name of the action"
                        }
                    ],
                    "outline": "`actionKeysNamesArray`  userAction",
                    "returns": "`Array` of `String`s"
                },
                {
                    "parameters": [
                        {
                            "name": "userAction",
                            "description": "`String` - name of the action"
                        },
                        {
                            "name": "maxKeys",
                            "description": "`Number` - maximum number of keys to return"
                        },
                        {
                            "name": "inputDevicePriority",
                            "description": "`String` - result sorted by `**inputDevicePriority**` with values:\n* `**\"Mouse\"**`\n* `**\"Keyboard\"**`\n* `**\"Stick\"**`\n* `**\"Gamepad\"**`\n* `**\"Tracker\"**`\n* `**\"Combo\"**` (mouse and keyboard combinations)\n* {{sic|`**\"Controler\"**`}} (any controller other than mouse or keyboard)\nOther values are considered as: \n* `**\"Unsorted\"**`"
                        }
                    ],
                    "outline": "`actionKeysNamesArray` [userAction, maxKeys, inputDevicePriority]",
                    "returns": "`Array` of `String`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/actionKeysNamesArray"
        },
        "configuration": {
            "label": "actionKeysNamesArray",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns localized name of action.",
            "examples": [
                {
                    "text": "```sqf\nactionName \"ReloadMagazine\"; // returns \"Reload\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "action",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`actionName` action",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/actionName"
        },
        "configuration": {
            "label": "actionName",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Make a unit perform an action immediately (without any animation/pre-processing). See the `action` command for more information.",
            "examples": [
                {
                    "text": "```sqf\nplayer actionNow [\"TakeBag\", _backpack]; // pick up a backpack without any animation\n```"
                },
                {
                    "text": "```sqf\nplayer actionNow [\"Gear\", vehicle player]; // open inventory while in vehicle\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "actionArray",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "unit `actionNow` actionArray",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "actionArray",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "`actionNow` actionArray",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/actionNow"
        },
        "configuration": {
            "label": "actionNow",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `Array` with params for given user action id (similar to `addAction` param array).",
            "examples": [
                {
                    "text": "```sqf\n_params = player actionParams 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "`Object` - entity with added user actions"
                        },
                        {
                            "name": "id",
                            "description": "`Number` - id of existing user action (returned by `addAction` or `actionIDs`)"
                        }
                    ],
                    "outline": "entity `actionParams` id",
                    "returns": "`Array` in format [title, script, arguments, priority, showWindow, hideOnUse, shortcut, condition, radius, unconscious, textWindowBackground, textWindowForeground, selection, memoryPoint]:\n{{Columns|2|\n* title: `String` - action title text\n* script: `String` - script file or script expression assigned to the action\n* arguments: `Anything` or `nil` - arguments passed to the action\n* priority: `Number` - action priority on the action menu\n* showWindow: `Boolean` - whether the action is shown in the center of the screen too\n* hideOnUse: `Boolean` - whether the action menu should close after selecting the action \n* shortcut: `String` - action bindings to some existing engine action if any\n* condition: `String` - expression returning `true` or `nil` for action to appear on the action menu\n* radius: `Number` - max distance to entity at which action becomes available. -1 means it is engine default (~15m)\n* unconscious: `Boolean` - whether the action is available to [unconscious](https://community.bistudio.com/wiki/setUnconscious) person\n* textWindowBackground: `String` - same as textWindowBackground in `setUserActionText`\n* textWindowForeground: `String` - same as textWindowForeground in `setUserActionText`\n* selection: `String` - named selection in Geometry LOD to which the action is attached\n* memoryPoint: `String` - memory point on the object to which the action is attached\n}}\nIf _entity_ is `objNull`, the following array is returned:\n\n```sqf\n[\"\", \"\", nil, 1.5, true, true, \"\", \"\", 50, false, \"\", \"\", \"\", \"\"]\n```\n\n\n(returned `Nothing` until Arma 3 v1.94)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/actionParams"
        },
        "configuration": {
            "label": "actionParams",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Activates the listed addons.",
            "examples": [
                {
                    "text": "```sqf\nactivateAddons [\"BISOFP\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "addonsList",
                            "description": "`Array` of `String`s"
                        }
                    ],
                    "outline": "`activateAddons` addonsList",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/activateAddons"
        },
        "configuration": {
            "label": "activateAddons",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a list of all activated addons.",
            "examples": [
                {
                    "text": "```sqf\n_addons = activatedAddons;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**activatedAddons**",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/activatedAddons"
        },
        "configuration": {
            "label": "activatedAddons",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Activates the given keyname for the current user profile. The keys are used to unlock missions or campaigns.\nSee <syntaxhighlight lang=\"cpp\" inline>keys</syntaxhighlight>, <syntaxhighlight lang=\"cpp\" inline>keysLimit</syntaxhighlight> and <syntaxhighlight lang=\"cpp\" inline>doneKeys</syntaxhighlight> in the [[Description.ext#Mission Keys]] chapter.",
            "examples": [
                {
                    "text": "```sqf\nactivateKey \"Mission04Key\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "keyname",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`activateKey` keyname",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/activateKey"
        },
        "configuration": {
            "label": "activateKey",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns type, effect, speed and map visibility of the given active title effect (see `allActiveTitleEffects`)",
            "examples": [
                {
                    "text": "```sqf\n\n21 cutText [\"Hello World!\", \"PLAIN\", 2];\nhint str activeTitleEffectParams 21; // [\"TXT\", \"PLAIN\", 2, true]\n\n```"
                },
                {
                    "text": "```sqf\n\ntitleText [\"Hello World!\", \"BLACK\"];\nhint str activeTitleEffectParams -1; // [\"TXT\", \"BLACK\", 1, true]\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`activeTitleEffectParams` layer",
                    "returns": "`Array` in format [type, effect, speed, showInMap] or [], where:\n* type: `String` - type of effect, can be `**\"OBJ\"**`, `**\"RSC\"**` or `**\"TXT\"**`\n* effect: `String` - [Title Effect Type](https://community.bistudio.com/wiki/Title%20Effect%20Type) (`**\"PLAIN\"**`, `**\"BLACK OUT\"**` etc)\n* speed: `Number` - effect speed multiplier\n* showInMap: `Boolean` - `true` if effect is available over map"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/activeTitleEffectParams"
        },
        "configuration": {
            "label": "activeTitleEffectParams",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "[Connect](https://community.bistudio.com/wiki/Eden%20Editor%3A%20Connecting) entities together.",
            "examples": [
                {
                    "text": "```sqf\nadd3DENConnection [\"RandomStart\", get3DENSelected \"Object\", \"marker_0\"];// Set random start on marker \"marker_0\" for all selected objects.\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`String` - connection class from _Cfg3DEN >> Connections_"
                        },
                        {
                            "name": "from",
                            "description": "`Array` of [Eden Entities](https://community.bistudio.com/wiki/Eden%20Entity) - entities which are being connected"
                        },
                        {
                            "name": "to",
                            "description": "[Eden Entity](https://community.bistudio.com/wiki/Eden%20Entity) - entity to which entities will be connected to"
                        }
                    ],
                    "outline": "`add3DENConnection` [type, from, to]",
                    "returns": "`Boolean` - `true` If the connection was made"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/add3DENConnection"
        },
        "configuration": {
            "label": "add3DENConnection",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds an [Eden Editor Event Handler](https://community.bistudio.com/wiki/Arma%203%3A%20Event%20Handlers%3A%20Eden%20Editor).",
            "examples": [
                {
                    "text": "```sqf\nprivate _ehID = add3DENEventHandler [\"onUndo\", { systemChat \"Zip...\" }];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`String` - see [Eden Editor Event Handler](https://community.bistudio.com/wiki/Arma%203%3A%20Event%20Handlers%3A%20Eden%20Editor)"
                        },
                        {
                            "name": "code",
                            "description": "`Code`\n* Event Handler parameters are accessible via <sqf inline>_this\n* The Event Handler type is available as <sqf inline>_thisEvent\n* The Event Handler index is available as <sqf inline>_thisEventHandler"
                        }
                    ],
                    "outline": "`add3DENEventHandler` [type, code]",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/add3DENEventHandler"
        },
        "configuration": {
            "label": "add3DENEventHandler",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds an editing layer in [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor).",
            "examples": [
                {
                    "text": "```sqf\n_myLayer = -1 add3DENLayer \"Enemy Base\";\n_myLayerFort = _myLayer add3DENLayer \"Fortifications\";\n_myLayerPatrol = _myLayer add3DENLayer \"Patrols\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "parentLayerID ",
                            "description": "`Number` - ID of the parent layer. No layer will be created when the ID does not point to a layer. Use `**-1**` to create the layer to root."
                        },
                        {
                            "name": "name",
                            "description": "`String` - layer display name"
                        }
                    ],
                    "outline": "parentLayerID `add3DENLayer`  name",
                    "returns": "`Number` - layer ID"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/add3DENLayer"
        },
        "configuration": {
            "label": "add3DENLayer",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds a backpack for a unit. If a unit already has a backpack, the old backpack will be placed on the ground under the unit. Items defined in the backpack's config will be added as well.\n**NOTE**: \nClassname list of available backpacks:\n* [Arma 2 OA backpacks](https://community.bistudio.com/wiki/Arma%202%20OA%3A%20Backpacks)\n* [Arma 3 backpacks](https://community.bistudio.com/wiki/Arma%203%3A%20CfgVehicles%20EMPTY) - objects starting with \"B_\", starts with \"_B_AssaultPack_khk_\"",
            "examples": [
                {
                    "text": "```sqf\nthis addBackpack \"TK_RPG_Backpack_EP1\";\n```"
                },
                {
                    "text": "```sqf\n_mySoldierDude addBackpack \"US_Patrol_Pack_EP1\";\n```"
                },
                {
                    "text": "```sqf\n_mySoldierDude addBackpack \"B_AssaultPack_mcamo_Ammo\";// Adds backpack prefilled with items defined in its config\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "backpackClassName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `addBackpack` backpackClassName",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addBackpack"
        },
        "configuration": {
            "label": "addBackpack",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Add backpack(s) to the cargo space of vehicle. Classname list of available backpacks is [here](https://community.bistudio.com/wiki/Arma%202%3A%20Operation%20Arrowhead%3A%20Backpacks).\nFor a list of possible backpacks, see:\n* **(Arma 2)** [Arma 2: Operation Arrowhead: Backpacks](https://community.bistudio.com/wiki/Arma%202%3A%20Operation%20Arrowhead%3A%20Backpacks)\n* **(Arma 3)** [Arma 3: CfgVehicles Equipment](https://community.bistudio.com/wiki/Arma%203%3A%20CfgVehicles%20Equipment) (starting with `**B_**`)\n**Arma 3**: In Arma 3, arguments for this command are local {{Icon|localArgument|32}}. For the global variant, see `addBackpackCargoGlobal`.",
            "examples": [
                {
                    "text": "```sqf\nthis addBackpackCargo [\"TK_RPG_Backpack_EP1\", 2];\n```"
                },
                {
                    "text": "```sqf\n_apc addBackpackCargo [\"US_Patrol_Pack_EP1\", 4];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - vehicle to add the backpack to"
                        },
                        {
                            "name": "backpackClassName",
                            "description": "`String` - backpack classname"
                        },
                        {
                            "name": "count",
                            "description": "`Number` - number of backpacks to add. Since Arma 3 v2.14, negative count will remove backpacks."
                        }
                    ],
                    "outline": "vehicle `addBackpackCargo` [backpackClassName, count]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addBackpackCargo"
        },
        "configuration": {
            "label": "addBackpackCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Add backpack(s) to the cargo space of vehicle.\n**NOTE**: \nClassname list of available backpacks:\n* [[Arma 2: Operation Arrowhead: Backpacks|{{Name|arma2oa|short}} backpacks]]\n* [[Arma 3: CfgVehicles Equipment|Arma 3 backpacks]] - objects starting with \"B_\", starts near {{Link|Arma 3: CfgVehicles Equipment#Bag Base|\"B_AssaultPack_khk\"}}",
            "examples": [
                {
                    "text": "```sqf\nthis addBackpackCargoGlobal [\"TK_RPG_Backpack_EP1\", 2];\n```"
                },
                {
                    "text": "```sqf\n_apc addBackpackCargoGlobal [\"US_Patrol_Pack_EP1\", 4];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - object to add the Backpack to"
                        },
                        {
                            "name": "packClassName",
                            "description": "`String` - see the topic [:Category:Weapons](https://community.bistudio.com/wiki/%3ACategory%3AWeapons) for reference about possible values."
                        },
                        {
                            "name": "count",
                            "description": "`Number` - number of backpacks to add; {{GVI|arma3|2.14"
                        }
                    ],
                    "outline": "vehicle `addBackpackCargoGlobal` [packClassName, count]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addBackpackCargoGlobal"
        },
        "configuration": {
            "label": "addBackpackCargoGlobal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds a backpack to a unit (even non-local).**WARNING**: Beware, the backpack added with this command will be created on the PC [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality) to the unit you are adding it to, even if executed on the server. Because of this, if non-local unit is the target and one tries to immediately access added backpack, the backpack returned will be [ Null](https://community.bistudio.com/wiki/objNull%20). When adding backpack dynamically to a remote unit, wait until backpack is added (See Example 2)",
            "examples": [
                {
                    "text": "```sqf\nplayer addBackpackGlobal \"B_AssaultPack_khk\";\n```"
                },
                {
                    "text": "```sqf\n_unit spawn \n{\n\tif (!isNull backpackContainer _this) then\n\t{\n\t\tremoveBackpackGlobal _this;\n\t\twaitUntil { isNull backpackContainer _this };\n\t};\n\t_this addBackpackGlobal \"B_AssaultPack_khk\";\n\twaitUntil { !isNull backpackContainer _this };\n\tbackpackContainer _this addMagazineCargoGlobal [\"30Rnd_556x45_Stanag\",5];\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - soldier"
                        },
                        {
                            "name": "backpack",
                            "description": "`String` - backpack class name"
                        }
                    ],
                    "outline": "unit `addBackpackGlobal` backpack",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addBackpackGlobal"
        },
        "configuration": {
            "label": "addBackpackGlobal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds weapon item, including magazine, directly to the `binocular` weapon. This is used for infantry weapons.",
            "examples": [
                {
                    "text": "```sqf\nplayer addBinocularItem \"Laserbatteries\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "item",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `addBinocularItem` item",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addBinocularItem"
        },
        "configuration": {
            "label": "addBinocularItem",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates the camera shaking effect, like when you are near an explosion",
            "examples": [
                {
                    "text": "```sqf\naddCamShake [10, 2, 25]; // Shakes the camera for 1 second\n```"
                },
                {
                    "text": "```sqf\nenableCamShake true;\naddCamShake [5, 5, 25];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "power",
                            "description": "`Number` - strength of shake (camera movement), practical range is 0 to 20"
                        },
                        {
                            "name": "duration",
                            "description": "`Number` - duration in seconds divided by 2"
                        },
                        {
                            "name": "frequency",
                            "description": "`Number` - frequency of shake, practical range is 0 to 100"
                        }
                    ],
                    "outline": "`addCamShake` [power, duration, frequency]",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addCamShake"
        },
        "configuration": {
            "label": "addCamShake",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Allow curator use of given addon.",
            "examples": [
                {
                    "text": "```sqf\ncuratorObj addCuratorAddons [\"A3_Armor_F_AMV\",\"A3_Armor_F_Panther\"];\n```"
                },
                {
                    "text": "```sqf\ncuratorObj addCuratorAddons [\"A3_Modules_F_Curator_Lightning\"];\n```"
                },
                {
                    "text": "Addons can be stacked:\n\n```sqf\ncuratorObj addCuratorAddons [\"A3_Armor_F_AMV\",\"A3_Armor_F_Panther\"];\ncuratorObj addCuratorAddons [\"A3_Modules_F_Curator_Lightning\"];\ndiag_log curatorAddons curatorObj;\n```\n\n\n\n\n```sqf\n[\n\t\"A3_Armor_F_AMV\",\n\t\"A3_Armor_F_Panther\",\n\t\"A3_Modules_F_Curator_Lightning\"\n]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curatorObj",
                            "description": "`Object` - curator module."
                        },
                        {
                            "name": "addons",
                            "description": "`Array` of CfgPatches classes"
                        }
                    ],
                    "outline": "curatorObj `addCuratorAddons` addons",
                    "returns": "`Nothing`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/addCuratorAddons"
        },
        "configuration": {
            "label": "addCuratorAddons",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds or changes curator camera area (depends on if ID is already used).",
            "examples": [
                {
                    "text": "```sqf\nmyCurator addCuratorCameraArea [3,position mySoldier,300];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curatorObj",
                            "description": "`Object` - curator module."
                        },
                        {
                            "name": "cameraAreaID",
                            "description": "`Number`"
                        },
                        {
                            "name": "position",
                            "description": "`Position`"
                        },
                        {
                            "name": "radius",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "curatorObj `addCuratorCameraArea` [cameraAreaID, position, radius]",
                    "returns": "`Nothing`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/addCuratorCameraArea"
        },
        "configuration": {
            "label": "addCuratorCameraArea",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Register objects which can be edited by a curator.",
            "examples": [
                {
                    "text": "```sqf\nMyCuratorModule addCuratorEditableObjects [[MyCar], true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curatorObj",
                            "description": "`Object` - curator module"
                        },
                        {
                            "name": "objects",
                            "description": "`Array`"
                        },
                        {
                            "name": "addCrew",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "curatorObj `addCuratorEditableObjects` [objects, addCrew]",
                    "returns": "`Nothing`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/addCuratorEditableObjects"
        },
        "configuration": {
            "label": "addCuratorEditableObjects",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds or changes curator edit area (depends on if ID is already used).",
            "examples": [
                {
                    "text": "```sqf\nmyCurator addCuratorEditingArea [4, position player, 1000];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curatorObj",
                            "description": "`Object` - curator module."
                        },
                        {
                            "name": "editAreaID",
                            "description": "`Number`"
                        },
                        {
                            "name": "position",
                            "description": "`Position`"
                        },
                        {
                            "name": "radius",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "curatorObj `addCuratorEditingArea` [editAreaID, position, radius]",
                    "returns": "`Nothing`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/addCuratorEditingArea"
        },
        "configuration": {
            "label": "addCuratorEditingArea",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds or removes curator points. Points can be only in range from 0 to 1.",
            "examples": [
                {
                    "text": "```sqf\ncuratorModule addCuratorPoints 0.5;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curatorObj",
                            "description": "`Object` - curator module."
                        },
                        {
                            "name": "points",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "curatorObj `addCuratorPoints` points",
                    "returns": "`Nothing`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/addCuratorPoints"
        },
        "configuration": {
            "label": "addCuratorPoints",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Add items to the selected curator items.",
            "examples": [
                {
                    "text": "```sqf\naddCuratorSelected [unit1, group1, [group1, waypointIndex], markerName1];\n```"
                },
                {
                    "text": "```sqf\naddCuratorSelected [vehicle1, unit1, unit2, unit3, unit4, group1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "items",
                            "description": "`Array` - items to add; items can be an `Object`, `Group`, `Array` format `Waypoint`, or `String` (marker)"
                        }
                    ],
                    "outline": "`addCuratorSelected` items",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/addCuratorSelected"
        },
        "configuration": {
            "label": "addCuratorSelected",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Add an object to the editor and assign arguments. Create script is,called with _new equal to true. Returns the ID of the new EditorObject.,Subtype class is optional. \n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "[type,[name1,value1,...],subtype class]",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "map `addEditorObject` [type,[name1,value1,...],subtype class]",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/addEditorObject"
        },
        "configuration": {
            "label": "addEditorObject",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds an Event Handler to the given object.\n* As many Event Handlers of any type can be added - existing Event Handlers do not get overwritten\n* Use `removeEventHandler` to remove an Event Handler\nRead [Event Handlers](https://community.bistudio.com/wiki/%3ACategory%3AEvent%20Handlers) for more information and a list of all available Event Handlers.",
            "examples": [
                {
                    "text": "```sqf\n\nthis addEventHandler [\"Killed\", {\n\tparams [\"_unit\", \"_killer\"];\n\tsystemChat format [\"%1 has been killed by %2.\", _unit, _killer];\n}];\n\n```"
                },
                {
                    "text": "<sqs>_index = player addEventHandler [\"Killed\", { _this exec \"playerKilled.sqs\" }]</sqs>"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Object` or {{GVI|arma3|2.10"
                        },
                        {
                            "name": "type",
                            "description": "`String` - see [Event Handlers](https://community.bistudio.com/wiki/%3ACategory%3AEvent%20Handlers) for the full list of available options"
                        },
                        {
                            "name": "code",
                            "description": "`Code` or `String` - code that should be executed when the Event Handler fires; executed in `missionNamespace` by default. Several [Magic Variables](https://community.bistudio.com/wiki/Magic%20Variables) are available:\n* Event Handler parameters are accessible via <sqf inline>_this\n* The Event Handler type is available as <sqf inline>_thisEvent\n* The Event Handler index is available as <sqf inline>_thisEventHandler"
                        }
                    ],
                    "outline": "target `addEventHandler` [type, code]",
                    "returns": "`Number` - the index of the added Event Handler. Indices start at 0 for each unit and increment with each added Event Handler."
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addEventHandler"
        },
        "configuration": {
            "label": "addEventHandler",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Applies impulse force to unit or given PhysX object at given position.\n**NOTE**: For more information see {{Link|http://docs.nvidia.com/gameworks/content/gameworkslibrary/physx/apireference/files/classPxRigidBody.html|NVIDIA docs}}.",
            "examples": [
                {
                    "text": "Apply force [0,1000,0] defined in world space (not factoring object actual positioning) to object position [1,0,0]:\n\n```sqf\n_object addForce [[0,1000,0], [1,0,0]];\n```"
                },
                {
                    "text": "Apply force [0,1000,0] defined in model space (relative to object) to object position [1,0,0]:\n\n```sqf\n_object addForce [_object vectorModelToWorld [0,1000,0], [1,0,0]];\n```"
                },
                {
                    "text": "Can be used on units since Arma 3 v2.04:\n\n```sqf\n\nif (local bob) then\n{\n\t0 spawn \n\t{\n\t\tbob addForce [bob vectorModelToWorld [0,-200,0], bob selectionPosition \"rightfoot\"];\n\t\tsleep 5;\n\t\tbob setUnconscious false;\n\t};\n};\n\n```"
                },
                {
                    "text": "```sqf\n\nplayer addForce [player vectorModelToWorld [0, -1, 0], [0, 1, 0], false]; // not unconscious\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - PhysX object or {{GVI|arma3|2.04"
                        },
                        {
                            "name": "force",
                            "description": "`Array` - in format [x,y,z], force vector in **world** space; force is expressed in {{Link|https://docs.nvidia.com/gameworks/content/gameworkslibrary/physx/apireference/files/structPxForceMode.html|Newton}}"
                        },
                        {
                            "name": "position",
                            "description": "`Array` - in format [x,y,z], in _object_<nowiki/>'s [relative position](https://community.bistudio.com/wiki/Position%23PositionRelative)"
                        },
                        {
                            "name": "setUnconscious",
                            "description": "`Boolean` - (Optional, default `true`) only applies to \"CAManBase\" _object_; set to `false` to keep the person conscious"
                        }
                    ],
                    "outline": "object `addForce` [force, position, setUnconscious]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addForce"
        },
        "configuration": {
            "label": "addForce",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds force generator to world. {{Feature|afm}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "parameters",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "`addForceGeneratorRTD` parameters",
                    "returns": "`Number` - force index"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/addForceGeneratorRTD"
        },
        "configuration": {
            "label": "addForceGeneratorRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Create a new item and try to link it into goggles (glasses) slot.\n**NOTE**:  This command does **not** add NVGs, which are `hmd` slot items (see `linkItem` instead).",
            "examples": [
                {
                    "text": "```sqf\nplayer addGoggles \"G_Tactical_Clear\";\n```"
                },
                {
                    "text": "```sqf\ndiver addGoggles \"G_Diving\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "type",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `addGoggles` type",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/addGoggles"
        },
        "configuration": {
            "label": "addGoggles",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds icon to a group leader. Returns icon ID, Control icons visibility with `setGroupIconsVisible`.",
            "examples": [
                {
                    "text": "```sqf\ngroupName addGroupIcon [\"b_inf\", [offsetX, offsetY]];\n```"
                },
                {
                    "text": "```sqf\n\n// enable icons in 2D and 3D\nsetGroupIconsVisible [true, true];\nsetGroupIconsSelectable true;\n\n// add the icon for all existing groups\nallGroups apply\n{\n\tprivate _icon = [\"o_inf\", \"b_inf\", \"n_inf\", \"c_unknown\"] select (side _x call BIS_fnc_sideID);\n\tprivate _color = [side _x, false] call BIS_fnc_sideColor;\n\t_x addGroupIcon [_icon, [0, 0]];\n\t_x setGroupIconParams [_color, groupID _x, linearConversion [1, 15, count units _x, 0.5, 3, false], true];\n};\n\n// add group event handler to all existing groups to handle to icon sizing\nallGroups apply\n{\n\t_x addEventHandler [\"UnitLeft\",\n\t{\n\t\tparams [\"_group\"];\n\t\tgetGroupIconParams group player params [\"_color\", \"_text\", \"_scale\", \"_visibility\"];\n\t\t_group setGroupIconParams [_color, _text, linearConversion [1, 15, count units _group, 0.5, 2, true], _visibility];\n\t}];\n};\n\n// add the icons whenever a group gets created\naddMissionEventHandler [\"GroupCreated\",\n{\n\tparams [\"_group\"];\n\t_group spawn\n\t{\n\t\tparams [\"_group\"];\n\t\tprivate _start = diag_tickTime;\n\t\twaitUntil {sleep 1; units _group isNotEqualTo [] || diag_tickTime - _start > 5};\n\t\tif (units _group isEqualTo []) exitWith {};\n\n\t\tprivate _icon = [\"o_inf\", \"b_inf\", \"n_inf\", \"c_unknown\"] select (side _group call BIS_fnc_sideID);\n\t\tprivate _color = [side _group, false] call BIS_fnc_sideColor;\n\n\t\t_group addGroupIcon [_icon, [0, 0]];\n\n\t\t// scale icon depending on group size\n\t\t_group setGroupIconParams [_color, groupID _group, linearConversion [1, 15, count units _group, 0.5, 2, true], true];\n\n\t\t_group addEventHandler [\"UnitLeft\",\n\t\t{\n\t\t\tparams [\"_group\"];\n\t\t\tgetGroupIconParams group player params [\"_color\", \"_text\", \"_scale\", \"_visibility\"];\n\t\t\t_group setGroupIconParams [_color, _text, linearConversion [1, 15, count units _group, 0.5, 2, true], _visibility];\n\t\t}];\n\t};\n}];\n\n// show group info when hovering over an icon (2D/3D)\naddMissionEventHandler [\"GroupIconOverEnter\",\n{\n\tparams\n\t[\n\t\t\"_is3D\", \"_group\", \"_waypointId\",\n\t\t\"_posX\", \"_posY\",\n\t\t\"_shift\", \"_control\", \"_alt\"\n\t];\n\thintSilent parseText format\n\t[\n\t\t\"<t align='left' font='EtelkaMonospacePro'><br/><t size='1.2'>General Information:</t><br/>Callsign: %1<br/>Leader: %2<br/>No. of Units: %3<br/>Delete when Empty: %4<br/><br/><t size='1.2'>Group Status:</t><br/>Health: %5<br/>Fleeing: %6<br/>Attack Enabled: %7<br/>Combat Behaviour: %8<br/>Combat Mode: %9<br/>Formation: %10<br/>Speed: %11<br/><br/><t size='1.2'>Waypoints:</t><br/>No. of Waypoints: %12<br/>Current Waypoint: %13<br/>Speed: %14</t>\",\n\t\tformat [\"%1 (%2)\",groupID _group, if (vehicle leader _group isNotEqualTo leader _group) then {[configFile >> \"CfgVehicles\" >> typeOf vehicle leader _group] call BIS_fnc_displayName} else {\"-\"}],\n\t\tname leader _group,\n\t\tcount units _group,\n\t\tisGroupDeletedWhenEmpty _group,\n\t\tunits _group apply {str round ((1 - damage _x)* 100) + \" %\"},\n\t\tfleeing leader _x,\n\t\tattackEnabled _group,\n\t\tcombatBehaviour _group,\n\t\tcombatMode _group,\n\t\tformation _group,\n\t\tspeedMode _group,\n\t\tcount waypoints _group,\n\t\twaypointType [_group, currentWaypoint _group],\n\t\tunits _group apply {str round speed _x + \" km/h\"}\n\t];\n\n\tif !(_group getVariable [\"IconEnlarged\", false]) then\n\t{\n\t\t_group setVariable [\"IconEnlarged\", true];\n\n\t\tgetGroupIconParams _group params [\"_color\", \"_text\", \"_scale\", \"_visibility\"];\n\t\t_group setGroupIconParams [_color, _text, _scale * 1.25, _visibility];\n\t};\n}];\n\n// remove the hint whenever the mouse is leaving the icon area (2D/3D)\naddMissionEventHandler [\"GroupIconOverLeave\",\n{\n\tparams\n\t[\n\t\t\"_is3D\", \"_group\", \"_waypointId\",\n\t\t\"_posX\", \"_posY\",\n\t\t\"_shift\", \"_control\", \"_alt\"\n\t];\n\thintSilent \"\";\n\n\tif (_group getVariable [\"IconEnlarged\", false]) then\n\t{\n\t\t_group setVariable [\"IconEnlarged\", false];\n\n\t\tgetGroupIconParams _group params [\"_color\", \"_text\", \"_scale\", \"_visibility\"];\n\t\t_group setGroupIconParams [_color, _text, linearConversion [1, 15, count units _group, 0.5, 2, true], _visibility];\n\t};\n}];\n\n// delete group and its units when clicking on the icon\naddMissionEventHandler [\"GroupIconClick\",\n{\n\tparams\n\t[\n\t\t\"_is3D\", \"_group\", \"_waypointId\",\n\t\t\"_mouseButton\", \"_posX\", \"_posY\",\n\t\t\"_shift\", \"_control\", \"_alt\"\n\t];\n\n\tif (!_shift && _control && !_alt) then\n\t{\n\t\tunits _group apply {deleteVehicle _x};\n\t\tdeleteGroup _group;\n\t};\n}];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group` - group to which add the icon"
                        },
                        {
                            "name": "iconClass",
                            "description": "`String` - class name of an icon from `**CfgGroupIcons**`"
                        },
                        {
                            "name": "offset",
                            "description": "`Array` of `Number`s - (Optional, default [0,0]) X and Y offsets of the icon in format [offsetX, offsetY]"
                        }
                    ],
                    "outline": "group `addGroupIcon` [iconClass, offset]",
                    "returns": "`Number` - icon ID"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addGroupIcon"
        },
        "configuration": {
            "label": "addGroupIcon",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds weapon item, including magazine, directly to the `handgunWeapon`. This is used for infantry weapons.",
            "examples": [
                {
                    "text": "```sqf\nplayer addHandgunItem \"muzzle_snds_L\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "item",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `addHandgunItem` item",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addHandgunItem"
        },
        "configuration": {
            "label": "addHandgunItem",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates a headgear item and tries to link it to headgear slot. If slot is occupied with another item, the item in the slot will be replaced.",
            "examples": [
                {
                    "text": "```sqf\nplayer addHeadgear \"H_HelmetB\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "item",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `addHeadgear` item",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addHeadgear"
        },
        "configuration": {
            "label": "addHeadgear",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates new item and tries to add it into inventory. Inventory must have enough space to accomodate new item or command will fail.The item can also be a weapon or a magazine.",
            "examples": [
                {
                    "text": "```sqf\n// identical to bluforUnit linkItem \"NVGoggles\"\n// addItem then assignItem makes the item go through through inventory storage and fail if storage space was missing\nbluforUnit addItem \"NVGoggles\";\nbluforUnit assignItem \"NVGoggles\";\n\nopforUnit addItem \"NVGoggles_OPFOR\";\nopforUnit assignItem \"NVGoggles_OPFOR\";\n\nindependentUnit addItem \"NVGoggles_INDEP\";\nindependentUnit assignItem \"NVGoggles_INDEP\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "item",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `addItem` item",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addItem"
        },
        "configuration": {
            "label": "addItem",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates new items and stores them in given container.\nWorks with [items](https://community.bistudio.com/wiki/Arma%203%3A%20CfgWeapons%20Items), [weapons](https://community.bistudio.com/wiki/Arma%203%3A%20CfgWeapons_Weapons), [magazines](https://community.bistudio.com/wiki/Arma%203%3A%20CfgMagazines), [equipment](https://community.bistudio.com/wiki/Arma%203%3A%20CfgWeapons%20Equipment) and [glasses](https://community.bistudio.com/wiki/Arma%203%3A%20Characters%20And%20Gear%20Encoding%20Guide%23Facewear%20configuration) but not backpacks.\nIn the latter case use `addBackpackCargo` instead. For the global variant, see `addItemCargoGlobal`.",
            "examples": [
                {
                    "text": "```sqf\nsupplyBox addItemCargo [\"optic_ARCO\", 10];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "box",
                            "description": "`Object`"
                        },
                        {
                            "name": "item",
                            "description": "`String`"
                        },
                        {
                            "name": "count",
                            "description": "`Number` - number of items to add; {{GVI|arma3|2.14"
                        }
                    ],
                    "outline": "box `addItemCargo` [item, count]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addItemCargo"
        },
        "configuration": {
            "label": "addItemCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Global variant of `addItemCargo`.",
            "examples": [
                {
                    "text": "```sqf\nsupplyBox addItemCargoGlobal [\"optic_Arco\", 10];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "box",
                            "description": "`Object`"
                        },
                        {
                            "name": "item",
                            "description": "`String`"
                        },
                        {
                            "name": "count",
                            "description": "`Number` - number of items to add. Since Arma 3 v2.14, negative count will remove items."
                        }
                    ],
                    "outline": "box `addItemCargoGlobal` [item, count]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addItemCargoGlobal"
        },
        "configuration": {
            "label": "addItemCargoGlobal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds count items of type name into the weapon pool (used in the campaign to transfer items to the next mission)",
            "examples": [
                {
                    "text": "```sqf\naddItemPool [\"ItemGPS\", 5];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "itemName",
                            "description": "`String` - item name"
                        },
                        {
                            "name": "count",
                            "description": "`Number` - number of items to add"
                        }
                    ],
                    "outline": "`addItemPool` [itemName, count]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/addItemPool"
        },
        "configuration": {
            "label": "addItemPool",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Create new item and store it to soldier's backpack. The item can also be a weapon or a magazine.",
            "examples": [
                {
                    "text": "```sqf\nplayer addItemToBackpack \"arifle_MXM_Hamr_pointer_F\";\n```"
                },
                {
                    "text": "```sqf\nplayer addItemToBackpack \"itemGPS\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "item",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `addItemToBackpack` item",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addItemToBackpack"
        },
        "configuration": {
            "label": "addItemToBackpack",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Create new item and store it to soldier's uniform. The item can also be a weapon or a magazine.",
            "examples": [
                {
                    "text": "```sqf\nplayer addItemToUniform \"itemGPS\";\n```"
                },
                {
                    "text": "```sqf\nplayer addItemToUniform \"hgun_Rook40_F\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "item",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `addItemToUniform` item",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addItemToUniform"
        },
        "configuration": {
            "label": "addItemToUniform",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Create new item and store it to soldier's vest. The item can also be a weapon or a magazine.",
            "examples": [
                {
                    "text": "```sqf\nplayer addItemToVest \"itemGPS\";\n```"
                },
                {
                    "text": "```sqf\nplayer addItemToVest \"hgun_Rook40_F\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "item",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `addItemToVest` item",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addItemToVest"
        },
        "configuration": {
            "label": "addItemToVest",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds score to the Xbox Live Statistics score for the given unit (or the commander unit of the given vehicle).",
            "examples": [
                {
                    "text": "```sqf\nplayer addLiveStats 10;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "score",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "unit `addLiveStats` score",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/addLiveStats"
        },
        "configuration": {
            "label": "addLiveStats",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds a magazine to a person. Infantry units can only carry a specific number of magazines, once the magazine slots are filled (or uniform/vest/bagpack are full in Arma 3), any further `addMagazine` commands are ignored.\nIf class of magazine does not exist, an error message is printed in {{Link|Crash Files|.rpt}}:\n\n```sqf\nplayer addMagazine \"dasdsa\"; // .rpt: Given magazine[dasdsa] not found\n```\n\n**NOTE**: Use `addMagazine` _before_ `addWeapon` for the weapon to be loaded with the magazine automatically.",
            "examples": [
                {
                    "text": "```sqf\nplayer addMagazine \"30Rnd_556x45_STANAG\";\n```"
                },
                {
                    "text": "```sqf\nplayer addMagazine [\"30Rnd_556x45_STANAG\", 15];\t\t\t// since {{Name|arma2oa|short}} 1.62\n```"
                },
                {
                    "text": "```sqf\nnonLocalUnit addMagazine [\"30Rnd_556x45_STANAG\", 15];\t// global argument since {{arma3}}\n```"
                },
                {
                    "text": "```sqf\nplayer addMagazine [\"30Rnd_556x45_STANAG\", 9999];\t\t// will give a 30 rounds magazine anyway\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object` - person to add the magazines to"
                        },
                        {
                            "name": "magazineName",
                            "description": "`String` - magazine name. See the topic [:Category:Weapons](https://community.bistudio.com/wiki/%3ACategory%3AWeapons) for reference about possible values."
                        }
                    ],
                    "outline": "unitName `addMagazine` magazineName\n\n{{Icon|localArgument|32}}{{Icon|globalEffect|32}}",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object` - person to add the magazines to"
                        },
                        {
                            "name": "magazineName",
                            "description": "`String` - magazine name. See the topic [:Category:Weapons](https://community.bistudio.com/wiki/%3ACategory%3AWeapons) for reference about possible values."
                        },
                        {
                            "name": "ammoCount",
                            "description": "`Number` - ammo quantity to be added to magazine. If it goes beyond maximum magazine capacity, the magazine will be given full and not overloaded."
                        }
                    ],
                    "outline": "unitName `addMagazine` [magazineName, ammoCount]\n\n**(Arma 2: Operation Arrowhead)** {{Icon|localArgument|32}}{{Icon|globalEffect|32}}\n\n**(Arma 3)** {{Icon|globalArgument|32}}{{Icon|globalEffect|32}}",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/addMagazine"
        },
        "configuration": {
            "label": "addMagazine",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds magazines with specified ammo count to the cargo space of a vehicle or a container.",
            "examples": [
                {
                    "text": "```sqf\n_ammobox addMagazineAmmoCargo [\"30Rnd_65x39_caseless_mag\", 2, 5];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "cargospace",
                            "description": "`Object` - vehicle or container or weaponholder"
                        },
                        {
                            "name": "magazine",
                            "description": "`String` - magazine class name"
                        },
                        {
                            "name": "quantity",
                            "description": "`Number` - number of magazines to add. Since Arma 3 v2.14, negative count will remove magazines."
                        },
                        {
                            "name": "ammocount",
                            "description": "`Number` - ammo count in each magazine"
                        }
                    ],
                    "outline": "cargospace `addMagazineAmmoCargo` [magazine, quantity, ammocount]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addMagazineAmmoCargo"
        },
        "configuration": {
            "label": "addMagazineAmmoCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Add magazines to the cargo space of vehicles, which can be taken out by infantry units. Once the magazine cargo space is filled up, any further addMagazineCargo commands are ignored.\n**Arma 3**: In Arma 3, arguments for this command must be local ({{Icon|localArgument|32}}). For the global variant see `addMagazineCargoGlobal`.",
            "examples": [
                {
                    "text": "```sqf\n_truck addMagazineCargo [\"M16\", 5];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicleName",
                            "description": "`Object` - vehicle to add the magazines to"
                        },
                        {
                            "name": "magazineName",
                            "description": "`String` - magazine name. See [:Category:Weapons](https://community.bistudio.com/wiki/%3ACategory%3AWeapons) for reference about possible values."
                        },
                        {
                            "name": "count",
                            "description": "`Number` - number of magazines to add. Since Arma 3 v2.14, negative count will remove magazines."
                        }
                    ],
                    "outline": "vehicleName `addMagazineCargo` [magazineName, count]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addMagazineCargo"
        },
        "configuration": {
            "label": "addMagazineCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Add magazines to the cargo space of vehicles, which can be taken out by infantry units.\n\nMP Synchronized",
            "examples": [
                {
                    "text": "```sqf\n_truck addMagazineCargoGlobal [\"M16\", 5];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicleName",
                            "description": "`Object` - vehicle to add the magazines to"
                        },
                        {
                            "name": "magazineName",
                            "description": "`String` - magazine name. See [:Category:Weapons](https://community.bistudio.com/wiki/%3ACategory%3AWeapons) for reference about possible values."
                        },
                        {
                            "name": "count",
                            "description": "`Number` - number of magazines to add. Since Arma 3 v2.14, negative count will remove magazines."
                        }
                    ],
                    "outline": "vehicleName `addMagazineCargoGlobal` [magazineName, count]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addMagazineCargoGlobal"
        },
        "configuration": {
            "label": "addMagazineCargoGlobal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds magazine to a unit regardless of locality. This command can also be used to add magazine to a vehicle, like a static gun, for example.",
            "examples": [
                {
                    "text": "```sqf\nplayer addMagazineGlobal \"30Rnd_65x39_caseless_mag\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "magazineName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `addMagazineGlobal` magazineName",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addMagazineGlobal"
        },
        "configuration": {
            "label": "addMagazineGlobal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds magazines to the magazine pool, of which the player may choose in the following mission. Available in campaigns only.",
            "examples": [
                {
                    "text": "```sqf\naddMagazinePool [\"M16\", 20];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "magazineName",
                            "description": "`String` - magazine class name. See the topic [:Category:Weapons](https://community.bistudio.com/wiki/%3ACategory%3AWeapons) for reference about possible values."
                        },
                        {
                            "name": "count",
                            "description": "`Number` - number of magazines to add"
                        }
                    ],
                    "outline": "`addMagazinePool` [magazineName, count]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/addMagazinePool"
        },
        "configuration": {
            "label": "addMagazinePool",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds multiple magazines to the unit. For cargo containers use `addMagazineCargoGlobal` command.\n**NOTE**: This command is meant to be used on human units. If used on vehicles, this command is {{Icon|localArgument|32 {{Icon|globalEffect|32}}.}}",
            "examples": [
                {
                    "text": "```sqf\nplayer addMagazines [\"30Rnd_65x39_caseless_mag\", 3];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - a soldier"
                        },
                        {
                            "name": "magazineName",
                            "description": "`String`"
                        },
                        {
                            "name": "count",
                            "description": "`Number` - number of magazines"
                        }
                    ],
                    "outline": "unit `addMagazines` [magazineName, count]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addMagazines"
        },
        "configuration": {
            "label": "addMagazines",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds a magazine to the turret. Use turret path `**[-1]**` for driver's turret.\n**IMPORTANT**: Invalid combinations may be created by using this command, for example by adding 20 grenades. In these cases, behaviour is undefined.",
            "examples": [
                {
                    "text": "```sqf\n_tank addMagazineTurret [\"SmokeLauncherMag\", [0,0]];\n```"
                },
                {
                    "text": "```sqf\n_tank addMagazineTurret [\"20Rnd_120mmSABOT_M1A2\", [0]];\n```"
                },
                {
                    "text": "```sqf\n_tank addMagazineTurret [\"20Rnd_120mmSABOT_M1A2\", [0], 10]; // add magazine with 10 rounds\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "magazineName",
                            "description": "`String`"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` format [Turret Path](https://community.bistudio.com/wiki/Turret%20Path)"
                        },
                        {
                            "name": "ammoCount",
                            "description": "`Number` - (Optional, default 0) desired ammo count"
                        }
                    ],
                    "outline": "vehicle `addMagazineTurret` [magazineName, turretPath, ammoCount]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addMagazineTurret"
        },
        "configuration": {
            "label": "addMagazineTurret",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds a new menu button. Priority is optional.\n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "text",
                            "description": "`String`"
                        },
                        {
                            "name": "priority",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "map `addMenu` [text, priority]",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/addMenu"
        },
        "configuration": {
            "label": "addMenu",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates a new menu item. Menu can be \"file\" or \"view\",index is index,as returned from addMenu command. priority is optional and determines,where in the menu the item will reside (higher priority items first). \n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "[menu or index,text,command,priority]",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "map `addMenuItem` [menu or index,text,command,priority]",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/addMenuItem"
        },
        "configuration": {
            "label": "addMenuItem",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds event handler attached to the current mission and returns event handler handle. For the list of available mission event handlers see: [Arma 3: Mission Event Handlers](https://community.bistudio.com/wiki/Arma%203%3A%20Mission%20Event%20Handlers)",
            "examples": [
                {
                    "text": "```sqf\n_id = addMissionEventHandler [\"PlayerDisconnected\", { systemChat str _this }];\n```"
                },
                {
                    "text": "```sqf\n_id = addMissionEventHandler [\"EachFrame\", { systemChat str [_thisArgs, time] }, [time]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "event",
                            "description": "`String` - event name"
                        },
                        {
                            "name": "expression",
                            "description": "`Code` or `String` - expression that will be executed in `missionNamespace` when event handler fires.\n* If the event handler has some data to return upon activation they are stored in the `**_this**` variable\n* {{GVI|arma3|1.64"
                        },
                        {
                            "name": "arguments",
                            "description": "`Array` - (Optional, default <sqf inline>[]) additional arguments to be passed to the EH code. Available during code execution via `**_thisArgs**` variable."
                        }
                    ],
                    "outline": "`addMissionEventHandler` [event, expression, arguments]",
                    "returns": "`Number` - the index of the currently added mission event handler is returned"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addMissionEventHandler"
        },
        "configuration": {
            "label": "addMissionEventHandler",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds a multiplayer event handler (EH) to the given object and returns EH handle. See {{Link|:Category:Event Handlers|Event Handlers}}.\n**IMPORTANT**: A Multiplayer Event Handler is **not** saved in a save file and therefore will not be restored on load - use it accordingly.",
            "examples": [
                {
                    "text": "```sqf\n_index = player addMPEventHandler [\"MPKilled\", { _this execVM \"playerKilled.sqf\"; }];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - object to monitor"
                        },
                        {
                            "name": "type",
                            "description": "`String` - event handler name"
                        },
                        {
                            "name": "expression",
                            "description": "`String` or `Code` - expression to execute.\n\nIf EH has some data to return upon event (e.g. the \"MPKilled\" EH will return an array with 2 elements: the killed unit, and the killer), it is passed in `**_this**` variable.\n{{Feature|arma3|Since Arma 3 v.1.64 the EH handle is also stored in `**_thisEventHandler**` variable and is available during EH code execution.}}\n* Event Handler parameters are accessible via <sqf inline>_this\n* The Event Handler type is available as <sqf inline>_thisEvent\n* The Event Handler index is available as <sqf inline>_thisEventHandler"
                        }
                    ],
                    "outline": "object `addMPEventHandler` [type, expression]",
                    "returns": "`Number` - event handler index"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addMPEventHandler"
        },
        "configuration": {
            "label": "addMPEventHandler",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds `playMusic` event handler. Returns id of the handler or -1 when failed. Like `addMissionEventHandler`, the music event handler is attached to the mission.\nSee {{Link|Arma 3: Event Handlers#Music Event Handlers}}.",
            "examples": [
                {
                    "text": "```sqf\nprivate _ehID = addMusicEventHandler [\"MusicStart\", { hint str _this }];\n```"
                },
                {
                    "text": "```sqf\nprivate _ehID = addMusicEventHandler [\"MusicStop\", { hint str _this }];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`String` - \"MusicStart\" or \"MusicStop\""
                        },
                        {
                            "name": "function",
                            "description": "`String` or `Code` - passed params array is [musicClassname, eventHandlerId] where:\n\n```sqf\nparams [\"_musicClassname\", \"_ehId\"];\n```\n\n* musicClassname: `String` - [[Description.ext#Music|CfgMusic]] class name\n* eventHandlerId: `Number` - event handler id"
                        }
                    ],
                    "outline": "`addMusicEventHandler` [type, function]",
                    "returns": "`Number` - event handler id"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addMusicEventHandler"
        },
        "configuration": {
            "label": "addMusicEventHandler",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a list of files present in the addon.\n\n**NOTE**: Querying protected `**.ebo**` addons will return an empty array `**[]**`.",
            "examples": [
                {
                    "text": "```sqf\n\naddonFiles [\"a3\\3den\\\", \".paa\"];\n/*\n\t[\n\t\t\"a3\\3den\\data\\attributes\\formation\\ech_left_ca.paa\",\n\t\t\"a3\\3den\\data\\attributes\\formation\\stag_column_ca.paa\",\n\t\t\"a3\\3den\\data\\attributes\\stance\\down_ca.paa\",\n\t\t\"a3\\3den\\data\\cfg3den\\layer\\icondisabled_ca.paa\",\n\t\t\"a3\\3den\\data\\controlsgroups\\diagmousecontrol\\mouse_ca.paa\",\n\t\t...\n\t]\n*/\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "pboPrefix",
                            "description": "`String` - addon prefix available from `allAddonsInfo`"
                        },
                        {
                            "name": "fileExtension",
                            "description": "`String` - (Optional) file extension to filter results, for example `**\".paa\"**`"
                        }
                    ],
                    "outline": "`addonFiles` [pboPrefix, fileExtension]",
                    "returns": "`Array` of `String`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/addonFiles"
        },
        "configuration": {
            "label": "addonFiles",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets ownership over a remotely detonatable mine to the unit.",
            "examples": [
                {
                    "text": "```sqf\nplayer addOwnedMine _superMine;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "mine",
                            "description": "`Object` - the mine object"
                        }
                    ],
                    "outline": "unit `addOwnedMine` mine",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/addOwnedMine"
        },
        "configuration": {
            "label": "addOwnedMine",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "MP server only: Adds player score.",
            "examples": [
                {
                    "text": "```sqf\nplayer addPlayerScores [0, 1, 0, 0, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "values",
                            "description": "`Array` - killsInfantry , killsSoft, killsArmor, killsAir, killed"
                        }
                    ],
                    "outline": "unit `addPlayerScores` values",
                    "returns": "`Nothing`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/addPlayerScores"
        },
        "configuration": {
            "label": "addPlayerScores",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds weapon item, including magazine, directly to the `primaryWeapon`. This is used for infantry weapons.",
            "examples": [
                {
                    "text": "```sqf\nplayer addPrimaryWeaponItem \"muzzle_snds_H\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "item",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `addPrimaryWeaponItem` item",
                    "returns": "`Nothing` or `Boolean` - **false** is returned if **item** can not be added"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addPrimaryWeaponItem"
        },
        "configuration": {
            "label": "addPrimaryWeaponItem",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "**Arma 3**:  This command is deprecated since the introduction of `remoteExec` and `remoteExecCall`.}}\n\nThis event handler will detect if a `missionNamespace` variable (it is attached to) has been broadcast over network with `publicVariable`, `publicVariableClient` or `publicVariableServer` commands and will execute EH code upon detection. Arguments passed to the code in __this_ array are:\n* _this select 0: `String` - broadcast variable name (same variable name EH is attached to)\n* _this select 1: `Anything` - broadcast variable value \n* _this select 2: `Object`, `Group` - target the variable got set on with `setVariable`  (see {{Link|#Alternative Syntax}})\n{{Feature | Informative |\n* This EH works **only** in Multiplayer environment\n* There is **no way to remove** this EH\n* This EH will not fire on the machine that executed broadcast with `publicVariable` command, only on the machines that receive the broadcast\n* The value of broadcast variable can be exactly the same, it is the actual broadcast that triggers EH not the change in variable",
            "examples": [
                {
                    "text": "```sqf\n\"publicThis\" addPublicVariableEventHandler {\n\thint format [\n\t\t\"%1 has been updated to: %2\",\n\t\t_this select 0,\n\t\t_this select 1\n\t]\n};\n```"
                },
                {
                    "text": "Client:\n\n```sqf\n\"'^:)123BURP,+=lol\" addPublicVariableEventHandler {hint (\"NUTS are \" + (_this select 1))};\n```\n\nServer:\n\n```sqf\nmissionNamespace setVariable [\"'^:)123BURP,+=lol\", \"craZZZZy\"];\npublicVariable \"'^:)123BURP,+=lol\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "varName",
                            "description": "`String` - `missionNamespace` variable name"
                        },
                        {
                            "name": "code",
                            "description": "`Code` - by default, the code is executed in `missionNamespace`"
                        }
                    ],
                    "outline": "varName `addPublicVariableEventHandler`  code",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "varName",
                            "description": "`String` - name of the variable set on target with `setVariable`"
                        },
                        {
                            "name": "target",
                            "description": "`Object`, `Group` or [Team Member](https://community.bistudio.com/wiki/Team%20Member)"
                        },
                        {
                            "name": "code",
                            "description": "`Code`"
                        }
                    ],
                    "outline": "varName `addPublicVariableEventHandler` [target, code]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addPublicVariableEventHandler"
        },
        "configuration": {
            "label": "addPublicVariableEventHandler",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Add a number to the `rating` of a unit - negative values can be used to reduce the rating.\n\nThis command is usually used to reward for completed mission objectives.The rating is given at the end of the mission and is automatically adjusted when killing enemies or friendlies.\n\nWhen the rating gets below -2000, the unit's side switches to `sideEnemy` and the unit is attacked by everyone.\n**NOTE**: See also {{Link|ArmA: Armed Assault: Rating Values}} and {{Link|Arma 3: Event Handlers#HandleRating}}.",
            "examples": [
                {
                    "text": "```sqf\nplayer addRating 2000;\n```"
                },
                {
                    "text": "Set the rating to a specific value:\n\n```sqf\n\nprivate _wantedRating = 9001;\nplayer addRating (_wantedRating - rating player);\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        },
                        {
                            "name": "rating",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "unitName `addRating` rating",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addRating"
        },
        "configuration": {
            "label": "addRating",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds resources to a team member.",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "teamMember",
                            "description": "[Team Member](https://community.bistudio.com/wiki/Team%20Member)"
                        },
                        {
                            "name": "resourceN",
                            "description": "`String`"
                        }
                    ],
                    "outline": "teamMember `addResources` [resource1, resource2, ...]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addResources"
        },
        "configuration": {
            "label": "addResources",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds a number to the score of a unit. Negative values will remove from the score.",
            "examples": [
                {
                    "text": "```sqf\nunit addScore 10;\n```"
                },
                {
                    "text": "```sqf\nunit addScore -1337; // reduce the unit's score by 1337 points\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "score",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "unit `addScore` score",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/addScore"
        },
        "configuration": {
            "label": "addScore",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds side score. This is shown in the MP score tab as the total score. **MP only**.",
            "examples": [
                {
                    "text": "```sqf\nwest addScoreSide 10;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "side",
                            "description": "`Side`"
                        },
                        {
                            "name": "value",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "side `addScoreSide` value",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/addScoreSide"
        },
        "configuration": {
            "label": "addScoreSide",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds weapon item, including magazine, directly to the `secondaryWeapon`. This is used for infantry weapons.",
            "examples": [
                {
                    "text": "```sqf\nplayer addSecondaryWeaponItem \"muzzle_snds_L\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "item",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `addSecondaryWeaponItem` item",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addSecondaryWeaponItem"
        },
        "configuration": {
            "label": "addSecondaryWeaponItem",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds a unit to the list of units available for [Team Switch](https://community.bistudio.com/wiki/Team_Switch). Units marked as [playable](https://community.bistudio.com/wiki/playableUnits) in editor are automatically switchable.\nThis command adds non-playable unit into array of `switchableUnits` and makes them available for `teamSwitch`. **Singleplayer only!**",
            "examples": [
                {
                    "text": "```sqf\naddSwitchableUnit bob;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`addSwitchableUnit` unit",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/addSwitchableUnit"
        },
        "configuration": {
            "label": "addSwitchableUnit",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Add given member to given team. Effect is local, unless both member and team are local to PC on which command is executed, then effect is global.\n\n\n\n The same [Team Member](https://community.bistudio.com/wiki/Team%20Member) can be member of several different `teams` at the same time.",
            "examples": [
                {
                    "text": "```sqf\n_team addTeamMember _teamMember;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "team",
                            "description": "[Team Member](https://community.bistudio.com/wiki/Team%20Member)"
                        },
                        {
                            "name": "member",
                            "description": "[Team Member](https://community.bistudio.com/wiki/Team%20Member)"
                        }
                    ],
                    "outline": "team `addTeamMember` member",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addTeamMember"
        },
        "configuration": {
            "label": "addTeamMember",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds an array of vehicles/units to disposal manager for automatic wreck/body removal. The disposal manager follows wreck/body removal values set in [[Description.ext|description.ext]]",
            "examples": [
                {
                    "text": "```sqf\naddToRemainsCollector [unit1, unit2, vehicle1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "remains",
                            "description": "`Array` of `Object`s - array of vehicles/units"
                        }
                    ],
                    "outline": "`addToRemainsCollector` remains",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addToRemainsCollector"
        },
        "configuration": {
            "label": "addToRemainsCollector",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "[[File:addTorque_correct.jpg|400px|right]]\nApplies torque (rotation momentum) to the [ center of mass](https://community.bistudio.com/wiki/getCenterOfMass%20) of the given object. Torque force is defined as vector [x, y, z] applied in world space. If you need to define torque in model space, convert the torque vector first by `vectorModelToWorld` or `vectorModelToWorldVisual` command. The torque applied as impulse. Diagram below explain which way the object would rotate.  For more information see {{Link|http://docs.nvidia.com/gameworks/content/gameworkslibrary/physx/apireference/files/classPxRigidBody.html#acb04ffc816d45afff2d04e93d7446e79|NVIDIA docs}} \n\n\n{{Feature|informative|\nA single application of torque would produce one impulse, which may not be enough. In this case consider applying a series of continuous impulses, for example to make a quad bike to roll forward:\n\n```sqf\nonEachFrame { quad addTorque (quad vectorModelToWorld [100,0,0]) };\n```\n\n}}\n**IMPORTANT**: This command doesn't follow convention for torque direction, which obeys right-hand rule. To comply, negate all values in the vector.",
            "examples": [
                {
                    "text": "Apply torque [1000,0,0] to object not factoring object positioning:\n\n```sqf\n_wheel addTorque [1000,0,0];\n```"
                },
                {
                    "text": "Apply torque [1000,0,0] relative to object:\n\n```sqf\n_wheel addTorque (_wheel vectorModelToWorld [1000,0,0]);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - PhysX object"
                        },
                        {
                            "name": "torque",
                            "description": "`Array` - world vector in format [x,y,z]"
                        }
                    ],
                    "outline": "object `addTorque` torque",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addTorque"
        },
        "configuration": {
            "label": "addTorque",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Create a new uniform and try to link it into uniform slot (given uniform has to be supported by allowedUniforms list of target soldier).\n**NOTE**:  To check if a uniform is allowed use `isUniformAllowed`, and to force an incompatible uniform use `forceAddUniform`.",
            "examples": [
                {
                    "text": "```sqf\n_unit addUniform \"U_B_CombatUniform_mcam\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "type",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `addUniform` type",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addUniform"
        },
        "configuration": {
            "label": "addUniform",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds a user action event handler to the current mission and returns its event handler index.",
            "examples": [
                {
                    "text": "```sqf\nprivate _ehId = addUserActionEventHandler [\"ReloadMagazine\", \"Activate\", { systemChat \"reloading!\"; }];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "keyName",
                            "description": "`String` - action key name - see [inputAction/actions](https://community.bistudio.com/wiki/inputAction%2Factions)"
                        },
                        {
                            "name": "event",
                            "description": "`String` - event name - see [UserAction Event Handlers](https://community.bistudio.com/wiki/Arma%203%3A%20Event%20Handlers%23UserAction%20Event%20Handlers). Can be one of:\n* \"Activate\"\n* \"Deactivate\"\n* \"Analog\""
                        },
                        {
                            "name": "expression",
                            "description": "`Code` - expression that will be executed in `missionNamespace` when event handler fires.\n\nThe Event Handler index is available as `**_thisEventHandler**` during Event Handler code execution.\n**IMPORTANT**:  _expression_ can only be `Code`, **not** `String`."
                        }
                    ],
                    "outline": "`addUserActionEventHandler` [keyName, event, expression]",
                    "returns": "`Number` - the index of the currently added UserAction event handler is returned"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addUserActionEventHandler"
        },
        "configuration": {
            "label": "addUserActionEventHandler",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds a specified vehicle for use by a specified AI led group.\n**NOTE**: See [AI Group Vehicle Management](https://community.bistudio.com/wiki/AI%20Group%20Vehicle%20Management) for more information.",
            "examples": [
                {
                    "text": "```sqf\n_grp addVehicle _vehicle;\n```"
                },
                {
                    "text": "Using on crewed vehicle:\n\n```sqf\ngroup tank addVehicle tank;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "groupName",
                            "description": "`Group`"
                        },
                        {
                            "name": "vehicleName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "groupName `addVehicle` vehicleName",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/addVehicle"
        },
        "configuration": {
            "label": "addVehicle",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Create a new vest and try to link it into vest slot.",
            "examples": [
                {
                    "text": "```sqf\nplayer addVest \"V_TacVest_blk_POLICE\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "type",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `addVest` type",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addVest"
        },
        "configuration": {
            "label": "addVest",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds (or inserts when index is given) a new waypoint to a group.\n\nThe waypoint is placed randomly within a circle with the given center and radius.\n\n**NOTE**: For older titles and prior to Arma 3 v1.90, use `setWaypointPosition` if you need exact waypoint placement.",
            "examples": [
                {
                    "text": "```sqf\n_wp = _grp addWaypoint [position player, 0];\n```"
                },
                {
                    "text": "```sqf\n\n_wp = _grp addWaypoint [position player, 0];\t\t\t// imprecise, placed like [[setVehiclePosition]]'s \"NONE\" placement\n_wp setWaypointPosition [getPosASL player, -1];\t\t\t// from {{ofpe}} to {{arma3}} v1.88\n\nprivate _wp = _grp addWaypoint [getPosASL player, -1];\t// {{arma3}} v1.90+: precise placement\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "groupName",
                            "description": "`Group`"
                        },
                        {
                            "name": "center",
                            "description": "`Array` format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) ([PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) if _radius_ is negative!) or `Object`"
                        },
                        {
                            "name": "radius",
                            "description": "`Number` - random waypoint placement within _radius_ from _center_; {{GVI|arma3|1.90"
                        },
                        {
                            "name": "index",
                            "description": "`Number` - (Optional, default -1) can be used to insert a waypoint in between existing waypoints; if it is invalid, the waypoint will be added at the end"
                        },
                        {
                            "name": "name",
                            "description": "`String` - (Optional, default \"\") `waypointName`"
                        }
                    ],
                    "outline": "groupName `addWaypoint` [center, radius, index, name]",
                    "returns": "`Array` format `Waypoint`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addWaypoint"
        },
        "configuration": {
            "label": "addWaypoint",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Add a weapon to a unit. For a global version of this command see `addWeaponGlobal`.\n\nInfantry units can only carry a specific number of weapons, once the weapon slots are filled, any further `addWeapon` commands are ignored.\n\n**NOTE**: a **magazine** must be added first for the added weapon to be loaded. \n\n**WARNING**:  In Arma 3 this command can also link items to the inventory slots, the functionality is identical to `linkItem` command, which it global and thus differ in how it should be used.",
            "examples": [
                {
                    "text": "```sqf\nplayer addMagazine \"30Rnd_556x45_Stanag\";\nplayer addWeapon \"BAF_L85A2_RIS_SUSAT\";\n```"
                },
                {
                    "text": "```sqf\nAn_2 addMagazine \"100Rnd_762x51_M240\";\nAn_2 addWeapon \"M240_veh\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - unit or vehicle to add the weapon to"
                        },
                        {
                            "name": "weapon",
                            "description": "`String` - weapon class name. See the topic [:Category:Weapons](https://community.bistudio.com/wiki/%3ACategory%3AWeapons) for reference about possible values."
                        }
                    ],
                    "outline": "object `addWeapon` weapon",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addWeapon"
        },
        "configuration": {
            "label": "addWeapon",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Add weapons to the cargo space of vehicles, which can be taken out by infantry units. Ignores available cargo space.\n**Arma 3**: In Arma 3, arguments for this command must be local ({{Icon|localArgument|32}}). For global variant see `addWeaponCargoGlobal`.",
            "examples": [
                {
                    "text": "```sqf\n_truck addWeaponCargo [\"M16\", 5];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicleName",
                            "description": "`Object` - vehicle to which add the weapons"
                        },
                        {
                            "name": "weaponName",
                            "description": "`String` - weapon name. See [:Category:Weapons](https://community.bistudio.com/wiki/%3ACategory%3AWeapons) for reference about possible values"
                        },
                        {
                            "name": "count",
                            "description": "`Number` - number of weapons to add. Since Arma 3 v2.14, negative count will remove weapons."
                        }
                    ],
                    "outline": "vehicleName `addWeaponCargo` [weaponName, count]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addWeaponCargo"
        },
        "configuration": {
            "label": "addWeaponCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Add weapons to the cargo space of vehicles, which can be taken out by infantry units.",
            "examples": [
                {
                    "text": "```sqf\n_truck addWeaponCargoGlobal [\"M16\", 5];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicleName",
                            "description": "`Object` - vehicle to which add the weapons"
                        },
                        {
                            "name": "weaponName",
                            "description": "`String` - weapon name. See the topic [:Category:Weapons](https://community.bistudio.com/wiki/%3ACategory%3AWeapons) for reference about possible values"
                        },
                        {
                            "name": "count",
                            "description": "`Number` - number of weapons to add. Since Arma 3 v2.14, negative count will remove weapons."
                        }
                    ],
                    "outline": "vehicleName `addWeaponCargoGlobal` [weaponName, count]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addWeaponCargoGlobal"
        },
        "configuration": {
            "label": "addWeaponCargoGlobal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Add a weapon to a unit. Infantry units can only carry weapons in their respective slots (primary, secondary and handgun),\nthe `addWeaponGlobal` command will replace the weapon currently in a slot with the added weapon if it shares the same slot.\nThis command can link items to respective slots as well, in which case the functionality is identical to `linkItem`.\n\nTo make sure the added weapon is loaded and ready, add the magazine first.\n{{Feature|informative|This command was broken when used on dedicated server and fixed on {{GVI|arma3|2.00",
            "examples": [
                {
                    "text": "```sqf\n\n{\n\t_x addMagazineGlobal \"Laserbatteries\";\n\t_x addWeaponGlobal \"Laserdesignator\";\n} forEach allUnits;\n\n```"
                },
                {
                    "text": "```sqf\n\n{\n\tif (typeOf _x == \"O_Heli_Attack_02_black_F\") then\n\t{\n\t\t_x addMagazineGlobal \"38Rnd_80mm_rockets\";\n\t\t_x addWeaponGlobal \"rockets_Skyfire\";\n\t};\n} forEach vehicles;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object ",
                            "description": "`Object` - unit or vehicle to add the weapon to"
                        },
                        {
                            "name": "weapon",
                            "description": "`String` - weapon class name"
                        }
                    ],
                    "outline": "object `addWeaponGlobal` weapon",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addWeaponGlobal"
        },
        "configuration": {
            "label": "addWeaponGlobal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds a weapon item to the specified weapon. The item can be weapon magazine, in which case the amount of ammo and target muzzle could also be specified.",
            "examples": [
                {
                    "text": "```sqf\nplayer addWeaponItem [\"arifle_MX_GL_ACO_F\", \"1Rnd_HE_Grenade_shell\"];\n```"
                },
                {
                    "text": "```sqf\nplayer addWeaponItem [\"arifle_MX_GL_ACO_F\", [\"1Rnd_HE_Grenade_shell\", 1, \"GL_3GL_F\"]];\n```"
                },
                {
                    "text": "```sqf\nplayer addWeaponItem [\"LaserDesignator\", \"LaserBatteries\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "weaponName",
                            "description": "`String` - name of the weapon to add magazine to"
                        },
                        {
                            "name": "itemName",
                            "description": "`String` - class name of the item to add (if magazine, muzzle will be autodetected)"
                        },
                        {
                            "name": "instant",
                            "description": "`Boolean` - (Optional, default `false`) `true` to skip animation"
                        }
                    ],
                    "outline": "unit `addWeaponItem` [weaponName, itemName, instant]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "weaponName",
                            "description": "`String` - name of the weapon to add magazine to"
                        },
                        {
                            "name": "itemName",
                            "description": "`String` - class name of the item to add (if magazine, muzzle will be autodetected unless specified)"
                        },
                        {
                            "name": "ammoCount",
                            "description": "`Number` - (Optional) optional amount of ammo in magazine"
                        },
                        {
                            "name": "muzzleName",
                            "description": "`String` - (Optional) optional target muzzle to add magazine to"
                        },
                        {
                            "name": "instant",
                            "description": "`Boolean` - (Optional, default `false`) `true` to skip animation"
                        }
                    ],
                    "outline": "unit `addWeaponItem` [weaponName, [itemName, ammoCount, muzzleName], instant]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addWeaponItem"
        },
        "configuration": {
            "label": "addWeaponItem",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Add weapons to the weapon pool, of which the player may choose in the following mission. Available in campaigns only.",
            "examples": [
                {
                    "text": "```sqf\naddWeaponPool [\"M16\",5];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "weaponName",
                            "description": "`String` - weapon name. See the topic [:Category:Weapons](https://community.bistudio.com/wiki/%3ACategory%3AWeapons) for reference about possible values."
                        },
                        {
                            "name": "count",
                            "description": "`Number` - number of weapons to add"
                        }
                    ],
                    "outline": "`addWeaponPool` [weaponName, count]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/addWeaponPool"
        },
        "configuration": {
            "label": "addWeaponPool",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds a weapon to the turret. Use turret path [-1] for driver's turret.",
            "examples": [
                {
                    "text": "```sqf\n_tank addWeaponTurret [\"LMG_M200\", [0,0]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "weaponName",
                            "description": "`String`"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` format [Turret Path](https://community.bistudio.com/wiki/Turret%20Path)"
                        }
                    ],
                    "outline": "vehicle `addWeaponTurret` [weaponName, turretPath]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addWeaponTurret"
        },
        "configuration": {
            "label": "addWeaponTurret",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds a weapon into the cargo space of a vehicle / box with given attachments / magazines. Ignores available cargo space. If the weapon class has any pre-attached items (LinkedItems), they are removed and new items, supplied via command arguments, are added.",
            "examples": [
                {
                    "text": "```sqf\ncursorObject addWeaponWithAttachmentsCargo [[\"arifle_MX_GL_F\", \"muzzle_snds_H\", \"\", \"optic_aco\", [\"30Rnd_65x39_caseless_mag\", 15], [\"3Rnd_HE_Grenade_shell\", 2], \"\"], 2];\n```"
                },
                {
                    "text": "Add five MX GL rifles, each with flashlight side attachment, a full 30 rounds magazine loaded into the gun and a full 3Rnd HE grenade magazine loaded into the grenade launcher:\n\n```sqf\ncursorObject addWeaponWithAttachmentsCargo [[\"arifle_MX_GL_F\", \"\", \"acc_flashlight\", \"\", [\"30Rnd_65x39_caseless_mag\", 30], [\"3Rnd_HE_Grenade_shell\", 2], \"\"], 5];\n```"
                },
                {
                    "text": "Add one MX rifle without any attachments or magazines event though the class has linked items:\n\n```sqf\ncursorObject addWeaponWithAttachmentsCargo [[\"arifle_MX_Holo_pointer_F\", \"\", \"\", \"\", [], [], \"\"], 1];\n```"
                },
                {
                    "text": "Add all weapons on player with attachments:\n\n```sqf\n{ cursorObject addWeaponWithAttachmentsCargo [_x, 1] } forEach weaponsItems player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "container",
                            "description": "`Object` - container to add the weapon to. Might be a backpack, ammobox or vehicle."
                        },
                        {
                            "name": "weaponConfiguration",
                            "description": "`Array` in format [weapon, muzzle, flashlight, optics, primaryMuzzle, secondaryMuzzle, bipod]\n* weapon: `String` - Weapon class name from [CfgWeapons](https://community.bistudio.com/wiki/%3ACategory%3ACfgWeapons)\n* muzzle: `String` - Muzzle attachment class name. Use \"\" if not needed.\n* flashlight: `String` - Side rail attachment class name. Use \"\" if not needed.\n* optics: `String` - Top rail attachment class name. Use \"\" if not needed.\n* primaryMuzzle: `Array` in format [primaryMuzzleMagazine, primaryAmmoCount] - Use [] if not needed\n** primaryMuzzleMagazine: `String` - Magazine class name\n** primaryAmmoCount: `Number` - Ammo count in magazine (will be clipped to values between 0 and the maximum capacity of the magazine class)\n* secondaryMuzzle: `Array` in format [secondaryMuzzleMagazine, secondaryAmmoCount] - Use [] if not needed\n** secondaryMuzzleMagazine: `String` - Magazine class name\n** secondaryAmmoCount: `Number` - Ammo count in magazine (will be clipped to values between 0 and the maximum capacity of the magazine class)\n* bipod: `String` - Underbarrel rail attachment class name. Use \"\" if not needed.\nThis array has the same format as the array returned by the `weaponsItems` command."
                        },
                        {
                            "name": "weaponsCount",
                            "description": "`Number` - number of weapons to add"
                        }
                    ],
                    "outline": "container `addWeaponWithAttachmentsCargo` [weaponConfiguration, weaponsCount]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addWeaponWithAttachmentsCargo"
        },
        "configuration": {
            "label": "addWeaponWithAttachmentsCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds a weapon into the cargo space of a vehicle / box with given attachments / magazines. Ignores available cargo space. If the weapon class has any pre-attached items (LinkedItems), they are removed and new items, supplied via command arguments, are added.",
            "examples": [
                {
                    "text": "```sqf\ncursorObject addWeaponWithAttachmentsCargoGlobal [[\"arifle_MX_GL_F\", \"muzzle_snds_H\", \"\", \"optic_aco\", [\"30Rnd_65x39_caseless_mag\", 15], [\"3Rnd_HE_Grenade_shell\", 2], \"\"], 2];\n```"
                },
                {
                    "text": "Add five MX GL rifles, each with flashlight side attachment, a full 30 rounds magazine loaded into the gun and a full 3Rnd HE grenade magazine loaded into the grenade launcher:\n\n```sqf\ncursorObject addWeaponWithAttachmentsCargoGlobal [[\"arifle_MX_GL_F\", \"\", \"acc_flashlight\", \"\", [\"30Rnd_65x39_caseless_mag\", 30], [\"3Rnd_HE_Grenade_shell\", 2], \"\"], 5];\n```"
                },
                {
                    "text": "Add one MX rifle without any attachments or magazines event though the class has linked items:\n\n```sqf\ncursorObject addWeaponWithAttachmentsCargoGlobal [[\"arifle_MX_Holo_pointer_F\", \"\", \"\", \"\", [], [], \"\"], 1];\n```"
                },
                {
                    "text": "Add all weapons on player with attachments:\n\n```sqf\n{ cursorObject addWeaponWithAttachmentsCargoGlobal [_x, 1] } forEach weaponsItems player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "container",
                            "description": "`Object` - container to add the weapon to. Might be a backpack, ammobox or vehicle."
                        },
                        {
                            "name": "weaponConfiguration",
                            "description": "`Array` in format [weapon, muzzle, flashlight, optics, primaryMuzzle, secondaryMuzzle, bipod]\n* weapon: `String` - Weapon class name from [CfgWeapons](https://community.bistudio.com/wiki/%3ACategory%3ACfgWeapons)\n* muzzle: `String` - Muzzle attachment class name. Use \"\" if not needed.\n* flashlight: `String` - Side rail attachment class name. Use \"\" if not needed.\n* optics: `String` - Top rail attachment class name. Use \"\" if not needed.\n* primaryMuzzle: `Array` in format [primaryMuzzleMagazine, primaryAmmoCount] - Use [] if not needed\n** primaryMuzzleMagazine: `String` - Magazine class name\n** primaryAmmoCount: `Number` - Ammo count in magazine (will be clipped to values between 0 and the maximum capacity of the magazine class)\n* secondaryMuzzle: `Array` in format [secondaryMuzzleMagazine, secondaryAmmoCount] - Use [] if not needed\n** secondaryMuzzleMagazine: `String` - Magazine class name\n** secondaryAmmoCount: `Number` - Ammo count in magazine (will be clipped to values between 0 and the maximum capacity of the magazine class)\n* bipod: `String` - Underbarrel rail attachment class name. Use \"\" if not needed.\nThis array has the same format as the array returned by the `weaponsItems` command."
                        },
                        {
                            "name": "weaponsCount",
                            "description": "`Number` - number of weapons to add"
                        }
                    ],
                    "outline": "container `addWeaponWithAttachmentsCargoGlobal` [weaponConfiguration, weaponsCount]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/addWeaponWithAttachmentsCargoGlobal"
        },
        "configuration": {
            "label": "addWeaponWithAttachmentsCargoGlobal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "This is dedicated server command, which queries the admin state of any client on the network by their client (`owner`) id.\n**NOTE**: To self-check the admin state of a local client, use `BIS_fnc_admin`.",
            "examples": [
                {
                    "text": "```sqf\nprivate _isLoggedInAdmin = admin 3 == 2;\n```"
                },
                {
                    "text": "```sqf\nprivate _adminState = admin owner unit1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "ownerID",
                            "description": "`Number` - `clientOwner` id"
                        }
                    ],
                    "outline": "`admin` ownerID",
                    "returns": "`Number` - admin state of given client:\n* 0 - client is not an admin\n* 1 - client is admin that is [voted in](https://community.bistudio.com/wiki/Arma%203%3A%20Server%20Config%20File%23Voted_In_Admin)\n* 2 - client is admin that is [logged in](https://community.bistudio.com/wiki/Arma%203%3A%20Server%20Config%20File%23Logged_In_Admin)"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/admin"
        },
        "configuration": {
            "label": "admin",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return a person for a given agent.",
            "examples": [
                {
                    "text": "```sqf\n_obj = agent teamMember _unit;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "teamMember",
                            "description": "[Team Member](https://community.bistudio.com/wiki/Team%20Member)"
                        }
                    ],
                    "outline": "`agent` teamMember",
                    "returns": "`Object`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/agent"
        },
        "configuration": {
            "label": "agent",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return a list of agents in the current mission.",
            "examples": [
                {
                    "text": "```sqf\n{ agent _x moveTo position player } forEach agents;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`agents`",
                    "returns": "`Array` of [Team Member](https://community.bistudio.com/wiki/Team%20Member)s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/agents"
        },
        "configuration": {
            "label": "agents",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Converts position from [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) to [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL).",
            "examples": [
                {
                    "text": "```sqf\n_playerPosASL = AGLToASL (player modelToWorld [0,0,0]);\n```"
                },
                {
                    "text": "```sqf\n_camPosASL = AGLToASL positionCameraToWorld [0,0,0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "posAGL",
                            "description": "`Array` format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) - position to convert"
                        }
                    ],
                    "outline": "`AGLToASL` posAGL",
                    "returns": "[PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/AGLToASL"
        },
        "configuration": {
            "label": "AGLToASL",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns how good a vehicle's weapon is aimed at the target.",
            "examples": [
                {
                    "text": "```sqf\n_aimingQuality = heli aimedAtTarget [target];\n```"
                },
                {
                    "text": "```sqf\n_aimingQuality = heli aimedAtTarget [target, \"M197\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - vehicle only, not unit"
                        },
                        {
                            "name": "target",
                            "description": "`Object`"
                        },
                        {
                            "name": "weapon",
                            "description": "`String` - (Optional) if not provided, checks all weapons; if provided, checks that weapon only"
                        }
                    ],
                    "outline": "vehicle `aimedAtTarget` [target, weapon]",
                    "returns": "`Number` in range 0..1 - 0 if no weapons or if _weapon_ was provided and not found"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/aimedAtTarget"
        },
        "configuration": {
            "label": "aimedAtTarget",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the position of the object other units can aim to.",
            "examples": [
                {
                    "text": "```sqf\n_aimPos = aimPos player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`aimPos`  unit",
                    "returns": "`Array` - format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL)"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/aimPos"
        },
        "configuration": {
            "label": "aimPos",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array with air density data.{{Feature|afm}}",
            "examples": [
                {
                    "text": "```sqf\nprivate _densityArray = airDensityCurveRTD;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`airDensityCurveRTD`",
                    "returns": "`Array` with [arrays](https://community.bistudio.com/wiki/Array): Returns air density graph\n \nEach array consists of:\n* 0: Altitude (-60000 metres to 10^7 metres)\n* 1: Air density"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/airDensityCurveRTD"
        },
        "configuration": {
            "label": "airDensityCurveRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns air density in given altitude. {{Feature|afm}}",
            "examples": [
                {
                    "text": "```sqf\n_density = airDensityRTD 0; // returns 1.22406\n```"
                },
                {
                    "text": "```sqf\n_density = airDensityRTD 1000; // Returns 1.11096\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "altitude",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`airDensityRTD` altitude",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/airDensityRTD"
        },
        "configuration": {
            "label": "airDensityRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns throttle position. Works only on player's vehicle.",
            "examples": [
                {
                    "text": "```sqf\nprivate _throttle = airplaneThrottle objectParent player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "airplane",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`airplaneThrottle` airplane",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/airplaneThrottle"
        },
        "configuration": {
            "label": "airplaneThrottle",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets the side of an airport, set by `setAirportSide`. Default side is `sideUnknown`.\n**NOTE**: See [Arma: Airport IDs](https://community.bistudio.com/wiki/Arma%3A%20Airport%20IDs) for a list of airport ids.",
            "examples": [
                {
                    "text": "```sqf\nprivate _airportSide = airportSide 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "id",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`airportSide` id",
                    "returns": "`Side`"
                },
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`airportSide` target",
                    "returns": "`Side`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/airportSide"
        },
        "configuration": {
            "label": "airportSide",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Alternative Injury Simulation (AIS) end state. Used to tell engine that script side healing is done when using \"HandleHeal\" event handler.",
            "examples": [
                {
                    "text": "```sqf\nAISFinishHeal [_wounded, _medic, true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - wounded"
                        },
                        {
                            "name": "healer",
                            "description": "`Object` - medic"
                        },
                        {
                            "name": "healerCanHeal",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "`AISFinishHeal` [unit, healer, healerCanHeal]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/AISFinishHeal"
        },
        "configuration": {
            "label": "AISFinishHeal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check if given vehicle/person/building is alive (i.e. not dead or destroyed).",
            "examples": [
                {
                    "text": "SQS:\n<sqs>? not alive player : exit</sqs>"
                },
                {
                    "text": "SQF:\n\n```sqf\nif (!alive player) exitWith {};\n```"
                },
                {
                    "text": "```sqf\nalive objNull; // returns false\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`alive` object",
                    "returns": "`Boolean` - `true` if alive, `false` if dead/destroyed"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/alive"
        },
        "configuration": {
            "label": "alive",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array of all currently placed [Eden Editor entities](https://community.bistudio.com/wiki/Eden%20Entity).\n{{Feature|EdenEditor|This information is only available in [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor). If used during mission, it will return `**[<nowiki/>[],[],[],[],[],[],[],[-999]]**`.}}",
            "examples": [
                {
                    "text": "```sqf\nsystemChat str all3DENEntities;\n```"
                },
                {
                    "text": "```sqf\nall3DENEntities params [\"_objects\", \"_groups\", \"_triggers\", \"_systems\", \"_waypoints\", \"_markers\", \"_layers\", \"_comments\"];\n```"
                },
                {
                    "text": "```sqf\n\n// select all Eden entities\nset3DENSelected all3DENEntities;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`all3DENEntities`",
                    "returns": "`Array` in format [Array of Eden Entities](https://community.bistudio.com/wiki/Array%20of%20Eden%20Entities)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/all3DENEntities"
        },
        "configuration": {
            "label": "all3DENEntities",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a list of all layers that have currently active title effect. Numbers equal to or greater than 0 represent cut layers, where as -1 represents title layer (see [Title Effect Type](https://community.bistudio.com/wiki/Title%20Effect%20Type)). Named layers are represented by their respective index.**NOTE**: Effects created with `titleText`, `titleRsc` and `titleObj` commands do not have a numbered layer, so they are represented as -1 layer in the result. Effects created with `cutText`, `cutRsc` and `cutObj` are created either on layer 0, if no layer is specified, or on the given layer, if the layer index is specified, so they are represented by the layer index.",
            "examples": [
                {
                    "text": "```sqf\ncutText [\"Hello World!\" ,\"PLAIN\", 2];\nhint str allActiveTitleEffects; // [0]\n```"
                },
                {
                    "text": "```sqf\n21 cutText [\"Hello World!\", \"PLAIN\", 2];\nhint str allActiveTitleEffects; // [21]\n```"
                },
                {
                    "text": "```sqf\ncutText [\"Hello World!\", \"PLAIN\", 2];\ntitleText [\"Hello World!\", \"PLAIN\", 2];\nhint str allActiveTitleEffects; // [-1, 0]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`allActiveTitleEffects`",
                    "returns": "`Array` of `Number`s, where each number represents index of currently active effect layer."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/allActiveTitleEffects"
        },
        "configuration": {
            "label": "allActiveTitleEffects",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the list of all loaded addons.",
            "examples": [
                {
                    "text": "```sqf\n\nallAddonsInfo\n/*\n\t[\n\t\t[\"bin\\\",\"150301\",false,-1,\"66b6d1a87da30e0386fec881504c14a0a6025cb1\"],\n\t\t[\"core\\\",\"129618\",false,-1,\"49e1b8da67de848c8ea058fd8512c222ccb6d919\"],\n\t\t[\"Languagecore_F\\\",\"150376\",false,-1,\"2ee7b09d60f916d7e56934632f55683a14a636b7\"],\n\t\t[\"a3\\anims_f_aow\\\",\"149768\",false,0,\"59df21ad1fc6939c460a555b3af662f725564b37\"],\n\t\t[\"a3\\dubbing_radio_f_enoch\\\",\"150070\",false,1,\"5ca436c61a634fcbd28ca9480a4c8249c5b0e4bd\"],\n\t\t[\"a3\\armor_f_tank\\\",\"150292\",false,2,\"6d0ea8b45ff4cd316b3d6c5575def9dd048e198e\"],\n\t\t[\"a3\\music_f_tacops\\\",\"124064\",false,3,\"435c2b0338fe6bec7685002dca7c47778abf44ee\"],\n\t\t...\n\t]\n*/\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`allAddonsInfo`",
                    "returns": "`Array` of `Array`s in format [prefix, version, isPatched, modIndex, hash], where:\n* prefix: `String` - addon prefix\n* version: `String` - addon revision version\n* isPatched: `Boolean` - `true` if patching is enabled and this addon is being patched \n* {{GVI|arma3|2.14"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/allAddonsInfo"
        },
        "configuration": {
            "label": "allAddonsInfo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns all map airports, both static and dynamic.",
            "examples": [
                {
                    "text": "```sqf\n_airplane landAt selectRandom (allAirports select 0);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`allAirports`",
                    "returns": "`Array` in format [staticAirports, dynamicAirports], where:\n* staticAirports `Array` of `Number`s - static airports IDs\n* dynamicAirports `Array` of `Object`s - dynamic airports objects (such as \"DynamicAirport_01_F\" found on aircraft carrier)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/allAirports"
        },
        "configuration": {
            "label": "allAirports",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return a list of all existing cameras.",
            "examples": [
                {
                    "text": "```sqf\n{\n\tparams [\"_camera\", \"_r2tInfos\", \"_isPrimary\", \"_ppEffectName\", \"_viewMode\", \"_TIindex\"];\n\t{\n\t\tparams[\"_r2tName\", \"_ppEffectName\", \"_ppEffectType\", \"_TIindex\"];\n\t} forEach _r2tInfos;\n} forEach allCameras;\n\n```"
                },
                {
                    "text": "```sqf\n\nprivate _allCamerasInfo = allCameras;\n{\n\tparams [\"_camera\", \"\", \"_isPrimary\"];\n\tif (!_isPrimary) then { camDestroy _camera };\n} forEach _allCamerasInfo;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`allCameras`",
                    "returns": "`Array` of `Array`s format [camera, r2tInfos, isPrimary, effectName, viewMode, TIindex]\n* camera: `Object` - the camera itself (see `camCreate`)\n* r2tInfos: `Array` of `Array`s format [r2tName, r2tEffectName, ppEffectType, TIindex] where:\n** r2tName: `String` - the camera's RTT name (see `cameraEffect`)\n** r2tEffectName: `String` - see `cameraEffect` for possible values\n** ppEffectType: `String` - one of `**Normal**`, `**NightVision**`, `**Thermal**`, `**Colors**`, `**Mirror**`, `**ChromAber**` or `**FilmGrain**`\n** TIIndex: `Number` - see `setCamUseTI` for possible values\n* isPrimary: `Boolean` - whether or not this camera is the current main one\n* effectName: `String` - (Optional, only available if _isPrimary_ is `true`) see `cameraEffect` for possible values\n* viewMode: `Number` - (Optional, only available if _isPrimary_ is `true`) 0 = normal, 1 = NVG, 2 = TI, 3 = NVG + TI\n* TIIndex: `Number` - (Optional, only available if _isPrimary_ is `true`) see `setCamUseTI` for possible values"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/allCameras"
        },
        "configuration": {
            "label": "allCameras",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a list of all controls in the provided display or controls group, including \"sub\"-controls from other `CT_CONTROLS_GROUP`s.",
            "examples": [
                {
                    "text": "```sqf\n_allCtrls = allControls findDisplay 46;\n```"
                },
                {
                    "text": "```sqf\n_allSubCtrls = allControls _myControlsGroup;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "display",
                            "description": "`Display`"
                        }
                    ],
                    "outline": "`allControls` display",
                    "returns": "`Array` of `Control`s"
                },
                {
                    "parameters": [
                        {
                            "name": "controlsGroup",
                            "description": "`Control` - `CT_CONTROLS_GROUP`"
                        }
                    ],
                    "outline": "`allControls` controlsGroup",
                    "returns": "`Array` of `Control`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/allControls"
        },
        "configuration": {
            "label": "allControls",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns list of all curator logic units, not the units assigned to the logic.",
            "examples": [
                {
                    "text": "```sqf\n_allCuratorLogics = allCurators;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**allCurators**",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/allCurators"
        },
        "configuration": {
            "label": "allCurators",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns all named layers used by `cutRsc`, `cutText`, `cutObj` or `cutFadeOut`.\nThe layer normally would be added on the first use of any of the aforementioned commands, however if a layer needs to be reserved it could be done like so:\n\n```sqf\nprivate _layerNum = \"TAG_myLayerName\" cutFadeOut 0;\n```",
            "examples": [
                {
                    "text": "```sqf\nprivate _allLayers = allCutLayers;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`allCutLayers`",
                    "returns": "`Array` - array of `String`s: The index of the layer name in the array corresponds to the layer number the cut effect will be displayed on. If no layers were defined, the return is <sqf inline>[\"\"], because layer 0 is reserved for usage in cut commands without layer param or when the provided layer name is empty `**\"\"**`."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/allCutLayers"
        },
        "configuration": {
            "label": "allCutLayers",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return a list of all dead units including agents and destroyed vehicles. Dead units may be in vehicles.",
            "examples": [
                {
                    "text": "```sqf\n{ deleteVehicle _x } forEach allDead;\n```"
                },
                {
                    "text": "allAlive:\n\n```sqf\n_all = allUnits + vehicles;\n{\n\t_all pushBack agent _x;\n} forEach (agents - [teamMemberNull]);\nallAlive = _all - allDead;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`allDead`",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/allDead"
        },
        "configuration": {
            "label": "allDead",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return a list of dead units including agents. Dead unit might be inside vehicle.",
            "examples": [
                {
                    "text": "```sqf\n{ deleteVehicle _x } forEach allDeadMen;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`allDeadMen`",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/allDeadMen"
        },
        "configuration": {
            "label": "allDeadMen",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array with all `Diary` Records for the given subject available to the given person. See `Diary` for the explanation on the available subjects and their structure.",
            "examples": [
                {
                    "text": "```sqf\nplayer allDiaryRecords \"Diary\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "person",
                            "description": "`Object` - unit"
                        },
                        {
                            "name": "subject",
                            "description": "`String` - subject"
                        }
                    ],
                    "outline": "person `allDiaryRecords` subject",
                    "returns": "`Array` - all diary records for the given subject in the following format: [id, title, text, icon, task, taskState, showTitle, date, record], where:\n* id: `Number` - record id\n* title: `String` - record title\n* text: `String` - record text\n* icon: `String` - record icon\n* task: `Task` - record task\n* taskState: `String` - record task state\n* showTitle: `Boolean` - `true` if tile is shown\n* date: `Array` - `date` in format [year, month, day, hour, minute, second] \n* record: [Diary Record](https://community.bistudio.com/wiki/Diary%20Record) - record reference"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/allDiaryRecords"
        },
        "configuration": {
            "label": "allDiaryRecords",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array with all `Diary` subjects available to the given person. See `Diary` for the explanation on the available subjects and their structure.",
            "examples": [
                {
                    "text": "```sqf\nallDiarySubjects player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "person",
                            "description": "`Object` - unit"
                        }
                    ],
                    "outline": "`allDiarySubjects` person",
                    "returns": "`Array` - all diary subject entries in the following format: [name, displayName, picture, countRecords, isReadOnly, isSelected], where:\n* name: `String` - internal subject reference\n* displayName: `String` - visible name\n* picture: `String` - subject icon\n* countRecords: `Number` - number of records in this subject\n* isReadOnly: `Boolean` - whether or not the records could be added\n* isSelected: `Boolean` - `true` if subject is currently selected"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/allDiarySubjects"
        },
        "configuration": {
            "label": "allDiarySubjects",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a list of all opened GUI displays.\n\n**NOTE**:  Other displays could be accessed via `uiNamespace` variable which is updated every time a display is opened or closed.\nFor example, to access IGUI displays:\n\n```sqf\nprivate _iguiDisplays = uiNamespace getVariable [\"IGUI_displays\", []];\n```\n\n\nOther display variables:\n{{Columns|4|\n* `**\"3DENDisplaysTemp_displays\"**`\n* `**\"3DENDisplays_displays\"**`\n* `**\"BootcampDisplays_displays\"**`\n* `**\"BootcampTitles_displays\"**`\n* `**\"CuratorDisplays_displays\"**`\n* `**\"CuratorTitles_displays\"**`\n* `**\"GUI_displays\"**`\n* `**\"IGUI_displays\"**`\n* `**\"KartDisplays_displays\"**`\n* `**\"Loading_displays\"**`\n}}",
            "examples": [
                {
                    "text": "```sqf\nprivate _allDisps = allDisplays;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`allDisplays`",
                    "returns": "`Array` of GUI `Display`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/allDisplays"
        },
        "configuration": {
            "label": "allDisplays",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns all environmental 3D sound sources (`Object`s) like trees and houses in camera vicinity.",
            "examples": [
                {
                    "text": "```sqf\nprivate _sources = allEnv3DSoundSources;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`allEnv3DSoundSources`",
                    "returns": "`Array` of `Object`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/allEnv3DSoundSources"
        },
        "configuration": {
            "label": "allEnv3DSoundSources",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return a list of all groups created on the following sides `east`, `west`, `resistance`/`independent` and `civilian` only. Does not contain groups of `sideLogic`.",
            "examples": [
                {
                    "text": "```sqf\n{ leader _x sideChat \"Go ! Go ! Go !\" } forEach allGroups;\n```"
                },
                {
                    "text": "All groups with players:\n\n```sqf\n\nprivate _allGroupsWithPlayers = [];\n{ _allGroupsWithPlayers pushBackUnique group _x } forEach allPlayers;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`allGroups`",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/allGroups"
        },
        "configuration": {
            "label": "allGroups",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the list of object or model `LOD`s.",
            "examples": [
                {
                    "text": "```sqf\n\nallLODs player;\n/*\n\t[\n\t\t[0,\"1\",1,91],\n\t\t[1,\"2\",2,91],\n\t\t[2,\"3\",3,84],\n\t\t[3,\"4\",4,43],\n\t\t[4,\"5\",5,34],\n\t\t[5,\"VIEW_PILOT\",1100,89],\n\t\t[6,\"shadow(0)\",10000,80],\n\t\t[7,\"shadow(10)\",10010,33],\n\t\t[8,\"geometry\",1e+013,42],\n\t\t[9,\"memory\",1e+015,55],\n\t\t[10,\"landContact\",2e+015,0],\n\t\t[11,\"hitpoints\",5e+015,33],\n\t\t[12,\"geometryView\",6e+015,19],\n\t\t[13,\"geometryFire\",7e+015,57],\n\t\t[14,\"shadow(1000)\",11000,80],\n\t\t[15,\"shadow(1010)\",11010,33]\n\t]\n*/\n\n```"
                },
                {
                    "text": "```sqf\n\nallLODs getText (configFile >> \"CfgWeapons\" >> \"arifle_MX_F\" >> \"model\");\n/*\n\t[\n\t\t[0,\"1\",1,17],\n\t\t[1,\"2\",2,17],\n\t\t[2,\"3\",3,16],\n\t\t[3,\"4\",4,14],\n\t\t[4,\"5\",5,12],\n\t\t[5,\"6\",6,9],\n\t\t[6,\"VIEW_PILOT\",1100,16],\n\t\t[7,\"shadow(0)\",10000,2],\n\t\t[8,\"shadow(10)\",10010,0],\n\t\t[9,\"geometry\",1e+013,0],\n\t\t[10,\"geometrySimple\",2e+013,0],\n\t\t[11,\"memory\",1e+015,13],\n\t\t[12,\"geometryView\",6e+015,2],\n\t\t[13,\"shadow(1000)\",11000,2],\n\t\t[14,\"shadow(1010)\",11010,0]\n\t]\n*/\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "objectOrModel",
                            "description": "`Object` or `String`\n* `Object` - object\n* `String` - model path (see `getModelInfo`)"
                        }
                    ],
                    "outline": "`allLODs` objectOrModel",
                    "returns": "`Array` - list of all model LODs in the following format: [LODindex, LODname, LODresolution, countNamedSelections], where:\n* LODindex: `Number` - direct index of the LOD for fast access\n* LODname: `String` - LOD description name for LOD identification\n* LODresolution: `Number` - the actual [LOD resolution](https://community.bistudio.com/wiki/LOD%20resolutions), could be used to select LOD in `selectionNames` and `selectionPosition`\n* countNamedSelections: `Number` - number of named selections in this LOD, could be returned with `selectionNames` command"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/allLODs"
        },
        "configuration": {
            "label": "allLODs",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns all map marker names, including user-placed markers.\n\n{{Feature|informative|\n* {{GVI|arma3|1.58",
            "examples": [
                {
                    "text": "```sqf\n_markers = allMapMarkers; // returns e.g [\"marker1\", \"_USER_DEFINED #2/0\"]\n```"
                },
                {
                    "text": "```sqf\n\n{\n\tprivate \"_a\";\n\t_a = toArray _x;\n\t_a resize 15;\n\tif (toString _a == \"_USER_DEFINED #\") then\n\t// or if (_x select [0, 15] == \"_USER_DEFINED #\") since {{arma3}} v1.28\n\t{\n\t\tdeleteMarker _x;\n\t};\n} forEach allMapMarkers;\n\n```"
                },
                {
                    "text": "```sqf\n\nif (_someString in allMapMarkers) then\n{\n\thint (_someString + \" is an existing marker\");\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`allMapMarkers`",
                    "returns": "`Array` of `String`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/allMapMarkers"
        },
        "configuration": {
            "label": "allMapMarkers",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array of all mines in the mission",
            "examples": [
                {
                    "text": "```sqf\nhint format [\"there are %1 mines total\", count allMines];\n```"
                },
                {
                    "text": "```sqf\nprivate _isFirstMineDetected = (allMines select 0) mineDetectedBy blufor;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`allMines`",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/allMines"
        },
        "configuration": {
            "label": "allMines",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns all objects of the given type that are currently present in the mission. In some cases, the `entities` command is a much faster alternative to this command.\n\nSome of the special types that can be detected with this command (and with `nearestObject`):\n* `**\"\"**` - returns everything, e.g. agents, bees, mosquitoes, footprints, armed mines, ...\n* `**\"all\"**` - more restrictive than `**\"\"**`: no ambient insects, only agents such as rabbits and snakes, no footprints, tracks, no armed mines\n* `**\"#slop\"**` - blood drops\n* `**\"#mark\"**` - unit footprints\n* `**\"#track\"**` - vehicle tracks\n* `**\"#crater\"**` - explosion craters on the ground\n* `**\"#crateronvehicle\"**` - bullet marks on vehicles\n* `**\"#explosion\"**` - explosions\n* `**\"#objectdestructed\"**` - building, tree or bush destruction\n* `**\"#soundonvehicle\"**` - sounds created with `say3D` for example\n* `**\"#dynamicsound\"**` - sound sources created using `createSoundSource`\n* `**\"EmptyDetector\"**` - all `Trigger`s\n* `**\"Logic\"**` - all game logics\n**IMPORTANT**: This command is quite performance heavy. Use with caution!",
            "examples": [
                {
                    "text": "```sqf\n_airObjects = allMissionObjects \"Air\";\n```"
                },
                {
                    "text": "```sqf\n{ deleteVehicle _x; } forEach (allMissionObjects \"\");\n```"
                },
                {
                    "text": "```sqf\n_allMObjects = allMissionObjects \"All\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`allMissionObjects` type",
                    "returns": "`Array` of `Object`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/allMissionObjects"
        },
        "configuration": {
            "label": "allMissionObjects",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array of requested objects as fast as the engine allows it. The objects can be requested by object type and simulation kind.\n**NOTE**: Some terrain placed objects are not part of slow vehicles collection, use `nearestTerrainObjects` command to return these objects",
            "examples": [
                {
                    "text": "```sqf\nprivate _visitorBuildings = 1 allObjects 0;\n```"
                },
                {
                    "text": "```sqf\nprivate _userPlacedBuildings = 8 allObjects 0;\n```"
                },
                {
                    "text": "```sqf\n\nonEachFrame\n{\n\thintSilent str\n\t[\n\t\tcount (63 allObjects 0),\n\t\tcount (63 allObjects 1),\n\t\tcount (63 allObjects 2),\n\t\tcount (63 allObjects 3),\n\t\tcount (63 allObjects 4),\n\t\tcount (63 allObjects 5),\n\t\tcount (63 allObjects 6)\n\t];\n};\n\n```"
                },
                {
                    "text": "```sqf\n\nprivate _allGroundWeaponHolders = \"GroundWeaponHolder\" allObjects 0;\nprivate _allSimulatedWeaponHolders = \"WeaponHolderSimulated\" allObjects 1;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "objectType",
                            "description": "`Number` - type can be a combination of types according to bit flag operation (see `getObjectType`):\n* -1 - {{GVI|arma3|2.12"
                        },
                        {
                            "name": "objectCollection",
                            "description": "`Number` - supported values:\n* 0 - Slow (and very slow) entities: some houses, rubbles, street lamps, churches, etc\n* 1 - Normal entities: vehicles etc\n* 2 - Fast entities: shots and other high precision entities\n* 3 - Cloudlets: smokes, dust, etc\n* 4 - Out vehicles: objects that are not listed anywhere else, holders, etc\n* 5 - Animals: animals, birds, insects, etc\n* 6 - Mines: mines\n* 7 - {{GVI|arma3|2.12"
                        }
                    ],
                    "outline": "objectType `allObjects` objectCollection",
                    "returns": "`Array` - array of `Object`s"
                },
                {
                    "parameters": [
                        {
                            "name": "objectType",
                            "description": "`String` - type of the objects (will exact match return of `typeOf`)"
                        },
                        {
                            "name": "objectCollection",
                            "description": "`Number` - see main syntax above"
                        }
                    ],
                    "outline": "objectType `allObjects` objectCollection",
                    "returns": "`Array` - array of `Object`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/allObjects"
        },
        "configuration": {
            "label": "allObjects",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Allow/dissallow 3D mode., \n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "bool",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "map `allow3DMode` bool",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/allow3DMode"
        },
        "configuration": {
            "label": "allow3DMode",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "If `true`, units will remain in a vehicle with broken tracks/wheels; they will still eject if the vehicle is drowning, about to explode or upside down for a while.\nThe {{Link|#Syntax 2|alternative syntax}} provides the ability to keep the crew in vehicle when it is upside down.",
            "examples": [
                {
                    "text": "```sqf\n_vehicle allowCrewInImmobile true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "allow",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "vehicle `allowCrewInImmobile` allow",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "brokenWheels",
                            "description": "`Boolean` - do not auto eject when vehicle has broken wheels"
                        },
                        {
                            "name": "upsideDown",
                            "description": "`Boolean` - do not auto eject when vehicle is upside down"
                        }
                    ],
                    "outline": "vehicle `allowCrewInImmobile` [brokenWheels, upsideDown]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/allowCrewInImmobile"
        },
        "configuration": {
            "label": "allowCrewInImmobile",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Allows curator placing and working with modules outside of edit areas.",
            "examples": [
                {
                    "text": "```sqf\ncuratorModule allowCuratorLogicIgnoreAreas true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curatorObj",
                            "description": "`Object` - curator module."
                        },
                        {
                            "name": "allow",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "curatorObj `allowCuratorLogicIgnoreAreas` allow",
                    "returns": "`Nothing`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/allowCuratorLogicIgnoreAreas"
        },
        "configuration": {
            "label": "allowCuratorLogicIgnoreAreas",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enables / disables an entity's ability to receive damage. This command does not prevent the entity from taking scripted damage from commands such as `setDamage`, `setHit`, `setHitIndex` or `setHitPointDamage`.\n**NOTE**: This command only supports entities (`**Entity**` is a [child class](https://community.bistudio.com/wiki/Class%20Inheritance) of `**Object**`, i.e. all entities are objects, but not all objects are entities). Consequently, there are objects that are not affected by this command, for example terrain vegetation such as trees.",
            "examples": [
                {
                    "text": "```sqf\nplayer allowDamage false;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "`Object`"
                        },
                        {
                            "name": "allow",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "entity `allowDamage` allow",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/allowDamage"
        },
        "configuration": {
            "label": "allowDamage",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Allow or prevent an object being damaged (or injured, or killed). The command does not prevent object from taking scripted damage such as `setDamage` or `setHit`.",
            "examples": [
                {
                    "text": "```sqf\nplayer allowDammage false;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "allow",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "object `allowDammage` allow",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/allowDammage"
        },
        "configuration": {
            "label": "allowDammage",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns which types of repair/refuel/rearm service are allowed. The two available types are manual, where the action is displayed to the user, and auto, where the service happens within distance.\nThe engine default is both (manual and auto) for historic reasons.",
            "examples": [
                {
                    "text": "```sqf\nif (allowedService _vehicle == -1) then { hint \"this is not a service vehicle!\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - supply vehicle, i.e. ammo truck"
                        }
                    ],
                    "outline": "`allowedService` vehicle",
                    "returns": "`Number` - 0: none, 1: auto, 2: manual, 3: both, -1: unsupported"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/allowedService"
        },
        "configuration": {
            "label": "allowedService",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Allow/dissallow file ops (load/save etc).\n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "bool",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "map `allowFileOperations` bool",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/allowFileOperations"
        },
        "configuration": {
            "label": "allowFileOperations",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the cowardice level (the lack of courage or bravery) of a group or unit. \n\n\n\nNotes:\n* Fleeing only affects AI led groups.\n* Only the group as a whole can flee (or not).\n* The courage of the AI group is based on the group's leader [[Arma_3_AI_Skill#Sub-Skills|courage subskill]].\n* Each group has a max strength (summed \"armor\" of all infantry units - plus armor when inside vehicles).\n* If the group losses by injury/damage or death/destruction are higher than the max strength, multiplied by leader's courage or `allowFleeing` level , then the group will start fleeing.\n* As result primarily the AI flees to a nearby \"supply point\" (some friendly units - preferably with medic or engineer, or a vehicle with repair/ammo/fuel cargo). Alternatively it will try to find a safe position within a 600m radius from the initial waypoint (danger, distance, amount of cover positions are taken into account).\n* After the fleeing has been finished the group's initial strength is reset.\n* Fleeing units in `combatMode` red, will be set to yellow when fleeing to avoid engaging enemies while doing so.\n* While fleeing, the group leader will be set to green, to avoid giving engage or fire orders, unless in `combatMode` blue already. Also `speedMode` is set to full.\n* When reaching their flee point/destination, they will change to `combatMode` yellow and `speedMode` normal.\n* With `allowFleeing` one can make unit's flee earlier (or essentially never flee). Apply it, overrides the courage subskill influence.",
            "examples": [
                {
                    "text": "```sqf\n_group1 allowFleeing 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitOrGroup",
                            "description": "`Object` or `Group`"
                        },
                        {
                            "name": "cowardice",
                            "description": "`Number` - 1 is maximum cowardice and 0 minimum. A value of 0 will disable fleeing all together"
                        }
                    ],
                    "outline": "unitOrGroup `allowFleeing`  cowardice",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/allowFleeing"
        },
        "configuration": {
            "label": "allowFleeing",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set if the units given in the list are allowed to enter vehicles.\n**NOTE**: See [AI Group Vehicle Management](https://community.bistudio.com/wiki/AI%20Group%20Vehicle%20Management) for more information.",
            "examples": [
                {
                    "text": "```sqf\n[_soldier1, _soldier2] allowGetIn true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitArray",
                            "description": "`Array` of `Object`s"
                        },
                        {
                            "name": "allow",
                            "description": "`Boolean` - `true` allows the `units` to enter, `false` denies them"
                        }
                    ],
                    "outline": "unitArray `allowGetIn` allow",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/allowGetIn"
        },
        "configuration": {
            "label": "allowGetIn",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets which type of repair/refuel/rearm service is allowed. The two available types are manual, where the action is displayed to the user, and auto, where the service happens within distance.\nThe engine default is both (manual and auto) for historic reasons.",
            "examples": [
                {
                    "text": "```sqf\nammoTruck allowService 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - supply vehicle, i.e. ammo truck"
                        },
                        {
                            "name": "type",
                            "description": "`Number` - 0: none, 1: auto, 2: manual, 3: both"
                        }
                    ],
                    "outline": "vehicle `allowService` type",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/allowService"
        },
        "configuration": {
            "label": "allowService",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Force player to run/jog if set to false.",
            "examples": [
                {
                    "text": "```sqf\nplayer allowSprint false;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "state",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "unit `allowSprint`  state",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/allowSprint"
        },
        "configuration": {
            "label": "allowSprint",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a list of all units controlled by connected clients. This includes:\n* Normal human players (including dead players)\n* [Virtual Entities](https://community.bistudio.com/wiki/Eden%20Editor%3A%20System%23Virtual%20Entities) (see _Systems_ → _Logic Entities_ → _Virtual Entities_ in the [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor))\n** [Headless Clients](https://community.bistudio.com/wiki/Arma%203%3A%20Headless%20Client) (`**HeadlessClient_F**`)\n** Virtual Curators (`**VirtualCurator_F**`, `***_VirtualCurator_F**`)\n** Virtual Spectators (`**VirtualSpectator_F**`)\n\nUse `BIS_fnc_listPlayers` or see _Example 1_ to only get human players.",
            "examples": [
                {
                    "text": "Get human players (i.e. all players excluding Headless Clients):\n\n```sqf\n\nprivate _players = allPlayers - entities \"HeadlessClient_F\";\n\n```"
                },
                {
                    "text": "Get non-virtual players (i.e. all players excluding Virtual Entities):\n\n```sqf\n\nprivate _players = allPlayers select {!(_x isKindOf \"VirtualMan_F\")};\n\n```"
                },
                {
                    "text": "```sqf\n{\n\tsystemChat format [\n\t\t\"Player %1 is %2\", \n\t\tname _x, \n\t\t[\"dead\", \"alive\"] select alive _x\n\t];\n} forEach allPlayers;\n```"
                },
                {
                    "text": "```sqf\nprivate _bluforPlayers = blufor countSide allPlayers;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`allPlayers`",
                    "returns": "`Array` of `Object`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/allPlayers"
        },
        "configuration": {
            "label": "allPlayers",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array of all simple objects that belong to the listed class names. If the array of types is empty [], all simple objects are returned including those without class name.\n**NOTE**: \n* There is no inheritance in simple objects, so only exact class match is allowed.\n* _className_ is not case sensitive.",
            "examples": [
                {
                    "text": "```sqf\nprivate _boxesAndChairs = allSimpleObjects [\"Box_NATO_Equip_F\", \"Land_CampingChair_V2_F\"];\n```"
                },
                {
                    "text": "```sqf\nprivate _allSimpleObjects = allSimpleObjects [];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "classes",
                            "description": "`Array` of `String`s - classnames array. Use `**[]**` to return all simple objects"
                        }
                    ],
                    "outline": "`allSimpleObjects` classes",
                    "returns": "`Array` - array of [simple objects](https://community.bistudio.com/wiki/createSimpleObject)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/allSimpleObjects"
        },
        "configuration": {
            "label": "allSimpleObjects",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return all sites in map.\n**WARNING**: This command is considered deprecated and is no longer supported",
            "examples": [
                {
                    "text": "```sqf\n_allSites = allSites;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**allSites**",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/allSites"
        },
        "configuration": {
            "label": "allSites",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array of available turret paths from vehicle object.\n\n**NOTE**: \n* to look up turrets from config, use `BIS_fnc_allTurrets`\n* to get config from turret path, use `BIS_fnc_turretConfig`",
            "examples": [
                {
                    "text": "```sqf\n\n_turretPaths = allTurrets _mySlammerUP;\t\t\t\t// [[0],[0,0]]\n_turretPaths = allTurrets [_mySlammerUP, true];\t\t// [[0],[0,0]] <- commander turret is also an FFV turret\n_turretPaths = allTurrets [_mySlammerUP, false];\t// [<nowiki/>[0]]\n\n```"
                },
                {
                    "text": "Return FFV turrets only:\n\n```sqf\n_FFVTurrets = allTurrets [tank, true] - allTurrets [tank, false];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`allTurrets` vehicle",
                    "returns": "`Array` of `Array`s format [Turret Path](https://community.bistudio.com/wiki/Turret%20Path)"
                },
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "includeFFV",
                            "description": "`Boolean` - `true` to include FFV (Firing From Vehicle) positions, `false` to exclude them"
                        }
                    ],
                    "outline": "`allTurrets` [vehicle, includeFFV]",
                    "returns": "`Array` of `Array`s format [Turret Path](https://community.bistudio.com/wiki/Turret%20Path)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/allTurrets"
        },
        "configuration": {
            "label": "allTurrets",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a list of all units, **except agents, dead units or units waiting for respawn**, outside and inside vehicles that were created on the following sides `east`, `west`, `independent` and `civilian`.\n**Arma 3**: To get all units of given side, use `**`units` `Side`**`.",
            "examples": [
                {
                    "text": "```sqf\n{ _x setDamage 0.5; _x groupChat \"Braaains\"; } forEach allUnits;\n```"
                },
                {
                    "text": "```sqf\nallUnits apply { diag_log _x; };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`allUnits`",
                    "returns": "`Array` - array of [object](https://community.bistudio.com/wiki/Object)s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/allUnits"
        },
        "configuration": {
            "label": "allUnits",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return a list of all UAV vehicles.",
            "examples": [
                {
                    "text": "```sqf\nhint format [\"Number of UAV(s) on the map: %1\", count allUnitsUAV];\n```"
                },
                {
                    "text": "```sqf\n{ _x setDamage 1 } forEach allUnitsUAV;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`allUnitsUAV`",
                    "returns": "`Array` of `Object`s - array of UAV vehicles"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/allUnitsUAV"
        },
        "configuration": {
            "label": "allUnitsUAV",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a list of [player ids](https://community.bistudio.com/wiki/getPlayerID) of all the users on an MP server.\n**NOTE**: This also lists [Headless Clients](https://community.bistudio.com/wiki/Arma%203%3A%20Headless%20Client).",
            "examples": [
                {
                    "text": "```sqf\n\nif (isServer) then\n{\n\tprivate _allUserIDs = allUsers;\n\tfor \"_i\" from 0 to (count _allUserIds - 1) do\n\t{\n\t\tdiag_log format [\"User #%1 ID: %2\", _i + 1, _allUserIds select _i];\n\t};\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`allUsers`",
                    "returns": "`Array` of user network ID `String`s (see `getPlayerID`, `getUserInfo`)"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/allUsers"
        },
        "configuration": {
            "label": "allUsers",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a list of all variables from the desired namespace.",
            "examples": [
                {
                    "text": "```sqf\n_allVarsUINamespace = allVariables uiNamespace;\n```"
                },
                {
                    "text": "```sqf\n_allVarsTrigger = allVariables trigger1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "namespace",
                            "description": "`Namespace`, `Object`, `Group`, `Task`, `Location`, [Team Member](https://community.bistudio.com/wiki/Team%20Member), {{GVI|arma3|2.02"
                        }
                    ],
                    "outline": "`allVariables` namespace",
                    "returns": "`Array` of `String`s - array of variable names. All names are in lower case (see `toLower`)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/allVariables"
        },
        "configuration": {
            "label": "allVariables",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns ambient temperature on the current terrain in Celsius in format: [airTemperature, blackSurfaceTemperature, whiteSurfaceTemperature]",
            "examples": [
                {
                    "text": "```sqf\nprivate _airTemp = ambientTemperature select 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`ambientTemperature`",
                    "returns": "`Array` of `Number`s in format [airTemperature, blackSurfaceTemperature, whiteSurfaceTemperature]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ambientTemperature"
        },
        "configuration": {
            "label": "ambientTemperature",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check how many rounds are left in the currently loaded magazine in the given muzzle.\n**NOTE**: In older titles and before Arma 3 v1.56, the command did not return ammo for units in vehicles.",
            "examples": [
                {
                    "text": "```sqf\n_count = player ammo \"M16\"; // returns 30 in case of a full magazine\n```"
                },
                {
                    "text": "```sqf\n_count = player ammo \"M203Muzzle\";\n```"
                },
                {
                    "text": "```sqf\n_count = player ammo primaryWeapon player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "muzzle",
                            "description": "`String` - weapon's muzzle - see the [Weapons](https://community.bistudio.com/wiki/%3ACategory%3AWeapons) topic for reference about possible values"
                        }
                    ],
                    "outline": "unit `ammo` muzzle",
                    "returns": "`Number`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/ammo"
        },
        "configuration": {
            "label": "ammo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns ammo count on given pylon (or `false` on failure).",
            "examples": [
                {
                    "text": "```sqf\nprivate _ammoCount = (vehicle player) ammoOnPylon \"pylon1\";\n```"
                },
                {
                    "text": "```sqf\nhint str (vehicle player ammoOnPylon \"pylonCenter\");\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "pylon",
                            "description": "`String` or `Number` - pylon's name or index"
                        }
                    ],
                    "outline": "vehicle `ammoOnPylon` pylon",
                    "returns": "`Number` or `Boolean` - `false` on failure"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ammoOnPylon"
        },
        "configuration": {
            "label": "ammoOnPylon",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` only if both conditions are `true`.\nIn case of the alternative syntax, {{Link|https://en.wikipedia.org/wiki/Lazy_evaluation#Control_structures|lazy evaluation}} is used - if left operand is `false`, evaluation of the right side is ignored.",
            "examples": [
                {
                    "text": "```sqf\n\nif ((not isNull player) and (alive player) and (_enemycount == 0)) then\n{\n\thint \"you win !\";\n};\n\n```"
                },
                {
                    "text": "```sqf\n\nif ((count _array > 0) and { (_array select 0) == player }) then\t// works as expected\n{\n\thint \"It works!\";\n};\n\nif ((count _array > 0) and (_array select 0) == player) then\t\t// Error: _array select 0 is evaluated\n{\n\thint \"It... works?\";\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "a",
                            "description": "`Boolean` - test condition or variable"
                        },
                        {
                            "name": "b",
                            "description": "`Boolean` - test condition or variable"
                        }
                    ],
                    "outline": "a `and` b",
                    "returns": "`Boolean`"
                },
                {
                    "parameters": [
                        {
                            "name": "a",
                            "description": "`Boolean` - test condition or variable"
                        },
                        {
                            "name": "b",
                            "description": "`Code` - code that returns `Boolean`. It is **not** evaluated if _a_ is `false`"
                        }
                    ],
                    "outline": "a `and` b",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/and"
        },
        "configuration": {
            "label": "and",
            "grammarType": "condition-operator"
        }
    },
    {
        "documentation": {
            "description": "Gets the angular velocity of the object in world space as a 3D vector. The units are in Rad/s (radians per second) and rotations are clockwise.",
            "examples": [
                {
                    "text": "```sqf\nangularVelocity myHeli; // [0.01, 0.03, 0.95]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "obj",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`angularVelocity` obj",
                    "returns": "`Array` format `Vector3D` - angular velocity of the object in world space ([0,0,0] if angular velocity is not supported by the object)"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/angularVelocity"
        },
        "configuration": {
            "label": "angularVelocity",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets the angular velocity of the object in model space as a 3D vector. The units are in Rad/s (radians per second) and rotations are clockwise.",
            "examples": [
                {
                    "text": "```sqf\nhint str angularVelocityModelSpace myHeli; // [0.01, 0.03, 0.95]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "obj",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`angularVelocityModelSpace` obj",
                    "returns": "`Array` format `Vector3D` - angular velocity of the object in model space ([0,0,0] if angular velocity is not supported by the object)"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/angularVelocityModelSpace"
        },
        "configuration": {
            "label": "angularVelocityModelSpace",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Activates given object animation. Animation is defined in CfgModels [animations](https://community.bistudio.com/wiki/Model%20Config%23Animations) class. Class names listed in CfgVehicles [AnimationSources](https://community.bistudio.com/wiki/Model%20Config%23AnimationSources) bound to \"Proxy\" controller can also be animated with `animate` command (see [Arma 3: createVehicle/vehicles](https://community.bistudio.com/wiki/Arma%203%3A%20createVehicle%2Fvehicles)).\n**Arma 3**: \n* It is recommended that `animateSource` command is used instead of `animate` whenever is possible, as it is more efficient and optimised for multiplayer\n* Since Arma 3 v1.58 animation names can be obtained with `animationNames`\n**WARNING**: Mixing `animateSource` command with `animate` command to animate the same part may produce some undefined behaviour.",
            "examples": [
                {
                    "text": "```sqf\n_building animate [\"maindoor\", 1];\n```"
                },
                {
                    "text": "```sqf\n_building animate [\"Door_1_rot\", 1, true];\n```"
                },
                {
                    "text": "Create Offroad and add flashing police light bar:\n\n```sqf\n\noffroad = \"C_Offroad_01_F\" createVehicle (player getRelPos [5, 0]);\noffroad animate [\"HidePolice\", 0];\noffroad animate [\"BeaconsStart\", 1];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "animationName",
                            "description": "`String` - name of the animation. This is the class-name of the animation defined in the config"
                        },
                        {
                            "name": "phase",
                            "description": "`Number` - range 0 (start point of the animation) to 1 (end point of the animation). The speed, in which the animation is processed, is defined in the addon's config.cpp and cannot be changed during running missions"
                        },
                        {
                            "name": "speed",
                            "description": "`Boolean` or (since {{GVI|arma3|1.66"
                        }
                    ],
                    "outline": "object `animate` [animationName, phase, speed]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/animate"
        },
        "configuration": {
            "label": "animate",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Forces animation of bay to given state, -1 for reset to engine handling, can cause weapon inoperative, because weapon is released when bay state == 1.\n**NOTE**: \nWhile there is no getter to read the animation phase of the given bay, the `animationPhase` command can be used with the individual bay door name from `animationNames` as a workaround (See _Example 3_).",
            "examples": [
                {
                    "text": "```sqf\nvehicle player animateBay [1, 0.5];\n```"
                },
                {
                    "text": "```sqf\nvehicle player animateBay [1, 1, true];\n```"
                },
                {
                    "text": "Getter example, here for the UCAV Sentinel:\n```sqf\n\nucav animateBay [1, 1];\n// can be checked with\nucav animationPhase \"weapons_bay_l_1\";\n// or\nucav animationPhase \"weapons_bay_l_2\";\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "bay",
                            "description": "`Number` - bay index (index starts from 1 and different from pylon index)"
                        },
                        {
                            "name": "animphase",
                            "description": "`Number` - animation phase in range 0..1"
                        },
                        {
                            "name": "instant",
                            "description": "`Boolean` - (Optional, default `false`) animate immediately"
                        }
                    ],
                    "outline": "vehicle `animateBay` [bay, animphase, instant]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/animateBay"
        },
        "configuration": {
            "label": "animateBay",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Animates a door on a vehicle. Animation is defined in config file in `CfgVehicles` -> [ AnimationSources](https://community.bistudio.com/wiki/Model_Config%23AnimationSources). Wanted animation phase is set with phase param. This command works only on animation sources with \"door\" controller. Door_L in the example below can be animated with `animateDoor` but not CargoRamp_Open: `**heli `animateDoor` [\"Door_L\", 1];**`{{Feature | important | `animateDoor` `**phase**` param will be rounded: anything >0.5 will be rounded to 1 and <{{=}}0.5 will be rounded to 0. Therefore it is not possible to open a door half way with this command}}  \n\n```cpp\nclass AnimationSources\n{\n\tclass CargoRamp_Open\n\t{\n\t\tsource = \"user\";\n\t\tanimPeriod = 5;\n\t\tinitPhase = 0;\n\t};\n\tclass Door_L\n\t{\n\t\tsource = \"door\";\n\t\tanimPeriod = 1.6;\n\t};\n};\n```\nTo animate doors or other sources that have \"user\" controller, use `animate` command, or even better, `animateSource` (recommended). Sources with \"hit\" controller can be animated with `setHitPointDamage` command applied to the name contained in hitpoint property. For availability of animation sources and their controller types see: [Arma 3: createVehicle/vehicles](https://community.bistudio.com/wiki/Arma%203%3A%20createVehicle%2Fvehicles)",
            "examples": [
                {
                    "text": "```sqf\nTaru animateDoor [\"Door_1_source\", 1];\n```"
                },
                {
                    "text": "Open left front door on Ifrit instantly:\n\n```sqf\nIfrit animateDoor [\"Door_LF\", 1, true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "doorname",
                            "description": "`String`"
                        },
                        {
                            "name": "phase",
                            "description": "`Number`"
                        },
                        {
                            "name": "instant",
                            "description": "`Boolean` - (Optional, default `false`) when `true` and phase is either 0 or 1, door will change phase instantaneously"
                        }
                    ],
                    "outline": "object `animateDoor` [doorname, phase, instant]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/animateDoor"
        },
        "configuration": {
            "label": "animateDoor",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Force animation of pylon to given state, -1 for reset to engine handling, can cause weapon inoperative, because weapon is released  when pylon state == 1.",
            "examples": [
                {
                    "text": "```sqf\nvehicle player animatePylon [1, 0.5];\n```"
                },
                {
                    "text": "```sqf\nvehicle player animatePylon [\"pylon1\", 0.5];\n```"
                },
                {
                    "text": "```sqf\nvehicle player animatePylon [\"pylon1\", 1, true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "pylon",
                            "description": "`Number` or {{GVI|arma3|1.94"
                        },
                        {
                            "name": "animphase",
                            "description": "`Number` - animation phase in range 0..1"
                        },
                        {
                            "name": "instant",
                            "description": "`Boolean` - (Optional) animate immediately"
                        }
                    ],
                    "outline": "vehicle `animatePylon` [pylon, animphase, instant]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/animatePylon"
        },
        "configuration": {
            "label": "animatePylon",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Process an animation of the object. If `animate` uses class name from `CfgModels` _Animations_, `animateSource` uses name defined by the _source_ property. AnimationSources can animate multiple `animate` Animations. AnimationSource is defined in [CfgVehicles](https://community.bistudio.com/wiki/%3ACategory%3ACfgVehicles)' [AnimationSources](https://community.bistudio.com/wiki/Model%20Config%23AnimationSources) (see [Arma 3: createVehicle/vehicles](https://community.bistudio.com/wiki/Arma%203%3A%20createVehicle%2Fvehicles)).\n\n**Arma 3**:  It is recommended that `animateSource` command is used instead of `animate` whenever is possible, as it is more efficient and optimized for MP\n**WARNING**: Mixing `animateSource` command with `animate` command to animate the same part may produce some undefined behaviour.",
            "examples": [
                {
                    "text": "```sqf\nhouse animateSource [\"Door_1_source\", 1, true];\n```"
                },
                {
                    "text": "Create UGV and manipulate its turret (Not possible to do with `animate` command. See [Arma 3: createVehicle/vehicles](https://community.bistudio.com/wiki/Arma%203%3A%20createVehicle%2Fvehicles) for reference)\n\n```sqf\n\nugv = \"B_UGV_01_F\" createVehicle (player getRelPos [5, 0]);\nugv addAction [\"Show Turret\",\n{\n\tugv animateSource [\"Turret\", 0];\n\tugv animateSource [\"MainTurret\", rad 0, true];\n\tugv animateSource [\"MainGun\", rad 0, true];\n}];\nugv addAction [\"Hide Turret\",\t{ ugv animateSource [\"Turret\", 1] }];\nugv addAction [\"Turret Left\",\t{ ugv animateSource [\"MainTurret\",\t rad 90] }];\nugv addAction [\"Turret Right\",\t{ ugv animateSource [\"MainTurret\",\t-rad 90] }];\nugv addAction [\"Turret Up\",\t\t{ ugv animateSource [\"MainGun\",\t\t rad 30] }];\nugv addAction [\"Turret Down\",\t{ ugv animateSource [\"MainGun\",\t\t-rad 20] }];\n\n```"
                },
                {
                    "text": "```sqf\n\nbarGate animateSource [\"Door_1_sound_source\", 1]; // Open\nbarGate animateSource [\"Door_1_sound_source\", 0]; // Close\n\n```"
                },
                {
                    "text": "Open/close Bar Gate automatically:\n\n```sqf\n\n// Bar Gate init\nif (isServer) then\n{\t\n\tprivate _gateTrigger = createTrigger [\"EmptyDetector\", getPosWorld this, false];\n\t_gateTrigger setVariable [\"BarGateObj\", this];\n\t_gateTrigger setTriggerActivation [\"ANYPLAYER\", \"PRESENT\", true];\n\t_gateTrigger setTriggerArea [5, 25, getDir this, true];\n\t_gateTrigger setTriggerStatements \n\t[\n\t\t\"this\",\n\t\t\"thisTrigger getVariable 'BarGateObj' animateSource ['Door_1_sound_source', 1]\",\n\t\t\"thisTrigger getVariable 'BarGateObj' animateSource ['Door_1_sound_source', 0]\"\n\t];\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "source",
                            "description": "`String` - common source"
                        },
                        {
                            "name": "phase",
                            "description": "`Number` - wanted animation phase"
                        },
                        {
                            "name": "speed",
                            "description": "`Boolean` or `Number` - (Optional, default `false`)\n* `Boolean` - when set to `true`, animation is instant\n* {{GVI|arma3|1.66"
                        }
                    ],
                    "outline": "object `animateSource` [source, phase, speed]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/animateSource"
        },
        "configuration": {
            "label": "animateSource",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `Array` of `String`s where elements are the names of model animations, which should theoretically be available for use with `animate` command. However in practice this depends on whether animation is also made available for use in scripts via config.",
            "examples": [
                {
                    "text": "```sqf\n_names = animationNames static_AT;\n```\n Returns: [\"MainTurret\", \"MainGun\", \"MainTurret_destructX\", \"MainTurret_destructY\", \"MainTurret_destructZ\", \"MainGun_destructX\", \"MainGun_destructY\", \"MainGun_destructZ\", \"magazine_destruct\", \"ammo_belt_destruct\", \"bolt_destruct\", \"charging_handle_destruct\", \"damagehideVez_destruct\", \"damagehideHlaven_destruct\", \"damagehideRecoil_destruct\", \"Turret_shake\", \"Turret_shake_aside\", \"Magazine_hide\", \"Ammo_belt_hide\", \"muzzleFlash\", \"AddAutonomous_unhide\", \"bullet001_reload_hide\", \"bullet002_reload_hide\", \"bullet003_reload_hide\", \"bullet004_reload_hide\", \"bullet005_reload_hide\", \"bullet006_reload_hide\", \"bullet007_reload_hide\", \"bullet008_reload_hide\"]"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`animationNames` object",
                    "returns": "`Array` of `String`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/animationNames"
        },
        "configuration": {
            "label": "animationNames",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the phase of the given animation on the given object. Animation can be scripted (`animate`, `animateSource`, `animateDoor`) or engine driven. Animation names for an object could be found out with `animationNames` command. When animation is rotation, like with \"MainTurret\" for example, the output is in radians, to convert to degrees use `deg` command.",
            "examples": [
                {
                    "text": "```sqf\n_building animate [\"maindoor\",1];\nsleep 1;\n_p = _building animationPhase \"maindoor\";// Returns 1, if the animation speed is two seconds\n```"
                },
                {
                    "text": "```sqf\n_flagPole animationPhase \"flag\";\n```"
                },
                {
                    "text": "```sqf\n_tank animationPhase \"MainTurret\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "animationName",
                            "description": "`String` - name of the animation. This is the class-name of the animation defined in the addon's config.cpp"
                        }
                    ],
                    "outline": "object `animationPhase`  animationName",
                    "returns": "`Number` - range 0 (start point of the animation) to 1 (end point of the animation)"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/animationPhase"
        },
        "configuration": {
            "label": "animationPhase",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns current animation phase of given source. Similar to `animationPhase` or `doorPhase` but designed to complement `animateSource`. This command could be used to obtain relative turret direction and gun elevation on a vehicle (see _Example 2_).",
            "examples": [
                {
                    "text": "```sqf\nprivate _phase = house animationSourcePhase \"Door_1_source\";\n```"
                },
                {
                    "text": "```sqf\n\nprivate _mainturretDirection =\tdeg (_marshall animationSourcePhase \"mainturret\"); // relative to Marshall direction\nprivate _maingunElevation =\t\tdeg (_marshall animationSourcePhase \"maingun\");\nprivate _obsturretDirection =\tdeg (_marshall animationSourcePhase \"obsturret\"); // relative to main turret direction\nprivate _obsgunElevation =\t\tdeg (_marshall animationSourcePhase \"obsgun\");\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "source",
                            "description": "`String`"
                        }
                    ],
                    "outline": "object `animationSourcePhase` source",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/animationSourcePhase"
        },
        "configuration": {
            "label": "animationSourcePhase",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the name of a unit's current primary animation. Seems to be forced to lower case in Arma 3.\n**NOTE**: This command is only for a man unit, other units such as animals cannot use this command.",
            "examples": [
                {
                    "text": "```sqf\n_state = animationState player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`animationState` unitName",
                    "returns": "`String`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/animationState"
        },
        "configuration": {
            "label": "animationState",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns current aperture parameters.",
            "examples": [
                {
                    "text": "```sqf\nprivate _apertureParams = apertureParams;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`apertureParams`",
                    "returns": "`Array` in format [aperture, isForced, estimatedAperture, estimatedLuminance, minCustom, stdCustom, maxCustom, customLuminance, isCustomForced, blinding], where:\n* aperture: `Number` - current aperture\n* isForced: `Boolean` - whether aperture was forced by `setAperture`\n* estimatedAperture: `Number` - engine-estimated scene aperture\n* estimatedLuminance: `Number` - engine-estimated luminance\n* minCustom: `Number` - minimal custom aperture, see `setApertureNew`\n* stdCustom: `Number` - standard custom aperture, see `setApertureNew`\n* maxCustom: `Number` - maximal custom aperture, see `setApertureNew`\n* customLuminance: `Number` - custom luminance, see `setApertureNew`\n* isCustomForced: `Boolean` - whether custom values were forced\n* blinding: `Number` - blinding intensity of the light"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/apertureParams"
        },
        "configuration": {
            "label": "apertureParams",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Appends array2 to the back of array1 modifying array1. See `insert` for an \"appendUnique\" equivalent.\n**NOTE**: `append` does not return array, it modifies the existing array. If you need to return a copy, use \"[[+]]\": \n```sqf\narray3 = array1 + array2;\n```",
            "examples": [
                {
                    "text": "```sqf\n\n_arr = [1,2,3];\n_arr append [4,5,6];\nhint str _arr; // [1,2,3,4,5,6]\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array1",
                            "description": "`Array`"
                        },
                        {
                            "name": "array2",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "array1 `append` array2",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/append"
        },
        "configuration": {
            "label": "append",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Applies the given code to each element of the given data structure and collects the results in an array.",
            "examples": [
                {
                    "text": "```sqf\nprivate _arr = [1,2,3,4,5,6,7,8,9,0] apply { [1,0] select (_x % 2 == 0) }; // [1,0,1,0,1,0,1,0,1,0]\n```"
                },
                {
                    "text": "```sqf\nprivate _arr = [1,2,3,4,5,6,7,8,9,0] apply { _x ^ _x }; // [1,4,27,256,3125,46656,823543,16777216,387420480,1]\n```"
                },
                {
                    "text": "```sqf\n\nprivate _arr1 = [];\n_arr1 resize 20;\n_arr2 = _arr1 apply { 0 }; // [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n\n```"
                },
                {
                    "text": "```sqf\n[0,1,2,3,4] apply { str _x }; // [\"0\",\"1\",\"2\",\"3\",\"4\"]\n```"
                },
                {
                    "text": "```sqf\n\nprivate _hashmap = createHashMapFromArray [[\"Key 1\", \"Value 1\"], [\"Key 2\", \"Value 2\"]];\nprivate _array = _hashmap apply { _y + \" Test\" }; // [\"Value 2 Test\",\"Value 1 Test\"]\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array` - array of `Anything`"
                        },
                        {
                            "name": "code",
                            "description": "`Code` - code to be executed on each element of the array. The current element value is stored in the magic variable [_x](https://community.bistudio.com/wiki/Magic%20Variables%23x)."
                        }
                    ],
                    "outline": "array `apply` code",
                    "returns": "`Array` - resulting array"
                },
                {
                    "parameters": [
                        {
                            "name": "hashmap",
                            "description": "`HashMap`"
                        },
                        {
                            "name": "code",
                            "description": "`Code` - code to be executed on each key-value pair of the hashmap. The current key is stored in the magic variable [_x](https://community.bistudio.com/wiki/Magic%20Variables%23x), the corresponding value is stored in [_y](https://community.bistudio.com/wiki/Magic%20Variables%23y)."
                        }
                    ],
                    "outline": "hashmap `apply` code",
                    "returns": "`Array` - resulting array"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/apply"
        },
        "configuration": {
            "label": "apply",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "Returns, stored in [USERNAME].ArmaXProfile, value of _armoryPoints_ entry. If the entry doesn't exist, it returns 0.",
            "examples": [
                {
                    "text": "```sqf\n_points = armoryPoints;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**armoryPoints**",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/armoryPoints"
        },
        "configuration": {
            "label": "armoryPoints",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Intersects two arrays returning an array of unique common elements, avoiding `nil` values.\nUsing the same array as both parameters will return unique elements of that array.\nIntersects only the first dimension of said arrays.\n**NOTE**: From Arma 3 v 2.14 the order of the intersected elements would follow 'array1' order",
            "examples": [
                {
                    "text": "```sqf\n\n_arr1 = [1,2,3,4,5,2,3,4];\n_arr2 = [4,5,6,1,2,3,5,6];\nhint str (_arr1 arrayIntersect _arr2); // [4,5,1,2,3]\n\n```"
                },
                {
                    "text": "```sqf\n\n_arr = [1,2,3,1,2,3,1,2,3,4,5];\nhint str (_arr arrayIntersect _arr); // [1,2,3,4,5]\n\n```"
                },
                {
                    "text": "Remove `nil`s:\n\n```sqf\nhint str ([1,2,nil,3] arrayIntersect [1,2,nil,3]); // [1,2,3]\n```"
                },
                {
                    "text": "Also works with array elements which are [equal](https://community.bistudio.com/wiki/isEqualTo):\n\n```sqf\nhint str ([[1],[2],[3]] arrayIntersect [[2],[3],[4]]); // [[2],[3]]\n```"
                },
                {
                    "text": "This command is case-sensitive:\n\n```sqf\n\n[\"cAse\"] arrayIntersect [\"cAse\"]; // [\"cAse\"]\n[\"cAse\"] arrayIntersect [\"casE\"]; // []\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array1",
                            "description": "`Array`"
                        },
                        {
                            "name": "array2",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "array1 `arrayIntersect` array2",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/arrayIntersect"
        },
        "configuration": {
            "label": "arrayIntersect",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Arcsine of a number, result in [Degrees](https://community.bistudio.com/wiki/Number%23Degrees).",
            "examples": [
                {
                    "text": "```sqf\n_degrees = asin 0.5; // Returns 30\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "x",
                            "description": "`Number` - in range -1..+1 (both included); any other value returns `NaN`"
                        }
                    ],
                    "outline": "`asin` x",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/asin"
        },
        "configuration": {
            "label": "asin",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Converts position from [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) to [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL)",
            "examples": [
                {
                    "text": "```sqf\n_playerPosAGL = ASLToAGL getPosASL player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "posASL",
                            "description": "`Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) - position to convert"
                        }
                    ],
                    "outline": "`ASLToAGL` posASL",
                    "returns": "[PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ASLToAGL"
        },
        "configuration": {
            "label": "ASLToAGL",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Converts a position from [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) to [PositionATL](https://community.bistudio.com/wiki/Position%23PositionATL)",
            "examples": [
                {
                    "text": "```sqf\nASLToATL getPosASL player isEqualTo getPosATL player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "pos",
                            "description": "`Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) - position to convert"
                        }
                    ],
                    "outline": "`ASLToATL` pos",
                    "returns": "`Array` format [PositionATL](https://community.bistudio.com/wiki/Position%23PositionATL)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ASLToATL"
        },
        "configuration": {
            "label": "ASLToATL",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Tests a condition and if the condition is false, displays error on screen (if -showscripterrors enabled) and logs error into .rpt file. It does not interrupt the script execution.\n\nIf script was pre-processed with `preprocessFileLineNumbers`, it will also show/log the error line number and the file name.",
            "examples": [
                {
                    "text": "```sqf\nassert (1 > 2);\n```\n\n\n[[File:PreprocessFile.jpg]]"
                },
                {
                    "text": "Check function params (Faster alternative to `BIS_fnc_param`)\n\n```sqf\n\nsome_func = {\n\t_0 = _this select 0;\n\t_1 = _this select 1;\n\t_2 = _this select 2;\n\tif (!assert (\n\t\ttypeName _0 == \"ARRAY\" && \n\t\ttypeName _1 == \"STRING\" &&\n\t\ttypeName _2 == \"SCALAR\"\n\t)) exitWith { /* optional error logging */ };\n\thint \"Alright!\";\n};\n[1,2,3] call some_func; // assert error\n[[1],\"2\",3] call some_func; // Alright!\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "condition",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "`assert` condition",
                    "returns": "`Boolean` - mirrors condition"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/assert"
        },
        "configuration": {
            "label": "assert",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "Assign a unit as cargo of a vehicle. Used together with `orderGetIn` to order a unit to get in as cargo into a specific vehicle. Before usage of this command a subordinate unit has not got the option to get into the cargo space of the vehicle.\n**NOTE**: See [AI Group Vehicle Management](https://community.bistudio.com/wiki/AI%20Group%20Vehicle%20Management) for more information.",
            "examples": [
                {
                    "text": "```sqf\n_soldier1 assignAsCargo _truck;\n[_soldier1] orderGetIn true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        },
                        {
                            "name": "vehicleName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "unitName `assignAsCargo` vehicleName",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/assignAsCargo"
        },
        "configuration": {
            "label": "assignAsCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Assigns the character to a specific cargo / passenger index of the given vehicle.\n**NOTE**: See [AI Group Vehicle Management](https://community.bistudio.com/wiki/AI%20Group%20Vehicle%20Management) for more information.",
            "examples": [
                {
                    "text": "```sqf\nplayer assignAsCargoIndex [myHelicopter, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "character",
                            "description": "`Object` - character to assign"
                        },
                        {
                            "name": "vehicle",
                            "description": "`Object` - vehicle to assign to"
                        },
                        {
                            "name": "index",
                            "description": "`Number` - cargo / passenger index"
                        }
                    ],
                    "outline": "character `assignAsCargoIndex` [vehicle, index]",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/assignAsCargoIndex"
        },
        "configuration": {
            "label": "assignAsCargoIndex",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Assign a unit as commander of a vehicle. Used together with `orderGetIn` to order subordinate units to get in as commander of a specific vehicle.\nBefore usage of this command a subordinate unit has not got the option to get into the commander place of the vehicle.\n**NOTE**: See [AI Group Vehicle Management](https://community.bistudio.com/wiki/AI%20Group%20Vehicle%20Management) for more information.",
            "examples": [
                {
                    "text": "```sqf\n_soldier1 assignAsCommander _tank;\n[_soldier1] orderGetIn true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        },
                        {
                            "name": "vehicleName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "unitName `assignAsCommander` vehicleName",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/assignAsCommander"
        },
        "configuration": {
            "label": "assignAsCommander",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Assign a unit as driver of a vehicle. Used together with `orderGetIn` to order subordinate units to get in as driver of a specific vehicle. Before usage of this command a subordinate unit has not got the option to get into the driver place of the vehicle.\n**NOTE**: See [AI Group Vehicle Management](https://community.bistudio.com/wiki/AI%20Group%20Vehicle%20Management) for more information.",
            "examples": [
                {
                    "text": "```sqf\n_soldier1 assignAsDriver _tank;\n[_soldier1] orderGetIn true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        },
                        {
                            "name": "vehicleName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "unitName `assignAsDriver` vehicleName",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/assignAsDriver"
        },
        "configuration": {
            "label": "assignAsDriver",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Assign a unit as gunner of a vehicle. Used together with `orderGetIn` to order subordinate units to get in as gunner of a specific vehicle. Before usage of this command a subordinate unit has not got the option to get into the gunner place of the vehicle.\n**NOTE**: See [AI Group Vehicle Management](https://community.bistudio.com/wiki/AI%20Group%20Vehicle%20Management) for more information.",
            "examples": [
                {
                    "text": "```sqf\n_soldier1 assignAsGunner _tank;\n[_soldier1] orderGetIn true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        },
                        {
                            "name": "vehicleName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "unitName `assignAsGunner` vehicleName",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/assignAsGunner"
        },
        "configuration": {
            "label": "assignAsGunner",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Assigns the soldier to turret.\n**NOTE**: See [AI Group Vehicle Management](https://community.bistudio.com/wiki/AI%20Group%20Vehicle%20Management) for more information.",
            "examples": [
                {
                    "text": "```sqf\nplayer assignAsTurret [BIS_vehicle, [0,1]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` format [Turret Path](https://community.bistudio.com/wiki/Turret%20Path)"
                        }
                    ],
                    "outline": "unit `assignAsTurret` [vehicle, turretPath]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/assignAsTurret"
        },
        "configuration": {
            "label": "assignAsTurret",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Assign player as curator. Two players cannot act as one curator.",
            "examples": [
                {
                    "text": "```sqf\nplayer assignCurator myCurator;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "player",
                            "description": "`Object`"
                        },
                        {
                            "name": "curatorObj",
                            "description": "`Object` - curator module."
                        }
                    ],
                    "outline": "player `assignCurator` curatorObj",
                    "returns": "`Nothing`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/assignCurator"
        },
        "configuration": {
            "label": "assignCurator",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the list of soldiers assigned to the given vehicle as a cargo.",
            "examples": [
                {
                    "text": "```sqf\n_list = assignedCargo _vehicleName;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`assignedCargo` vehicle",
                    "returns": "`Array` of `Object`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/assignedCargo"
        },
        "configuration": {
            "label": "assignedCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the soldier assigned to the given vehicle as a commander.",
            "examples": [
                {
                    "text": "```sqf\n_commander = assignedCommander vehicleName;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`assignedCommander`  vehicle",
                    "returns": "`Object`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/assignedCommander"
        },
        "configuration": {
            "label": "assignedCommander",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the soldier assigned to the given vehicle as a driver.",
            "examples": [
                {
                    "text": "```sqf\n_driver = assignedDriver vehicleName;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`assignedDriver` vehicle",
                    "returns": "`Object`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/assignedDriver"
        },
        "configuration": {
            "label": "assignedDriver",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `Group` to which the given vehicle was added last with `addVehicle`. To update `assignedGroup` to the current group, run `addVehicle` to the current group again.",
            "examples": [
                {
                    "text": "```sqf\n_group = assignedGroup vehicle player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - transport"
                        }
                    ],
                    "outline": "`assignedGroup` vehicle",
                    "returns": "`Group`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/assignedGroup"
        },
        "configuration": {
            "label": "assignedGroup",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the soldier assigned to the given vehicle as a gunner.",
            "examples": [
                {
                    "text": "```sqf\n_gunner = assignedGunner vehicle player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`assignedGunner` vehicle",
                    "returns": "`Object`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/assignedGunner"
        },
        "configuration": {
            "label": "assignedGunner",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get array with assigned items. The resulting `Array` order is not guaranteed. To check availability of a particular slot item use `getSlotItemName`. To return stored items see `items` and `itemsWithMagazines`.",
            "examples": [
                {
                    "text": "```sqf\nhint str assignedItems player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`assignedItems`  unit",
                    "returns": "`Array` of `String`s"
                },
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - soldier"
                        },
                        {
                            "name": "allItems",
                            "description": "`Boolean` - `true` to include all slot items, `false` exclude goggles and headgear"
                        },
                        {
                            "name": "includeBinocs",
                            "description": "`Boolean` - `true` to include binoculars (which is a weapon), `false` to exclude it"
                        }
                    ],
                    "outline": "`assignedItems` [unit, allItems, includeBinocs]",
                    "returns": "`Array` of `String`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/assignedItems"
        },
        "configuration": {
            "label": "assignedItems",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the target assigned to an unit or the vehicle's `effectiveCommander`. The target can be assigned by the group/vehicle/formation leader (as player via [[Arma 3: Field Manual - Commanding#Target_Assignment|quick command menu]] or [[Operation Flashpoint: Commander Guide#TARGET .282.29|\"target\" complex command menu]]).\n\nTo unassign the target use `doWatch` `objNull` or `commandWatch` `objNull` or as player and group leader order \"no target\" in the [[Operation Flashpoint: Commander Guide#TARGET .282.29|\"target\" complex command menu]].\n**NOTE**: \n* This command does not return the target a unit is actually engaging (\"attack unit\"). For this information, see `getAttackTarget`.\n* If a player is inside a vehicle as the `effectiveCommander`, the vehicle's crew assignedTarget will always be `objNull`.",
            "examples": [
                {
                    "text": "```sqf\n_target = assignedTarget _T72;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicleName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`assignedTarget` vehicleName",
                    "returns": "`Object`"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/assignedTarget"
        },
        "configuration": {
            "label": "assignedTarget",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the team the unit belongs to. Possible values:\n\n* `**\"MAIN\"**` (default and white)\n* `**\"RED\"**`\n* `**\"GREEN\"**`\n* `**\"BLUE\"**`\n* `**\"YELLOW\"**`\n* **(Arma 3)** `**\"\"**` if given unit is `objNull` or `remoteControl`ling another unit",
            "examples": [
                {
                    "text": "```sqf\n_team = assignedTeam player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`assignedTeam` unitName",
                    "returns": "`String` (or, prior to Arma 3 v1.94, `Nothing` if given unit is `objNull` or `remoteControl`ling another unit)"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/assignedTeam"
        },
        "configuration": {
            "label": "assignedTeam",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the vehicle to which a unit is assigned, usually with _assignAsXXX_ command. If no vehicle is assigned `objNull` is returned.\n**NOTE**: See [AI Group Vehicle Management](https://community.bistudio.com/wiki/AI%20Group%20Vehicle%20Management) for more information.",
            "examples": [
                {
                    "text": "```sqf\n_vehicle = assignedVehicle player;\n```"
                },
                {
                    "text": "```sqf\n_units apply { _x leaveVehicle (assignedVehicle _x) };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`assignedVehicle` unit",
                    "returns": "`Object`"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/assignedVehicle"
        },
        "configuration": {
            "label": "assignedVehicle",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the role a unit is assigned to within its assigned vehicle.\n**NOTE**: See [AI Group Vehicle Management](https://community.bistudio.com/wiki/AI%20Group%20Vehicle%20Management) for more information.",
            "examples": [
                {
                    "text": "```sqf\n_RoleArray = assignedVehicleRole player;\n```"
                },
                {
                    "text": "Get weapons available to player at player occupied turret:\n\n```sqf\n_weaponsTurret = vehicle player weaponsTurret (assignedVehicleRole player select 1);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`assignedVehicleRole` unitName",
                    "returns": "`Array` - the array which is returned contains:\n\n* [] - not assigned to any vehicle\n* [\"driver\"] - Assigned as driver\n* [\"cargo\"] or {{GVI|arma3|1.32"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/assignedVehicleRole"
        },
        "configuration": {
            "label": "assignedVehicleRole",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns all vehicles added to the given `Group` with `addVehicle`.",
            "examples": [
                {
                    "text": "```sqf\n_vehicles = assignedVehicles group player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group`"
                        }
                    ],
                    "outline": "`assignedVehicles` group",
                    "returns": "`Array` of `Object`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/assignedVehicles"
        },
        "configuration": {
            "label": "assignedVehicles",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Assigns existing item from inventory (uniform, vest, backpack) to a correct slot. If the slot is occupied by another item, it gets replaced. See also `linkItem`.",
            "examples": [
                {
                    "text": "```sqf\nbluforUnit addItem \"NVGoggles\";\nbluforUnit assignItem \"NVGoggles\";\nopforUnit addItem \"NVGoggles_OPFOR\";\nopforUnit assignItem \"NVGoggles_OPFOR\";\nindependentUnit addItem \"NVGoggles_INDEP\";\nindependentUnit assignItem \"NVGoggles_INDEP\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "item",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `assignItem` item",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/assignItem"
        },
        "configuration": {
            "label": "assignItem",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "{{{!}} class=\"wikitable float-right align-center\"\n! Team\n! Value\n{{!}}-\n{{!}} White\n{{!}} \"MAIN\"\n{{!}}-\n{{!}} Red\n{{!}} \"RED\"\n{{!}}-\n{{!}} Green\n{{!}} \"GREEN\"\n{{!}}-\n{{!}} Blue\n{{!}} \"BLUE\"\n{{!}}-\n{{!}} Yellow\n{{!}} \"YELLOW\"\n{{!}}}\nAssigns the unit (in case of a vehicle, its commander) to the given team. Team is an option in group control (unit management) menu that allows to split player group in teams and then give bulk order to separate teams.\nIn order to operate properly, the command requires specific conditions:\n* the command requires `player` to be fully initialised\n* the unit getting assigned must be either player himself or a unit in player's group\nThe colour of the assigned team for a unit is seen on the group management UI as well as squad radar.\n\n\n**IMPORTANT**: In older versions of the game (Arma 2?) the effect of this command is **local** {{Icon|localEffect|32}}.",
            "examples": [
                {
                    "text": "```sqf\n_soldier2 assignTeam \"RED\";\n```"
                },
                {
                    "text": "In a unit's init script in the editor `spawn` should be used, otherwise a {{Link|https://en.wikipedia.org/wiki/Race_condition|race condition}} may be experienced:\n\n```sqf\nthis spawn { _this assignTeam \"RED\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "team",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `assignTeam` team",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/assignTeam"
        },
        "configuration": {
            "label": "assignTeam",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Assigns a plane to an airport ID or object.",
            "examples": [
                {
                    "text": "```sqf\nplane1 assignToAirport 0;\n```"
                },
                {
                    "text": "```sqf\nplane1 assignToAirport carrier1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "plane",
                            "description": "`Object` - plane"
                        },
                        {
                            "name": "id",
                            "description": "`Number` - airport id"
                        }
                    ],
                    "outline": "plane `assignToAirport` id",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "plane",
                            "description": "`Object` - plane"
                        },
                        {
                            "name": "target",
                            "description": "`Object` - airport object. For example an aircraft carrier, see [Arma 3: Dynamic Airport Configuration](https://community.bistudio.com/wiki/Arma%203%3A%20Dynamic%20Airport%20Configuration)"
                        }
                    ],
                    "outline": "plane `assignToAirport` target",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/assignToAirport"
        },
        "configuration": {
            "label": "assignToAirport",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the **arcus tangens**.\n\n[[File:atan.jpg|200px]]",
            "examples": [
                {
                    "text": "```sqf\n_degrees = atan 1; // 45\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "x",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`atan`  x",
                    "returns": "`Number` - result is in degrees"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/atan"
        },
        "configuration": {
            "label": "atan",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "[[File:atan.jpg|right|300px]] ArcTangent of _y/x_. Used to determine the angle of a vector _[y,x]_. Result in [Degrees](https://community.bistudio.com/wiki/Number%23Degrees) between -180 and 180.\n{{Feature|informative|This command can handle _x_ being 0, unlike when using `atan`, and will return 90}}\n**IMPORTANT**: \nThis command has [higher precedence](https://community.bistudio.com/wiki/SQF%20Syntax%23Rules%20of%20Precedence) than the `select` command, therefore beware of the case below:\n<sqf notrim>\n _pos select 0  atan2 (_pos select 1) // error\n(_pos select 0) atan2 (_pos select 1) // OK\n\n\nAlternatively, consider using the [[a hash b|#]] operator: <sqf inline>_pos # 0 atan2 _pos # 1",
            "examples": [
                {
                    "text": "```sqf\n\n_yx = [5,3];\n_degrees = (_yx select 0) atan2 (_yx select 1); // 59.0362\n\n```"
                },
                {
                    "text": "Get direction from _obj1 to _obj2:\n\n```sqf\n\n_vd = getPosASL _obj2 vectorDiff getPosASL _obj1;\n_dir = (_vd select 0) atan2 (_vd select 1); // _dir range from -180 to +180\n_dir = (_dir + 360) % 360; // _dir range from 0 to 360\n\n```"
                },
                {
                    "text": "Get relative direction from _obj1 to _obj2:\n\n```sqf\n\n_yx = _obj1 worldToModel getPosASL _obj2;\n_dir = (_yx select 0) atan2 (_yx select 1); // _dir range from -180 to +180\n_dir = (_dir + 360) % 360; // _dir range from 0 to 360\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "y",
                            "description": "`Number`"
                        },
                        {
                            "name": "x",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "y `atan2` x",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/atan2"
        },
        "configuration": {
            "label": "atan2",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the **arcus tangens**.\n\n[[File:atan.jpg|200px]]",
            "examples": [
                {
                    "text": "```sqf\n_atanThreeFifth = atg 3/5;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "x",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`atg` x",
                    "returns": "`Number` - result in degrees"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/atg"
        },
        "configuration": {
            "label": "atg",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Converts a position from [PositionATL](https://community.bistudio.com/wiki/Position%23PositionATL) to [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL)",
            "examples": [
                {
                    "text": "```sqf\nATLToASL (getPosATL player) isEqualTo getPosASL player;\n```"
                },
                {
                    "text": "```sqf\n_camPosASL = ATLToASL positionCameraToWorld [0,0,0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "pos",
                            "description": "`Array` format [PositionATL](https://community.bistudio.com/wiki/Position%23PositionATL) - position to convert"
                        }
                    ],
                    "outline": "`ATLToASL` pos",
                    "returns": "`Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ATLToASL"
        },
        "configuration": {
            "label": "ATLToASL",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the object a location is attached to. If the location is unattached, then `objNull` is returned.",
            "examples": [
                {
                    "text": "```sqf\n_locAttachedObj = attachedObject myLocation;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "location",
                            "description": "`Location`"
                        }
                    ],
                    "outline": "`attachedObject` location",
                    "returns": "`Object`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/attachedObject"
        },
        "configuration": {
            "label": "attachedObject",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a list of objects attached to the given object.",
            "examples": [
                {
                    "text": "```sqf\n{\n  detach _x;\n} forEach attachedObjects player;\n```"
                },
                {
                    "text": "```sqf\nif (count attachedObjects player == 0) then {\n  hint \"There are no objects attached to player\";\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "obj",
                            "description": "`Object` - given object"
                        }
                    ],
                    "outline": "`attachedObjects` obj",
                    "returns": "`Array` of `Object`s attached to the given object"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/attachedObjects"
        },
        "configuration": {
            "label": "attachedObjects",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns object the given object is attached to or `objNull` if the given object is not attached to anything.",
            "examples": [
                {
                    "text": "```sqf\nif (isNull attachedTo _obj1) then {\n  hint \"_obj1 is not attached to anything.\";\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "obj",
                            "description": "`Object` - given object"
                        }
                    ],
                    "outline": "`attachedTo` obj",
                    "returns": "`Object` - object the given object is attached to"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/attachedTo"
        },
        "configuration": {
            "label": "attachedTo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Attaches a location to the specified object. To detach a location, attach it to `objNull`.",
            "examples": [
                {
                    "text": "```sqf\nmyLocation attachObject player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "location",
                            "description": "`Location`"
                        },
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "location `attachObject` object",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/attachObject"
        },
        "configuration": {
            "label": "attachObject",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Attaches an object to another object.\n* The offset is applied to the object center unless a memory point is provided, in which case the offset will be applied to the memory point position.\n* If no offset is specified, the current offset between the two objects will be used.\n\n**NOTE**: \n* All direction commands, such as `setDir`, `setVectorDirAndUp`, etc. for an [attached object](https://community.bistudio.com/wiki/attachedObjects) should be used **relative** to the reference object's direction (i.e. in model space), e.g <sqf inline>_attachedObj setDir 0 will make it face the same direction as the reference object, **90** face to the right, **180** face to the back, etc.\n* Attached triggers only follow the direction of the object to which they are attached, not pitch or roll.",
            "examples": [
                {
                    "text": "```sqf\nplayer attachTo [car, [0, 0, 1]];\n```"
                },
                {
                    "text": "```sqf\nplayer attachTo [tank, [0, -1, 0], \"Usti hlavne\"];\n```"
                },
                {
                    "text": "Automatic offset:\n\n```sqf\nammoCrate attachTo [player];\n```"
                },
                {
                    "text": "To set orientation of attached object use `setVectorDirAndUp` command:\n\n[[File:Sbomber.jpg|300x200px|right]]\n\n```sqf\n\n_expl1 = \"DemoCharge_Remote_Ammo\" createVehicle position player;\n_expl1 attachTo [player, [-0.1, 0.1, 0.15], \"Pelvis\"];\n_expl1 setVectorDirAndUp [[0.5, 0.5, 0], [-0.5, 0.5, 0]];\n_expl2 = \"DemoCharge_Remote_Ammo\" createVehicle position player;\n_expl2 attachTo [player, [0, 0.15, 0.15], \"Pelvis\"];\n_expl2 setVectorDirAndUp [[1, 0, 0], [0, 1, 0]];\n_expl3 = \"DemoCharge_Remote_Ammo\" createVehicle position player;\n_expl3 attachTo [player, [0.1, 0.1, 0.15], \"Pelvis\"];\n_expl3 setVectorDirAndUp [[0.5, -0.5, 0], [0.5, 0.5, 0]];\n\n```"
                },
                {
                    "text": "[[File:arma3_attachTo-example-worker-drill-and-radio.png|300x200px|right]]\n\n```sqf\n\n_drill attachTo [_worker, [0.0595885,-0.00950365,-0.13495], \"RightForeArmRoll\", true];\n_drill setVectorDirAndUp [[0.536966,-0.00438141,-0.843605],[0.345872,0.913231,0.215406]];\n_radio attachTo [_worker, [-0.100003,0.069064,0.153719], \"Spine3\", true];\n_radio setVectorDirAndUp [[-0.144569,-0.48725,0.861354],[0.039712,0.866938,0.497072]];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object1",
                            "description": "`Object` - object to attach"
                        },
                        {
                            "name": "object2",
                            "description": "`Object` or `Group` - object to attach to; if a group is provided, its `leader` is used"
                        },
                        {
                            "name": "offset",
                            "description": "`Array` format [PositionRelative](https://community.bistudio.com/wiki/Position%23PositionRelative) - (Optional) the position relative to _object2_<nowiki/>'s position"
                        },
                        {
                            "name": "memPoint",
                            "description": "`String` - (Optional) see {{Link|ArmA: Armed Assault: Selection Translations|Selection Translations}} for czech selections names"
                        },
                        {
                            "name": "followBoneRotation",
                            "description": "`Boolean` - (Optional) follows the memory point's rotation (if attached to one)"
                        }
                    ],
                    "outline": "object1 `attachTo` [object2, offset, memPoint, followBoneRotation]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/attachTo"
        },
        "configuration": {
            "label": "attachTo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return whether a group's leader can issue attack commands to soldiers under his command.",
            "examples": [
                {
                    "text": "```sqf\nif (not attackEnabled _soldier) then { _soldier setCombatMode \"Careless\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "name",
                            "description": "`Object` or `Group`"
                        }
                    ],
                    "outline": "`attackEnabled` name",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/attackEnabled"
        },
        "configuration": {
            "label": "attackEnabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Wakes up sleeping PhysX object or puts a PhysX object to sleep. In 2.10 this command can be used on corpses of type `**Man**` and has no effect on `alive` units. When unit gets killed it goes into ragdoll state for a short while, then the units get frozen and any simulation and collision is removed to save system resources. As a result, corpses do not react to their surrounding any more. Using this command will temporarily re-enable ragdoll state of a corpse to the same state it was when unit died. If this command is used in \"enable/disable\" sequence on a dead body, it gives the corpse a visible nudge (See example 3).\n\n**NOTE**: This command won't have lasting effect on vehicles as vehicles are actively simulated, but it works rather well on smaller PhysX enabled objects.",
            "examples": [
                {
                    "text": "```sqf\n_object awake false;\n```"
                },
                {
                    "text": "Since 2.10: \n```sqf\n_deadUnit awake true;\n```"
                },
                {
                    "text": "Make corpse react to explosion (since 2.10): \n```sqf\n_deadUnit addEventHandler [\"Explosion\", \n{\n\tparams [\"_unit\", \"_damage\"];\n\tif (_damage < 0.01) exitWith {};\n\t_unit awake true;\n\t_unit awake false;\n}];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - PhysX object or dead unit"
                        },
                        {
                            "name": "awake",
                            "description": "`Boolean` - `true` to awake the object, `false` - to put it to sleep"
                        }
                    ],
                    "outline": "object `awake` awake",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/awake"
        },
        "configuration": {
            "label": "awake",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a class of a backpack.",
            "examples": [
                {
                    "text": "```sqf\n_classname = backpack player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`backpack` unit",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/backpack"
        },
        "configuration": {
            "label": "backpack",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get array with backpacks from ammo box (or any general weapon holder container).",
            "examples": [
                {
                    "text": "```sqf\nhint str backpackCargo vehicle player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "box",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`backpackCargo` box",
                    "returns": "`Array` - format: [\"BackpackType1\", \"BackpackType1\", \"BackpackType2\", ...]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/backpackCargo"
        },
        "configuration": {
            "label": "backpackCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a cargo container of a unit's backpack.",
            "examples": [
                {
                    "text": "```sqf\nhint str backpackContainer player; // 1a5f7900# 163944: backpack_fast.p3d\n```"
                },
                {
                    "text": "```sqf\n\nhint str getMagazineCargo backpackContainer player;\n/*\n\treturns e.g\n\t[\n\t\t[\n\t\t\t\"APERSBoundingMine_Range_Mag\",\n\t\t\t\"ClaymoreDirectionalMine_Remote_Mag\",\n\t\t\t\"SLAMDirectionalMine_Wire_Mag\",\n\t\t\t\"DemoCharge_Remote_Mag\"\n\t\t],[\n\t\t\t3,\n\t\t\t2,\n\t\t\t2,\n\t\t\t1\n\t\t]\n\t]\n*/\n\n```"
                },
                {
                    "text": "```sqf\n(backpackContainer player) addWeaponCargoGlobal [weapons player select 0, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - a soldier"
                        }
                    ],
                    "outline": "`backpackContainer` unit",
                    "returns": "`Object` - cargo container or `objNull`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/backpackContainer"
        },
        "configuration": {
            "label": "backpackContainer",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get array with all items (of any kind, even weapons) in backpack of the given unit.",
            "examples": [
                {
                    "text": "```sqf\nbackpackItems player; // returns e.g [\"hgun_P07_F\", \"Titan_AT\"]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`backpackItems` unit",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/backpackItems"
        },
        "configuration": {
            "label": "backpackItems",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get array with all magazines from backpack of the given unit.",
            "examples": [
                {
                    "text": "```sqf\n\nbackpackMagazines player;\n// returns e.g\n/*\n[\n\t\"Titan AT Missile(1/1)[id/cr:16/0](2x)\"\n]\n*/\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`backpackMagazines` unit",
                    "returns": "`Array` of `String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/backpackMagazines"
        },
        "configuration": {
            "label": "backpackMagazines",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array of all backpack names a unit has in its inventory, excluding the one it carries on the back.",
            "examples": [
                {
                    "text": "```sqf\nprivate _allCarriedBackpackTypes = backpacks player + [backpack player];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`backpacks` unit",
                    "returns": "`Array`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/backpacks"
        },
        "configuration": {
            "label": "backpacks",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns how much space is in backpack for given weapon or magazine",
            "examples": [
                {
                    "text": "```sqf\n(backpackContainer player) backpackSpaceFor \"m16\"; // [weapons, magazines]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "backpack",
                            "description": "`Object`"
                        },
                        {
                            "name": "weaponName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "backpack `backpackSpaceFor` weaponName",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/backpackSpaceFor"
        },
        "configuration": {
            "label": "backpackSpaceFor",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the behaviour of the individual unit, this is why it only accepts `Object` as the argument. For Arma 3 behaviour explanation see `Arma_3_AI_Behavior`",
            "examples": [
                {
                    "text": "```sqf\n_soldier setBehaviour \"CARELESS\";\n_b = behaviour _soldier; // returns \"CARELESS\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`behaviour` unit",
                    "returns": "`String` - one of:\n* \"CARELESS\"\n* \"SAFE\"\n* \"AWARE\"\n* \"COMBAT\"\n* \"STEALTH\"\n* \"ERROR\" (Since **(Arma 3)** when used on empty vehicles and such)"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/behaviour"
        },
        "configuration": {
            "label": "behaviour",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the value of \"3D Performance\" in OFP Preferences (flashpoint.cfg). This can be used to estimate the computer performance to adapt CPU and GPU demanding settings like view distance dynamically in missions.",
            "examples": [
                {
                    "text": "<sqs>? (benchmark > 2000) : setViewDistance 2000</sqs>"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`benchmark`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/benchmark"
        },
        "configuration": {
            "label": "benchmark",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets interpolated value based on {{Link|https://en.wikipedia.org/wiki/Bézier_curve|Bézier curve}} with given control points (progress value is 0...1 for a curve that starts at pos0 and finishes at posN) \n\n[[File:bezierInterpolation2.jpg|400px]]",
            "examples": [
                {
                    "text": "Quick demonstration that spawns some spheres around player object:\n\n```sqf\n\nfor \"_i\" from 0 to 1 step 0.05 do {\n\tcreateVehicle [\"Sign_Sphere10cm_F\", (_i bezierInterpolation [\n\t\tplayer modelToWorld [0,0,0],\n\t\tplayer modelToWorld [0,2,2],\n\t\tplayer modelToWorld [2,0,2],\n\t\tplayer modelToWorld [0,0,4]\n\t]), [], 0, \"CAN_COLLIDE\"];\n};\n\n```"
                },
                {
                    "text": "Create a map marker curve from 4 control points with overlap (progress is -0.5...1.5 instead of 0...1):\n\n```sqf\n\nprivate _controlPoints = [[100,-90], [200,-30], [150,60], [100,90]] apply { player getRelPos _x };\n{\n\tprivate _marker = createMarkerLocal [str _x, _x];\n\t_marker setMarkerTypeLocal \"mil_objective\";\n\t_marker setMarkerTextLocal (\"P\" + str _forEachIndex);\n}\nforEach _controlPoints;\n\nfor \"_i\" from -0.5 to 1.5 step 0.01 do\n{\n\tprivate _marker = createMarkerLocal [str _i, _i bezierInterpolation _controlPoints];\n\t_marker setMarkerTypeLocal \"mil_dot\";\n};\nopenMap true;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "progress",
                            "description": "`Number` - interpolation value"
                        },
                        {
                            "name": "positions",
                            "description": "`Array` of `Array`s in format [Position3D](https://community.bistudio.com/wiki/Position%23Introduction)"
                        }
                    ],
                    "outline": "progress `bezierInterpolation` positions",
                    "returns": "`Array` - a single point position in format [Position3D](https://community.bistudio.com/wiki/Position%23Introduction) based on progress value"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/bezierInterpolation"
        },
        "configuration": {
            "label": "bezierInterpolation",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns class name of currently used binocular weapon.",
            "examples": [
                {
                    "text": "```sqf\n_binocs = binocular player; //Rangefinder\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`binocular` unit",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/binocular"
        },
        "configuration": {
            "label": "binocular",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array with all items assigned to the `binocular` weapon except magazines. Use `binocularMagazine` command for the latter. This command is used for infantry weapons only.",
            "examples": [
                {
                    "text": "```sqf\nbinocularItems player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`binocularItems` unit",
                    "returns": "`Array` - [silencer, laserpointer/flashlight, optics, bipod]"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/binocularItems"
        },
        "configuration": {
            "label": "binocularItems",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Collects all loaded `magazines` from all `binocular` muzzles and returns them in `Array`, otherwise it returns []. This command is used for infantry weapons only.",
            "examples": [
                {
                    "text": "```sqf\nhint str binocularMagazine player; // [\"Laserbatteries\"]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`binocularMagazine`  unit",
                    "returns": "`Array`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/binocularMagazine"
        },
        "configuration": {
            "label": "binocularMagazine",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Pre-defined variable for the blufor [side](https://community.bistudio.com/wiki/Side).",
            "examples": [
                {
                    "text": "```sqf\n\nif (side player == blufor) then\n{\n\thint \"BLUFOR\";\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`blufor`",
                    "returns": "`Side`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/blufor"
        },
        "configuration": {
            "label": "blufor",
            "grammarType": "reserved-literal"
        }
    },
    {
        "documentation": {
            "description": "[[File:Boundingbox.jpg|right|200px]] Returns a bounding box of given object in model coordinate space, adjusted according to destruction/animation of an object. This command is rather generous on the size estimation, for more precise coordinates use `boundingBoxReal`.\n**NOTE**: In **(Arma 3)** The output of both syntaxes got extended to include bounding sphere diameter. See also `sizeOf`.",
            "examples": [
                {
                    "text": "```sqf\nprivate _box = boundingBox _abrams;\n```"
                },
                {
                    "text": "```sqf\nhint str (0 boundingBox cursorObject);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`boundingBox` object",
                    "returns": "`Array` - an array with the extreme points of the model in format [PositionRelative](https://community.bistudio.com/wiki/Position%23PositionRelative), as well as bounding box sphere diameter.\nFormat [<nowiki/>[xmin, ymin, zmin], [xmax, ymax, zmax], boundingSphereDiameter]."
                },
                {
                    "parameters": [
                        {
                            "name": "clippingType",
                            "description": "`Number` - clipping type could be:\n* 0 - ClipVisual (could significantly reduce the size of bounding boxes on buildings)\n* 1 - ClipShadow\n* 2 - ClipGeometry\n* 3 - ClipGeneral (Default, the same type that is used in main syntax)"
                        },
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "clippingType `boundingBox` object",
                    "returns": "`Array` - an array with the extreme points of the model bounding box in format [PositionRelative](https://community.bistudio.com/wiki/Position%23PositionRelative), as well as bounding box sphere diameter.\nFormat [<nowiki/>[xmin, ymin, zmin], [xmax, ymax, zmax], boundingSphereDiameter]."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/boundingBox"
        },
        "configuration": {
            "label": "boundingBox",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "[[File:Boundingbox.jpg|right|200px]] Returns a raw bounding box of given object in model coordinates space. This command is similar to `boundingBox` but gives more precise measurements.\n\nThe alternative syntax allows to specify clipping type to be used, which in some cases could make the result even more precise.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _bbr = boundingBoxReal vehicle player;\nprivate _p1 = _bbr select 0;\nprivate _p2 = _bbr select 1;\nprivate _maxWidth = abs ((_p2 select 0) - (_p1 select 0));\nprivate _maxLength = abs ((_p2 select 1) - (_p1 select 1));\nprivate _maxHeight = abs ((_p2 select 2) - (_p1 select 2));\n\n```"
                },
                {
                    "text": "```sqf\nhint str (0 boundingBoxReal cursorObject);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`boundingBoxReal` object",
                    "returns": "`Array` - the extreme points of the model in format [PositionRelative](https://community.bistudio.com/wiki/Position%23PositionRelative), as well as (since {{GVI|arma3|1.92"
                },
                {
                    "parameters": [
                        {
                            "name": "clippingType",
                            "description": "`Number` - can be one of:\n* 0 - ClipVisual (can significantly reduce bounding box's size on buildings)\n* 1 - ClipShadow\n* 2 - ClipGeometry\n* 3 - ClipGeneral (same type that is used in the main syntax)"
                        },
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "clippingType `boundingBoxReal` object",
                    "returns": "`Array` - the extreme points of the model in format [PositionRelative](https://community.bistudio.com/wiki/Position%23PositionRelative), as well as bounding box sphere radius, to format [<nowiki/>[xmin, ymin, zmin], [xmax, ymax, zmax], boundingSphereRadius]"
                },
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "LOD",
                            "description": "`String` or `Number` - can be one of:\n* `**\"Memory\"**`\n* `**\"Geometry\"**`\n* `**\"FireGeometry\"**`\n* `**\"LandContact\"**`\n* `**\"HitPoints\"**`\n* `**\"ViewGeometry\"**`\nWhen `Number` is used, command searches for a LOD with the similar [LOD resolution](https://community.bistudio.com/wiki/LOD%20resolutions)"
                        }
                    ],
                    "outline": "`boundingBoxReal` [object, LOD]",
                    "returns": "`Array` - the extreme points of the model in format [PositionRelative](https://community.bistudio.com/wiki/Position%23PositionRelative), as well as bounding box sphere radius, to format [<nowiki/>[xmin, ymin, zmin], [xmax, ymax, zmax], boundingSphereRadius]"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/boundingBoxReal"
        },
        "configuration": {
            "label": "boundingBoxReal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the position of the original (loaded) center of an object in model coordinates. Despite its name, it has nothing to do with `boundingBox` or `boundingBoxReal`, it returns offset where `**[0, 0, 0]**` was [Object Builder](https://community.bistudio.com/wiki/Object%20Builder) / [Oxygen 2](https://community.bistudio.com/wiki/Oxygen%202) when model was created.",
            "examples": [
                {
                    "text": "```sqf\n_center = boundingCenter TruckOne;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`boundingCenter` object",
                    "returns": "`Array` format [PositionRelative](https://community.bistudio.com/wiki/Position%23PositionRelative)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/boundingCenter"
        },
        "configuration": {
            "label": "boundingCenter",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the status of autobrake (see `disableBrakes`).",
            "examples": [
                {
                    "text": "```sqf\n\nif !(brakesDisabled _vehicle) then\n{\n\tdisableBrakes _vehicle;\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "transport",
                            "description": "`Object` - PhysX car or tank"
                        }
                    ],
                    "outline": "`brakesDisabled` transport",
                    "returns": "`Boolean` - `true` if autobrake is disabled"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/brakesDisabled"
        },
        "configuration": {
            "label": "brakesDisabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Skips all loop iterations (`for`, `forEach`, `while`, `findIf` etc).",
            "examples": [
                {
                    "text": "```sqf\n\n// prints 0, 1 and then exits\nfor \"_i\" from 0 to 3 do\n{\n\tif (_i == 2) then { break };\n\tsystemChat str _i;\n};\n\n```"
                },
                {
                    "text": "```sqf\n\nprivate _moneyHolder = objNull;\n{\n\tif (\"Money_roll\" in items _x) then\n\t{\n\t\t_moneyHolder = _x;\n\t\tbreak;\n\t};\n} forEach units group player;\n\nif (isNull _moneyHolder) then\n{\n\thint \"We have to find this money.\";\n}\nelse\n{\n\thint format [\"%1 has the money!\", name _moneyHolder];\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`break`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/break"
        },
        "configuration": {
            "label": "break",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "Breaks out of the [scope](https://community.bistudio.com/wiki/Variables%23Scopes) with given **name**.\n* An unknown `scopeName` name will cause the script error `**Generic error in expression**`\n* If multiple scopes with the same **name** exist, the command will break out the nearest scope. See _Example 3_.",
            "examples": [
                {
                    "text": "```sqf\nscopeName \"main\";\nwhile { true } do {\n\tscopeName \"loop1\";\n\twhile {true} do {\n\t\tscopeName \"loop2\";\n\t\tif (condition1) then {breakTo \"main\"}; // Breaks all scopes and return to \"main\"\n\t\tif (condition2) then {breakOut \"loop2\"}; // Breaks scope named \"loop2\"\n\t\tsleep 1;\n\t};\n\tsleep 1;\n};\n```"
                },
                {
                    "text": "```sqf\ncall {\n\tscopeName \"main\";\n\tcall {\n\t\t123 breakOut \"main\"\n\t};\n\t345\n}; // call returns 123\n```"
                },
                {
                    "text": "```sqf\ncall {\n\tscopeName \"Main\"; // Parent Main\n\tcall {\n\t\tscopeName \"Main\"; // Child Main\n\t\t\"String\" breakOut \"Main\"; // Will break out of child main and return \"String\" to parent main\n\t};\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "name",
                            "description": "`String` - name of the scope which was previously set with `scopeName`. <sqf inline>\"\" will exit the current scope (see also `exitWith`)"
                        }
                    ],
                    "outline": "`breakOut`  name",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "value",
                            "description": "`Anything` - a value to return"
                        },
                        {
                            "name": "name",
                            "description": "`String` - name of the scope which was previously set with `scopeName`. <sqf inline>\"\" will exit the current scope (see also `exitWith`)"
                        }
                    ],
                    "outline": "value `breakOut`  name",
                    "returns": "`Anything` - will return **value**"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/breakOut"
        },
        "configuration": {
            "label": "breakOut",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "Breaks block to scope named _name_.\n\nScope name can be assigned using the `scopeName` command.",
            "examples": [
                {
                    "text": "```sqf\n\nscopeName \"main\";\nwhile { true } do\n{\n\tscopeName \"loop1\";\n\twhile { true } do\n\t{\n\t\tscopeName \"loop2\";\n\t\tif (condition1) then { breakTo \"main\" };\t// breaks all scopes and return to \"main\"\n\t\tif (condition2) then { breakOut \"loop2\" };\t// breaks scope named \"loop2\"\n\t\tsleep 1;\n\t};\n\tsleep 1;\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "name",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`breakTo` name",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/breakTo"
        },
        "configuration": {
            "label": "breakTo",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "Skips all loop iterations and immediately returns the given value.",
            "examples": [
                {
                    "text": "```sqf\n\n// stops once _i reaches 5 and outputs 0, 1, 2, 3, 4, END\nsystemChat call {\n\tfor \"_i\" from 0 to 10 do {\n\t\tif (_i == 5) then { breakWith \"END\"; };\n\t\tsystemChat str _i;\n\t};\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "return",
                            "description": "`Anything` - value to be returned when iterations are skipped"
                        }
                    ],
                    "outline": "`breakWith` return",
                    "returns": "`Anything`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/breakWith"
        },
        "configuration": {
            "label": "breakWith",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "Returns the name of the current briefing/scenario name.",
            "examples": [
                {
                    "text": "```sqf\n_name = briefingName;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`briefingName`",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/briefingName"
        },
        "configuration": {
            "label": "briefingName",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the given indexed exit in a building. The returned value is in format Position.",
            "examples": [
                {
                    "text": "```sqf\n_building buildingExit 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "building",
                            "description": "`Object`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "building `buildingExit` index",
                    "returns": "`Array` format `Position`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/buildingExit"
        },
        "configuration": {
            "label": "buildingExit",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns position of a given indexed position in a [building](https://community.bistudio.com/wiki/Object%23Building).",
            "examples": [
                {
                    "text": "```sqf\n_soldier setPosATL (_house1 buildingPos 2);\n```"
                },
                {
                    "text": "```sqf\n_allpositions = nearestBuilding player buildingPos -1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "building",
                            "description": "`Object`"
                        },
                        {
                            "name": "index",
                            "description": "`Number` - index of a specific position **Arma 3**: Since v1.56 index `**-1**` will return all available building positions."
                        }
                    ],
                    "outline": "building `buildingPos`  index",
                    "returns": "`Array` in format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) - a single building position. If building position with given index does not exist, `**[0, 0, 0]**` is returned\n**Arma 3**: Since v1.56 it can also return an [array](https://community.bistudio.com/wiki/Array) of all building positions in format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) if index that was given is `**-1**`."
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/buildingPos"
        },
        "configuration": {
            "label": "buildingPos",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enables road diagnostics in buldozer.",
            "examples": [
                {
                    "text": "```sqf\nbuldozer_enableRoadDiag true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "enable",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "`buldozer_enableRoadDiag` enable",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/buldozer_enableRoadDiag"
        },
        "configuration": {
            "label": "buldozer_enableRoadDiag",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns if road diagnostics are enabled in buldozer.",
            "examples": [
                {
                    "text": "```sqf\n_isEnabled = buldozer_isEnabledRoadDiag;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`buldozer_isEnabledRoadDiag`",
                    "returns": "`Boolean` - `true` if enabled, otherwise `false`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/buldozer_isEnabledRoadDiag"
        },
        "configuration": {
            "label": "buldozer_isEnabledRoadDiag",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Generates new roads. Working only in [buldozer](https://community.bistudio.com/wiki/Oxygen%20Viewer).",
            "examples": [
                {
                    "text": "```sqf\n_loaded = buldozer_loadNewRoads \"C:/A3/Map_Stratis/data/roads/\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "path",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`buldozer_loadNewRoads` path",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/buldozer_loadNewRoads"
        },
        "configuration": {
            "label": "buldozer_loadNewRoads",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Reload oper map visible in costMap diag tool. Working only in [buldozer](https://community.bistudio.com/wiki/Oxygen%20Viewer).",
            "examples": [
                {
                    "text": "```sqf\nbuldozer_reloadOperMap;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`buldozer_reloadOperMap`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/buldozer_reloadOperMap"
        },
        "configuration": {
            "label": "buldozer_reloadOperMap",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the action assigned to a control of the currently active user dialog. Can be used for buttons and active texts. Read [Arma: GUI Configuration](https://community.bistudio.com/wiki/Arma%3A%20GUI%20Configuration) for more information about user dialogs and controls.",
            "examples": [
                {
                    "text": "```sqf\n\nbuttonSetAction [100, { player exec \"reply.sqs\" }]\n_action = buttonAction 100; // Returns { player exec \"reply.sqs\" }\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - button IDC"
                        }
                    ],
                    "outline": "`buttonAction`  idc",
                    "returns": "`String`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`buttonAction`  control",
                    "returns": "`String`"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/buttonAction"
        },
        "configuration": {
            "label": "buttonAction",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "{{Feature|obsolete|Use `ctrlAddEventHandler` instead.}}\nSet the action of a control of the currently active user dialog. The script statement is executed on button release and `**_this**` is available, but contains \"\"; See [Arma: GUI Configuration](https://community.bistudio.com/wiki/Arma%3A%20GUI%20Configuration) for more information about user dialogs. Works with:\n* `CT_BUTTON`\n* `CT_XBUTTON`\n* `CT_ACTIVETEXT`\n* `CT_SHORTCUTBUTTON`",
            "examples": [
                {
                    "text": "```sqf\nbuttonSetAction [100, \"player exec \"\"reply.sqs\"\"\"];\n```"
                },
                {
                    "text": "```sqf\n_ctrl buttonSetAction \"if (alive bob) then {hint 'alive'} else {hint 'dead'}\"; // SQF but SQS compatible, see SQS\n```"
                },
                {
                    "text": "Script is [SQS](https://community.bistudio.com/wiki/SQS%20Syntax):\n<sqs>_control buttonSetAction \"hint format ['Is SQS: %1', !isNil '_time']\"</sqs>"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - button IDC"
                        },
                        {
                            "name": "action",
                            "description": "`String` - **[SQS](https://community.bistudio.com/wiki/SQS%20Syntax)** code body that should be executed when the button/active text is clicked"
                        }
                    ],
                    "outline": "`buttonSetAction` [idc, action]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": " `Control` - button control"
                        },
                        {
                            "name": "action",
                            "description": " `String` - **[SQS](https://community.bistudio.com/wiki/SQS%20Syntax)** code body that should be executed when the button/active text is clicked"
                        }
                    ],
                    "outline": "control `buttonSetAction`  action",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/buttonSetAction"
        },
        "configuration": {
            "label": "buttonSetAction",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "**Prior to Arma 3** it returns if the player is currently playing in cadet or veteran mode.",
            "examples": [
                {
                    "text": "[SQS Syntax](https://community.bistudio.com/wiki/SQS%20Syntax): <sqs>? (cadetMode) : _AIsoldier setSkill 0.1</sqs>"
                },
                {
                    "text": "[SQF Syntax](https://community.bistudio.com/wiki/SQF%20Syntax): \n```sqf\nif (cadetMode) then { _AIsoldier setSkill 0.1 };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`cadetMode`",
                    "returns": "`Boolean` - true when playing in cadet mode, false when playing in veteran mode"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/cadetMode"
        },
        "configuration": {
            "label": "cadetMode",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Spawns an agent that will execute an AI path calculation and fire the `**\"PathCalculated\"**` [ event handler](https://community.bistudio.com/wiki/Arma%203%3A%20Event%20Handlers%23PathCalculated%20).\nThe vehicle type to simulate could be one of the following presets:\n{{Columns|2|\n* `**\"man\"**` (will use \"C_man_1\")\n* `**\"car\"**` (will use \"C_Offroad_01_F\")\n* `**\"tank\"**` (will use \"B_MBT_01_cannon_F\")\n* `**\"wheeled_APC\"**` (will use \"B_APC_Tracked_01_rcws_F\")\n* `**\"boat\"**` (will use \"C_Rubberboat\")\n* `**\"plane\"**` (will use \"B_Plane_CAS_01_dynamicLoadout_F\")\n* `**\"helicopter\"**` (will use \"B_Heli_Light_01_F\")\n}}\n\nIf the given vehicle type is not one of the above presets, the exact given type is used.\n**IMPORTANT**: \nIn order to guarantee that the event handler is added to the result of this command before the path is calculated, use `isNil` to run the code in an [Unscheduled Environment](https://community.bistudio.com/wiki/Scheduler%23Unscheduled%20Environment):\n\n```sqf\nisNil { calculatePath [\"man\", \"safe\", _startPos, _endPos] addEventHandler [\"PathCalculated\", { hint str _this }] };\n```\n\n\n\n**NOTE**: \nIf an exact path is desired, it is recommended to avoid this command and simply use the [PathCalculated](https://community.bistudio.com/wiki/Arma_3%3A_Event_Handlers%23PathCalculated) event handler.\nPaths to long distances are typically calculated in segments. This command only gives the first calculated segment.",
            "examples": [
                {
                    "text": "```sqf\ncalculatePath [\"car\", \"safe\", [2150.67,5778.19,0], [2184.11,5802.28,0]];\n```"
                },
                {
                    "text": "Draws the path from South West to North East of Agia Marina:\n\n```sqf\n\n(calculatePath [\"man\", \"safe\", [2832.9,5927.79,0], [3107.46,6036.61,0]]) addEventHandler [\"PathCalculated\", {\n\t{\n\t\tprivate _marker = createMarker [\"marker\" + str _forEachIndex, _x];\n\t\t_marker setMarkerType \"mil_dot\";\n\t\t_marker setMarkerText str _forEachIndex;\n\t} forEach (_this select 1);\n}];\n\n```"
                },
                {
                    "text": "Alternative usage of `calculatePath` functionality that is free of the double execution bug (and calculatePath command):\n\n```sqf\n\nprivate _agent = createAgent [typeOf player, position player, [], 0, \"NONE\"];\n_agent addEventHandler [\"PathCalculated\",\n{ \n\t{ \n\t\tprivate _marker = createMarker [\"marker\" + str _forEachIndex, _x];\n\t\t_marker setMarkerType \"mil_dot\";\n\t\t_marker setMarkerText str _forEachIndex;\n\t} \n\tforEach (_this select 1);\n}];\n_agent setDestination [player getRelPos [500, 0], \"LEADER PLANNED\", true];\n\n```"
                },
                {
                    "text": "Same as above but for a vehicle:\n\n```sqf\n\nprivate _agent = createAgent [typeOf player, position player, [], 0, \"NONE\"];\nprivate _car = \"B_Quadbike_01_F\" createVehicle position player;\n_agent moveInDriver _car;\n_agent addEventHandler [\"PathCalculated\",\n{ \n\t{ \n\t\tprivate _marker = createMarker [\"marker\" + str _forEachIndex, _x];\n\t\t_marker setMarkerType \"mil_dot\";\n\t\t_marker setMarkerText str _forEachIndex;\n\t} \n\tforEach (_this select 1);\n}];\n_agent setDestination [player getRelPos [500, 0], \"LEADER PLANNED\", true];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`String` - vehicle type to simulate (see description)"
                        },
                        {
                            "name": "behaviour",
                            "description": "`String` - AI `behaviour`, one of \"CARELESS\", \"SAFE\", \"AWARE\", \"COMBAT\" or \"STEALTH\""
                        },
                        {
                            "name": "from",
                            "description": "`Array` - start position in format [x,y,z]"
                        },
                        {
                            "name": "to",
                            "description": "`Array` - end position in format [x,y,z]"
                        }
                    ],
                    "outline": "`calculatePath` [type, behaviour, from, to]",
                    "returns": "`Object` - the agent to [add](https://community.bistudio.com/wiki/addEventHandler) the [[Arma 3: Event Handlers#PathCalculated|`**\"PathCalculated\"**` Event Handler]] to."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/calculatePath"
        },
        "configuration": {
            "label": "calculatePath",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets if friendly units will calculate `player`'s visibility or not. Default value is `false`.",
            "examples": [
                {
                    "text": "```sqf\ncalculatePlayerVisibilityByFriendly true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "calculate",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "`calculatePlayerVisibilityByFriendly` calculate",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/calculatePlayerVisibilityByFriendly"
        },
        "configuration": {
            "label": "calculatePlayerVisibilityByFriendly",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds given set of compiled instructions to the current stack and waits for it to finish and return, provides an option to pass arguments to the executed `Code`.\nSee `Scheduler` to learn more about how the code is executed and behaves.",
            "examples": [
                {
                    "text": "```sqf\ncall { hint str 123; };\n```"
                },
                {
                    "text": "```sqf\n123 call { hint str _this; };\n```"
                },
                {
                    "text": "```sqf\n\n_sum = [1, 2] call { (_this select 0) + (_this select 1); };\nhint str _sum; // displays 3\n\n```"
                },
                {
                    "text": "```sqf\n123 call compile \"hint str _this;\";\n```"
                },
                {
                    "text": "```sqf\n_result = 123 call compile preprocessFileLineNumbers \"myFile.sqf\";\n```"
                },
                {
                    "text": "```sqf\n\nprivate _hashMapObj = createHashMapObject [[\n\t[\"MyMethod\", { systemChat (\"MyMethod has been called with the following arguments: \" + str _this); }]\n]];\n\n_hashMapObj call [\"MyMethod\", [\"Hello there\", player, 123]]; // hints 'MyMethod has been called with the following arguments: [\"Hello there\", player, 123]'\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "code",
                            "description": "`Code` - `compile`d instructions\n**Operation Flashpoint**: Operation Flashpoint takes `String`.\n**NOTE**: This way of calling has access to its parent scope's <sqf inline>_this, as all it does is creating a scope."
                        }
                    ],
                    "outline": "`call` code",
                    "returns": "`Anything` - the last value given in the function is returned - see the topic [Function](https://community.bistudio.com/wiki/Function%23Return_Values) for more information"
                },
                {
                    "parameters": [
                        {
                            "name": "args",
                            "description": "`Anything` - arguments that are passed to the function in the <sqf inline>_this variable."
                        },
                        {
                            "name": "code",
                            "description": "`Code` - `compile`d instructions\n**Operation Flashpoint**: Operation Flashpoint takes `String`."
                        }
                    ],
                    "outline": "args `call` code",
                    "returns": "`Anything` - the last value given in the function is returned. See the topic [Function](https://community.bistudio.com/wiki/Function%23Return_Values) for more information."
                },
                {
                    "parameters": [
                        {
                            "name": "hashMapObj",
                            "description": "`HashMap` - the HashMap (not necessarily created through `createHashMapObject`) to call the method on"
                        },
                        {
                            "name": "methodName",
                            "description": "`String` - the name of the method to call (the method must be defined in _hashMapObj_; see `createHashMapObject`)"
                        },
                        {
                            "name": "arguments",
                            "description": "`Anything` - (Optional, default `nil`) arguments that are passed to the method in the <sqf inline>_this variable"
                        }
                    ],
                    "outline": "hashMapObj `call` [methodName, arguments]",
                    "returns": "`Anything` - the value returned by the _methodName_ method"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/call"
        },
        "configuration": {
            "label": "call",
            "grammarType": "code-executor"
        }
    },
    {
        "documentation": {
            "description": "Calls custom .dll also known as [Extension](https://community.bistudio.com/wiki/Extensions). The name of the extension is the name of the extension .dll without \".dll\" part (or without \"_x64.dll\" part on 64-bit Arma). For example if the file is 'myExtension.dll' the name of the extension will be \"myExtension\". For 64-bit extensions, the name of the extension doesn't need to change and is still \"myExtension\". The game will automatically look for 'myExtension_x64.dll' when you use 64-bit Arma exe.\n\n\n\nThis command is blocking, meaning that the game will wait for the extension to return before continuing. This may cause FPS drop if extension is not optimised. If extension takes too long, consider making asynchronous extension, where the result of the work of the extension is collected in a separate call.\n\n\n\nCurrently there is no limit how much data you can send to the extension. However there is a limit on how much data you can return from extension in one call. The limit is known to the extension and is passed in `** int outputSize**`. The limit may or may not change in the future and is currently 10240 bytes. It is up to extension designer to handle multipart results if returned data exceeds output limit.\n\n\n\nSince Arma 3 v1.68 it is possible to pass array of arguments to extensions. The array of arguments could be anything and all elements will be converted to strings, however you might want to only send simple types like `Boolean`s, `String`s, `Number`s and `Array`s of all of the above. There is currently a limit on how many arguments can be sent and it is 2048 (since Arma 3 v1.92; previous limit: 1024). However an argument could be an `Array` itself, in this case extension maker will have to provide additional methods for parsing such arguments.\n\n\n\nPossible error codes:\n* 101: SYNTAX_ERROR_WRONG_PARAMS_SIZE\n* 102: SYNTAX_ERROR_WRONG_PARAMS_TYPE\n* 201: PARAMS_ERROR_TOO_MANY_ARGS\n* 301: EXECUTION_WARNING_TAKES_TOO_LONG\nEach error will have entry in .rpt file with more details.\n\n\n\nThe extension execution timeout, after which `**301: EXECUTION_WARNING_TAKES_TOO_LONG**` warning is issued, is hardcoded on clients and is 1000.0 milliseconds (1 second). On the server the default limit is also 1 second, however it is possible to set custom limit with `**callExtReportLimit**` param (see [ Server Options](https://community.bistudio.com/wiki/Arma%203%3A%20Server%20Config%20File%23Server_Options%20)).\n\n\n\nIf an extension with the given name cannot be found (or it is found but doesn't implement the required interface properly / at all) the following error will be written into the RPT (In this example the given dll-name was \"MyExtension\"):\n<code style=\"display: block\">14:27:07 CallExtension 'MyExtension' could not be found</code>\n\n\nIf an extension is not whitelisted with BattlEye (see `Extensions` for more info) it will be blocked on clients running with enabled BattlEye protection. RPT message outputted however is a little obscure:\n<code style=\"display: block\">21:35:04 Call extension 'MyExtension' could not be loaded: Insufficient system resources exist to complete the requested service</code>\n\n\nSince Arma 3 v1.70, `**RVExtensionVersion**` interface (see source code example below) has been added, which is called by the engine on extension load and expects extension version. This interface is designed to work with both, Linux and Windows. The max buffer size is 32 bytes. The version information will then appear in .`rpt` file like so:\n<code style=\"display: block\">19:06:36 CallExtension loaded: test_extension (.\\test_extension.dll) [1.0.0.1]</code>\n\n\nFor more information see `Extensions`.\n\n\n\n<u>Linux specific</u>\n\nWhile on Windows the extension name is case-insensitive, on Linux the extension name is case-sensitive and should match the name of the .so file exactly (minus \".so\" part).\n\n\n\n{{Feature|important|\nIf a user has **anti-virus software real time protection running**, this could cause brand new extension to stutter the game and return with `**EXECUTION_WARNING_TAKES_TOO_LONG**` when executed for the first time, because of the AV software scanning.\nAfter the extension is whitelisted by AV this should go away until a new version of the extension is installed.\nPerhaps a dummy call to the extension on init should be considered as a feature of implementation to account for that.\n}}\n\n\n\n**<u>Extension Context</u>**\n\nSince Arma 3 v2.12 the engine will call the `**RVExtensionContext**` method (if it exists, see _Example 4_) and pass the following data:\n* `**steamID**` of the client calling extension `getPlayerUID` or \"0\"\n* `**fileSource**` from which the extension was executed or \"\" if done on the fly\n* `**missionName**` `missionNameSource`\n* `**serverName**` `serverName`",
            "examples": [
                {
                    "text": "```sqf\n_return = \"myExtension\" callExtension \"stringToBeParsed\";\n```"
                },
                {
                    "text": "```sqf\n\n_result = \"test_extension\" callExtension str weapons player;\n_result = \"test_extension\" callExtension [\"fnc1\", getUnitLoadout player];\n_result = \"test_extension\" callExtension [\"fnc2\", magazinesAmmoFull player];\n_result = \"test_extension\" callExtension [\"fnc1\", [weapons player, magazines player]];\n\n```"
                },
                {
                    "text": "```sqf\n\n_result = \"test_extension\" callExtension [\"fnc1\", [1, \"two\", true, [4, \"five\", false]]];\nparseSimpleArray (_result select 0) params [\"_number\",\"_string\",\"_boolean\",\"_array\"];\nsystemChat str [_number,_string,_boolean,_array];\n\n```\n\n\n\n<u>Source Code</u> ({{Link"
                },
                {
                    "text": "Since Arma 3 v2.12: \n```sqf\nhint (\"myExtContext\" callExtension \"\");\n```\n\nHere is a minimal example:```cpp\n#include <string>\n#include <vector>\n#include <iterator>\n#include <sstream>\n#include <iomanip>\n\nBOOL APIENTRY DllMain(\tHMODULE hModule,\n\t\t\t\t\t\tDWORD ul_reason_for_call,\n\t\t\t\t\t\tLPVOID lpReserved)\n{\n\tswitch (ul_reason_for_call)\n\t{\n\t\tcase DLL_PROCESS_ATTACH:\n\t\tcase DLL_THREAD_ATTACH:\n\t\tcase DLL_THREAD_DETACH:\n\t\tcase DLL_PROCESS_DETACH:\n\t\t\tbreak;\n\t}\n\treturn TRUE;\n}\n\nstd::vector<std::string> contextInfo;\n\nextern \"C\"\n{\n\t//--- User entry point\n\t__declspec (dllexport) void __stdcall RVExtension(char *output, int outputSize, const char *function);\n\t//--- Engine passed context\n\t__declspec (dllexport) void __stdcall RVExtensionContext(const char **args, int argsCnt);\n}\n\n//--- name callExtension function\nvoid __stdcall RVExtension(char *output, int outputSize, const char *function)\n{\n\t//--- Not used here\n\t(void)function;\n\n\tif (!contextInfo.empty())\n\t{\n\t\tstd::ostringstream oss;\n\t\tconst char qt = '\"';\n\n\t\tfor (auto it = contextInfo.begin(); it != contextInfo.end() - 1; ++it)\n\t\t\toss << std::quoted(*it, qt, qt) << \",\";\n\t\toss << std::quoted(contextInfo.back(), qt, qt);\n\n\t\t//--- Send context info back\n\t\tstrncpy_s(output, outputSize, (\"[\" + oss.str() + \"]\").c_str(), _TRUNCATE);\n\t}\n}\n\n//--- Context is executed first, copy it\nvoid __stdcall RVExtensionContext(const char **args, int argsCnt)\n{\n\tcontextInfo.assign(args, std::next(args, argsCnt));\n}\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "extension",
                            "description": "`String` - extension name"
                        },
                        {
                            "name": "function",
                            "description": "`String` - data sent to the extension"
                        }
                    ],
                    "outline": "extension `callExtension` function",
                    "returns": "`String` - data sent back from extension; If the extensiion was not found an empty String will be returned"
                },
                {
                    "parameters": [
                        {
                            "name": "extension",
                            "description": "`String` - extension name"
                        },
                        {
                            "name": "function",
                            "description": "`String` - extension function identifier"
                        },
                        {
                            "name": "arguments",
                            "description": "`Array` - function arguments. Could be array of `Anything`, each element will be converted to `String` automatically. Current allowed max length of this array is 2048 (since Arma 3 v1.92; previous limit: 1024)"
                        }
                    ],
                    "outline": "extension `callExtension` [function, arguments]",
                    "returns": "`Array` in format [result, returnCode, errorCode], where:\n* result: `String` - data sent back from extension. It is up to extension maker what it is.\n* returnCode: `Number` - integer return from extension method. It is up to extension maker to define it.\n* errorCode: `Number` - error code in case of command error (see description). 0 means no errors."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/callExtension"
        },
        "configuration": {
            "label": "callExtension",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Executes a command on the given _camera / actor_ object. Known commands:\n\n{{{!}} class{{=}}\"wikitable\"\n! All cameras !! \"Camera\" !! \"Seagull\" !! \"CamCurator\"\n{{!}}- style=\"vertical-align: top\"\n{{!}}\n* `**\"manual on\"**`\n* `**\"manual off\"**`\n{{!}}\n* `**\"inertia on\"**`\n* `**\"inertia off\"**`\n{{!}}\n* `**\"landed\"**` lands the seagull\n* `**\"airborne\"**` makes the seagull fly\n{{!}}\n* `**\"maxPitch (x)\"**` (number, in degrees)\n* `**\"minPitch (x)\"**` (number, in degrees)\n* `**\"speedDefault (x)\"**` (number)\n* `**\"speedMax (x)\"**` (number)\n* `**\"ceilingHeight (x)\"**` (number, in meters, ASL)\n* `**\"atl (x)\"**` (on/off)\n* `**\"surfaceSpeed (x)\"**` (on/off)\n{{!}}}\n\n**NOTE**: The `camCommand` effect is immediate and does not need `camCommit`/`camCommitPrepared`.",
            "examples": [
                {
                    "text": "```sqf\n_camera camCommand \"manual on\";\n```"
                },
                {
                    "text": "```sqf\nprivate _camera = \"CamCurator\" camCreate [0,0,0];\n_camera camCommand \"maxPitch 89\";\n_camera camCommand \"minPitch -89\";\n_camera camCommand \"speedDefault 0.1\";\n_camera camCommand \"speedMax 2\";\n_camera camCommand \"ceilingHeight 5000\";\n_camera camCommand \"atl off\";\n_camera camCommand \"surfaceSpeed off\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object` - see `camCreate`"
                        },
                        {
                            "name": "command",
                            "description": "`String` - see description"
                        }
                    ],
                    "outline": "camera `camCommand` command",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/camCommand"
        },
        "configuration": {
            "label": "camCommand",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Smoothly conduct the changes that were assigned to a camera within the given time. If the time is set to zero, the changes are done immediately. For `**camPrepareXXX**` commands use `camCommitPrepared`.",
            "examples": [
                {
                    "text": "[SQS Syntax](https://community.bistudio.com/wiki/SQS%20Syntax):\n<sqs>\n; create a camera object\n_cam = \"camera\" camCreate [5600,4800,10]\n_cam camSetTarget player\n_cam cameraEffect [\"internal\", \"BACK\"]\n_cam camCommit 0\n\n; smoothly move the camera to its new position in 6 seconds\n_cam camSetPos [5680,4720,20]\n_cam camCommit 6\n@camCommitted _cam\n\n; proceed\n</sqs>"
                },
                {
                    "text": "[SQF Syntax](https://community.bistudio.com/wiki/SQF%20Syntax):\n\n```sqf\n\nprivate \"_cam\";\n\n// create a camera object\n_cam = \"camera\" camCreate [position player select 0, position player select 1, 2];\n_cam camSetTarget player;\n_cam cameraEffect [\"internal\", \"BACK\"];\n_cam camCommit 0;\n\n// smoothly move the camera to its new position in 6 seconds\n_cam camSetPos [position player select 0, (position player select 1) + 10, 20];\n_cam camCommit 6;\nwaitUntil { camCommitted _cam; };\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object` - object of type \"camera\""
                        },
                        {
                            "name": "time",
                            "description": "`Number` - time in seconds during which the changes shall be done"
                        }
                    ],
                    "outline": "camera `camCommit` time",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/camCommit"
        },
        "configuration": {
            "label": "camCommit",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Smoothly conducts the changes that were assigned to a camera within the given time. If the time is set to zero, the changes are done immediately.\nThis command is for use with `**camPrepareXXX**` commands. For the normal cam command use `camCommit`.",
            "examples": [
                {
                    "text": "```sqf\n\n// create a camera object\n_cam = \"camera\" camCreate [5600, 4800, 10];\n_cam camPrepareTarget player;\n_cam cameraEffect [\"internal\", \"BACK\"];\n_cam camCommitPrepared 0;\n\n// smoothly move the camera to its new position in 6 seconds\n_cam camPreparePos [5680, 4720, 20];\n_cam camCommitPrepared 6;\nwaitUntil { camCommitted _cam };\n\n// proceed\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object` - object of type \"camera\""
                        },
                        {
                            "name": "time",
                            "description": "`Number` - time in seconds in which the changes shall be done"
                        }
                    ],
                    "outline": "camera `camCommitPrepared` time",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/camCommitPrepared"
        },
        "configuration": {
            "label": "camCommitPrepared",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks if the conduction of the last camCommit call already finished.",
            "examples": [
                {
                    "text": "SQS:\n<sqs>\n; create a camera object\n_cam = \"camera\" camCreate [5600,4800,10]\n_cam camSetTarget player\n_cam cameraEffect [\"internal\", \"BACK\"]\n_cam camCommit 0\n\n; smoothly move the camera to its new position in 6 seconds\n_cam camSetPos [5680,4720,20]\n_cam camCommit 6\n@camCommitted _cam\n\n; proceed\n</sqs>"
                },
                {
                    "text": "SQF:\n\n```sqf\n\n_cam = \"camera\" camCreate [0, 0, 0];\n_cam camSetTarget player;\n_cam camSetRelPos [0, -5, 10];\n_cam cameraEffect [\"internal\", \"back\"];\n_cam camCommit 0;\n\nwaitUntil { camCommitted _cam };\n\n_cam camSetTarget player;\n_cam camSetRelPos [90, 25, 10];\n_cam cameraEffect [\"internal\", \"back\"];\n_cam camCommit 5;\n\nwaitUntil {camCommitted _cam};\n\n_cam camSetTarget player;\n_cam camSetRelPos [-90, -5, 10];\n_cam cameraEffect [\"internal\", \"back\"];\n_cam camCommit 5;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object` - object of type \"camera\""
                        }
                    ],
                    "outline": "`camCommitted` camera",
                    "returns": "`Boolean` - true if the last camCommit already finished, false if not"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/camCommitted"
        },
        "configuration": {
            "label": "camCommitted",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets construction camera parameters. To work with \"camconstruct\" object.\n**IMPORTANT**: Beware: {{sic|camCon**stu**ctionSetParams|camConstRuctionSetParams}}.",
            "examples": [
                {
                    "text": "```sqf\n_camera camConstuctionSetParams [getPos player, 50, 20];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object`"
                        },
                        {
                            "name": "position",
                            "description": "`Array` format `Position`"
                        },
                        {
                            "name": "radius",
                            "description": "`Number`"
                        },
                        {
                            "name": "maxAboveLand",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "camera `camConstuctionSetParams` [position, radius, maxAboveLand]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/camConstuctionSetParams"
        },
        "configuration": {
            "label": "camConstuctionSetParams",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Create a camera or a seagull object on the given position. The creation happens immediately and doesn't wait for `camCommit`.\n\nAmong other commands, `cameraEffect` must be used to enter the camera's view and `camDestroy` to delete the created camera. See also [Camera Control](https://community.bistudio.com/wiki/%3ACategory%3ACommand%20Group%3A%20Camera%20Control).\n**IMPORTANT**: \n* Other objects can be created this way, but vehicles created with `camCreate` cannot be entered\n* Any unit created with `camCreate` will remain static\n* Unlike `createVehicle`, objects are created exactly at the given position, without consideration of the surrounding objects.",
            "examples": [
                {
                    "text": "```sqf\n_cam = \"camera\" camCreate (ASLToAGL eyePos player);\n```"
                },
                {
                    "text": "```sqf\n_flr = \"flare\" camCreate (position _myPlane); // works too\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`String` - camera type, one of the following:\n* \"camera\"\n* \"seagull\" (a crow in Arma 2)\n* \"camconstruct\"\n* \"camcurator\" (Since {{Name|arma3zeus}})\n* \"crowe\" (crow - Arma 3)\n* or any vehicle class suitable to be spawned with camera"
                        },
                        {
                            "name": "position",
                            "description": "`Array` format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) - position at which to create the object"
                        }
                    ],
                    "outline": "type `camCreate` position",
                    "returns": "`Object` - the created camera"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/camCreate"
        },
        "configuration": {
            "label": "camCreate",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Destroys camera object created with `camCreate`. This command doesn't need `camCommit`. \n**IMPORTANT**:  Destroying camera object does not terminate camera effect automatically, use `cameraEffect` prior to deleting the camera (see Example 2)",
            "examples": [
                {
                    "text": "```sqf\ncamDestroy _cam;\n```"
                },
                {
                    "text": "```sqf\n_cam cameraEffect [\"terminate\",\"back\"];\ncamDestroy _cam;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`camDestroy` object",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/camDestroy"
        },
        "configuration": {
            "label": "camDestroy",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the given effect on the given camera. If you want to switch the screen directly to the first-person, aiming, third-person or group view of an object, use `switchCamera` instead. The effect type \"Terminate\" is used to exit the current camera view and switch back to the player's view. Does not need `camCommit`.\n\n\n\nSince **(Arma 3)**, it is possible to terminate individual r2t source. For example:\n\n```sqf\n\ncam cameraEffect [\"terminate\", \"back\", \"rtt1\"]; // would terminate \"rtt1\" r2t source\ncam cameraEffect [\"terminate\", \"back\"]; // would terminate all r2t sources\n\n```\n\n**IMPORTANT**: \nOne cannot mix and match `cameraEffect` and can either have multiple `r2t` cameras or a single camera for the whole screen.\nIf one needs a background stream overlayed with `r2t` streams, this could be achieved by creating an object and using `switchCamera` to switch to it for background image, while using `cameraEffect` for `r2t` overlay (see _Example 4_).",
            "examples": [
                {
                    "text": "```sqf\n_cam cameraEffect [\"internal\", \"BACK\"];\n```"
                },
                {
                    "text": "```sqf\n_cam cameraEffect [\"internal\", \"back\", \"rendersurface\"];\n```"
                },
                {
                    "text": "```sqf\n\ncam = \"seagull\" camCreate (player modelToWorld [0,0,100]);\ncam cameraEffect [\"FIXED\", \"LEFT TOP\"];\ncam camCommand \"MANUAL ON\";\n\n```"
                },
                {
                    "text": "```sqf\n\n_ctrl = findDisplay 46 createDisplay \"RscDisplayEmpty\" ctrlCreate [\"RscPicture\", -1];\n_ctrl ctrlSetPosition [0.5, 0, 0.5, 0.5];\n_ctrl ctrlSetText \"#(argb,512,512,1)r2t(rtt1,1.0)\";\n_ctrl ctrlCommit 0;\n_cam1 = \"camera\" camCreate (ASLToAGL eyePos player vectorAdd [0, -10, 0]);\n_cam1 cameraEffect [\"Internal\", \"Back\", \"rtt1\"];\n_cam2 = \"Land_HandyCam_F\" createVehicle [0,0,0];\n_cam2 enableSimulation false;\n_cam2 setPos (ASLToAGL eyePos player vectorAdd [0, 10, 0]);\n_cam2 setDir (_cam2 getDir player);\nswitchCamera _cam2;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object` - object of type \"camera\""
                        },
                        {
                            "name": "effectName",
                            "description": "`String` - the effect type (defined in main config or [[Description.ext#CfgCameraEffects|CfgCameraEffects]] >> Array). Defaults are: `**\"Internal\"**`, `**\"External\"**`, `**\"Fixed\"**`, `**\"FixedWithZoom\"**`, `**\"Terminate\"**`"
                        },
                        {
                            "name": "effectPosition",
                            "description": "`String` - position of the effect. Can be one of:\n{{Columns|5|\n* `**\"TOP\"**`\n* `**\"LEFT\"**`\n* `**\"RIGHT\"**`\n* `**\"FRONT\"**`\n* `**\"BACK\"**`\n* `**\"LEFT FRONT\"**`\n* `**\"RIGHT FRONT\"**`\n* `**\"LEFT BACK\"**`\n* `**\"RIGHT BACK\"**`\n* `**\"LEFT TOP\"**`\n* `**\"RIGHT TOP\"**`\n* `**\"FRONT TOP\"**`\n* `**\"BACK TOP\"**`\n* `**\"BOTTOM\"**`\n}}\nThese are usually used with \"Fixed\" and \"FixedWithZoom\" effect types. If not sure which position to use, set it to `**\"BACK\"**`."
                        },
                        {
                            "name": "r2tName",
                            "description": "`String` - (Optional) [Render To Texture](https://community.bistudio.com/wiki/Procedural_Textures%23Render_To_Texture) surface reference"
                        }
                    ],
                    "outline": "camera `cameraEffect` [effectName, effectPosition, r2tName]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/cameraEffect"
        },
        "configuration": {
            "label": "cameraEffect",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enable / disable showing of in-game UI during currently active camera effect. By default the HUD is off, which will make results of `drawIcon3D` invisible, for example.",
            "examples": [
                {
                    "text": "```sqf\ncameraEffectEnableHUD true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "enable",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "`cameraEffectEnableHUD` enable",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/cameraEffectEnableHUD"
        },
        "configuration": {
            "label": "cameraEffectEnableHUD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return camera interest for given entity, as set by `setCameraInterest`, or as autodetected.",
            "examples": [
                {
                    "text": "```sqf\ncamInterest = cameraInterest myUnit;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`cameraInterest` entity",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/cameraInterest"
        },
        "configuration": {
            "label": "cameraInterest",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the vehicle to which the camera is attached. If you need the person, see `focusOn`.",
            "examples": [
                {
                    "text": "```sqf\n_object = cameraOn;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`cameraOn`",
                    "returns": "`Object` - vehicle"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/cameraOn"
        },
        "configuration": {
            "label": "cameraOn",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns mode of active camera view. Mode is one of: \n* \"INTERNAL\" (1st person)\n* \"EXTERNAL\" (3rd person)\n* \"GUNNER\" (optics / sights)\n* \"GROUP\" (commander view)",
            "examples": [
                {
                    "text": "```sqf\nif (cameraOn == _vehicle && cameraView == \"External\") then\n{\n  _vehicle switchCamera \"Internal\";\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**cameraView**",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/cameraView"
        },
        "configuration": {
            "label": "cameraView",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns root of campaign description.ext entries hierarchy.",
            "examples": [
                {
                    "text": "```sqf\n_config = campaignConfigFile;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`campaignConfigFile`",
                    "returns": "`Config`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/campaignConfigFile"
        },
        "configuration": {
            "label": "campaignConfigFile",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Preloads the scene for the prepared camera with given timeout after which preloading is aborted. Max timeout is 30 seconds. Timeout of 0 means max timeout of 30 seconds as well. **NOTE**: This command will read prepared params set with `camPrepareFOV`, `camPreparePos` and `camPrepareTarget`, so no `camCommitPrepared` is necessary. If `camPrepareFOV` is not set, the default value is 1. If `camPrepareTarget` (for direction) and `camPreparePos` (for position) are not set, current `direction` and `position` of the camera are used. The prepared camera preload will preload main camera as well. `cameraEffect` is not necessary",
            "examples": [
                {
                    "text": "```sqf\n_camera camPreload 5;\n```"
                },
                {
                    "text": "Preload camera around player to avoid stuttering on optics zooming:\n\n```sqf\n[] spawn \n{\n\t_cam = \"camera\" camCreate (player selectionPosition \"camera\");\n\tfor \"_i\" from 0 to 359 do\n\t{\n\t\t_cam setDir _i;\n\t\t_cam camPrepareFov 0.25;\n\t\t_cam camPreload 0;\n\t\twaitUntil { camPreloaded _cam };\n\t};\n\tcamDestroy _cam;\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object`"
                        },
                        {
                            "name": "timeout",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "camera `camPreload` timeout",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/camPreload"
        },
        "configuration": {
            "label": "camPreload",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks whether the camera has finished preloading.",
            "examples": [
                {
                    "text": "```sqf\nif (camPreloaded _camera) exitWith { hint \"loaded\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`camPreloaded` camera",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/camPreloaded"
        },
        "configuration": {
            "label": "camPreloaded",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Prepares the camera bank angle.\n**WARNING**: This command is **non-functional**!",
            "examples": [
                {
                    "text": "```sqf\n_camera camPrepareBank -0.1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object`"
                        },
                        {
                            "name": "bank",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "camera `camPrepareBank` bank",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/camPrepareBank"
        },
        "configuration": {
            "label": "camPrepareBank",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Prepares the camera heading. \n**WARNING**: This command is **non-functional**!",
            "examples": [
                {
                    "text": "```sqf\n_camera camPrepareDir 150;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object`"
                        },
                        {
                            "name": "direction",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "camera `camPrepareDir` direction",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/camPrepareDir"
        },
        "configuration": {
            "label": "camPrepareDir",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Prepares the camera dive angle. \n**WARNING**: This command is **non-functional**!",
            "examples": [
                {
                    "text": "```sqf\n_camera camPrepareDive -0.1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object`"
                        },
                        {
                            "name": "dive",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "camera `camPrepareDive` dive",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/camPrepareDive"
        },
        "configuration": {
            "label": "camPrepareDive",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "focusRange is . Prepares the camera focus blur.\n\n**[-1,1]** will reset default values (auto focusing), **[-1,-1]** will disable postprocessing (all is focused). Needs the call of `camCommitPrepared` to be conducted.",
            "examples": [
                {
                    "text": "```sqf\n_camera camPrepareFocus [50, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object`"
                        },
                        {
                            "name": "distance",
                            "description": "`Number` - blur distance"
                        },
                        {
                            "name": "blur",
                            "description": "`Number` - blur intensity"
                        }
                    ],
                    "outline": "camera `camPrepareFocus` [distance, blur]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/camPrepareFocus"
        },
        "configuration": {
            "label": "camPrepareFocus",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Prepares the camera field of view (zoom). The default zoom level is 0.75, 0.01 is the nearest and 2 the furthest zoom value. The angle of the field of view is _atan(FOV)*2_ radians when in 4:3 aspect ratio. Needs the call of `camCommitPrepared` to be conducted.",
            "examples": [
                {
                    "text": "```sqf\n_camera camPrepareFov 0.1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object`"
                        },
                        {
                            "name": "fieldOfView",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "camera `camPrepareFov` fieldOfView",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/camPrepareFov"
        },
        "configuration": {
            "label": "camPrepareFov",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Prepares the camera field of view range for auto zooming.\n**WARNING**: This command is **non-functional**!",
            "examples": [
                {
                    "text": "```sqf\n_camera camPrepareFovRange [0.1, 0.5];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object`"
                        },
                        {
                            "name": "fovRange",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "camera `camPrepareFovRange` fovRange",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/camPrepareFovRange"
        },
        "configuration": {
            "label": "camPrepareFovRange",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Prepares the camera position. Needs the call of `camCommitPrepared` to be conducted.",
            "examples": [
                {
                    "text": "```sqf\n_camera camPreparePos getPos player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object`"
                        },
                        {
                            "name": "position",
                            "description": "`Array` - format `Position`"
                        }
                    ],
                    "outline": "camera `camPreparePos`  position",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/camPreparePos"
        },
        "configuration": {
            "label": "camPreparePos",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Prepares the camera position relative to the current position of the currect target (see `camPrepareTarget`). Needs the call of `camCommitPrepared` to be conducted.",
            "examples": [
                {
                    "text": "```sqf\n_camera camPrepareRelPos [10,5,-2];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object`"
                        },
                        {
                            "name": "position",
                            "description": "`Array` format [PositionRelative](https://community.bistudio.com/wiki/Position%23PositionRelative)"
                        }
                    ],
                    "outline": "camera `camPrepareRelPos` position",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/camPrepareRelPos"
        },
        "configuration": {
            "label": "camPrepareRelPos",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Prepares the camera target to a position or to a target. Needs the call of `camCommitPrepared` to be conducted.",
            "examples": [
                {
                    "text": "```sqf\n_camera camPrepareTarget getPos player;\n```"
                },
                {
                    "text": "```sqf\n_camera camPrepareTarget player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object` - object of type \"camera\""
                        },
                        {
                            "name": "position",
                            "description": "`Position` - target location"
                        }
                    ],
                    "outline": "camera `camPrepareTarget` position",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object` - object of type \"camera\""
                        },
                        {
                            "name": "target",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "camera `camPrepareTarget` target",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/camPrepareTarget"
        },
        "configuration": {
            "label": "camPrepareTarget",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets camera bank angle. Does not commit changes.\n**WARNING**: This command is **non-functional**!",
            "examples": [
                {
                    "text": "```sqf\n_camera camSetBank -0.1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object`"
                        },
                        {
                            "name": "bank",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "camera `camSetBank`  bank",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/camSetBank"
        },
        "configuration": {
            "label": "camSetBank",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the orientation of the given camera in the direction of the given vector. Needs `camCommit`.",
            "examples": [
                {
                    "text": "Since Arma 3:\n\n```sqf\n\nprivate _pos1 = player modelToWorld [0, 5, 5];\nprivate _pos2 = player modelToWorld [0, 50, 50];\n\nprivate _cam = \"camera\" camCreate _pos1;\n_cam cameraEffect [\"INTERNAL\", \"BACK\"];\n\n_cam camSetPos _pos2;\n_cam camSetDir (_pos2 vectorFromTo _pos1);\n_cam camCommit 5;\nwaitUntil { camCommitted _cam };\n\n_cam camSetPos _pos1;\n_cam camCommit 5;\n\n```"
                },
                {
                    "text": "Before Arma 3:\n\n```sqf\n\nprivate _pos1 = player modelToWorld [0, 5, 5];\nprivate _pos2 = player modelToWorld [0, 50, 50];\n\nprivate _cam = \"camera\" camCreate _pos1;\n_cam cameraEffect [\"INTERNAL\", \"BACK\"];\n\n_cam camSetPos _pos2;\n_cam camSetDir 180;\n_cam camCommit 5;\nwaitUntil { camCommitted _cam };\n\n_cam camSetPos _pos1;\n_cam camCommit 5;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object` - object of type \"camera\""
                        },
                        {
                            "name": "direction",
                            "description": "* `Number` (before **(Arma 3)**) - camera azimuth\n* `Array` in format [x,y,z] (since **(Arma 3)**) - direction of camera. Must be a valid vector."
                        }
                    ],
                    "outline": "camera `camSetDir` direction",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/camSetDir"
        },
        "configuration": {
            "label": "camSetDir",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets camera dive angle. Does not commit changes. \n**WARNING**: This command is **non-functional**!",
            "examples": [
                {
                    "text": "```sqf\n_camera camSetDive -0.1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object`"
                        },
                        {
                            "name": "dive",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "camera `camSetDive`  dive",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/camSetDive"
        },
        "configuration": {
            "label": "camSetDive",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets camera focus range in format [distance, blur]. blur param - sets the camera focus blur. It does not automatically commit changes (see `camCommit`). Use [-1, -1] to disable focus completely.",
            "examples": [
                {
                    "text": "```sqf\n_camera camSetFocus [50, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object`"
                        },
                        {
                            "name": "focusRange",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "camera `camSetFocus` focusRange",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/camSetFocus"
        },
        "configuration": {
            "label": "camSetFocus",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set the zoom level (**F**ield **O**f **V**iew) of the given camera.\n\n\nThe zoom level is from _`**0.01**`_ for the nearest and _`**8.5**`_ for the furthest zoom value, with a default zoom level of _`**0.75**`_\n\n\nThe angle of the field of view is _`**atan(FOV)*2**`_ radians when in 4:3 aspect ratio. Needs the call of `camCommit` to be conducted.",
            "examples": [
                {
                    "text": "```sqf\n_cam camSetFov 0.75;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object` - object of type \"camera\""
                        },
                        {
                            "name": "level",
                            "description": "`Number` - zoom level, range 0.01 to 8.5 (see description above)"
                        }
                    ],
                    "outline": "camera `camSetFov` level",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/camSetFov"
        },
        "configuration": {
            "label": "camSetFov",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set the zoom level (**F**ield **O**f **V**iew) start and end values for automatical zooming. <!-- \"automatical\"? LoL ;-) -->\n\n\nThe default zoom level is _`**0.7**`_ where _`**0**`_ is the nearest and _`**1**`_ is the most far zoom value.\n **WARNING**: This command is **non-functional**!",
            "examples": [
                {
                    "text": "```sqf\n_cam camSetFovRange [0.1, 0.7];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object` - object of type \"camera\""
                        },
                        {
                            "name": "fovRange",
                            "description": "`Array` - zoom level, range 0 to 1 (see description above)"
                        }
                    ],
                    "outline": "camera `camSetFovRange` fovRange",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/camSetFovRange"
        },
        "configuration": {
            "label": "camSetFovRange",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the position of the given camera or seagull (see `camCreate`). It is worth mentioning that camera position can also be set with `setPos`, in which case it would be instant. With `camSetPos` it is possible to make smooth position transition in time, defined with `camCommit`, which is required in this case.",
            "examples": [
                {
                    "text": "```sqf\n_cam camSetPos [2300,1000,130];\n_cam camCommit 10;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object` - object of type \"camera\" or \"seagull\""
                        },
                        {
                            "name": "position",
                            "description": "`Array` - `PositionAGL` to set the object to"
                        }
                    ],
                    "outline": "camera `camSetPos` position",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/camSetPos"
        },
        "configuration": {
            "label": "camSetPos",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the position of the given camera relative to its target, set with `camSetTarget`. Needs a call to `camCommit` to be conducted.**IMPORTANT**: Since it sets relative position to the target, the `camSetTarget` command should be executed already, before `camSetRelPos`.",
            "examples": [
                {
                    "text": "```sqf\n_cam camSetTarget _car;\n_cam camSetRelPos [0,10,8];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object` - object of type \"camera\""
                        },
                        {
                            "name": "position",
                            "description": "`Array` format [PositionRelative](https://community.bistudio.com/wiki/Position%23PositionRelative)"
                        }
                    ],
                    "outline": "camera `camSetRelPos` position",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/camSetRelPos"
        },
        "configuration": {
            "label": "camSetRelPos",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set the target object or position where the given camera should point at. Needs the call of `camCommit` to be conducted. To reset the target use `objNull`.",
            "examples": [
                {
                    "text": "```sqf\n_camera camSetTarget player;\n```"
                },
                {
                    "text": "```sqf\n_camera camSetTarget [2540,1503,26];\n```"
                },
                {
                    "text": "```sqf\n_cam = \"camera\" camCreate (player modelToWorld [0, 100, 10]);\n_cam camSetTarget player;\n_cam camSetRelPos [0, 0.5, 1.5];\n_cam cameraEffect [\"internal\", \"back\"];\n_cam camCommit 1;\nplayer setRandomLip true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object` - object of type \"camera\""
                        },
                        {
                            "name": "target",
                            "description": "`Object` - target location"
                        }
                    ],
                    "outline": "camera `camSetTarget` target",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object` - object of type \"camera\""
                        },
                        {
                            "name": "position",
                            "description": "`Array` - target location - `Position`"
                        }
                    ],
                    "outline": "camera `camSetTarget` position",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/camSetTarget"
        },
        "configuration": {
            "label": "camSetTarget",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns camera's target.",
            "examples": [
                {
                    "text": "```sqf\n_someObject = camTarget _camera;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`camTarget` camera",
                    "returns": "`Object`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/camTarget"
        },
        "configuration": {
            "label": "camTarget",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set / clear using of night vision during cutscenes. This command only works with `camCreate` created camera that is currently the main camera for the player (see example).",
            "examples": [
                {
                    "text": "```sqf\ncamUseNVG true;\n```"
                },
                {
                    "text": "```sqf\nsetDate [2000,12,31,0,0];\n_cam = \"camera\" camCreate [0,0,0];\n_cam camSetTarget player;\n_cam camSetRelPos [0,-5,3];\n_cam cameraEffect [\"Internal\",\"Back\"];\n_cam camCommit 0;\ncamUseNVG true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "set",
                            "description": "`Boolean` - enable/disable night vision"
                        }
                    ],
                    "outline": "`camUseNVG` set",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/camUseNVG"
        },
        "configuration": {
            "label": "camUseNVG",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks if given object can be stored in inventory of given object or any inventory container (`uniform`, `vest`, `backpack`) of given unit.\n\nBefore Arma 3 v2.10 this comment verified only the biggest container when multiple items were queried; now it checks all containers.\n\n{{Feature|important|\nAvoid passing an empty string <sqf inline>\"\" to this command as it will create a warning dialog:\n[[File:a3 warning badvehicletype.jpg|none|400px",
            "examples": [
                {
                    "text": "<sqf\n>if (player canAdd \"FirstAidKit\") then\n{\n\tplayer addItem \"FirstAidKit\";\n}\nelse\n{\n\thint \"Not enough space\";\n};"
                },
                {
                    "text": "```sqf\n\nif (_box canAdd \"FirstAidKit\") then\n{\n\t_box addWeaponCargo [\"FirstAidKit\", 1];\n}\nelse\n{\n\thint \"Not enough space\";\n};\n\n```"
                },
                {
                    "text": "```sqf\ncar canAdd [currentWeapon player, 50];\n```"
                },
                {
                    "text": "```sqf\n\n// check if attachment can be loaded\n\"arifle_Katiba_GL_F\" canAdd \"acc_pointer_IR\";\n\"arifle_Katiba_GL_F\" canAdd [\"acc_pointer_IR\", \"PointerSlot\"];\n\n```"
                },
                {
                    "text": "```sqf\n\n// check if magazine can be loaded\n\"arifle_Katiba_GL_F\" canAdd \"30Rnd_65x39_caseless_green\";\n\"arifle_Katiba_GL_F\" canAdd [\"30Rnd_65x39_caseless_green\", \"this\"];\n\"arifle_Katiba_GL_F\" canAdd [\"1Rnd_SmokeRed_Grenade_shell\", \"EGLM\"];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - unit or container"
                        },
                        {
                            "name": "item",
                            "description": "`String` - config class"
                        }
                    ],
                    "outline": "object `canAdd` item",
                    "returns": "`Boolean`"
                },
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - unit or container"
                        },
                        {
                            "name": "item",
                            "description": "`String` - config class"
                        },
                        {
                            "name": "count",
                            "description": "`Number` - desired quantity"
                        },
                        {
                            "name": "ignoreSoldierMaxLoad",
                            "description": "`Boolean` - (Optional, default `false`) `true` to ignore 'soldierMaxLoad' param, container's `maxLoad` is still counted"
                        }
                    ],
                    "outline": "object `canAdd` [item, count, ignoreSoldierMaxLoad]",
                    "returns": "`Boolean`"
                },
                {
                    "parameters": [
                        {
                            "name": "weapon",
                            "description": "`String` - weapon class name"
                        },
                        {
                            "name": "item",
                            "description": "`String` - config class of magazine or attachment"
                        }
                    ],
                    "outline": "weapon `canAdd` item",
                    "returns": "`Boolean`"
                },
                {
                    "parameters": [
                        {
                            "name": "weapon",
                            "description": "`String` - weapon class name"
                        },
                        {
                            "name": "attachment",
                            "description": "`String` - attachment class name"
                        },
                        {
                            "name": "slot",
                            "description": "`String` - slot class name (defined under **WeaponSlotsInfo** class in weapon config)"
                        }
                    ],
                    "outline": "weapon `canAdd` [attachment, slot]",
                    "returns": "`Boolean`"
                },
                {
                    "parameters": [
                        {
                            "name": "weapon",
                            "description": "`String` - weapon class name"
                        },
                        {
                            "name": "magazine",
                            "description": "`String` - magazine class name"
                        },
                        {
                            "name": "muzzle",
                            "description": "`String` - muzzle class name"
                        }
                    ],
                    "outline": "weapon `canAdd` [magazine, muzzle]",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/canAdd"
        },
        "configuration": {
            "label": "canAdd",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks if given object can be stored into soldier's backpack.\n\n{{Feature|important|\nAvoid passing an empty string <sqf inline>\"\" to this command as it will create a warning dialog:\n[[File:a3 warning badvehicletype.jpg|none|400px",
            "examples": [
                {
                    "text": "```sqf\nif (player canAddItemToBackpack \"HandGrenade\") then { player addItemToBackpack _item } else { hint \"no room!\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "item",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `canAddItemToBackpack` item",
                    "returns": "`Boolean`"
                },
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "item",
                            "description": "`String`"
                        },
                        {
                            "name": "count",
                            "description": "`Number`"
                        },
                        {
                            "name": "ignoreSoldierMaxLoad",
                            "description": "`Boolean` - (Optional, default `false`) `true` to ignore 'soldierMaxLoad' param, container `maxLoad` is still counted."
                        }
                    ],
                    "outline": "unit `canAddItemToBackpack` [item, count, ignoreSoldierMaxLoad]",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/canAddItemToBackpack"
        },
        "configuration": {
            "label": "canAddItemToBackpack",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks if given object can be stored into soldier's uniform.\n\n{{Feature|important|\nAvoid passing an empty string <sqf inline>\"\" to this command as it will create a warning dialog:\n[[File:a3 warning badvehicletype.jpg|none|400px",
            "examples": [
                {
                    "text": "```sqf\n_item = \"HandGrenade\";\n_fits = player canAddItemToUniform _item;\nif (_fits) then {\n\tplayer addItemToUniform _item;\n} else {\n\thint \"no room!\";\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "item",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `canAddItemToUniform` item",
                    "returns": "`Boolean`"
                },
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "item",
                            "description": "`String`"
                        },
                        {
                            "name": "count",
                            "description": "`Number`"
                        },
                        {
                            "name": "ignoreSoldierMaxLoad (Optional)",
                            "description": "`Boolean` - `true` to ignore 'soldierMaxLoad' param, container `maxLoad` is still counted. Default: `false`"
                        }
                    ],
                    "outline": "unit `canAddItemToUniform` [item, count, ignoreSoldierMaxLoad]",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/canAddItemToUniform"
        },
        "configuration": {
            "label": "canAddItemToUniform",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks if given object can be stored into soldier's vest.\n\n{{Feature|important|\nAvoid passing an empty string <sqf inline>\"\" to this command as it will create a warning dialog:\n[[File:a3 warning badvehicletype.jpg|none|400px",
            "examples": [
                {
                    "text": "```sqf\n\n_item = \"HandGrenade\";\nprivate _fits = player canAddItemToVest _item;\nif (_fits) then {\n\tplayer addItemToVest _item;\n} else {\n\thint \"no room!\";\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "item",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `canAddItemToVest` item",
                    "returns": "`Boolean`"
                },
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "item",
                            "description": "`String`"
                        },
                        {
                            "name": "count",
                            "description": "`Number`"
                        },
                        {
                            "name": "ignoreSoldierMaxLoad",
                            "description": "`Boolean` - (Optional, default `true`) `true` to ignore 'soldierMaxLoad' param, container `maxLoad` is still counted."
                        }
                    ],
                    "outline": "unit `canAddItemToVest` [item, count, ignoreSoldierMaxLoad]",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/canAddItemToVest"
        },
        "configuration": {
            "label": "canAddItemToVest",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Cancels a simple task destination.",
            "examples": [
                {
                    "text": "```sqf\ncancelSimpleTaskDestination myTask;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "task",
                            "description": "`Task`"
                        }
                    ],
                    "outline": "`cancelSimpleTaskDestination` task",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/cancelSimpleTaskDestination"
        },
        "configuration": {
            "label": "cancelSimpleTaskDestination",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if a unit's weapon can be deployed.",
            "examples": [
                {
                    "text": "```sqf\nif (canDeployWeapon player) then { hint \"I could rest my weapon here...\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit ",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`canDeployWeapon` unit",
                    "returns": "`Boolean` - `true` if unit's weapon can be deployed"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/canDeployWeapon"
        },
        "configuration": {
            "label": "canDeployWeapon",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if the given vehicle is still able to fire. For the command to return `true`, vehicle must be alive, have weapon operator and the weapon cannot be damaged &ge; 0.9 but can be empty due to running out of ammo. If mission starts with vehicle having no ammo or `setVehicleAmmo` 0 command is executed on the vehicle, then `canFire` will always report `false` for it.",
            "examples": [
                {
                    "text": "```sqf\nif (not canFire _tank) then\n{\n\tplayer sideChat \"Tank disabled!\";\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`canFire` unitName",
                    "returns": "`Boolean` - `true` if able to fire"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/canFire"
        },
        "configuration": {
            "label": "canFire",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns if the given vehicle is still able to move.\n* This command does not check for the amount of fuel the vehicle has, except for helicopters and airplanes.\n* A helicopter with a damaged tail rotor may return that it cannot move, where a skilled pilot could use it.",
            "examples": [
                {
                    "text": "```sqf\nif (not canMove _tank) then\n{\n\tplayer sideChat \"He's nailed on the ground! Now hurry!\";\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`canMove` vehicle",
                    "returns": "`Boolean` - `true` if the vehicle is able to move, `false` if not"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/canMove"
        },
        "configuration": {
            "label": "canMove",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if `setSlingLoad` is possible.",
            "examples": [
                {
                    "text": "```sqf\n_canSling = veh1 canSlingLoad veh2;\n```"
                },
                {
                    "text": "```sqf\nhint str ((vehicle player) canSlingLoad veh1);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "heli",
                            "description": "`Object` - a helicopter"
                        },
                        {
                            "name": "cargo",
                            "description": "`Object` - an entity"
                        }
                    ],
                    "outline": "heli `canSlingLoad` cargo",
                    "returns": "`Boolean` - `true` if `setSlingLoad` is possible"
                },
                {
                    "parameters": [
                        {
                            "name": "typeOfHeli",
                            "description": "`String` - a config type of helicopter"
                        },
                        {
                            "name": "typeOfCargo",
                            "description": "`String` - a config type of cargo (the object of type cargo has to exist in the mission)"
                        }
                    ],
                    "outline": "typeOfHeli `canSlingLoad` typeOfCargo",
                    "returns": "`Boolean` - `true` if can be sling loaded _in principle_"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/canSlingLoad"
        },
        "configuration": {
            "label": "canSlingLoad",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns if the given soldier is able to stand up. It only checks for the unit's legs and not its alive/dead status - it can return `true` for a dead unit.\n**Arma 3**: Since Arma 3 v1.60 and the introduction of limping, this command always returns `true` for humans.",
            "examples": [
                {
                    "text": "[SQS](https://community.bistudio.com/wiki/SQS%20Syntax):\n<sqs>? (not canStand player) : player groupChat \"My legs! They hit my legs!\"</sqs>"
                },
                {
                    "text": "```sqf\n\nif (not canStand player) then\n{\n\tplayer groupChat \"My legs! They hit my legs!\";\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`canStand` unit",
                    "returns": "`Boolean` - `true` if the unit is human and is still able to stand up, `false` otherwise."
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/canStand"
        },
        "configuration": {
            "label": "canStand",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if `sleep`, `uiSleep` or `waitUntil` commands can be used in the current scope.\nUsually when suspension is not allowed but used, for example when code is executed in [unscheduled environment](https://community.bistudio.com/wiki/Scheduler%23Unscheduled%20Environment), the script engine would ignore any suspension command and throw error: \"Suspending not allowed in this context\".\nUsing `canSuspend` command allows to detect the correct environment for the code.\n\n**NOTE**: \nThe definition of [scheduled](https://community.bistudio.com/wiki/Scheduler%23Scheduled%20Environment) and [unscheduled environment](https://community.bistudio.com/wiki/Scheduler%23Unscheduled%20Environment) is not the same as whether or not the script execution can or cannot be suspended.\nFor example while ._sqs_ and ._fsm_ scripts are [scheduled](https://community.bistudio.com/wiki/Scheduler%23Scheduled_Environment) (i.e. added to the [scheduler](https://community.bistudio.com/wiki/Scheduler):\n`diag_activeSQSScripts`, `diag_activeMissionFSMs`), they cannot use `sleep` or be suspended like `execVM` or `spawn` scripts can, therefore `canSuspend` for these types of scripts will return `false`.",
            "examples": [
                {
                    "text": "```sqf\n\nonEachFrame\n{\n\tsystemChat str canSuspend;\t\t\t// false\n\t0 spawn { hint str canSuspend };\t// true\n\tonEachFrame {};\n};\n\n```"
                },
                {
                    "text": "Make sure the function code is always spawned even when called:\n\n```sqf\n\nprivate _sleepingCode =\n{\n\tif (!canSuspend) exitWith { _this spawn _sleepingCode };\n\tsleep _this;\n\thint (\"slept \" + str _this);\n};\n\n5 call _sleepingCode;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`canSuspend`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/canSuspend"
        },
        "configuration": {
            "label": "canSuspend",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "A getter for `triggerDynamicSimulation`. **IMPORTANT**: This command returns always true for vehicles.",
            "examples": [
                {
                    "text": "```sqf\nhint str canTriggerDynamicSimulation player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`canTriggerDynamicSimulation` unit",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/canTriggerDynamicSimulation"
        },
        "configuration": {
            "label": "canTriggerDynamicSimulation",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns config value of `unloadInCombat` for a vehicle. Alternatively see `getUnloadInCombat`",
            "examples": [
                {
                    "text": "```sqf\nif (canUnloadInCombat _vehicle) then { hint \"unload in combat is possible!\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`canUnloadInCombat` vehicle",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/canUnloadInCombat"
        },
        "configuration": {
            "label": "canUnloadInCombat",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns bool array if it is possible to load cargo inside vehicle and if possible to load cargo into empty vehicle",
            "examples": [
                {
                    "text": "Blackfish with no vehicle cargo loaded\n\n```sqf\nprivate _result = blackfish canVehicleCargo offroad; // [true, true]\n```"
                },
                {
                    "text": "Blackfish with one vehicle cargo called offroad already loaded\n\n```sqf\nprivate _result = blackfish canVehicleCargo offroad; // [false, false]\n```\n\nEven if the Blackfish were empty, the offroad could not be loaded because it is already in a cargo space"
                },
                {
                    "text": "Blackfish with one vehicle cargo called offroad already loaded\n\n```sqf\nprivate _result = blackfish canVehicleCargo offroad2; // [false, true]\n```\n\noffroad2 can't be loaded because there isn't enough space in the Blackfish, but if there were space offroad2 could be loaded into the Blackfish"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - vehicle carrying cargo"
                        },
                        {
                            "name": "cargo",
                            "description": "`Object` - cargo to put in vehicle"
                        }
                    ],
                    "outline": "vehicle `canVehicleCargo` cargo",
                    "returns": "`Array` of `Boolean`s - [willFitIntoCurrentVehicle, willFitIntoEmptyVehicle]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/canVehicleCargo"
        },
        "configuration": {
            "label": "canVehicleCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the captive state of the given unit (set with `setCaptive`). A captive unit will not be attacked by its enemies.\n**IMPORTANT**: \nWhile a captive unit won't be attacked, it will still attack its enemies – be sure to `setBehaviour` \"CARELESS\" / `removeAllWeapons` accordingly.",
            "examples": [
                {
                    "text": "```sqf\nif (captive _general) then { removeAllWeapons _general; };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - unit or vehicle"
                        }
                    ],
                    "outline": "`captive` object",
                    "returns": "`Boolean` - `true` if the unit is captive, `false` if not"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/captive"
        },
        "configuration": {
            "label": "captive",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks whether the unit is a `captive`. If the unit is a vehicle, its commander is checked instead.\n\nIf a unit's captivity level was set as a `Boolean`, then the returned number is either 0 (for `false`) or 1 (for `true`).",
            "examples": [
                {
                    "text": "```sqf\n_captivity = captiveNum _unit;\n```"
                },
                {
                    "text": "```sqf\n_unit setCaptive 1024;\nhint str captive _unit; // true\nhint str captiveNum _unit; // 1024\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`captiveNum` unit",
                    "returns": "`Number` - anything from 0 to value set by `setCaptive` alt syntax. A non zero value means `captive`."
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/captiveNum"
        },
        "configuration": {
            "label": "captiveNum",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "This command is used as a keyword inside a `switch` structure to define a value case.\n**IMPORTANT**: \nThis command **must** be written and used inside a `switch` construct, never stored in a variable, otherwise its behaviour is not guaranteed - see {{Link|https://foxhound.international/arma-3-sqf-grammar.html}} for further explanation.",
            "examples": [
                {
                    "text": "```sqf\n\nswitch (_condition) do\n{\n\tcase 1: { hint \"1\" };\n\tcase 2: { hint \"2\" };\n\tdefault { hint \"default\" };\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "b",
                            "description": "`Anything`"
                        }
                    ],
                    "outline": "`case` b",
                    "returns": "[Switch Type](https://community.bistudio.com/wiki/Switch%20Type)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/case"
        },
        "configuration": {
            "label": "case",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "Processes code when an [exception](https://community.bistudio.com/wiki/Exception%20handling) is thrown in a `try` block. The exception caught can be found in the __exception_ variable.",
            "examples": [
                {
                    "text": "```sqf\ntry { throw \"invalid argument\" } catch {hint str _exception};\n```"
                },
                {
                    "text": "```sqf\n123 try { if (_this != 123) throw \"invalid argument\" } catch { hint str _exception };\n```"
                },
                {
                    "text": "The correct usage of shorthand alt syntax:\n\n```sqf\ntry {\n\tif (a > b) throw \"Error: some error\"; // OK\n\t// the command argument is static\n} catch {\n\thint str _exception;\n};\n\ntry {\n\t_someFunc = {\n\t\t// ...\n\t};\n\tif (a > b) throw (call _someFunc); // NOT OK\n\t// the command argument is dynamic\n\t// _someFunc is called first to get the value regardless of (a > b) outcome\n} catch {\n\thint str _exception;\n};\n\ntry {\n\t_someFunc = {\n\t\t// ...\n\t};\n\tif (a > b) then { throw (call _someFunc) }; /// OK\n\t// the command argument is dynamic\n\t// _someFunc is only called when (a > b) is true\n} catch {\n\thint str _exception;\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "tryBlock",
                            "description": "[Exception Type](https://community.bistudio.com/wiki/Exception%20handling)"
                        },
                        {
                            "name": "code",
                            "description": "`Code`"
                        }
                    ],
                    "outline": "tryBlock `catch` code",
                    "returns": "`Anything`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/catch"
        },
        "configuration": {
            "label": "catch",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "Returns the current state of a `CT_CHECKBOX` control.",
            "examples": [
                {
                    "text": "```sqf\n_checked = cbChecked _myCheckBox;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control ",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`cbChecked` control",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/cbChecked"
        },
        "configuration": {
            "label": "cbChecked",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the current state of a `CT_CHECKBOX` control. Use `**\"CheckedChanged\"**` control event handler with it.",
            "examples": [
                {
                    "text": "```sqf\n_myCheckBox cbSetChecked true;\n```"
                },
                {
                    "text": "```sqf\n_disp = findDisplay 46 createDisplay \"RscDisplayEmpty\";\n_chk = _disp ctrlCreate [\"RscCheckBox\", -1];\n_chk cbSetChecked true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control ",
                            "description": "`Control`"
                        },
                        {
                            "name": "state ",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "control `cbSetChecked` state",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/cbSetChecked"
        },
        "configuration": {
            "label": "cbSetChecked",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "The ceil value of x.",
            "examples": [
                {
                    "text": "```sqf\nceil 5.25; // Result is 6\n```"
                },
                {
                    "text": "```sqf\nceil -5.25; // Result is -5\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "x",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`ceil`  x",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ceil"
        },
        "configuration": {
            "label": "ceil",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `Array` of `Boolean`s in format [enabledChat, enabledVoN] for the given channel. For more information about enabling/disabling of chat channels see `enableChannel`.\n{{{!}} class{{=}}\"wikitable\" style{{=}}\"text-align: center\"\n! colspan{{=}}\"16\" {{!}} [channel ID](https://community.bistudio.com/wiki/Channel%20IDs) number correspondence\n{{!}}-\n{{!}} Global\n{{!}} Side\n{{!}} Command\n{{!}} Group\n{{!}} Vehicle\n{{!}} Direct\n{{!}} Custom1\n{{!}} Custom2\n{{!}} Custom3\n{{!}} Custom4\n{{!}} Custom5\n{{!}} Custom6\n{{!}} Custom7\n{{!}} Custom8\n{{!}} Custom9\n{{!}} Custom10\n{{!}}-\n{{!}} 0\n{{!}} 1\n{{!}} 2\n{{!}} 3\n{{!}} 4\n{{!}} 5\n{{!}} 6\n{{!}} 7\n{{!}} 8\n{{!}} 9\n{{!}} 10\n{{!}} 11\n{{!}} 12\n{{!}} 13\n{{!}} 14\n{{!}} 15\n{{!}}}",
            "examples": [
                {
                    "text": "```sqf\n_isGlobalChatEnabled = (channelEnabled 0) select 0; // check if user can use text on global channel\n```"
                },
                {
                    "text": "```sqf\n_isGlobalVoiceEnabled = (channelEnabled 0) select 1; // check if user can use the VoN on global channel\n```"
                },
                {
                    "text": "```sqf\n(channelEnabled 0) params [\"_isGlobalChatEnabled\", \"_isGlobalVoiceEnabled\"]; // sets both variables\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "channelID",
                            "description": "`Number` - [Channel ID](https://community.bistudio.com/wiki/Channel%20IDs) (see description)"
                        }
                    ],
                    "outline": "`channelEnabled` channelID",
                    "returns": "`Array` - in format [enabledChat, enabledVoN]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/channelEnabled"
        },
        "configuration": {
            "label": "channelEnabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks whether cheats are enabled (whether the designers' version is running).",
            "examples": [
                {
                    "text": "```sqf\n_enabled = cheatsEnabled;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`cheatsEnabled`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/cheatsEnabled"
        },
        "configuration": {
            "label": "cheatsEnabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks if the given AI feature is currently enabled.",
            "examples": [
                {
                    "text": "```sqf\n_featureUsed = checkAIFeature \"AwareFormationSoft\";\n```"
                },
                {
                    "text": "```sqf\n_autotargetOn = bob checkAIFeature \"AUTOTARGET\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "feature",
                            "description": "`String` - can be one of:\n* `**\"AwareFormationSoft\"**`\n* `**\"CombatFormationSoft\"**`\n* AI skill - see [disableAI - Syntax 1](https://community.bistudio.com/wiki/disableAI#Syntax_1) (since Arma 3 v1.96)"
                        }
                    ],
                    "outline": "`checkAIFeature` feature",
                    "returns": "`Boolean` - `true` if is enabled"
                },
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit to test AI feature for"
                        },
                        {
                            "name": "feature",
                            "description": "`String` - `disableAI` / `enableAI` feature"
                        }
                    ],
                    "outline": "unit `checkAIFeature` feature",
                    "returns": "`Boolean` - `true` if is enabled"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/checkAIFeature"
        },
        "configuration": {
            "label": "checkAIFeature",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "{{{!}} class=\"wikitable float-right\"\n! style=\"width: 50%\" {{!}} Affected by\n! Not affected by\n{{!}}-\n{{!}}\n* [terrain grid](https://community.bistudio.com/wiki/getTerrainGrid)\n* obstacles\n* particles\n<span style=\"font-size: .9em\">(with <syntaxhighlight lang=\"cpp\" inline>blockAIVisibility = 1</syntaxhighlight>)</span>\n{{!}}\n* [daylight](https://community.bistudio.com/wiki/time)\n* `distance`\n* `overcast`\n* `fog`\n{{!}}}\nChecks if one position is visible from another position and how much.\n\n**NOTE**: Particles that have `**blockAIVisibility**` set to 1 will influence the result, but will never make `checkVisibility` return 0; an extremely small number will be returned instead.",
            "examples": [
                {
                    "text": "```sqf\nprivate _canSee = [objNull, \"VIEW\"] checkVisibility [eyePos player, eyePos unit1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "ignore",
                            "description": "`Object` - object to exclude from calculations"
                        },
                        {
                            "name": "LOD",
                            "description": "`String` - level of details to use. Possible values are: `**\"FIRE\"**`, `**\"VIEW\"**`, `**\"GEOM\"**`, `**\"IFIRE\"**`, and {{GVI|arma3|2.02"
                        },
                        {
                            "name": "ignore2",
                            "description": "`Object` - (Optional, default `objNull`) second object to exclude from calculations"
                        },
                        {
                            "name": "beg",
                            "description": "`Array` - start position in format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL)"
                        },
                        {
                            "name": "end",
                            "description": "`Array` - end position in format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL)"
                        }
                    ],
                    "outline": "[ignore, LOD, ignore2] `checkVisibility` [beg, end]",
                    "returns": "`Number` - how much end position is visible to start position in range 0..1, where 1 is fully visible."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/checkVisibility"
        },
        "configuration": {
            "label": "checkVisibility",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Pre-defined variable for the civilian [side](https://community.bistudio.com/wiki/Side).\n\nWhen used in a `format` statement (<sqf inline>hint format [\"%1\", civilian]), the string returned is `**\"CIV\"**`.",
            "examples": [
                {
                    "text": "[SQS](https://community.bistudio.com/wiki/SQS%20Syntax):\n<sqs>? side _unit == civilian : hint \"This is a civilian unit!\"</sqs>"
                },
                {
                    "text": "[SQF](https://community.bistudio.com/wiki/SQF%20Syntax):\n\n```sqf\n\nif (side _unit == civilian) then\n{\n\thint \"This is a civilian unit!\";\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`civilian`",
                    "returns": "`Side`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/civilian"
        },
        "configuration": {
            "label": "civilian",
            "grammarType": "reserved-literal"
        }
    },
    {
        "documentation": {
            "description": "Returns short name of location. For config class name, see `configName`",
            "examples": [
                {
                    "text": "```sqf\n_shortName = className myLocation;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "location",
                            "description": "`Location`"
                        }
                    ],
                    "outline": "`className` location",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/className"
        },
        "configuration": {
            "label": "className",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Clears the value of the given entity's [attribute](https://community.bistudio.com/wiki/Eden_Editor%3A_Entity_Attributes) in [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor). An attribute is identified by its `**property**` (`**data**` when it is engine-drive attribute) value in config. For the list of all attributes with their properties, see [Setting Attributes](https://community.bistudio.com/wiki/Eden_Editor%3A_Setting_Attributes%23Attributes).\n\n**IMPORTANT**: Attributes are available only within the Eden Editor workspace. You cannot access them in scenario preview or exported scenario!",
            "examples": [
                {
                    "text": "```sqf\n0 clear3DENAttribute \"name\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "[Eden Entity](https://community.bistudio.com/wiki/Eden%20Entity) or [Eden ID](https://community.bistudio.com/wiki/Eden%20ID)"
                        },
                        {
                            "name": "attribute",
                            "description": "`String` - attribute property"
                        }
                    ],
                    "outline": "entity `clear3DENAttribute`  attribute",
                    "returns": "`Boolean` - `true` on success"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/clear3DENAttribute"
        },
        "configuration": {
            "label": "clear3DENAttribute",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Deletes inventory from mission.sqm of given units. Effect is not immediately visible, only when previewing the inventory resets to default.",
            "examples": [
                {
                    "text": "```sqf\nclear3DENInventory get3DENSelected \"Object\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entities",
                            "description": "`Array` of [Eden Entity](https://community.bistudio.com/wiki/Eden%20Entity) or [Eden ID](https://community.bistudio.com/wiki/Eden%20ID)"
                        }
                    ],
                    "outline": "`clear3DENInventory`  entities",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/clear3DENInventory"
        },
        "configuration": {
            "label": "clear3DENInventory",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes all items from backpack of a unit.",
            "examples": [
                {
                    "text": "```sqf\nclearAllItemsFromBackpack player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`clearAllItemsFromBackpack` unit",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/clearAllItemsFromBackpack"
        },
        "configuration": {
            "label": "clearAllItemsFromBackpack",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes all backpacks from ammo box (or any general weapon holder container).",
            "examples": [
                {
                    "text": "```sqf\nclearBackpackCargo myBox;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "box",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`clearBackpackCargo` box",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/clearBackpackCargo"
        },
        "configuration": {
            "label": "clearBackpackCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes all backpacks from the vehicle cargo space. MP synchronized.",
            "examples": [
                {
                    "text": "```sqf\nclearBackpackCargoGlobal jeepOne;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`clearBackpackCargoGlobal` unit",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/clearBackpackCargoGlobal"
        },
        "configuration": {
            "label": "clearBackpackCargoGlobal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes all force generators from world.\n{{Feature|afm}}",
            "examples": [
                {
                    "text": "```sqf\nclearForcesRTD;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`clearForcesRTD`",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/clearForcesRTD"
        },
        "configuration": {
            "label": "clearForcesRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes all icons from group.",
            "examples": [
                {
                    "text": "```sqf\nclearGroupIcons (group player);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group`"
                        }
                    ],
                    "outline": "`clearGroupIcons`  group",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/clearGroupIcons"
        },
        "configuration": {
            "label": "clearGroupIcons",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes all items from ammo box (or any general weapon holder container).",
            "examples": [
                {
                    "text": "```sqf\nclearItemCargo myBox;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "box",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`clearItemCargo` box",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/clearItemCargo"
        },
        "configuration": {
            "label": "clearItemCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes all items from ammo box (or any general weapon holder container). It also removes vests and uniforms.",
            "examples": [
                {
                    "text": "```sqf\nclearItemCargoGlobal _ammoBox;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "box",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`clearItemCargoGlobal` box",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/clearItemCargoGlobal"
        },
        "configuration": {
            "label": "clearItemCargoGlobal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes all items from ammo box (or any general weapon holder container)",
            "examples": [
                {
                    "text": "```sqf\nclearItemPool jeepOne;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "box",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`clearItemPool` box",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/clearItemPool"
        },
        "configuration": {
            "label": "clearItemPool",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Remove all magazines from the given vehicle's magazine cargo space.",
            "examples": [
                {
                    "text": "```sqf\nclearMagazineCargo _truck;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicleName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`clearMagazineCargo` vehicleName",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/clearMagazineCargo"
        },
        "configuration": {
            "label": "clearMagazineCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes all magazines from the vehicle cargo space. MP synchronized.",
            "examples": [
                {
                    "text": "```sqf\nclearMagazineCargoGlobal jeepOne;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - vehicle or ammo box"
                        }
                    ],
                    "outline": "`clearMagazineCargoGlobal`  object",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/clearMagazineCargoGlobal"
        },
        "configuration": {
            "label": "clearMagazineCargoGlobal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes all magazines from the magazine pool, of which the player may choose in the following missions. Available in campaigns only.",
            "examples": [
                {
                    "text": "```sqf\nclearMagazinePool;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`clearMagazinePool`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/clearMagazinePool"
        },
        "configuration": {
            "label": "clearMagazinePool",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Clear the current overlay.\n**NOTE**: Some Old Editor Command",
            "examples": [
                {
                    "text": "```sqf\nclearOverlay _map,;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`clearOverlay` map",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/clearOverlay"
        },
        "configuration": {
            "label": "clearOverlay",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Clean up the content of radio protocol history.",
            "examples": [
                {
                    "text": "```sqf\nclearRadio;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`clearRadio`",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/clearRadio"
        },
        "configuration": {
            "label": "clearRadio",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Remove all weapons from the given vehicle's weapon cargo space.",
            "examples": [
                {
                    "text": "```sqf\nclearWeaponCargo _truck;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicleName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`clearWeaponCargo` vehicleName",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/clearWeaponCargo"
        },
        "configuration": {
            "label": "clearWeaponCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes all weapons from the vehicle cargo space. MP synchronized.",
            "examples": [
                {
                    "text": "```sqf\nclearWeaponCargoGlobal jeepOne;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`clearWeaponCargoGlobal` unit",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/clearWeaponCargoGlobal"
        },
        "configuration": {
            "label": "clearWeaponCargoGlobal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Remove all weapons from the weapon pool, of which the player may choose in the following missions. Available in campaigns only.",
            "examples": [
                {
                    "text": "```sqf\nclearWeaponPool;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`clearWeaponPool`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/clearWeaponPool"
        },
        "configuration": {
            "label": "clearWeaponPool",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the [ machine network ID](https://community.bistudio.com/wiki/Multiplayer_Scripting%23Machine_network_ID%20) of the client executing the command.",
            "examples": [
                {
                    "text": "```sqf\nprivate _myNetworkId = clientOwner;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`clientOwner`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/clientOwner"
        },
        "configuration": {
            "label": "clientOwner",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Closes the currently active dialog with exit code. It does not instantly close the dialog but does it on next simulation cycle. Most common exit codes are:\n```cpp\n#define IDC_OK\t\t1 // emulate \"OK\" button\n#define IDC_CANCEL\t2 // emulate \"Cancel\" button\n```",
            "examples": [
                {
                    "text": "```sqf\ncloseDialog 2;\n```"
                },
                {
                    "text": "```sqf\n\n#define IDC_CANCEL 2\ncloseDialog IDC_CANCEL;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "exitcode",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`closeDialog`  exitcode",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/closeDialog"
        },
        "configuration": {
            "label": "closeDialog",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Closes given display with exit code. It does not instantly close the display but does it on next simulation cycle. Most common exit codes are:\n```cpp\n#define IDC_OK\t\t1 // emulate \"OK\" button\n#define IDC_CANCEL\t2 // emulate \"Cancel\" button\n```\n**IMPORTANT**: Sometimes when one display is opened on top of another display the previous display may not close properly; some display EHs such as \"onUnload\" may never fire.\nUse this command to manually handle such displays.",
            "examples": [
                {
                    "text": "```sqf\n_display closeDisplay 1;\n```"
                },
                {
                    "text": "```sqf\n\n#define IDC_OK 1\n_display closeDisplay IDC_OK;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "display",
                            "description": "`Display`"
                        },
                        {
                            "name": "exitCode",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "display `closeDisplay` exitCode",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/closeDisplay"
        },
        "configuration": {
            "label": "closeDisplay",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Closes the current overlay without committing. \n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`closeOverlay` map",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/closeOverlay"
        },
        "configuration": {
            "label": "closeOverlay",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Collapse the object tree.\n**NOTE**: Some Old Editor Command",
            "examples": [
                {
                    "text": "```sqf\ncollapseObjectTree _map,;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`collapseObjectTree` map",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/collapseObjectTree"
        },
        "configuration": {
            "label": "collapseObjectTree",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Execute a block of code in which all Eden Editor operations will be recorded as one history step. For example creating an entity, setting its attributes and then connections would normally be recorded as three different steps. Calling them all within single **collect3DENHistory** block will group them together and the user will need to undo only once to revert the changes.\n\n{{Feature|informative|In order to only change the 2nd or 3rd parameter of the alternative syntax use `nil` as the preceding parameters.}}\nSome useful icons are:\n<spoiler text=\"Show texture paths\">\n* `**\"\\a3\\3den\\data\\cfg3den\\history\\addtolayer_ca.paa\"**`\n* `**\"\\a3\\3den\\data\\cfg3den\\history\\changeattributes_ca.paa\"**`\n* `**\"\\a3\\3den\\data\\cfg3den\\history\\changeseat_ca.paa\"**`\n* `**\"\\a3\\3den\\data\\cfg3den\\history\\connectitems_ca.paa\"**`\n* `**\"\\a3\\3den\\data\\cfg3den\\history\\create_ca.paa\"**`\n* `**\"\\a3\\3den\\data\\cfg3den\\history\\createcomment_ca.paa\"**`\n* `**\"\\a3\\3den\\data\\cfg3den\\history\\deleteitems_ca.paa\"**`\n* `**\"\\a3\\3den\\data\\cfg3den\\history\\disconnectitems_ca.paa\"**`\n* `**\"\\a3\\3den\\data\\cfg3den\\history\\makenewlayer_ca.paa\"**`\n* `**\"\\a3\\3den\\data\\cfg3den\\history\\missionnew_ca.paa\"**`\n* `**\"\\a3\\3den\\data\\cfg3den\\history\\moveitems_ca.paa\"**`\n* `**\"\\a3\\3den\\data\\cfg3den\\history\\multipleoperations_ca.paa\"**`\n* `**\"\\a3\\3den\\data\\cfg3den\\history\\pasteitems_ca.paa\"**`\n* `**\"\\a3\\3den\\data\\cfg3den\\history\\removefromlayer_ca.paa\"**`\n* `**\"\\a3\\3den\\data\\cfg3den\\history\\rotateitems_ca.paa\"**`\n* `**\"\\a3\\3den\\data\\cfg3den\\history\\scaleitems_ca.paa\"**`",
            "examples": [
                {
                    "text": "```sqf\ncollect3DENHistory \n{\n\t_logic = create3DENEntity [\"Logic\", \"Logic\", position player];\n\tadd3DENConnection [\"Sync\", [_logic], player];\n}; // Creates a logic and connects it to player in one history step.\n```"
                },
                {
                    "text": "```sqf\n[\"Create Entity\", \"B_Soldier_F\", \"a3\\3den\\data\\cfg3den\\history\\create_ca.paa\"] collect3DENHistory \n{\n\tcreate3DENEntity [\"Object\",\"B_Soldier_F\", screenToWorld [0.5,0.5]];\n};\n```"
                },
                {
                    "text": "```sqf\n\n[nil, nil, \"a3\\3den\\data\\cfg3den\\history\\moveitems_ca.paa\"] collect3DENHistory \n{\n\tcreate3DENEntity [\"Object\",\"B_Soldier_F\", screenToWorld [0.5,0.5]];\n}; // Change only the icon\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "code",
                            "description": "`Code` - code that is executed in **[Unscheduled Environment](https://community.bistudio.com/wiki/Scheduler%23Unscheduled_Environment)**"
                        }
                    ],
                    "outline": "`collect3DENHistory` code",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "text",
                            "description": "`String` - text of the entry that is added to the history list"
                        },
                        {
                            "name": "tooltip",
                            "description": "`String` - (Optional, default \"Batch Change\" ([localized](https://community.bistudio.com/wiki/isLocalized))) - tooltip of the entry"
                        },
                        {
                            "name": "icon",
                            "description": "`String` - (Optional, default \"a3\\3den\\data\\cfg3den\\history\\multipleoperations_ca.paa\") - path to the icon that is displayed left of the _text_. **Must not start with a `**\\**`!**"
                        },
                        {
                            "name": "code",
                            "description": "`Code` - code that is executed in **[Unscheduled Environment](https://community.bistudio.com/wiki/Scheduler%23Unscheduled_Environment)**"
                        }
                    ],
                    "outline": "[text, tooltip, icon] `collect3DENHistory` code",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/collect3DENHistory"
        },
        "configuration": {
            "label": "collect3DENHistory",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the current position of a helicopter's collective pitch control.\n* 0: fully lowered\n* 1: fully raised \n{{Feature|afm}}",
            "examples": [
                {
                    "text": "```sqf\n_collective = collectiveRTD vehicle player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "helicopterRTD",
                            "description": "`ObjectRTD` - helicopter"
                        }
                    ],
                    "outline": "`collectiveRTD` helicopterRTD",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/collectiveRTD"
        },
        "configuration": {
            "label": "collectiveRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the object, given object has collision disabled with and whether or not returned object has also collision disabled with given object.",
            "examples": [
                {
                    "text": "```sqf\nprivate _collisionInfo = collisionDisabledWith _tank;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "obj",
                            "description": "`Object` - given object"
                        }
                    ],
                    "outline": "`collisionDisabledWith` obj",
                    "returns": "`Array` in format [other, mutual], where:\n* other: `Object` - the object, _obj_ has collision disabled with, or `objNull`\n* mutual: `Boolean` - `true` if _other_ has also disabled collision with _obj_, `false` otherwise"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/collisionDisabledWith"
        },
        "configuration": {
            "label": "collisionDisabledWith",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns combat behaviour of unit or group. To set unit or group behaviour see `setCombatBehaviour`. The behaviour is one of:",
            "examples": [
                {
                    "text": "```sqf\n\nunit1 setCombatBehaviour \"CARELESS\";\ncombatBehaviour unit1; // \"CARELESS\"\n\n```"
                },
                {
                    "text": "```sqf\n\ngroup unit1 setCombatBehaviour \"SAFE\";\ncombatBehaviour group unit1; // \"SAFE\"\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitOrGroup",
                            "description": "`Object` or `Group` - AI unit or group"
                        }
                    ],
                    "outline": "`combatBehaviour` unitOrGroup",
                    "returns": "`String` - unit behaviour - one of:\n{{Columns|2|\n* \"CARELESS\"\n* \"SAFE\"\n* \"AWARE\"\n* \"COMBAT\"\n* \"STEALTH\"\n* \"ERROR\" - when not available\n}}"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/combatBehaviour"
        },
        "configuration": {
            "label": "combatBehaviour",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the combat mode of the given AI [ group](https://community.bistudio.com/wiki/Group%20). See `setCombatMode` for more information about combat modes.",
            "examples": [
                {
                    "text": "```sqf\nif (combatMode _grp1 == \"BLUE\") then {_grp1 setCombatMode \"GREEN\"};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group` or `Object` - if the argument is unit `Object`, unit's current group is used."
                        }
                    ],
                    "outline": "`combatMode` group",
                    "returns": "`String` - one of:\n* \"BLUE\"\n* \"GREEN\"\n* \"WHITE\"\n* \"YELLOW\"\n* \"RED\"\n* \"ERROR\""
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/combatMode"
        },
        "configuration": {
            "label": "combatMode",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Orders an artillery unit to fire a burst on the given position (via the radio).",
            "examples": [
                {
                    "text": "```sqf\nMortar commandArtilleryFire [[3000, 120, 1000], \"8Rnd_82mm_Mo_shells\", 3];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "position",
                            "description": "`Array` format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL)"
                        },
                        {
                            "name": "type",
                            "description": "`String` - magazine class name from [CfgMagazines](https://community.bistudio.com/wiki/Arma_3%3A_CfgMagazines) (case sensitive)."
                        },
                        {
                            "name": "rounds",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "unit `commandArtilleryFire` [position, type, rounds]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/commandArtilleryFire"
        },
        "configuration": {
            "label": "commandArtilleryFire",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Types text to the command radio channel. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see `remoteExec`)\n\n**IMPORTANT**: The unit must have an [assigned](https://community.bistudio.com/wiki/assignItem) radio item (such as **\"ItemRadio\"**) to see or transmit the messages. A radio item must have the property <syntaxhighlight lang=\"cpp\" inline>simulation = \"ItemRadio\";</syntaxhighlight> in its [[CfgWeapons_Config_Reference#simulation.3D.22Weapon.22|CfgWeapons config]].",
            "examples": [
                {
                    "text": "```sqf\n_soldierOne commandChat \"Show this text\";\n```"
                },
                {
                    "text": "```sqf\n[playerSide, \"HQ\"] commandChat \"Do this! That's an order!\";\n```"
                },
                {
                    "text": "[[File:xChat.jpg|right]]\n\n```sqf\n\ndriver vehicle player sideChat \"sideChat\";\ndriver vehicle player globalChat \"globalChat\";\ndriver vehicle player groupChat \"groupChat\";\nvehicle player vehicleChat \"vehicleChat\";\ndriver vehicle player commandChat \"commandChat\";\ndriver vehicle player customChat [1, \"customChat\"];\nsystemChat \"systemChat\";\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit transmitting message"
                        },
                        {
                            "name": "chatText",
                            "description": "`String` - message to transmit"
                        }
                    ],
                    "outline": "unit `commandChat` chatText",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "side",
                            "description": "`Side` - side to which the message will be seen"
                        },
                        {
                            "name": "identity",
                            "description": "`String` - class name of one of the identities in CfgHQIdentities. Possible identities in Arma 3 are:\n{{Columns|2|\n* \"Base\"\n* \"HQ\"\n* \"PAPA_BEAR\"\n* \"AirBase\"\n* \"BLU\"\n* \"OPF\"\n* \"IND\"\n* \"IND_G\"\n}}"
                        },
                        {
                            "name": "chatText",
                            "description": "`String` - message to transmit"
                        }
                    ],
                    "outline": "[side, identity] `commandChat` chatText",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/commandChat"
        },
        "configuration": {
            "label": "commandChat",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "In Operation Flashpoint it returns the commander of a vehicle. Since Armed Assault it returns the primary observer. The commander of a vehicle can be found with `effectiveCommander`.",
            "examples": [
                {
                    "text": "```sqf\nmoveOut commander _tank;\n```"
                },
                {
                    "text": "Detect if player is in commander turret of a vehicle:\n\n```sqf\n_isVehicleCommander = player isEqualTo commander objectParent player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - vehicle"
                        }
                    ],
                    "outline": "`commander`  vehicle",
                    "returns": "`Object` - the unit sitting in the commander place is returned. If vehicle is not a vehicle but a person, the person is returned."
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/commander"
        },
        "configuration": {
            "label": "commander",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Order the given unit to fire on the given target (via the radio).\nIf the target is `objNull`, the unit is ordered to fire on its current target (set with `doTarget` or `commandTarget`).",
            "examples": [
                {
                    "text": "```sqf\n_ESoldier1 commandFire _WSoldier1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object` or `Array`"
                        },
                        {
                            "name": "target",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "unitName `commandFire` target",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/commandFire"
        },
        "configuration": {
            "label": "commandFire",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Order the given unit(s) to follow another from his own group (_via_ radio).\nIt can also be used to resume unit formation after e.g `doStop`.",
            "examples": [
                {
                    "text": "```sqf\n_soldier1 commandFollow _soldier2;\n```"
                },
                {
                    "text": "```sqf\n(units group _leader - [_leader]) commandFollow _leader; // returns all the units (but the leader) to formation\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` or `Array` of `Object`s"
                        },
                        {
                            "name": "unitLead",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "unit `commandFollow` unitLead",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/commandFollow"
        },
        "configuration": {
            "label": "commandFollow",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Orders a unit to process command defined by `FSM` file (_via_ the radio).",
            "examples": [
                {
                    "text": "```sqf\n_soldierOne commandFSM [\"move.fsm\", position player, player];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object` or `Array`"
                        },
                        {
                            "name": "fsmFile",
                            "description": "`String`"
                        },
                        {
                            "name": "position",
                            "description": "`Array` format `Position`"
                        },
                        {
                            "name": "target",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "unitName `commandFSM` [fsmFile, position, target]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/commandFSM"
        },
        "configuration": {
            "label": "commandFSM",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Orders one or multiple units to get out from the vehicle (via the radio). Same as `doGetOut` with latter being silent. \n**NOTE**: \n* Works for both AI and player entities\n* AI unit gets back in - unless is under player command or combined with other sqf commands (`orderGetIn` false, `allowGetIn` false or `leaveVehicle`)\n* Ignores vehicle's lock state - unlike [[Arma 3: Actions#Eject|action \"Eject\"]] and `moveOut`\n* AI waits for execution until vehicle has stopped/is no longer flying (unclear if any timeout exists for order to be discarded) - unlike [[Arma 3: Actions#Eject|action \"Eject\"]] and `moveOut`\n* Plays the vehicle's position's get out animation (same as [[Arma 3: Actions#Eject|action \"Eject\"]]) - unlike `moveOut`\n* When execute for multiple units, it waits till the action is completed, before the next to take his turn (same as [[Arma 3: Actions#Eject|action \"Eject\"]]) - unlike `moveOut`\n* AI gets back into formation afterwards\n* Works only on alive units - unlike [[Arma 3: Actions#Eject|action \"Eject\"]] (one after another) or `moveOut` (instantly)\n* Does not work on [unconscious](https://community.bistudio.com/wiki/setUnconscious) units - unless the AI is under player command. Unlike `moveOut` or [[Arma 3: Actions#Eject|action \"Eject\"]] (but one after another)",
            "examples": [
                {
                    "text": "```sqf\ncommandGetOut _unitOne;\n```"
                },
                {
                    "text": "```sqf\ncommandGetOut [_unitOne,_unitTwo];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit(s)",
                            "description": "`Object` or `Array` of `Object`s"
                        }
                    ],
                    "outline": "`commandGetOut` unit(s)",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/commandGetOut"
        },
        "configuration": {
            "label": "commandGetOut",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the name of the topmost commanding menu or \"\" if the menu is closed. For action menu visibility check see `isActionMenuVisible`. See {{Link|#Notes}} for Arma 2/Arma 3 structure.",
            "examples": [
                {
                    "text": "```sqf\n\nwaitUntil { sleep 0.1; commandingMenu == \"RscStatus\" };\nhint \"Press 4, I'm bleeding !\";\n\n```"
                },
                {
                    "text": "```sqf\nif (commandingMenu != \"\") then { hint \"Command menu is opened\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`commandingMenu`",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/commandingMenu"
        },
        "configuration": {
            "label": "commandingMenu",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Order the given unit(s) to move to the given location (via the radio). Exactly the same as `doMove`, except this command displays a radio message. The command will not put a visible waypoint marker unlike when move command is given via commanding menu.",
            "examples": [
                {
                    "text": "```sqf\n_soldier1 commandMove getMarkerPos \"Marker1\";\n```"
                },
                {
                    "text": "```sqf\n[_soldier1, _soldier2] commandMove getMarkerPos \"Marker1\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object` or `Array` of `Object`s"
                        },
                        {
                            "name": "position",
                            "description": "`Array` format `Position`"
                        }
                    ],
                    "outline": "unitName `commandMove`  position",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/commandMove"
        },
        "configuration": {
            "label": "commandMove",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sends the audio message to the command radio channel. The message is defined in CfgRadio in the [[Description.ext|description.ext]] file or config radio protocol. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see `remoteExec`).\n**IMPORTANT**: \nThe unit must have an [assigned](https://community.bistudio.com/wiki/assignItem) radio item (such as **\"ItemRadio\"**) to see or transmit the messages.\nA radio item must have the property <syntaxhighlight lang=\"cpp\" inline>simulation = \"ItemRadio\";</syntaxhighlight> in its [[CfgWeapons_Config_Reference#simulation.3D.22Weapon.22|CfgWeapons config]].\n\n**NOTE**: When transmitting unit gets killed, transmission will be interrupted. However when receiving unit gets killed, the transmission continues to play.",
            "examples": [
                {
                    "text": "```sqf\n_soldierOne commandRadio \"messageOne\";\n```"
                },
                {
                    "text": "```sqf\nplayer commandRadio configName selectRandom (\"true\" configClasses (configFile >> \"CfgRadio\"));\n```"
                },
                {
                    "text": "```sqf\n[west, \"Base\"] commandRadio configName selectRandom (\"true\" configClasses (configFile >> \"CfgRadio\"));\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit to transmit"
                        },
                        {
                            "name": "radioName",
                            "description": "`String` - class name from CfgRadio"
                        }
                    ],
                    "outline": "unit `commandRadio` radioName",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "side",
                            "description": "`Side` - side to which the transmission will be played"
                        },
                        {
                            "name": "identity",
                            "description": "`String` - class name of one of the identities in CfgHQIdentities. Possible identities in Arma 3 are:\n{{Columns|3|\n* \"Base\"\n* \"HQ\"\n* \"PAPA_BEAR\"\n* \"AirBase\"\n* \"BLU\"\n* \"OPF\"\n* \"IND\"\n* \"IND_G\"\n}}"
                        },
                        {
                            "name": "radioName",
                            "description": "`String` - class name from CfgRadio"
                        }
                    ],
                    "outline": "[side, identity] `commandRadio` radioName",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/commandRadio"
        },
        "configuration": {
            "label": "commandRadio",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Order the given unit(s) to stop via radio. A stop command will never finish, the unit(s) will never be ready.",
            "examples": [
                {
                    "text": "```sqf\ncommandStop _soldier1;\n```"
                },
                {
                    "text": "```sqf\ncommandStop [_soldier1, _soldier2];\n```"
                },
                {
                    "text": "```sqf\ncommandStop (units player);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Object` or `Array` of `Object`s"
                        }
                    ],
                    "outline": "`commandStop`  target",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/commandStop"
        },
        "configuration": {
            "label": "commandStop",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Orders the given unit or a group of units to suppress the given position or target (with radio messages, see `doSuppressiveFire` if you don't want messages). \n* When an `Array` of units is passed as param, only units from the same `Group` as the first unit in array are considered. \n* The unit (units) starts firing at the given target or position random amount of shots (exact formula unknown, but seems to depend on amount of ammo unit has) after which it stops. \n* `currentCommand` shows `**\"Suppress\"**` and there is no way of stopping unit before it completes random amount of rounds. \n* If position is passed as target param, it stays fixed. \n* If object is passed as target param, it depends on what kind of object. If it is considered a proper target by the unit, it is tracked by the unit dynamically. If it is not, the position gets obtained via `getPosWorld`, which could be different from [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) of the object, and it is fixed even if the target is able to change position later.",
            "examples": [
                {
                    "text": "```sqf\n_soldier commandSuppressiveFire [1869.508,5760.962,0.000];\n```"
                },
                {
                    "text": "```sqf\n_soldier commandSuppressiveFire cursorTarget;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` or `Array` - a single unit or array of units"
                        },
                        {
                            "name": "target",
                            "description": "`Object` or `Array` - actual target or position of the target in format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL)"
                        }
                    ],
                    "outline": "unit `commandSuppressiveFire` target",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/commandSuppressiveFire"
        },
        "configuration": {
            "label": "commandSuppressiveFire",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Order the given unit(s) to target the given target (via the radio). Command given to the player, puts a red square with words Target and Distance on player's HUD at target location. If player in vehicle and has radar facilities, it also adds target marker to the radar.",
            "examples": [
                {
                    "text": "```sqf\n_ESoldier1 commandTarget _WSoldier1;\n```"
                },
                {
                    "text": "```sqf\nplayer commandTarget [ted, bill];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "target",
                            "description": "`Object` or `Array` of `Object`s"
                        }
                    ],
                    "outline": "unit `commandTarget` target",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/commandTarget"
        },
        "configuration": {
            "label": "commandTarget",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Orders the unit(s) to watch the given position or target (via the radio). Use `objNull` as the target to order a unit to stop watching a position/target.",
            "examples": [
                {
                    "text": "```sqf\n_soldierOne commandWatch markerPos \"MarkerMoveOne\";\n```"
                },
                {
                    "text": "```sqf\n[s1, s2] commandWatch player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "units",
                            "description": "`Object` or `Array`"
                        },
                        {
                            "name": "position",
                            "description": "`Array` format `Position`"
                        }
                    ],
                    "outline": "units `commandWatch` position",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "units",
                            "description": "`Object` or `Array`"
                        },
                        {
                            "name": "target",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "units `commandWatch` target",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/commandWatch"
        },
        "configuration": {
            "label": "commandWatch",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Defines a comment. See {{Link|SQF Syntax#Comments}} to learn more about comments.\n{{Feature|warning|\nThis command is evaluated during execution, and as such is infinitely slower than other SQF comment methods (<sqf inline>// comment or <sqf inline>/* comment */) which get preprocessed and do not exist at runtime).\nSee [SQF Syntax](https://community.bistudio.com/wiki/SQF%20Syntax) for additional documentation on comments.\n}}\n**NOTE**: \nThis command is only used to place comments in unpreprocessed codes, such as trigger On Activation field, object init field, etc.\nAlternatively, one can use a plain string followed by a semicolon as a way to comment; e.g <sqf inline>\"Some comment\";.",
            "examples": [
                {
                    "text": "In a preprocessed SQF script (e.g. when doing <sqf inline>execVM \"myScript.sqf\")\n\n```sqf\n\ncomment \"This is a commented line\";\t\t// bad\n\"This is a commented line\";\t\t\t\t// slightly better\n// This is a commented line\t\t\t\t// perfect\n\n```"
                },
                {
                    "text": "In an object init field (in editor):\n\n```sqf\n\ncomment \"This comment works\";\n\"This comment works too\";\n// This doesn't work\n/* This doesn't work either */\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "text",
                            "description": "`String` - the comment"
                        }
                    ],
                    "outline": "`comment` text",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/comment"
        },
        "configuration": {
            "label": "comment",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Commit the current overlay. \n**NOTE**: Some Old Editor Command",
            "examples": [
                {
                    "text": "```sqf\ncommitOverlay _map,;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`commitOverlay` map",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/commitOverlay"
        },
        "configuration": {
            "label": "commitOverlay",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns all items (attachments) that can be mounted on the given weapon.",
            "examples": [
                {
                    "text": "```sqf\n\ncompatibleItems \"arifle_Katiba_GL_F\"; // [\"optic_Nightstalker\",\"optic_tws\",\"optic_tws_mg\",\"optic_NVS\", ...]\n\n```"
                },
                {
                    "text": "```sqf\n\ncompatibleItems [\"arifle_Katiba_GL_F\", \"PointerSlot\"]; // [\"acc_flashlight\",\"acc_flashlight_broken\",\"acc_pointer_IR\", ...]\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "weapon",
                            "description": "`String` - weapon class name"
                        }
                    ],
                    "outline": "`compatibleItems` weapon",
                    "returns": "`Array` of `String`s - compatible attachments"
                },
                {
                    "parameters": [
                        {
                            "name": "weapon",
                            "description": "`String` - weapon class name"
                        },
                        {
                            "name": "slot",
                            "description": "`String` - class name of the slot (defined under **WeaponSlotsInfo** class in weapon config)"
                        }
                    ],
                    "outline": "`compatibleItems` [weapon, slot]",
                    "returns": "`Array` of `String`s - compatible attachments"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/compatibleItems"
        },
        "configuration": {
            "label": "compatibleItems",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns all magazines that can be loaded in the given weapon.",
            "examples": [
                {
                    "text": "```sqf\ncompatibleMagazines \"arifle_Katiba_GL_F\";\n```"
                },
                {
                    "text": "```sqf\ncompatibleMagazines [\"arifle_Katiba_GL_F\", \"this\"];\n```"
                },
                {
                    "text": "```sqf\ncompatibleMagazines [\"arifle_Katiba_GL_F\", \"EGLM\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "weapon",
                            "description": "`String` - weapon class name"
                        }
                    ],
                    "outline": "`compatibleMagazines` weapon",
                    "returns": "`Array` of `String`s - all magazines that can be loaded in **any muzzle** of the given weapon."
                },
                {
                    "parameters": [
                        {
                            "name": "weapon",
                            "description": "`String` - weapon class name"
                        },
                        {
                            "name": "muzzle",
                            "description": "`String` - muzzle name"
                        }
                    ],
                    "outline": "`compatibleMagazines` [weapon, muzzle]",
                    "returns": "`Array` of `String`s - all magazines that can be loaded in the given muzzle of the given weapon."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/compatibleMagazines"
        },
        "configuration": {
            "label": "compatibleMagazines",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Compiles `String` expression into `Code`.",
            "examples": [
                {
                    "text": "```sqf\n\n_string = \"a = a + 1\";\n_code = compile _string;\ncall _code;\n\n```"
                },
                {
                    "text": "```sqf\n\nhint str compile \"a = b\";\n// result: { a = b }\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "expression",
                            "description": "`String` - expression to be compiled"
                        }
                    ],
                    "outline": "`compile` expression",
                    "returns": "`Code` - compiled expression"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/compile"
        },
        "configuration": {
            "label": "compile",
            "grammarType": "string-compiler"
        }
    },
    {
        "documentation": {
            "description": "Compiles an expression / takes an existing `HashMap` and makes it final, preventing it from being modified or overwritten (by [[=]] assignation, `publicVariable`, `set` or any other command).\n**NOTE**: This feature is only available in the retail version of Arma 3.",
            "examples": [
                {
                    "text": "```sqf\n\n_myCode = compileFinal \"a = a + 1\";\ncall _myCode;\n \n// repeated compile won't have any effect\n_myCode = compileFinal \"a = a + 2\";\n\n```"
                },
                {
                    "text": "```sqf\n\n// duplicate code will be final as well\n_myDuplicateCode = _myCode;\n\n// an alternative is to copy str'd code (since Arma 3 v2.02)\nprivate _myNonFinalCopy = compile toString _myCode;\n\n```"
                },
                {
                    "text": "```sqf\n\n// since {{arma3}} v2.14\nprivate _readonlyCode = compileFinal { systemChat \"Hello World!\"; };\nprivate _readonlyHashMap = compileFinal _myHashMap;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "expression",
                            "description": "`String`, {{GVI|arma3|2.14"
                        }
                    ],
                    "outline": "`compileFinal` expression",
                    "returns": "`Code` or `HashMap`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/compileFinal"
        },
        "configuration": {
            "label": "compileFinal",
            "grammarType": "string-compiler"
        }
    },
    {
        "documentation": {
            "description": "This command is an alias for `**`compile`(Final) (prefixHeader + `preprocessFileLineNumbers` path)**`. See description of `preprocessFileLineNumbers` for more details.\n\nIn addition, this command can also compile [SQF Bytecode](https://community.bistudio.com/wiki/SQF%20Bytecode) files, which can reduce compilation time.",
            "examples": [
                {
                    "text": "```sqf\n\ncompileScript [\"a3\\props_f_enoch\\military\\equipment\\scripts\\meteo.sqf\"];\n// has the same functionality as \ncompile preprocessFileLineNumbers \"a3\\props_f_enoch\\military\\equipment\\scripts\\meteo.sqf\";\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "path",
                            "description": "`String` - path to script file"
                        },
                        {
                            "name": "final",
                            "description": "`Boolean` - (Optional, default `false`) compile final, see `compileFinal`"
                        },
                        {
                            "name": "prefixHeader",
                            "description": "`String` - (Optional, default \"\") value added at the beginning of the file"
                        }
                    ],
                    "outline": "`compileScript` [path, final, prefixHeader]",
                    "returns": "`Code`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/compileScript"
        },
        "configuration": {
            "label": "compileScript",
            "grammarType": "file-compiler"
        }
    },
    {
        "documentation": {
            "description": "Checks whether the given FSM is completed. The FSM handle is the number returned by the `execFSM` command.",
            "examples": [
                {
                    "text": "```sqf\n_completed = completedFSM _fsmHandle;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "fsmHandle",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`completedFSM` fsmHandle",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/completedFSM"
        },
        "configuration": {
            "label": "completedFSM",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates a [Structured Text](https://community.bistudio.com/wiki/Structured%20Text) by joining the given [ structured](https://community.bistudio.com/wiki/Structured%20Text%20) or [ plain](https://community.bistudio.com/wiki/String%20) text arguments.",
            "examples": [
                {
                    "text": "```sqf\nhint composeText [\"Image: \", image \"\\a3\\Data_f\\Flags\\flag_Altis_co.paa\"];\n```"
                },
                {
                    "text": "```sqf\n\nhint composeText [\"line1\", \"<br/>\", \"line2\"];\t\t// result displayed in one line\nhint composeText [\"line1\", lineBreak, \"line2\"];\t// result displayed in two lines\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "arguments",
                            "description": "`Array` of `String` and/or [Structured Text](https://community.bistudio.com/wiki/Structured%20Text) - use [Structured Text](https://community.bistudio.com/wiki/Structured%20Text) where necessary (see _Example 2_)"
                        }
                    ],
                    "outline": "`composeText` arguments",
                    "returns": "[Structured Text](https://community.bistudio.com/wiki/Structured%20Text)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/composeText"
        },
        "configuration": {
            "label": "composeText",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array of config entries which meet criteria in condition code. Command iterates through all available config sub classes of the given config class. Current looked at config is stored in _x variable (similar to alternative `count` command implementation). Condition has to return `true` in order for the looked at config to be added to the resulting array. Slightly faster than `configProperties`, but doesn't account for config properties or inherited entries.\n**IMPORTANT**:  \n* The condition code passed to `configClasses` should only be used for **simple filter expressions** and nothing more\n* Do not use `**\"`isClass` [_x](https://community.bistudio.com/wiki/Magic%20Variables%23x)\"**` in the condition. The engine does this check already\n\n\n* Arma 3 v2.02 brought specific engine optimisations for the following conditions:\n** `**\"`true`\"**` \n** `**\"`getNumber` ([_x](https://community.bistudio.com/wiki/Magic%20Variables%23x) >> 'scope') > 0\"**`",
            "examples": [
                {
                    "text": "collect all CfgVehicles configs:\n\n```sqf\n_configs = \"true\" configClasses (configFile >> \"CfgVehicles\");\n```"
                },
                {
                    "text": "Return all classes that can transport 10 and more soldiers:\n\n```sqf\n_transporters = \"getNumber (_x >> 'transportSoldier') >= 10\" configClasses (configFile >> \"CfgVehicles\");\n```"
                },
                {
                    "text": "Return all classes that inherit from 'RscText':\n\n```sqf\nhint str (\"inheritsFrom _x == (configFile >> 'RscText')\" configClasses configFile);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "condition",
                            "description": "`String`"
                        },
                        {
                            "name": "config",
                            "description": "`Config`"
                        }
                    ],
                    "outline": "condition `configClasses` config",
                    "returns": "`Array` - array of `Config`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/configClasses"
        },
        "configuration": {
            "label": "configClasses",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return root of config entries hierarchy.",
            "examples": [
                {
                    "text": "```sqf\n_isMyClassActive = isClass (configFile >> \"CfgPatches\" >> \"MyClass\");\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`configFile`",
                    "returns": "`Config`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/configFile"
        },
        "configuration": {
            "label": "configFile",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns hierarchy of the given config class. Just like with `inheritsFrom`, only complete config classes are supported (before {{GVI|arma3|2.14",
            "examples": [
                {
                    "text": "```sqf\n\n_hierarchy = configHierarchy (configFile >> \"CfgVehicles\" >> \"Car\");\n// [bin\\config.bin, bin\\config.bin/CfgVehicles, bin\\config.bin/CfgVehicles/Car]\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "configClass",
                            "description": "`Config` - target config class"
                        }
                    ],
                    "outline": "`configHierarchy` configClass",
                    "returns": "`Array` - array of parent configs"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/configHierarchy"
        },
        "configuration": {
            "label": "configHierarchy",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns name of config entry.",
            "examples": [
                {
                    "text": "```sqf\n_name = configName (configFile >> \"CfgVehicles\"); // result is \"CfgVehicles\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "config",
                            "description": "`Config`"
                        }
                    ],
                    "outline": "`configName` config",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/configName"
        },
        "configuration": {
            "label": "configName",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "A non-existing `Config`.\n\n**IMPORTANT**: \nUnlike other null values (`objNull`, `grpNull`, etc), `configNull` returns `true` when compared to itself.\n\n```sqf\n\nconfigNull == configNull;\t\t\t\t\t\t\t// returns true\nisNull configNull;\t\t\t\t\t\t\t\t\t// returns true\nconfigNull isEqualTo configNull;\t\t\t\t\t// returns true\nconfigNull == configFile >> \"ANonExistentEntry\";\t// returns true\n\n```",
            "examples": [
                {
                    "text": "```sqf\n_config = missionNamespace getVariable [\"myConfig\", configNull];\n```"
                },
                {
                    "text": "```sqf\nstr configNull; // returns \"\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`configNull`",
                    "returns": "`Config`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/configNull"
        },
        "configuration": {
            "label": "configNull",
            "grammarType": "null-literal"
        }
    },
    {
        "documentation": {
            "description": "Returns config path of the provided object.",
            "examples": [
                {
                    "text": "```sqf\nconfigOf player; // returns bin\\config.bin/CfgVehicles/B_W_Soldier_TL_F\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`configOf` object",
                    "returns": "`Config`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/configOf"
        },
        "configuration": {
            "label": "configOf",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array of config entries which meet criteria in condition code. Command iterates through available classes and config properties for given config entry.\nCurrent looked at config is stored in _x variable (similar to alternative `count` command implementation).\nCondition has to return `true` in order for the looked at property to be added to the resulting array. This command is a bit slower than `configClasses` but allows to access inherited entries.",
            "examples": [
                {
                    "text": "```sqf\n_configs = configProperties [configFile >> \"CfgVehicles\" >> \"O_Truck_02_box_F\"];\n```"
                },
                {
                    "text": "```sqf\n_configs = configProperties [configFile >> \"RscText\", \"true\", true];\n```"
                },
                {
                    "text": "Get all hitpoints of a truck:\n\n```sqf\n\n_hitPoints = [];\n_hitPointsCfgs = configProperties [\n\tconfigFile >> \"CfgVehicles\" >> \"O_Truck_02_box_F\" >> \"HitPoints\", \n\t\"true\", \n\ttrue\n];\nhint str _hitPointsCfgs;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "config",
                            "description": "`Config` - config entry to search"
                        },
                        {
                            "name": "condition",
                            "description": "`String` - (Optional, default \"true\") expression, which if returns `true`, adds current property to result\n**IMPORTANT**: \n* The condition code passed to `configProperties` should only be used for **simple filter expressions** and nothing more.\n* Since **(Arma 3)** the following conditions are optimised for performance:\n** `**\"true\"**` (omitted condition)\n** `**\"isClass _x\"**`\n** `**\"isClass _x &amp;&amp; (...)\"**`"
                        },
                        {
                            "name": "inherit",
                            "description": "`Boolean` - (Optional, default `true`) include inherited properties"
                        }
                    ],
                    "outline": "`configProperties` [config, condition, inherit]",
                    "returns": "`Array` - array of `Config`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/configProperties"
        },
        "configuration": {
            "label": "configProperties",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array of addons (`CfgPatches`) in which the given config class is defined.",
            "examples": [
                {
                    "text": "```sqf\n_addons = configSourceAddonList (configFile >> \"CfgVehicles\" >> \"Man\"); // returns [\"A3_Data_F\", \"A3_Characters_F\", \"A3_Data_F_Curator\", \"A3_Air_F_Heli\"]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "config",
                            "description": "`Config`"
                        }
                    ],
                    "outline": "`configSourceAddonList` config",
                    "returns": "`Array` of `String`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/configSourceAddonList"
        },
        "configuration": {
            "label": "configSourceAddonList",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns modDir of the mod that given config class was loaded from.",
            "examples": [
                {
                    "text": "```sqf\nconfigSourceMod (configFile >> \"CfgVehicles\" >> \"Heli_Transport_04_base_F\"); // returns \"heli\"\n```"
                },
                {
                    "text": "```sqf\nconfigSourceMod (configFile >> \"CfgVehicles\" >> \"Car\"); // returns \"A3\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "config",
                            "description": "`Config`"
                        }
                    ],
                    "outline": "`configSourceMod` config",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/configSourceMod"
        },
        "configuration": {
            "label": "configSourceMod",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array of mods (CfgMods) in which the given config class is defined.",
            "examples": [
                {
                    "text": "```sqf\n_mods = configSourceModList (configFile >> \"CfgVehicles\" >> \"Man\");\nhint str _mods; // [\"A3\",\"curator\",\"heli\"]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "config",
                            "description": "`Config`"
                        }
                    ],
                    "outline": "`configSourceModList` config",
                    "returns": "`Array` of `String`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/configSourceModList"
        },
        "configuration": {
            "label": "configSourceModList",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets for which `Side` the entity becomes a \"confirmed hostile\" target - a target that becomes highlighted red on the sensors display.",
            "examples": [
                {
                    "text": "```sqf\nvehicle player confirmSensorTarget [blufor, true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "side",
                            "description": "`Side`"
                        },
                        {
                            "name": "isConfirmed",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "vehicle `confirmSensorTarget` [side, isConfirmed]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/confirmSensorTarget"
        },
        "configuration": {
            "label": "confirmSensorTarget",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Connect person with UAV terminal to UAV unit. UAV Terminal item needs to be assigned to GPS slot. In MP the connection is handled `local`ly, therefore it is possible for multiple MP clients to connect to the same UAV. However, each UAV can only have one connection to a terminal per MP client, so if UAV is already connected to another terminal on the same MP client, this new connection will fail.",
            "examples": [
                {
                    "text": "```sqf\nbool = player connectTerminalToUAV uav1;\n```"
                },
                {
                    "text": "```sqf\nplayer connectTerminalToUAV objNull; //disconnect\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "person",
                            "description": "`Object`"
                        },
                        {
                            "name": "uav",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "person `connectTerminalToUAV` uav",
                    "returns": "`Boolean` - `true` on success"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/connectTerminalToUAV"
        },
        "configuration": {
            "label": "connectTerminalToUAV",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Connects the client to the provided server.\n**NOTE**: \n* only works on the [Main Menu](https://community.bistudio.com/wiki/Arma%203%3A%20Main%20Menu).\n* must be executed from [ UI context](https://community.bistudio.com/wiki/isUIContext%20), such as _onButtonDown_ or similar events (see [User Interface Event Handlers](https://community.bistudio.com/wiki/User%20Interface%20Event%20Handlers)).",
            "examples": [
                {
                    "text": "```sqf\nconnectToServer [\"192.168.0.2\", 2302, \"test\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "ip",
                            "description": "`String`"
                        },
                        {
                            "name": "port",
                            "description": "`Number`"
                        },
                        {
                            "name": "password",
                            "description": "`String` - \"\" if no password"
                        }
                    ],
                    "outline": "`connectToServer` [ip, port, password]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/connectToServer"
        },
        "configuration": {
            "label": "connectToServer",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Skips current loop iteration and continues with the next one.",
            "examples": [
                {
                    "text": "```sqf\n\n// prints 0, 1, 3\nfor \"_i\" from 0 to 3 do \n{\n\tif (_i == 2) then { continue };\n\tsystemChat str _i;\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`continue`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/continue"
        },
        "configuration": {
            "label": "continue",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "Skips the current loop iteration, continues with the next one and returns the given value.",
            "examples": [
                {
                    "text": "```sqf\n\n// results in [2, \"TEST\", 4]\nprivate _result = [1, 2, 3] apply {\n\tif (_x == 2) then {\n\t\tcontinueWith \"TEST\";\n\t} else {\n\t\t_x + 1;\n\t};\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "return",
                            "description": "`Anything` - value to be returned when iteration is skipped"
                        }
                    ],
                    "outline": "`continueWith` return",
                    "returns": "`Anything`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/continueWith"
        },
        "configuration": {
            "label": "continueWith",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "A non-existing `Control`. To compare non-existent objects use `isNull` or `isEqualTo` (see examples).",
            "examples": [
                {
                    "text": "```sqf\nif (_myCtrl isEqualTo controlNull) then { hint \"_myCtrl is null!\"; };\n```"
                },
                {
                    "text": "```sqf\ncontrolNull == controlNull;\t\t\t// returns false\nisNull controlNull;\t\t\t\t\t\t// returns true\ncontrolNull isEqualTo controlNull;\t\t// returns true\n```"
                },
                {
                    "text": "```sqf\nstr controlNull; // No control\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`controlNull`",
                    "returns": "`Control`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/controlNull"
        },
        "configuration": {
            "label": "controlNull",
            "grammarType": "null-literal"
        }
    },
    {
        "documentation": {
            "description": "Returns a child control with specified idc from a controls group",
            "examples": [
                {
                    "text": "```sqf\n_control = _controlsGroup controlsGroupCtrl 101;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "ctrlgrp",
                            "description": "`Control`"
                        },
                        {
                            "name": "idc",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "ctrlgrp `controlsGroupCtrl` idc",
                    "returns": "`Control`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/controlsGroupCtrl"
        },
        "configuration": {
            "label": "controlsGroupCtrl",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "A getter for `disableConversation`.",
            "examples": [
                {
                    "text": "```sqf\nif (conversationDisabled soldier1) then { soldier1 disableConversation false };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`conversationDisabled` unit",
                    "returns": "`Boolean` - returns `true` if the status of `kbTell`'s _IsSpeaking_ for the given unit is `**> 0**`. See `disableConversation` for more info"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/conversationDisabled"
        },
        "configuration": {
            "label": "conversationDisabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return ANSI content of the (text) clipboard. If Unicode support is desired, see `forceUnicode`.",
            "examples": [
                {
                    "text": "```sqf\nhint copyFromClipboard;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`copyFromClipboard`",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/copyFromClipboard"
        },
        "configuration": {
            "label": "copyFromClipboard",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Copies ANSI text string to the clipboard. If Unicode support is desired, see `forceUnicode`.",
            "examples": [
                {
                    "text": "```sqf\ncopyToClipboard str _data;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "text",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`copyToClipboard` text",
                    "returns": "`Nothing`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/copyToClipboard"
        },
        "configuration": {
            "label": "copyToClipboard",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Copy the chain of waypoints from source to target group. The target group will start to process waypoints from the first one.",
            "examples": [
                {
                    "text": "```sqf\ngroup1 copyWaypoints group2;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "groupTo",
                            "description": "`Group`"
                        },
                        {
                            "name": "groupFrom",
                            "description": "`Group`"
                        }
                    ],
                    "outline": "groupTo `copyWaypoints` groupFrom",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/copyWaypoints"
        },
        "configuration": {
            "label": "copyWaypoints",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Cosine of a number, argument in degrees.",
            "examples": [
                {
                    "text": "```sqf\ncos 60; // returns 0.5\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "x",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`cos` x",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/cos"
        },
        "configuration": {
            "label": "cos",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Can be used to count:\n* The number of elements in an array (returns the already internally known array size)\n* The number of elements in an array matching the condition\n* The number of sub-entries in a config entry\n* {{GVI|arma3|1.28",
            "examples": [
                {
                    "text": "```sqf\ncount [0, 0, 1, 2]; // returns 4\ncount units group player; // returns number of units in player group\n```"
                },
                {
                    "text": "```sqf\nprivate _cnt = { _x == 4 } count [1, 9, 8, 3, 4, 4, 4, 5, 6]; // returns 3\n_cnt = { alive _x } count allUnits; // returns the number of alive units\n```"
                },
                {
                    "text": "```sqf\nprivate _cnt = count (configFile >> \"CfgVehicles\");\n```"
                },
                {
                    "text": "```sqf\nhint str count \"japa is the man!\"; // 16\n```"
                },
                {
                    "text": "```sqf\nif (count _myHashMap < 1) then { hint \"empty hashmap!\"; };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "value",
                            "description": "`Array`, `String`, `Config` or `HashMap`"
                        }
                    ],
                    "outline": "`count` value",
                    "returns": "`Number`"
                },
                {
                    "parameters": [
                        {
                            "name": "condition",
                            "description": "`Code` - condition that must return `true` for the tested element to be counted. The variable `**[_x](https://community.bistudio.com/wiki/Magic%20Variables%23x)**` will contain the currently tested element\n**Arma 3**: If array contains different data types, use `isEqualTo` instead of [[==]]!"
                        },
                        {
                            "name": "array",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "condition `count` array",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/count"
        },
        "configuration": {
            "label": "count",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Count how many units in the array are considered enemy to the given unit.",
            "examples": [
                {
                    "text": "```sqf\n_num = player countEnemy list _triggerOne;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        },
                        {
                            "name": "arrayName",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "unitName `countEnemy` arrayName",
                    "returns": "`Number`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/countEnemy"
        },
        "configuration": {
            "label": "countEnemy",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Count how many units in the array are considered friendly to the given unit.",
            "examples": [
                {
                    "text": "```sqf\n_num = player countFriendly list _triggerOne;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        },
                        {
                            "name": "arrayName",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "unitName `countFriendly` arrayName",
                    "returns": "`Number`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/countFriendly"
        },
        "configuration": {
            "label": "countFriendly",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns how many units in the given array belong to given side.",
            "examples": [
                {
                    "text": "```sqf\n_num = west countSide list _triggerOne;\n```"
                },
                {
                    "text": "```sqf\n_numCivPlayable = civilian countSide playableUnits;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "side",
                            "description": "`Side`"
                        },
                        {
                            "name": "array",
                            "description": "`Array` of `Object`s and/or `Group`s\n**NOTE**: If the object in passed array is a `Group`, the leader of the group will be counted."
                        }
                    ],
                    "outline": "side `countSide`  array",
                    "returns": "`Number`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/countSide"
        },
        "configuration": {
            "label": "countSide",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Count how many objects in the array are of given type. This command also works with parent classes like \"Air\", \"Tank\", and \"Car\". For a full class reference see [Classes](https://community.bistudio.com/wiki/CfgVehicles).",
            "examples": [
                {
                    "text": "```sqf\n_count = \"Tank\" countType list _triggerOne;\n```"
                },
                {
                    "text": "```sqf\n_count = \"B_medic_F\" countType units player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`String` - class type"
                        },
                        {
                            "name": "objects",
                            "description": "`Array` - array of `Object`s"
                        }
                    ],
                    "outline": "type `countType` objects",
                    "returns": "`Number`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/countType"
        },
        "configuration": {
            "label": "countType",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Count how many units in the array are unknown to the given unit.",
            "examples": [
                {
                    "text": "```sqf\n_num = player countUnknown list _triggerOne;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        },
                        {
                            "name": "arrayName",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "unitName `countUnknown` arrayName",
                    "returns": "`Number`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/countUnknown"
        },
        "configuration": {
            "label": "countUnknown",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Create new [Composition](https://community.bistudio.com/wiki/Eden_Editor%3A_Composition). To create individual entities, use `create3DENEntity`.",
            "examples": [
                {
                    "text": "```sqf\n\nmyComposition = create3DENComposition [\n\tconfigFile >> \"CfgGroups\" >> \"West\" >> \"BLU_F\" >> \"Infantry\" >> \"BUS_InfSquad\",\n\tscreenToWorld [0.5, 0.5]\n];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "configPath",
                            "description": "`Config` - path to `**CfgGroups**` class of a composition"
                        },
                        {
                            "name": "position",
                            "description": "`Array` in format `Position`"
                        }
                    ],
                    "outline": "`create3DENComposition` [configPath,  position]",
                    "returns": "`Array` of [Eden Entities](https://community.bistudio.com/wiki/Eden%20Entity)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/create3DENComposition"
        },
        "configuration": {
            "label": "create3DENComposition",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Create new [Eden Entity](https://community.bistudio.com/wiki/Eden%20Entity). Used for creating individual entities; to create a [composition](https://community.bistudio.com/wiki/Eden_Editor%3A_Composition) (e.g., infantry squad), use `create3DENComposition` and to create a [layer](https://community.bistudio.com/wiki/Eden_Editor%3A_Layer) use `add3DENLayer`.\n\nThis is the only way to add new editable entities to an [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor) scenario. Other 'create' commands like `createVehicle` or `createUnit` will still work, but the resulting entity will not be editable.",
            "examples": [
                {
                    "text": "```sqf\ndude1 = create3DENEntity [\"Object\", \"B_Soldier_F\", screenToWorld [0.5, 0.5]];\n```"
                },
                {
                    "text": "```sqf\ndude2 = group dude1 create3DENEntity [\"Object\", \"B_Soldier_AR_F\", screenToWorld [0.5, 0.5]];\n```"
                },
                {
                    "text": "```sqf\nmyMarker = create3DENEntity [\"Marker\", \"mil_warning\", getPosATL player];\n```"
                },
                {
                    "text": "```sqf\nmytrigger = create3DENEntity [\"Trigger\", \"EmptyDetectorArea10x10\", getPosATL player];\n```"
                },
                {
                    "text": "{{GVI|arma3|2.06"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`String` - can be \"Object\", \"Trigger\", \"Waypoint\", \"Logic\", \"Marker\" or {{GVI|arma3|2.14"
                        },
                        {
                            "name": "class",
                            "description": "`String` - entity class, defined in one of the following classes:\n* `**CfgVehicles**` - objects and logic entities\n* `**CfgNonAIVehicles**` - triggers\n* `**CfgWaypoint**` - waypoints\n* `**CfgMarkers**` - markers"
                        },
                        {
                            "name": "position",
                            "description": "`Array` format `Position`"
                        },
                        {
                            "name": "isEmpty",
                            "description": "`Boolean` - (Optional, default `false`) `true` to create vehicle without crew"
                        }
                    ],
                    "outline": "`create3DENEntity` [mode, class, position, isEmpty]",
                    "returns": "[Eden Entity](https://community.bistudio.com/wiki/Eden%20Entity)"
                },
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group` - group in which an AI character or waypoint is created.\n* When missing for AI characters, a new group is created for them\n* When missing for waypoints, an error is logged and nothing is created\n* When used on any other mode, it is ignored and the entity is created as usual"
                        },
                        {
                            "name": "mode",
                            "description": "`String` - can be \"Object\", \"Trigger\", \"Waypoint\", \"Logic\", \"Marker\" or {{GVI|arma3|2.14"
                        },
                        {
                            "name": "class",
                            "description": "`String` - entity class"
                        },
                        {
                            "name": "position",
                            "description": "`Array` format `Position`"
                        }
                    ],
                    "outline": "group `create3DENEntity` [mode, class, position]",
                    "returns": "[Eden Entity](https://community.bistudio.com/wiki/Eden%20Entity)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/create3DENEntity"
        },
        "configuration": {
            "label": "create3DENEntity",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates an agent of the given type. An agent does not have a group or leader or the standard soldier `FSM` associated with it - for instance, an enemy soldier spawned as an agent has limited AI and will do nothing when fired upon - which can be useful to limit the amount of AI processing being done in a mission with very large numbers of \"AI\". Animals are also commonly created as agents.\n**NOTE**: \n* Players assigned to an agent using `selectPlayer` will be able to control the agent, operate weapons and other actions, but will not be able to access their inventory using the gear screen.\n* To create objects of type `**\"Logic\"**`, use `createUnit`.",
            "examples": [
                {
                    "text": "```sqf\nprivate _agent = createAgent [\"B_Soldier_F\", getPosATL player, [], 0, \"NONE\"];\n```"
                },
                {
                    "text": "```sqf\nprivate _agent = createAgent [\"Snake_random_F\", ASLToAGL getPosASL player, [], 0, \"CAN_COLLIDE\"]; // Creates a snake at player's feet\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`String` - class from `CfgVehicles`"
                        },
                        {
                            "name": "position",
                            "description": "`Object` or `Array` format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) or [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) - desired placement position"
                        },
                        {
                            "name": "markers",
                            "description": "`Array` - if the markers array contains any markers, the position is randomly picked from array of given markers plus desired placement position. If any of the markers were given z coordinate with setMarkerPos, the vehicle will also be created at given z coordinate."
                        },
                        {
                            "name": "placement",
                            "description": "`Number` - placement radius, the unit is randomly place in a circle with this radius"
                        },
                        {
                            "name": "special",
                            "description": "`String` - one of:\n* `**\"NONE\"**` - will look for a suitable empty position near given position (subject to other placement params) before creating the agent\n* `**\"CAN_COLLIDE\"**` - creates the agent at given position (subject to other placement params), without checking if others objects can cross its 3D model"
                        }
                    ],
                    "outline": "`createAgent` [type, position, markers, placement, special]",
                    "returns": "`Object`"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/createAgent"
        },
        "configuration": {
            "label": "createAgent",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Instanciate a `Side` center. A `Side` center is required to be able to [create groups](https://community.bistudio.com/wiki/createGroup) of this side.\n\nCenters can only be created for `east`, `west`, `resistance`, `civilian` and `sideLogic` [sides](https://community.bistudio.com/wiki/Side).\n\nCreated sides must have their \"side-friendship\" defined with `setFriend`.\n\n{{Feature|informative|In Armed Assault and Arma 2, only [[Mission.sqm]]'s units side centers are created; e.g if no `resistance` unit has been placed in the editor you must use `createCenter` before being able to create a `resistance` group.}}\n\n**Arma 3**:  In Arma 3, centers for all sides are all created by the engine.",
            "examples": [
                {
                    "text": "```sqf\ncreateCenter east;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "side",
                            "description": "`Side`"
                        }
                    ],
                    "outline": "`createCenter` side",
                    "returns": "`Side`"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/createCenter"
        },
        "configuration": {
            "label": "createCenter",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates a dialog which is defined either in the mission's [[Description.ext|description.ext]], in the campaign's description.ext or in the global [[Resource.cpp/bin|resource.cpp]]. The given name has to be the class name used in one of these files. If another dialog is already opened, the desired dialog is created as a child dialog of the one already opened.\n\n**NOTE**: By default, displays created with `createDisplay` are rendered on top of dialogs created with `createDialog`. If _forceOnTop_ is set to `true`, the dialog will be rendered on top of displays.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _ok = createDialog \"RscDisplayGame\";\nif (!_ok) then { hint \"Dialog could not be opened!\" };\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "dialogName",
                            "description": "`String` - class name used in the description.ext, resource.cpp or config.cpp"
                        }
                    ],
                    "outline": "`createDialog`  dialogName",
                    "returns": "`Boolean` -  `true` when the dialog was created successfully"
                },
                {
                    "parameters": [
                        {
                            "name": "dialogName",
                            "description": "`String` - class name used in the description.ext, resource.cpp or config.cpp"
                        },
                        {
                            "name": "forceOnTop",
                            "description": "`Boolean` - (Optional, default `false`) if `true`, dialog will be rendered on top of displays"
                        }
                    ],
                    "outline": "`createDialog` [dialogName, forceOnTop]",
                    "returns": "`Display` - created dialog"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/createDialog"
        },
        "configuration": {
            "label": "createDialog",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates a link to the given diary entry.",
            "examples": [
                {
                    "text": "```sqf\n\n_diaryRec1 = player createDiaryRecord [\"Diary\", [\"Record 1\", \"We can not refer to the next record because it does not exist yet.\"]];\n_diaryRec2 = player createDiaryRecord [\"Diary\", [\"Record 2\", \"Go to \" + createDiaryLink [\"Diary\", _diaryRec1, \"record 1\"]]];\n_diaryRec3 = player createDiaryRecord [\"Diary\", [\"Record 3\", \"Go to \" + createDiaryLink [\"Diary\", _diaryRec2, \"record 2\"]]];\n\n```"
                },
                {
                    "text": "In this example, one can go to any next record.\n\n```sqf\n\nTAG_fnc_processDiaryLink = {\n\tprocessDiaryLink createDiaryLink [\"Diary\", _this, \"\"];\n};\nDiaryRec1 = player createDiaryRecord [\"Diary\", [\"Record 1\", \n\t\"Go to <execute expression='DiaryRec2 call TAG_fnc_processDiaryLink'>Record 2</execute>\"\n]];\nDiaryRec2 = player createDiaryRecord [\"Diary\", [\"Record 2\", \n\t\"Go to <execute expression='DiaryRec3 call TAG_fnc_processDiaryLink'>Record 3</execute>\"\n]];\nDiaryRec3 = player createDiaryRecord [\"Diary\", [\"Record 3\", \n\t\"Go to <execute expression='DiaryRec1 call TAG_fnc_processDiaryLink'>Record 1</execute>\"\n]];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "subject",
                            "description": "`String`"
                        },
                        {
                            "name": "record",
                            "description": "`Object`, `Task` or [Diary Record](https://community.bistudio.com/wiki/Diary%20Record)"
                        },
                        {
                            "name": "text",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`createDiaryLink` [subject, record, text]",
                    "returns": "`String` - empty string or a string similar to the result of <sqf inline>format [\"<log subject=\"\"%1\"\" record=\"\"%2\"\">%3</log>\", subject, processedRecordId, text]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/createDiaryLink"
        },
        "configuration": {
            "label": "createDiaryLink",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates a `Diary` entry. Supported tags and their parameters:{",
            "examples": [
                {
                    "text": "```sqf\nplayer createDiaryRecord [\"Diary\", [\"Intel\", \"Enemy base is on grid <marker name='enemyBase'>161170</marker>\"]]\n```"
                },
                {
                    "text": "```sqf\nplayer createDiaryRecord [\"Diary\", \"Information gathered.<br /><img image='wellDone_ca.paa' />\"]\n```"
                },
                {
                    "text": "```sqf\nplayer createDiaryRecord [\"Diary\", [\"Title\", \"Description\"], taskNull, \"\", false];\n```"
                },
                {
                    "text": "```sqf\n\nplayer createDiaryRecord [\n\t\"Diary\",\n\t[\"Font tag\", \"<font color='#7FFF00' size='30' face='TahomaB'>This will changed text size, colour and font</font>\"],\n\ttaskNull,\n\t\"\",\n\tfalse\n];\n\n```"
                },
                {
                    "text": "```sqf\n\nplayer createDiaryRecord [\n\t\"Diary\",\n\t[\"Image\", \"<img image='\\A3\\Ui_F_Curator\\Data\\Logos\\arma3_curator_artwork.jpg' width='500' height='800' />\"],\n\ttaskNull,\n\t\"\",\n\tfalse\n];\n\n```"
                },
                {
                    "text": "```sqf\nplayer createDiaryRecord [\"Diary\", [\"Linebreak\", \"Line1<br />Line2<br /><br />Line4\"], taskNull, \"\", false];\n```"
                },
                {
                    "text": "```sqf\nplayer createDiaryRecord [\"Diary\", [\"Execute\",\"<execute expression='hint \"\"Some code\"\";'>Some text</execute>\"], taskNull, \"\", false];\n```"
                },
                {
                    "text": "```sqf\nplayer createDiaryRecord [\"Diary\", [\"ExecuteClose\", \"<executeClose expression=\"\"hint 'Diary closed';\"\">Close Diary</executeClose>\"], taskNull, \"\", false];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "player",
                            "description": "`Object`"
                        },
                        {
                            "name": "subject",
                            "description": "`String`"
                        },
                        {
                            "name": "textInfo",
                            "description": "`String` or `Array` of `String`s - can be:\n* `String` - the record's content - its title will be empty\n* `Array` of `String`s - format [title, text, icon]:\n** title: `String`\n** text: `String`\n** {{GVI|arma3|2.10"
                        },
                        {
                            "name": "task",
                            "description": "`Task` - (Optional, default `taskNull`)"
                        },
                        {
                            "name": "taskState",
                            "description": "`String` - (Optional, default `**\"NONE\"**`) changes the state of the given task. Can be one of:\n{{Columns|3|\n* `**\"NONE\"**`\n* `**\"CREATED\"**`\n* `**\"ASSIGNED\"**`\n* `**\"SUCCEEDED\"**`\n* `**\"FAILED\"**`\n* `**\"CANCELED\"**`\n}}"
                        },
                        {
                            "name": "showTitle",
                            "description": "`Boolean` - (Optional, default `true`) whether or not to show title in the description section as well"
                        }
                    ],
                    "outline": "player `createDiaryRecord` [subject, textInfo, task, taskState, showTitle]",
                    "returns": "[Diary Record](https://community.bistudio.com/wiki/Diary%20Record)"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/createDiaryRecord"
        },
        "configuration": {
            "label": "createDiaryRecord",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates a new subject in the `Diary`.",
            "examples": [
                {
                    "text": "```sqf\n_index = player createDiarySubject [\"myPage\",\"My page\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "player",
                            "description": "`Object`"
                        },
                        {
                            "name": "subject",
                            "description": "`String`"
                        },
                        {
                            "name": "displayName",
                            "description": "`String` - the visible name"
                        },
                        {
                            "name": "picture",
                            "description": "`String` - (Optional, default `**\"\"**`) icon to display next to the subject. Can be set later with `setDiarySubjectPicture`. Similar to `lbSetPictureRight`."
                        }
                    ],
                    "outline": "player `createDiarySubject` [subject, displayName, picture]",
                    "returns": "`Number` - index of the entry that was added"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/createDiarySubject"
        },
        "configuration": {
            "label": "createDiarySubject",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates child display of given display and loads from \"resourceName\". The notable difference between `createDisplay` and `createDialog` is that with `createDisplay` the player would be able to move around while the display is shown.\n\nDisplays created with `createDisplay` or `createDialog` will take control of the mouse pointer and will close when user presses {{Controls|Esc}}.\n**Arma 3**: Since Arma 3 v1.50 `createDisplay` returns `Display` and will first look in [[Description.ext|description.ext]] for resourceName config, if not found, it will then look in main config.\n**NOTE**: If an _overlay_ is needed instead, use `cutRsc`.",
            "examples": [
                {
                    "text": "```sqf\nfindDisplay 46 createDisplay \"RscCredits\";\n```"
                },
                {
                    "text": "```sqf\n// creates an empty display\nprivate _emptyDisplay = findDisplay 46 createDisplay \"RscDisplayEmpty\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "parent",
                            "description": "`Display`"
                        },
                        {
                            "name": "resourceName",
                            "description": "`String` - custom display class defined in [[Description.ext|description.ext]] or existing display class from main config"
                        }
                    ],
                    "outline": "parent `createDisplay`  resourceName",
                    "returns": "`Display` (since {{GVI|arma3|1.50"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/createDisplay"
        },
        "configuration": {
            "label": "createDisplay",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Opens gear dialog for given unit.\n**NOTE**: `action` command can also be used:\n```sqf\nplayer action [\"Gear\", player];\n```",
            "examples": [
                {
                    "text": "```sqf\ncreateGearDialog [player];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "resource",
                            "description": "`String` - (Optional)"
                        }
                    ],
                    "outline": "`createGearDialog` [unit, resource]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/createGearDialog"
        },
        "configuration": {
            "label": "createGearDialog",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates a new `Group` for the given `Side`. Using this command if the group limit is reached will return `grpNull`. The new `Group` exists globally, but it's locality is where this command was executed.\n{{{!}} class=\"wikitable\" style=\"text-align: center\"\n! Game\n{{!}} **(Operation Flashpoint)**\n{{!}} **(Operation Flashpoint: Elite)**\n{{!}} **(Armed Assault)**\n{{!}} **(Arma 2)**\n{{!}} **(Arma 2: Operation Arrowhead)**\n{{!}} {{GVI|tkoh|1.00}}\n{{!}} **(Arma 3)**\n{{!}} **(Arma 3)**\n{{!}}-\n! Group auto-deletion\n{{!}} colspan=\"6\" {{!}} {{Icon|unchecked}}\n{{!}} colspan=\"2\" {{!}} {{Icon|checked}}\n{{!}}-\n! Group limit per side\n{{!}} 63\n{{!}} colspan=\"6\" {{!}} 144\n{{!}} 288\n{{!}}}\n\n{{Feature | important |\n* Groups can only be created for the `west`/`blufor`, `opfor`/`east`, `independent`/`resistance`, `civilian` and `sideLogic` sides - any other side will return `grpNull`\n* Before Arma 3, a `Side` [center](https://community.bistudio.com/wiki/createCenter) must exist before group creation (either by having editor-placed units or `createCenter` usage)\n}}\n\n**Arma 3**: \n* `createCenter` usage is not needed anymore as all centers are automatically created.\n* When the last unit leaves its group, the group usually gets immediately auto-deleted, regardless of its auto-deletion setting.",
            "examples": [
                {
                    "text": "```sqf\nprivate _group = createGroup east;\n```"
                },
                {
                    "text": "```sqf\nprivate _group = createGroup [east, true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "side",
                            "description": "`Side`"
                        }
                    ],
                    "outline": "`createGroup` side",
                    "returns": "`Group` - `grpNull` if the group limit is reached"
                },
                {
                    "parameters": [
                        {
                            "name": "side",
                            "description": "`Side`"
                        },
                        {
                            "name": "deleteWhenEmpty",
                            "description": "`Boolean` - `true` to [delete the group when empty](https://community.bistudio.com/wiki/deleteGroupWhenEmpty).\n* If set to `true`, forces a group to get deleted when empty - it does **not** prevent its deletion by other commands when set to `false`.\n* Deletion may take up to a minute after the last unit is removed."
                        }
                    ],
                    "outline": "`createGroup` [side, deleteWhenEmpty]",
                    "returns": "`Group` - `grpNull` if the group limit is reached"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/createGroup"
        },
        "configuration": {
            "label": "createGroup",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds a point guarded by the given side (scripted way of adding equivalent of \"GUARDED BY\" trigger in [Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor)). A closest AI group in the given side with assigned \"GUARD\" waypoint will attempt to secure this guard point. The actual guarded position is determined via the following rules:\n* Given \"position\" is always considered. It could be `Object`, `Group`, [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position3D](https://community.bistudio.com/wiki/Position%23Introduction). In every case, z coordinate will be ignored and point will be placed on nearest surface.\n* If \"objectMapID\" is not negative, the position of the object with the given ID is used (Overrides \"position\"). -1 to ignore this argument. z of the object position will be intact.\n* If the given \"vehicle\" is valid, the position of the vehicle is extracted and guarded (Overrides both \"position\" and \"objectMapID\"). `objNull` to ignore. z of the vehicle position will be intact.\nTo be used with \"GUARD\" [waypoint](https://community.bistudio.com/wiki/setWaypointType).\n**NOTE**: To know how does the \"GUARD\" waypoint work, see [Waypoint:Guard](https://community.bistudio.com/wiki/Waypoint%3AGuard).",
            "examples": [
                {
                    "text": "```sqf\ncreateGuardedPoint [east, [0,0], -1, vehicle player];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "side",
                            "description": "`Side` - the side which will be guarding"
                        },
                        {
                            "name": "position",
                            "description": "`Object`, `Group`, [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position3D](https://community.bistudio.com/wiki/Position%23Introduction)"
                        },
                        {
                            "name": "objectMapID",
                            "description": "`Number` - static id of map object. -1 to ignore"
                        },
                        {
                            "name": "vehicle",
                            "description": "`Object` - vehicle to be used for position. `objNull` to ignore"
                        }
                    ],
                    "outline": "`createGuardedPoint` [side, position, objectMapID, vehicle]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/createGuardedPoint"
        },
        "configuration": {
            "label": "createGuardedPoint",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates a new empty `HashMap`.",
            "examples": [
                {
                    "text": "```sqf\nprivate _myHashMap = createHashMap;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`createHashMap`",
                    "returns": "`HashMap`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/createHashMap"
        },
        "configuration": {
            "label": "createHashMap",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates a new `HashMap` and initializes it from a key-value pair array",
            "examples": [
                {
                    "text": "```sqf\ncreateHashMapFromArray [[\"a\", 1], [\"b\", 2], [\"c\", 3]];\n```"
                },
                {
                    "text": "```sqf\n[1, 2, 3, 4] createHashMapFromArray []; // returns [[1, <null>], [2, <null>], [4, <null>], [3, <null>]]\n```"
                },
                {
                    "text": "```sqf\n[1, 2, 3] createHashMapFromArray [\"one\", \"two\", \"three\", \"four\"]; // returns [[1, \"one\"], [2, \"two\"], [3, \"three\"]]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "keyN",
                            "description": "`HashMapKey`"
                        },
                        {
                            "name": "valueN",
                            "description": "`Anything`"
                        }
                    ],
                    "outline": "`createHashMapFromArray` [[key1, value1], [key2, value2]]",
                    "returns": "`HashMap`"
                },
                {
                    "parameters": [
                        {
                            "name": "keys",
                            "description": "`Array` of `HashMapKey`s"
                        },
                        {
                            "name": "values",
                            "description": "`Array` of `Anything`\n**NOTE**: Size of _keys_ and size of _values_ arrays do not need to be equal. Missing values will be filled with `nil`."
                        }
                    ],
                    "outline": "keys `createHashMapFromArray` values",
                    "returns": "`HashMap`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/createHashMapFromArray"
        },
        "configuration": {
            "label": "createHashMapFromArray",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Create a `HashMap` with an {{Link|https://en.wikipedia.org/wiki/Object-oriented_programming|Object-Oriented Programming}} behaviour.\n\nInside a object, Methods (if they are called correctly, either by engine or via [call - Syntax 3](https://community.bistudio.com/wiki/call#Syntax_3)) will have the objects instance inside the <sqf inline>_self variable.\n\nThe Destructor (\"#delete\" method) will be executed when the last reference to the objects variable gets deleted. (Except when the mission is ended and all variables are deleted at once)\n\n\n\nInheritance: HashMap objects support a simple form of Inheritance.\n\nIt behaves similar to the `merge` command with overwriteExisting enabled. Sub-class methods and properties with same name, overwrite their Base-class values.\n\nConstructor/Destructor/Clone methods will be merged together and executed in sequence.\n\nFlags entry will use overwrite behaviour.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _declaration = [\n\t[\"#flags\", [\"sealed\"]],\n\t[\"#create\", { hint \"Hello!\" }],\n\t[\"#clone\", { hint \"We were copied!\" }],\n\t[\"#delete\", { hint \"Goodbye\" }],\n\t[\"#str\", { \"My HashMap Object\" }],\n\t[\"Method\", { hint \"Method has been called\" }]\n];\n\nprivate _hashMapObject = createHashMapObject [_declaration];\t// hints \"Hello!\"\n_hashMapObject call [\"Method\"];\t\t\t\t\t\t\t\t\t// hints \"Method has been called\"\nhint str _hashMapObject;\t\t\t\t\t\t\t\t\t\t// hints \"My HashMap Object\"\nprivate _shallowCopy = _hashMapObject;\t\t\t\t\t\t\t// no hint\nprivate _deepCopy = +_hashMapObject;\t\t\t\t\t\t\t// hints \"We were copied!\"\n// at the end of the scope, _hashMapObject is deleted and hints \"Goodbye\"\n\n```"
                },
                {
                    "text": "Inheritance constructor/destructor/copy orderings: \n```sqf\n\nprivate _animalDeclaration = [\n\t[\"#type\", \"IAnimal\"],\n\t[\"#create\", { systemChat \"Animal Init\" }],\n\t[\"#clone\", { systemChat \"Animal Copied\" }],\n\t[\"#delete\", { systemChat \"Animal Bye\" }]\n];\n\nprivate _pigDeclaration = [\n\t[\"#base\", _animalDeclaration],\n\t[\"#type\", \"Pig\"],\n\t[\"#create\", { systemChat \"Pig Init\" }],\n\t[\"#clone\", { systemChat \"Pig Copied\" }],\n\t[\"#delete\", { systemChat \"Pig Bye\" }]\n];\n\nprivate _smolPigDeclaration = [\n\t[\"#base\", _pigDeclaration],\n\t[\"#type\", \"SmolPig\"],\n\t[\"#create\", { systemChat \"SmolPig Init\" }],\n\t[\"#clone\", { systemChat \"Smol Copied\" }],\n\t[\"#delete\", { systemChat \"Smol Bye\" }]\n];\n\nprivate _smolPigInstance = createHashMapObject [_smolPigDeclaration]; // prints \"Animal Init\", \"Pig Init\", \"SmolPig Init\"\nprivate _copy = +_smolPigInstance; // prints \"Animal Copied\", \"Pig Copied\", \"SmolPig Copied\"\n_copy = nil; // prints \"SmolPig Bye\", \"Pig Bye\", \"Animal Bye\"\n\n```"
                },
                {
                    "text": "Inheritance type checking:\n\n```sqf\n\nprivate _animalDeclaration = [\n\t[\"#type\", \"IAnimal\"],\n\t[\"FurType\", { \"None\" }] // default implementation\n];\n\nprivate _pigDeclaration = [\n\t[\"#base\", _animalDeclaration],\n\t[\"#type\", \"Pig\"],\n\t[\"FurType\", { \"Bristles\" }] // override the base class method\n];\n\nprivate _catDeclaration = [\n\t[\"#base\", _animalDeclaration],\n\t[\"#type\", \"Cat\"],\n\t[\"FurType\", { \"Hair\" }] // override the base class method\n];\n\nprivate _instance = createHashMapObject [selectRandom [_pigDeclaration, _catDeclaration]];\n\nif (\"IAnimal\" in (_instance get \"#type\")) then // check if a object instance is or inherits from a specific type\n{\n\t_instance call [\"FurType\"]; // now that we know it implements IAnimal, we know that \"FurType\" method will be present\n};\n\n```"
                },
                {
                    "text": "Destructor: \n```sqf\n\nprivate _temporaryVehicle = [\n\t[\"#create\", {\n\t\tparams [\"_vehicleType\", \"_vehiclePos\", \"_lifetimeSeconds\"]; // handle constructor arguments\n\t\tprivate _newVehicle = _vehicleType createVehicle _vehiclePos;\n\t\t_self set [\"MyVehicle\", _newVehicle]; // Store the vehicle inside the object for later\n\n\t\t// because _self is passed as parameter, it will be referenced by the spawned script until it ends.\n\t\t[_lifetimeSeconds, _self] spawn { params [\"_lifetimeSeconds\", \"_self\"]; sleep _lifetimeSeconds; };\n\t}],\n\t[\"#delete\", {\n\t\tdeleteVehicle (_self get \"MyVehicle\"); // delete the vehicle when we go away\n\t}],\n\t[\"MyVehicle\", objNull] // placeholder, this is not needed\n];\n\n// create a temporary RoadCone, at player position, that will delete itself after 5 seconds.\ncreateHashMapObject [_temporaryVehicle, [\"RoadCone_F\", getPos player, 5]];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "classDefinition",
                            "description": "`HashMap` or `Array` of `Array`s, format [name, value]:\n_name_ can be anything like any other `HashMap`, but it must be a `String` for it to be used like an OOP object method (see [call - Syntax 3](https://community.bistudio.com/wiki/call#Syntax_3)).\n\nSome special values, starting with `**#**`, are reserved and expect a specific _value_ type (they are all optional):\n* `**\"#create\"**`: `Code` - this is the hashmap object's constructor\n* `**\"#clone\"**`: `Code` - this is code happening when cloning is done on this hashmap object\n* `**\"#delete\"**`: `Code` - this is the hashmap object's destructor. It will always be executed inside `missionNamespace`.\n* `**\"#str\"**`: `Code` - code that is used to evaluate what is displayed when the `str` function is called on the object - **must** return `String`\n* `**\"#flags\"**`: `Array` of `String`s - case-_in_sensitive flags regarding this hashmap object\n** \"noCopy\": forbids copying, <sqf inline>+_hashMapObject will throw an error\n** \"sealed\": prevents from adding and removing any keys - key values can still be edited\n** \"unscheduled\": all methods (including `**#clone**` and `**#create**`) will be executed in [Scheduler - Unscheduled Environment|unscheduled environment](https://community.bistudio.com/wiki/Scheduler#Unscheduled_Environment|unscheduled_environment)\n* `**\"#base\"**`: `Array` or `HashMap` - declaration of base class for inheritance\n* `**\"#type\"**`: `Any` - can be used to give a object a \"type name\", on inheritance types will be merged into an `Array`\nNote that all entries beginning with `**#**` are reserved, the engine might use these internally without their use being documented."
                        },
                        {
                            "name": "constructorArguments",
                            "description": "`Anything` - (Optional, default `Nothing`) passed as <sqf inline>_this argument to the \"#create\" method."
                        }
                    ],
                    "outline": "`createHashMapObject` [classDefinition, constructorArguments]",
                    "returns": "`HashMap`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/createHashMapObject"
        },
        "configuration": {
            "label": "createHashMapObject",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates a location of the specified class and dimensions at the specified position.\nClasses are defined in `**CfgLocationTypes**`; for possible location types see [Location Types](https://community.bistudio.com/wiki/Location%23Location%20Types).\n\nThe alternative syntax allows to convert a non-editable (built-in) terrain location into an editable one, with the following restrictions:\n* it cannot be deleted (but can be `setType` to \"Invisible\" to hide it)\n* it cannot be moved",
            "examples": [
                {
                    "text": "```sqf\n_location = createLocation [\"NameVillage\", [4035,2151,10], 100, 100];\n```"
                },
                {
                    "text": "```sqf\n\n_location = createLocation [\"NameVillage\", [4035,2151,10], 30, 30];\n_location setText \"Player town\";\n\n```"
                },
                {
                    "text": "```sqf\n\nprivate _terrainLocation = nearestLocation [player, \"nameCity\"];\t// assuming it returns a built-in location\n_terrainLocation setType \"Invisible\";\t\t\t\t\t\t\t\t// does not do anything\nprivate _editableLocation = createLocation [_terrainLocation];\t\t// does the conversion\n_editableLocation setType \"Invisible\";\t\t\t\t\t\t\t\t// hides the location\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "className",
                            "description": "`String`"
                        },
                        {
                            "name": "position",
                            "description": "[Position2D](https://community.bistudio.com/wiki/Position%23Introduction), [Position3D](https://community.bistudio.com/wiki/Position%23Introduction) or `Object`"
                        },
                        {
                            "name": "sizeX",
                            "description": "`Number` - in meters"
                        },
                        {
                            "name": "sizeY",
                            "description": "`Number` - in meters"
                        }
                    ],
                    "outline": "`createLocation` [className, position, sizeX, sizeY]",
                    "returns": "`Location`"
                },
                {
                    "parameters": [
                        {
                            "name": "location",
                            "description": "`Location` - a terrain's location. If a scripted location is provided, it is simply returned"
                        }
                    ],
                    "outline": "`createLocation` [location]",
                    "returns": "`Location` - a script-editable location"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/createLocation"
        },
        "configuration": {
            "label": "createLocation",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates a new map marker at the given position. The marker will be created for every connected player as well as all JIP players. The marker name has to be unique; the command will be ignored if a marker with the given name already exists.\n\n**IMPORTANT**: \nThe marker will be visible only once at least `markerType` has been defined:\n\n```sqf\n\n_marker = createMarker [\"markername\", player]; // Not visible yet.\n_marker setMarkerType \"hd_dot\"; // Visible.\n```\n\n\n\n**NOTE**: If the marker position is given in 3D format, the `**z**`-coordinate is stored with the marker and will be used when the marker is passed to commands such as `createVehicle`, `createUnit`, `createAgent`, `createMine` or `setVehiclePosition`.\nWhen a marker is manually placed in the editor, `**z**` is always 0, which means the marker is placed on the ground. But when the player places a marker on the map in game, it is placed at sea level, so the `**z**`-coordinate of that marker is <sqf inline>-getTerrainHeightASL markerPos \"userMarker\";.",
            "examples": [
                {
                    "text": "```sqf\n_marker1 = createMarker [\"Marker1\", position player];\n```"
                },
                {
                    "text": "```sqf\n_marker2 = createMarker [\"Marker2\", player]; // since {{arma3}} 1.50\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "name",
                            "description": "`String` - the marker's name, used to reference the marker in scripts."
                        },
                        {
                            "name": "position",
                            "description": "`Array` or `Object` - [Position2D](https://community.bistudio.com/wiki/Position%23Introduction), [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) or `Object`. In case of an object, the object's **model centre**<nowiki/>'s [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) is used (see `getPosWorld`)"
                        },
                        {
                            "name": "channel",
                            "description": "`Number` - (Optional, default -1) the marker channel - see [Channel IDs](https://community.bistudio.com/wiki/Channel%20IDs) (for multiplayer)"
                        },
                        {
                            "name": "creator",
                            "description": "`Object` - (Optional, default `objNull`) the marker creator (for multiplayer)"
                        }
                    ],
                    "outline": "`createMarker` [name, position, channel, creator]",
                    "returns": "`String` - the marker's name or empty string if the marker name is not unique."
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/createMarker"
        },
        "configuration": {
            "label": "createMarker",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates a [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality) marker at the given position - the marker only exists on the machine that created it. The marker name has to be unique, if a marker with the given name exists, the command will be ignored. Use `deleteMarkerLocal` to delete a local marker.\n\n\nIf the position is given in 3D format, `**z**` coordinate is stored with the marker and will be used when marker is passed to commands like `createVehicle`, `createUnit`, `createAgent`, `createMine`, `setVehiclePosition` for example. However `getMarkerPos` and `markerPos` will always return 0 for `**z**`. \n\n**IMPORTANT**: Local markers have their own set of local commands \"xxMarkerxxLocal\" to work with. If you use global marker commands on a local marker, the local marker will become **global**.",
            "examples": [
                {
                    "text": "```sqf\n_marker = createMarkerLocal [\"Marker1\", position player];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "name",
                            "description": "`String`"
                        },
                        {
                            "name": "position",
                            "description": "`Array` or `Object` - format position: [Position2D](https://community.bistudio.com/wiki/Position%23Introduction), [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) or `Object` (object's model centre is used (see `getPosWorld`))"
                        },
                        {
                            "name": "channel",
                            "description": "`Number` - (Optional)The marker side for multiplayer"
                        },
                        {
                            "name": "creator",
                            "description": "`Object` - (Optional) The marker creator for multiplayer"
                        }
                    ],
                    "outline": "`createMarkerLocal` [name, position, channel, creator]",
                    "returns": "`String` - the marker's name, or an empty string if the marker name is not unique"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/createMarkerLocal"
        },
        "configuration": {
            "label": "createMarkerLocal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates a previously added menu.\n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "map `createMenu` index",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/createMenu"
        },
        "configuration": {
            "label": "createMenu",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates a mine of the given type.\n\nIf the _markers_ array only contains one marker name, it is ignored and the _position_ parameter is used instead.\nIf _markers_ contains multiple marker names, one of them is chosen randomly and used as the center of the placement area.\n\n\nThis command creates objects of the `**CfgAmmo**` class named in <sqf inline>configFile >> \"CfgVehicles\" >> _type >> \"ammo\".\n\n**NOTE**: \nUnit ability to detect mines depends on many factors:\nThe starting value is defined in config, for example `**./CfgVehicles/B_soldier_F/detectSkill**`, which in this case is 12.\nMine specialist value for example, defined in `**./CfgVehicles/B_soldier_exp_F/detectSkill**` is 38.\nThis value is then dynamically reduced depending on factors such as distance, if a unit is in a vehicle, if it is day or night time, how directly unit is looking at the mine, how fast unit is moving, how inconspicuous is the mine or even if it is visible.",
            "examples": [
                {
                    "text": "```sqf\n_mine = createMine [\"APERSMine\", ASLToAGL getPosASL player, [], 3];\n```"
                },
                {
                    "text": "Create a satchel charge and give the player control over it:\n\n```sqf\n_charge = createMine [\"SatchelCharge_F\", player, [], 0];\nplayer addOwnedMine _charge;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`String` - mine class name from `**CfgVehicles**`"
                        },
                        {
                            "name": "position",
                            "description": "`Object` or `Array` format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL)"
                        },
                        {
                            "name": "markers",
                            "description": "`Array` of `String`s - marker name(s)"
                        },
                        {
                            "name": "placement",
                            "description": "`Number` - placement radius"
                        }
                    ],
                    "outline": "`createMine` [type, position, markers, placement]",
                    "returns": "`Object`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/createMine"
        },
        "configuration": {
            "label": "createMine",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Create single missions display as a child of given display. The mission dialog will be set to the directory given as an argument \"root\".",
            "examples": [
                {
                    "text": "```sqf\n_ChildDisplay = _Rootdisplay createMissionDisplay \"Tutorial\";\n```"
                },
                {
                    "text": "In Arma 3 this creates the scenarios UI:\n\n```sqf\nfindDisplay 46 createMissionDisplay \"\";\n```"
                },
                {
                    "text": "Other options for Arma 3:\n\n```sqf\n\nprivate _missionDisplay = findDisplay 46;\n_missionDisplay createMissionDisplay [\"\", \"Cutscenes\"];\n_missionDisplay createMissionDisplay [\"\", \"Campaigns\"];\n_missionDisplay createMissionDisplay [\"\", \"MPMissions\"];\n_missionDisplay createMissionDisplay [\"\", \"Challenges\"];\n_missionDisplay createMissionDisplay [\"\", \"Showcases\"];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "display",
                            "description": "`Display`"
                        },
                        {
                            "name": "missionRootDirectoryString",
                            "description": "`String`"
                        }
                    ],
                    "outline": "display `createMissionDisplay` missionRootDirectoryString",
                    "returns": "`Display`"
                },
                {
                    "parameters": [
                        {
                            "name": "display",
                            "description": "`Display`"
                        },
                        {
                            "name": "missionRootDirectoryString",
                            "description": "`String` - root direction from `**\\Arma 3\\Missions\\ROOT**`"
                        },
                        {
                            "name": "cfgMissionsClass",
                            "description": "`String` - cfgMissions class to use"
                        }
                    ],
                    "outline": "display `createMissionDisplay` [missionRootDirectoryString, cfgMissionsClass]",
                    "returns": "`Display`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/createMissionDisplay"
        },
        "configuration": {
            "label": "createMissionDisplay",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Create a MP campaign display. The class name must be a mission collection declared in the configs; for example, <sqf inline>configFile >> \"CfgMissions\" >> \"MPMissions\" >> \"Apex\"\n\nIf the class does not exist or is not a mission collection, the display will be created empty.",
            "examples": [
                {
                    "text": "```sqf\nfindDisplay 46 createMPCampaignDisplay \"Apex\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "display",
                            "description": "`Display`"
                        },
                        {
                            "name": "class",
                            "description": "`String` - mission collection classname"
                        }
                    ],
                    "outline": "display `createMPCampaignDisplay` class",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/createMPCampaignDisplay"
        },
        "configuration": {
            "label": "createMPCampaignDisplay",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Create object with given shape defined as path to .p3d model. Supported `LOD`s include [Geometry](https://community.bistudio.com/wiki/LOD%23Geometry), [Fire Geometry](https://community.bistudio.com/wiki/LOD%23Fire_Geometry), [Roadway](https://community.bistudio.com/wiki/LOD%23Roadway), [View Geometry](https://community.bistudio.com/wiki/LOD%23ViewGeometry) and [ShadowVolume](https://community.bistudio.com/wiki/LOD%23ShadowVolume). Supported features include collision, texturing, animation, penetration, AI spotting occlusion, and surface specific sounds (like footsteps). Unsupported features include PhysX, damage, AI pathfinding (causes walking through walls), and built-in lights.\n\n\n\nGiven the simulation limitations, global decorative objects can be created with very little network traffic. Objects that could be exclusively created with this command are: trees, bushes, rocks, bridges, roads, vehicle wrecks, custom models in mission, and other objects without a class in config. The height of the placement position might need to be adjusted experimentally.\n\n**NOTE**: \n* See [Arma 3: Simple Objects](https://community.bistudio.com/wiki/Arma%203%3A%20Simple%20Objects) to learn more about simple objects.\n* See [Arma 3: createSimpleObject/objects](https://community.bistudio.com/wiki/Arma%203%3A%20createSimpleObject%2Fobjects) for a p3d models' list.\n* See [Arma 3: Livonia Props](https://community.bistudio.com/wiki/Arma%203%3A%20Livonia%20Props) for `Livonia` furniture.\n\n\nPlease note that:\n* `addAction` does not work with simple objects.\n* objects created with {{Link|#Syntax 1}} cannot be textured. Some objects may also have inverted default direction. \n* objects created with {{Link|#Syntax 2}} can be textured. The default direction should match the direction of the object if it was created with `createVehicle`.\n* only as of **(Arma 3)** do simple objects support `getVariable` and `setVariable`.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _pos = player getRelPos [10, 0];\nprivate _tank = createSimpleObject [\"a3\\armor_f_beta\\apc_tracked_01\\apc_tracked_01_rcws_f.p3d\", _pos];\n_tank setPos (_pos vectorAdd (getPosWorld _tank vectorDiff (_tank modelToWorld [0,0,0])));\n\n_tank hideSelection [\"zasleh\", true];\n_tank hideSelection [\"zasleh2\", true];\n_tank hideSelection [\"clan\", true];\n \n_tank animate [\"Wheel_podkoloL3\", 0.5, true];\n_tank animate [\"Wheel_podkoloL6\", 0.5, true];\n\n```"
                },
                {
                    "text": "```sqf\n\nprivate _pos = player getRelPos [10, 0];\nprivate _tank = createSimpleObject [\"B_APC_Tracked_01_CRV_F\", AGLToASL _pos];\n_tank setObjectTexture [0, \"#(rgb,8,8,3)color(0,1,0,0.01)\"];\n\n_tank hideSelection [\"zasleh\", true];\n_tank hideSelection [\"zasleh2\", true];\n_tank hideSelection [\"clan\", true];\n  \n_tank animate [\"Wheel_podkoloL3\", 0.5, true];\n_tank animate [\"Wheel_podkoloL6\", 0.5, true];\n\n```"
                },
                {
                    "text": "Create a pond:\n\n```sqf\n\nprivate _waterTileModel = \"a3\\structures_f_enoch\\Water\\pond_big_01.p3d\"; // visual only - this pond is a hard surface\nprivate _tileSize = 18; // width & height\nprivate _tileX = 10;\nprivate _tileY = 5;\nprivate _bottomLeftCorner = getPosWorld player;\nprivate _tilePos = -1;\nprivate _tiles = [];\nprivate _tile = objNull;\nfor \"_y\" from 0 to (_tileY - 1) do\n{\n\tfor \"_x\" from 0 to (_tileX - 1) do\n\t{\n\t\t_tilePos = _bottomLeftCorner vectorAdd [_x * _tileSize, _y * _tileSize, 0];\n\t\t_tile = createSimpleObject [_waterTileModel, _tilePos];\n\t\t_tiles pushBack _tile;\n\t};\n};\nsleep 10;\n{ deleteVehicle _x } forEach _tiles;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "shapeName",
                            "description": "`String` - path to the 3d model (can be obtained with `getModelInfo` command)"
                        },
                        {
                            "name": "positionWorld",
                            "description": "`Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) - placement position by the **model centre**<nowiki/>'s position (see `getPosWorld`)"
                        },
                        {
                            "name": "local",
                            "description": "`Boolean` - (Optional, default `false`) `true` to create a local instance only"
                        }
                    ],
                    "outline": "`createSimpleObject` [shapeName, positionWorld, local]",
                    "returns": "`Object` - created simple object"
                },
                {
                    "parameters": [
                        {
                            "name": "className",
                            "description": "`String` - `CfgVehicles` class name"
                        },
                        {
                            "name": "positionASL",
                            "description": "`Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) - placement position"
                        },
                        {
                            "name": "local",
                            "description": "`Boolean` - (Optional, default `false`) `true` to create a local instance only"
                        }
                    ],
                    "outline": "`createSimpleObject` [className, positionASL, local]",
                    "returns": "`Object` - created simple object"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/createSimpleObject"
        },
        "configuration": {
            "label": "createSimpleObject",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates a new `Task` and adds it to the Diary.\n**Arma 3**: Using the **[Arma 3: Task Framework](https://community.bistudio.com/wiki/Arma%203%3A%20Task%20Framework)** instead is recommended\n**NOTE**: When task is added as a child, it appears as subcategory to the parent task in the Tasks menu and can be parent to another child task. However this is cosmetic appearance as each task has own id and can be referenced directly via diary link.",
            "examples": [
                {
                    "text": "```sqf\n_currentTask = player createSimpleTask [\"NewTask\"];\n```"
                },
                {
                    "text": "```sqf\n_childTask = player createSimpleTask [\"ChildTask\", _currentTask];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit to add this new task"
                        },
                        {
                            "name": "name",
                            "description": "`String`"
                        },
                        {
                            "name": "parentTask",
                            "description": "`Task` - (Optional, `taskNull`) - The new task will be a sub task of the parent task"
                        }
                    ],
                    "outline": "unit `createSimpleTask` [name, parentTask]",
                    "returns": "`Task` - the new task"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/createSimpleTask"
        },
        "configuration": {
            "label": "createSimpleTask",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Create a new site. \n**WARNING**: This command is considered deprecated and is no longer supported",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`String`"
                        },
                        {
                            "name": "pos",
                            "description": "`Position`"
                        }
                    ],
                    "outline": "type `createSite` pos",
                    "returns": "`Object`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/createSite"
        },
        "configuration": {
            "label": "createSite",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates a sound source of the given type (type is the name of the subclass of [CfgVehicles](https://community.bistudio.com/wiki/ArmA%3A_CfgVehicles) which is pointing to the sound defined in `CfgSFX`).\nThe actual sound object created is of type `**\"#dynamicsound\"**` and could be detected with `allMissionObjects`.\nIf the markers array contains several marker names, the position of a random one is used, otherwise, the given position is used.\nThe sound source is placed inside a circle with this position as its center and placement as its radius. Some of the vanilla classes pre-configured in Arma 3:\n{{Columns|4|\n* `**\"Sound_Alarm\"**`\n* `**\"Sound_Alarm2\"**`\n* `**\"Sound_BattlefieldExplosions\"**`\n* `**\"Sound_BattlefieldFirefight\"**`\n* `**\"Sound_Fire\"**`\n* `**\"Sound_SmokeWreck1\"**`\n* `**\"Sound_SparklesWreck1\"**`\n* `**\"Sound_SparklesWreck2\"**`\n* `**\"Sound_Stream\"**`\n}}\n\nSince Arma 3 v1.70 it is possible to define sounds for use with `createSoundSource` in [[Description.ext]].\nAs mentioned earlier, the sounds needed for this command should be defined inside `CfgVehicles` class, which itself references `CfgSFX` class.\nIf given class searched in main config and is not found, the search will continue in [[Description.ext|description.ext]] - see _Example 3_.\n\nNote that the sound created by `createSoundSource` will always be looping.",
            "examples": [
                {
                    "text": "```sqf\n_soundSource = createSoundSource [\"LittleDog\", position player, [], 0];\n```"
                },
                {
                    "text": "```sqf\n[] spawn \n{\n\t_alarm = createSoundSource [\"Sound_Alarm\", position player, [], 0]; // starts alarm\n\tsleep 10;\n\tdeleteVehicle _alarm; // stops alarm\n};\n```"
                },
                {
                    "text": "**(Arma 3)** Here is an example of suitable mission config definition:\n```cpp\n// description.ext\nclass CfgSFX\n{\n\tclass MyOwl\n\t{\n\t\tsound0[] = { \"@A3\\Sounds_F\\environment\\animals\\birds\\owl1\", db-10, 1.0, 1000, 0.2, 0, 15, 30 };\t// path to addon sound\n\t\tsound1[] = { \"@A3\\Sounds_F\\environment\\animals\\birds\\owl2\", db-10, 1.0, 1000, 0.2, 0, 15, 30 };\t// path to addon sound\n\t\tsound2[] = { \"@A3\\Sounds_F\\environment\\animals\\birds\\owl3\", db-10, 1.0, 1000, 0.2, 0, 15, 30 };\t// path to addon sound\n\t\tsounds[] = { \"sound0\", \"sound1\", \"sound2\" };\n\t\tempty[] = { \"\", 0, 0, 0, 0, 0, 0, 0 };\n\t};\n};\n\nclass CfgVehicles\n{\n\tclass MyOwlSound // class name to be used with createSoundSource\n\t{\n\t\tsound = \"MyOwl\"; // reference to CfgSFX class\n\t};\n};\n```\n\n\n```sqf\nprivate _owl = createSoundSource [\"MyOwlSound\", position player, [], 0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`String` - `CfgVehicles` class"
                        },
                        {
                            "name": "position",
                            "description": "[PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL), [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or `Object` - desired placement position"
                        },
                        {
                            "name": "markers",
                            "description": "`Array` - if the markers array contains any markers, the position is randomly picked from array of given markers plus desired placement position.\nIf any of the markers were given a Z coordinate with `setMarkerPos`, the sound will also be created at the given Z coordinate"
                        },
                        {
                            "name": "placement",
                            "description": "`Number` - the sound is placed inside a circle with given position as center and placement as its radius"
                        }
                    ],
                    "outline": "`createSoundSource` [type, position, markers, placement]",
                    "returns": "`Object`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/createSoundSource"
        },
        "configuration": {
            "label": "createSoundSource",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Same as `createSoundSource` but with local effect - the created sound is not transferred to other clients.",
            "examples": [
                {
                    "text": "```sqf\n\ncreateSoundSource\t\t[\"LittleDog\", position player, [], 0]; // global\ncreateSoundSourceLocal\t[\"LittleDog\", position player, [], 0]; // local\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "see `createSoundSource`",
                    "returns": "see `createSoundSource`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/createSoundSourceLocal"
        },
        "configuration": {
            "label": "createSoundSourceLocal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Create a target.",
            "examples": [
                {
                    "text": "```sqf\n_target = createTarget [\"targetType\", [0,0,0], 1, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "obj",
                            "description": "`Object`"
                        },
                        {
                            "name": "type",
                            "description": "`String`"
                        },
                        {
                            "name": "position",
                            "description": "`Position` Placement"
                        },
                        {
                            "name": "typeAccuracy",
                            "description": "`Number`"
                        },
                        {
                            "name": "posAccuracy",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "obj `createTarget` [type, position, typeAccuracy, posAccuracy]",
                    "returns": "`Target`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/createTarget"
        },
        "configuration": {
            "label": "createTarget",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Create a new AI task (subtask of parentTask). Type is name of registered task type.",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "teamMember",
                            "description": "[Team Member](https://community.bistudio.com/wiki/Team%20Member)"
                        },
                        {
                            "name": "type",
                            "description": "`String` - `**name**` defined in `**CfgTasks**`"
                        },
                        {
                            "name": "parentTask",
                            "description": "`Task` - (Optional)"
                        },
                        {
                            "name": "priority",
                            "description": "`Number`"
                        },
                        {
                            "name": "nameN",
                            "description": "`String`"
                        },
                        {
                            "name": "valueN",
                            "description": "`String`"
                        }
                    ],
                    "outline": "teamMember `createTask` [<nowiki/>[type, parentTask], priority, name1, value1, ...]",
                    "returns": "`Task`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/createTask"
        },
        "configuration": {
            "label": "createTask",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates a `Team` and names it.",
            "examples": [
                {
                    "text": "```sqf\n_team = createTeam [\"USMC_Team\", \"Fire Team Red\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`String`"
                        },
                        {
                            "name": "name",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`createTeam` [type, name]",
                    "returns": "[Team Member](https://community.bistudio.com/wiki/Team%20Member)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/createTeam"
        },
        "configuration": {
            "label": "createTeam",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates a [trigger](https://community.bistudio.com/wiki/Trigger) of the given type and at the given position. The type must be a class name in _CfgNonAIVehicles_ or _CfgVehicles_ with <syntaxhighlight lang=\"cpp\" inline>simulation = detector</syntaxhighlight>. An array containing all units that have activated the trigger is available via <sqf inline>list triggerobj. Since triggers are **`Object`s**, commands such as `getPosASL`, `setPosASL`, `deleteVehicle` etc. work on them.\n\n{{Feature|informative|Since Arma 3 v1.54 triggers can be disabled/enabled using `enableSimulation` command.}}\n\nTriggers are created with default parameters:\n{{Columns|4|\n* `**a**`: 50\n* `**b**`: 50\n* `**c**`: -1\n* `**angle**`: 0\n* `**rectangular**`: false\n* `**activationBy**`: None\n* `**activationType**`: Present\n* `**repeating**`: false\n* `**timeoutMin**`: 0\n* `**timeoutMid**`: 0\n* `**timeoutMax**`: 0\n* `**interruptable**`: true\n* `**type**`: None\n* `**text**`: \"\"\n* `**name**`: \"\"\n* `**expCond**`: \"this\"\n* `**expActiv**`: \"\"\n* `**expDesactiv**`: \"\"\n* {{GVI|arma3|1.98",
            "examples": [
                {
                    "text": "```sqf\n\n_trg = createTrigger [\"EmptyDetector\", getPos player];\n_trg setTriggerArea [5, 5, 0, false];\n_trg setTriggerActivation [\"CIV\", \"PRESENT\", true];\n_trg setTriggerStatements [\"this\", \"hint 'Civilian near player'\", \"hint 'no civilian near'\"];\n\n```"
                },
                {
                    "text": "Open/close Bar Gate automatically:\n\n```sqf\n\n//--- init of the Bar Gate\nif (isServer) then\n{\t\n\t_gateTrigger = createTrigger [\"EmptyDetector\", getPosWorld this, false];\n\t_gateTrigger setVariable [\"BarGateObj\", this];\n\t_gateTrigger setTriggerActivation [\"ANYPLAYER\", \"PRESENT\", true];\n\t_gateTrigger setTriggerArea [5, 25, getDir this, true];\n\t_gateTrigger setTriggerStatements \n\t[\n\t\t\"this\", \n\t\t\"thisTrigger getVariable \"\"BarGateObj\"\" animateSource [\"\"Door_1_sound_source\"\", 1]\", \n\t\t\"thisTrigger getVariable \"\"BarGateObj\"\" animateSource [\"\"Door_1_sound_source\"\", 0]\"\n\t];\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`String` - usually \"EmptyDetector\""
                        },
                        {
                            "name": "position",
                            "description": "[Position2D](https://community.bistudio.com/wiki/Position%23Introduction), [Position3D](https://community.bistudio.com/wiki/Position%23Introduction) or `Object`"
                        },
                        {
                            "name": "makeGlobal",
                            "description": "`Boolean` - (Optional - default `true`) locality flag\n* `true` - trigger is global {{Icon|globalEffect|24}}\n* `false` - trigger is local {{Icon|localEffect|24}}"
                        }
                    ],
                    "outline": "`createTrigger` [type, position, makeGlobal]",
                    "returns": "`Object` - created trigger"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/createTrigger"
        },
        "configuration": {
            "label": "createTrigger",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Create a unit of the provided [CfgVehicles](https://community.bistudio.com/wiki/%3ACategory%3ACfgVehicles) class.\n\n**WARNING**: \nThe unit will not be created if the passed group does not exist (a.k.a `grpNull`);\nthis can happen if `createGroup` fails because the **group limit has been reached** (see `createGroup` for respective game limits).\n\n\n{{{!}} class=\"wikitable\" style=\"width: 100%\"\n!\n! style=\"width: 50%\" {{!}} {{Link|#Syntax 1}}\n! style=\"width: 50%\" {{!}} {{Link|#Syntax 2}}\n{{!}}-\n! Group's&nbsp;locality\n{{!}} the provided group _can_ be non-[local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality), but a warning will be logged\n{{!}} the provided group **must** be [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality)\n{{!}}-\n! Unit's `side`\n{{!}} using a classname from a different side than the provided group will result in the unit itself being of a (config-defined) side inside a group of another side - see _Example 6_ for more information\n{{!}} using a classname from a different side than the provided group will result in the unit being of the same side as the provided group\n{{!}}-\n! Other\n{{!}} the unit's init code will execute after a slight delay if the provided group is not local\n{{!}} this syntax does **not** return a reference to the created unit (see _Example 7_)\n{{!}}}\n\n**Armed Assault**: \n**(Operation Flashpoint)** **(Armed Assault)** This command could be bugged in Operation Flashpoint or Armed Assault; an additional `join` may solve the problem.\n\nHowever, some commands such as `setUnitPos` only work if run before the `join`.",
            "examples": [
                {
                    "text": "```sqf\n_unit = group player createUnit [\"B_RangeMaster_F\", position player, [], 0, \"NONE\"];\n```"
                },
                {
                    "text": "```sqf\n\"B_RangeMaster_F\" createUnit [position player, group player];\n```"
                },
                {
                    "text": "```sqf\n\"B_RangeMaster_F\" createUnit [getMarkerPos \"barracks\", _groupAlpha];\n```"
                },
                {
                    "text": "```sqf\n\n\"B_RangeMaster_F\" createUnit [\n\tgetMarkerPos \"marker_1\",\n\t_groupAlpha,\n\t\"loon1 = this; this addWeapon 'BAF_L85A2_RIS_SUSAT'\",\n\t0.6,\n\t\"corporal\"\n];\n\n```"
                },
                {
                    "text": "<!-- referenced in parameters (p6) -->\n\n```sqf\n\n_veh = \"O_Quadbike_01_F\" createVehicle (player getRelPos [10, 0]);\n_grp = createVehicleCrew _veh;\n_unit = _grp createUnit [typeOf driver _veh, _grp, [], 0, \"CARGO\"];\n\n```"
                },
                {
                    "text": "<!-- referenced in the description -->Creating a unit from a different side may lead to issues:\n\n```sqf\n\n_grp = createGroup east;\nhint str side _grp; // EAST\n_ap = _grp createUnit [\"C_man_p_beggar_F\", position player, [], 0, \"NONE\"];\nhint str side _ap; // CIV, not EAST\n\n// workaround\n[_ap] joinSilent _grp;\nhint str side _ap; // EAST\n\n```"
                },
                {
                    "text": "<!-- referenced in alternative result (r2) -->\nReference the created unit through a global variable:\n\n```sqf\n\n_myUnit = \"B_RangeMaster_F\" createUnit [position player, group player];\t\t// wrong - this syntax does not return a reference\n\n\"B_RangeMaster_F\" createUnit [position player, group player, \"myUnit = this\"];\t// correct - the unit is myUnit\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group` - existing group new unit will join; if the group is not `local`, a warning will be logged"
                        },
                        {
                            "name": "type",
                            "description": "`String` - classname of unit to be created as per `CfgVehicles`"
                        },
                        {
                            "name": "position",
                            "description": "`Object`, `Group` or `Array` format `Position` or [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) - location where to create the unit. In case of `Group`, the `group` `leader`'s position is used"
                        },
                        {
                            "name": "markers",
                            "description": "`Array` - placement markers"
                        },
                        {
                            "name": "placement",
                            "description": "`Number` - placement radius"
                        },
                        {
                            "name": "special",
                            "description": "`String` - unit placement special, one of:\n* `**\"NONE\"**` - The unit will be created at the first available free position nearest to given position\n* `**\"FORM\"**` - Not implemented, currently functions the same as \"NONE\"\n* `**\"CAN_COLLIDE\"**` - The unit will be created exactly at the provided position\n* `**\"CARGO\"**` - The unit will be created in cargo of the group's vehicle, regardless of the passed position (see _Example 5_).<!--\n--> If group has no vehicle or there is no cargo space available, the unit will be placed according to `**\"NONE\"**`.<!--\n--> `**\"CARGO\"**` placement excludes cargo positions with personal FFV turrets. To check available cargo space use:\n{{{!}} style=\"width: 100%\"\n! **(Arma 3)** FFV\n{{!}} \n```sqf\nprivate _hasCargo = { isNull (_x select 0) } count (fullCrew [_veh, \"cargo\", true]) > 0;\n```\n\n{{!}}-\n! before\n{{!}} \n```sqf\n_hasCargo = _veh emptyPositions \"CARGO\" > 0;\n```\n\n{{!}}}"
                        }
                    ],
                    "outline": "group `createUnit` [type, position, markers, placement, special]",
                    "returns": "`Object` - the created unit"
                },
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`String` - classname of unit to be created as per `CfgVehicles`"
                        },
                        {
                            "name": "position",
                            "description": "`Object`, `Group` or `Array` format `Position` or [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) - location at which the unit is created. In case of `Group` position of the `group` `leader` is used"
                        },
                        {
                            "name": "group",
                            "description": "`Group` - existing group the new unit will join"
                        },
                        {
                            "name": "init",
                            "description": "`String` - (Optional, default \"\") unit init statement, similar to unit init field in the editor. The code placed in unit init will run upon unit creation for every client on network, present and future. The code itself receives the reference to the created unit via local variable [this](https://community.bistudio.com/wiki/Magic%20Variables%23this_2). Do not use global commands in a unit's _init_ as it runs on every client."
                        },
                        {
                            "name": "skill",
                            "description": "`Number` - (Optional, default 0.5) unit `skill`"
                        },
                        {
                            "name": "rank",
                            "description": "`String` - (Optional, default \"PRIVATE\") unit `rank`"
                        }
                    ],
                    "outline": "type `createUnit` [position, group, init, skill, rank]",
                    "returns": "**WARNING**: **`Nothing`** - this syntax does **not** return a unit reference! See _Example 7_ for a workaround."
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/createUnit"
        },
        "configuration": {
            "label": "createUnit",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates an empty object of given classname type.\nSee [Arma 3: Assets](https://community.bistudio.com/wiki/Arma%203%3A%20Assets) / [Arma 3: createVehicle/vehicles](https://community.bistudio.com/wiki/Arma%203%3A%20createVehicle%2Fvehicles), or [:Category:CfgVehicles](https://community.bistudio.com/wiki/%3ACategory%3ACfgVehicles) for earlier games.\n\n{{Feature|informative|\n* To create objects of type `**\"Logic\"**`, use `createUnit`.\n* To create an editable [ Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3A%20Eden%20Editor) entity, see `create3DENEntity`.\n}}\n\n**Arma 3**: \nTo avoid vehicle randomisation in Arma 3, set the `**BIS_enableRandomization**` variable immediately after creating the vehicle:\n\n```sqf\n\nprivate _vehicle = \"C_Offroad_01_F\" createVehicle position player;\n_vehicle setVariable [\"BIS_enableRandomization\", false];\n\n```\n\nSee the [Arma 3: Vehicle Customisation](https://community.bistudio.com/wiki/Arma%203%3A%20Vehicle%20Customisation) page for more information and settings.",
            "examples": [
                {
                    "text": "```sqf\n_jeep = \"Jeep\" createVehicle position player;\n```"
                },
                {
                    "text": "```sqf\n_heli = \"AH1Z\" createVehicle getMarkerPos \"hspawn\";\n```"
                },
                {
                    "text": "```sqf\n_veh = createVehicle [\"ah1w\", position player, [], 0, \"FLY\"];\n```"
                },
                {
                    "text": "```sqf\n_veh = createVehicle [\"2S6M_Tunguska\", getMarkerPos \"marker1\", [\"marker2\", \"marker3\"], 0, \"NONE\"];\n```"
                },
                {
                    "text": "Objects such as\n* \"test_EmptyObjectForBubbles\"\n* \"test_EmptyObjectForFireBig\"\n* \"test_EmptyObjectForSmoke\"\ncreate additional emitters, which are stored in \"effects\" variable on the object. Since Arma 3 v1.72 these emitters are automatically deleted when object is deleted\n\n```sqf\n\n[] spawn\n{\n\tprivate _fire = \"test_EmptyObjectForFireBig\" createVehicle position player;\n\tsleep 5;\n\tdeleteVehicle _fire;\n};\n\n```"
                },
                {
                    "text": "The following explosives (ending with `**_Scripted**`) can be set off by applying `setDamage` 1 to them for ease of scripting:\n* \"DemoCharge_Remote_Ammo_Scripted\"\n* \"SatchelCharge_Remote_Ammo_Scripted\"\n* \"ClaymoreDirectionalMine_Remote_Ammo_Scripted\"\n\n```sqf\n\n_claymore = \"ClaymoreDirectionalMine_Remote_Ammo_Scripted\" createVehicle position player;\n_claymore spawn\n{\n\tsleep 5;\n\t_this setDamage 1;\n};\n\n```"
                },
                {
                    "text": "Add inventory to objects without inventory:\n\n```sqf\n\n_boxes = \"Land_Pallet_MilBoxes_F\" createVehicle position player;\n_cargo = \"Supply500\" createVehicle [0,0,0];\n_cargo attachTo [_boxes, [0,0,0.85]];\n\n// optional for objects that can take damage\n_boxes addEventHandler [\"Killed\",\n{\n\t{\n\t\tdetach _x,\n\t\tdeleteVehicle _x;\n\t}\n\tforEach attachedObjects (_this select 0);\n}];\n\n```"
                },
                {
                    "text": "Drop player's weapon:\n\n```sqf\n\n_weaponHolder = \"GroundWeaponHolder_Scripted\" createVehicle position player;\nplayer action [\"DropWeapon\", _weaponHolder, currentWeapon player];\n\n```"
                },
                {
                    "text": "The following weapon holders (ending with __Scripted_) do **not** auto-delete when empty. It is up to the mission maker to take care of these:\n* \"GroundWeaponHolder_Scripted\"\n* \"WeaponHolderSimulated_Scripted\"\n* \"Weapon_Empty\" (a special weaponholder that displays only a single weapon, even if it contains magazines for this weapon)\n\n```sqf\n\n[] spawn \n{\n\tprivate _weaponHolder = createVehicle [\"Weapon_Empty\", getPosATL player, [], 0, \"CAN_COLLIDE\"];\n\t_weaponHolder addWeaponCargo [\"arifle_Katiba_F\", 1];\n\thint \"You have 5 seconds to grab this weapon\";\n\tsleep 5;\n\tdeleteVehicle _weaponHolder;\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`String` - vehicle/object className"
                        },
                        {
                            "name": "position",
                            "description": "`Array` format `Position` - desired placement position. If the exact position is occupied, nearest empty position is used."
                        }
                    ],
                    "outline": "type `createVehicle` position",
                    "returns": "`Object`"
                },
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`String` - vehicle/object className"
                        },
                        {
                            "name": "position",
                            "description": "`Object`; `Array` format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or `PositionATL` (`PositionAGL` if watercraft or amphibious) - desired placement position"
                        },
                        {
                            "name": "markers",
                            "description": "`Array` of `String`s - (Optional, default <sqf inline>[]) if the markers array contains any markers, the position is randomly picked from array of given markers plus desired placement position.\nIf any of the markers were given z coordinate with `setMarkerPos`, the vehicle will also be created at given z coordinate."
                        },
                        {
                            "name": "placement",
                            "description": "`Number` - (Optional, default 0) the vehicle is placed inside a circle with given position as center and placement as its radius."
                        },
                        {
                            "name": "special",
                            "description": "`String` - (Optional, default \"NONE\") can be one of the following:\n* `**\"NONE\"**` - will look for suitable empty position near given position (subject to other placement params) before placing vehicle there.\n* `**\"CAN_COLLIDE\"**` - places vehicle at given position (subject to other placement params), without checking if others objects can cross its 3D model.\n* `**\"FLY\"**` - if vehicle is capable of flying and has crew, it will be made airborne at default height.\nIf _special_ is \"\" or not specified, default `**\"NONE\"**` is used."
                        }
                    ],
                    "outline": "`createVehicle` [type, position, markers, placement, special]",
                    "returns": "`Object` - created vehicle or `objNull` if failed"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/createVehicle"
        },
        "configuration": {
            "label": "createVehicle",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates vehicle crew corresponding to the provided vehicle's `faction`. If the vehicle is already occupied, the command will only create missing crew in the existing vehicle's group.\n\nTo find out which crew will be created, use `BIS_fnc_vehicleCrewTurrets`.\n  \n{{Feature|informative|This command:\n* {{GVI|arma3|1.26",
            "examples": [
                {
                    "text": "```sqf\n_veh = createVehicle [\"B_MRAP_01_F\", getMarkerPos \"createVeh\", [], 0, \"NONE\"];\ncreateVehicleCrew _veh;\n```"
                },
                {
                    "text": "```sqf\n_veh = createVehicle [\"O_MRAP_02_hmg_F\", position player, [], 0, \"NONE\"];\ncreateVehicleCrew _veh;\n{\n\tdiag_log [_x, faction _x, side _x, side group _x];\n} forEach crew _veh;\n\n// [O Alpha 1-1:1,\"OPF_F\",EAST,EAST]\n// [O Alpha 1-1:2,\"OPF_F\",EAST,EAST]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - vehicle to populate with crew"
                        }
                    ],
                    "outline": "`createVehicleCrew` vehicle",
                    "returns": "`Group` - the group of the created crew (since **(Arma 3)**; before that returned `Nothing`)"
                },
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group` - group to put crew in"
                        },
                        {
                            "name": "vehicle",
                            "description": "`Object` - vehicle to populate with crew"
                        }
                    ],
                    "outline": "group `createVehicleCrew` vehicle",
                    "returns": "`Group` - the group of the created crew or `grpNull`"
                },
                {
                    "parameters": [
                        {
                            "name": "side",
                            "description": "`Side` - side to create crew on"
                        },
                        {
                            "name": "vehicle",
                            "description": "`Object` - vehicle to populate with crew"
                        }
                    ],
                    "outline": "side `createVehicleCrew` vehicle",
                    "returns": "`Group` - the group of the created crew or `grpNull`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/createVehicleCrew"
        },
        "configuration": {
            "label": "createVehicleCrew",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates an object of the given type. The Created object is not transferred through network in MP games.\n`netId` of such vehicle in multiplayer will be \"0:0\". To disable local vehicle creation, use `CfgDisabledCommands` to blacklist this command.\nAlternatively, you can use `createSimpleObject` with local option enabled where applicable.",
            "examples": [
                {
                    "text": "```sqf\n_lightSource = \"#lightpoint\" createVehicleLocal _pos;\n```"
                },
                {
                    "text": "Multiple types:\n\n```sqf\n\nprivate _lightSource =\t\t\"#lightsource\"\t\tcreateVehicleLocal _pos;\t// see [[Light Source Tutorial]]\nprivate _lightReflector =\t\"#lightreflector\"\tcreateVehicleLocal _pos;\t// see [[Light Source Tutorial]] - since {{arma3}} v2.06\nprivate _particleSource =\t\"#particlesource\"\tcreateVehicleLocal _pos;\t// see [[Particles Tutorial]]\nprivate _dynamicSound =\t\t\"#dynamicsound\"\t\tcreateVehicleLocal _pos;\t// see [[createSoundSource]]\n\n```"
                },
                {
                    "text": "```sqf\n\n// since {{arma3}} v2.14\nprivate _lightPoint = createVehicleLocal [\"#lightpoint\", getMarkerPos \"marker1\", [\"marker2\", \"marker3\"], 0, \"NONE\"];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`String` - vehicle/object className"
                        },
                        {
                            "name": "position",
                            "description": "`Array` format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL)"
                        }
                    ],
                    "outline": "type `createVehicleLocal` position",
                    "returns": "`Object`"
                },
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`String` - vehicle/object className"
                        },
                        {
                            "name": "position",
                            "description": "`Object`, `Array` format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or `PositionATL` (`PositionAGL` if watercraft or amphibious) - desired placement position"
                        },
                        {
                            "name": "markers",
                            "description": "`Array` of `String`s - (Optional, default <sqf inline>[]) if the markers array contains any markers, the position is randomly picked from array of given markers plus desired placement position.\nIf any of the markers were given z coordinate with `setMarkerPos`, the vehicle will also be created at given z coordinate."
                        },
                        {
                            "name": "placement",
                            "description": "`Number` - (Optional, default 0) the vehicle is placed inside a circle with given position as center and placement as its radius."
                        },
                        {
                            "name": "special",
                            "description": "`String` - (Optional, default \"NONE\") can be one of the following:\n* `**\"NONE\"**` - will look for suitable empty position near given position (subject to other placement params) before placing vehicle there.\n* `**\"CAN_COLLIDE\"**` - places vehicle at given position (subject to other placement params), without checking if others objects can cross its 3D model.\n* `**\"FLY\"**` - if vehicle is capable of flying and has crew, it will be made airborne at default height.\nIf _special_ is \"\" or not specified, default `**\"NONE\"**` is used."
                        }
                    ],
                    "outline": "`createVehicleLocal` [type, position, markers, placement, special]",
                    "returns": "`Object` - created vehicle or `objNull` if failed"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/createVehicleLocal"
        },
        "configuration": {
            "label": "createVehicleLocal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the crew (both dead and alive) of the given vehicle.",
            "examples": [
                {
                    "text": "```sqf\nplayer in (crew _tank);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicleName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`crew` vehicleName",
                    "returns": "`Array` - an array with all units in the vehicle is returned."
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/crew"
        },
        "configuration": {
            "label": "crew",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds a header line of controls according to the HeaderTemplate class. Note that rows and headers are indexed separately.",
            "examples": [
                {
                    "text": "```sqf\nprivate _array = ctAddHeader _control;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctAddHeader` control",
                    "returns": "`Array` format [headerIndex, createdControls] where:\n* headerIndex: `Number`\n* createdControls: `Array` of `Control`s"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/ctAddHeader"
        },
        "configuration": {
            "label": "ctAddHeader",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds one row of controls according to the RowTemplate class. It returns an array containing row index and array of created controls in a format [<rowIndex>, [<control0>, <control1>...<control n>]].\n\n\nNote that rows and headers are indexed separately.",
            "examples": [
                {
                    "text": "```sqf\n_array = ctAddRow _control;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctAddRow` control",
                    "returns": "`Array`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/ctAddRow"
        },
        "configuration": {
            "label": "ctAddRow",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes all the lines from the RscControlsTable. Returns Nothing.",
            "examples": [
                {
                    "text": "```sqf\nctClear _control;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctClear` ctrl",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/ctClear"
        },
        "configuration": {
            "label": "ctClear",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns index of the selected row. Will take only rows, but not headers into account.",
            "examples": [
                {
                    "text": "```sqf\n_curSel = ctCurSel _control;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctCurSel` ctrl",
                    "returns": "`Number`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/ctCurSel"
        },
        "configuration": {
            "label": "ctCurSel",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns metadata associated with a particular row of a `CT_CONTROLS_TABLE` control.",
            "examples": [
                {
                    "text": "```sqf\nprivate _data = _ctrl ctData 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control` - the respective control"
                        },
                        {
                            "name": "row",
                            "description": "`Number` - the row index"
                        }
                    ],
                    "outline": "ctrl `ctData` row",
                    "returns": "`String`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/ctData"
        },
        "configuration": {
            "label": "ctData",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets array of indices of rows under this header.",
            "examples": [
                {
                    "text": "```sqf\nprivate _indices = _control ctFindHeaderRows 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number` - header's index"
                        }
                    ],
                    "outline": "ctrl `ctFindHeaderRows` index",
                    "returns": "`Array`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/ctFindHeaderRows"
        },
        "configuration": {
            "label": "ctFindHeaderRows",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets index of the closest header above this row.",
            "examples": [
                {
                    "text": "```sqf\nprivate _index = _control ctFindRowHeader 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "rowIndex",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "ctrl `ctFindRowHeader` rowIndex",
                    "returns": "`Number`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/ctFindRowHeader"
        },
        "configuration": {
            "label": "ctFindRowHeader",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array of controls on the header with the given index.",
            "examples": [
                {
                    "text": "```sqf\n_array = _control ctHeaderControls 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "ctrl `ctHeaderControls` index",
                    "returns": "`Array`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/ctHeaderControls"
        },
        "configuration": {
            "label": "ctHeaderControls",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns number of headers (rows not included) in the RscControlsTable.",
            "examples": [
                {
                    "text": "```sqf\nctHeaderCount _control;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctHeaderCount` ctrl",
                    "returns": "`Number`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/ctHeaderCount"
        },
        "configuration": {
            "label": "ctHeaderCount",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Takes array of header indices as a parameter and removes headers with those indices. Indices of remaining headers will be recomputed.",
            "examples": [
                {
                    "text": "```sqf\n_control ctRemoveHeaders [0, 1, 2];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "indices",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "ctrl `ctRemoveHeaders` indices",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/ctRemoveHeaders"
        },
        "configuration": {
            "label": "ctRemoveHeaders",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Takes array of row indices as a parameter and removes rows with those indices. Indices of remaining rows will be recomputed.",
            "examples": [
                {
                    "text": "```sqf\n_control ctRemoveRows [0, 1, 2];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "indexN",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "ctrl `ctRemoveRows` [index1, index2, ...]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/ctRemoveRows"
        },
        "configuration": {
            "label": "ctRemoveRows",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Launches action attached to given (button based) control. Command ignores control disabled state. (Example 2). Main syntax command only triggers engine-based actions (cancel or ok codes) and will not trigger button related [User Interface Event Handlers](https://community.bistudio.com/wiki/User_Interface_Event_Handlers) or `buttonAction`, use the alternative syntax for this. \"ButtonClick\" UI event handler will also be triggered with the alternative syntax. Use `isUIContext` to distinguish between scripted activation and user activation.",
            "examples": [
                {
                    "text": "```sqf\nctrlActivate _control;\n```"
                },
                {
                    "text": "```sqf\n_control ctrlEnable false;\nctrlActivate _control; // Action fired.\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctrlActivate` control",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control` - button based control (`CT_BUTTON`, `CT_XBUTTON`, `CT_SHORTCUTBUTTON`, `CT_ACTIVETEXT`)"
                        },
                        {
                            "name": "full",
                            "description": "`Boolean` - `true` to simulate button click in full including UI event handling"
                        }
                    ],
                    "outline": "control `ctrlActivate` full",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlActivate"
        },
        "configuration": {
            "label": "ctrlActivate",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Add an event handler to the given control.\n\n**IMPORTANT**: \n* Control event handlers are processed in reversed order, i.e. last added: first, first added: last. So if you have an override it should be set up in the 1st added EH.\n* When using the event names listed [here](https://community.bistudio.com/wiki/User%20Interface%20Event%20Handlers) with the `ctrlAddEventHandler`, `ctrlSetEventHandler`, `displayAddEventHandler` or `displaySetEventHandler` commands, the prefix \"on\" in the event name must be removed (e.g. **ButtonDown** instead of **onButtonDown**).",
            "examples": [
                {
                    "text": "```sqf\n_map ctrlAddEventHandler [\"draw\", \"_this call BIS_fnc_strategicMapOpen_draw\"];\n```"
                },
                {
                    "text": "```sqf\n_map ctrlAddEventHandler [\"draw\", { hintSilent str _this }];\n```"
                },
                {
                    "text": "```sqf\nfindDisplay 12 displayCtrl 51 ctrlAddEventHandler [\"draw\", { hintSilent str _this }]; //Arma 3 map control\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "handler",
                            "description": "`String` - handler name, see [User Interface Event Handlers](https://community.bistudio.com/wiki/User%20Interface%20Event%20Handlers)"
                        },
                        {
                            "name": "function",
                            "description": "`String`, since **(Arma 3)** also `Code` - script. Several [Magic Variables](https://community.bistudio.com/wiki/Magic%20Variables) are available:\n* Event Handler parameters are accessible via `**_this**`\n* The Event Handler type is available as `**_thisEvent**`\n* The Event Handler index is available as `**_thisEventHandler**`"
                        }
                    ],
                    "outline": "control `ctrlAddEventHandler` [handler, function]",
                    "returns": "`Number` - handler ID or -1 if failed"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlAddEventHandler"
        },
        "configuration": {
            "label": "ctrlAddEventHandler",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets rotation info of a control set as `**ST_PICTURE**`. Supported control types:\n* `CT_STATIC`\n* `CT_ACTIVETEXT` (Since Arma 3 v2.09.149642)",
            "examples": [
                {
                    "text": "```sqf\nctrlAngle _control;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control ",
                            "description": "`Control`  - picture control"
                        }
                    ],
                    "outline": "`ctrlAngle` control",
                    "returns": "`Array` of `Number`s in format [angle, centerX, centerY]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlAngle"
        },
        "configuration": {
            "label": "ctrlAngle",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Process an animation of 3D [Arma: GUI Configuration](https://community.bistudio.com/wiki/Arma%3A%20GUI%20Configuration). Command uses name defined by source property and works similar like `animateSource` command.",
            "examples": [
                {
                    "text": "```sqf\n_control3D ctrlAnimateModel [\"Close\", 1];\n```"
                },
                {
                    "text": "```sqf\n_ctrlLaptop ctrlAnimateModel [\"Lid\", 1, 2];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control ",
                            "description": "`Control` - 3D control"
                        },
                        {
                            "name": "source",
                            "description": "`String` - common source"
                        },
                        {
                            "name": "phase",
                            "description": "`Number` - wanted animation phase"
                        },
                        {
                            "name": "speed",
                            "description": "`Boolean` or `Number` - (Optional, default `false`)\n* `Boolean` - when set to `true`, animation is instant\n* {{GVI|arma3|1.66"
                        }
                    ],
                    "outline": "control `ctrlAnimateModel` [source, phase, speed]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlAnimateModel"
        },
        "configuration": {
            "label": "ctrlAnimateModel",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns current animation phase of given source. Similar to `animationSourcePhase`.",
            "examples": [
                {
                    "text": "```sqf\nprivate _phase = _control3D ctrlAnimationPhaseModel \"Close\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control ",
                            "description": "`Control` - 3D control"
                        },
                        {
                            "name": "source",
                            "description": "`String`"
                        }
                    ],
                    "outline": "control `ctrlAnimationPhaseModel` source",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlAnimationPhaseModel"
        },
        "configuration": {
            "label": "ctrlAnimationPhaseModel",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the control at the specified coordinates.",
            "examples": [
                {
                    "text": "```sqf\nprivate _ctrl = _myDisplay ctrlAt [0.5, 0.5];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "display",
                            "description": "`Display` - the display to check"
                        },
                        {
                            "name": "x",
                            "description": "`Number` - position (0 = left, 1 = right)"
                        },
                        {
                            "name": "y",
                            "description": "`Number` - position (0 = top, 1 = bottom)"
                        }
                    ],
                    "outline": "display `ctrlAt` [x, y]",
                    "returns": "`Control` - the control at the specified coordinates, `controlNull` if none"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlAt"
        },
        "configuration": {
            "label": "ctrlAt",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns number of seconds auto-scroll will wait before scroll and/or rewind. -2 if scrollbar not present. \n\n\n\nAutorscroll is available for [[DialogControls-ListBoxes|CT_LISTBOX]] and `CT_CONTROLS_GROUP` types of controls only. Autoscroll will wait `ctrlAutoScrollDelay` seconds (must be  > 0) and then will scroll the scroll bar down to the bottom. `ctrlAutoScrollSpeed` defines the speed with which scrollbar is scrolled. If `ctrlAutoScrollRewind` is `true`, the control will fade out, immediately rewind to the top, then fade in, wait `ctrlAutoScrollDelay` seconds and then repeat the scrolling in a loop. If user focuses on the control, autoscrolling is interrupted.",
            "examples": [
                {
                    "text": "```sqf\n_ctrlDelay = ctrlAutoScrollDelay _ctrlGroup;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control` - [[DialogControls-ListBoxes|CT_LISTBOX]] or `CT_CONTROLS_GROUP`"
                        }
                    ],
                    "outline": "`ctrlAutoScrollDelay` control",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlAutoScrollDelay"
        },
        "configuration": {
            "label": "ctrlAutoScrollDelay",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if auto-scroll should move back to start after it reaches the end.\n\n\n\nAutorscroll is available for [[DialogControls-ListBoxes|CT_LISTBOX]] and `CT_CONTROLS_GROUP` types of controls only. Autoscroll will wait `ctrlAutoScrollDelay` seconds (must be  > 0) and then will scroll the scroll bar down to the bottom. `ctrlAutoScrollSpeed` defines the speed with which scrollbar is scrolled. If `ctrlAutoScrollRewind` is `true`, the control will fade out, immediately rewind to the top, then fade in, wait `ctrlAutoScrollDelay` seconds and then repeat the scrolling in a loop. If user focuses on the control, autoscrolling is interrupted.",
            "examples": [
                {
                    "text": "```sqf\n_ctrlRewind = ctrlAutoScrollRewind _ctrlGroup;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control` - [[DialogControls-ListBoxes|CT_LISTBOX]] or `CT_CONTROLS_GROUP`"
                        }
                    ],
                    "outline": "`ctrlAutoScrollRewind` control",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlAutoScrollRewind"
        },
        "configuration": {
            "label": "ctrlAutoScrollRewind",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns number of seconds to auto-scroll one line. -1 if auto-scroll is disabled. -2 if scrollbar not present.\n\n\nAutoscroll is available for [[DialogControls-ListBoxes|CT_LISTBOX]] and `CT_CONTROLS_GROUP` types of controls only. Autoscroll will wait `ctrlAutoScrollDelay` seconds (must be  > 0) and then will scroll the scroll bar down to the bottom. `ctrlAutoScrollSpeed` defines the speed with which scrollbar is scrolled. If `ctrlAutoScrollRewind` is `true`, the control will fade out, immediately rewind to the top, then fade in, wait `ctrlAutoScrollDelay` seconds and then repeat the scrolling in a loop. If user focuses on the control, autoscrolling is interrupted.",
            "examples": [
                {
                    "text": "```sqf\n_ctrlSpeed =  ctrlAutoScrollSpeed _ctrlGroup;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control` - [[DialogControls-ListBoxes|CT_LISTBOX]] or `CT_CONTROLS_GROUP`"
                        }
                    ],
                    "outline": "`ctrlAutoScrollSpeed` control",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlAutoScrollSpeed"
        },
        "configuration": {
            "label": "ctrlAutoScrollSpeed",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns control's background color.",
            "examples": [
                {
                    "text": "```sqf\nctrlBackgroundColor _control;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctrlBackgroundColor` control",
                    "returns": "`Array` in format [[Color|Color (RGBA)]]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlBackgroundColor"
        },
        "configuration": {
            "label": "ctrlBackgroundColor",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the current state of given `CT_CHECKBOXES` control. Since Arma 3 v1.72 it is possible to query multiple checkboxes by providing checkbox index. For more information see `CT_CHECKBOXES`.**NOTE**: The `**\"CheckBoxesSelChanged\"**` control EH returns the control, index of changed checkbox and its current checked state. The checked state however is not a `Boolean` but `Number` 0 or 1. To convert `ctrlChecked` command output into number as well, use `parseNumber` command",
            "examples": [
                {
                    "text": "```sqf\nctrlChecked _control;\n```"
                },
                {
                    "text": "```sqf\n_control ctrlChecked 3;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control` - `CT_CHECKBOXES` control. If control contain multiple checkboxes, only checkbox with index 0 is queried."
                        }
                    ],
                    "outline": "`ctrlChecked` control",
                    "returns": "`Boolean` - `true` checked, `false` unchecked"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control` - `CT_CHECKBOXES` control"
                        },
                        {
                            "name": "index",
                            "description": "`Number` - checkbox index"
                        }
                    ],
                    "outline": "control `ctrlChecked`  index",
                    "returns": "`Boolean` - `true` checked, `false` unchecked"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlChecked"
        },
        "configuration": {
            "label": "ctrlChecked",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the class name of a `Control` as it is defined in config. If you need config class of a game created `Display`, it is stored on display itself:\n\n```sqf\n_className = findDisplay 12 getVariable [\"BIS_fnc_initDisplay_configClass\", \"\"]; // \"RscDiary\"\n```",
            "examples": [
                {
                    "text": "List class names of all controls present on display 46:\n\n```sqf\n\n_return = [];\n{\n\t_return pushBack format [\"IDC: %1, className: %2\", ctrlIDC _x, ctrlClassName _x];\n} forEach (allControls findDisplay 46);\n\ncopyToClipboard (_return joinString endl);\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control ",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctrlClassName` control",
                    "returns": "`String` - class name"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlClassName"
        },
        "configuration": {
            "label": "ctrlClassName",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Commits control animation to last specified duration.\n**IMPORTANT**: The duration of the animation is not guaranteed to be exactly the same as the given time.",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlCommit 2; // make animation last approx. 2 seconds\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control` - control to animate"
                        },
                        {
                            "name": "time",
                            "description": "`Number` - animation duration"
                        }
                    ],
                    "outline": "control `ctrlCommit` time",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlCommit"
        },
        "configuration": {
            "label": "ctrlCommit",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check if the control animation is finished.",
            "examples": [
                {
                    "text": "```sqf\n_done = ctrlCommitted _control;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlName",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctrlCommitted` controlName",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlCommitted"
        },
        "configuration": {
            "label": "ctrlCommitted",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates a new control in the given display.\n\nThe control class could be an existing class from the [ main config](https://community.bistudio.com/wiki/configFile%20) or a custom class defined in the [ mission config](https://community.bistudio.com/wiki/missionConfigFile%20).\nThe main config is searched first, if the class does not exist there, the mission config is searched.\nSome of the common controls defined in the main config that can be used with this command:\n<spoiler text=\"Show list\">\n**NOTE**: This list contains controls which are guaranteed to work with this command. However, controls not listed here should work as well - as long as they are properly defined.\n\n{{{!}} class=\"wikitable\" width=\"100%\"\n! Class !! Description !! Available since\n{{!}}-\n{{!}} RscText {{!}}{{!}} simple text box {{!}}{{!}}\n{{!}}-\n{{!}} RscStructuredText {{!}}{{!}} text box which supports [structured text](https://community.bistudio.com/wiki/Structured%20Text) {{!}}{{!}}\n{{!}}-\n{{!}} RscTextMulti {{!}}{{!}} simple multiline text box {{!}}{{!}}\n{{!}}-\n{{!}} RscPicture {{!}}{{!}} simple picture box {{!}}{{!}}\n{{!}}-\n{{!}} RscPictureKeepAspect {{!}}{{!}} picture box that doesn't stretch picture {{!}}{{!}}\n{{!}}-\n{{!}} RscEdit {{!}}{{!}} input box {{!}}{{!}}\n{{!}}-\n{{!}} RscEditMulti {{!}}{{!}} multiline input box {{!}}{{!}}\n{{!}}-\n{{!}} RscEditReadOnly {{!}}{{!}} input box with [[DialogControls-EditBox | {{hl",
            "examples": [
                {
                    "text": "```sqf\n_display ctrlCreate [\"RscText\", 1234];\n```"
                },
                {
                    "text": "```sqf\n\n_map = findDisplay 46 ctrlCreate [\"RscMapControl\", -1];\n_multiLineText = findDisplay 46 ctrlCreate [\"RscTextMulti\", -1];\n_multiLineEdit = findDisplay 46 ctrlCreate [\"RscEditMulti\", -1];\n\n```"
                },
                {
                    "text": "```sqf\nmyControl = findDisplay 0 ctrlCreate [\"RscText\", 1234, findDisplay 0 displayCtrl 2300];\n```"
                },
                {
                    "text": "Create Tree View control with search. Available `**RscTreeSearch**` class is hardcoded to be used with `**RscEdit**` with idc `**645**`.\nExample below demonstrates how to. After tree is generated, try typing something in the top box.\n\n```sqf\n\n0 spawn \n{\n\tdisableSerialization;\n\n\t_display = (if (is3DEN) then {findDisplay 313} else {[] call BIS_fnc_displayMission}) createDisplay \"RscDisplayEmpty\";\n\n\t_edit = _display ctrlCreate [\"RscEdit\", 645];\n\t_edit ctrlSetPosition [0,0,1,0.04];\n\t_edit ctrlSetBackgroundColor [0,0,0,1];\n\t_edit ctrlCommit 0;\n\n\t_tv = _display ctrlCreate [\"RscTreeSearch\", -1];\n\t_tv ctrlSetFont \"EtelkaMonospacePro\";\n\t_tv ctrlSetFontHeight 0.03;\n\t_tv ctrlSetPosition [0,0.06,1,0.94];\n\t_tv ctrlSetBackgroundColor [0,0,0,1];\n\t_tv ctrlCommit 0;\n\n\t_classes = \"true\" configClasses (configFile >> \"CfgVehicles\");\n\n\tfor \"_i\" from 0 to 5 do\n\t{\n\t\t_tv tvAdd [[], configName selectRandom _classes];\n\t\tfor \"_j\" from 0 to 5 do\n\t\t{\n\t\t\t_tv tvAdd [[_i], configName selectRandom _classes];\n\t\t\tfor \"_k\" from 0 to 5 do\n\t\t\t{\n\t\t\t\t_tv tvAdd [[_i, _j], configName selectRandom _classes];\n\t\t\t\tfor \"_n\" from 0 to 5 do\n\t\t\t\t{\n\t\t\t\t\t_tv tvAdd [[_i, _j, _k], configName selectRandom _classes];\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t};\n};\n\n```"
                },
                {
                    "text": "Create a simple submit edit box and show content in hint:\n\n```sqf\n\ndisableSerialization;\nprivate _display = findDisplay 46 createDisplay \"RscDisplayEmpty\";\nprivate _ctrlGroup = _display ctrlCreate [\"RscControlsGroupNoScrollbars\", -1];\nprivate _ctrlBackground = _display ctrlCreate [\"RscTextMulti\", -1, _ctrlGroup];\nIDD_EDIT_BOX = 123;\nprivate _ctrlEdit = _display ctrlCreate [\"RscEditMulti\", IDD_EDIT_BOX, _ctrlGroup];\nprivate _ctrlButton = _display ctrlCreate [\"RscShortcutButton\", -1, _ctrlGroup];\n_ctrlGroup ctrlSetPosition [0.5, 0.5, 0, 0];\n_ctrlGroup ctrlCommit 0;\n_ctrlBackground ctrlSetPosition [0, 0, 0.5, 0.5];\n_ctrlBackground ctrlSetBackgroundColor [0.5, 0.5, 0.5, 0.9];\n_ctrlBackground ctrlSetText \"ENTER TEXT:\";\n_ctrlBackground ctrlEnable false;\n_ctrlBackground ctrlCommit 0;\n_ctrlEdit ctrlSetPosition [0.01, 0.05, 0.48, 0.34];\n_ctrlEdit ctrlSetBackgroundColor [0, 0, 0, 0.5];\n_ctrlEdit ctrlCommit 0;\n_ctrlButton ctrlSetPosition [0.185, 0.42, 0.13, 0.05];\n_ctrlButton ctrlCommit 0;\n_ctrlButton ctrlSetText \"SUBMIT\";\n_ctrlButton ctrlAddEventHandler [\"ButtonClick\", \n{\n\tparams [\"_ctrl\"];\n\t_display = ctrlParent _ctrl;\n\t_text = ctrlText (_display displayCtrl IDD_EDIT_BOX);\n\tif (_text == \"\") then { _text = \"EMPTY\" };\n\thint _text;\n\t_display closeDisplay 1;\n}];\nctrlSetFocus _ctrlEdit;\n_ctrlGroup ctrlSetPosition [0.25, 0.25, 0.5, 0.5];\n_ctrlGroup ctrlCommit 0.1;\nplaySound \"Hint3\";\n\n```"
                },
                {
                    "text": "```sqf\n\n// since {{arma3}} v2.14\nfindDisplay 46 createDisplay \"RscDisplayEmpty\" ctrlCreate [configFile >> \"RscDisplayBootcampMsgBox\" >> \"controls\" >> \"BootcampMessageBox\", -1];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "display",
                            "description": "`Display` - display in which control will be created"
                        },
                        {
                            "name": "class",
                            "description": "`String` or {{GVI|arma3|2.14"
                        },
                        {
                            "name": "idc",
                            "description": "`Number` - IDC of the new control. Use -1 if not needed\n**WARNING**: Be careful when setting the IDC to `**-1**` if the GUI also contains a `CT_LISTNBOX` since `**idcLeft**` and `**idcRight**` by default have <syntaxhighlight lang=\"cpp\" inline>idc = -1;</syntaxhighlight>."
                        },
                        {
                            "name": "controlsGroup",
                            "description": "`Control` - (Optional, default `controlNull`) creates controls in existing controls group"
                        }
                    ],
                    "outline": "display `ctrlCreate` [class, idc, controlsGroup]",
                    "returns": "`Control`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlCreate"
        },
        "configuration": {
            "label": "ctrlCreate",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Deletes given control. The control has to be created either by script with `ctrlCreate` or to have `**deletable**` property in config set to 1. Use `ctrlShow` `false` and `ctrlEnable` `false` to disable controls that cannot be deleted. Returns `Boolean` indicating  whether the deletion was successful.\n**WARNING**: Using `ctrlDelete` in a [UI eventhandler](https://community.bistudio.com/wiki/User_Interface_Event_Handlers) called by the to be deleted control will crash the game! This also happens when a controls group is deleted that contains the \"calling\" control.",
            "examples": [
                {
                    "text": "```sqf\nctrlDelete ((findDisplay 20000) displayCtrl 20001);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctrlDelete` control",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlDelete"
        },
        "configuration": {
            "label": "ctrlDelete",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enables or disables a control of the currently active user dialog.\nDisabled controls cannot be clicked onto.\nRead [Arma: GUI Configuration](https://community.bistudio.com/wiki/Arma%3A%20GUI%20Configuration) for more information about user dialogs and controls.",
            "examples": [
                {
                    "text": "```sqf\nctrlEnable [100, false];\n```"
                },
                {
                    "text": "```sqf\n_ctrl ctrlEnable false;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - control IDC"
                        },
                        {
                            "name": "enable",
                            "description": "`Boolean` - `true` to enable the control, `false` to disable it"
                        }
                    ],
                    "outline": "`ctrlEnable` [idc, enable]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "controlName",
                            "description": "`Control`"
                        },
                        {
                            "name": "enable",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "controlName `ctrlEnable` enable",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/ctrlEnable"
        },
        "configuration": {
            "label": "ctrlEnable",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns if a control on the currently active user dialog is enabled. Disabled controls cannot be focused. Read [Arma: GUI Configuration](https://community.bistudio.com/wiki/Arma%3A%20GUI%20Configuration) for more information about user dialogs and controls.",
            "examples": [
                {
                    "text": "```sqf\n\nif !(ctrlEnabled 100) then\n{\n\tctrlEnable [100, true];\n};\n\n```"
                },
                {
                    "text": "```sqf\n_enabled = ctrlEnabled _control;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - control's IDC"
                        }
                    ],
                    "outline": "`ctrlEnabled` idc",
                    "returns": "`Boolean` - `true` if the control is enabled, `false` if not"
                },
                {
                    "parameters": [
                        {
                            "name": "controlName",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctrlEnabled` controlName",
                    "returns": "`Boolean` - `true` if the control is enabled, `false` if not"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/ctrlEnabled"
        },
        "configuration": {
            "label": "ctrlEnabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the current fade factor of control.\n\n{{ Feature | Informative | Despite having <syntaxhighlight lang=\"cpp\" inline>fade = 1;</syntaxhighlight> inside a control's config, <sqf inline>ctrlFade will **still report a fade of 0**.\n\nOnly the value actually set by `ctrlSetFade` will be returned by `ctrlFade`.}}",
            "examples": [
                {
                    "text": "```sqf\n_fade = ctrlFade _control;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlName",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctrlFade` controlName",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlFade"
        },
        "configuration": {
            "label": "ctrlFade",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns control's font size, usually `**sizeEx**` value (see `ctrlSetFontHeight`).",
            "examples": [
                {
                    "text": "```sqf\nctrlFontHeight _control;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctrlFontHeight` control",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlFontHeight"
        },
        "configuration": {
            "label": "ctrlFontHeight",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns control's foreground color.",
            "examples": [
                {
                    "text": "```sqf\nctrlForegroundColor _control;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctrlForegroundColor` control",
                    "returns": "`Array` in format [[Color|Color (RGBA)]]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlForegroundColor"
        },
        "configuration": {
            "label": "ctrlForegroundColor",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` when HTML content was successfully loaded.",
            "examples": [
                {
                    "text": "```sqf\n_control htmlLoad \"test.html\";\nif (!ctrlHTMLLoaded _control) then {\n\thint \"Loading test.html failed!\";\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctrlHTMLLoaded` control",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlHTMLLoaded"
        },
        "configuration": {
            "label": "ctrlHTMLLoaded",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns control IDC.",
            "examples": [
                {
                    "text": "```sqf\nctrlIDC _ctrl;\n```"
                },
                {
                    "text": "```sqf\nctrlIDC controlNull; // returns -1\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctrlIDC`  control",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlIDC"
        },
        "configuration": {
            "label": "ctrlIDC",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns display IDD.",
            "examples": [
                {
                    "text": "```sqf\nctrlIDD findDisplay 46; //46\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "display",
                            "description": "`Display`"
                        }
                    ],
                    "outline": "`ctrlIDD`  display",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlIDD"
        },
        "configuration": {
            "label": "ctrlIDD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds the next frame to the map animation.",
            "examples": [
                {
                    "text": "```sqf\n_map ctrlMapAnimAdd [1, 0.1, getMarkerPos \"anim1\"];\nctrlMapAnimCommit _map;\n```"
                },
                {
                    "text": "Center map on player:\n\n```sqf\n\n_ctrl ctrlMapAnimAdd [0, 0.05, player];\nctrlMapAnimCommit _ctrl;\n\n```"
                },
                {
                    "text": "```sqf\n\n_map ctrlMapSetPosition [];\n_map ctrlMapAnimAdd [1, 0.1, getMarkerPos \"anim1\"];\nctrlMapAnimCommit _map;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control` - `CT_MAP` control"
                        },
                        {
                            "name": "time",
                            "description": "`Number` - duration of the animation in seconds"
                        },
                        {
                            "name": "zoom",
                            "description": "`Number` - zoom in range from 0.001 (max) to 1 (min). Custom map scales can be set in map control's config. See also `ctrlMapScale`"
                        },
                        {
                            "name": "position",
                            "description": "`Array` or `Object` - formats: [Position2D](https://community.bistudio.com/wiki/Position%23Introduction), [Position3D](https://community.bistudio.com/wiki/Position%23Introduction), `Object`"
                        }
                    ],
                    "outline": "map `ctrlMapAnimAdd` [time, zoom, position]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/ctrlMapAnimAdd"
        },
        "configuration": {
            "label": "ctrlMapAnimAdd",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Clears the map animation.",
            "examples": [
                {
                    "text": "```sqf\nctrlMapAnimClear _ctrlMap;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlName",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctrlMapAnimClear` controlName",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/ctrlMapAnimClear"
        },
        "configuration": {
            "label": "ctrlMapAnimClear",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Plays the map animation.",
            "examples": [
                {
                    "text": "Center map on player:\n\n```sqf\n\n_ctrl ctrlMapAnimAdd [0, 0.05, player];\nctrlMapAnimCommit _ctrl;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mapControl",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctrlMapAnimCommit`  mapControl",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/ctrlMapAnimCommit"
        },
        "configuration": {
            "label": "ctrlMapAnimCommit",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks whether the map animation has finished.",
            "examples": [
                {
                    "text": "```sqf\n_isDone = ctrlMapAnimDone _ctrlMap;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlName",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctrlMapAnimDone` controlName",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/ctrlMapAnimDone"
        },
        "configuration": {
            "label": "ctrlMapAnimDone",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Changes the default cursor that appears when interacting with a map control to a custom one. Use an empty string to restore the default cursor.\n**IMPORTANT**: Before Arma 3, if the specified cursor does not exist the default is used and no error is produced.\n\nIn Arma 3, this would result in the following error: `**\"No entry 'bin\\config.bin/CfgWrapperUI/Cursors'\"**`.\n}}\nThe cursor is the name of a config entry from _CfgWrapperUI / Cursors_. This command has the following specifics:\n* When used on the Main Map (<sqf inline>findDisplay 12 displayCtrl 51), it is possible to override multiple default cursors. For example, while leaving default \"Arrow\" intact, it is possible to just override \"Scroll\" with e.g \"Wait\" (See _Example 3_)\n* When used on a custom map, for example user made Mini Map, there is only one single cursor \"\" for everything, therefore only this cursor can be overridden (see _Example 4_ on how to override it)\nSome possible class names (See [ctrlMapCursor/cursors](https://community.bistudio.com/wiki/ctrlMapCursor%2Fcursors) for the whole list):\n{{Columns|4|\n* Arrow\n* Track\n* Move\n* Scroll\n* Rotate\n* Track3D\n* Move3D\n* Rotate3D\n* Raise3D\n* Wait\n* HC_move\n* HC_overFriendly\n* HC_overEnemy\n* HC_overMission\n* HC_unsel",
            "examples": [
                {
                    "text": "```sqf\n_map ctrlMapCursor [\"Track\", \"Arrow\"];\n```"
                },
                {
                    "text": "```sqf\n\nuiNamespace setVariable [\"_map\", findDisplay 12 displayCtrl 51];\n(uiNamespace getVariable \"_map\") ctrlMapCursor [\"Track\", \"HC_overFriendly\"];\n\n```"
                },
                {
                    "text": "```sqf\nfindDisplay 12 displayCtrl 51 ctrlMapCursor [\"Scroll\", \"Wait\"];\n```"
                },
                {
                    "text": "Cycle through all available cursors over custom map:\n\n```sqf\n\n[] spawn\n{\n\tdisableSerialization;\n\t_map = findDisplay 46 createDisplay \"RscCredits\" ctrlCreate [\"RscMapControl\", -1];\n\t_map ctrlSetPosition [0,0,1,1];\n\t_map ctrlCommit 0;\n\t{\n\t\t_map ctrlMapCursor [\"\", configName _x]; //<-- the actual usage\n\t\thint format [\"Current cursor: %1\", configName _x];\n\t\tsleep 1;\n\t}\n\tforEach (\"true\" configClasses (configFile >> \"CfgWrapperUI\" >> \"Cursors\"));\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control` - map control"
                        },
                        {
                            "name": "defaultCursor",
                            "description": "`String` - cursor class name, **case-sensitive**"
                        },
                        {
                            "name": "newCursor",
                            "description": "`String` - cursor class name, **case-sensitive**"
                        }
                    ],
                    "outline": "control `ctrlMapCursor` [defaultCursor, newCursor]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlMapCursor"
        },
        "configuration": {
            "label": "ctrlMapCursor",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the current orientation angle of the map control in degrees.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _mapControl = findDisplay 12 displayCtrl 51; // get the map\nprivate _dir = ctrlMapDir _mapControl; // returns 0 as the main map does not autorotate\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctrlMapDir` ctrl",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlMapDir"
        },
        "configuration": {
            "label": "ctrlMapDir",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns description of map sign mouse cursor is over. Works with in-game map as well as 2D editor map in edit mode.",
            "examples": [
                {
                    "text": "```sqf\n(uiNamespace getVariable \"_map\") ctrlMapCursor [\"Track\",\"HC_overFriendly\"];\n\n_mouseover = if (count (ctrlMapMouseOver (uiNamespace getVariable \"_map\")) > 0) then\n{\n\tctrlMapMouseOver (uiNamespace getVariable \"_map\")\n}\nelse\n{\n\t[\"\"]\n};\n\nif (_mouseover select 0 == \"task\" && str(_logic getVariable \"onTaskAssigned\") != str{}) then\n{\n\t//--- Task\n\t(uiNamespace getVariable \"_map\") ctrlMapCursor [\"Track\",\"HC_overMission\"];\n}\nelse\n{\n\t//--- Waypoint\n\t(uiNamespace getVariable \"_map\") ctrlMapCursor [\"Track\",\"HC_move\"];\n};\n```"
                },
                {
                    "text": "```sqf\nonEachFrame {hintSilent str ctrlMapMouseOver (findDisplay 12 displayCtrl 51)};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control` - map control"
                        }
                    ],
                    "outline": "`ctrlMapMouseOver` control",
                    "returns": "`Array` - possible values:\n* [\"unit\", `Object`]\n* [\"vehicle\", `Object`]\n* [\"vehicleGroup\", `Object`]\n* [\"object\", `Object`]\n* [\"waypoint\", `Waypoint`]\n* [\"trigger\", `Object`]\n* [\"marker\", `String`]\n* [\"task\", `Task`]\n* [\"customMark\"]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlMapMouseOver"
        },
        "configuration": {
            "label": "ctrlMapMouseOver",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "A getter for `ctrlMapSetPosition`. Returns map position in format [x, y, w, h]. If map is inside a Controls Group, the x and y position is relative to the Controls Group top left corner.",
            "examples": [
                {
                    "text": "```sqf\nctrlMapPosition _map;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control` - [Map control](https://community.bistudio.com/wiki/CT_MAP)"
                        }
                    ],
                    "outline": "`ctrlMapPosition` map",
                    "returns": "`Array` - [x, y, w, h]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlMapPosition"
        },
        "configuration": {
            "label": "ctrlMapPosition",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the current scale of given map control.",
            "examples": [
                {
                    "text": "```sqf\n_control = (findDisplay 12) displayCtrl 51; //Arma 3\n_scale = ctrlMapScale _control; //returns number from 1 to 0.001\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctrlMapScale` ctrl",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlMapScale"
        },
        "configuration": {
            "label": "ctrlMapScale",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Converts map screen coordinates into world coordinates. Unlike `posScreenToWorld`, this command returns world position is format [x, y], otherwise it is identical to `posScreenToWorld`.",
            "examples": [
                {
                    "text": "```sqf\n_worldCoord = _control ctrlMapScreenToWorld _ScreenCoord;\n```"
                },
                {
                    "text": "```sqf\n_worldCoord = _control ctrlMapScreenToWorld [_x, _y];\n```"
                },
                {
                    "text": "```sqf\n_worldCoord = findDisplay 12 displayCtrl 51 ctrlMapScreenToWorld [0.5, 0.5];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control` - map control"
                        },
                        {
                            "name": "x",
                            "description": "`Number` - screen X"
                        },
                        {
                            "name": "y",
                            "description": "`Number` - screen Y"
                        }
                    ],
                    "outline": "control `ctrlMapScreenToWorld` [x, y]",
                    "returns": "`Array` - world coordinates in format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlMapScreenToWorld"
        },
        "configuration": {
            "label": "ctrlMapScreenToWorld",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets position and size of the given map control and recalculates control center. The effect is immediate and no `ctrlCommit` is necessary, unlike with `ctrlSetPosition` command.\n**NOTE**: The [Map control](https://community.bistudio.com/wiki/CT_MAP) is different from other controls and normally does not behave well inside [Controls Groups](https://community.bistudio.com/wiki/CT_CONTROLS_GROUP). When this command is used on the [Map control](https://community.bistudio.com/wiki/CT_MAP) inside a [Controls Group](https://community.bistudio.com/wiki/CT_CONTROLS_GROUP), The _x_ and _y_ will be treated as relative position to the top left of [Controls Group](https://community.bistudio.com/wiki/CT_CONTROLS_GROUP). Use this command to set position before you use `ctrlMapAnimAdd`. Use this command to update [Map control](https://community.bistudio.com/wiki/CT_MAP) after its position or size had been changed or the [Map control](https://community.bistudio.com/wiki/CT_MAP) was created dynamically (Example 2). If you move [Controls Group](https://community.bistudio.com/wiki/CT_CONTROLS_GROUP), use this command to refresh [Map control](https://community.bistudio.com/wiki/CT_MAP) (Example 3).",
            "examples": [
                {
                    "text": "```sqf\n_map ctrlMapSetPosition [0,0,1,1];\n```"
                },
                {
                    "text": "```sqf\n\n_map ctrlSetPosition [0.5, 0.5, 0.5, 0.5];\n_map ctrlCommit 0;\n_map ctrlMapSetPosition []; // sync\n\n```"
                },
                {
                    "text": "```sqf\n\nwith localNamespace do\n{\n\tprivate _display = findDisplay 46 createDisplay \"RscDisplayEmpty\";\n\tprivate _ctrlGroup = _display ctrlCreate [\"RscControlsGroup\", -1];\n\tprivate _ctrlText = _display ctrlCreate [\"RscText\", -1, _ctrlGroup];\n\t_ctrltext ctrlSetPosition [0, 0, 1, 1];\n\t_ctrlText ctrlSetBackgroundColor [1, 0, 0, 0.5];\n\t_ctrlText ctrlCommit 0;\n\tprivate _ctrlMap = _display ctrlCreate [\"RscMapControl\", -1, _ctrlGroup];\n\t_ctrlMap ctrlMapSetPosition [0, 0, 0.5, 0.5]; // effect is immediate\n\t_ctrlMap ctrlMapAnimAdd [0, ctrlMapScale _ctrlMap, player];\n\tctrlMapAnimCommit _ctrlMap;\n\t_ctrlGroup ctrlSetPosition [safeZoneX, safeZoneY, 1, 1];\n\t_ctrlGroup ctrlCommit 0.3; // non instant transition\n\t_ctrlMap ctrlMapSetPosition []; // instant sync to new _ctrlGroup position\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control` - [Map control](https://community.bistudio.com/wiki/CT_MAP)"
                        },
                        {
                            "name": "x",
                            "description": "`Number` - (Optional) Left top x of map control"
                        },
                        {
                            "name": "y",
                            "description": "`Number` - (Optional) Left top y of map control"
                        },
                        {
                            "name": "w",
                            "description": "`Number` - (Optional) Width of map control"
                        },
                        {
                            "name": "h",
                            "description": "`Number` - (Optional) Height of map control"
                        }
                    ],
                    "outline": "map `ctrlMapSetPosition` [x, y, w, h]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlMapSetPosition"
        },
        "configuration": {
            "label": "ctrlMapSetPosition",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Converts world coordinates into map screen coordinates. This command is identical to `posWorldToScreen`.",
            "examples": [
                {
                    "text": "```sqf\n_screenCoord = _control ctrlMapWorldToScreen _worldCoord;\n```"
                },
                {
                    "text": "```sqf\n_screenCoord = _control ctrlMapWorldToScreen position player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control ",
                            "description": "`Control` - map control"
                        },
                        {
                            "name": "position ",
                            "description": "`Array` - world position in format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position3D](https://community.bistudio.com/wiki/Position%23Introduction)"
                        }
                    ],
                    "outline": "control `ctrlMapWorldToScreen` position",
                    "returns": "`Array` - screen coordinates in format [x, y]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlMapWorldToScreen"
        },
        "configuration": {
            "label": "ctrlMapWorldToScreen",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns model used in 3D-[Dialog](https://community.bistudio.com/wiki/Arma%3A%20GUI%20Configuration).",
            "examples": [
                {
                    "text": "```sqf\n_model = ctrlModel _control3D;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control ",
                            "description": "`Control` - 3D control"
                        }
                    ],
                    "outline": "`ctrlModel` control",
                    "returns": "`String` - model path"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlModel"
        },
        "configuration": {
            "label": "ctrlModel",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `vectorDir` and `vectorUp` of the model used in 3D-[Dialogs](https://community.bistudio.com/wiki/Arma%3A%20GUI%20Configuration).",
            "examples": [
                {
                    "text": "```sqf\n_vectorDirAndUp = ctrlModelDirAndUp _control3D;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control ",
                            "description": "`Control` - 3D control"
                        }
                    ],
                    "outline": "`ctrlModelDirAndUp` control",
                    "returns": "`Array` of `Vector3D`s format [<nowiki/>`vectorDir`, `vectorUp`]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlModelDirAndUp"
        },
        "configuration": {
            "label": "ctrlModelDirAndUp",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns 3D control model scale.",
            "examples": [
                {
                    "text": "```sqf\n_currentScale = ctrlModelScale _ctrl3D;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control ",
                            "description": "`Control` - 3D control"
                        }
                    ],
                    "outline": "`ctrlModelScale`  control",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlModelScale"
        },
        "configuration": {
            "label": "ctrlModelScale",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns position of the mouse on the screen relative to UI Control in UI coordinates. Also works within `CT_CONTROLS_GROUP`s. In that case, returned position is relative to the position of the group.",
            "examples": [
                {
                    "text": "```sqf\nprivate _mouseRelPos = ctrlMousePosition _ctrl;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctrlMousePosition` control",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlMousePosition"
        },
        "configuration": {
            "label": "ctrlMousePosition",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the parent `Display` of the given control. For parent `Control`s group see `ctrlParentControlsGroup`.",
            "examples": [
                {
                    "text": "```sqf\n_display = ctrlParent _control;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctrlParent` control",
                    "returns": "`Display`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlParent"
        },
        "configuration": {
            "label": "ctrlParent",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the parent control of a given child control. If the control is not part of a `CT_CONTROLS_GROUP` control then `controlNull` is returned. To return parent `Display` of the control use `ctrlParent`.",
            "examples": [
                {
                    "text": "```sqf\n_ctrlCombo = _ctrl controlsGroupCtrl 100; // control\nctrlParentControlsGroup _ctrlCombo; // parent control group (_ctrl)\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control` - child control"
                        }
                    ],
                    "outline": "`ctrlParentControlsGroup` ctrl",
                    "returns": "`Control`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlParentControlsGroup"
        },
        "configuration": {
            "label": "ctrlParentControlsGroup",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the current position of 2D control as `**[x, y, w, h]**` array. For 3D control it returns relative `**[x, y, z]**`.\n\nIf the control is within a `CT_CONTROLS_GROUP`, the returned position will be relative to the group's position.\n\nIf the control is a `CT_CONTROLS_TABLE` header or row the returned position is relative to the table's position.",
            "examples": [
                {
                    "text": "```sqf\n_pos = ctrlPosition _control;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlName",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctrlPosition` controlName",
                    "returns": "`Array` in format `**[x, y, w, h]**` (2D) or `**[x, y, z]**` (3D)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlPosition"
        },
        "configuration": {
            "label": "ctrlPosition",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Remove all event handlers from the given control.",
            "examples": [
                {
                    "text": "```sqf\n_ctrlButton ctrlRemoveAllEventHandlers \"ButtonDown\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "handlerName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "control `ctrlRemoveAllEventHandlers` handlerName",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlRemoveAllEventHandlers"
        },
        "configuration": {
            "label": "ctrlRemoveAllEventHandlers",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Remove a given event handler from the given control.",
            "examples": [
                {
                    "text": "```sqf\n_map ctrlRemoveEventHandler [\"Draw\", _id];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "type",
                            "description": "`String`"
                        },
                        {
                            "name": "id",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "control `ctrlRemoveEventHandler` [type, id]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlRemoveEventHandler"
        },
        "configuration": {
            "label": "ctrlRemoveEventHandler",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the current scale of the control.",
            "examples": [
                {
                    "text": "```sqf\n_scale = ctrlScale _control;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctrlScale` control",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlScale"
        },
        "configuration": {
            "label": "ctrlScale",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns scroll values for current scrollbars in range 0...1 (-1 if not applicable) for the following controls:\n{{Columns|2|\n* `CT_CONTROLS_TABLE`\n* `CT_CONTROLS_GROUP`\n* `CT_TREE`\n* `CT_LISTBOX`\n* `CT_COMBO`\n* `CT_XCOMBO`\n* `CT_LISTNBOX`\n* `CT_LISTNBOX_CHECKABLE`\n}}",
            "examples": [
                {
                    "text": "```sqf\nprivate _scrollvalues = ctrlScrollValues _ctrl;\n```"
                },
                {
                    "text": "```sqf\n\n// ControlsGroup\nprivate _disp = findDisplay 46 createDisplay \"RscDisplayEmpty\";\nprivate _ctrlGrp = _disp ctrlCreate [\"RscControlsGroup\", -1];\nprivate _ctrl = _disp ctrlCreate [\"RscTree\", -1, _ctrlGrp];\n_ctrl tvAdd [[], \"Root\"];\nfor \"_i\" from 1 to 25 do\n{\n\t_ctrl tvAdd [[0], format [\"Tree Item %1\", _i]];\n};\n_ctrl ctrlSetPosition [0,0,0.3,1.2];\n_ctrl ctrlCommit 0;\ntvExpandAll _ctrl;\n_ctrlGrp ctrlSetPosition [0,0,0.2,0.3];\n_ctrlGrp ctrlCommit 0;\n \nuiNamespace setVariable [\"_ctrl\", _ctrlGrp];\nonEachFrame\n{\n\thintSilent str ctrlScrollValues (uiNamespace getVariable [\"_ctrl\", controlNull]);\n};\n0 spawn\n{\n\tsleep 1;\n\tuiNamespace getVariable [\"_ctrl\", controlNull] ctrlSetScrollValues [0.3, -1];\n\tsleep 1;\n\tuiNamespace getVariable [\"_ctrl\", controlNull] ctrlSetScrollValues [-1, 0.3];\n\tsleep 1;\n\tuiNamespace getVariable [\"_ctrl\", controlNull] ctrlSetScrollValues [0.7, -1];\n\tsleep 1;\n\tuiNamespace getVariable [\"_ctrl\", controlNull] ctrlSetScrollValues [-1, 0.7];\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctrlScrollValues` control",
                    "returns": "`Array` of `Number`s in format [vScrollValue, hScrollValue]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlScrollValues"
        },
        "configuration": {
            "label": "ctrlScrollValues",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets text color of given control when it is selected.",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetActiveColor [1, 0, 0, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "color",
                            "description": "`Array` of [[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "control `ctrlSetActiveColor` color",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetActiveColor"
        },
        "configuration": {
            "label": "ctrlSetActiveColor",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the rotation of a control set as `**ST_PICTURE**`. Rotation will be done within the control boundaries, so if the X and Y are given off center, the picture may get clipped by the control boundaries. Only requires `ctrlCommit` when fourth parameter is set to `false`. Procedural textures filled controls do not rotate. Supported control types:\n* `CT_STATIC`\n* `CT_ACTIVETEXT` (Since Arma 3 v2.09.149642)\n\n**IMPORTANT**: Images that touch borders may \"bleed\" during rotation transformation, to avoid this, make sure the image has 1px transparent padding",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetAngle [25, 0.5, 0.5];\n```"
                },
                {
                    "text": "```sqf\nwith uiNamespace do\n{\n\tctrl = findDisplay 46 ctrlCreate [\"RscPictureKeepAspect\", -1];\n\tctrl ctrlSetPosition [0,0,1,1];\n\tctrl ctrlSetText \"A3\\Missions_F_Exp\\data\\Img\\lobby\\ui_campaign_lobby_background_tablet_radial_left_ca.paa\";\n\tctrl ctrlCommit 0;\n\tangle = 0;\n\tonEachFrame\n\t{\n\t\twith uiNamespace do\n\t\t{\n\t\t\tif (angle > 359) then {angle = 0};\n\t\t\tctrl ctrlSetAngle [angle, 0.5, 0.5];\n\t\t\tangle = angle + 1;\n\t\t};\n\t};\n};\n```"
                },
                {
                    "text": "```sqf\n_control ctrlSetAngle [25, 0.5, 0.5, false];\n_control ctrlCommit 1; // Rotation applies smoothly for 1 second.\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control` - picture control"
                        },
                        {
                            "name": "angle",
                            "description": "`Number` - rotation angle (clockwise)"
                        },
                        {
                            "name": "centerX",
                            "description": "`Number` - rotation center X in range 0 to 1. Control center is 0.5"
                        },
                        {
                            "name": "centerY",
                            "description": "`Number` - rotation center Y in range 0 to 1. Control center is 0.5"
                        },
                        {
                            "name": "now",
                            "description": "`Boolean` - (Optional, default `true`) if `false`, control will wait for `ctrlCommit` input for result to apply"
                        }
                    ],
                    "outline": "control `ctrlSetAngle` [angle, centerX, centerY, now]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetAngle"
        },
        "configuration": {
            "label": "ctrlSetAngle",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets number of second before auto-scroll starts/rewinds. Setter for `ctrlAutoScrollDelay`.\n\n\n\nAutorscroll is available for [[DialogControls-ListBoxes|CT_LISTBOX]] and `CT_CONTROLS_GROUP` types of controls only. Autoscroll will wait `ctrlAutoScrollDelay` seconds (must be  > 0) and then will scroll the scroll bar down to the bottom. `ctrlAutoScrollSpeed` defines the speed with which scrollbar is scrolled. If `ctrlAutoScrollRewind` is `true`, the control will fade out, immediately rewind to the top, then fade in, wait `ctrlAutoScrollDelay` seconds and then repeat the scrolling in a loop. If user focuses on the control, autoscrolling is interrupted.",
            "examples": [
                {
                    "text": "```sqf\n_ctrlGroup ctrlSetAutoScrollDelay 5;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control` - [[DialogControls-ListBoxes|CT_LISTBOX]] or `CT_CONTROLS_GROUP`"
                        },
                        {
                            "name": "delay",
                            "description": "`Number` - seconds to wait before scroll and/or rewind"
                        }
                    ],
                    "outline": "control `ctrlSetAutoScrollDelay` delay",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetAutoScrollDelay"
        },
        "configuration": {
            "label": "ctrlSetAutoScrollDelay",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Defines if scroll should rewind when auto-scroll reach end. Setter for `ctrlAutoScrollRewind`.\n\n\n\nAutorscroll is available for [[DialogControls-ListBoxes|CT_LISTBOX]] and `CT_CONTROLS_GROUP` types of controls only. Autoscroll will wait `ctrlAutoScrollDelay` seconds (must be  > 0) and then will scroll the scroll bar down to the bottom. `ctrlAutoScrollSpeed` defines the speed with which scrollbar is scrolled. If `ctrlAutoScrollRewind` is `true`, the control will fade out, immediately rewind to the top, then fade in, wait `ctrlAutoScrollDelay` seconds and then repeat the scrolling in a loop. If user focuses on the control, autoscrolling is interrupted.",
            "examples": [
                {
                    "text": "```sqf\n_ctrlGroup ctrlSetAutoScrollRewind true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control` - [[DialogControls-ListBoxes|CT_LISTBOX]] or `CT_CONTROLS_GROUP`"
                        },
                        {
                            "name": "set",
                            "description": "`Boolean` - `true` to enable rewind"
                        }
                    ],
                    "outline": "control `ctrlSetAutoScrollRewind` set",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetAutoScrollRewind"
        },
        "configuration": {
            "label": "ctrlSetAutoScrollRewind",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets number of second required to scroll to next line. If speed < 0, auto-scroll is disabled. Setter for `ctrlAutoScrollSpeed`.\n\n\n\nAutorscroll is available for [[DialogControls-ListBoxes|CT_LISTBOX]] and `CT_CONTROLS_GROUP` types of controls only. Autoscroll will wait `ctrlAutoScrollDelay` seconds (must be  > 0) and then will scroll the scroll bar down to the bottom. `ctrlAutoScrollSpeed` defines the speed with which scrollbar is scrolled. If `ctrlAutoScrollRewind` is `true`, the control will fade out, immediately rewind to the top, then fade in, wait `ctrlAutoScrollDelay` seconds and then repeat the scrolling in a loop. If user focuses on the control, autoscrolling is interrupted.",
            "examples": [
                {
                    "text": "```sqf\n_ctrlGroup ctrlSetAutoScrollSpeed 0.1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control` - [[DialogControls-ListBoxes|CT_LISTBOX]] or `CT_CONTROLS_GROUP`"
                        },
                        {
                            "name": "speed",
                            "description": "`Number` - seconds to autoscroll to the next line"
                        }
                    ],
                    "outline": "control `ctrlSetAutoScrollSpeed` speed",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetAutoScrollSpeed"
        },
        "configuration": {
            "label": "ctrlSetAutoScrollSpeed",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets background color of given control. Only affects:\n{{Columns|2|\n* `CT_COMBO`\n* `CT_STATIC`\n* `CT_STRUCTURED_TEXT`\n* `CT_MAP`\n* `CT_MAP_MAIN`\n* {{GVI|arma3|2.02",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetBackgroundColor [1, 0, 0, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "color",
                            "description": "`Array` of [[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "control `ctrlSetBackgroundColor` color",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetBackgroundColor"
        },
        "configuration": {
            "label": "ctrlSetBackgroundColor",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets checked state of a `CT_CHECKBOXES` control.",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetChecked true;\n```"
                },
                {
                    "text": "```sqf\n_control ctrlSetChecked [3, true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control` - `CT_CHECKBOXES` control. If control contain multiple checkboxes, only checkbox with index 0 is queried."
                        },
                        {
                            "name": "checked",
                            "description": "`Boolean` - `true` to check, `false` to uncheck the checkbox"
                        }
                    ],
                    "outline": "control `ctrlSetChecked` checked",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control` - `CT_CHECKBOXES` control"
                        },
                        {
                            "name": "index",
                            "description": "`Number` - checkbox index"
                        },
                        {
                            "name": "checked",
                            "description": "`Boolean` - `true` to check, `false` to uncheck the checkbox"
                        }
                    ],
                    "outline": "control `ctrlSetChecked` [index, checked]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetChecked"
        },
        "configuration": {
            "label": "ctrlSetChecked",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the colorDisabled attribute of a control.",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetDisabledColor [0.5, 0.5, 0.5, 0.5];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "color",
                            "description": "[[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "`ctrlSetDisabledColor` [idc, color]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "color",
                            "description": "[[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "ctrl `ctrlSetDisabledColor` color",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetDisabledColor"
        },
        "configuration": {
            "label": "ctrlSetDisabledColor",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "{{Feature|obsolete|Use `ctrlAddEventHandler` instead as it can stack event handlers.|arma2|1.00}}\nSets given event handler of given control: any previously added event handler is removed.\n\n{{Feature|informative|\n* See [User Interface Event Handlers](https://community.bistudio.com/wiki/User%20Interface%20Event%20Handlers) for the full list of handler names\n* See also [DIK KeyCodes](https://community.bistudio.com/wiki/DIK%20KeyCodes) for a list of key code constants relevant to key-related events like [KeyDown](https://community.bistudio.com/wiki/User_Interface_Event_Handlers%23onKeyDown) and [KeyUp](https://community.bistudio.com/wiki/User_Interface_Event_Handlers%23onKeyUp)\n}}\n\n**IMPORTANT**: When using the event names listed [here](https://community.bistudio.com/wiki/User%20Interface%20Event%20Handlers) with the `ctrlAddEventHandler`, `ctrlSetEventHandler`, `displayAddEventHandler` or `displaySetEventHandler` commands, the prefix \"on\" in the event name must be removed (e.g. **ButtonDown** instead of **onButtonDown**).",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetEventHandler [\"KeyDown\", \"\"];\n```"
                },
                {
                    "text": "```sqf\n(_display displayCtrl 108) ctrlSetEventHandler [\"LBSelChanged\",\"['ListChange',_this] call FireEvents\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlName",
                            "description": "`Control`"
                        },
                        {
                            "name": "handlerName",
                            "description": "`String`"
                        },
                        {
                            "name": "function",
                            "description": "`String` - should return a `Boolean` indicating that the event has handled this event fully or not and whether the engine should execute its default code or not afterwards"
                        }
                    ],
                    "outline": "controlName `ctrlSetEventHandler` [handlerName, function]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetEventHandler"
        },
        "configuration": {
            "label": "ctrlSetEventHandler",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets wanted transparency for control animation. Requires `ctrlCommit` to commit changes. To hide or show a control instantly, use `ctrlShow`.\n**NOTE**: \nIf there are multiple (interactable) controls on top of each other but the top-most control is faded using <sqf inline>ctrlSetFade 1,\nthis control will interfere with other controls that were defined earlier and in the exact same position.\nTo counter that, the faded control **must** be disabled with `ctrlEnable`.",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetFade 1;\n_control ctrlCommit 5;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlName",
                            "description": "`Control`"
                        },
                        {
                            "name": "fade",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "controlName `ctrlSetFade` fade",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetFade"
        },
        "configuration": {
            "label": "ctrlSetFade",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the input focus on given control.",
            "examples": [
                {
                    "text": "```sqf\nctrlSetFocus _control;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctrlSetFocus`  control",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetFocus"
        },
        "configuration": {
            "label": "ctrlSetFocus",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the font for given control (see [available fonts](https://community.bistudio.com/wiki/Fonts%23Available_Fonts))",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetFont \"TahomaB\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "fontName",
                            "description": "`String` - one of the fonts defined in CfgFontFamilies"
                        }
                    ],
                    "outline": "control `ctrlSetFont` fontName",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetFont"
        },
        "configuration": {
            "label": "ctrlSetFont",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets H1 font of given HTML control.",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetFontH1 \"TahomaB\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlName",
                            "description": "`Control`"
                        },
                        {
                            "name": "fontName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "controlName `ctrlSetFontH1` fontName",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetFontH1"
        },
        "configuration": {
            "label": "ctrlSetFontH1",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets H1 bold font of given HTML control.",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetFontH1B \"TahomaB\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlName",
                            "description": "`Control`"
                        },
                        {
                            "name": "fontName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "controlName `ctrlSetFontH1B` fontName",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetFontH1B"
        },
        "configuration": {
            "label": "ctrlSetFontH1B",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets H2 font of given HTML control",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetFontH2 \"TahomaB\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlName",
                            "description": "`Control`"
                        },
                        {
                            "name": "fontName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "controlName `ctrlSetFontH2` fontName",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetFontH2"
        },
        "configuration": {
            "label": "ctrlSetFontH2",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets H2 bold font of given HTML control.",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetFontH2B \"TahomaB\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlName",
                            "description": "`Control`"
                        },
                        {
                            "name": "fontName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "controlName `ctrlSetFontH2B` fontName",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetFontH2B"
        },
        "configuration": {
            "label": "ctrlSetFontH2B",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets H3 font of given HTML control.",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetFontH3 \"TahomaB\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlName",
                            "description": "`Control`"
                        },
                        {
                            "name": "fontName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "controlName `ctrlSetFontH3` fontName",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetFontH3"
        },
        "configuration": {
            "label": "ctrlSetFontH3",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets H3 bold font of given HTML control.",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetFontH3B \"TahomaB\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlName",
                            "description": "`Control`"
                        },
                        {
                            "name": "fontName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "controlName `ctrlSetFontH3B` fontName",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetFontH3B"
        },
        "configuration": {
            "label": "ctrlSetFontH3B",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets H4 font of given HTML control.",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetFontH4 \"TahomaB\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlName",
                            "description": "`Control`"
                        },
                        {
                            "name": "fontName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "controlName `ctrlSetFontH4` fontName",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetFontH4"
        },
        "configuration": {
            "label": "ctrlSetFontH4",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets H4 bold font of given HTML control.",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetFontH4B \"TahomaB\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlName",
                            "description": "`Control`"
                        },
                        {
                            "name": "fontName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "controlName `ctrlSetFontH4B` fontName",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetFontH4B"
        },
        "configuration": {
            "label": "ctrlSetFontH4B",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets H5 font of given HTML control.",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetFontH5 \"TahomaB\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlName",
                            "description": "`Control`"
                        },
                        {
                            "name": "fontName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "controlName `ctrlSetFontH5` fontName",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetFontH5"
        },
        "configuration": {
            "label": "ctrlSetFontH5",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets H5 bold font of given HTML control.",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetFontH5B \"TahomaB\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlName",
                            "description": "`Control`"
                        },
                        {
                            "name": "fontName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "controlName `ctrlSetFontH5B` fontName",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetFontH5B"
        },
        "configuration": {
            "label": "ctrlSetFontH5B",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets H6 font of given HTML control.",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetFontH6 \"TahomaB\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlName",
                            "description": "`Control`"
                        },
                        {
                            "name": "fontName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "controlName `ctrlSetFontH6` fontName",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetFontH6"
        },
        "configuration": {
            "label": "ctrlSetFontH6",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets H6 bold font of given HTML control.",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetFontH6B \"TahomaB\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlName",
                            "description": "`Control`"
                        },
                        {
                            "name": "fontName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "controlName `ctrlSetFontH6B` fontName",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetFontH6B"
        },
        "configuration": {
            "label": "ctrlSetFontH6B",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the `**sizeEx**` property for most controls as follows: \n* `**CT_MAP**` - \"sizeExNames\"\n* `**CT_HTML**` - \"P\" >> \"sizeEx\"\n* Other - \"sizeEx\"\n* {{GVI|arma3|2.02",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetFontHeight 0.05;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "size",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "control `ctrlSetFontHeight`  size",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetFontHeight"
        },
        "configuration": {
            "label": "ctrlSetFontHeight",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets H1 font size of given HTML control.",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetFontHeightH1 0.05;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlName",
                            "description": "`Control`"
                        },
                        {
                            "name": "height",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "controlName `ctrlSetFontHeightH1` height",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetFontHeightH1"
        },
        "configuration": {
            "label": "ctrlSetFontHeightH1",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets H2 font size of given HTML control.",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetFontHeightH2 0.05;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlName",
                            "description": "`Control`"
                        },
                        {
                            "name": "height",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "controlName `ctrlSetFontHeightH2` height",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetFontHeightH2"
        },
        "configuration": {
            "label": "ctrlSetFontHeightH2",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets H3 font size of given HTML control.",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetFontHeightH3 0.05;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlName",
                            "description": "`Control`"
                        },
                        {
                            "name": "height",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "controlName `ctrlSetFontHeightH3` height",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetFontHeightH3"
        },
        "configuration": {
            "label": "ctrlSetFontHeightH3",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets H4 font size of given HTML control.",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetFontHeightH4 0.05;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlName",
                            "description": "`Control`"
                        },
                        {
                            "name": "height",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "controlName `ctrlSetFontHeightH4` height",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetFontHeightH4"
        },
        "configuration": {
            "label": "ctrlSetFontHeightH4",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets H5 font size of given HTML control.",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetFontHeightH5 0.05;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlName",
                            "description": "`Control`"
                        },
                        {
                            "name": "height",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "controlName `ctrlSetFontHeightH5` height",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetFontHeightH5"
        },
        "configuration": {
            "label": "ctrlSetFontHeightH5",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets H6 font size of given HTML control.",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetFontHeightH6 0.05;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlName",
                            "description": "`Control`"
                        },
                        {
                            "name": "height",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "controlName `ctrlSetFontHeightH6` height",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetFontHeightH6"
        },
        "configuration": {
            "label": "ctrlSetFontHeightH6",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the font size of the secondary text of given control.",
            "examples": [
                {
                    "text": "_control `ctrlSetFontHeightSecondary` 0.05;"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "value",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "ctrl `ctrlSetFontHeightSecondary` value",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetFontHeightSecondary"
        },
        "configuration": {
            "label": "ctrlSetFontHeightSecondary",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets P font of given HTML control or its size.",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetFontP \"TahomaB\";\n```"
                },
                {
                    "text": "```sqf\n_control ctrlSetFontP 0.05;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "fontOrSize",
                            "description": "`String` or `Number`"
                        }
                    ],
                    "outline": "control `ctrlSetFontP` fontOrSize",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetFontP"
        },
        "configuration": {
            "label": "ctrlSetFontP",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets P bold font of given HTML control.",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetFontPB \"TahomaB\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlName",
                            "description": "`Control`"
                        },
                        {
                            "name": "fontName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "controlName `ctrlSetFontPB` fontName",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetFontPB"
        },
        "configuration": {
            "label": "ctrlSetFontPB",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the font size of the secondary text of given control.",
            "examples": [
                {
                    "text": "_control `ctrlSetFontSecondary` \"TahomaB\";"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "fontClass",
                            "description": "`String` - font class"
                        }
                    ],
                    "outline": "ctrl `ctrlSetFontSecondary` fontClass",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetFontSecondary"
        },
        "configuration": {
            "label": "ctrlSetFontSecondary",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets foreground color of the given control.\n**NOTE**: Also try `ctrlSetTextColor`, if this command doesn't have the desired effect.",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetForegroundColor [1, 0, 0, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "color",
                            "description": "`Array` of [[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "control `ctrlSetForegroundColor` color",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetForegroundColor"
        },
        "configuration": {
            "label": "ctrlSetForegroundColor",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets model for 3D-[Dialogs](https://community.bistudio.com/wiki/Arma%3A%20GUI%20Configuration) (see [Arma 3: createSimpleObject/objects](https://community.bistudio.com/wiki/Arma%203%3A%20createSimpleObject%2Fobjects) for a p3d models' list).",
            "examples": [
                {
                    "text": "```sqf\n_control3D ctrlSetModel \"\\a3\\Ui_f\\objects\\Compass.p3d\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control ",
                            "description": "`Control` - 3D control"
                        },
                        {
                            "name": "model ",
                            "description": "`String` - model path"
                        }
                    ],
                    "outline": "control `ctrlSetModel` model",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetModel"
        },
        "configuration": {
            "label": "ctrlSetModel",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets orientation of 3D control model. It is similar to `setVectorDirAndUp` command for an object.",
            "examples": [
                {
                    "text": "```sqf\n_ctrl3D ctrlSetModelDirAndUp [[0,1,0],[0,0,1]]; //default orientation\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control ",
                            "description": "`Control` - 3D control"
                        },
                        {
                            "name": "dirAndUp",
                            "description": "`Array` format `ctrlModelDirAndUp` - [<nowiki/>`vectorDir`, `vectorUp`]"
                        }
                    ],
                    "outline": "control `ctrlSetModelDirAndUp` dirAndUp",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetModelDirAndUp"
        },
        "configuration": {
            "label": "ctrlSetModelDirAndUp",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets 3D control model scale",
            "examples": [
                {
                    "text": "```sqf\n_ctrl3D ctrlSetModelScale 1.5;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control ",
                            "description": "`Control` - 3D control"
                        },
                        {
                            "name": "scale ",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "control `ctrlSetModelScale`  scale",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetModelScale"
        },
        "configuration": {
            "label": "ctrlSetModelScale",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Similar to `setMousePosition` but relative to the given control.",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetMousePosition [0.5, 0.5];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "x",
                            "description": "`Number` - position in x"
                        },
                        {
                            "name": "y",
                            "description": "`Number` - position in y"
                        }
                    ],
                    "outline": "control `ctrlSetMousePosition` [x, y]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetMousePosition"
        },
        "configuration": {
            "label": "ctrlSetMousePosition",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Switches mode of pixel precision (rounding) in a given control interface.",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetPixelPrecision 2; // Enables pixel precision of the given control\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "mode",
                            "description": "`Number` or `String` - can be one of the following:\n* 0 / \"AUTO\" - control position (x, y, w, h) is always rounded to whole pixels (game default)\n* 1 / \"ON\" - control position (x, y, w, h) is rounded to whole pixels only when not animating\n* 2 / \"OFF\" - control position (x, y, w, h) is always precise, no pixel rounding applies here"
                        }
                    ],
                    "outline": "control `ctrlSetPixelPrecision` mode",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetPixelPrecision"
        },
        "configuration": {
            "label": "ctrlSetPixelPrecision",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets wanted position and size for 2D control animation. Width and height are optional. `ctrlCommit` is required to complete the operation. For 3D control, param is relative [x, y, z] and no `ctrlCommit` is required as it cannot be animated. If target control is inside a `CT_CONTROLS_GROUP`, the position needs to be relative to it.\n\n**IMPORTANT**:  This command doesn't work well with `CT_MAP` control. Use `ctrlMapSetPosition` instead.",
            "examples": [
                {
                    "text": "Move control:\n\n```sqf\n_control2D ctrlSetPosition [0, 0];\n_control2D ctrlCommit 0;\n```"
                },
                {
                    "text": "Move control and resize:\n\n```sqf\n_control2D ctrlSetPosition [0, 0, 1, 1];\n_control2D ctrlCommit 0;\n```"
                },
                {
                    "text": "```sqf\n_control3D ctrlSetPosition [0.5, 1, 0.5]; //centered and 1m away from screen\n```"
                },
                {
                    "text": "Typewriter effect:\n\n```sqf\n\nwith uiNamespace do\n{\n\t[] spawn\n\t{\n\t\t_text1 = \"This is a simple demo of typewriter text effect with various speed.\";\n\t\t_text2 = \"This took 10 seconds.\";\n\t\t_text3 = \"This is a fast one, set for 2 seconds.\";\n\n\t\tctrl = findDisplay 46 ctrlCreate [\"RscStructuredText\", -1];\n\n\t\tctrl ctrlSetPosition [0,0,0,0.1];\n\t\tctrl ctrlCommit 0;\n\t\tctrl ctrlSetStructuredText parseText format [\"<t color='#ff0000' size='2.1'>%1</t>\", _text1 splitString \" \" joinString \"&#160;\"];\n\t\tctrl ctrlSetPosition [0,0,ctrlTextWidth ctrl,0.1];\n\t\tctrl ctrlCommit 8;\n\n\t\twaitUntil {ctrlCommitted ctrl};\n\t\tsleep 0.5;\n\n\t\tctrl ctrlSetPosition [0,0,0,0.1];\n\t\tctrl ctrlCommit 0;\n\t\tctrl ctrlSetStructuredText parseText format [\"<t color='#ff0000' size='2.1'>%1</t>\", _text2 splitString \" \" joinString \"&#160;\"];\n\t\tctrl ctrlSetPosition [0,0,ctrlTextWidth ctrl,0.1];\n\t\tctrl ctrlCommit 2;\n\n\t\twaitUntil {ctrlCommitted ctrl};\n\t\tsleep 2;\n\n\t\tctrl ctrlSetPosition [0,0,0,0.1];\n\t\tctrl ctrlCommit 0;\n\t\tctrl ctrlSetStructuredText parseText format [\"<t color='#00ff00' size='2.1'>%1</t>\", _text3 splitString \" \" joinString \"&#160;\"];\n\t\tctrl ctrlSetPosition [0,0,ctrlTextWidth ctrl,0.1];\n\t\tctrl ctrlCommit 2;\n\n\t\twaitUntil {ctrlCommitted ctrl};\n\t\tsleep 2;\n\n\t\tctrlDelete ctrl;\n\t};\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlName",
                            "description": "`Control` - 2D control"
                        },
                        {
                            "name": "x",
                            "description": "`Number` - position in x"
                        },
                        {
                            "name": "y",
                            "description": "`Number` - position in y"
                        }
                    ],
                    "outline": "controlName `ctrlSetPosition` [x, y]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "controlName",
                            "description": "`Control` - 2D control"
                        },
                        {
                            "name": "x",
                            "description": "`Number` - position in x"
                        },
                        {
                            "name": "y",
                            "description": "`Number` - position in y"
                        },
                        {
                            "name": "w",
                            "description": "`Number` - width of the control"
                        },
                        {
                            "name": "h",
                            "description": "`Number` - height of the control"
                        }
                    ],
                    "outline": "controlName `ctrlSetPosition` [x, y, w, h]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "controlName",
                            "description": "`Control` - 3D control"
                        },
                        {
                            "name": "x",
                            "description": "`Number` - screen x"
                        },
                        {
                            "name": "z",
                            "description": "`Number` - distance from the screen (depth). If object is too far, it cannot be dragged by the mouse."
                        },
                        {
                            "name": "y",
                            "description": "`Number` - screen y"
                        }
                    ],
                    "outline": "controlName `ctrlSetPosition` [x, z, y]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetPosition"
        },
        "configuration": {
            "label": "ctrlSetPosition",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the height of a 2D control. `ctrlCommit` is required to complete the operation.",
            "examples": [
                {
                    "text": "```sqf\n\n_ctrl ctrlSetPositionH 0.5;\n_ctrl ctrlCommit 1;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control` - 2D control"
                        },
                        {
                            "name": "h",
                            "description": "`Number` - height of the control"
                        }
                    ],
                    "outline": "control `ctrlSetPositionH` h",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetPositionH"
        },
        "configuration": {
            "label": "ctrlSetPositionH",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the width of a 2D control. `ctrlCommit` is required to complete the operation.",
            "examples": [
                {
                    "text": "```sqf\n\n_ctrl ctrlSetPositionW 0.5;\n_ctrl ctrlCommit 1;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control` - 2D control"
                        },
                        {
                            "name": "w",
                            "description": "`Number` - width of the control"
                        }
                    ],
                    "outline": "control `ctrlSetPositionW` w",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetPositionW"
        },
        "configuration": {
            "label": "ctrlSetPositionW",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets horizontal position (x) of the 2D control. `ctrlCommit` is required to complete the operation.",
            "examples": [
                {
                    "text": "```sqf\n\n_ctrl ctrlSetPositionX 0.5;\n_ctrl ctrlCommit 1;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control` - 2D control"
                        },
                        {
                            "name": "x",
                            "description": "`Number` - horizontal position of the control"
                        }
                    ],
                    "outline": "control `ctrlSetPositionX` x",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetPositionX"
        },
        "configuration": {
            "label": "ctrlSetPositionX",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets vertical position (y) of a 2D control. `ctrlCommit` is required to complete the operation.",
            "examples": [
                {
                    "text": "```sqf\n\n_ctrl ctrlSetPositionY 0.5;\n_ctrl ctrlCommit 1;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control` - 2D control"
                        },
                        {
                            "name": "y",
                            "description": "`Number` - vertical position of the control"
                        }
                    ],
                    "outline": "control `ctrlSetPositionY` y",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetPositionY"
        },
        "configuration": {
            "label": "ctrlSetPositionY",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets scale of a control. Top left corner remains same. This command requires `ctrlCommit`.",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetScale 0.5;// Makes the control 50% smaller\n_control ctrlCommit 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "scale",
                            "description": "`Number` - scale e.g. 2 = 200% in size"
                        }
                    ],
                    "outline": "control `ctrlSetScale`  scale",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetScale"
        },
        "configuration": {
            "label": "ctrlSetScale",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets scroll values for current scrollbars in range 0..1 for the following controls:\n{{Columns|2|\n* `CT_CONTROLS_TABLE`\n* `CT_CONTROLS_GROUP`\n* `CT_TREE`\n* `CT_LISTBOX`\n* `CT_COMBO`\n* `CT_XCOMBO`\n* `CT_LISTNBOX`\n* `CT_LISTNBOX_CHECKABLE`\n}}",
            "examples": [
                {
                    "text": "```sqf\n_ctrlGrp ctrlSetScrollValues [-1, 0.5];\n```"
                },
                {
                    "text": "```sqf\n\n// ControlsGroup\nprivate _disp = findDisplay 46 createDisplay \"RscDisplayEmpty\";\nprivate _ctrlGrp = _disp ctrlCreate [\"RscControlsGroup\", -1];\nprivate _ctrl = _disp ctrlCreate [\"RscTree\", -1, _ctrlGrp];\n_ctrl tvAdd [[], \"Root\"];\nfor \"_i\" from 1 to 25 do\n{\n\t_ctrl tvAdd [[0], format [\"Tree Item %1\", _i]];\n};\n_ctrl ctrlSetPosition [0,0,0.3,1.2];\n_ctrl ctrlCommit 0;\ntvExpandAll _ctrl;\n_ctrlGrp ctrlSetPosition [0,0,0.2,0.3];\n_ctrlGrp ctrlCommit 0;\n \nuiNamespace setVariable [\"_ctrl\", _ctrlGrp];\nonEachFrame\n{\n\thintSilent str ctrlScrollValues (uiNamespace getVariable [\"_ctrl\", controlNull]);\n};\n0 spawn\n{\n\tsleep 1;\n\tuiNamespace getVariable [\"_ctrl\", controlNull] ctrlSetScrollValues [0.3, -1];\n\tsleep 1;\n\tuiNamespace getVariable [\"_ctrl\", controlNull] ctrlSetScrollValues [-1, 0.3];\n\tsleep 1;\n\tuiNamespace getVariable [\"_ctrl\", controlNull] ctrlSetScrollValues [0.7, -1];\n\tsleep 1;\n\tuiNamespace getVariable [\"_ctrl\", controlNull] ctrlSetScrollValues [-1, 0.7];\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "vScrollValue",
                            "description": "`Number` - vertical scroll value in 0..1 range. -1 to skip"
                        },
                        {
                            "name": "hScrollValue",
                            "description": "`Number` - horizontal scroll value in 0..1 range. -1 to skip"
                        }
                    ],
                    "outline": "control `ctrlSetScrollValues` [vScrollValue, hScrollValue]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetScrollValues"
        },
        "configuration": {
            "label": "ctrlSetScrollValues",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets 'shadow' property of the control:\n* 0 - no shadow\n* 1 - shadow\n* 2 - outline",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetShadow 1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "shadow",
                            "description": "`Number` - shadow value, see description"
                        }
                    ],
                    "outline": "control `ctrlSetShadow` shadow",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetShadow"
        },
        "configuration": {
            "label": "ctrlSetShadow",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set the [Structured Text](https://community.bistudio.com/wiki/Structured%20Text) which will be displayed in [[DialogControls-Text#CT_STRUCTURED_TEXT.3D13|structured text control]].",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetStructuredText parseText \"First line<img image=data\\isniper.paa /><br />Second line\"\n```"
                },
                {
                    "text": "To adjust text vertically, add extra line above with blank space (&amp;#160;) and set its size accordingly:\n\n```sqf\n\nwith uiNamespace do {\n\tbutton = findDisplay 46 ctrlCreate [\"RscShortcutButton\", -1];\n\tbutton ctrlSetPosition [0,0,0.3,0.1];\n\tbutton ctrlCommit 0;\n\tbutton ctrlSetStructuredText parseText \n\t\"<t size='0.5'>&#160;</t><br/><t size='1' align='center'>Button Text&#160;&#160;</t>\";\n};\n\n```"
                },
                {
                    "text": "There is a bug with `**valign**` that requires adding 1 extra trailing space per line to the displayed text in order to keep it centered horizontally:\n\n```sqf\n\ndisableSerialization;\nprivate _ctrl = findDisplay 46 ctrlCreate [\"RscStructuredText\", -1];\n_ctrl ctrlSetPosition [0, 0, 0.5, 0.5];\n_ctrl ctrlSetBackgroundColor [0, 0, 0, 1];\n_ctrl ctrlCommit 0;\nprivate _lineHeight = getNumber (configFile >> \"RscStructuredText\" >> \"size\");\nprivate _linesTotal = (ctrlPosition _ctrl select 2) / _lineHeight;\nprivate _trailingSpace = \"\";\nfor \"_i\" from 1 to _linesTotal do { _trailingSpace = _trailingSpace + \" \" };\n_ctrl ctrlSetStructuredText parseText format [\"<t size='%1'><t size='1' align='center' valign='middle'>%2%3</t> </t>\", _linesTotal, \"------ Centered Text ------\", _trailingSpace];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "structuredText",
                            "description": "[Structured Text](https://community.bistudio.com/wiki/Structured%20Text)"
                        }
                    ],
                    "outline": "control `ctrlSetStructuredText` structuredText",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetStructuredText"
        },
        "configuration": {
            "label": "ctrlSetStructuredText",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the text of a control of the currently active user dialog or display.\nThis command can be used for static texts, buttons, edit lines and active texts as well as for images, where you can use it to set the image path.\n\n\nRead [Arma: GUI Configuration](https://community.bistudio.com/wiki/Arma%3A%20GUI%20Configuration) for more information about user dialogs and controls.\n\nUse `endl` to insert line breaks.\n\nSince {{GVI|arma3|2.06",
            "examples": [
                {
                    "text": "```sqf\nctrlSetText [100, \"Hello world\"]; // for Dialogs\n```"
                },
                {
                    "text": "```sqf\n_control ctrlSetText \"Hello world.\"; // for Displays\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - control IDC"
                        },
                        {
                            "name": "text",
                            "description": "`String` - text or image path, depending on the control type"
                        }
                    ],
                    "outline": "`ctrlSetText` [idc, text]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "text",
                            "description": "`String`"
                        }
                    ],
                    "outline": "control `ctrlSetText` text",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetText"
        },
        "configuration": {
            "label": "ctrlSetText",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets text color of given control. Color is in format [[Color|Color (RGBA)]]. As of Arma 3 v1.40 this command can also be used to change fill-color of a `CT_PROGRESS` control.\n\n**NOTE**: Also try `ctrlSetForegroundColor`, if this command doesn't have the desired effect.",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetTextColor [1, 0, 0, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "color",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "control `ctrlSetTextColor` color",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetTextColor"
        },
        "configuration": {
            "label": "ctrlSetTextColor",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the secondary text color of a text control.",
            "examples": [
                {
                    "text": "```sqf\n_ctrlText ctrlSetTextColorSecondary [1, 0.5, 0.1, 0.5];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control` - text control"
                        },
                        {
                            "name": "color",
                            "description": "`Array` - color in format RGBA"
                        }
                    ],
                    "outline": "control `ctrlSetTextColorSecondary` color",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetTextColorSecondary"
        },
        "configuration": {
            "label": "ctrlSetTextColorSecondary",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the secondary text of a text control.",
            "examples": [
                {
                    "text": "```sqf\n_ctrlText ctrlSetTextSecondary \"Hello World!\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control` - text control"
                        },
                        {
                            "name": "text",
                            "description": "`String` - secondary text"
                        }
                    ],
                    "outline": "control `ctrlSetTextSecondary` text",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetTextSecondary"
        },
        "configuration": {
            "label": "ctrlSetTextSecondary",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Selects `**length**` characters of edit control from the `**start**` position and places cursor at the end of selection.\n**NOTE**: To only move the cursor, set _length_ to 0. To select text from right to left, use negative _length_ (See `ctrlTextSelection` for more info)",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetTextSelection [5, 10];\n```"
                },
                {
                    "text": "```sqf\n\ndisableSerialization;\nprivate _ctrl = findDisplay 46 createDisplay \"RscDisplayEmpty\" ctrlCreate [\"RscEditMulti\", -1];\n_ctrl ctrlSetPosition [0,0,0.5,0.3];\n_ctrl ctrlCommit 0;\n_ctrl ctrlSetText \"Hello World\";\n_ctrl ctrlSetTextSelection [6, 5]; // selects World\nctrlSetFocus _ctrl;\n\n```"
                },
                {
                    "text": "Select text from right to left:\n\n```sqf\n_control ctrlSetTextSelection [5, -4];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "start",
                            "description": "`Number` - selection start position"
                        },
                        {
                            "name": "length",
                            "description": "`Number` - length of characters to select (0 to only move the cursor). Negative length will select text from right to left (see example 3)"
                        }
                    ],
                    "outline": "control `ctrlSetTextSelection` [start, length]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetTextSelection"
        },
        "configuration": {
            "label": "ctrlSetTextSelection",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets tooltip text of given control.\n**NOTE**: If control supports URL property, like `**RscActiveText**` for example, and the URL is set, tooltip text displayed on mouse over will be appended with URL text.",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetTooltip \"tooltip\";\n```"
                },
                {
                    "text": "```sqf\nfindDisplay 10000 displayCtrl 10001 ctrlSetTooltip \"ThisIsAGoodTip\";\n```"
                },
                {
                    "text": "```sqf\nwith uiNamespace do \n{\n\tbar = findDisplay 46 createDisplay \"RscDisplayEmpty\" ctrlCreate [\"RscProgress\", -1];\n\tbar ctrlSetPosition [0,0,1,0.01];\n\tbar ctrlCommit 0;\n\tbar progressSetPosition 0.75;\n\tbar ctrlSetTooltip \"lalalalalalalala\";\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control` - any [control type](https://community.bistudio.com/wiki/Dialogs), (except for CT_STATIC & CT_STRUCTURED_TEXT, although Arma 3 now supports these too)"
                        },
                        {
                            "name": "text",
                            "description": "`String`"
                        }
                    ],
                    "outline": "control `ctrlSetTooltip` text",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetTooltip"
        },
        "configuration": {
            "label": "ctrlSetTooltip",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets tooltip border color of given control.",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetTooltipColorBox [1, 0, 0, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "color",
                            "description": "`Array` - color in format in format [[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "control `ctrlSetTooltipColorBox`  color",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetTooltipColorBox"
        },
        "configuration": {
            "label": "ctrlSetTooltipColorBox",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets tooltip background color of given control. Color is in format [[Color|Color (RGBA)]].",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetTooltipColorShade [1, 0, 0, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "color",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "control `ctrlSetTooltipColorShade` color",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetTooltipColorShade"
        },
        "configuration": {
            "label": "ctrlSetTooltipColorShade",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets tooltip text color of given control. Color is in format [[Color|Color (RGBA)]].",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetTooltipColorText [1, 0, 0, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "display",
                            "description": "`Control`"
                        },
                        {
                            "name": "color",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "display `ctrlSetTooltipColorText` color",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetTooltipColorText"
        },
        "configuration": {
            "label": "ctrlSetTooltipColorText",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set maximum width of a control's tooltip.",
            "examples": [
                {
                    "text": "```sqf\nprivate _previousMaxWidth = _myControl ctrlSetTooltipMaxWidth (SafeZoneW / 2);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "width",
                            "description": "`Number` - in screen measurement units"
                        }
                    ],
                    "outline": "ctrl `ctrlSetTooltipMaxWidth` width",
                    "returns": "`Number` - the previous maximum width of the tooltip"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetTooltipMaxWidth"
        },
        "configuration": {
            "label": "ctrlSetTooltipMaxWidth",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets URL property of the given control subject to `**allowedHTMLLoadURIs[]**` whitelisting in `CfgCommands` config. Supported controls are:\n* `**CT_BUTTON**`\n* `**CT_SHORTCUTBUTTON**` \n* `**CT_ACTIVETEXT**`",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetURL \"http://arma3.com/\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "URL",
                            "description": "`String`"
                        }
                    ],
                    "outline": "control `ctrlSetURL` URL",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetURL"
        },
        "configuration": {
            "label": "ctrlSetURL",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets how to handle opening of URL, default browser ot Steam overlay. Possible values:\n* 0 - default browser\n* 1 - Steam overlay if enabled, otherwise default browser \n* 2 - Steam overlay, shows error message box if disabled (the box has a button to continue with default browser)\n\n**NOTE**: Toggling Steam overlay in Steam options will require game restart for the changes to take effect.",
            "examples": [
                {
                    "text": "```sqf\n_control ctrlSetURLOverlayMode 1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control` - control that contain url opening action"
                        },
                        {
                            "name": "mode",
                            "description": "`Number` - overlay mode, see description"
                        }
                    ],
                    "outline": "control `ctrlSetURLOverlayMode` mode",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlSetURLOverlayMode"
        },
        "configuration": {
            "label": "ctrlSetURLOverlayMode",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns 'shadow' property of the control (see `ctrlSetShadow`).",
            "examples": [
                {
                    "text": "```sqf\n_shadow = ctrlShadow _control;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctrlShadow` control",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlShadow"
        },
        "configuration": {
            "label": "ctrlShadow",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Shows or hides a control, or group of controls together with all the controls inside that group of controls.\n\nRead [Arma: GUI Configuration](https://community.bistudio.com/wiki/Arma%3A%20GUI%20Configuration) for more information about user dialogs and controls.\n\n{{ Feature | Informative | <sqf inline>ctrlShow **will hide or show every single control inside a ControlsGroup, even if they are placed inside of a ControlsGroup, which itself is inside of a ControlsGroup and so on.**\nKeep that in mind when designing a Graphical User Interface. }}",
            "examples": [
                {
                    "text": "```sqf\nctrlShow [100, false];\n```"
                },
                {
                    "text": "```sqf\n_control ctrlShow false;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - control IDC"
                        },
                        {
                            "name": "show",
                            "description": "`Boolean` - for showing, use `true`. for hiding, use `false`."
                        }
                    ],
                    "outline": "`ctrlShow` [idc, show]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "controlName",
                            "description": "`Control`"
                        },
                        {
                            "name": "show",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "controlName `ctrlShow` show",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/ctrlShow"
        },
        "configuration": {
            "label": "ctrlShow",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns whether given control is shown.",
            "examples": [
                {
                    "text": "```sqf\n_bool = ctrlShown _ctrl;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlName",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctrlShown` controlName",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlShown"
        },
        "configuration": {
            "label": "ctrlShown",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the provided control's style. See {{Link|Arma: GUI Configuration#Control Styles}}.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _ctrlStyle = ctrlStyle _myControl;\n\nprivate _bitFlags = _ctrlStyle call BIS_fnc_bitflagsToArray;\nif (2 in _bitFlags) then\n{\n\thint \"This control has centered text!\";\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctrlStyle` control",
                    "returns": "`Number` - see {{Link|Arma: GUI Configuration#Control Styles}}"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/ctrlStyle"
        },
        "configuration": {
            "label": "ctrlStyle",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the text of a control of the currently active user dialog. This command can be used on static texts, buttons, edit lines and active texts as well as for images, where it returns the image path. Does not work on HTML control and returns empty string \"\". Since Arma 3 v2.05.147765 supported control types are:\n* `CT_STATIC`\n* `CT_EDIT`\n* `CT_XKEYDESC`\n* `CT_XBUTTON`\n* `CT_SHORTCUTBUTTON`\n* `CT_STRUCTURED_TEXT`\n* `CT_BUTTON`\n* `CT_ACTIVETEXT`",
            "examples": [
                {
                    "text": "```sqf\n_text = ctrlText 100;\n```"
                },
                {
                    "text": "```sqf\n_text = ctrlText _control;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - control ID"
                        }
                    ],
                    "outline": "`ctrlText`  idc",
                    "returns": "`String` - the text or image path is returned, dependent on the control type"
                },
                {
                    "parameters": [
                        {
                            "name": "controlName",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctrlText`  controlName",
                    "returns": "`String` - the text or image path is returned, dependent on the control type"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlText"
        },
        "configuration": {
            "label": "ctrlText",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns control's text color in [[Color|Color (RGBA)]] format (see `ctrlSetTextColor`).",
            "examples": [
                {
                    "text": "```sqf\nctrlTextColor _control;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctrlTextColor` control",
                    "returns": "`Array` - text color"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlTextColor"
        },
        "configuration": {
            "label": "ctrlTextColor",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the control text height. Supported control [types](https://community.bistudio.com/wiki/ctrlType) are:\n* `CT_STATIC`\n* `CT_STRUCTURED_TEXT`\n* `CT_EDIT` \nSince Arma 3 v2.05.147765 control types added:\n* `CT_XKEYDESC`\n* `CT_XBUTTON`\n* `CT_SHORTCUTBUTTON`\n* `CT_BUTTON`\n* `CT_ACTIVETEXT`",
            "examples": [
                {
                    "text": "```sqf\n_h = ctrlTextHeight _ctrl;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctrlTextHeight`  control",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlTextHeight"
        },
        "configuration": {
            "label": "ctrlTextHeight",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the secondary text of a text control.",
            "examples": [
                {
                    "text": "```sqf\n_secondaryText = ctrlTextSecondary _ctrlText;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control` - text control"
                        }
                    ],
                    "outline": "`ctrlTextSecondary` control",
                    "returns": "`String` - secondary text of given control"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlTextSecondary"
        },
        "configuration": {
            "label": "ctrlTextSecondary",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns edit control text selection in format [start, length, selectedText]. \n**NOTE**: _length_ can be negative if text selection is made from right to left. Use `abs` with _length_ or `count` with `**selectedText**` if string length is required. _start_ always indicates at what position in text the selection is started. The cursor position will always be at the end of the selection. So if selection is made from right to left the cursor position will be at the left end of the selection. In order to find cursor position add _start_ and _length_ together (see _Example 3_).",
            "examples": [
                {
                    "text": "Selection is made from left to right:\n\n```sqf\nctrlTextSelection _control; //[0, 11, \"Hello World\"];\n```"
                },
                {
                    "text": "Selection is made from right to left:\n\n```sqf\nctrlTextSelection _control; //[11, -11, \"Hello World\"];\n```"
                },
                {
                    "text": "Find cursor position:\n\n```sqf\n\nctrlTextSelection _control params [\"_start\", \"_length\"];\nprivate _cursorPos = _start + _length;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctrlTextSelection` control",
                    "returns": "`Array` in format [start, length, selectedText] where:\n* start: `Number` - position in text selection started\n* length: `Number` - number of the highlighted characters (this number could be negative, see description)\n* selectedText: `String` - selected text"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlTextSelection"
        },
        "configuration": {
            "label": "ctrlTextSelection",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the width of the control text including left and right margins (0.008 each). Supported control [types](https://community.bistudio.com/wiki/ctrlType) are:\n{{Columns|2|\n* `CT_STATIC` 0\n* `CT_EDIT` 2\n* `CT_STRUCTURED_TEXT` 13\n* {{GVI|arma3|2.06",
            "examples": [
                {
                    "text": "```sqf\nprivate _w = ctrlTextWidth _ctrl;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctrlTextWidth` control",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlTextWidth"
        },
        "configuration": {
            "label": "ctrlTextWidth",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the tooltip property of a button control. Getter for `ctrlSetTooltip`.",
            "examples": [
                {
                    "text": "```sqf\nctrlTooltip _control;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctrlTooltip` control",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlTooltip"
        },
        "configuration": {
            "label": "ctrlTooltip",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns number representing the type of control, which is also defined by _type_ property in config. For more information see [Arma: GUI Configuration](https://community.bistudio.com/wiki/Arma%3A%20GUI%20Configuration)",
            "examples": [
                {
                    "text": "```sqf\n_type = ctrlType _rscEdit; // 2\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctrlType` control",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlType"
        },
        "configuration": {
            "label": "ctrlType",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the URL property of a button control. Getter for `ctrlSetURL`.",
            "examples": [
                {
                    "text": "```sqf\nprivate _ctrlUrl = ctrlURL _control; // e.g. \"http://arma3.com/\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctrlURL` control",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlURL"
        },
        "configuration": {
            "label": "ctrlURL",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the URL overlay mode 0, 1, 2 (see `ctrlSetURLOverlayMode`) or -1 if something went wrong.",
            "examples": [
                {
                    "text": "```sqf\n_mode = ctrlURLOverlayMode _control; // e.g. 0\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctrlURLOverlayMode` control",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctrlURLOverlayMode"
        },
        "configuration": {
            "label": "ctrlURLOverlayMode",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns if a control of the currently active user dialog is shown or not. Read [Arma: GUI Configuration](https://community.bistudio.com/wiki/Arma%3A%20GUI%20Configuration) for more information about user dialogs and controls.",
            "examples": [
                {
                    "text": "```sqf\n_bool = ctrlVisible 100;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - control IDC"
                        }
                    ],
                    "outline": "`ctrlVisible`  idc",
                    "returns": "`Boolean` - `true` if the control is shown, `false` if not"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/ctrlVisible"
        },
        "configuration": {
            "label": "ctrlVisible",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array of controls on the row with the given index.",
            "examples": [
                {
                    "text": "```sqf\n_array = _control ctRowControls 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "control `ctRowControls` index",
                    "returns": "`Array`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/ctRowControls"
        },
        "configuration": {
            "label": "ctRowControls",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns number of rows (headers not included) in the RscControlsTable.",
            "examples": [
                {
                    "text": "```sqf\nctRowCount _control;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`ctRowCount` control",
                    "returns": "`Number`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/ctRowCount"
        },
        "configuration": {
            "label": "ctRowCount",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Selects the line with the given index. Will take only rows, but not headers into account. -1 deselects all. Returns Nothing.",
            "examples": [
                {
                    "text": "```sqf\n_control ctSetCurSel 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "control `ctSetCurSel` index",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/ctSetCurSel"
        },
        "configuration": {
            "label": "ctSetCurSel",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Associates metadata (string) with the row determined by the index. Returns Nothing.",
            "examples": [
                {
                    "text": "```sqf\n_control ctSetData [0, \"Test\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control` - the respective control"
                        },
                        {
                            "name": "index",
                            "description": "`Number` - the row index"
                        },
                        {
                            "name": "data",
                            "description": "`String` - the data to set"
                        }
                    ],
                    "outline": "ctrl `ctSetData` [index, data]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/ctSetData"
        },
        "configuration": {
            "label": "ctSetData",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Takes config path to the new header template. Clears the whole RscControlsTable and sets the new header template.",
            "examples": [
                {
                    "text": "```sqf\n_control ctSetHeaderTemplate _configPath;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "config",
                            "description": "`Config`"
                        }
                    ],
                    "outline": "control `ctSetHeaderTemplate` config",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/ctSetHeaderTemplate"
        },
        "configuration": {
            "label": "ctSetHeaderTemplate",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Takes config path to the new row template. Clears the whole RscControlsTable and sets the new row template (Deleting all rows and headers is easier to implement than replacing the rows and filling them with new data. IDCs could overflow etc.).",
            "examples": [
                {
                    "text": "```sqf\n_control ctSetRowTemplate _configPath;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "config",
                            "description": "`Config`"
                        }
                    ],
                    "outline": "control `ctSetRowTemplate` config",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/ctSetRowTemplate"
        },
        "configuration": {
            "label": "ctSetRowTemplate",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Associates metadata (number) with the row determined by the index. Returns Nothing.",
            "examples": [
                {
                    "text": "```sqf\n_control ctSetValue [0, 23];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        },
                        {
                            "name": "value",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "control `ctSetValue` [index, value]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctSetValue"
        },
        "configuration": {
            "label": "ctSetValue",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns metadata (number) associated with a particular row of RscControlsTable.",
            "examples": [
                {
                    "text": "```sqf\n_number = _control ctValue 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "control `ctValue` index",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ctValue"
        },
        "configuration": {
            "label": "ctValue",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns list of addons allowed to given curator. The addon names are not guaranteed to be all lower case",
            "examples": [
                {
                    "text": "```sqf\nprivate _addons = curatorAddons myCurator;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curatorObj",
                            "description": "`Object` - curator module"
                        }
                    ],
                    "outline": "`curatorAddons` curatorObj",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/curatorAddons"
        },
        "configuration": {
            "label": "curatorAddons",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns curator camera object.",
            "examples": [
                {
                    "text": "```sqf\n_camCurator = curatorCamera;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`curatorCamera`",
                    "returns": "`Object`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/curatorCamera"
        },
        "configuration": {
            "label": "curatorCamera",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns all curator camera areas.",
            "examples": [
                {
                    "text": "```sqf\n_camArea = curatorCameraArea myCurator; // [[8052,[4027.36,4024.89,0],250]]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curatorObj",
                            "description": "`Object` - curator module."
                        }
                    ],
                    "outline": "`curatorCameraArea` curatorObj",
                    "returns": "`Array` - array of camera areas in format [cameraAreaID,position,radius]. See `addCuratorCameraArea`."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/curatorCameraArea"
        },
        "configuration": {
            "label": "curatorCameraArea",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns ceiling height for curator camera.",
            "examples": [
                {
                    "text": "```sqf\nprivate _height = curatorCameraAreaCeiling BIS_curatorUnit;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curatorObj",
                            "description": "`Object` - curator module"
                        }
                    ],
                    "outline": "`curatorCameraAreaCeiling` curatorObj",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/curatorCameraAreaCeiling"
        },
        "configuration": {
            "label": "curatorCameraAreaCeiling",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns current coeficient setting.",
            "examples": [
                {
                    "text": "```sqf\ncuratorModule curatorCoef \"Place\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curatorObj",
                            "description": "`Object` - curator module."
                        },
                        {
                            "name": "action",
                            "description": "`String`"
                        }
                    ],
                    "outline": "curatorObj `curatorCoef` action",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/curatorCoef"
        },
        "configuration": {
            "label": "curatorCoef",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns all editable objects which belong to a curator.",
            "examples": [
                {
                    "text": "```sqf\n_objects = curatorEditableObjects myCurator;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curatorObj",
                            "description": "`Object` - curator module."
                        }
                    ],
                    "outline": "`curatorEditableObjects` curatorObj",
                    "returns": "`Array`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/curatorEditableObjects"
        },
        "configuration": {
            "label": "curatorEditableObjects",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns all curator editing areas.",
            "examples": [
                {
                    "text": "```sqf\n_editingAreas = curatorEditingArea myCurator;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curator",
                            "description": "`Object` - curator module."
                        }
                    ],
                    "outline": "`curatorEditingArea` curator",
                    "returns": "`Array` of [array](https://community.bistudio.com/wiki/Array)s in format: [ID, [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL), radius]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/curatorEditingArea"
        },
        "configuration": {
            "label": "curatorEditingArea",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns type of edit areas assigned to curator (blacklist/whitelist).",
            "examples": [
                {
                    "text": "```sqf\n_isBlacklist = curatorEditingAreaType _curator;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curator",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`curatorEditingAreaType` curator",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/curatorEditingAreaType"
        },
        "configuration": {
            "label": "curatorEditingAreaType",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns [Curator Editable Object](https://community.bistudio.com/wiki/curatorEditableObjects) under curator mouse pointer.",
            "examples": [
                {
                    "text": "```sqf\n_mouseOver = curatorMouseOver; // Possible return value: [\"OBJECT\", 3594ab00# 164218: apc_wheeled_01_cannon_f.p3d]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`curatorMouseOver`",
                    "returns": "`Array`\n* [] - when not in curator mode\n* [\"\"] - if no curator editable object under the pointer in curator mode\n* [<nowiki/>`typeName`, [Curator Editable Object](https://community.bistudio.com/wiki/curatorEditableObjects)] - if there is curator editable object under the pointer in curator mode"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/curatorMouseOver"
        },
        "configuration": {
            "label": "curatorMouseOver",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns number of points that curator have. Points can be only in range from 0 to 1.",
            "examples": [
                {
                    "text": "```sqf\n_points = curatorPoints myCurator;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curatorObj",
                            "description": "`Object` - curator module."
                        }
                    ],
                    "outline": "`curatorPoints` curatorObj",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/curatorPoints"
        },
        "configuration": {
            "label": "curatorPoints",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array with all objects that has curator registered and their settings.",
            "examples": [
                {
                    "text": "```sqf\ncuratorRegisteredObjects _curatorModule;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curator",
                            "description": "`Object` - curator module"
                        }
                    ],
                    "outline": "`curatorRegisteredObjects` curator",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/curatorRegisteredObjects"
        },
        "configuration": {
            "label": "curatorRegisteredObjects",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns list of all curator selected items.",
            "examples": [
                {
                    "text": "```sqf\nselectedItems = curatorSelected;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**curatorSelected**",
                    "returns": "`Array` - <nowiki>[[Objects],[Groups],[Waypoints],[Markers]]</nowiki>"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/curatorSelected"
        },
        "configuration": {
            "label": "curatorSelected",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns list of all objects stored in the given selection preset.",
            "examples": [
                {
                    "text": "```sqf\nprivate _savedItems = curatorSelectionPreset 1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "numkey",
                            "description": "`Number` - number key under which the selection preset is saved"
                        }
                    ],
                    "outline": "`curatorSelectionPreset` numkey",
                    "returns": "`Array` of `Object`s - objects saved in the selection preset"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/curatorSelectionPreset"
        },
        "configuration": {
            "label": "curatorSelectionPreset",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return current price for placing waypoints (curator specific).",
            "examples": [
                {
                    "text": "```sqf\nvar_wpcost = curatorWaypointCost bis_curator;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curatorObj",
                            "description": "`Object` - curator module."
                        }
                    ],
                    "outline": "`curatorWaypointCost` curatorObj",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/curatorWaypointCost"
        },
        "configuration": {
            "label": "curatorWaypointCost",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the currently performed editing operation in [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor).",
            "examples": [
                {
                    "text": "```sqf\nif (current3DENOperation == \"MoveItems\") then { hint \"Moving things are we\"; };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`current3DENOperation`",
                    "returns": "`String` - operation name. Can be:\n{{Columns|2|\n* `**\"\"**` (no operation)\n* `**\"CreateObject\"**`\n* `**\"CreateMarker\"**`\n* `**\"CreateTrigger\"**`\n* `**\"MoveItems\"**`\n* `**\"RotateItems\"**`\n* `**\"ScaleItems\"**`\n* `**\"SyncWith\"**`\n* `**\"GroupWith\"**`\n* `**\"SetTriggerOwner\"**`\n* `**\"AddRandomStart\"**`\n}}"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/current3DENOperation"
        },
        "configuration": {
            "label": "current3DENOperation",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns currently selected user chat channel on the UI (selected with {{Controls|<}} and {{Controls|>}} in multiplayer).\n{{{!}} class=\"wikitable align-center\"\n! colspan=\"16\" {{!}} [Channel ID](https://community.bistudio.com/wiki/Channel%20IDs) number correspondence\n{{!}}-\n{{!}} colspan=\"6\" {{!}} Default Channels\n{{!}} colspan=\"10\" {{!}} Custom Channels\n{{!}}- style=\"font-size: .9em\"\n{{!}} Global\n{{!}} Side\n{{!}} Command\n{{!}} Group\n{{!}} Vehicle\n{{!}} Direct\n{{!}} CC&nbsp;1\n{{!}} CC&nbsp;2\n{{!}} CC&nbsp;3\n{{!}} CC&nbsp;4\n{{!}} CC&nbsp;5\n{{!}} CC&nbsp;6\n{{!}} CC&nbsp;7\n{{!}} CC&nbsp;8\n{{!}} CC&nbsp;9\n{{!}} CC&nbsp;10\n{{!}}-\n{{!}} 0\n{{!}} 1\n{{!}} 2\n{{!}} 3\n{{!}} 4\n{{!}} 5\n{{!}} 6\n{{!}} 7\n{{!}} 8\n{{!}} 9\n{{!}} 10\n{{!}} 11\n{{!}} 12\n{{!}} 13\n{{!}} 14\n{{!}} 15\n{{!}}}\nFor Custom Radio, see `radioChannelCreate`.",
            "examples": [
                {
                    "text": "```sqf\n_selected = currentChannel; // 3 for the Group channel\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`currentChannel`",
                    "returns": "`Number` - channel ID"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/currentChannel"
        },
        "configuration": {
            "label": "currentChannel",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return the current command type (empty string when no command) for the commander of given vehicle (or for a given soldier). Returned value can be one of:\n{{Columns|4|\n* \"WAIT\"\n* \"ATTACK\"\n* \"HIDE\"\n* \"MOVE\"\n* \"HEAL\"\n* \"REPAIR\"\n* \"REFUEL\"\n* \"REARM\"\n* \"SUPPORT\"\n* \"JOIN\"\n* \"GET IN\"\n* \"FIRE\"\n* \"GET OUT\"\n* \"STOP\"\n* \"EXPECT\"\n* \"ACTION\"\n* \"ATTACKFIRE\"\n* \"Suppress\"\n}}",
            "examples": [
                {
                    "text": "```sqf\n_command = currentCommand player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicleName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`currentCommand` vehicleName",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/currentCommand"
        },
        "configuration": {
            "label": "currentCommand",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns class name of currently loaded vehicle's / unit's magazine.",
            "examples": [
                {
                    "text": "```sqf\n_magazineClass = currentMagazine player;//Example: \"30Rnd_545x39_AK\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - unit or vehicle"
                        }
                    ],
                    "outline": "`currentMagazine` vehicle",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/currentMagazine"
        },
        "configuration": {
            "label": "currentMagazine",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns description of vehicle's currently loaded magazine, its ammo count (current/default) and its id.",
            "examples": [
                {
                    "text": "```sqf\n_currentMagazineDetail = currentMagazineDetail player; // \"6.5mm 30Rnd STANAG Mag(30/30)[id:0]\"\n```"
                },
                {
                    "text": "```sqf\n_currentMagazineDetail = currentMagazineDetail Mi_48; // \"30mm HE Shells(250/250)[id:21]\n```"
                },
                {
                    "text": "```sqf\n_cmd = currentMagazineDetail player; // \"9mm 16Rnd Mag(13/16)[id/cr:10000011/0]\"\n_cmd splitString \"([ ]/:)\"; // [\"9mm\",\"16Rnd\",\"Mag\",\"13\",\"16\",\"id\",\"cr\",\"10000011\",\"0\"]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - unit or vehicle"
                        }
                    ],
                    "outline": "`currentMagazineDetail` object",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/currentMagazineDetail"
        },
        "configuration": {
            "label": "currentMagazineDetail",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the class name of currently used magazine on specified turret. Use turret path [-1] for driver's turret. Note that a turret is not loaded until unit enters it, so this command will return \"\".",
            "examples": [
                {
                    "text": "```sqf\n_magazineDetail = MBT_Kuma currentMagazineDetailTurret [0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` format [Turret Path](https://community.bistudio.com/wiki/Turret%20Path)"
                        }
                    ],
                    "outline": "vehicle `currentMagazineDetailTurret` turretPath",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/currentMagazineDetailTurret"
        },
        "configuration": {
            "label": "currentMagazineDetailTurret",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the name of the type of the currently using magazine on specified turret. Use turret path [-1] for driver's turret. Note that a turret is not loaded until unit enters it, so this command will return \"\".",
            "examples": [
                {
                    "text": "```sqf\n_magazine = MBT_Kuma currentMagazineTurret [0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` format [Turret Path](https://community.bistudio.com/wiki/Turret%20Path)"
                        }
                    ],
                    "outline": "vehicle `currentMagazineTurret` turretPath",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/currentMagazineTurret"
        },
        "configuration": {
            "label": "currentMagazineTurret",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a unit's current weapon muzzle. Does not work on vehicles.",
            "examples": [
                {
                    "text": "```sqf\n_muzzle = currentMuzzle player;\n```"
                },
                {
                    "text": "```sqf\n_muzzle = currentMuzzle (gunner (vehicle player));\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`currentMuzzle` unit",
                    "returns": "`String` - current muzzle\n**IMPORTANT**: In earlier games/versions, this command could return a `Number` (`**0**`) if _unit_ was in a vehicle.\nUse the following to circumvent the issue:\n\n```sqf\n_muzzle = weaponState unit select 1;\n```"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/currentMuzzle"
        },
        "configuration": {
            "label": "currentMuzzle",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the current [global namespace](https://community.bistudio.com/wiki/Namespace) the script runs in.\n**NOTE**: Since Arma 3 v2.00, `Namespace`s can be compared with [[==]] and [[!=]] operators in addition to `isEqualTo`.",
            "examples": [
                {
                    "text": "```sqf\nif (currentNamespace isEqualTo uiNamespace) then { hint \"This is uiNamespace\" };\n```"
                },
                {
                    "text": "```sqf\n\nprivate _fn_getCurrentNamespaceName = {\n\tif (currentNamespace isEqualTo missionNamespace) exitWith { \"missionNamespace\" };\n\tif (currentNamespace isEqualTo parsingNamespace) exitWith { \"parsingNamespace\" };\n\tif (currentNamespace isEqualTo profileNamespace) exitWith { \"profileNamespace\" };\n\tif (currentNamespace isEqualTo uiNamespace) exitWith { \"uiNamespace\" };\n\t\"error\";\n};\n\nwith profileNamespace do {\n\tsystemChat call _fn_getCurrentNamespaceName;\t// profileNamespace\n};\n\nsystemChat call _fn_getCurrentNamespaceName;\t\t// missionNamespace\n\nwith uiNamespace do {\n\tsystemChat call _fn_getCurrentNamespaceName;\t// uiNamespace\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`currentNamespace`",
                    "returns": "`Namespace` - one of:\n* `missionNamespace`\n* `uiNamespace`\n* `parsingNamespace`\n* `profileNamespace`\n* `localNamespace`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/currentNamespace"
        },
        "configuration": {
            "label": "currentNamespace",
            "grammarType": "namespace"
        }
    },
    {
        "documentation": {
            "description": "Returns the person piloting the vehicle. If co-pilot is piloting, co-pilot is returned. If you need current pilot of a UAV or UGV, see `UAVControl` command.",
            "examples": [
                {
                    "text": "```sqf\n\nif (currentPilot _vehicle != driver _vehicle) then\n{\n\thint \"The pilot is not piloting!\";\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`currentPilot` vehicle",
                    "returns": "`Object` - piloting unit or `objNull`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/currentPilot"
        },
        "configuration": {
            "label": "currentPilot",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return current task of given person.",
            "examples": [
                {
                    "text": "```sqf\n_currTask = currentTask player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "person",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`currentTask` person",
                    "returns": "`Task`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/currentTask"
        },
        "configuration": {
            "label": "currentTask",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array with all [ uncompleted](https://community.bistudio.com/wiki/taskCompleted%20) tasks for the given agent.\n`getVariable` could be used on `Task` to get the following special local variables from the task:\n* `**\"_this\"**` [Team Member](https://community.bistudio.com/wiki/Team%20Member) - the `teamMember` `agent` the task is assigned to\n* `**\"_taskType\"**` `String` - the name of the task (see `registeredTasks`)\n* `**\"_thisCreated\"**` `Number` - 1 or 0\n* `**\"_thisRunning\"**` `Number` - 1 or 0\n* `**\"_totalCreated\"**` `Number` - total number of tasks\n* `**\"_totalRunning\"**` `Number` - total number of running tasks\n* `**\"_task\"**``Task` - often null",
            "examples": [
                {
                    "text": "```sqf\ncurrentTasks teamMember _agent;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "teamMember",
                            "description": "[Team Member](https://community.bistudio.com/wiki/Team%20Member) - `teamMember` `agent`"
                        }
                    ],
                    "outline": "`currentTasks` teamMember",
                    "returns": "`Array` - array of `Task`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/currentTasks"
        },
        "configuration": {
            "label": "currentTasks",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns currently selected throwable (and the muzzle it is loaded into), which will be launched if the user presses {{Controls|G}}.",
            "examples": [
                {
                    "text": "```sqf\ncurrentThrowable player; // [\"SmokeShellGreen\", \"SmokeShellGreenMuzzle\", [1.00002e+007, 0]]\n```"
                },
                {
                    "text": "```sqf\n\n_ct = currentThrowable player;\t\t\t\t// [\"HandGrenade\", \"HandGrenadeMuzzle\", [1e+007, 0]]\n_id = (_ct select 2 select 0) - 1e7;\t\t// 18\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`currentThrowable` unit",
                    "returns": "`Array` in format [magazineClassName, muzzleClassName, [magazineId, creatorId]]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/currentThrowable"
        },
        "configuration": {
            "label": "currentThrowable",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns current vision mode of unit's weapon. Vision mode could be one of:\n* 0 - normal vision\n* 1 - night vision\n* 2 - thermal vision\nAlternative syntaxes additionally return FLIR index (see `setCamUseTI`) of the thermal vision mode (See also [[Arma_3:_Event_Handlers#VisionModeChanged | \"VisionModeChanged\"]] entity event handler)",
            "examples": [
                {
                    "text": "```sqf\n_visionMode = currentVisionMode gunner _tank;\n```"
                },
                {
                    "text": "```sqf\n\nif (currentVisionMode player == 1) then\n{\n\thint \"nightvision active\";\n};\n\n```"
                },
                {
                    "text": "```sqf\n\nprivate _detailedVisionMode = currentVisionMode [gunner _tank];\n_detailedVisionMode params [\"_mode\", \"_flirIndex\"];\n\n```"
                },
                {
                    "text": "```sqf\nprivate _detailedGunnerVisionMode = _tank currentVisionMode [0];\n```"
                },
                {
                    "text": "```sqf\nprivate _detailedWeaponVisionMode = player currentVisionMode \"\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "`Object` - unit or vehicle. Unit query returns current vision mode of the unit. Vehicle query returns driver seat vision mode"
                        }
                    ],
                    "outline": "`currentVisionMode` entity",
                    "returns": "`Number` - vision mode"
                },
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "`Object` - unit or vehicle. Unit query returns current vision mode of the unit. Vehicle query returns driver seat vision mode"
                        }
                    ],
                    "outline": "`currentVisionMode` [entity]",
                    "returns": "`Array` in format [vision mode, FLIR index]"
                },
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - vehicle with vision modes"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` format [Turret Path](https://community.bistudio.com/wiki/Turret%20Path) - path to vehicle's turret. Use [-1] for driver turret, [] for default primary gunner turret"
                        }
                    ],
                    "outline": "vehicle `currentVisionMode` turretPath",
                    "returns": "`Array` in format [vision mode, FLIR index]"
                },
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - soldier"
                        },
                        {
                            "name": "weapon",
                            "description": "`String` - unit's weapon. Use \"\" for current weapon"
                        }
                    ],
                    "outline": "unit `currentVisionMode` weapon",
                    "returns": "`Array` in format [vision mode, FLIR index]"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/currentVisionMode"
        },
        "configuration": {
            "label": "currentVisionMode",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the _index_ of the current waypoint (**not** the waypoint in [Waypoint Array](https://community.bistudio.com/wiki/Waypoint) format).\n\nTo determine the validity of the index, compare it to the waypoints count.\n\nIf all waypoints are completed, then the index is 1 greater than the last valid index.\n\nIf there are no waypoints, then the index is 0.\n\nBy default, a group has one waypoint at their starting position, which is considered completed so the currentWaypoint is 1.",
            "examples": [
                {
                    "text": "```sqf\n_index = currentWaypoint group player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "groupName",
                            "description": "`Group`"
                        }
                    ],
                    "outline": "`currentWaypoint` groupName",
                    "returns": "`Number` - index of the current waypoint"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/currentWaypoint"
        },
        "configuration": {
            "label": "currentWaypoint",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return the name of the currently selected weapon (on the primary turret for vehicles).",
            "examples": [
                {
                    "text": "```sqf\n_weaponClass = currentWeapon (vehicle player);//Example: \"M16A2GL\"\n```"
                },
                {
                    "text": "```sqf\n_weaponClass = currentWeapon player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`currentWeapon` vehicle",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/currentWeapon"
        },
        "configuration": {
            "label": "currentWeapon",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns current weapon mode of unit's weapon.\n\n**WARNING**: This command will return 0 `Number` if given object is a vehicle instead of a person.\n\nYou can alternatively use \n```sqf\n_muzzle = weaponState player select 2;\n```",
            "examples": [
                {
                    "text": "```sqf\n_weaponMode = currentWeaponMode player;\n```"
                },
                {
                    "text": "```sqf\n_weaponMode = currentWeaponMode gunner vehicle player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "gunner",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`currentWeaponMode` gunner",
                    "returns": "`String` - current mode's classname"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/currentWeaponMode"
        },
        "configuration": {
            "label": "currentWeaponMode",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the name of the currently selected weapon on specified turret. Use turret path [-1] for driver's turret.",
            "examples": [
                {
                    "text": "```sqf\n_weapon = MBT_Kuma currentWeaponTurret [0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` format [Turret Path](https://community.bistudio.com/wiki/Turret%20Path)"
                        }
                    ],
                    "outline": "vehicle `currentWeaponTurret` turretPath",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/currentWeaponTurret"
        },
        "configuration": {
            "label": "currentWeaponTurret",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns current zeroing.",
            "examples": [
                {
                    "text": "```sqf\nprivate _zeroing = currentZeroing player;\n```"
                },
                {
                    "text": "```sqf\n(player currentZeroing [\"arifle_MX_GL_F\", \"GL_3GL_F\"]) params [\"_distance\", \"_zeroingIndex\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - unit or vehicle"
                        }
                    ],
                    "outline": "`currentZeroing` object",
                    "returns": "`Number`"
                },
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - unit or vehicle"
                        },
                        {
                            "name": "weaponClass",
                            "description": "`String` - class name of weapon"
                        },
                        {
                            "name": "muzzleClass",
                            "description": "`String` - (Optional, default currently active muzzle or first that is found) muzzle classname"
                        }
                    ],
                    "outline": "object `currentZeroing` [weaponClass, muzzleClass]",
                    "returns": "`Array` in format:\n* 0: `Number` - distance\n* 1: `Number` - zeroingIndex\n** 0 ≙ 50 m\n** 1 ≙ 100 m\n** 2 ≙ 150 m\n** ..."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/currentZeroing"
        },
        "configuration": {
            "label": "currentZeroing",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the object under cursor. This command is quite different from `cursorTarget` as it is more precise in determining the boundaries of the pointed at object and can detect a larger variety of objects including map objects and trees.",
            "examples": [
                {
                    "text": "```sqf\nhint str [getModelInfo cursorObject, typeOf cursorObject];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**cursorObject**",
                    "returns": "`Object`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/cursorObject"
        },
        "configuration": {
            "label": "cursorObject",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the target pointed at by the player (usually with cross-hairs). The target has to be known to the player to some degree (`knowsAbout` > 0). If target is completely unknown, command returns `objNull`.\n\n\nA valid target could belong to an enemy or a friendly side. Buildings are normally known to player and so are valid targets. Try `nearTargets` to see what else is considered a target.\nWhile friendly targets are usually known to the player, enemy targets can be totally unknown, especially if \"auto-spotting\" (or sometimes called \"auto-reporting\") is switched off. To check if auto-spotting is enabled: <sqf inline>difficultyEnabled \"autospot\".\n\n\n`cursorTarget` also returns locked target for the duration of the lock even if there is another target under the cursor. As soon as missile is fired, `cursorTarget` switches to current known target under cursor or `objNull`.\nTargeting ({{Controls|T}} in Arma 3) works regardless of the state of \"auto-spotting\".\n\n\nAdding a target to the known list could be done with `reveal` command. When auto-spotting is enabled, zooming on the enemy target with cross-hairs usually reveals the target.\nAs friendly targets are always known, zooming on friendly target could improve `knowsAbout` value.\n\n\n[Side Relations](https://community.bistudio.com/wiki/Side%20Relations) can also influence target knowledge. For example `east` target is unknown target for `civilian`, but making them friends with `setFriend` instantly improves `civilian` knowledge of the `east`.",
            "examples": [
                {
                    "text": "```sqf\nalive cursorTarget;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`cursorTarget`",
                    "returns": "`Object`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/cursorTarget"
        },
        "configuration": {
            "label": "cursorTarget",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sends the chat message to the custom radio channel. The radio channel needs to be created on the server before hand, with `radioChannelCreate` command.\n\n**IMPORTANT**: The unit must have an [assigned](https://community.bistudio.com/wiki/assignItem) radio item (such as **\"ItemRadio\"**) to see or transmit the messages. A radio item must have the property <syntaxhighlight lang=\"cpp\" inline>simulation = \"ItemRadio\";</syntaxhighlight> in its [[CfgWeapons_Config_Reference#simulation.3D.22Weapon.22|CfgWeapons config]].",
            "examples": [
                {
                    "text": "```sqf\n_unit customChat [1, \"Hi, I am a custom chat message\"];\n```"
                },
                {
                    "text": "[[File:xChat.jpg|right]]\n\n```sqf\n\ndriver vehicle player sideChat \"sideChat\";\ndriver vehicle player globalChat \"globalChat\";\ndriver vehicle player groupChat \"groupChat\";\nvehicle player vehicleChat \"vehicleChat\";\ndriver vehicle player commandChat \"commandChat\";\ndriver vehicle player customChat [1, \"customChat\"];\nsystemChat \"systemChat\";\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "customChannelID",
                            "description": "`Number` - [Custom channel ID](https://community.bistudio.com/wiki/Channel%20IDs) returned by `radioChannelCreate` command"
                        },
                        {
                            "name": "message",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `customChat` [customChannelID, message]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/customChat"
        },
        "configuration": {
            "label": "customChat",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sends the message to the custom radio channel. The message is defined in the [[Description.ext|description.ext]] file or radio protocol.\n\n**IMPORTANT**: The unit must have an [assigned](https://community.bistudio.com/wiki/assignItem) radio item (such as **\"ItemRadio\"**) to see or transmit the messages. A radio item must have the property <syntaxhighlight lang=\"cpp\" inline>simulation = \"ItemRadio\";</syntaxhighlight> in its [[CfgWeapons_Config_Reference#simulation.3D.22Weapon.22|CfgWeapons config]].\n**NOTE**: When transmitting unit gets killed, transmission will be interrupted. However when receiving unit gets killed, the transmission continues to play.",
            "examples": [
                {
                    "text": "```sqf\n_soldierOne customRadio [1, \"WordEnemy\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "customChannelID",
                            "description": "`Number` - [custom channel ID](https://community.bistudio.com/wiki/Channel%20IDs) returned by `radioChannelCreate` command"
                        },
                        {
                            "name": "message",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `customRadio` [customChannelID, message]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/customRadio"
        },
        "configuration": {
            "label": "customRadio",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns player's custom waypoint ({{Controls|LShift|LMB}}) position.",
            "examples": [
                {
                    "text": "```sqf\n\nif (customWaypointPosition isNotEqualTo []) then\n{\n\thint format [\"You are %1m away from your custom waypoint.\", round (player distance customWaypointPosition)];\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`customWaypointPosition`",
                    "returns": "`Array` in format `Position` as [x,y,0], or empty array [] if the waypoint does not exist"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/customWaypointPosition"
        },
        "configuration": {
            "label": "customWaypointPosition",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Terminates the effect in the given layer by fading it out according to the given duration. If named layer is used and it doesn't exist, it will be allocated. For title layer see `titleFadeOut`.\n**Arma 3**: For greater efficiency and ease of moddability, it is recommended to use named layers.",
            "examples": [
                {
                    "text": "```sqf\n0 cutFadeOut 2;\n```"
                },
                {
                    "text": "```sqf\nprivate _layer = \"layer1\" cutFadeOut 2;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "layer",
                            "description": "`Number`"
                        },
                        {
                            "name": "duration",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "layer `cutFadeOut`  duration",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "layerName",
                            "description": "`String` - effect layer name. Layer names are CaSe SeNsItIvE"
                        },
                        {
                            "name": "duration",
                            "description": "`Number` - fade out time"
                        }
                    ],
                    "outline": "layerName `cutFadeOut`  duration",
                    "returns": "`Number` - number of the corresponding layer"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/cutFadeOut"
        },
        "configuration": {
            "label": "cutFadeOut",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Displays an object defined in the global config in `**CfgTitles**`.\n**Arma 3**: For greater efficiency and ease of modability, it is recommended to use named layers with {{Link|#Syntax 3}}.",
            "examples": [
                {
                    "text": "```sqf\n\ncutObj [\"TVSet\", \"PLAIN\"];\ncutObj [\"TVSet\", \"PLAIN\", 2];\n\n```"
                },
                {
                    "text": "```sqf\n2 cutObj [\"Sphere\", \"PLAIN\"];\n```"
                },
                {
                    "text": "```sqf\nprivate _layer = \"layer1\" cutObj [\"BISLogo\", \"PLAIN\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "class",
                            "description": "`String` - the className of the object defined in `**`configFile` >> \"CfgTitles\" >> class**`"
                        },
                        {
                            "name": "type",
                            "description": "`String` - one of \"PLAIN\", \"PLAIN DOWN\", \"BLACK\", \"BLACK FADED\", \"BLACK OUT\", \"BLACK IN\", \"WHITE OUT\" and \"WHITE IN\". See [Title Effect Type](https://community.bistudio.com/wiki/Title%20Effect%20Type)s for more information about these values"
                        },
                        {
                            "name": "speed",
                            "description": "`Number` - (Optional, default -1) time in seconds to fade in resource"
                        },
                        {
                            "name": "showInMap",
                            "description": "`Boolean` - (Optional, default `true`) `false` to hide the text when the map is opened"
                        },
                        {
                            "name": "drawOverHUD",
                            "description": "`Boolean` - (Optional, default `true`) `false` to show the object under in-game HUD"
                        }
                    ],
                    "outline": "`cutObj` [class, type, speed, showInMap, drawOverHUD]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "layer",
                            "description": "`Number` - layer number on which the effect is shown, where 0 is the back most. Layer number is rounded to the nearest integer and also cannot be negative. Layer 99.5 will be treated as layer 100"
                        },
                        {
                            "name": "class",
                            "description": "`String` - the className of the object defined in `**`configFile` >> \"CfgTitles\" >> class**`"
                        },
                        {
                            "name": "type",
                            "description": "`String` - one of \"PLAIN\", \"PLAIN DOWN\", \"BLACK\", \"BLACK FADED\", \"BLACK OUT\", \"BLACK IN\", \"WHITE OUT\" and \"WHITE IN\". See [Title Effect Type](https://community.bistudio.com/wiki/Title%20Effect%20Type)s for more information about these values."
                        },
                        {
                            "name": "speed",
                            "description": "`Number` - (Optional, default -1) time in seconds to fade in resource"
                        },
                        {
                            "name": "showInMap",
                            "description": "`Boolean` - (Optional, default `true`) `false` to hide the text when the map is opened"
                        },
                        {
                            "name": "drawOverHUD",
                            "description": "`Boolean` - (Optional, default `true`) `false` to show the object under in-game HUD"
                        }
                    ],
                    "outline": "layer `cutObj` [class, type, speed, showInMap, drawOverHUD]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "layerName",
                            "description": "`String` - layer name on which the effect is shown. Layer names are CaSe SeNsItIvE"
                        },
                        {
                            "name": "class",
                            "description": "`String` - the className of the object defined in `**`configFile` >> \"CfgTitles\" >> class**`"
                        },
                        {
                            "name": "type",
                            "description": "`String` - one of \"PLAIN\", \"PLAIN DOWN\", \"BLACK\", \"BLACK FADED\", \"BLACK OUT\", \"BLACK IN\", \"WHITE OUT\" and \"WHITE IN\". See [Title Effect Type](https://community.bistudio.com/wiki/Title%20Effect%20Type)s for more information about these values"
                        },
                        {
                            "name": "speed",
                            "description": "`Number` - (Optional, default -1) time in seconds to fade in resource"
                        },
                        {
                            "name": "showInMap",
                            "description": "`Boolean` - (Optional, default `true`) `false` to hide the text when the map is opened"
                        },
                        {
                            "name": "drawOverHUD",
                            "description": "`Boolean` - (Optional, default `true`) `false` to show the object under in-game HUD"
                        }
                    ],
                    "outline": "layerName `cutObj` [class, type, speed, showInMap, drawOverHUD]",
                    "returns": "`Number` - number of the allocated layer"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/cutObj"
        },
        "configuration": {
            "label": "cutObj",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Display a resource defined in RscTitles of the mission's [[Description.ext]], the campaign's description.ext or the global config.\n**Arma 3**: For greater efficiency and ease of modability, it is recommended to use named layers available with `String` and {{Link|#Syntax 2}}.\n**IMPORTANT**: To avoid conflicts with existing layers it is recommended to register a layer with `BIS_fnc_rscLayer` and to start the name with a TAG:\n\n```sqf\n\n(\"TAG_myLayer\" call BIS_fnc_rscLayer) cutRsc [\"myRsc\", \"PLAIN\"];\n\"TAG_myLayer\" cutRsc [\"myRsc\", \"PLAIN\"];\n```",
            "examples": [
                {
                    "text": "```sqf\n\ncutRsc [\"binocular\", \"PLAIN\"];\ncutRsc [\"binocular\", \"PLAIN\", 2];\ncutRsc [\"binocular\", \"PLAIN\", 2, false];\n\n```"
                },
                {
                    "text": "```sqf\n2 cutRsc [\"binocular\", \"PLAIN\", 2];\n```"
                },
                {
                    "text": "```sqf\n_layer = \"layer1\" cutRsc [\"binocular\", \"PLAIN\", 2];\n```"
                },
                {
                    "text": "```sqf\n\n// create IGUI display\n// such display can be closed with closeDisplay command or by overwriting the same cut layer with another output.\n// note that \"Unload\" EH for some reason does not work with such display.\n\"someLayer\" cutRsc [\"RscTitleDisplayEmpty\", \"PLAIN\"];\nprivate _display = uiNamespace getVariable \"RscTitleDisplayEmpty\";\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "class",
                            "description": "`String` - the class name of the resource. (\"Default\" will remove the current resource.)"
                        },
                        {
                            "name": "effect",
                            "description": "`String` - one of \"PLAIN\", \"PLAIN DOWN\", \"BLACK\", \"BLACK FADED\", \"BLACK OUT\", \"BLACK IN\", \"WHITE OUT\" and \"WHITE IN\". See [Title Effect Type](https://community.bistudio.com/wiki/Title%20Effect%20Type)s for more information about these values."
                        },
                        {
                            "name": "speed",
                            "description": "`Number` - (Optional, default -1) time in seconds to fade in resource."
                        },
                        {
                            "name": "showInMap",
                            "description": "`Boolean` - (Optional, default `true`) `false` to hide the text when the map is opened."
                        },
                        {
                            "name": "drawOverHUD",
                            "description": "`Boolean` - (Optional, default `true`) `false` to show the resource under in-game HUD"
                        }
                    ],
                    "outline": "`cutRsc` [class, effect, speed, showInMap, drawOverHUD]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "layer",
                            "description": "`Number` or `String`\n* `Number` - layer number on which the effect is shown, where 0 is the back most. Layer number is rounded to the nearest integer and also cannot be negative. Layer 99.5 will be treated as layer 100\n* `String` - {{GVI|arma3|1.58"
                        },
                        {
                            "name": "class",
                            "description": "`String` - the class name of the resource. (\"Default\" will remove the current resource.)"
                        },
                        {
                            "name": "effect",
                            "description": "`String` - one of \"PLAIN\", \"PLAIN DOWN\", \"BLACK\", \"BLACK FADED\", \"BLACK OUT\", \"BLACK IN\", \"WHITE OUT\" and \"WHITE IN\". See [Title Effect Type](https://community.bistudio.com/wiki/Title%20Effect%20Type)s for more information about these values."
                        },
                        {
                            "name": "speed",
                            "description": "`Number` - (Optional, default -1) time in seconds to fade in resource."
                        },
                        {
                            "name": "showInMap",
                            "description": "`Boolean` - (Optional, default `true`) `false` to hide the text when the map is opened."
                        },
                        {
                            "name": "drawOverHUD",
                            "description": "`Boolean` - (Optional, default `true`) `false` to show the resource under in-game HUD"
                        }
                    ],
                    "outline": "layer `cutRsc` [class, effect, speed, showInMap, drawOverHUD]",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/cutRsc"
        },
        "configuration": {
            "label": "cutRsc",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Displays a text message in the center of the screen. The text can be displayed on multiple lines by using \"\\n\" new line characters: <sqf inline>cutText [\"line1\\nline2\\nline3\", \"PLAIN\"];\n\n**Arma 3**: For greater efficiency and ease of modability it is recommended to use named layers through the alternative syntax.",
            "examples": [
                {
                    "text": "```sqf\n\ncutText [\"\", \"BLACK OUT\"];\ncutText [\"Hello World!\", \"PLAIN\", 2];\n\n```"
                },
                {
                    "text": "```sqf\n2 cutText [\"Hello World!\", \"PLAIN\", 2]; // returns nothing\n```"
                },
                {
                    "text": "```sqf\n\nprivate _layer1 = \"normal\" cutText [\"In The Centre\", \"PLAIN\"];\nprivate _layer2 = \"down\" cutText [\"At The Bottom\", \"PLAIN DOWN\"];\n\n```"
                },
                {
                    "text": "```sqf\ncutText [\"<t color='#ff0000' size='5'>RED ALERT!</t><br/>***********\", \"PLAIN\", -1, true, true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "text",
                            "description": "`String` - text to be displayed"
                        },
                        {
                            "name": "type",
                            "description": "`String` - one of \"PLAIN\", \"PLAIN DOWN\", \"BLACK\", \"BLACK FADED\", \"BLACK OUT\", \"BLACK IN\", \"WHITE OUT\" and \"WHITE IN\". See [Title Effect Type](https://community.bistudio.com/wiki/Title%20Effect%20Type)s for more information about these values."
                        },
                        {
                            "name": "speed",
                            "description": "`Number` - (Optional, default 1) time in seconds to fade in resource. If 0 or less, default value is used"
                        },
                        {
                            "name": "showInMap",
                            "description": "`Boolean` - (Optional, default `true`) `false` to hide the text when the map is opened"
                        },
                        {
                            "name": "isStructuredText",
                            "description": "`Boolean` - (Optional, default `false`) `true` to switch support for [Structured Text](https://community.bistudio.com/wiki/Structured%20Text) formatting - see _Example 4_"
                        },
                        {
                            "name": "drawOverHUD",
                            "description": "`Boolean` - (Optional, default `true`) `false` to show the text under in-game HUD"
                        }
                    ],
                    "outline": "`cutText` [text, type, speed, showInMap, isStructuredText, drawOverHUD]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "layer",
                            "description": "`Number` or `String`\n* `Number` - layer number on which the effect is shown, where 0 is the back most. Layer number is rounded to the nearest integer and also cannot be negative. Layer 99.5 will be treated as layer 100.\n* `String` - layer name on which the effect is shown. Layer names are CaSe SeNsItIvE."
                        },
                        {
                            "name": "text",
                            "description": "`String` - text to be displayed"
                        },
                        {
                            "name": "type",
                            "description": "`String` - one of \"PLAIN\", \"PLAIN DOWN\", \"BLACK\", \"BLACK FADED\", \"BLACK OUT\", \"BLACK IN\", \"WHITE OUT\" and \"WHITE IN\". See [Title Effect Type](https://community.bistudio.com/wiki/Title%20Effect%20Type)s for more information about these values."
                        },
                        {
                            "name": "speed",
                            "description": "`Number` - (Optional, default -1) time in seconds to fade in resource. If 0 or less, default value is used"
                        },
                        {
                            "name": "showInMap",
                            "description": "`Boolean` - (Optional, default `true`) `false` to hide the text when the map is opened"
                        },
                        {
                            "name": "isStructuredText",
                            "description": "`Boolean` - (Optional, default `false`) `true` to switch support for [Structured Text](https://community.bistudio.com/wiki/Structured%20Text) formatting - see _Example 4_"
                        },
                        {
                            "name": "drawOverHUD",
                            "description": "`Boolean` - (Optional, default `true`) `false` to show the text under in-game HUD"
                        }
                    ],
                    "outline": "layer `cutText` [text, type, speed, showInMap, isStructuredText, drawOverHUD]",
                    "returns": "* `Nothing` when _layer_ is a `Number`\n* `Number` when ''layer is a `String`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/cutText"
        },
        "configuration": {
            "label": "cutText",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return the damage value of an object.",
            "examples": [
                {
                    "text": "<sqs>? damage player > 0.1 : player groupChat \"I'm hurt! Medic!\"</sqs>"
                },
                {
                    "text": "```sqf\n\nif (damage player > 0.1) then\n{\n\tplayer groupChat \"I'm hurt! Medic!\";\n};\n\n```"
                },
                {
                    "text": "```sqf\nprivate _health = (1 - damage player) * 100; // health in % from 0 to 100\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`damage` object",
                    "returns": "`Number` - the returned number in range (healthy) 0..1 (dead)."
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/damage"
        },
        "configuration": {
            "label": "damage",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return the actual in-mission date and time.",
            "examples": [
                {
                    "text": "```sqf\n\n// in {{arma3}}\ndate params [\"_year\", \"_month\", \"_day\", \"_hours\", \"_minutes\"];\n\n// pre {{arma3}}\nprivate [\"_now\", \"_year\", \"_month\", \"_day\", \"_hours\", \"_minutes\"];\n_now = date;\t// [2014,10,30,2,30] a.k.a Oct. 30th, 2:30am\n_year\t\t= _now select 0;\n_month\t\t= _now select 1;\n_day\t\t= _now select 2;\n_hours\t\t= _now select 3;\n_minutes\t= _now select 4;\n\n```"
                },
                {
                    "text": "```sqf\n\nif (date select 3 >= 19) then\t\t// 7pm\n{\n\thintSilent \"ah, Arma sunset\";\t// ...cue bad guys\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`date`",
                    "returns": "`Array` - `Date` format"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/date"
        },
        "configuration": {
            "label": "date",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Convert a date to a float number, based on Jan 1st 00:00:00 = 0 and Dec 31st  23:59:59 = 1. The same day and time in leap year will be different after 28th of February and 23:59 on 31st of December will be 1.00274.\n\n\nThis is how this command works. The 365 days of the year are presented in range 0...1. So each day will be:\n\n```sqf\n1 / 365 = 0.00273973\n```\n\nIn a leap year there are 366 days, so the range will increase by 1 day:\n\n```sqf\n1 / 365 * 366 = 1.00274\n```\n\nIn short, in a normal year the command returns in range 0...1 in a leap year it will return in range 0...1.00274.",
            "examples": [
                {
                    "text": "```sqf\n_float = dateToNumber [2035,7,6,12,0]; // 0.510959\n```"
                },
                {
                    "text": "```sqf\ndateToNumber date; // returns float number for the current date\n```"
                },
                {
                    "text": "Calculate days from 1/1/1970:\n\n```sqf\n\nfnc_daysFromEpoc = \n{\n\tprivate _year = param [0];\n\tprivate _days = 0;\n\tfor \"_i\" from 1970 to _year - 1 do \n\t{\n\t\t_days = _days + round linearConversion [0, 1, dateToNumber [_i, 12, 31, 23, 59], 0, 365, false];\n\t};\n\t_days + linearConversion [0, 1, dateToNumber _this, 0, 365, false];\n};\n\nhint str (date call fnc_daysFromEpoc);\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "date",
                            "description": "`Array` - array in `date` format"
                        }
                    ],
                    "outline": "`dateToNumber` date",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/dateToNumber"
        },
        "configuration": {
            "label": "dateToNumber",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the current in-game time in hours. For a formatted version of time, see `BIS_fnc_timeToString`.",
            "examples": [
                {
                    "text": "```sqf\ndayTime; // returns 16.5 given it is 16:30 (4.30pm) in game\n```"
                },
                {
                    "text": "Get hour, minute, seconds:\n\n```sqf\n\nprivate _daytime = dayTime; // assuming dayTime returns 1.66046\nprivate _hours = floor _daytime;\t\t\t\t\t\t\t\t\t\t\t//  1\nprivate _minutes = floor ((_daytime - _hours) * 60);\t\t\t\t\t\t// 39\nprivate _seconds = floor ((((_daytime - _hours) * 60) - _minutes) * 60);\t// 37\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`dayTime`",
                    "returns": "`Number` - day time using a 24 hour clock, using fractions of hours - range [0..24]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/dayTime"
        },
        "configuration": {
            "label": "dayTime",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Deactivates the given keyname for the current user profile. The keys are used to unlock missions or campaigns.\n\nSee keys, keysLimit and doneKeys in the [[Description.ext#keys|description.ext]] file of the missions.",
            "examples": [
                {
                    "text": "```sqf\ndeActivateKey \"Mission04Key\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "keyname",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`deActivateKey` keyname",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/deActivateKey"
        },
        "configuration": {
            "label": "deActivateKey",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns debriefing text of provided end.",
            "examples": [
                {
                    "text": "```sqf\n_deathText = debriefingText \"endDeath\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "end",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`debriefingText` end",
                    "returns": "`String` - _end_ debriefing text. If it does not exist in config, empty string is returned."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/debriefingText"
        },
        "configuration": {
            "label": "debriefingText",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Dump (something about FSM) to debugging output. This command is (assumed to be) non-functional in the retail version.\n**WARNING**: Non functional in retail",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "FSMhandle",
                            "description": "`Number`"
                        },
                        {
                            "name": "true",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "FSMhandle `debugFSM` true",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/debugFSM"
        },
        "configuration": {
            "label": "debugFSM",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Dump argument type and value to debugging output. \n\n**WARNING**: This command is non-functional in the retail version. Use `diag_log` instead.",
            "examples": [
                {
                    "text": "```sqf\ndebugLog player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "anything",
                            "description": "`Anything`"
                        }
                    ],
                    "outline": "`debugLog` anything",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/debugLog"
        },
        "configuration": {
            "label": "debugLog",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Multiplies graph values by the given coefficient. The corresponding lower bound value is used instead if the product is smaller than the bound.",
            "examples": [
                {
                    "text": "```sqf\ndecayGraphValues [[1,2,3,4,5], [1,4,9,16,25], 0.3]; // returns [1,2,3,4.8,7.5]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "lowerBoundValues",
                            "description": "`Array` of `Number`s - lower bound for the new graph"
                        },
                        {
                            "name": "graphValues",
                            "description": "`Array` of `Number`s - graph values"
                        },
                        {
                            "name": "coef",
                            "description": "`Number` - the multiplication coefficient"
                        }
                    ],
                    "outline": "`decayGraphValues` [lowerBoundValues, graphValues, coef]",
                    "returns": "`Array` of `Number`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/decayGraphValues"
        },
        "configuration": {
            "label": "decayGraphValues",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Defines a [Switch Type](https://community.bistudio.com/wiki/Switch%20Type) default case - does **not** need a colon to define its block. See `switch` for more information.",
            "examples": [
                {
                    "text": "```sqf\nswitch (_condition) do\n{\n\tcase 1: { hint \"1\" };\n\tcase 2: { hint \"2\" };\n\tdefault { hint \"default\" }; // no colon after default\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "a",
                            "description": "`Code`"
                        }
                    ],
                    "outline": "`default` a",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/default"
        },
        "configuration": {
            "label": "default",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "Converts given value in radians to degrees. 1 degree equals 0.01745 radians or `pi` / 180.\n\n{{Feature|informative|{{hl",
            "examples": [
                {
                    "text": "```sqf\n_degrees = deg 1; // Returns 57.2958\n```"
                },
                {
                    "text": "```sqf\ndeg (2 * pi / 360); // Returns 1\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "value",
                            "description": "`Number` - radians"
                        }
                    ],
                    "outline": "`deg` value",
                    "returns": "`Number` - degrees"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/deg"
        },
        "configuration": {
            "label": "deg",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Delete given [entities](https://community.bistudio.com/wiki/Eden%20Entity) in [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor).",
            "examples": [
                {
                    "text": "```sqf\ndelete3DENEntities (all3DENEntities select 0); // Removes all objects\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entities",
                            "description": "`Array` of [Eden Entity](https://community.bistudio.com/wiki/Eden%20Entity) or [Eden ID](https://community.bistudio.com/wiki/Eden%20ID)"
                        }
                    ],
                    "outline": "`delete3DENEntities`  entities",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/delete3DENEntities"
        },
        "configuration": {
            "label": "delete3DENEntities",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes array element at the given index and returns removed element (modifies the original array, just like `resize` or `set`).\n**NOTE**:  For the main `Array` variant, if the index is a negative `Number`, no error will appear, making it ideal for using with `find` (see _Example 2_) or `findIf` (see _Example 3_).",
            "examples": [
                {
                    "text": "```sqf\n\n_arr = [1,2,3];\n_rem = _arr deleteAt 1;\nhint str [_rem, _arr]; // [2, [1, 3]]\n\n```"
                },
                {
                    "text": "```sqf\n\n_arr = [1,2,3];\n_arr deleteAt (_arr find 0); // non existent item\nhint str _arr; // [1,2,3]\n_arr deleteAt (_arr find 2); // existent item\nhint str _arr; // [1,3]\n\n```"
                },
                {
                    "text": "```sqf\n\n_arr = [1,2,3];\n_arr deleteAt (_arr findIf {(_x % 5) == 0}); // Remove first number that's divisible by 5\nhint str _arr; // [1,2,3]\n_arr deleteAt (_arr findIf {(_x % 2) == 0}); // Remove first number that's divisible by 2\nhint str _arr; // [1,3]\n\n```"
                },
                {
                    "text": "```sqf\n\n_arr = [1,2,3,4];\n_res = _arr deleteAt [-1, 0]; // Remove the last and the first array element\nsystemchat str [_res, _arr]; // [[4,1],[2,3]]\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array`"
                        },
                        {
                            "name": "index",
                            "description": "`Number` (see a note in description)"
                        }
                    ],
                    "outline": "array `deleteAt` index",
                    "returns": "`Anything` - returns the deleted element or `Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "hashMap",
                            "description": "`HashMap`"
                        },
                        {
                            "name": "key",
                            "description": "`HashMapKey`"
                        }
                    ],
                    "outline": "hashMap `deleteAt` key",
                    "returns": "`Anything`"
                },
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array`"
                        },
                        {
                            "name": "indexes",
                            "description": "`Array` - multiple indexes, negative indexes are supported and would remove elements counting from the end of array (see _Example 4_)."
                        }
                    ],
                    "outline": "array `deleteAt` indexes",
                    "returns": "`Array` -  deleted elements in order of user supplied indexes"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/deleteAt"
        },
        "configuration": {
            "label": "deleteAt",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "In a nutshell, this command removes gaming `Side` (see `createCenter`). If a side has >0 `Group`s it cannot be deleted. Center can only be created for: `east`, `west`, `resistance`, `civilian` and `sideLogic`, therefore only centers from the mentioned sides can be deleted.\n\n\n**Old description:** Destroys the AI center of the given side.",
            "examples": [
                {
                    "text": "```sqf\ndeleteCenter east;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "side",
                            "description": "`Side`"
                        }
                    ],
                    "outline": "`deleteCenter` side",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/deleteCenter"
        },
        "configuration": {
            "label": "deleteCenter",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Delete a collection. As example, used with a soldier, it'll hide the ingame model.\n\n_When targetting Arma 2 1.06 or newer, use `hideObject` instead. This function is a relic from dynamic building destruction development. It is left only for compatibility with scripts created before Arma 2 1.06, and its functionality may be changed or removed in the future._",
            "examples": [
                {
                    "text": "```sqf\ndeleteCollection unitName;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`deleteCollection` object",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/deleteCollection"
        },
        "configuration": {
            "label": "deleteCollection",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Delete the editor object. Requires all editor object links to be removed prior. \n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "object",
                            "description": "`String`"
                        }
                    ],
                    "outline": "map `deleteEditorObject` object",
                    "returns": "`Anything`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/deleteEditorObject"
        },
        "configuration": {
            "label": "deleteEditorObject",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Destroys the given group - the group must be empty and [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality) to the machine executing this command.\n\n{{Feature|informative|In Arma 3 you can find out locality of the group with `local` command, unlike with previous games. However `owner` and `setOwner` don't work with groups anywhere. The group will always be local to the client that created it, until the client disconnects, then the group becomes local to the server. So if you need to delete a group, delete all members first then execute `deleteGroup` where is it `local`.}}\n\n**Arma 3**: In Arma 3 when the last unit leaves a group, the group gets automatically deleted. Manually deleting all units from a group, however, does **not** automatically delete the empty group. To force the group to get auto-deleted when empty, use `deleteGroupWhenEmpty`.",
            "examples": [
                {
                    "text": "```sqf\ndeleteGroup _group;\n```"
                },
                {
                    "text": "```sqf\n[_group] remoteExec [\"deleteGroup\", groupOwner _group]; // server only\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group`"
                        }
                    ],
                    "outline": "`deleteGroup` group",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/deleteGroup"
        },
        "configuration": {
            "label": "deleteGroup",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Marks given group for auto-deletion when group is empty.\n`true` will mark the group for auto-deletion once empty, `false` will simply unmark the group that was marked previously.\n**IMPORTANT**: This command does **not** prevent group deletion (through e.g `deleteGroup` or any engine group management).",
            "examples": [
                {
                    "text": "```sqf\n_group deleteGroupWhenEmpty true;\n```"
                },
                {
                    "text": "Executed on the server:\n\n```sqf\n\nif (local _group) then\n{\n\t_group deleteGroupWhenEmpty true;\n}\nelse // group is local to a client\n{\n\t[_group, true] remoteExec [\"deleteGroupWhenEmpty\", groupOwner _group];\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group`"
                        },
                        {
                            "name": "delete",
                            "description": "`Boolean` - `true` to mark for auto-deletion on empty group, `false` to not use this auto-deletion system"
                        }
                    ],
                    "outline": "group `deleteGroupWhenEmpty` delete",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/deleteGroupWhenEmpty"
        },
        "configuration": {
            "label": "deleteGroupWhenEmpty",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Deletes an identity created with `saveIdentity` from the campaign's progress file.",
            "examples": [
                {
                    "text": "```sqf\n_deleted = deleteIdentity \"playerIdentity\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "identityName",
                            "description": "`String` - name of the saved identity"
                        }
                    ],
                    "outline": "`deleteIdentity`  identityName",
                    "returns": "`Boolean` - `true` if the identity was deleted successfully, `false` if not"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/deleteIdentity"
        },
        "configuration": {
            "label": "deleteIdentity",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Deletes scripted location.",
            "examples": [
                {
                    "text": "```sqf\ndeleteLocation myLocation;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "location",
                            "description": "`Location`"
                        }
                    ],
                    "outline": "`deleteLocation` location",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/deleteLocation"
        },
        "configuration": {
            "label": "deleteLocation",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Destroys the given marker.",
            "examples": [
                {
                    "text": "```sqf\ndeleteMarker \"Marker1\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "name",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`deleteMarker` name",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/deleteMarker"
        },
        "configuration": {
            "label": "deleteMarker",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Destroys the given marker.",
            "examples": [
                {
                    "text": "```sqf\ndeleteMarkerLocal \"Marker1\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`deleteMarkerLocal` markerName",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/deleteMarkerLocal"
        },
        "configuration": {
            "label": "deleteMarkerLocal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes a range of array elements from the given array. Modifies the original array, just like `resize` or `set`.",
            "examples": [
                {
                    "text": "```sqf\n\n_arr = [1,2,3,4,5,6];\n_arr deleteRange [1,4];\nhint str _arr; // [1,6]\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array`"
                        },
                        {
                            "name": "from",
                            "description": "`Number` - array index to start selection from."
                        },
                        {
                            "name": "count",
                            "description": "`Number` - number of array elements to remove. If the selected range exceeds source array boundaries, selection will be made up to the end of the array."
                        }
                    ],
                    "outline": "array `deleteRange` [from, count]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/deleteRange"
        },
        "configuration": {
            "label": "deleteRange",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Delete (unregister) resources of the team member. Resources are deleted in the order they were added. Case insensitive.",
            "examples": [
                {
                    "text": "```sqf\nteamMember _agent deleteResources [\"Legs\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "teamMember",
                            "description": "[Team Member](https://community.bistudio.com/wiki/Team%20Member)"
                        },
                        {
                            "name": "resources",
                            "description": "`Array` of `String`s"
                        }
                    ],
                    "outline": "teamMember `deleteResources` resources",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/deleteResources"
        },
        "configuration": {
            "label": "deleteResources",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes the site.\n**WARNING**: This command is considered deprecated and is no longer supported",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "site",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`deleteSite` site",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/deleteSite"
        },
        "configuration": {
            "label": "deleteSite",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Deletes a status created with `saveStatus` from the campaign's progress file.",
            "examples": [
                {
                    "text": "```sqf\n_deleted = deleteStatus \"playerStatus\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "statusName",
                            "description": "`String` - name of the saved status"
                        }
                    ],
                    "outline": "`deleteStatus` statusName",
                    "returns": "`Boolean` - `true` if the status was deleted successfully, `false` if not"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/deleteStatus"
        },
        "configuration": {
            "label": "deleteStatus",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Delete a target.",
            "examples": [
                {
                    "text": "```sqf\ndeleteTarget target1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Target`"
                        }
                    ],
                    "outline": "`deleteTarget` target",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/deleteTarget"
        },
        "configuration": {
            "label": "deleteTarget",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Destroy given team.",
            "examples": [
                {
                    "text": "```sqf\ndeleteTeam _team;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "team",
                            "description": "[Team Member](https://community.bistudio.com/wiki/Team%20Member)"
                        }
                    ],
                    "outline": "`deleteTeam` team",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/deleteTeam"
        },
        "configuration": {
            "label": "deleteTeam",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Deletes an object. Only objects inserted in the mission editor and objects created during the game's progress can be deleted by this command. Terrain objects and players cannot be deleted.\n**NOTE**: The actual object deletion, when the object becomes `objNull`, happens on the next frame after command execution, but there are some object modifications that happen immediately. For example if the object is a unit in a group, it immediately becomes groupless (<sqf inline>isNull group _unit; // true).",
            "examples": [
                {
                    "text": "```sqf\ndeleteVehicle _house1;\n```"
                },
                {
                    "text": "Deleting a vehicle with crew:\n\n```sqf\n\n// might want to make sure that the car is local\n{ car deleteVehicleCrew _x } forEach crew car;\ndeleteVehicle car;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`deleteVehicle` object",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "objects",
                            "description": "`Array` of `Object`s"
                        }
                    ],
                    "outline": "`deleteVehicle` objects",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/deleteVehicle"
        },
        "configuration": {
            "label": "deleteVehicle",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Deletes a member of or the whole crew of a vehicle. Human players cannot be deleted.\n**NOTE**: This command attempts to move the given `crew` member out before deleting it. Made especially for deleting dead crew members, as using conventional `deleteVehicle` leads to all sorts of bugs and ghost objects. While the argument is global, you should take extra steps and execute this where vehicle is [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality) as moving units out of the vehicle happens where vehicle is [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality) and you want this to always precede deletion.",
            "examples": [
                {
                    "text": "```sqf\n\n// delete when knowing the vehicle\n_helicopter deleteVehicleCrew driver _helicopter;\n\n// delete when only knowing the unit\n// vehicle _soldier deleteVehicleCrew _soldier;\t\t// may return the unit itself when used on dead crew\nobjectParent _soldier deleteVehicleCrew _soldier;\t// faster and always returns the vehicle\n\n```"
                },
                {
                    "text": "Delete entire crew:\n\n```sqf\n\ndeleteVehicleCrew _tank; // since v2.06\n\n{ _helicopter deleteVehicleCrew _x } forEach crew _helicopter; // before v2.06\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "vehicle `deleteVehicleCrew` unit",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`deleteVehicleCrew` vehicle",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/deleteVehicleCrew"
        },
        "configuration": {
            "label": "deleteVehicleCrew",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes the specified waypoint.\n**NOTE**: \n* When a waypoint is deleted, all other `group` `waypoints` are immediately re-indexed. See _Example 2_ for a deletion of all group's waypoints.\n* Deleting a group's [current waypoint](https://community.bistudio.com/wiki/currentWaypoint) will _not_ stop the group on its tracks.",
            "examples": [
                {
                    "text": "```sqf\ndeleteWaypoint [_grp, 2];\n```"
                },
                {
                    "text": "Because waypoints get immediately re-indexed when one gets deleted, delete them from last to first:\n\n```sqf\n\nprivate _group = group _unit;\nfor \"_i\" from (count waypoints _group - 1) to 0 step -1 do\n{\n\tdeleteWaypoint [_group, _i];\n};\n\n```\n\nor always delete the first one (if you want to delete them all)\n\n```sqf\n\nprivate _group = group _unit;\nfor \"_i\" from 0 to (count waypoints _group - 1) do\n{\n\tdeleteWaypoint [_group, 0];\n};\n\n```\n\nor use `forEachReversed`:\n\n```sqf\n\n{ deleteWaypoint _x } forEachReversed waypoints _group; // Arma 3 v2.14+ only\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`deleteWaypoint` [group, index]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/deleteWaypoint"
        },
        "configuration": {
            "label": "deleteWaypoint",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Detaches previously attached with `attachTo` object.",
            "examples": [
                {
                    "text": "```sqf\nobj1 attachTo [player];\ndetach obj1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`detach` object",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/detach"
        },
        "configuration": {
            "label": "detach",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array of all mines detected by a given side",
            "examples": [
                {
                    "text": "```sqf\ndetectedMines west;\n```"
                },
                {
                    "text": "```sqf\ndetectedMines side player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "side",
                            "description": "`side`"
                        }
                    ],
                    "outline": "`detectedMines` side",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/detectedMines"
        },
        "configuration": {
            "label": "detectedMines",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array with active Mission FSMs. To see number of all scripts currently in the scheduler use `diag_activeScripts`.",
            "examples": [
                {
                    "text": "```sqf\n{ systemChat str _x } forEach diag_activeMissionFSMs;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`diag_activeMissionFSMs`",
                    "returns": "`Array` - format [<nowiki/>[name, state, timeout],...]:\n* name: `String` \n* state:\n* timeout:"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_activeMissionFSMs"
        },
        "configuration": {
            "label": "diag_activeMissionFSMs",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns 4 element array with numbers of currently running scripts in format: [<nowiki/>`spawn`-ed, `execVM`-ed, `exec`-ed, `execFSM`-ed]",
            "examples": [
                {
                    "text": "```sqf\nhint str diag_activeScripts; //[0,0,0,1]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`diag_activeScripts`",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_activeScripts"
        },
        "configuration": {
            "label": "diag_activeScripts",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns information about active [SQF](https://community.bistudio.com/wiki/SQF%20Syntax) scripts. To see number of all scripts currently in the scheduler use `diag_activeScripts`.",
            "examples": [
                {
                    "text": "```sqf\n0 spawn { hint str diag_activeSQFScripts; }; // displays [[\"<spawn> hint str diag_activeSQFScripts;\", \"\", true, 1]]\n```"
                },
                {
                    "text": "```sqf\n\n0 spawn {\n\thint str diag_activeSQFScripts; // displays [[\"<spawn> hint str diag_activeSQFScripts;\", \"\", true, 2]]\n};\n\n```"
                },
                {
                    "text": "```sqf\n\n0 spawn {\n\tscriptName \"aScript\";\n\thint str diag_activeSQFScripts; // displays [<nowiki/>[\"aScript\", \"\", true, 3]]\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`diag_activeSQFScripts`",
                    "returns": "`Array` of `Array`s - to format [<nowiki/>[scriptName, fileName, isRunning, currentLine], ...]:\n* scriptName: `String` - Returns:\n** Script name set with `scriptName`\n** File name if script name is empty\n** <spawn> + first 100 characters if script name and file name are both empty\n* filePath: `String` - path of the parent script\n* isRunning: `Boolean`\n* currentLine: `Number` - line currently executing"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_activeSQFScripts"
        },
        "configuration": {
            "label": "diag_activeSQFScripts",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array with active SQSs. To see number of all scripts currently in the scheduler use `diag_activeScripts`.",
            "examples": [
                {
                    "text": "```sqf\n{ systemChat str _x } forEach diag_activeSQSScripts;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`diag_activeSQSScripts`",
                    "returns": "`Array` in format [<nowiki/>[name, fileName, isRunning, currentLine],...]:\n* name: `String` - function or file name\n* fileName: `String`\n* isRunning: `Boolean`\n* currentLine: `Number` - line currently executing"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_activeSQSScripts"
        },
        "configuration": {
            "label": "diag_activeSQSScripts",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array with all [mission event handlers](https://community.bistudio.com/wiki/addMissionEventHandler).",
            "examples": [
                {
                    "text": "```sqf\n\ndiag_allMissionEventHandlers;\n/*\nreturns:\n[\n\t\"Ended\",0,\n\t\"SelectedActionPerformed\",0,\n\t\"SelectedRotorLibActionPerformed\",0,\n\t\"SelectedActionChanged\",0,\n\t\"SelectedRotorLibActionChanged\",0,\n\t\"ControlsShifted\",0,\n\t\"Draw3D\",1,\n\t\"Loaded\",0,\n\t\"HandleDisconnect\",0,\n\t\"EntityRespawned\",0,\n\t\"EntityKilled\",0,\n\t\"MapSingleClick\",0,\n\t\"HCGroupSelectionChanged\",0,\n\t\"CommandModeChanged\",0,\n\t\"PlayerConnected\",0,\n\t\"PlayerDisconnected\",0,\n\t\"TeamSwitch\",0,\n\t\"GroupIconClick\",0,\n\t\"GroupIconOverEnter\",0,\n\t\"GroupIconOverLeave\",0,\n\t\"EachFrame\",0,\n\t\"PreloadStarted\",0,\n\t\"PreloadFinished\",0,\n\t\"Map\",0,\n\t\"PlayerViewChanged\",0,\n\t\"BuildingChanged\",0,\n\t\"MPEnded\",0,\n\t\"HandleAccTime\",0,\n\t\"ExtensionCallback\",0\n]\n*/\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`diag_allMissionEventHandlers`",
                    "returns": "`Array` - in format [\"EH1name\", EH1count, \"EH2name\", EH2count, ...]"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/diag_allMissionEventHandlers"
        },
        "configuration": {
            "label": "diag_allMissionEventHandlers",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "This command starts counting frames from the moment it is executed and when the count reaches the number passed as param, the current frame is captured and captured data UI dialog appears, similar to `diag_captureSlowFrame`. This can also be executed on a dedicated Server and because a Server has no UI it will behave like `diag_captureFrameToFile`.\n**IMPORTANT**: BattlEye's RCON variant of this command is **#captureFrame**",
            "examples": [
                {
                    "text": "```sqf\ndiag_captureFrame 1; // capture the first frame after command execution\n```"
                },
                {
                    "text": "```sqf\ndiag_captureFrame 24; // capture 24th frame after command execution\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "frame",
                            "description": "`Number` - next n-th frame to be captured"
                        }
                    ],
                    "outline": "`diag_captureFrame` frame",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_captureFrame"
        },
        "configuration": {
            "label": "diag_captureFrame",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "This command starts counting frames from the moment it is executed and when the count reaches the number passed as param, the current frame is captured and \nwritten to a log file in the same directory as the [[Crash_Files|.rpt file]].\n\nThe full Path to the log file is logged to simultaneously.\n\nThe data in the log file can be copied and pasted into the `diag_captureFrame` UI dialog to get a visualisation later on.",
            "examples": [
                {
                    "text": "```sqf\ndiag_captureFrameToFile 1; //capture the first frame after command execution\n```"
                },
                {
                    "text": "```sqf\ndiag_captureFrameToFile 24; //capture 24th frame after command execution\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "frame",
                            "description": "`Number` - next n-th frame to be captured"
                        }
                    ],
                    "outline": "`diag_captureFrameToFile`  frame",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_captureFrameToFile"
        },
        "configuration": {
            "label": "diag_captureFrameToFile",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "[[File:CaptureSlowFrame.jpg|right|200x120px]]\nOpens \"capture frame\" dialog if current frame exceeds set threshold in seconds. One can indicate to either capture duration of a specific profiling selection or the total duration of the frame. The selection names can be obtained by expanding the profiling tree. Clicking on a tree item will highlight the item on the graph and vice versa. The GUI also provides method of copying of the displayed data to clipboard. Some of the selections:\n{{{!}} class=\"wikitable valign-top-row-2\" style=\"margin: 1em auto\"\n! Render\n! Main Thread\n! Visualize\n! Mjob\n{{!}}-\n{{!}}\n* bgD3D\n{{!}}\n* total\n* memAl\n{{!}}\n* visul\n{{!}}\n* Mjob\n{{!}}}",
            "examples": [
                {
                    "text": "```sqf\ndiag_captureSlowFrame [\"total\", 0.003];\n```"
                },
                {
                    "text": "```sqf\ndiag_captureSlowFrame [\"memAl\", 0.0001];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "section",
                            "description": "`String` - case sensitive"
                        },
                        {
                            "name": "threshold",
                            "description": "`Number` - section duration in seconds"
                        }
                    ],
                    "outline": "`diag_captureSlowFrame` [section, threshold]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_captureSlowFrame"
        },
        "configuration": {
            "label": "diag_captureSlowFrame",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Attempts to run given code with given arguments given number of cycles in unscheduled environment and returns average time it took to run the code as well as actual number of executions performed.\nThe command will return as soon as possible if the tested code is slow and the duration of the command exceeds 1 second.\nEngine alternative to `BIS_fnc_codePerformance`.",
            "examples": [
                {
                    "text": "```sqf\nprivate _result = diag_codePerformance [{ private _a = 123; }, 0, 10000];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "code",
                            "description": "`Code` - code to compare performance"
                        },
                        {
                            "name": "arguments",
                            "description": "`Anything` - (Optional, default `nil`) arguments to pass to the code in _this variable. Default: `nil`"
                        },
                        {
                            "name": "cycles",
                            "description": "`Number` - (Optional, default 100000) wanted number of cycles to run the given code. > 1000 is recommended"
                        },
                        {
                            "name": "ignoreTimeLimit",
                            "description": "`Boolean` - (Optional, default false) - ignore the 1 second timelimit, and always run the provided number of cycles (except in multiplayer)"
                        }
                    ],
                    "outline": "`diag_codePerformance` [code, arguments, cycles]",
                    "returns": "`Array` format [duration, cycles], where:\n* duration: `Number` - average duration of 1 execution in milliseconds\n* cycles: `Number` - actual number of cycles executed"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_codePerformance"
        },
        "configuration": {
            "label": "diag_codePerformance",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the duration of the previous frame in seconds",
            "examples": [
                {
                    "text": "```sqf\nprivate _frameTime = diag_deltaTime;\n```"
                },
                {
                    "text": "```sqf\nprivate _fps = 1 / diag_deltaTime;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`diag_deltaTime`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_deltaTime"
        },
        "configuration": {
            "label": "diag_deltaTime",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Activates a debug visualisation.",
            "examples": [
                {
                    "text": "```sqf\n\ndiag_drawMode \"FireGeometry\";\nsleep 5;\ndiag_drawMode \"Normal\";\n\n```"
                },
                {
                    "text": "\"Wire\" can be used along other modes:\n\n```sqf\n\ndiag_drawMode \"Wire\";\t\t\t// switch to first Wire mode\ndiag_drawMode \"Roadway\";\t\t// switch to Roadway like usual\n\ndiag_drawMode \"Wire\";\t\t\t// switch to second Wire mode\ndiag_drawMode \"ViewGeometry\";\t// switch to ViewGeometry, keeping the current Wire mode\n\ndiag_drawMode \"Wire\";\t\t\t// disable Wire\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`String` - type of visualisation. Can be one of:\n{{Columns|2|\n* \"Normal\"\n* \"Roadway\"\n* \"Geometry\"\n* \"ViewGeometry\"\n* \"FireGeometry\"\n* \"Paths\"\n* \"ShadowVolume\"\n* \"ShadowBuffer\"\n* \"Buoyancy\"\n* {{GVI|arma3|2.10"
                        }
                    ],
                    "outline": "`diag_drawMode` type",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_drawMode"
        },
        "configuration": {
            "label": "diag_drawMode",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Dumps current callstack/calltrace to RPT.",
            "examples": [
                {
                    "text": "```sqf\n\ndiag_dumpCalltraceToLog;\n/* outputs:\nCallstack:\"\n14:17:06 \"    [] L1 ()\"\n14:17:06 \"    [] L25 (A3\\functions_f\\Debug\\fn_debugConsoleExec.sqf)\"\n14:17:06 \"        _this:[{st = 15 / 0;}]\"\n14:17:06 \"    [] L0 ()\"\n14:17:06 \"    [] L25 (A3\\functions_f\\Debug\\fn_debugConsoleExec.sqf)\"\n14:17:06 \"        _x:any\"\n14:17:06 \"    [] L1 ()\"\n14:17:06 \"        _this:[]\"\n14:17:06 \"CALLSTACK END;;;\n*/\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`diag_dumpCalltraceToLog`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_dumpCalltraceToLog"
        },
        "configuration": {
            "label": "diag_dumpCalltraceToLog",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Dump script assembly.",
            "examples": [
                {
                    "text": "```sqf\ndiag_dumpScriptAssembly BIS_fnc_taskCreate;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "code",
                            "description": "`Code`"
                        }
                    ],
                    "outline": "`diag_dumpScriptAssembly`  code",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_dumpScriptAssembly"
        },
        "configuration": {
            "label": "diag_dumpScriptAssembly",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns [OutsideTerrain](https://community.bistudio.com/wiki/Arma%203%3A%20CfgWorlds%20Config%20Reference%23class%20OutsideTerrain)'s current world's values.",
            "examples": [
                {
                    "text": "```sqf\nprivate _terrainSynth = diag_dumpTerrainSynth;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`diag_dumpTerrainSynth`",
                    "returns": "`Array` of `Number`, `Array` of `Number`s: [analysisLength, [min1, max1], [min2, max2], ..., [min512, max512]]. There are 512 min/max pairs.\n* analysisLength: `Number` - altitude analysis distance from terrain's border towards its centre\n* min1..512: `Number` - minimum altitude\n* max1..512: `Number` - maximum altitude"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_dumpTerrainSynth"
        },
        "configuration": {
            "label": "diag_dumpTerrainSynth",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Ends dynamic simulation data gathering and writes collected data into given (txt) file. The file is saved in the Arma 3 installation folder.\n```cpp\n// Example output\nEnabled time (in % of collection time)       Subject name\n  1.$                                          O Bravo 1-5\n  1.$                                          O Bravo 1-6\n  1.$                                          extraction_bike (B_Quadbike_01_F) - [3151,9662,59]\n  .....                                          ..................................\n  -1.$                                         O Bravo 1-4\n  -1.$                                         target_1 (O_SAM_System_04_F) - [3571,9878,70]\n  -1.$                                         O Alpha 3-4\nCollection took 0.0s\n```",
            "examples": [
                {
                    "text": "```sqf\ndiag_dynamicSimulationEnd \"dynSimDebugData\"; // creates a file called \"dynSimDebugData_runtimelog.txt\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "file",
                            "description": "`String` - file name without extension"
                        }
                    ],
                    "outline": "`diag_dynamicSimulationEnd` file",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/diag_dynamicSimulationEnd"
        },
        "configuration": {
            "label": "diag_dynamicSimulationEnd",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Starts gathering [Arma 3: Dynamic Simulation](https://community.bistudio.com/wiki/Arma%203%3A%20Dynamic%20Simulation) diagnostic data.",
            "examples": [
                {
                    "text": "```sqf\ndiag_dynamicSimulationStart;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`diag_dynamicSimulationStart`",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/diag_dynamicSimulationStart"
        },
        "configuration": {
            "label": "diag_dynamicSimulationStart",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Toggles various diagnostics.",
            "examples": [
                {
                    "text": "```sqf\n\"All\" diag_enable true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`String` - see [Arma 3: Diagnostics Exe](https://community.bistudio.com/wiki/Arma%203%3A%20Diagnostics%20Exe)"
                        },
                        {
                            "name": "state",
                            "description": "`Boolean` - `true` to enable diag mode, `false` to disable it"
                        }
                    ],
                    "outline": "mode `diag_enable`  state",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_enable"
        },
        "configuration": {
            "label": "diag_enable",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks whether specific diagnostic mode is activated.",
            "examples": [
                {
                    "text": "```sqf\n\"Animation\" diag_enable true;\ndiag_enabled \"Animation\"; // returns true\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`String` - see [Arma 3: Diagnostics Exe](https://community.bistudio.com/wiki/Arma%203%3A%20Diagnostics%20Exe)"
                        }
                    ],
                    "outline": "`diag_enabled`  mode",
                    "returns": "`Boolean` - `true` when enabled, `false` when disabled"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_enabled"
        },
        "configuration": {
            "label": "diag_enabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Exports given [config](https://community.bistudio.com/wiki/Config) into file of given path.",
            "examples": [
                {
                    "text": "export an [[Arma: All-in-one Config|All-in-One config]]:\n\n```sqf\ndiag_exportConfig [\"O:/config.cpp\", configFile];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "path",
                            "description": "`String` - file path on disc"
                        },
                        {
                            "name": "config",
                            "description": "`Config` - the config you would like to export"
                        }
                    ],
                    "outline": "`diag_exportConfig` [path, config]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_exportConfig"
        },
        "configuration": {
            "label": "diag_exportConfig",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "[[File: A3 diag exportTerrainSVG Example.jpg|thumb|400px|Highly detailed map of `Stratis`|right]]\nLike the old [TOPOGRAPHY](https://community.bistudio.com/wiki/Arma%203%3A%20Cheats%23TOPOGRAPHY) cheat code, exports terrain, but in modern SVG format instead of the proprietary EMF format.",
            "examples": [
                {
                    "text": "```sqf\ndiag_exportTerrainSVG [\"C:\\Users\\USERNAME\\Desktop\\Stratis_Map.svg\", true, true, true, true, true, false]; // replace USERNAME with your username!\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "filePath",
                            "description": "`String` - path on disk. File name and extension have to be included"
                        },
                        {
                            "name": "drawLocationNames",
                            "description": "`Boolean` - whether or not to draw location names"
                        },
                        {
                            "name": "drawGrid",
                            "description": "`Boolean` - whether or not to draw grid"
                        },
                        {
                            "name": "drawCountlines",
                            "description": "`Boolean` - whether or not to count lines"
                        },
                        {
                            "name": "drawTreeObjects",
                            "description": "`Boolean` - whether or not to draw trees"
                        },
                        {
                            "name": "drawMountainHeightpoints",
                            "description": "`Boolean` - whether or not to draw mountain height spots"
                        },
                        {
                            "name": "simpleRoads",
                            "description": "`Boolean` - simplify roads. Draw roads as one long polyline instead of separate segments. Uses average road width as overall width"
                        }
                    ],
                    "outline": "`diag_exportTerrainSVG` [filePath, drawLocationNames, drawGrid, drawCountlines, drawTreeObjects, drawMountainHeightpoints, simpleRoads]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_exportTerrainSVG"
        },
        "configuration": {
            "label": "diag_exportTerrainSVG",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns average framerate calculated over last 16 frames.",
            "examples": [
                {
                    "text": "```sqf\ndiag_log diag_fps;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`diag_fps`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_fps"
        },
        "configuration": {
            "label": "diag_fps",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns minimal framerate. Calculated from the longest frame over last 16 frames.",
            "examples": [
                {
                    "text": "```sqf\n_minfps = diag_fpsMin;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`diag_fpsMin`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_fpsMin"
        },
        "configuration": {
            "label": "diag_fpsMin",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns number of frame currently displayed.",
            "examples": [
                {
                    "text": "```sqf\n_currFrameNo = diag_frameNo;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`diag_frameNo`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_frameNo"
        },
        "configuration": {
            "label": "diag_frameNo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns terrain cell size (size of each grid cell in the Heightmap).\n{{Feature|obsolete|This command is subject to be removed and replaced with: `getTerrainInfo`|arma3|2.10}}",
            "examples": [
                {
                    "text": "```sqf\nprivate _terrainGrid = diag_getTerrainGrid;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`diag_getTerrainGrid`",
                    "returns": "`Number` - terrain grid"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_getTerrainGrid"
        },
        "configuration": {
            "label": "diag_getTerrainGrid",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns terrain height at the specified location.\n**NOTE**: Unlike `getTerrainHeightASL` which  returns the exact position's height, this commands returns the apex of the terrain polygon.\n{{Feature|obsolete|This command is subject to be removed and replaced with: `getTerrainHeight`|arma3|2.10}}",
            "examples": [
                {
                    "text": "```sqf\nprivate _h = diag_getTerrainHeight position player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "positionWorld",
                            "description": "[Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position3D](https://community.bistudio.com/wiki/Position%23Introduction) - position in world coordinates either in [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position3D](https://community.bistudio.com/wiki/Position%23Introduction)"
                        }
                    ],
                    "outline": "`diag_getTerrainHeight` positionWorld",
                    "returns": "`Number` - terrain height"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_getTerrainHeight"
        },
        "configuration": {
            "label": "diag_getTerrainHeight",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the terrain segment. It is basically the same as:\n\n```sqf\n\n_worldPos params [\"_x\", \"_y\"];\n[floor (_x / diag_getTerrainGrid), floor (_y / diag_getTerrainGrid)];\n\n```",
            "examples": [
                {
                    "text": "```sqf\nprivate _segmentOffset = diag_getTerrainSegmentOffset getPosWorld player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "worldPos",
                            "description": "`Array` in format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position3D](https://community.bistudio.com/wiki/Position%23Introduction) - world coordinates"
                        }
                    ],
                    "outline": "`diag_getTerrainSegmentOffset`  worldPos",
                    "returns": "`Array` in format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction), which is [x,y] of terrain segment (integer, basically pixel coordinates in heightmap)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_getTerrainSegmentOffset"
        },
        "configuration": {
            "label": "diag_getTerrainSegmentOffset",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Allows loading of lighting config during the gameplay (effectively changing the current scene lighting).\nFilename path can be either absolute or relative. The file must contain only the class LightingNew, which should contain lighting configuration.",
            "examples": [
                {
                    "text": "```sqf\ndiag_lightNewLoad \"o:\\lighting.txt\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "path",
                            "description": "`String` - the path to the config filename"
                        }
                    ],
                    "outline": "`diag_lightNewLoad` path",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_lightNewLoad"
        },
        "configuration": {
            "label": "diag_lightNewLoad",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array of all diagnostic modes available in the game.",
            "examples": [
                {
                    "text": "```sqf\ndiag_list \"toggle\";\n```"
                },
                {
                    "text": "```sqf\ndiag_list \"drawMode\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`String` - can be `**\"toggle\"**` or `**\"drawMode\"**`"
                        }
                    ],
                    "outline": "`diag_list`  mode",
                    "returns": "`Array` - [\"Force\", \"Animation\", \"Mines\", \"HitPoints\", \"AnimSrcUnit\", \"AnimSrcTarget\", \"Suspension\", \"EPEForce\", \"EPEVehicle\", \"ParticleNames\", \"Particles\", \"SurfaceUnder\", \"AISkill\", \"AIDriving\", \"AIAiming\", \"AIBrain\", \"AIDynamicError\", \"AISuppression\"] **(Arma 3)**"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_list"
        },
        "configuration": {
            "label": "diag_list",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array with all `localize`d keys from the given [[Stringtable.xml | stringtable]] or the array of all stringtables names if empty string `**\"\"**` is given. Common stringtables are: `**\"Global\"**`, `**\"Mission\"**`, `**\"Campaign\"**`.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _randomKey = selectRandom diag_localized \"Global\";\nhint format [\"Key: %1\\nValue: %2\", _randomKey, localize _randomKey];\n\n```"
                },
                {
                    "text": "```sqf\nprivate _allTables = diag_localized \"\";\n```"
                },
                {
                    "text": "```sqf\ndiag_localized \"Global\" select 0; // \"$STR_A3_SHOWCASE_SLINGLOADING_15_AMMODROPPED_PIL_0\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "stringtable",
                            "description": "`String` - stringtable name or \"\""
                        }
                    ],
                    "outline": "`diag_localized` stringtable",
                    "returns": "`Array` - array of `String`s, see description"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_localized"
        },
        "configuration": {
            "label": "diag_localized",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Dumps the argument's value to the [[arma.RPT|report file]]. Each call creates a new line in the file.",
            "examples": [
                {
                    "text": "```sqf\ndiag_log time;\n```"
                },
                {
                    "text": "```sqf\ndiag_log format [\"%1, %2\", player, time];\n```"
                },
                {
                    "text": "```sqf\n\n_array = [1, \"foo\", player, \"bar\"];\n{\n\tdiag_log _x;\n} forEach _array ; // creates 4 entries on 4 lines\n\n```"
                },
                {
                    "text": "```sqf\n\n_array = [1, \"foo\", player, \"bar\"];\ndiag_log _array; // Creates one entry of e.g. [1,\"foo\",B Alpha 1-1:1 (Player Name),\"bar\"]\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "output",
                            "description": "`Anything`"
                        }
                    ],
                    "outline": "`diag_log`  output",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_log"
        },
        "configuration": {
            "label": "diag_log",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Updates config without restarting. Attributes and classes can not be deleted unless `**[delete](https://community.bistudio.com/wiki/Class%20Inheritance%23delete)**` is used. Changes to the config are applied to all new entities, a mission restart is not necessarily required. Spawning the vehicle again or switching weapons works too. Since **(Arma 3)** CfgAmmo should be mergeable as well.\n**WARNING**: Merging a config with an [[PreProcessor_Commands#.23include|include]] statement, that points to a non existing file, will crash the game.",
            "examples": [
                {
                    "text": "```sqf\ndiag_mergeConfigFile [\"O:\\Arma3\\A3\\Stuff_F\\config.cpp\"]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "path",
                            "description": "`String` - absolute or relative path"
                        },
                        {
                            "name": "userdir",
                            "description": "`Boolean` - (Optional, default `false`) path is relative to the user directory, otherwise it is relative to the mission directory"
                        }
                    ],
                    "outline": "`diag_mergeConfigFile` [path, userdir]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_mergeConfigFile"
        },
        "configuration": {
            "label": "diag_mergeConfigFile",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Start recording tool for creating turret aiming limits.",
            "examples": [
                {
                    "text": "```sqf\ndiag_recordTurretLimits true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "section",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "`diag_recordTurretLimits` section",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_recordTurretLimits"
        },
        "configuration": {
            "label": "diag_recordTurretLimits",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns current settings for the remains collector and the list of monitored units if any.",
            "examples": [
                {
                    "text": "```sqf\nhintSilent str diag_remainsCollector 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "option",
                            "description": "`Number` - 0: corpses, 1: wrecks, 2: weaponholders"
                        }
                    ],
                    "outline": "`diag_remainsCollector` option",
                    "returns": "`Array` in format [disposalPeriod, managerMode, removeLimit, removeMinTime, removeMaxTime, minPlayerDistance, unit1, unit2....]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_remainsCollector"
        },
        "configuration": {
            "label": "diag_remainsCollector",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Resets the animations system cache, so that animation makers can test their animations without restarting the game. A **mission restart** is required for the changes to be applied.",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`diag_resetAnims`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_resetAnims"
        },
        "configuration": {
            "label": "diag_resetAnims",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Reload models on-the-fly without the need of restarting the game.\nChanges applied by **diag_resetShapes** are applied to all new entities so restart of mission is not necessarily  required - spawning vehicle again or changing back forth weapon should usually do the trick.\nIt works only with `**[[Arma 3: Startup Parameters#Developer Options|-filePatching]]**` in combination with local data. Command will reload **only** models present in local data.\n**NOTE**: Limitation: `**CfgSkeletons**` (inside `**model.cfg**`) cannot be reloaded.",
            "examples": [
                {
                    "text": "```sqf\ndiag_resetShapes;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`diag_resetShapes`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_resetShapes"
        },
        "configuration": {
            "label": "diag_resetShapes",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns script scope depth. When script is directly executed by the engine or a new script is added to the scheduler, the scope depth is 0.\nThe examples of such execution are event handlers, `spawn`, etc. `isNil` `Code` will also create a parent scope.\nAny use of `call` and such will stack execution creating child scopes and increasing scope depth.",
            "examples": [
                {
                    "text": "```sqf\n\n[] spawn\n{ \n\tsystemChat str diag_scope; // 0\n\tcall \n\t{ \n\t\tcall\n\t\t{ \n\t\t\tsystemChat str diag_scope; // 2\n\t\t\tisNil \n\t\t\t{ \n\t\t\t\tsystemChat str diag_scope; // 0\n\t\t\t\tcall \n\t\t\t\t{\n\t\t\t\t\tsystemChat str diag_scope; // 1\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t};\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`diag_scope`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_scope"
        },
        "configuration": {
            "label": "diag_scope",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Overrides currently used scene lighting. The operand is config that is placed as a string (not file).\nThe changes may not be applied immediately, but can be forced by the call of `simulWeatherSync`.",
            "examples": [
                {
                    "text": "```sqf\ndiag_setLightNew \"sunOrMoon = 1; diffuse[] = { 0, 0, 0, 0 }; diffuseCloud[] = { 0, 0, 0, 0 }; ambient[] = { 0, 0, 0, 0 }; ... \";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "config",
                            "description": "`String` - config in string form"
                        }
                    ],
                    "outline": "`diag_setLightNew` config",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_setLightNew"
        },
        "configuration": {
            "label": "diag_setLightNew",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Changes the terrain height of the cell in which given position lies. This command is only available with [Arma 3: Diagnostics Exe](https://community.bistudio.com/wiki/Arma%203%3A%20Diagnostics%20Exe).\n[[File:A3 diag setTerrainHeight.png|thumb|350px|See _Example 1_ for the code]]\n**WARNING**: This causes an instant CTD when _position_ is out of the map! (`**&lt; 0**` and/or `**&gt; `worldSize`**`)\n{{Feature|obsolete|This command is subject to be removed and replaced with: `setTerrainHeight`|arma3|2.10}}",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _fnc_flattenTerrain =\n{\n\tparams [\"_start\", \"_a\", \"_b\", \"_h\"];\n\n\tfor \"_xStep\" from 0 to _a do\n\t{\n\t\tfor \"_yStep\" from 0 to _b do\n\t\t{\n\t\t\t_start vectorAdd [_xStep, _yStep, 0] diag_setTerrainHeight _h;\n\t\t};\n\t};\n};\n\nprivate _desiredTerrainHeight = 150;\n[getPosWorld player, 50, 50, _desiredTerrainHeight] spawn _fnc_flattenTerrain;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Array` in format `Position`"
                        },
                        {
                            "name": "height",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "position `diag_setTerrainHeight` height",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_setTerrainHeight"
        },
        "configuration": {
            "label": "diag_setTerrainHeight",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Dumps the bytecode as Arma 3 sees it, in a diff friendly way. Useful for testing custom [SQFC](https://community.bistudio.com/wiki/SQF%20Bytecode) compilers.",
            "examples": [
                {
                    "text": "```sqf\ndiag_SQFCDebugDump [\"P:/test.sqfc\", \"P:/dump\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "sourcePath",
                            "description": "`String` - Path to file on drive that should be read"
                        },
                        {
                            "name": "targetPath",
                            "description": "`String` - Path to file on drive to output to"
                        }
                    ],
                    "outline": "`diag_SQFCDebugDump` [sourcePath, targetPath]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_SQFCDebugDump"
        },
        "configuration": {
            "label": "diag_SQFCDebugDump",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array containing the function name, line number, scope name and all local variables in form of a hashmap.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _testvar = 1;\nprivate _testother = 2;\ncall \n{\n\t_testvar = 3;\n\tif (_testvar == 3) then \n\t{\n\t\t_myVariable = 4;\n\t\thint str diag_stacktrace;\n\t};\n};\n/*\n[\n\t[\"\", 3, \"\", [[\"_this\", []], [\"_testother\", 2], [\"_testvar\", 3]]],\n\t[\"\", 6, \"\", []],\n\t[\"\", 8, \"\", [[\"_myvariable\", 4]]]\n]\n*/\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`diag_stacktrace`",
                    "returns": "`Array` of `Array`s, in format:\n\n```sqf\nparams [\"_functionName\", \"_lineNumber\", \"_scopeName\", \"_variablesHashmap\"];\n```\n\n* _functionName: `String` - function name\n* _lineNumber: `Number` - line number\n* _scopeName: `String` - scope name\n* _variablesHashmap: `HashMap` - all local variables"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_stacktrace"
        },
        "configuration": {
            "label": "diag_stacktrace",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Real time in seconds spent from the start of the game. On Windows the command uses {{Link|https://docs.microsoft.com/en-us/windows/win32/api/timeapi/nf-timeapi-timegettime|timeGetTime}}.",
            "examples": [
                {
                    "text": "```sqf\n// Measure execution time of a script\n_start = diag_tickTime;\n// code\n_stop = diag_tickTime;\ndiag_log format [\"%1\",_stop - _start];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`diag_tickTime`",
                    "returns": "`Number` - time in seconds from game start"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_tickTime"
        },
        "configuration": {
            "label": "diag_tickTime",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Toggles various diagnostics.",
            "examples": [
                {
                    "text": "```sqf\ndiag_toggle \"Animation\"; // enable\ndiag_toggle \"Animation\"; // disable\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`String` - see [Arma 3: Diagnostics Exe](https://community.bistudio.com/wiki/Arma%203%3A%20Diagnostics%20Exe)"
                        }
                    ],
                    "outline": "`diag_toggle` mode",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diag_toggle"
        },
        "configuration": {
            "label": "diag_toggle",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Tests whether any user dialog is open.",
            "examples": [
                {
                    "text": "```sqf\nif (!dialog) then { createDialog \"Dialog1\"; };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`dialog`",
                    "returns": "`Boolean` - `true` if a dialog is open, `false` if not"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/dialog"
        },
        "configuration": {
            "label": "dialog",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "A non-existent [Diary Record](https://community.bistudio.com/wiki/Diary%20Record). To compare non-existent objects use `isNull` or `isEqualTo`:\n\n```sqf\n\ndiaryRecordNull == diaryRecordNull;\t\t// false\nisNull diaryRecordNull;\t\t\t\t\t\t// true\ndiaryRecordNull isEqualTo diaryRecordNull;\t// true\n\n```\n\n\n**NOTE**: \nBefore Arma 3 v2.00, `isNull` did not work with the diary record type and `diaryRecordNull` did not exist.\nIn order to verify a null record, it is possible to create a variable and compare against it:\n\n```sqf\n\nprivate _diaryRecordNull = objNull createDiaryRecord [];\nprivate _createdRecord = player createDiaryRecord [\"Diary\", [\"Title\", \"Description\"]];\nif (_createdRecord isEqualTo _diaryRecordNull) then { hint \"Failed\"; };\n\n```",
            "examples": [
                {
                    "text": "```sqf\nisNull diaryRecordNull; // true\n```"
                },
                {
                    "text": "```sqf\nisNull (objNull createDiaryRecord [\"Diary\", [\"Title\", \"Text\"]]); // true - objNull cannot take diary records\n```"
                },
                {
                    "text": "```sqf\nstr diaryRecordNull; // \"No diary record\"\n```"
                },
                {
                    "text": "```sqf\n\nprivate _diaryRecord = diaryRecordNull;\nif (damage player > 0.5) then\n{\n\t_diaryRecord = player createDiaryRecord [\"Diary\", [\"Heal yourself\", \"Ask a medic\"]];\n};\n\nif (not isNull _diaryRecord) then { hint \"Diary record added.\"; };\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`diaryRecordNull`",
                    "returns": "[Diary Record](https://community.bistudio.com/wiki/Diary%20Record)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/diaryRecordNull"
        },
        "configuration": {
            "label": "diaryRecordNull",
            "grammarType": "null-literal"
        }
    },
    {
        "documentation": {
            "description": "Checks whether given subject is present in the `Diary` of given player.",
            "examples": [
                {
                    "text": "```sqf\n_exists = player diarySubjectExists \"subjectName\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "player",
                            "description": "`Object`"
                        },
                        {
                            "name": "name",
                            "description": "`String`"
                        }
                    ],
                    "outline": "player `diarySubjectExists`  name",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/diarySubjectExists"
        },
        "configuration": {
            "label": "diarySubjectExists",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks if the current client Joined In Progress.",
            "examples": [
                {
                    "text": "```sqf\nclientDidJIP = didJIP;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**didJIP**",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/didJIP"
        },
        "configuration": {
            "label": "didJIP",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks if the current `owner` of supplied `Object` Joined In Progress. Returns `false` on clients.",
            "examples": [
                {
                    "text": "```sqf\n_ownerDidJip = didJIPOwner tank;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`didJIPOwner`  object",
                    "returns": "`Boolean`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/didJIPOwner"
        },
        "configuration": {
            "label": "didJIPOwner",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns high-level selected difficulty mode.",
            "examples": [
                {
                    "text": "```sqf\n\nif (difficulty == 0) then\n{\n\thint \"You will need to follow my lead - read the Field Manual!\";\n};\n\n```"
                },
                {
                    "text": "[[File:Difficulty.jpg|400px|thumb|Note: \"Insane\" is a modded difficulty]] The command returns the index of selected difficulty as they appear in _CfgDifficulties_:\n\n```sqf\nhint str difficulty; //Result: 4\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`difficulty`",
                    "returns": "`Number` - Can be one of:\n* 0 (Recruit)\n* 1 (Regular)\n* 2 (Veteran)\n* 3 (Elite)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/difficulty"
        },
        "configuration": {
            "label": "difficulty",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks specific difficulty settings of the current user. Difficulty flag names can be found in the [[server.armaprofile|ArmA profile]] file under class Difficulties/xxx/Flags (xxx being regular or veteran).",
            "examples": [
                {
                    "text": "```sqf\nhint str (difficultyEnabled \"armor\");\n```"
                },
                {
                    "text": "List current difficulty settings:\n\n```sqf\n\ncall {\n\tprivate [\"_diff\", \"_cfg\", \"_flags\", \"_res\"];\n\t_diff = [];\n\t_cfg = configFile >> \"CfgDifficulties\";\n\t{\n\t\t_flags = _cfg >> configName _x >> \"Flags\";\n\t\tfor \"_i\" from 0 to count _flags - 1 do {\n\t\t\t_diff pushBack configName (_flags select _i);\n\t\t};\n\t} forEach (\"true\" configClasses _cfg);\n\t_diff = _diff arrayIntersect _diff;\n\t_diff sort true;\n\t_res = text \"\";\n\t{\n\t\t_res = composeText [_res, parseText format [\n\t\t\t\"<t align='left'>%1 - %2</t>\", \n\t\t\t_x, \n\t\t\t[0, 1] select difficultyEnabled _x\n\t\t], lineBreak];\n\t} forEach _diff;\n\thint _res;\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "flagName",
                            "description": "`String` - difficulty flag name. Following values are available:\n\n<spoiler text=\"Arma 3 Flags\">\n{{Columns|5|\n* 3rdPersonView\n* armor\n* autoAim\n* autoGuideAT\n* autoSpot\n* autoTrimEnabled\n* cameraShake\n* clockIndicator\n* deathMessages\n* enemyTag\n* extendetInfoType\n* friendlyTag\n* hud\n* hudGroupInfo\n* hudPerm\n* hudWp\n* hudWpPerm\n* map\n* mineTag\n* netStats\n* roughLanding\n* stanceIndicator\n* stressDamageEnabled\n* unlimitedSaves\n* vonID\n* weaponCursor\n* windEnabled\n}}<spoiler text=\"Arma 2 Flags\">\n{{Columns|5|\n* 3rdPersonView\n* armor\n* autoSpot\n* autoGuideAT\n* autoAim\n* allowSeagull\n* clockIndicator\n* deathMessages\n* enemyTag\n* friendlyTag\n* hud\n* hudPerm\n* hudWp\n* hudWpPerm\n* map\n* netStats\n* suppressPlayer\n* tracers\n* realisticFatigue\n* ultraAI\n* unlimitedSaves\n* weaponCursor\n}}"
                        }
                    ],
                    "outline": "`difficultyEnabled` flagName",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/difficultyEnabled"
        },
        "configuration": {
            "label": "difficultyEnabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if Advanced Flight Model is enabled.\nForcing of rotorlib simulation could be done with mission param [[Description.ext#forceRotorLibSimulation|forceRotorLibSimulation]].",
            "examples": [
                {
                    "text": "```sqf\n_rtdOn = difficultyEnabledRTD;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`difficultyEnabledRTD`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/difficultyEnabledRTD"
        },
        "configuration": {
            "label": "difficultyEnabledRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks specific difficulty settings of the current user.\nDifficulty flag names can be found in the `**CfgDifficultyPresets**` config class or in [[server.armaprofile|ArmA profile]] file under class `**DifficultyPresets/xxx/Options**` (xxx being Recruit, Regular or Veteran).\nThis command replaces `difficultyEnabled` as many options have multiple values and former command only provided `Boolean` return.",
            "examples": [
                {
                    "text": "```sqf\nhint str (difficultyOption \"friendlyTags\");\n```"
                },
                {
                    "text": "Remember last `cameraView` per vehicle:\n\n```sqf\nplayer addEventHandler [\"GetOutMan\", {\n\tparams [\"_unit\", \"\", \"_vehicle\"];\n\t_unit setVariable [_vehicle call BIS_fnc_netId, cameraView];\n}];\nplayer addEventHandler [\"GetInMan\", {\n\tif (difficultyOption \"thirdPersonView\" == 2) then {\n\t\tparams [\"_unit\", \"\", \"_vehicle\"];\n\t\t_unit switchCamera (_unit getVariable [_vehicle call BIS_fnc_netId, \"INTERNAL\"]);\n\t};\n}];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "optionName",
                            "description": "`String` - difficulty option name; one of:\n{{Columns|5|\n* reducedDamage\n* groupIndicators\n* friendlyTags\n* enemyTags\n* detectedMines\n* commands\n* waypoints\n* weaponInfo\n* stanceIndicator\n* staminaBar\n* weaponCrosshair\n* visionAid\n* thirdPersonView\n* cameraShake\n* scoreTable\n* deathMessages\n* vonID\n* mapContent\n* autoReport\n* multipleSaves\n}}"
                        }
                    ],
                    "outline": "`difficultyOption` optionName",
                    "returns": "`Number`"
                },
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array` - any array, could be empty array []"
                        }
                    ],
                    "outline": "`difficultyOption` array",
                    "returns": "`Array` - array of all options and current values in format <nowiki>[</nowiki>[\"Option1\", value1], ...[\"OptionN\", valueN]]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/difficultyOption"
        },
        "configuration": {
            "label": "difficultyOption",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the direction an object or a location is facing (differs from `getDir` in that this also works with locations).",
            "examples": [
                {
                    "text": "```sqf\nplayer setDir 90;\n_d = direction player;//returns 90\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` or `Location`"
                        }
                    ],
                    "outline": "`direction` object",
                    "returns": "`Number` -\nDirection in degrees, range 0 to 360"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/direction"
        },
        "configuration": {
            "label": "direction",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get state of direction stabilization. This command returns `true` if the current optic mode of the selected turret has direction stabilization configured in config (`**directionStabilized**`) and if it is also not disabled by `enableDirectionStabilization`.\n\nThis command can not be used to determine if the current optic of the turret has `**directionStabilized**` enabled in config.",
            "examples": [
                {
                    "text": "```sqf\nuav directionStabilizationEnabled [0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` format [Turret Path](https://community.bistudio.com/wiki/Turret%20Path)"
                        }
                    ],
                    "outline": "vehicle `directionStabilizationEnabled` turretPath",
                    "returns": "`Boolean` - whether direction stabilization is enabled"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/directionStabilizationEnabled"
        },
        "configuration": {
            "label": "directionStabilizationEnabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sends given audio message to the direct channel. Command operates just like xxxxRadio commands, but the sound is played over direct channel and is independent of `fadeSound`. The message is defined in CfgRadio in the [[Description.ext|description.ext]] file or config radio protocol or a kbAddTopic. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see `remoteExec`). \n**NOTE**: When transmitting unit gets killed, transmission will be interrupted. However when receiving unit gets killed, the transmission continues to play.",
            "examples": [
                {
                    "text": "```sqf\nplayer directSay configName selectRandom (\"true\" configClasses (configFile >> \"CfgRadio\"));\n```"
                },
                {
                    "text": "An equivalent of a **directChat** command:\n\n```sqf\n\n[player, \"Hello there\", 30] call {\n\tparams [\"_unit\", \"_text\", \"_distance\"];\n\t[_unit, _text] remoteExec [\"globalChat\", call BIS_fnc_listPlayers select { _x distance _unit < _distance }];\n};\n\n```\n\n\nA [function](https://community.bistudio.com/wiki/%3ACategory%3AFunctions%20Library) can be made for [localisation](https://community.bistudio.com/wiki/localize) purpose:\n\n```sqf\n\n/* TAG_fnc_globalChat */\nparams [\n\t[\"_unit\", objNull, [objNull]],\n\t[\"_text\", \"\", [\"\"]]\n];\n\n_unit globalChat (_text call BIS_fnc_localize);\n\n```\n\n\n```sqf\n\n// usage\n[player, \"STR_HelloThere\"] remoteExec [\"TAG_fnc_globalChat\", call BIS_fnc_listPlayers select { _x distance _unit < 30 }];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit to transmit"
                        },
                        {
                            "name": "radioName",
                            "description": "`String` - class name from CfgRadio"
                        }
                    ],
                    "outline": "unit `directSay` radioName",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/directSay"
        },
        "configuration": {
            "label": "directSay",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Disables parts of the AI behaviour to get a better control over the actions of a unit. If the unit changes locality, this command might need to be executed again at the new locality to maintain effect.\n\n**WARNING**: This command might cause unexpected behaviour when used on a player-controlled unit.",
            "examples": [
                {
                    "text": "```sqf\nMyUnit disableAI \"AUTOTARGET\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - AI unit"
                        },
                        {
                            "name": "feature",
                            "description": "`String` - possible values are:\n{{Columns|4|\n* {{GVI|arma3|1.66"
                        }
                    ],
                    "outline": "unit `disableAI` feature",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/disableAI"
        },
        "configuration": {
            "label": "disableAI",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Disables autobrake, which is engaged when vehicle is stationary and stops wheels from rotating freely when vehicle is pushed.",
            "examples": [
                {
                    "text": "```sqf\nmyCar disableBrakes true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "transport",
                            "description": "`Object` - PhysX car or tank"
                        },
                        {
                            "name": "disable",
                            "description": "`Boolean` - `true` to disable autobrake. The autobrake is re-enabled if the driver uses brakes"
                        }
                    ],
                    "outline": "transport `disableBrakes` disable",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/disableBrakes"
        },
        "configuration": {
            "label": "disableBrakes",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Disable collision between provided objects. The collision is always disabled for both objects in the arguments.\n**IMPORTANT**: \n* this command does not disable collision between PhysX objects\n* this command has to be executed where objects are [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality), and as long as they do not change locality, the effect of this command will be global:\n** if the two objects are not local to the same computer, then it has to be executed on both computers to achieve the desired effect\n** if one or both objects change locality, the command needs to be executed again on the new `owner`'s machine(s) to maintain the effect\n* the feature works by having an object registering a reference to the other object; this command stores such reference on both objects - see _Example 3_",
            "examples": [
                {
                    "text": "```sqf\nplayer disableCollisionWith myWall;\n```"
                },
                {
                    "text": "```sqf\n[_veh1, _veh2] remoteExecCall [\"disableCollisionWith\", 0, _veh1];\n```"
                },
                {
                    "text": "```sqf\n\n// this command stores a reference to the other object on both arguments:\n_obj1 disableCollisionWith _obj2;\t// _obj1 has a reference to _obj2, disabling collision with it\n\t\t\t\t\t\t\t\t\t// _obj2 has a reference to _obj1, disabling collision with it\n\n// only one reference is required to disable collision, allowing more than one disabled collision\n_obj1 disableCollisionWith _obj3;\t// _obj1 has a reference to _obj3, disabling collision with it\n\t\t\t\t\t\t\t\t\t// _obj2 has a reference to _obj1, disabling collision with it\n\t\t\t\t\t\t\t\t\t// _obj3 has a reference to _obj1, disabling collision with it\n\t\t\t\t\t\t\t\t\t// factually, _obj1 has collisions disabled with _obj2 and _obj3\n\n// note that _obj1 collision can be changed without using the command on it directly\n_obj2 disableCollisionWith _obj3;\t// _obj1 has no more reference to _obj3 and can collide with it\n\t\t\t\t\t\t\t\t\t// _obj2 has a reference to _obj3, disabling collision with it\n\t\t\t\t\t\t\t\t\t// _obj3 has a reference to _obj2, disabling collision with it\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle1",
                            "description": "`Object`"
                        },
                        {
                            "name": "vehicle2",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "vehicle1 `disableCollisionWith` vehicle2",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/disableCollisionWith"
        },
        "configuration": {
            "label": "disableCollisionWith",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "In theory disables the ability to talk to other people. In actuality, if `true` is given, the command increases unit's `kbTell` _IsSpeaking_ status by 1, thus stopping unit from having a conversation. If `false` is given, the command decreases unit's `kbTell` _IsSpeaking_ status by 1. The unit \"is speaking\" if _IsSpeaking > 0_. \n**IMPORTANT**: `kbTell` _IsSpeaking_ is a number that is increased or decreased by 1 internally. Default is 0, but it can be any positive or negative value. `disableConversation` allows to increase or decrease this number. When executed multiple times this can present an unexpected problem. Use `conversationDisabled` which returns `true` if this number > 0, to reset this number to 0 if necessary: \n\n```sqf\nwhile {!conversationDisabled _unit} do {_unit disableConversation true}; while {conversationDisabled _unit} do {_unit disableConversation false};\n```",
            "examples": [
                {
                    "text": "```sqf\nplayer disableConversation true;\n```"
                },
                {
                    "text": "```sqf\nsoldier1 disableConversation false;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        },
                        {
                            "name": "disable",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "unitName `disableConversation`  disable",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/disableConversation"
        },
        "configuration": {
            "label": "disableConversation",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Disable debriefing score table.\n**WARNING**: This command is broken.",
            "examples": [
                {
                    "text": "```sqf\ndisableDebriefingStats;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`disableDebriefingStats`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/disableDebriefingStats"
        },
        "configuration": {
            "label": "disableDebriefingStats",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Command allows suppressing visualization of FRIENDLY, ENEMY, MINES and/or PING map indicators from difficulty setting EXTENDED MAP CONTENT.",
            "examples": [
                {
                    "text": "Disable visualization of friendly and enemy units:\n\n```sqf\ndisableMapIndicators [true, true, false, false];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "disableFriendly",
                            "description": "`Boolean` - `true` to disable visualization of friendly units"
                        },
                        {
                            "name": "disableEnemy",
                            "description": "`Boolean` - `true` to disable visualization of enemy units"
                        },
                        {
                            "name": "disableMines",
                            "description": "`Boolean` - `true` to disable visualization of mines"
                        },
                        {
                            "name": "disablePing",
                            "description": "`Boolean` - `true` to disable visualization of all tactical pings"
                        }
                    ],
                    "outline": "`disableMapIndicators` [disableFriendly, disableEnemy, disableMines, disablePing]",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/disableMapIndicators"
        },
        "configuration": {
            "label": "disableMapIndicators",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enables or disables transport NV (Night Vision). To disable TI (Thermal Imaging) use `disableTIEquipment`.",
            "examples": [
                {
                    "text": "```sqf\nmyTank disableNVGEquipment true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "state",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "vehicle `disableNVGEquipment` state",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/disableNVGEquipment"
        },
        "configuration": {
            "label": "disableNVGEquipment",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "This command will halt raycasting calculations (on the local machine only) for all groups which don't contain _any_ local entities. Units, that are not in a group with at least one local member, will not check visibility of other units. This will cause, that remote units will not have updated knowsAbout and it will save some CPU time. If a group contains a single local entity then calculations will still be performed for the entire group.\n\n\n\nThese raycasts are used to determine what other entities an entity can see, and they take a lot of CPU time. This is of course a bit of a trick, because rather than a true optimization, it disables part of the simulation. However, there are certainly types of scenarios where these raycasts are not needed. An example is a fully Player-versus-Player scenario, where the visibility between every combination of player entity is not needed. So why not disable this by default? There are cases where you do require these raycasts, for example in stealth scenarios. Without them, commands like `knowsAbout`, `nearTargets` and `targetKnowledge` will only function for local units! The commands themselves are local, can be used on servers and clients, and the state is reset when the scenario ends. So, carefully consider whether your scenario can benefit from this method.",
            "examples": [
                {
                    "text": "```sqf\ndisableRemoteSensors true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "state",
                            "description": "`Boolean` - `true` to disable"
                        }
                    ],
                    "outline": "`disableRemoteSensors` state",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/disableRemoteSensors"
        },
        "configuration": {
            "label": "disableRemoteSensors",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Disable saving of script containing this command. After this, the script can work with data types which do not support serialization (UI types).\n{{Feature|informative|See [Namespace serialization](https://community.bistudio.com/wiki/Namespace%23Namespace%20serialization) for more information.}}\n\n**IMPORTANT**: \n**In Arma 2** and up to a certain version of Arma 3, <!--\n-->giving a `Display` or `Control` to `spawn`ed code would raise an error due to the usage of the then non-serializable `**[_this](https://community.bistudio.com/wiki/Magic%20Variables%23this)**` variable. <!--\n-->Using `disableSerialization` or `uiNamespace` wouldn't help; the trick here is to pass the argument inside an array:\n\n```sqf\n\n_display = findDisplay 46;\n _display  spawn { hint str _this; };\t\t\t\t// would raise a serialization error\n[_display] spawn { hint str (_this select 0); };\t// OK\n```",
            "examples": [
                {
                    "text": "```sqf\n\ndisableSerialization;\nprivate _display = findDisplay 46;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`disableSerialization`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/disableSerialization"
        },
        "configuration": {
            "label": "disableSerialization",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Disables TI (Thermal Imaging) equipment for given vehicle.\n**NOTE**: In older versions of Arma this command would also disable NV (Night Vision), but since Arma 3 v1.54 this command disables only TI. Use `disableNVGEquipment` to disable NV.",
            "examples": [
                {
                    "text": "```sqf\nvehicle player disableTIEquipment true;\n```"
                },
                {
                    "text": "```sqf\n_tank disableTIEquipment true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "state",
                            "description": "`Boolean` - true to turn TI off, false to turn TI on"
                        }
                    ],
                    "outline": "vehicle `disableTIEquipment` state",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/disableTIEquipment"
        },
        "configuration": {
            "label": "disableTIEquipment",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Disables unit's AV terminal(s) connecting to UAV.",
            "examples": [
                {
                    "text": "```sqf\nmyUnit disableUAVConnectability [myUav, true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "uav",
                            "description": "`Object`"
                        },
                        {
                            "name": "checkAllItems",
                            "description": "`Boolean` - `true` to disable all terminals in unit's inventory, `false` to only disable the currently assigned terminal."
                        }
                    ],
                    "outline": "object `disableUAVConnectability` [uav, checkAllItems]",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/disableUAVConnectability"
        },
        "configuration": {
            "label": "disableUAVConnectability",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Disables or enables the keyboard and mouse input. Usually used during cutscenes.**WARNING**: Be careful and responsible with the usage of this command. Once the user input is disabled, the only option left is to restart the game. Make sure you provide scripted mechanics to resolve this, should you need to disable user input for any reason.",
            "examples": [
                {
                    "text": "```sqf\ndisableUserInput true;\n// cutscene\ndisableUserInput false;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "state",
                            "description": "`Boolean` - `true` to disable, `false` to enable"
                        }
                    ],
                    "outline": "`disableUserInput` state",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/disableUserInput"
        },
        "configuration": {
            "label": "disableUserInput",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds an event handler to the given display. See [User Interface Event Handlers](https://community.bistudio.com/wiki/User%20Interface%20Event%20Handlers) for the full list of event names.\nIf applicable, see `DIK_KeyCodes` for a list of key code constants, which are relevant to key related user interface events like: [KeyDown](https://community.bistudio.com/wiki/User%20Interface%20Event%20Handlers%23onKeyDown) & [KeyUp](https://community.bistudio.com/wiki/User%20Interface%20Event%20Handlers%23onKeyUp).\n**IMPORTANT**: Display EHs are processed from last to first added; an input override should be set up in the first added EH.\n**NOTE**: The event handler ID can be accessed inside the event handler code using the <sqf inline>_thisEventHandler [magic variable](https://community.bistudio.com/wiki/Magic_Variables%23thisEventHandler).",
            "examples": [
                {
                    "text": "```sqf\nmoduleName_keyDownEHId = findDisplay 46 displayAddEventHandler [\"KeyDown\", \"hint str _this;\"];\n```"
                },
                {
                    "text": "```sqf\nmoduleName_keyDownEHId = findDisplay 46 displayAddEventHandler [\"KeyDown\", { hint str _this }];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "display",
                            "description": "`Display`"
                        },
                        {
                            "name": "eventName",
                            "description": "`String` - event name\n**IMPORTANT**: When using the event names listed [here](https://community.bistudio.com/wiki/User%20Interface%20Event%20Handlers) with the `ctrlAddEventHandler`, `ctrlSetEventHandler`, `displayAddEventHandler` or `displaySetEventHandler` commands, the prefix \"on\" in the event name must be removed (e.g. **ButtonDown** instead of **onButtonDown**)."
                        },
                        {
                            "name": "code",
                            "description": "`String` or {{GVI|arma3|1.06"
                        }
                    ],
                    "outline": "display `displayAddEventHandler` [eventName, code]",
                    "returns": "`Number` - index of the newly added event handler or `**-1**` if creation failed"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/displayAddEventHandler"
        },
        "configuration": {
            "label": "displayAddEventHandler",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns child display of the given display.",
            "examples": [
                {
                    "text": "```sqf\n_display = displayChild findDisplay 313; // display #46\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "display",
                            "description": "`Display`"
                        }
                    ],
                    "outline": "`displayChild` display",
                    "returns": "`Display`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/displayChild"
        },
        "configuration": {
            "label": "displayChild",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return child control with specified idc.",
            "examples": [
                {
                    "text": "```sqf\n_displayControl = _ParentDisplay displayCtrl 101;\n```"
                },
                {
                    "text": "```sqf\n_dialogControl = displayCtrl 101;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "display",
                            "description": "`Display`"
                        },
                        {
                            "name": "idc",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "display `displayCtrl` idc",
                    "returns": "`Control`"
                },
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`displayCtrl` idc",
                    "returns": "`Control`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/displayCtrl"
        },
        "configuration": {
            "label": "displayCtrl",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "A non-existing `Display`. To compare non-existent displays use `isNull` or `isEqualTo`:\n\n```sqf\n\ndisplayNull == displayNull;\t\t// false\nisNull displayNull;\t\t\t\t\t// true\ndisplayNull isEqualTo displayNull;\t// true\n\n```",
            "examples": [
                {
                    "text": "```sqf\n!isNull displayNull; // false\n```"
                },
                {
                    "text": "```sqf\nstr displayNull; // No display\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`displayNull`",
                    "returns": "`Display`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/displayNull"
        },
        "configuration": {
            "label": "displayNull",
            "grammarType": "null-literal"
        }
    },
    {
        "documentation": {
            "description": "Returns parent display of the given display.",
            "examples": [
                {
                    "text": "```sqf\n_display = displayParent findDisplay 49; // Display #46\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "display",
                            "description": "`Display`"
                        }
                    ],
                    "outline": "`displayParent` display",
                    "returns": "`Display`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/displayParent"
        },
        "configuration": {
            "label": "displayParent",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Remove all event handlers from the given display.",
            "examples": [
                {
                    "text": "```sqf\nfindDisplay 46 displayRemoveAllEventHandlers \"KeyDown\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "display",
                            "description": "`Display`"
                        },
                        {
                            "name": "eventName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "display `displayRemoveAllEventHandlers` eventName",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/displayRemoveAllEventHandlers"
        },
        "configuration": {
            "label": "displayRemoveAllEventHandlers",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Remove a given event handler from the given display.",
            "examples": [
                {
                    "text": "```sqf\nfindDisplay 46 displayRemoveEventHandler [\"keyDown\",5];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "display",
                            "description": "`Display`"
                        },
                        {
                            "name": "handlerType",
                            "description": "`String` - type of the event handler"
                        },
                        {
                            "name": "id",
                            "description": "`Number` - index of the event handler"
                        }
                    ],
                    "outline": "display `displayRemoveEventHandler` [handlerType, id]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/displayRemoveEventHandler"
        },
        "configuration": {
            "label": "displayRemoveEventHandler",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets given event handler of given display.\nThe return code of the provided function should indicate whether this event was handled correctly. This implies telling the engine whether it is default code should be executed. \nSee [User Interface Event Handlers](https://community.bistudio.com/wiki/User%20Interface%20Event%20Handlers) for the full list of handler names.\n\nIf applicable, see [DIK KeyCodes](https://community.bistudio.com/wiki/DIK%20KeyCodes) for a list of key code constants, which are relevant to key related user interface events like {{Link|User Interface Event Handlers#onKeyDown|onKeyDown}} and {{Link|User Interface Event Handlers#onKeyUp|onKeyUp}}.\n**IMPORTANT**: When using the event names listed [here](https://community.bistudio.com/wiki/User%20Interface%20Event%20Handlers) with the `ctrlAddEventHandler`, `ctrlSetEventHandler`, `displayAddEventHandler` or `displaySetEventHandler` commands, the prefix \"on\" in the event name must be removed (e.g. **ButtonDown** instead of **onButtonDown**).",
            "examples": [
                {
                    "text": "```sqf\n_control displaySetEventHandler [\"KeyDown\", \"\"];\n```"
                },
                {
                    "text": "`**init.sqf**`:\n\n```sqf\nKeysPressed = compile preprocessFile \"keysPressed.sqf\";\nprivate _display = findDisplay 46;\n_display displaySetEventHandler [\"KeyDown\", \"_this call KeysPressed\"];\n```\n\n\n`**keysPressed.sqf**`:\n\n```sqf\nprivate _handled = false;\nswitch (_this select 1) do {\n\t// F key\n\tcase 33: {\n\t\t// code here\n\t\t_handled = true;\n\t};\n};\n_handled;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "display",
                            "description": "`Display`"
                        },
                        {
                            "name": "handlerName",
                            "description": "`String`"
                        },
                        {
                            "name": "function",
                            "description": "`String` - code"
                        }
                    ],
                    "outline": "display `displaySetEventHandler` [handlerName, function]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/displaySetEventHandler"
        },
        "configuration": {
            "label": "displaySetEventHandler",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get the provided display's [UI On Texture](https://community.bistudio.com/wiki/Procedural%20Textures%23UI%20On%20Texture) unique name.\n**NOTE**: See `findDisplay` to get a `Display` by its unique name.",
            "examples": [
                {
                    "text": "```sqf\nprivate _displayName = displayUniqueName _myDisplay;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "display",
                            "description": "`Display`"
                        }
                    ],
                    "outline": "`displayUniqueName` display",
                    "returns": "`String` - the unique display identifier"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/displayUniqueName"
        },
        "configuration": {
            "label": "displayUniqueName",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set the provided display to update its [UI On Texture](https://community.bistudio.com/wiki/Procedural%20Textures%23UI%20On%20Texture) render.",
            "examples": [
                {
                    "text": "```sqf\ndisplayUpdate _myDisplay;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "display",
                            "description": "`Display` - the display to update"
                        }
                    ],
                    "outline": "`displayUpdate` display",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/displayUpdate"
        },
        "configuration": {
            "label": "displayUpdate",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Dissolves the given team. All members become members of the main team.",
            "examples": [
                {
                    "text": "```sqf\ndissolveTeam \"RED\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "teamColor",
                            "description": "`String` - can be one of:\n* \"RED\"\n* \"GREEN\"\n* \"BLUE\"\n* \"YELLOW\""
                        }
                    ],
                    "outline": "`dissolveTeam` teamColor",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/dissolveTeam"
        },
        "configuration": {
            "label": "dissolveTeam",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "[[File:distance2D.jpg|400px|right]]\nReturns a distance in meters between `Object`s, `Position`s or `Location`s.\n**IMPORTANT**:  If positions are supplied as arguments, the coordinates are treated as [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL). If [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) is supplied, z is assumed 0. If you need distance between two [Position3D](https://community.bistudio.com/wiki/Position%23Position3D) coordinates, use `vectorDistance`.",
            "examples": [
                {
                    "text": "```sqf\n_meters = player distance _object;\n```"
                },
                {
                    "text": "```sqf\n_meters = player distance [1,2,3];\n```"
                },
                {
                    "text": "```sqf\n_meters = [1,2,3] distance [4,5,6];\n```"
                },
                {
                    "text": "```sqf\n_meters = position player distance nearestLocation [position player, \"hill\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "param1",
                            "description": "`Object` or `Array` in format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) or [Position2D](https://community.bistudio.com/wiki/Position%23Introduction)"
                        },
                        {
                            "name": "param2",
                            "description": "`Object` or `Array` in format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) or [Position2D](https://community.bistudio.com/wiki/Position%23Introduction)"
                        }
                    ],
                    "outline": "param1 `distance` param2",
                    "returns": "`Number` - distance in meters or 1e10 if distance cannot be calculated"
                },
                {
                    "parameters": [
                        {
                            "name": "location1",
                            "description": "`Location` or `Array` in format `Position` or [Position2D](https://community.bistudio.com/wiki/Position%23Introduction)"
                        },
                        {
                            "name": "location2",
                            "description": "`Location` or `Array` in format `Position` or [Position2D](https://community.bistudio.com/wiki/Position%23Introduction)"
                        }
                    ],
                    "outline": "location1 `distance` location2",
                    "returns": "`Number` - distance in meters or 1e10 if distance cannot be calculated"
                },
                {
                    "parameters": [
                        {
                            "name": "a",
                            "description": "`Number`"
                        },
                        {
                            "name": "b",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "a `distance` b",
                    "returns": "`Number` - distance c calculated as c = sqrt(a * a + b * b);"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/distance"
        },
        "configuration": {
            "label": "distance",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a 2D distance (`distance` projected to X,Y plane) in meters between `Object`s and/or `Position`s.\n[[File:distance2D.jpg|250px|right]]",
            "examples": [
                {
                    "text": "```sqf\n_meters = player distance2D heli;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "from",
                            "description": "`Object`, [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position3D](https://community.bistudio.com/wiki/Position%23Introduction)"
                        },
                        {
                            "name": "to",
                            "description": "`Object`, [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position3D](https://community.bistudio.com/wiki/Position%23Introduction)"
                        }
                    ],
                    "outline": "from `distance2D` to",
                    "returns": "`Number` - distance in meters or 1e10 if distance cannot be calculated"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/distance2D"
        },
        "configuration": {
            "label": "distance2D",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Computes the {{Link|https://en.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance|squared distance}} between two objects or positions.\nThis command is faster than {{Link|distance}} by saving a {{Link|sqrt|square root}} operation, useful for mass-checking distance without the need of the distance value itself.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _distanceSquared = 5 * 5;\nif (player distanceSqr leader player < _distanceSquared) then // similar to player distance leader player < 5\n{\n\thint \"You are less than 5m from the leader!\";\n};\n\n```"
                },
                {
                    "text": "```sqf\n\nprivate _distance = sqrt ((x2 - x1) ^ 2 + (y2 - y1) ^ 2 + (z2 - z1) ^ 2);\nprivate _distanceSqr = (x2 - x1) ^ 2 + (y2 - y1) ^ 2 + (z2 - z1) ^ 2;\n_distance = [x1, y1, z1] distance [x2, y2, z2];\n_distanceSqr = [x1, y1, z1] distanceSqr [x2, y2, z2];\n_distance = sqrt ([x1, y1, z1] distanceSqr [x2, y2, z2]);\n_distanceSqr = ([x1, y1, z1] distance [x2, y2, z2]) ^ 2;\n\n```\n\n\n<!-- KK, your turn!\nIf normal distance is calculated according to this formula:\n\nsquared distance is calculated according to this formula:  \n-->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "var1",
                            "description": "`Object` or `Position`"
                        },
                        {
                            "name": "var2",
                            "description": "`Object` or `Position`"
                        }
                    ],
                    "outline": "var1 `distanceSqr` var2",
                    "returns": "`Number` - distance in meters or 1e10 if distance cannot be calculated"
                },
                {
                    "parameters": [
                        {
                            "name": "a",
                            "description": "`Number`"
                        },
                        {
                            "name": "b",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "a `distanceSqr` b",
                    "returns": "`Number` - distance c calculated as <sqf inline>c = a * a + b * b"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/distanceSqr"
        },
        "configuration": {
            "label": "distanceSqr",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the numerical index for the distribution region of this copy of [[:Category:ArmA: Armed Assault|Armed Assault]].\n# USA\n# Rest of the world",
            "examples": [
                {
                    "text": "```sqf\nif (distributionRegion == 1) then { hint \"miles\"; } else { hint \"kilometres\"; };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`distributionRegion`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/distributionRegion"
        },
        "configuration": {
            "label": "distributionRegion",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Executes _code_. Used as part of a construct, such as `while`, `with`, `for` and `switch`. The _code_ is always executed in `missionNamespace` unless `do` is used with `with` as an argument.",
            "examples": [
                {
                    "text": "```sqf\n\nwhile { b > a } do\n{\n\ta = a + 1;\n};\n\n```"
                },
                {
                    "text": "```sqf\n\nwith uiNamespace do\n{\n\tMyUIVar = MyUIVar + 5;\n};\n\n```"
                },
                {
                    "text": "```sqf\n\nfor \"_i\" from 1 to 10 do\n{\n\tsystemChat str _i;\n\tsleep 0.5;\n};\n\n```"
                },
                {
                    "text": "```sqf\n\nswitch (50) do\n{\n\tcase 25: { hint \"25\" };\n\tcase 50: { hint \"50\" }; // hints \"50\"\n\tcase 75: { hint \"75\" };\n\tdefault { hint \"nope\" };\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "construct",
                            "description": "[While Type](https://community.bistudio.com/wiki/While%20Type) (`while`), [With Type](https://community.bistudio.com/wiki/With%20Type) (`with`), [For Type](https://community.bistudio.com/wiki/For%20Type) (`for`), [Switch Type](https://community.bistudio.com/wiki/Switch%20Type) (`switch`)"
                        },
                        {
                            "name": "code",
                            "description": "`Code`"
                        }
                    ],
                    "outline": "construct `do` code",
                    "returns": "`Anything`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/do"
        },
        "configuration": {
            "label": "do",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "Performs given [Eden Editor action](https://community.bistudio.com/wiki/Eden%20Editor%3A%20Actions).\n**WARNING**: Prior to `**Arma 3 2.12.150678**` it was possible to use this command outside of [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor). For example \n```sqf\ndo3DENAction \"MissionSave\";\n```\n would wipe the [[mission.sqm]] without a way to restore it when executed accidentally during preview.",
            "examples": [
                {
                    "text": "```sqf\ndo3DENAction \"MissionSave\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "action",
                            "description": "`String` - see [Eden Editor: Actions](https://community.bistudio.com/wiki/Eden%20Editor%3A%20Actions)"
                        }
                    ],
                    "outline": "`do3DENAction`  action",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/do3DENAction"
        },
        "configuration": {
            "label": "do3DENAction",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Orders an artillery unit to fire a burst on the given position (silently).",
            "examples": [
                {
                    "text": "```sqf\nMortar doArtilleryFire [[3000, 120, 1000], \"8Rnd_82mm_Mo_shells\", 3];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "position",
                            "description": "`Array` format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL)"
                        },
                        {
                            "name": "type",
                            "description": "`String` - magazine class name from [CfgMagazines](https://community.bistudio.com/wiki/Arma_3%3A_CfgMagazines) (case sensitive)."
                        },
                        {
                            "name": "rounds",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "unit `doArtilleryFire` [position, type, rounds]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/doArtilleryFire"
        },
        "configuration": {
            "label": "doArtilleryFire",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Order the given unit(s) to fire on the given target (without radio messages).\n\nThe target is set with `doTarget` or `commandTarget`.\n\nThe target can be a unit or a vehicle, but not an object.",
            "examples": [
                {
                    "text": "```sqf\n_ESoldier1 doFire _WSoldier1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object` or `Array`"
                        },
                        {
                            "name": "target",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "unitName `doFire` target",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/doFire"
        },
        "configuration": {
            "label": "doFire",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Order the given unit(s) to follow another from his own group as his [formation leader](https://community.bistudio.com/wiki/formLeader) (without radio messages).\n\nIt is also used to order the unit to **return to formation** after e.g `doStop` even if it is the leader himself that should return to formation (see [Example 2](https://community.bistudio.com/wiki/%23Example%202)).",
            "examples": [
                {
                    "text": "```sqf\n_soldier1 doFollow _soldier2;\n```"
                },
                {
                    "text": "```sqf\nunits _group doFollow leader _group; // returns all the units to formation\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` or `Array` of `Object`s"
                        },
                        {
                            "name": "unitLead",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "unit `doFollow` unitLead",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/doFollow"
        },
        "configuration": {
            "label": "doFollow",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Orders a unit to process command defined by `FSM` file (silently). \n\nUnlike with execFSM where __this_ is passed to the FSM, the following parameters are passed when using doFSM/commandFSM:\n\n; _leader: leader of subgroup with this command \n; _destination: command destination/position\n; _target: command target \n; _units: list of all persons in subgroup",
            "examples": [
                {
                    "text": "```sqf\n_soldierOne doFSM [\"move.fsm\", position player, player];\n```"
                },
                {
                    "text": "```sqf\nunits player doFSM [\"move.fsm\", position player, player];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` or `Array` of [objects](https://community.bistudio.com/wiki/Object)"
                        },
                        {
                            "name": "fsmName",
                            "description": "`String`"
                        },
                        {
                            "name": "position",
                            "description": "`Array`"
                        },
                        {
                            "name": "target",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "unit `doFSM` [fsmName, position, target]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/doFSM"
        },
        "configuration": {
            "label": "doFSM",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Orders one or multiple units to get out from the vehicle (silently). Same as `commandGetOut` with latter being shown via radio chat.\n\n\n\nNotes:\n* Works for both AI and player entities\n* AI unit gets back in - unless is under player command or combined with other sqf commands (`orderGetIn` false, `allowGetIn` false or `leaveVehicle`)\n* Ignores vehicle's lock state - unlike [[Arma_3_Actions#Eject|action \"Eject\"]] and `moveOut`\n* AI waits for execution until vehicle has stopped/is no longer flying (unclear if any timeout exists for order to be discarded) - unlike [[Arma_3_Actions#Eject|action \"Eject\"]] and `moveOut`\n* Plays the vehicle's position's get out animation (same as [[Arma_3_Actions#Eject|action \"Eject\"]]) - unlike `moveOut`\n* When execute for multiple units, it waits till the action is completed, before the next to take his turn (same as [[Arma_3_Actions#Eject|action \"Eject\"]]) - unlike `moveOut`\n* AI gets back into formation afterwards\n* Works only on alive units - unlike [[Arma_3_Actions#Eject|action \"Eject\"]] (one after another) or `moveOut` (instantly)\n* Does not work on [unconscious](https://community.bistudio.com/wiki/setUnconscious) - unless the AI is under player command. Unlike `moveOut` or [[Arma_3_Actions#Eject|action \"Eject\"]] (but one after another))",
            "examples": [
                {
                    "text": "```sqf\ndoGetOut _unitOne;\n```"
                },
                {
                    "text": "```sqf\ndoGetOut [_unitOne,_unitTwo];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "units",
                            "description": "`Object` or `Array` of `Object`s"
                        }
                    ],
                    "outline": "`doGetOut` units",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/doGetOut"
        },
        "configuration": {
            "label": "doGetOut",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Order the given unit(s) to move to the given position (without radio messages). Upon reaching its destination, if it is the group leader it will order the group to form around it's new position. If it is not the leader, it will immediately be ordered to return to formation by the group leader and begin moving back to the group. Use `doStop` to stop units returning to formation. `moveToCompleted` will return true when a unit issued this command reaches its destination.",
            "examples": [
                {
                    "text": "```sqf\n_soldier1 doMove (position _officer);\n```"
                },
                {
                    "text": "```sqf\nthis doMove (getMarkerPos \"Marker1\");\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit(s)",
                            "description": "`Object` or `Array`"
                        },
                        {
                            "name": "position",
                            "description": "`Array` format `Position`"
                        }
                    ],
                    "outline": "unit(s) `doMove` position",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/doMove"
        },
        "configuration": {
            "label": "doMove",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return animation phase of door on vehicle.",
            "examples": [
                {
                    "text": "```sqf\n_phase = heli doorPhase \"door_L\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "door",
                            "description": "`String`"
                        }
                    ],
                    "outline": "object `doorPhase` door",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/doorPhase"
        },
        "configuration": {
            "label": "doorPhase",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Order the given unit(s) to stop (without radio messages). The units stopped in this way will leave the groups formation. It will prevent them from moving around with their group (or formation leader), while still being able to turn around and even move to a new position if they see fit. \n\nThe units will still respond to orders from their group leader (like engage, rearm, board a vehicle), but all of their actions will be separate from the group formation. To resume group default behaviour, use `doFollow` command. For example: <sqf inline>units _group doFollow leader _group;",
            "examples": [
                {
                    "text": "```sqf\ndoStop _soldier1;\n```"
                },
                {
                    "text": "```sqf\ndoStop [_soldier1, _soldier2];\n```"
                },
                {
                    "text": "```sqf\ndoStop (units player);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit(s)",
                            "description": "`Object` or `Array` of `Object`s"
                        }
                    ],
                    "outline": "`doStop` unit(s)",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/doStop"
        },
        "configuration": {
            "label": "doStop",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Orders the given unit or a group of units to suppress the given position or target (without radio messages, see `commandSuppressiveFire` is you need messages). \n* When an `Array` of units is passed as param, only units from the same `Group` as the first unit in array are considered. \n* The unit (units) starts firing at the given target or position random amount of shots (exact formula unknown, but seems to depend on amount of ammo unit has) after which it stops. \n* `currentCommand` shows `**\"Suppress\"**` and there is no way of stopping unit before it completes random amount of rounds. \n* If position is passed as target param, it stays fixed. \n* If object is passed as target param, it depends on what kind of object. If it is considered a proper target by the unit, it is tracked by the unit dynamically. If it is not, the position gets obtained via `getPosWorld`, which could be different from [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) of the object, and it is fixed even if the target is able to change position later.",
            "examples": [
                {
                    "text": "```sqf\n_soldier doSuppressiveFire [1869.508,5760.962,0.000];\n```"
                },
                {
                    "text": "```sqf\nunits player doSuppressiveFire cursorTarget;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` or `Array` - a single unit or array of units"
                        },
                        {
                            "name": "target",
                            "description": "`Object` or `Array` - actual target or position of the target in format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL)"
                        }
                    ],
                    "outline": "unit `doSuppressiveFire`  target",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/doSuppressiveFire"
        },
        "configuration": {
            "label": "doSuppressiveFire",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Order the given unit(s) to target the given target (without radio messages).\nTargeting can be stopped by \n```sqf\n_unit doWatch objNull;\n```\n or\n```sqf\n_unit commandWatch objNull;\n```",
            "examples": [
                {
                    "text": "```sqf\n_ESoldier1 doTarget _WSoldier1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` or `Array` - a single unit or array of units"
                        },
                        {
                            "name": "target",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "unit `doTarget` target",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/doTarget"
        },
        "configuration": {
            "label": "doTarget",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Order the given unit(s) to watch the given position or target (without radio messages). Use `objNull` as the target to order a unit to stop watching a position/target.",
            "examples": [
                {
                    "text": "```sqf\n_soldierOne doWatch markerPos \"MarkerMoveOne\";\n```\n\n\nThe unit named \"soldierOne\" will watch the position where the marker \"MarkerMoveOne\" is placed."
                },
                {
                    "text": "```sqf\n_soldierOne doWatch _eastSoldier;\n```\n\n\nThe unit named \"soldierOne\" will watch the unit named \"eastSoldier\"."
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit(s)",
                            "description": "`Object` or `Array`"
                        },
                        {
                            "name": "position",
                            "description": "`Array` format `Position`"
                        }
                    ],
                    "outline": "unit(s) `doWatch` position",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "unit(s)",
                            "description": "`Object` or `Array`"
                        },
                        {
                            "name": "target",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "unit(s) `doWatch`  target",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/doWatch"
        },
        "configuration": {
            "label": "doWatch",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Draws a single line arrow on the map.\nAs this command needs to be called every frame, it is preferable using the [onDraw](https://community.bistudio.com/wiki/User%20Interface%20Event%20Handlers%23onDraw) UI Event Handler.\nTo draw a color filled arrow of custom shape see `BIS_fnc_drawArrow`.",
            "examples": [
                {
                    "text": "```sqf\n\nfindDisplay 12 displayCtrl 51 ctrlAddEventHandler [\"Draw\", \n{\n\t_this select 0 drawArrow [\n\t\tplayer,\n\t\tplayer getRelPos [100, 0],\n\t\t[1,0,0,1]\n\t];\n}];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "from",
                            "description": "`Object` or `Array` in format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position3D](https://community.bistudio.com/wiki/Position%23Introduction) - arrow start position"
                        },
                        {
                            "name": "to",
                            "description": "`Object` or `Array` in format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position3D](https://community.bistudio.com/wiki/Position%23Introduction) - arrow end position"
                        },
                        {
                            "name": "color",
                            "description": "`Array` - arrow color in format [r,g,b,a]"
                        }
                    ],
                    "outline": "map `drawArrow` [from, to, color]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/drawArrow"
        },
        "configuration": {
            "label": "drawArrow",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "[[File:drawEllipse.jpg|250px|right]] Draws an ellipse on the map. Just like with marker or trigger area, negative _a_ and _b_ will result in hexagon.",
            "examples": [
                {
                    "text": "```sqf\n\nfindDisplay 12 displayCtrl 51 ctrlAddEventHandler [\"Draw\", \n{\n\t_this select 0 drawEllipse [\n\t\tplayer, 10, 10, 0, [1, 0, 0, 1], \"\"\n\t];\n\t_this select 0 drawEllipse [\n\t\tplayer, -10, -10, 0, [1, 1, 1, 1], \"#(rgb,8,8,3)color(1,0.6,0,1)\"\n\t];\n\t_this select 0 drawEllipse [\n\t\tplayer, -10, -10, 90, [0, 0, 1, 1], \"\"\n\t];\n}];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "centre",
                            "description": "`Object` or `Array` format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction), [Position3D](https://community.bistudio.com/wiki/Position%23Introduction) - ellipse's centre"
                        },
                        {
                            "name": "a",
                            "description": "`Number` - horizontal (x) radius"
                        },
                        {
                            "name": "b",
                            "description": "`Number` - vertical (y) radius"
                        },
                        {
                            "name": "angle",
                            "description": "`Number` - angle of rotation in degrees"
                        },
                        {
                            "name": "color",
                            "description": "`Array` format [[Color|Color (RGBA)]] - line color"
                        },
                        {
                            "name": "fill",
                            "description": "`String` - fill texture file or [Procedural Textures](https://community.bistudio.com/wiki/Procedural%20Textures). Note that the file texture will not rotate with rectangle, use `drawIcon` for that. If fill texture is not empty, set line color to white [1,1,1,1]"
                        }
                    ],
                    "outline": "map `drawEllipse` [centre, a, b, angle, color, fill]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/drawEllipse"
        },
        "configuration": {
            "label": "drawEllipse",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Draws an icon on the map.\nAs this command needs to be called every frame, it is preferable using the [onDraw](https://community.bistudio.com/wiki/User%20Interface%20Event%20Handlers%23onDraw) UI Event Handler.\n**NOTE**: Some useful icons can be found in <sqf inline>configFile >> \"CfgVehicleIcons\".",
            "examples": [
                {
                    "text": "Red icon with text:\n\n```sqf\n\nfindDisplay 12 displayCtrl 51 ctrlAddEventHandler [\"Draw\", {\n\t_this select 0 drawIcon [\n\t\t\"iconStaticMG\", // custom images can also be used: getMissionPath \"\\myFolder\\myIcon.paa\"\n\t\t[1,0,0,1],\n\t\tgetPosASLVisual player,\n\t\t24,\n\t\t24,\n\t\tgetDirVisual player,\n\t\t\"Player Vehicle\",\n\t\t1,\n\t\t0.03,\n\t\t\"TahomaB\",\n\t\t\"right\"\n\t]\n}];\n\n```"
                },
                {
                    "text": "Green text only:\n\n```sqf\n\nfindDisplay 12 displayCtrl 51 ctrlAddEventHandler [\"Draw\", {\n\t_this select 0 drawIcon [\n\t\t\"#(rgb,1,1,1)color(1,1,1,1)\",\n\t\t[0,1,0,1],\n\t\tplayer,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\tname player\n\t]\n}];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "texture",
                            "description": "`String` - icon texture"
                        },
                        {
                            "name": "color",
                            "description": "`Array` - text and icon color in format [[Color|Color(RGBA)]]"
                        },
                        {
                            "name": "position",
                            "description": "`Object`, `Array` format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position3D](https://community.bistudio.com/wiki/Position%23Introduction)"
                        },
                        {
                            "name": "width",
                            "description": "`Number` - width of the icon (but not the text)"
                        },
                        {
                            "name": "height",
                            "description": "`Number` - height of the icon (but not the text)"
                        },
                        {
                            "name": "angle",
                            "description": "`Number` - rotation angle of the icon (but not the text)"
                        },
                        {
                            "name": "text",
                            "description": "`String` - (Optional, default \"\")"
                        },
                        {
                            "name": "shadow",
                            "description": "`Number` or `Boolean` - (Optional, default `false`) can be one of:\n* 0 (`false`): no shadow\n* 1: shadow (for text)\n* 2 (`true`): outline (works for text and for icon only if icon angle is 0)"
                        },
                        {
                            "name": "textSize",
                            "description": "`Number` - (Optional, default -1) size of the text in UI units"
                        },
                        {
                            "name": "font",
                            "description": "`String` - (Optional, default \"\") text's font"
                        },
                        {
                            "name": "align",
                            "description": "`String` - (Optional, default \"right\") text alignment. Can be:\n* \"left\"\n* \"right\"\n* \"center\""
                        },
                        {
                            "name": "drawSideArrows",
                            "description": "`Boolean` - (Optional, default `false`) unused"
                        },
                        {
                            "name": "offsetX",
                            "description": "`Number` - (Optional, default 0) unused"
                        },
                        {
                            "name": "offsetY",
                            "description": "`Number` - (Optional, default 0) unused"
                        }
                    ],
                    "outline": "map `drawIcon` [texture, color, position, width, height, angle, text, shadow, textSize, font, align<!--, drawSideArrows, offsetX, offsetY-->]",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/drawIcon"
        },
        "configuration": {
            "label": "drawIcon",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Draws an icon at the given position in the game world. This command has to be executed every frame. Use the [Draw3D](https://community.bistudio.com/wiki/Arma%203%3A%20Mission%20Event%20Handlers%23Draw3D) Mission Event Handler (which is executed every frame if the user can see the icon).\n\nIn order for the results of this command to be visible through a [custom camera](https://community.bistudio.com/wiki/camCreate), enable HUD with `cameraEffectEnableHUD`.\n\n<sqf inline>showHUD false will hide the icon drawn by this command.\n\nIn order for arrows to appear, the icon texture should exist. The arrow size is proportionate to the icon size.\n\n**NOTE**: \n* To avoid flickering and ensure visual fidelity, always use the [visual](https://community.bistudio.com/wiki/Position%23Formats) (render time scope) variant of position commands, such as `getPosASLVisual`.\n* The _width_ and _height_ parameters are multipliers for `**activeWidth**` and `**activeHeight**` set in config. So for example, if one needs to create an icon half the screen wide (<sqf inline>safeZoneW / 2) and half the screen tall (<sqf inline>safeZoneH / 2), divide these by the according config values: \n```sqf\n\nprivate _iconWidth = (safeZoneW / 2) / getNumber (configFile >> \"CfgInGameUI\" >> \"Cursor\" >> \"activeWidth\");\nprivate _iconHeight = (safeZoneH / 2) / getNumber (configFile >> \"CfgInGameUI\" >> \"Cursor\" >> \"activeHeight\");\n\n```",
            "examples": [
                {
                    "text": "Icon and text:\n\n```sqf\n\naddMissionEventHandler [\"Draw3D\", {\n\tdrawIcon3D [\"targetIcon.paa\", [1,1,1,1], ASLToAGL getPosASLVisual cursorTarget, 1, 1, 45, \"Target\", 1, 0.05, \"TahomaB\"];\n}];\n\n```"
                },
                {
                    "text": "Just text:\n\n```sqf\n\naddMissionEventHandler [\"Draw3D\", {\n\tdrawIcon3D [\"\", [1,0,0,1], ASLToAGL getPosASLVisual cursorTarget, 0, 0, 0, \"Target\", 1, 0.05, \"PuristaMedium\"];\n}];\n\n```"
                },
                {
                    "text": "```sqf\n\niconPos = player getPos [10, 0] vectorAdd [0,0,2];\naddMissionEventHandler [\"draw3D\",\n{\n\tdrawIcon3D\n\t[\n\t\t\"\\a3\\ui_f\\data\\IGUI\\Cfg\\Radar\\radar_ca.paa\",\n\t\t[0,0,1,1],\n\t\ticonPos,\n\t\t5,\n\t\t5,\n\t\tgetDirVisual player,\n\t\t\"COMPASS\",\n\t\t0,\n\t\t0.3,\n\t\t\"PuristaMedium\",\n\t\t\"center\",\n\t\ttrue\n\t];\n}];\n\n```"
                },
                {
                    "text": "Since **(Arma 3)**\n\n```sqf\n\npos = player getPos [10, 0] vectorAdd [0,0,2];\naddMissionEventHandler [\"draw3D\",\n{\n\t_k = 10 / (player distance pos);\n\tdrawIcon3D\n\t[\n\t\t\"\\a3\\ui_f\\data\\IGUI\\Cfg\\Radar\\radar_ca.paa\",\n\t\t[1,0,0,1],\n\t\tpos,\n\t\t1 * _k,\n\t\t1 * _k,\n\t\t0,\n\t\tname player,\n\t\t0,\n\t\t0.04 * _k,\n\t\t\"RobotoCondensed\",\n\t\t\"right\",\n\t\ttrue,\n\t\t0.005 * _k,\n\t\t-0.035 * _k\n\t];\n}];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "texture",
                            "description": "`String` - icon texture"
                        },
                        {
                            "name": "color",
                            "description": "* `Array` format [[Color|Color (RGBA)]] - icon color\n* {{GVI|arma3|2.04"
                        },
                        {
                            "name": "position",
                            "description": "`Array` format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) - icon position"
                        },
                        {
                            "name": "width",
                            "description": "`Number` - icon width"
                        },
                        {
                            "name": "height",
                            "description": "`Number` - icon height"
                        },
                        {
                            "name": "angle",
                            "description": "`Number` - icon rotation angle"
                        },
                        {
                            "name": "text",
                            "description": "`String` - (Optional, default \"\") text label to display next to the icon"
                        },
                        {
                            "name": "shadow",
                            "description": "(Optional, default 0)\n* `Number`:\n** **0:** no shadow\n** **1:** shadow (not used in this context, used in UI context)\n** **2:** outline\n* `Boolean`:\n** `true` - outline\n** `false` - no shadow"
                        },
                        {
                            "name": "textSize",
                            "description": "`Number` - (Optional, default size of system) text size"
                        },
                        {
                            "name": "font",
                            "description": "`String` - (Optional, default \"RobotoCondensedBold\") font class name from `**CfgFontFamilies**` (see {{Link|FXY File Format#Available Fonts}})"
                        },
                        {
                            "name": "textAlign",
                            "description": "`String` - (Optional, default \"center\") text alignment, can be one of:\n* \"left\"\n* \"center\"\n* \"right\""
                        },
                        {
                            "name": "drawSideArrows",
                            "description": "`Boolean` - (Optional, default `false`) `true` to draw arrows and the text label at edge of screen when the icon moves off the screen"
                        },
                        {
                            "name": "offsetX",
                            "description": "`Number` - (Optional, default 0) X offset for the icon text"
                        },
                        {
                            "name": "offsetY",
                            "description": "`Number` - (Optional, default 0) Y offset for the icon text"
                        }
                    ],
                    "outline": "`drawIcon3D` [texture, color, position, width, height, angle, text, shadow, textSize, font, textAlign, drawSideArrows, offsetX, offsetY]",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/drawIcon3D"
        },
        "configuration": {
            "label": "drawIcon3D",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Draws a laserbeam and a lightpoint at the impact location of the laser.\n\nThis command has to be executed every frame - see {{Link|Arma 3: Mission Event Handlers#Draw3D}}.\n\nLasers drawn with this command are subject to the same limitations as weapon attachment lasers. These limitations are defined in the `**CfgIRLaserSettings**` config class.",
            "examples": [
                {
                    "text": "Give the player a laser eye:\n\n```sqf\n\naddMissionEventHandler [\"Draw3D\", {\n\tdrawLaser [\n\t\teyePos player vectorAdd [0, 0, 0.1],\n\t\tgetCameraViewDirection player,\n\t\t[1000, 0, 0], // Bright red\n\t\t[],\n\t\t5,\n\t\t20,\n\t\t-1,\n\t\tfalse\n\t];\n}];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) - the laser's origin position"
                        },
                        {
                            "name": "direction",
                            "description": "`Array` of `Vector3D` - the laser's direction vector"
                        },
                        {
                            "name": "beamColor",
                            "description": "`Array` of [[Color|Color (RGB)]] - laser beam color. The values can go way above the usual 0..1 range as they also act as emissivity brightness"
                        },
                        {
                            "name": "dotColor",
                            "description": "`Array` of [[Color|Color (RGB)]] - impact dot color. Set to <sqf inline>[] to use the same value as _beamColor_."
                        },
                        {
                            "name": "dotSize",
                            "description": "`Number` - impact dot size; if set to 0 the impact dot will not render"
                        },
                        {
                            "name": "beamThickness",
                            "description": "`Number` - laser beam's thickness scale; if set to 0, the beam will not render"
                        },
                        {
                            "name": "beamMaxLength",
                            "description": "`Number` - (Optional, default -1) laser beam's maximum length. `**-1**` means maximum length (defined in `**CfgIRLaserSettings**`), `**0**` means no length at all and the command is ignored"
                        },
                        {
                            "name": "isIR",
                            "description": "`Boolean` - (Optional, default `true`) whether the laser and impact dot are only visible with Night Vision / Thermal Imaging"
                        }
                    ],
                    "outline": "`drawLaser` [position, direction, beamColor, dotColor, dotSize, beamThickness, beamMaxLength, isIR]",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/drawLaser"
        },
        "configuration": {
            "label": "drawLaser",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Draw a line on the map. Can decrease framerate!",
            "examples": [
                {
                    "text": "```sqf\n\n(findDisplay 12 displayCtrl 51) ctrlAddEventHandler [\"Draw\",\n\t\"(_this select 0) drawLine [\n\t\tplayer,\n\t\t[0,0,0],\n\t\t[0,0,1,1]\n\t];\"\n];\n\n```\n\n\n**(Arma 3)** `toString` version:\n\n```sqf\n\n(findDisplay 12 displayCtrl 51) ctrlAddEventHandler [\"Draw\", toString {\n\t(_this select 0) drawLine [\n\t\tplayer,\n\t\t[0,0,0],\n\t\t[0,0,1,1] // blue\n\t];\n}];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "from",
                            "description": "`Object` or `Array` format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position3D](https://community.bistudio.com/wiki/Position%23Introduction)"
                        },
                        {
                            "name": "to",
                            "description": "`Object` or `Array` format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position3D](https://community.bistudio.com/wiki/Position%23Introduction)"
                        },
                        {
                            "name": "color",
                            "description": "`Array` format [[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "map `drawLine` [from, to, color]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/drawLine"
        },
        "configuration": {
            "label": "drawLine",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Draws a line of a given colour between two 3D positions in the current frame. To be used mostly in a [[Arma 3: Mission Event Handlers#Draw3D|\"Draw3D\"]] [mission event handler](https://community.bistudio.com/wiki/addMissionEventHandler).",
            "examples": [
                {
                    "text": "```sqf\nonEachFrame {\n\tdrawLine3D [getPos player, getPos cursorTarget, [1,1,1,1]];\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "start",
                            "description": "`Array` format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL)"
                        },
                        {
                            "name": "end",
                            "description": "`Array` format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL)"
                        },
                        {
                            "name": "color",
                            "description": "`Array` format [[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "`drawLine3D` [start, end, color]",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/drawLine3D"
        },
        "configuration": {
            "label": "drawLine3D",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "The editor will draw a line between the two specified editor objects. Line type can be LINE or ARROW. \n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "[from,to,param type,line type,color]",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "map `drawLink` [from,to,param type,line type,color]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/drawLink"
        },
        "configuration": {
            "label": "drawLink",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Used to draw locations in [2D Editor](https://community.bistudio.com/wiki/2D%20Editor).",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "location",
                            "description": "`Location`"
                        }
                    ],
                    "outline": "control `drawLocation` location",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/drawLocation"
        },
        "configuration": {
            "label": "drawLocation",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Draws given polygon on the given map control with given color. The polygon must consist of at least 3 points. Unlike with other `**draw***` commands and due to complexity, this command does not support filling of the polygon with color. Use `drawTriangle` command to construct and fill polygon shape as a workaround.",
            "examples": [
                {
                    "text": "```sqf\n\ntest_polygon = [];\nfor \"_i\" from 1 to 12 do \n{\n\ttest_polygon pushBack (player getPos [10 + random 100, 360 / _i]);\n};\n\nfindDisplay 12 displayCtrl 51 ctrlAddEventHandler [\"Draw\", \n{\n\tparams [\"_control\"];\n\t_control drawPolygon [test_polygon, [0,0,1,1]];\n}];\n\n```"
                },
                {
                    "text": "Draw a polygon by adjusting the `**_radius**` and `**_numVertices**`\n\n```sqf\n\nvertices = [];\nprivate _numVertices = 2;\nprivate _numVertices = _numVertices max 3;\nprivate _radius = 100;\n\nfor \"_i\" from 1 to _numVertices do\n{\n\tvertices pushBack (player getRelPos [_radius, 360 / _numVertices * _i]);\n};\n\nfindDisplay 12 displayCtrl 51 ctrlAddEventHandler [\"Draw\",\n{\n\tparams [\"_control\"];\n\t_control drawPolygon [vertices, [0,0,1,1]];\n}];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "polygon",
                            "description": "`Array` of [Position3D](https://community.bistudio.com/wiki/Position%23Introduction)"
                        },
                        {
                            "name": "color",
                            "description": "[[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "map `drawPolygon` [polygon, color]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/drawPolygon"
        },
        "configuration": {
            "label": "drawPolygon",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Draws a rectangle on the map.\n [[File:drawRectangle.jpg|250px]]",
            "examples": [
                {
                    "text": "```sqf\n\n_ctrl drawRectangle [\n\tgetPos player,\n\t20,\n\t20,\n\tgetDir player,\n\t[0,0,1,1],\n\t\"\"\n];\n\n```"
                },
                {
                    "text": "```sqf\n\n_ctrl drawRectangle [\n\tplayer,\n\t10,\n\t20,\n\tgetDir player,\n\t[1,1,1,1],\n\t\"#(rgb,8,8,3)color(1,0,0,1)\"\n];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "centre",
                            "description": "`Object` or `Array` in format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position3D](https://community.bistudio.com/wiki/Position%23Introduction) - rectangle's centre"
                        },
                        {
                            "name": "halfWidth",
                            "description": "`Number` - 1/2 width of rectangle in meters"
                        },
                        {
                            "name": "halfHeight",
                            "description": "`Number` - 1/2 height of rectangle in meters"
                        },
                        {
                            "name": "angle",
                            "description": "`Number` - angle of rotation in degrees"
                        },
                        {
                            "name": "color",
                            "description": "`Array` format [[Color|Color (RGBA)]] - line color"
                        },
                        {
                            "name": "fill",
                            "description": "`String` - fill texture file or [Procedural Textures](https://community.bistudio.com/wiki/Procedural%20Textures). Note that the file texture will not rotate with rectangle, use `drawIcon` for that. If fill texture is not empty, set line color to white <sqf inline>[1,1,1,1]"
                        }
                    ],
                    "outline": "map `drawRectangle` [centre, halfWidth, halfHeight, angle, color, fill]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/drawRectangle"
        },
        "configuration": {
            "label": "drawRectangle",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "[[File:drawTriangle.jpg|right|250px]]\nDraws one to multiple triangles on the map.\n**NOTE**:  When `**fill**` param is absent or is an empty string \"\", the triangle is drawn with lines of the color set in `**color**` param.\nIn order to draw color-filled triangle of the same color as `**color**` param, set `**fill**` param to opaque white procedural texture`**\"#(rgb,1,1,1)color(1,1,1,1)\"**`.",
            "examples": [
                {
                    "text": "```sqf\n\nfindDisplay 12 displayCtrl 51 ctrlAddEventHandler [\"Draw\", \n{\n\t_this select 0 drawTriangle \n\t[\n\t\t[\n\t\t\t// triangle 1 start\n\t\t\tplayer getRelPos [100, 0],\n\t\t\tplayer getRelPos [100, -135],\n\t\t\tplayer getRelPos [100, 135]\n\t\t\t// triangle 1 end\n\t\t],\n\t\t[1,0,0,0.5],\n\t\t\"#(rgb,1,1,1)color(1,1,1,1)\"\t\t\n\t];\n}];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control` - map control"
                        },
                        {
                            "name": "vertices",
                            "description": "`Array` of `Position`s - triangle(s) vertices in multiple of 3, see _Example 1_ - if [Position3D](https://community.bistudio.com/wiki/Position%23Introduction) is provided for a vertex, its z value is ignored"
                        },
                        {
                            "name": "color",
                            "description": "`Array` in format [[Color|Color (RGBA)]]"
                        },
                        {
                            "name": "fill",
                            "description": "`String` - (Optional, default `**\"\"**`) fill texture file or [Procedural Textures](https://community.bistudio.com/wiki/Procedural%20Textures). See note in description for more info."
                        }
                    ],
                    "outline": "map `drawTriangle` [vertices, color, fill]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/drawTriangle"
        },
        "configuration": {
            "label": "drawTriangle",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the driver of a vehicle.",
            "examples": [
                {
                    "text": "```sqf\n(driver _tank) action [\"getout\", _tank];\n```"
                },
                {
                    "text": "```sqf\ndriver vehicle player isEqualTo player // check if player is driver of current vehicle\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`driver` vehicle",
                    "returns": "`Object` -\nThe unit sitting in the driver place is returned. If vehicle is not a vehicle but a person, the person is returned."
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/driver"
        },
        "configuration": {
            "label": "driver",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates a particle effect.\nThis command is used to create smoke, fire and similar effects.\nThe particles are single polygons with single textures that always face the player.\nThey can be set to dynamically change their position, size, direction, can be set to different weights and to be more or less dependent on the wind.",
            "examples": [
                {
                    "text": "```sqf\ndrop [\"cl_basic\", \"\", \"Billboard\", 1, 1,\n\t[-3.5 * (sin (direction xural)), -3.5 * (cos (direction xural)), 0],\n\t[random 0.1, random 0.1, random 0.5],\n\t1, 0.005, 0.0042, 0.7, [0.3,3],\n\t[[0.5,0.5,0.5,0], [0.7,0.7,0.7,0.5], [0.9,0.9,0.9,0]],\n\t[0,1,0,1,0,1],\n\t0.2, 0.2, \"\", \"\", xural];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "parameters",
                            "description": "`Array` format `ParticleArray`"
                        }
                    ],
                    "outline": "`drop` parameters",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/drop"
        },
        "configuration": {
            "label": "drop",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "A getter for `setDynamicSimulationDistance`.",
            "examples": [
                {
                    "text": "```sqf\nhint str dynamicSimulationDistance \"Prop\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "category",
                            "description": "`String` - can be:\n* `**\"Group\"**` - Infantry units and groups\n* `**\"Vehicle\"**` - Vehicles with crew\n* `**\"EmptyVehicle\"**` - All vehicles without crew\n* `**\"Prop\"**` - Static objects"
                        }
                    ],
                    "outline": "`dynamicSimulationDistance`  category",
                    "returns": "`Number` - activation distance"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/dynamicSimulationDistance"
        },
        "configuration": {
            "label": "dynamicSimulationDistance",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "A getter for `setDynamicSimulationDistanceCoef`",
            "examples": [
                {
                    "text": "```sqf\nhint str dynamicSimulationDistanceCoef \"IsMoving\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "class",
                            "description": "`String` - see `setDynamicSimulationDistanceCoef`"
                        }
                    ],
                    "outline": "`dynamicSimulationDistanceCoef` class",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/dynamicSimulationDistanceCoef"
        },
        "configuration": {
            "label": "dynamicSimulationDistanceCoef",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "A getter for `enableDynamicSimulation`.",
            "examples": [
                {
                    "text": "```sqf\nhint str dynamicSimulationEnabled _myObject;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` or `Group`"
                        }
                    ],
                    "outline": "`dynamicSimulationEnabled` object",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/dynamicSimulationEnabled"
        },
        "configuration": {
            "label": "dynamicSimulationEnabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "A getter for `enableDynamicSimulationSystem`",
            "examples": [
                {
                    "text": "```sqf\nhint str dynamicSimulationSystemEnabled;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**dynamicSimulationSystemEnabled**",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/dynamicSimulationSystemEnabled"
        },
        "configuration": {
            "label": "dynamicSimulationSystemEnabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Pre-defined variable for the eastern [side](https://community.bistudio.com/wiki/Side).",
            "examples": [
                {
                    "text": "[SQS](https://community.bistudio.com/wiki/SQS%20Syntax):\n<sqs>? side _unit == east : hint \"This is an eastern unit!\"</sqs>"
                },
                {
                    "text": "[SQF](https://community.bistudio.com/wiki/SQF%20Syntax):\n\n```sqf\n\nif (side _unit == east) then\n{\n\thint \"This is an eastern unit!\";\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`east`",
                    "returns": "`Side`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/east"
        },
        "configuration": {
            "label": "east",
            "grammarType": "reserved-literal"
        }
    },
    {
        "documentation": {
            "description": "Sends any text into the debugger console or the logfile. This command is only **present in internal version ** not in the retail version. Use `diag_log` instead!",
            "examples": [
                {
                    "text": "```sqf\necho \"Text in logfile\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "text",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`echo`  text",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/echo"
        },
        "configuration": {
            "label": "echo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Open a window with [scenario attribute](https://community.bistudio.com/wiki/Eden%20Editor%3A%20Scenario%20Atttributes) in given section.",
            "examples": [
                {
                    "text": "```sqf\nedit3DENMissionAttributes \"Multiplayer\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "section",
                            "description": "`String` - attribute section from <sqf inline>configFile >> \"Cfg3DEN\" >> \"Mission\""
                        }
                    ],
                    "outline": "`edit3DENMissionAttributes`  section",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/edit3DENMissionAttributes"
        },
        "configuration": {
            "label": "edit3DENMissionAttributes",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Show the edit object dialog for the given object. \n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "object",
                            "description": "`String`"
                        }
                    ],
                    "outline": "map `editObject` object",
                    "returns": "`Anything`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/editObject"
        },
        "configuration": {
            "label": "editObject",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets given event handler of given editor.\n**NOTE**: Some Old Editor Command",
            "examples": [
                {
                    "text": "```sqf\n_map editorSetEventHandler [\"SelectObject\", \"\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "handler name",
                            "description": "`String`"
                        },
                        {
                            "name": "function",
                            "description": "`String`"
                        }
                    ],
                    "outline": "map `editorSetEventHandler` [handler name, function]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/editorSetEventHandler"
        },
        "configuration": {
            "label": "editorSetEventHandler",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the effective commander of the vehicle. Effective commander is the player whom driver AI will listen to. So if in a tank there is a gunner and a commander and AI driver, if the `effectiveCommander` is gunner, then gunner pressing WASD will give AI orders to move. If gunner jumps out and then enters tank again, the `effectiveCommander` role most likely has changed to commander that remained in tank. Also the assignment seems to work on first come first served basis.",
            "examples": [
                {
                    "text": "```sqf\n_commander = effectiveCommander tank;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`effectiveCommander` vehicle",
                    "returns": "`Object` - commander unit"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/effectiveCommander"
        },
        "configuration": {
            "label": "effectiveCommander",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Elevates periscope of a vehicle. Vehicles in Arma 3 which are compatible with this tech are Strider, remote laser designators, the robot arm on Eddie, etc.\nPlease note that SDV submarine has a different periscope, which is just an animated selection and could be raised and lowered with `animate` command.\n**NOTE**: \n* a user can immediately override any elevation in progress by using assigned keyboard keys. To block user input see the _blockUserInput_ parameter.\n* a [PeriscopeElevationChanged](https://community.bistudio.com/wiki/Arma%203%3A%20Event%20Handlers%23PeriscopeElevationChanged) entity event handler is also provided.",
            "examples": [
                {
                    "text": "```sqf\n_eddie elevatePeriscope [[0], 0.75, 0.1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - vehicle with periscope tech"
                        },
                        {
                            "name": "turret",
                            "description": "`Array` - turret on which periscope is located"
                        },
                        {
                            "name": "elevation",
                            "description": "`Number` - elevation range 0..1"
                        },
                        {
                            "name": "speed",
                            "description": "`Number` or `Boolean` - (Optional, default -1) config anim speed multiplier, 2 - twice as fast, 0.5 - twice as slow, etc. -1 - default config speed. If `true` is used as param, the change in elevation is almost instant"
                        },
                        {
                            "name": "blockUserInput",
                            "description": "`Boolean` - (Optional, default `false`) `true` to disable user ability to control periscope with keyboard. The change is persistent unless set to `false` again"
                        }
                    ],
                    "outline": "vehicle `elevatePeriscope` [turret, elevation, speed, blockUserInput]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/elevatePeriscope"
        },
        "configuration": {
            "label": "elevatePeriscope",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Executes `else` code when `if` condition returns `false`.",
            "examples": [
                {
                    "text": "```sqf\nif (a > b) then { c = 0 } else { c = 1 };\n```"
                },
                {
                    "text": "```sqf\n\nif (a < b) then {\n\thint \"B is greater than A\";\n} else {\n\thint \"A is greater than B\";\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "ifCode",
                            "description": "`Code`"
                        },
                        {
                            "name": "elseCode",
                            "description": "`Code`"
                        }
                    ],
                    "outline": "ifCode `else`  elseCode",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/else"
        },
        "configuration": {
            "label": "else",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "Returns the number of given empty positions in the vehicle.\n**NOTE**: To return the actual units in the vehicle use `fullCrew`. However if only the number is desired, use `emptyPositions` because it is faster.",
            "examples": [
                {
                    "text": "```sqf\n_freeCargoAndFFVPositions = vehicle player emptyPositions \"Cargo\";\n```"
                },
                {
                    "text": "```sqf\n_freeCargoOnlyPositions = vehicle player emptyPositions \"CargoNoFFV\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "position",
                            "description": "`String` - can be one of:\n{{Columns|2|\n* `**\"Commander\"**`\n* `**\"Driver\"**`\n* `**\"Gunner\"**`\n* `**\"Cargo\"**` - all cargo positions, FFV or not\n* {{GVI|arma3|2.10"
                        }
                    ],
                    "outline": "vehicle `emptyPositions` position",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/emptyPositions"
        },
        "configuration": {
            "label": "emptyPositions",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enables parts of the AI behavior that was disabled by `disableAI`. \n{{Feature|important|When player switches and leaves behind AI unit, you need to enable \"TeamSwitch\" AI on it <sqf inline>_unit enableAI \"TeamSwitch\"; so that the unit continues with `waypoints`.}}\n**Arma 3**: Since Arma 3 v1.96 it is possible to return the state of the given AI flag via `checkAIFeature` or set it using alias command `enableAIFeature`.",
            "examples": [
                {
                    "text": "```sqf\n_soldierOne enableAI \"Move\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "skilltype",
                            "description": "`String` - see `disableAI` for possible values."
                        }
                    ],
                    "outline": "unit `enableAI` skilltype",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/enableAI"
        },
        "configuration": {
            "label": "enableAI",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enables/disables given AI feature.",
            "examples": [
                {
                    "text": "```sqf\n\"AwareFormationSoft\" enableAIFeature true;\n```"
                },
                {
                    "text": "```sqf\nbob enableAIFeature [\"AUTOTARGET\", false];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "feature",
                            "description": "`String` - can be:\n* `**\"AwareFormationSoft\"**`\n* `**\"CombatFormationSoft\"**`"
                        },
                        {
                            "name": "enable",
                            "description": "`Boolean` - `true` to enable, `false` to disable"
                        }
                    ],
                    "outline": "feature `enableAIFeature`  enable",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit to test AI feature for"
                        },
                        {
                            "name": "feature",
                            "description": "`String` - see `disableAI` / `enableAI` for possible values"
                        },
                        {
                            "name": "enable",
                            "description": "`Boolean` - `true` to enable, `false` to disable"
                        }
                    ],
                    "outline": "unit `enableAIFeature` [feature, enable]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/enableAIFeature"
        },
        "configuration": {
            "label": "enableAIFeature",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set whether animation's aim precision affects weapon sway.",
            "examples": [
                {
                    "text": "```sqf\nplayer enableAimPrecision false;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "enable",
                            "description": "`Boolean` - `true` enable, `false`, disabled"
                        }
                    ],
                    "outline": "unit `enableAimPrecision` enable",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/enableAimPrecision"
        },
        "configuration": {
            "label": "enableAimPrecision",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set if leader can issue attack commands to the soldiers in his group.",
            "examples": [
                {
                    "text": "```sqf\n_group1 enableAttack true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Object` or `Group`"
                        },
                        {
                            "name": "enable",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "group `enableAttack` enable",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/enableAttack"
        },
        "configuration": {
            "label": "enableAttack",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get the state of **or** enable/disable an audio feature. Available features are `**\"lowpass\"**` and `**\"building_interior\"**`.\n* {{GVI|arma3|2.14",
            "examples": [
                {
                    "text": "```sqf\nprivate _prevState = enableAudioFeature [\"lowpass\", true];\n```"
                },
                {
                    "text": "```sqf\nprivate _prevState = pallet enableAudioFeature [\"building_interior\", true];\n```"
                },
                {
                    "text": "```sqf\n\nprivate _currState = pallet enableAudioFeature [\"building_interior\"];\nprivate _prevState = pallet enableAudioFeature [\"building_interior\", !_currState];\nhint str (_currState == _prevState); // true\n\nprivate _currState = pallet enableAudioFeature [\"building_interior\"];\nhint str (_currState == _prevState); // false\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "feature",
                            "description": "`String` - `**\"lowpass\"**` or `**\"building_interior\"**`"
                        },
                        {
                            "name": "enable",
                            "description": "`Boolean` - (Optional, getter if not provided) `true` enable, `false`, disable"
                        }
                    ],
                    "outline": "`enableAudioFeature` [feature, enable]",
                    "returns": "`Boolean` - previous state"
                },
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "feature",
                            "description": "`String` - `**\"building_interior\"**` or `**\"building_exterior\"**` only (mutually exclusive)"
                        },
                        {
                            "name": "enable",
                            "description": "`Boolean` - (Optional, getter if not provided) `true` enable, `false`, disable"
                        }
                    ],
                    "outline": "object `enableAudioFeature` [feature, enable]",
                    "returns": "`Boolean` - previous state"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/enableAudioFeature"
        },
        "configuration": {
            "label": "enableAudioFeature",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Toggle availability of the automated helicopter start-up and shutdown sequences.\n{{Feature|afm}}",
            "examples": [
                {
                    "text": "```sqf\nmyHelicopterRTD enableAutoStartUpRTD true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "helicopterRTD",
                            "description": "`ObjectRTD` - helicopter"
                        },
                        {
                            "name": "enable",
                            "description": "`Boolean` - enable or disable"
                        }
                    ],
                    "outline": "helicopterRTD `enableAutoStartUpRTD` enable",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/enableAutoStartUpRTD"
        },
        "configuration": {
            "label": "enableAutoStartUpRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Toggle auto-trim for RTD helicopters. \n{{Feature|afm}}",
            "examples": [
                {
                    "text": "```sqf\nmyHelicopterRTD enableAutoTrimRTD true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "helicopterRTD",
                            "description": "`ObjectRTD` - helicopter"
                        },
                        {
                            "name": "enable",
                            "description": "`Boolean` - enable or disable"
                        }
                    ],
                    "outline": "helicopterRTD `enableAutoTrimRTD` enable",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/enableAutoTrimRTD"
        },
        "configuration": {
            "label": "enableAutoTrimRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Allows camera shake effects via `addCamShake`. If set to `false`, then a currently active shake effect will stop immediately.\nBy default, shake effects are enabled, but once they have been disabled by this command, they will have to be enabled first, in order to be visible.",
            "examples": [
                {
                    "text": "```sqf\nenableCamShake false;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "value",
                            "description": "`Boolean` - if `true`, shake effects are visible"
                        }
                    ],
                    "outline": "`enableCamShake`  value",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/enableCamShake"
        },
        "configuration": {
            "label": "enableCamShake",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enable/disable caustics drawing.",
            "examples": [
                {
                    "text": "```sqf\nenableCaustics true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "bool",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "`enableCaustics` bool",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/enableCaustics"
        },
        "configuration": {
            "label": "enableCaustics",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enables/disables UI functionality which is responsible for sending text or voice chat to the given chat channel.\n**NOTE**: \nThis command:\n* can override [[Description.ext]] or [server config](https://community.bistudio.com/wiki/Arma%203%3A%20Server%20Config%20File)'s channel setting\n* cannot disable Global channel for the admin or server host, because Global channel is always available for the admin\n* does not disable _incoming_ text or voice\n* actively interrupts (since Arma 3 v2.02) the current communication in progress\n* does not affect chat related scripting commands such as `vehicleChat`, `globalRadio` etc.\n\n\n{{{!}} class=\"wikitable align-center\"\n! colspan=\"16\" {{!}} [Channel ID](https://community.bistudio.com/wiki/Channel%20IDs) number correspondence\n{{!}}-\n{{!}} colspan=\"6\" {{!}} Default Channels\n{{!}} colspan=\"10\" {{!}} Custom Channels\n{{!}}- style=\"font-size: .9em\"\n{{!}} Global\n{{!}} Side\n{{!}} Command\n{{!}} Group\n{{!}} Vehicle\n{{!}} Direct\n{{!}} CC&nbsp;1\n{{!}} CC&nbsp;2\n{{!}} CC&nbsp;3\n{{!}} CC&nbsp;4\n{{!}} CC&nbsp;5\n{{!}} CC&nbsp;6\n{{!}} CC&nbsp;7\n{{!}} CC&nbsp;8\n{{!}} CC&nbsp;9\n{{!}} CC&nbsp;10\n{{!}}-\n{{!}} 0\n{{!}} 1\n{{!}} 2\n{{!}} 3\n{{!}} 4\n{{!}} 5\n{{!}} 6\n{{!}} 7\n{{!}} 8\n{{!}} 9\n{{!}} 10\n{{!}} 11\n{{!}} 12\n{{!}} 13\n{{!}} 14\n{{!}} 15\n{{!}}}",
            "examples": [
                {
                    "text": "```sqf\n0 enableChannel false; // disable user ability to send voice and text on global channel\n```"
                },
                {
                    "text": "```sqf\n0 enableChannel [true, false]; // enable user ability to send text but disable voice on global channel\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "channelID",
                            "description": "`Number` - [channel ID](https://community.bistudio.com/wiki/Channel%20IDs)"
                        },
                        {
                            "name": "enable",
                            "description": "`Boolean` - `true` to enable, `false` to disable (both VoN and chat)"
                        }
                    ],
                    "outline": "channelID `enableChannel` enable",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "channelID",
                            "description": "`Number` - [channel ID](https://community.bistudio.com/wiki/Channel%20IDs)"
                        },
                        {
                            "name": "chat",
                            "description": "`Boolean` - `true` to enable text chat"
                        },
                        {
                            "name": "VoN",
                            "description": "`Boolean` - `true` to enable voice chat"
                        }
                    ],
                    "outline": "channelID `enableChannel` [chat, VoN]",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/enableChannel"
        },
        "configuration": {
            "label": "enableChannel",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Cancels the effects of `disableCollisionWith`. The collision is always enabled for both objects in the arguments, i.e. vehicle1 with vehicle2 and vehicle2 with vehicle1\n**WARNING**: Each object can contain only 1 reference to the object it disabled collision with. This command sets this reference to null. Therefore the command might not work as expected when trying to enable collisions with some objects but not other.",
            "examples": [
                {
                    "text": "```sqf\n[_veh1, _veh2] remoteExecCall [\"enableCollisionWith\", 0, _veh1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle1",
                            "description": "`Object`"
                        },
                        {
                            "name": "vehicle2",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "vehicle1 `enableCollisionWith` vehicle2",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/enableCollisionWith"
        },
        "configuration": {
            "label": "enableCollisionWith",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enables copilot actions, toggles availability of the actions related to copilots, such as taking over controls, suspending controls, etc. This command triggers the `**\"ControlsShifted\"**` event handler.",
            "examples": [
                {
                    "text": "```sqf\nif (!isCopilotEnabled myHeli) then\n{\n\tmyHeli enableCopilot true;\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - vehicle on which to toggle copilot actions"
                        },
                        {
                            "name": "enable",
                            "description": "`Boolean` - enable or disable"
                        }
                    ],
                    "outline": "vehicle `enableCopilot` enable",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/enableCopilot"
        },
        "configuration": {
            "label": "enableCopilot",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enable debriefing score table.",
            "examples": [
                {
                    "text": "```sqf\nenableDebriefingStats [0.1, 0.1, 0.8, 0.8];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "left",
                            "description": "`Number`"
                        },
                        {
                            "name": "top",
                            "description": "`Number`"
                        },
                        {
                            "name": "width",
                            "description": "`Number`"
                        },
                        {
                            "name": "height",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`enableDebriefingStats` [left, top, width, height]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/enableDebriefingStats"
        },
        "configuration": {
            "label": "enableDebriefingStats",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enable or disable the legend for diagnostics. **Internal dev only!**",
            "examples": [
                {
                    "text": "```sqf\nenableDiagLegend false;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "enable",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "`enableDiagLegend` enable",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/enableDiagLegend"
        },
        "configuration": {
            "label": "enableDiagLegend",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enables / disables direction stabilization of turrets. This command only has an effect if the current optic mode of the selected turret has `**directionStabilized**` configured in config.",
            "examples": [
                {
                    "text": "```sqf\nuav enableDirectionStabilization [false, [0]]; // Disable direction stabilization for the first turret\n```"
                },
                {
                    "text": "```sqf\nuav enableDirectionStabilization [true, [0]];\n```"
                },
                {
                    "text": "```sqf\nuav enableDirectionStabilization [false]; // Disable direction stabilization for the primary turret\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "enabled",
                            "description": "`Boolean` - enable or disable turret stabilization"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` format [Turret Path](https://community.bistudio.com/wiki/Turret%20Path)"
                        }
                    ],
                    "outline": "vehicle `enableDirectionStabilization` [enabled, turretPath]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/enableDirectionStabilization"
        },
        "configuration": {
            "label": "enableDirectionStabilization",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enables or disables [Arma 3: Dynamic Simulation](https://community.bistudio.com/wiki/Arma%203%3A%20Dynamic%20Simulation) for given non AI object.\n\n**NOTE**: This command has no effect on _mines_!",
            "examples": [
                {
                    "text": "```sqf\n_myObject enableDynamicSimulation true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` or `Group`"
                        },
                        {
                            "name": "enable",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "object `enableDynamicSimulation` enable",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/enableDynamicSimulation"
        },
        "configuration": {
            "label": "enableDynamicSimulation",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enables or disables the whole [Arma 3: Dynamic Simulation](https://community.bistudio.com/wiki/Arma%203%3A%20Dynamic%20Simulation) system",
            "examples": [
                {
                    "text": "```sqf\nenableDynamicSimulationSystem true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "enable",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "`enableDynamicSimulationSystem` enable",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/enableDynamicSimulationSystem"
        },
        "configuration": {
            "label": "enableDynamicSimulationSystem",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enables the execution of a custom camera sequence after the players death, coded in [[Event Scripts#onPlayerKilled.sqs|onPlayerKilled.sqs]].",
            "examples": [
                {
                    "text": "```sqf\nenableEndDialog;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`enableEndDialog`",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/enableEndDialog"
        },
        "configuration": {
            "label": "enableEndDialog",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enable/disable the artillery engine. This allows the user to use the artillery computer on mortar/artillery, and for AI to use it for indirect fire.",
            "examples": [
                {
                    "text": "```sqf\nenableEngineArtillery false;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "enabled",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "`enableEngineArtillery` enabled",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/enableEngineArtillery"
        },
        "configuration": {
            "label": "enableEngineArtillery",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enable/disable environmental effects: ambient life and/or ambient sound.\n\n{{Feature|informative|This command has to be executed after mission start: be sure to use e.g <sqf inline>sleep 0.1; for it to take effect.}}\nInfluenced sounds among others are:\n{{Columns|2|\n* bird sounds\n* insect sounds\n* waves\n* wind\n* rain\n* sounds produced by air conditioners and similar\n}}\n* {{GVI|arma3|2.06",
            "examples": [
                {
                    "text": "```sqf\nenableEnvironment false; // identical to enableEnvironment [false, false]\n```"
                },
                {
                    "text": "```sqf\n\nenableEnvironment [false, true];\nenableEnvironment [false, true, 0.5]; // since {{arma3}} v2.12\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "enable",
                            "description": "`Boolean` - `false` to disable ambient life and ambient sounds, `true` to re-enable it"
                        }
                    ],
                    "outline": "`enableEnvironment` enable",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "ambientLife",
                            "description": "`Boolean` - enable/disable ambient life (bees, rabbits, birds, snakes, fish)"
                        },
                        {
                            "name": "ambientSound",
                            "description": "`Boolean` - enable/disable ambient sounds (cicadas, owls, etc)"
                        },
                        {
                            "name": "windyCoef",
                            "description": "`Number` - (Optional, default 1) howling wind at heights, range 0..1"
                        }
                    ],
                    "outline": "`enableEnvironment` [ambientLife, ambientSound, windyCoef]",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/enableEnvironment"
        },
        "configuration": {
            "label": "enableEnvironment",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enables/Disables the person's fatigue.",
            "examples": [
                {
                    "text": "```sqf\nplayer enableFatigue false;\n```"
                },
                {
                    "text": "```sqf\n{ _x enableFatigue false; } forEach (units group player);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "enable",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "unit `enableFatigue` enable",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/enableFatigue"
        },
        "configuration": {
            "label": "enableFatigue",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Controls availability of component to given object info panel.",
            "examples": [
                {
                    "text": "```sqf\n\n// enables slingload assistant on player's vehicle right panel at driver position\n[vehicle player, [-1]] enableInfoPanelComponent [\"VehicleSystemsDisplayManagerComponentRight\", \"SlingLoadDisplay\", true];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - the concerned vehicle"
                        },
                        {
                            "name": "panelID",
                            "description": "`String` - \"left\" or \"right\" can be used as panel names"
                        },
                        {
                            "name": "componentClassOrType",
                            "description": "`String`"
                        },
                        {
                            "name": "enable",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "unit `enableInfoPanelComponent` [panelID, componentClassOrType, enable]",
                    "returns": "`Boolean` - `true` if component was successfully enabled on the panel, `false` otherwise (e.g. component is not available for the object)"
                },
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - the concerned vehicle"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` - turret index"
                        },
                        {
                            "name": "panelID",
                            "description": "`String` - \"left\" or \"right\" can be used as panel names"
                        },
                        {
                            "name": "componentClassOrType",
                            "description": "`String`"
                        },
                        {
                            "name": "enable",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "[unit, turretPath] `enableInfoPanelComponent` [panelID, componentClassOrType, enable]",
                    "returns": "`Boolean` - `true` if component was successfully enabled on the panel, `false` otherwise (e.g. component is not available for the object)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/enableInfoPanelComponent"
        },
        "configuration": {
            "label": "enableInfoPanelComponent",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Allows the AI to use IR lasers. Units should be in \"Combat\" `behaviour`.",
            "examples": [
                {
                    "text": "```sqf\ngroup player enableIRLasers true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitOrGroup",
                            "description": "`Object` or `Group` - the unit or the group allowed to use IR lasers"
                        },
                        {
                            "name": "value",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "unitOrGroup `enableIRLasers` value",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/enableIRLasers"
        },
        "configuration": {
            "label": "enableIRLasers",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enables/disables mimics on a given unit.",
            "examples": [
                {
                    "text": "```sqf\ncursorTarget enableMimics false;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "enabled",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "unit `enableMimics` enabled",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/enableMimics"
        },
        "configuration": {
            "label": "enableMimics",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enables or disables firing from a vehicle cargo position. To get the turret path use `assignedVehicleRole` or `getCargoIndex` command.",
            "examples": [
                {
                    "text": "```sqf\nheli enablePersonTurret [[1], true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` format [Turret Path](https://community.bistudio.com/wiki/Turret%20Path)"
                        },
                        {
                            "name": "enable",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "vehicle `enablePersonTurret` [turretPath, enable]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/enablePersonTurret"
        },
        "configuration": {
            "label": "enablePersonTurret",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enable and disable radio messages to be heard and shown in the left lower corner of the screen - the order-giving unit can still be heard direct-talking when in its vicinity. The AI will still follow orders.\nThis command can be helpful during cutscenes.",
            "examples": [
                {
                    "text": "```sqf\n\nenableRadio false;\nclearRadio;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "state",
                            "description": "`Boolean` - true to enable the radio, false to disable it"
                        }
                    ],
                    "outline": "`enableRadio` state",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/enableRadio"
        },
        "configuration": {
            "label": "enableRadio",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enable / disable reload when magazine is empty.",
            "examples": [
                {
                    "text": "```sqf\n_vehicle enableReload false;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "enable",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "object `enableReload` enable",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/enableReload"
        },
        "configuration": {
            "label": "enableReload",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enables or disables the ability to be attached to a rope end for the given entity.",
            "examples": [
                {
                    "text": "```sqf\nvehicle player enableRopeAttach false;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "`Object` - given entity"
                        },
                        {
                            "name": "enable",
                            "description": "`Boolean` - `false` to disable rope attachment"
                        }
                    ],
                    "outline": "entity `enableRopeAttach` enable",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/enableRopeAttach"
        },
        "configuration": {
            "label": "enableRopeAttach",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enables/Disables satellite normal map or detail maps.",
            "examples": [
                {
                    "text": "```sqf\nenableSatNormalOnDetail true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "state",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "`enableSatNormalOnDetail` state",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/enableSatNormalOnDetail"
        },
        "configuration": {
            "label": "enableSatNormalOnDetail",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enable / disable saving of the game with an optional autosave.",
            "examples": [
                {
                    "text": "```sqf\n\nenableSaving false;\t\t// saving disabled, does autosave - same as [false, true]\nenableSaving true;\t\t// saving enabled, does not autosave - same as [true, false]\n\nenableSaving [false, false];\t// saving disabled, does not autosave\nenableSaving [false, true];\t\t// saving disabled, does autosave\nenableSaving [true, false];\t\t// saving enabled, doesn't autosave\nenableSaving [true, true];\t\t// saving enabled, does autosave\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "enable",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "`enableSaving` enable",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "enable",
                            "description": "`Boolean` - allow `saveGame` command usage and manual saving"
                        },
                        {
                            "name": "save",
                            "description": "`Boolean` - create an autosave on command execution"
                        }
                    ],
                    "outline": "`enableSaving` [enable, save]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/enableSaving"
        },
        "configuration": {
            "label": "enableSaving",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enables radio transmissions to be heard and seen on screen. It does not affect KBTell conversations.",
            "examples": [
                {
                    "text": "```sqf\nenableSentences false;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "enable",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "`enableSentences` enable",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/enableSentences"
        },
        "configuration": {
            "label": "enableSentences",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enables / disables simulation for the given entity, e.g its animation and physics; it will still be able to take damage and report enemies.\nThis command will affect entity simulation only [locally](https://community.bistudio.com/wiki/local).\nFor a global and JIP enabled alternative, see `enableSimulationGlobal`.",
            "examples": [
                {
                    "text": "```sqf\nplayer enableSimulation false;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "`Object`"
                        },
                        {
                            "name": "state",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "entity `enableSimulation` state",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/enableSimulation"
        },
        "configuration": {
            "label": "enableSimulation",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enable or disable simulation for given entity, globally. Has the same effect as `enableSimulation` when used in singleplayer.",
            "examples": [
                {
                    "text": "```sqf\n_myObject enableSimulationGlobal false;\n```"
                },
                {
                    "text": "```sqf\n[_object, false] remoteExec [\"enableSimulationGlobal\", 2];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "`Object`"
                        },
                        {
                            "name": "enable",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "entity `enableSimulationGlobal` enable",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/enableSimulationGlobal"
        },
        "configuration": {
            "label": "enableSimulationGlobal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enable/disable stamina system",
            "examples": [
                {
                    "text": "```sqf\nplayer enableStamina true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "enabled",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "unit `enableStamina` enabled",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/enableStamina"
        },
        "configuration": {
            "label": "enableStamina",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Toggles stress damage in [[Description.ext#forceRotorLibSimulation | Advanced Flight Model]], which otherwise could be manually toggles in game setting: `**Options &gt; Game &gt; Helicopter Flight Model &gt; Advanced &gt; Stress Damage**`.\n{{Feature|afm}}",
            "examples": [
                {
                    "text": "```sqf\nif (difficultyEnabledRTD) then { enableStressDamage true };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "state",
                            "description": "`Boolean` - `true` to enable stress damage, `false` to disable it"
                        }
                    ],
                    "outline": "`enableStressDamage` state",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/enableStressDamage"
        },
        "configuration": {
            "label": "enableStressDamage",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enable / disable [Team Switch](https://community.bistudio.com/wiki/Team%20Switch). The default setting is enabled.",
            "examples": [
                {
                    "text": "```sqf\nenableTeamSwitch true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "enable",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "`enableTeamSwitch` enable",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/enableTeamSwitch"
        },
        "configuration": {
            "label": "enableTeamSwitch",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enable ambient traffic. **Arma 3**: This command does nothing in Arma 3.",
            "examples": [
                {
                    "text": "```sqf\nenableTraffic true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "enable",
                            "description": "`Boolean` - enable or disable"
                        }
                    ],
                    "outline": "`enableTraffic` enable",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/enableTraffic"
        },
        "configuration": {
            "label": "enableTraffic",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enables unit's AV terminal(s) connecting to UAV.",
            "examples": [
                {
                    "text": "```sqf\nunit enableUAVConnectability [uav, true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "uav",
                            "description": "`Object`"
                        },
                        {
                            "name": "checkAllItems",
                            "description": "`Boolean` - true for enabling of all terminals in unit's inventory, false for enabling of terminal assigned to proper slot only."
                        }
                    ],
                    "outline": "object `enableUAVConnectability` [uav, checkAllItems]",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/enableUAVConnectability"
        },
        "configuration": {
            "label": "enableUAVConnectability",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enables/disables the option for player to set waypoints for UAV in AV terminal.",
            "examples": [
                {
                    "text": "```sqf\n_uav enableUAVWaypoints false;\nhint str waypointsEnabledUAV _uav; // returns false\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "uav",
                            "description": "`Object`"
                        },
                        {
                            "name": "enable",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "uav `enableUAVWaypoints` enable",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/enableUAVWaypoints"
        },
        "configuration": {
            "label": "enableUAVWaypoints",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enable/disable option to transport other vehicles (if configured) or be transported.",
            "examples": [
                {
                    "text": "```sqf\nvehicle enableVehicleCargo true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "enable",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "vehicle `enableVehicleCargo` enable",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/enableVehicleCargo"
        },
        "configuration": {
            "label": "enableVehicleCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enable/disable given sensor",
            "examples": [
                {
                    "text": "```sqf\nvehicle player enableVehicleSensor [\"PassiveRadarSensorComponent\", false]; // disables passive radar\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "componentName ",
                            "description": "`String` - the component's name (can either be its \"real name\" or its className)"
                        },
                        {
                            "name": "enabled",
                            "description": "`Boolean` - component status"
                        }
                    ],
                    "outline": "vehicle `enableVehicleSensor` [componentName, enabled]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/enableVehicleSensor"
        },
        "configuration": {
            "label": "enableVehicleSensor",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enables or disables disassembly of static weapons. Could be applied to local `player`, to another unit or to static weapon directly.",
            "examples": [
                {
                    "text": "```sqf\nenableWeaponDisassembly false;\n```"
                },
                {
                    "text": "```sqf\nsoldier1 enableWeaponDisassembly false;\n```"
                },
                {
                    "text": "```sqf\nmortar1 enableWeaponDisassembly false;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "enable",
                            "description": "`Boolean` - `false` to prevent local `player` from being able to disassemble static weapons"
                        }
                    ],
                    "outline": "`enableWeaponDisassembly` enable",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "`Object` - unit or static weapon"
                        },
                        {
                            "name": "enable",
                            "description": "`Boolean`  - `false` to prevent a unit from being able to disassemble static weapons, or to prevent a static weapon from being disassembled by anyone"
                        }
                    ],
                    "outline": "entity `enableWeaponDisassembly`  enable",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/enableWeaponDisassembly"
        },
        "configuration": {
            "label": "enableWeaponDisassembly",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates a string containing a line break, similar to `lineBreak` for `text`. The name is inspired by c++ std::endl (**end** **l**ine).\nThe command returns `**\"\\r\\n\"**`, which contains control characters rather than printable characters:\n\n```sqf\n\nhint str count \"\\r\\n\";\t// 4\nhint str count endl;\t// 2\n\n```\n\nThe line break works for `diag_log` and `ctrlSetText`.\nIt does not work with the `hint` because `hint` interprets printable \"\\n\" as line break instead.\nAlternatively one can use `toString` command to get other characters.",
            "examples": [
                {
                    "text": "```sqf\ndiag_log (\"line1\" + endl + \"line2\");\n```"
                },
                {
                    "text": "```sqf\n\n_ctrl = findDisplay 46 ctrlCreate [\"RscTextMulti\", -1];\n_ctrl ctrlSetPosition [0,0,1,1];\n_ctrl ctrlCommit 0;\n_ctrl ctrlSetText format [\"line1%1line2%1line3\", endl];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`endl`",
                    "returns": "`String` - line break"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/endl"
        },
        "configuration": {
            "label": "endl",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Finishes loading screen started by `startLoadingScreen`.\n\n**Arma 3**: Use `BIS_fnc_endLoadingScreen` to prevent potential usage conflicts.",
            "examples": [
                {
                    "text": "```sqf\n\nstartLoadingScreen [\"Loading My Mission\"];\n// code\nprogressLoadingScreen 0.5;\n// code\nendLoadingScreen;\n\n```"
                },
                {
                    "text": "```sqf\n\n// this structure prevents error-prone or lengthy code to miss endLoadingScreen.\nprivate _maxTime = diag_tickTime + 30; // max 30s of loading\n\nstartLoadingScreen [\"Loading\"];\nprivate _handle = [] spawn {\n\t// code that may crash or take too long\n};\n\nwaitUntil { sleep .01; scriptDone _handle || diag_tickTime > _maxTime };\nendLoadingScreen;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`endLoadingScreen`",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/endLoadingScreen"
        },
        "configuration": {
            "label": "endLoadingScreen",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Finish the mission.\n**Mission saves are deleted**. Use `failMission` if they should not be.\n**Arma 3**: To maintain Arma 3 visual style, it is recommended to use `BIS_fnc_endMission` instead.",
            "examples": [
                {
                    "text": "```sqf\nendMission \"END1\";\n```"
                },
                {
                    "text": "```sqf\n[\"END1\"] remoteExec [\"endMission\", 0, true]; // Arma 3\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "endType",
                            "description": "`String` - can be a custom one {{GVI|arma3|1.00"
                        }
                    ],
                    "outline": "`endMission` endType",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/endMission"
        },
        "configuration": {
            "label": "endMission",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Activates and deactivates the engine of a vehicle.",
            "examples": [
                {
                    "text": "```sqf\nif (!isEngineOn _jeep) then { _jeep engineOn true; };\n```"
                },
                {
                    "text": "```sqf\n\nwaitUntil { player == driver _jeep; };\nvehicle player engineOn true;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "state",
                            "description": "`Boolean` - `true` to turn the engine on, `false` to turn it off"
                        }
                    ],
                    "outline": "vehicle `engineOn` state",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/engineOn"
        },
        "configuration": {
            "label": "engineOn",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns which engines are producing some work.\n{{Feature|afm}}",
            "examples": [
                {
                    "text": "```sqf\n_enginesTaru = enginesIsOnRTD _taru; // returns [true, true]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "RTD_helicopter",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`enginesIsOnRTD` RTD_helicopter",
                    "returns": "`Array` of `Boolean`s - value for each engine"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/enginesIsOnRTD"
        },
        "configuration": {
            "label": "enginesIsOnRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns power produced by engines in Watts.\n{{Feature|afm}}",
            "examples": [
                {
                    "text": "```sqf\n_array = enginesPowerRTD vehicle player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "RTD_helicopter",
                            "description": "`Object` - helicopter with advanced flight model enabled"
                        }
                    ],
                    "outline": "`enginesPowerRTD` RTD_helicopter",
                    "returns": "`Array` of `Number`s - watts produced by the engines, to format [engine1, engine2]. Returns an empty array if [Advanced Flight Model](https://community.bistudio.com/wiki/Advanced_Helicopter_Flight_Model_in_Arma3) is disabled."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/enginesPowerRTD"
        },
        "configuration": {
            "label": "enginesPowerRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns all engines RPM.{{Feature|afm}}",
            "examples": [
                {
                    "text": "```sqf\nenginesRpmRTD RTD_helicopter params [\"_RPMEngine1\",\"_RPMEngine2\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "RTD_helicopter",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`enginesRpmRTD` RTD_helicopter",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/enginesRpmRTD"
        },
        "configuration": {
            "label": "enginesRpmRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Torque produced by engines in **N·m** (Newton &times; meter).\n{{Feature|afm}}",
            "examples": [
                {
                    "text": "```sqf\n_UH80_E1 = (enginesTorqueRTD _UH80) select 0; // engine 1 Torque\n_UH80_E2 = (enginesTorqueRTD _UH80) select 1; // engine 2 Torque\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "RTD_helicopter",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`enginesTorqueRTD` RTD_helicopter",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/enginesTorqueRTD"
        },
        "configuration": {
            "label": "enginesTorqueRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a list of all alive and dead entities of the given type or deriving from the given type. Units in vehicles are ignored with the primary syntax.\n**NOTE**: **Optimisation tip**: Keep number of types in both _includeTypes_ and _excludeTypes_ arrays to a minimum by possibly using parent/base classes.\nIf you have to use several types, arrange them in order so that the more common types go at the beginning of the array.",
            "examples": [
                {
                    "text": "```sqf\n_allCars = entities \"Car\";\n```"
                },
                {
                    "text": "Return all alive entities on the map:\n\n```sqf\n_allAlive = entities [[], [], true, true];\n```"
                },
                {
                    "text": "Return dead and alive entities but logic:\n\n```sqf\n_notLogic = entities [[], [\"Logic\"], true];\n```"
                },
                {
                    "text": "Return all alive `west` soldiers on foot:\n\n```sqf\n_footSoldiers = entities [[\"SoldierWB\"], [], false, true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`String` - if an empty string `**\"\"**` is provided, all entities are returned"
                        }
                    ],
                    "outline": "`entities` type",
                    "returns": "`Array`"
                },
                {
                    "parameters": [
                        {
                            "name": "typesInclude",
                            "description": "`Array` - in format [type1, type2, ...typeN], where type is a `String`. Empty array [] means include every entity. Method used for filtering - `isKindOf`"
                        },
                        {
                            "name": "typesExclude",
                            "description": "`Array` - in format [type1, type2, ...typeN], where type is a `String`. Empty array [] means exclude no entity. Method used for filtering - `isKindOf`"
                        },
                        {
                            "name": "includeCrews",
                            "description": "`Boolean` - (Optional, default `false`) include crews currently in vehicles"
                        },
                        {
                            "name": "excludeDead",
                            "description": "`Boolean` - (Optional, default `false`) exclude dead entities"
                        }
                    ],
                    "outline": "`entities` [typesInclude, typesExclude, includeCrews, excludeDead]",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/entities"
        },
        "configuration": {
            "label": "entities",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns status of `enableEnvironment` command",
            "examples": [
                {
                    "text": "```sqf\nprivate _enabled = environmentEnabled;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`environmentEnabled`",
                    "returns": "`Array` in format [ambientLife, ambientSound, windyCoef] where:\n* ambientLife: `Boolean` \n* ambientSound: `Boolean`\n* {{GVI|arma3|2.12"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/environmentEnabled"
        },
        "configuration": {
            "label": "environmentEnabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the current environment volume (set by `fadeEnvironment`)",
            "examples": [
                {
                    "text": "```sqf\nhint str environmentVolume;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`environmentVolume`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/environmentVolume"
        },
        "configuration": {
            "label": "environmentVolume",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns current state for NVG and TI equipment availability.",
            "examples": [
                {
                    "text": "```sqf\nequipmentDisabled tank1 params [\"_nvg\", \"_ti\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`equipmentDisabled` vehicle",
                    "returns": "`Array` in format [NVG, TI]"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/equipmentDisabled"
        },
        "configuration": {
            "label": "equipmentDisabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Estimated end of MP game in seconds converted to `serverTime`.",
            "examples": [
                {
                    "text": "Estimated minutes left: \n\n```sqf\n_min = (ceil (estimatedEndServerTime - serverTime) / 60);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**estimatedEndServerTime**",
                    "returns": "`Number` - seconds left"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/estimatedEndServerTime"
        },
        "configuration": {
            "label": "estimatedEndServerTime",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the estimated time left in the game that is shown in the \"Game in progress\" screen or in the master browser.\n**NOTE**: This command will force the server to broadcast `serverTime` to all clients without waiting for the next broadcast window (usually every 5 minutes).",
            "examples": [
                {
                    "text": "```sqf\nestimatedTimeLeft 600; // 10 min\n```"
                },
                {
                    "text": "**Operation Flashpoint:** for missions with a hard set limit adjusted _via_ {{Link|Description.ext#param1/param2|param1}}, the following example can be used in the [[Event Scripts#init.sqs|init.sqs]] file:\n<sqs>estimatedTimeLeft param1</sqs>"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "seconds",
                            "description": "`Number` - estimated time in seconds. Maximum value:\n* Prior to Arma 3 v1.70: 7200 seconds (2 hours)\n* Since Arma 3 v1.70: 36000 (10 hours)"
                        }
                    ],
                    "outline": "`estimatedTimeLeft` seconds",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Global Effect",
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/estimatedTimeLeft"
        },
        "configuration": {
            "label": "estimatedTimeLeft",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return argument in mission editor of a given object. \n**NOTE**: Some Old Editor Command",
            "examples": [
                {
                    "text": "```sqf\n\n// returns string \"[1009.0351, 1319.4928]\"\n(findDisplay 128 displayCtrl 51) getObjectArgument [\"_unit_1\", \"POSITION\"]\n\n// returns array [1009.0351, 1319.4928]\n(findDisplay 128 displayCtrl 51) evalObjectArgument [\"_unit_1\", \"POSITION\"]\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "[object, argument]",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "map `evalObjectArgument` [object, argument]",
                    "returns": "`Anything`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/evalObjectArgument"
        },
        "configuration": {
            "label": "evalObjectArgument",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array of backpacks stored in given crate or vehicle. Used for accessing backpack content of a backpack on ground.",
            "examples": [
                {
                    "text": "```sqf\neveryBackpack cursorTarget;\n```"
                },
                {
                    "text": "```sqf\n_vehicleBackpacks = everyBackpack vehicle player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "box",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`everyBackpack` box",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/everyBackpack"
        },
        "configuration": {
            "label": "everyBackpack",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array of all containers (uniforms, vests, backpacks) stored in given crate or vehicle. Used for accessing containers content stored in ammo box or ground holder.",
            "examples": [
                {
                    "text": "```sqf\n\neveryContainer cursorTarget;\n/*\n\treturns e.g\n\t[\n\t\t[\"V_PlateCarrier1_rgr\",2bc06b00# 163955: dummyweapon.p3d],\n\t\t[\"U_B_CombatUniform_mcam\",2bc07900# 163954: dummyweapon.p3d]\n\t]\n*/\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - vehicle or ammo box"
                        }
                    ],
                    "outline": "`everyContainer` object",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/everyContainer"
        },
        "configuration": {
            "label": "everyContainer",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Execute a script using (the deprecated but still available) [SQS Syntax](https://community.bistudio.com/wiki/SQS%20Syntax). [SQF Syntax](https://community.bistudio.com/wiki/SQF%20Syntax) (and `execVM`) is the most recent scripting language.\n\nThe magic variable [_time](https://community.bistudio.com/wiki/Magic_Variables%23time) used within the script contains the elapsed time in seconds since the script started.\n**NOTE**: To see the active SQS scripts currently in the scheduler, use `diag_activeSQSScripts` command.",
            "examples": [
                {
                    "text": "<sqs>[player, _jeep] exec \"getin.sqs\";</sqs>"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "argument",
                            "description": "`Anything` - the argument passed to the script through the [_this](https://community.bistudio.com/wiki/Magic_Variables%23this) variable. To pass multiple arguments, use an `Array`."
                        },
                        {
                            "name": "script",
                            "description": "`String` - the file path to the script. It should be given relatively to the mission folder, campaign scripts subfolder or global scripts folder and is searched there in the same order.\nIf you refer to a script packed together with an addon, the path should look like this: \"\\ADDON_PBO_NAME\\script.sqs\" where ADDON_PBO_NAME is the name of the addon's `PBO` file without extension."
                        }
                    ],
                    "outline": "argument `exec` script",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/exec"
        },
        "configuration": {
            "label": "exec",
            "grammarType": "file-executor"
        }
    },
    {
        "documentation": {
            "description": "Execute an editor script for the specified object.\n**NOTE**: Some Old Editor Command",
            "examples": [
                {
                    "text": "```sqf\n_map execEditorScript [\"_team_1\",\"create\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "[object,script]",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "map `execEditorScript` [object,script]",
                    "returns": "`Anything`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/execEditorScript"
        },
        "configuration": {
            "label": "execEditorScript",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Execute scripted `FSM` and return the FSM handle or 0 when failed. The FSM file is first searched in the mission folder, then in the campaign scripts folder and finally in the global scripts folder. Argument (if any) are available in `**_this**` variable inside FSM. Variables set inside FSMs can be read/modified externally, using `setFSMVariable` and `getFSMVariable` commands.\n\n\n\nThe return value is the FSM handle; it can be used to determine (via `completedFSM`) when the FSM has finished.\n**Arma 3**: In Arma 3, the FSM handle is also available within the FSM through the `**_thisFSM**` variable.}}\n\n\nScripted FSMs are added into the scheduler just like `exec` scripts, `execVM` scripts and `spawn` scripts.\n\nTo see what FSMs are currently in the scheduler, use `diag_activeMissionFSMs` command.\n{{Feature|important|While the code placed into any of the sections of FSM cannot be suspended (`canSuspend` is false), the FSM itself is suspended every simulation between the state's `**init**` and `**precondition**` (exception is the **init state**). This is the only place where scripted FSM is suspended/resumed.\nThe usual difference between the state's `**init**` and `**precondition**` is 1 frame but if the scheduler is busy it can take longer. See `FSM` for more information about FSM's structure.",
            "examples": [
                {
                    "text": "```sqf\n_id = player execFSM \"test.fsm\";\n```"
                },
                {
                    "text": "```sqf\n_handle = [_a, _b, _c] execFSM \"test.fsm\";\n```"
                },
                {
                    "text": "```sqf\n_handle = execFSM \"test.fsm\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "arguments",
                            "description": "`Anything` - arguments accessible as `**_this**` in the FSM"
                        },
                        {
                            "name": "fsmFilePath",
                            "description": "`String` - file with FSM code"
                        }
                    ],
                    "outline": "arguments `execFSM` fsmFilePath",
                    "returns": "`Number` - FSM handle (also available as `**_thisFSM**` in the FSM)"
                },
                {
                    "parameters": [
                        {
                            "name": "fsmFilePath",
                            "description": "`String` - file with FSM code"
                        }
                    ],
                    "outline": "`execFSM` fsmFilePath",
                    "returns": "`Number` - FSM handle (also available as `**_thisFSM**` in the FSM)"
                },
                {
                    "parameters": [
                        {
                            "name": "arguments",
                            "description": "`Anything` - arguments accessible as `**_this**` in the FSM"
                        },
                        {
                            "name": "fsmFilePath",
                            "description": "`String` - file with FSM code"
                        },
                        {
                            "name": "allowTermination",
                            "description": "`Boolean` - `true` to allow FSM termination with `terminate` command. Optional, default `false`"
                        }
                    ],
                    "outline": "arguments `execFSM` [fsmFilePath, allowTermination]",
                    "returns": "`Number` - FSM handle (also available as `**_thisFSM**` in the FSM)"
                },
                {
                    "parameters": [
                        {
                            "name": "fsmFilePath",
                            "description": "`String` - file with FSM code"
                        },
                        {
                            "name": "allowTermination",
                            "description": "`Boolean` - `true` to allow FSM termination with `terminate` command. Optional, default `false`"
                        }
                    ],
                    "outline": "`execFSM` [fsmFilePath, allowTermination]",
                    "returns": "`Number` - FSM handle (also available as `**_thisFSM**` in the FSM)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/execFSM"
        },
        "configuration": {
            "label": "execFSM",
            "grammarType": "file-executor"
        }
    },
    {
        "documentation": {
            "description": "Compiles and adds an [SQF](https://community.bistudio.com/wiki/SQF%20Syntax) [script](https://community.bistudio.com/wiki/Script%20Handle) to the [scheduler](https://community.bistudio.com/wiki/Scheduler) queue and returns script handle (see also _Example 4_).\nThe script does not execute immediately upon running `execVM` command but with some delay depending on the VM's scripts queue and engine load.\n\n{{Feature|informative|\n* If the same script is to be executed more than one time, declaring it as a [Function](https://community.bistudio.com/wiki/Arma%203%3A%20Functions%20Library) is recommended to avoid recompiling and wasting performance with every execution.\n* The script is searched for in the following directories in that order:\n** mission directory\n** campaign scripts directory\n** global scripts directory.\n* To see what VM scripts are currently in the scheduler, use `diag_activeSQFScripts` command.\n}}\n\n**IMPORTANT**: \n* The `**.sqf**` file extension is not mandatory but is strongly recommended as using non-standard extensions may cause problems during binarisation\n* If the script file is not prepared using UTF-8 encoding and contains some characters [with codes](https://community.bistudio.com/wiki/toArray) > 127, they might convert incorrectly.",
            "examples": [
                {
                    "text": "```sqf\nexecVM \"test.sqf\";\n```"
                },
                {
                    "text": "```sqf\n\n_handle = player execVM \"test.sqf\";\nwaitUntil { scriptDone _handle };\n\n```\n\nThe following is also possible in Arma 3:\n\n```sqf\n\nprivate _handle = execVM \"123.sqf\";\nwaitUntil { isNull _handle };\n\n```"
                },
                {
                    "text": "```sqf\n[player, 0.75] execVM \"setDamage.sqf\";\n```\n\nsetDamage.sqf:\n\n```sqf\n\nparams [\"_unit\", \"_damage\"];\n_unit setDamage _damage;\n\n```"
                },
                {
                    "text": "`execVM` equivalence:\n\n```sqf\n\nprivate _handle = _args execVM \"someFile.sqf\";\n// is practically identical to\nprivate _handle = _args spawn compile preprocessFileLineNumbers \"someFile.sqf\";\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "arguments",
                            "description": "`Anything` - arguments accessible as `**[_this](https://community.bistudio.com/wiki/Magic%20Variables%23this)**` in the script"
                        },
                        {
                            "name": "filename",
                            "description": "`String` - path to the [SQF](https://community.bistudio.com/wiki/SQF%20Syntax) script file"
                        }
                    ],
                    "outline": "arguments `execVM` filename",
                    "returns": "[Script Handle](https://community.bistudio.com/wiki/Script%20Handle)"
                },
                {
                    "parameters": [
                        {
                            "name": "filename",
                            "description": "`String` - path to the [SQF](https://community.bistudio.com/wiki/SQF%20Syntax) script file"
                        }
                    ],
                    "outline": "`execVM` filename",
                    "returns": "[Script Handle](https://community.bistudio.com/wiki/Script%20Handle)"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/execVM"
        },
        "configuration": {
            "label": "execVM",
            "grammarType": "file-executor"
        }
    },
    {
        "documentation": {
            "description": "Stops the execution of a [SQS script](https://community.bistudio.com/wiki/SQS%20Syntax).\n\nIt is ignored in [SQF Scripts](https://community.bistudio.com/wiki/SQF%20Syntax).",
            "examples": [
                {
                    "text": "[SQS Syntax](https://community.bistudio.com/wiki/SQS%20Syntax):\n<sqs>? not alive player : exit</sqs>"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`exit`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/exit"
        },
        "configuration": {
            "label": "exit",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "Exits the **current** code scope. Often used for exiting `do`, `for`, `count`, `forEach` or the whole script.\n**NOTE**: See [Variables - Local Variables Scope](https://community.bistudio.com/wiki/Variables#Local_Variables_Scope) for more information.",
            "examples": [
                {
                    "text": "```sqf\nsystemChat \"start\";\nprivate _condition = true;\n\nif (_condition) then\n{\n\tif (true) exitWith\n\t{\n\t\tsystemChat \"exiting if _condition scope\";\n\t};\n\tsystemChat \"never shown\";\n};\n\nsystemChat \"exiting #1 worked\";\n\nif (true) exitWith\n{\n\tsystemChat \"exiting the main scope = leaving the whole script\";\n};\n\nsystemChat \"never shown - the script has already ended\";\n```"
                },
                {
                    "text": "```sqf\nfor \"_j\" from 1 to 10 do\n{\n\tsystemChat format [\"%1\", _j];\n\n\t// the for loop will cease and code execution will continue after the end of the loop\n\tif (_j == 5) exitWith\n\t{\n\t\tsystemChat \"5 is enough\";\n\t};\n};\nsystemChat \"Complete\";\n```"
                },
                {
                    "text": "Most loops will also terminate when their scope is exited. To exit and terminate scopes which are called every frame such as `onEachFrame` and `waitUntil` use the following examples:\n\n\n```sqf\nonEachFrame {\n\tif (!alive player) exitWith\n\t{\n\t\tonEachFrame {};\n\t};\n};\n```\n\n\n\n```sqf\n_time = time + 10;\nwaitUntil \n{\n\tif (time > _time) exitWith { true };\n\tfalse\n};\n```"
                },
                {
                    "text": "```sqf\nwhile { true } do\n{\n\tif (alive player) then\n\t{\n\t\tif (time > 300) exitWith // [wrong] - it will only leave the \"if alive player\" scope, remaining in the \"while true\" loop forever\n\t\t{\n\t\t\thint \"exiting\";\n\t\t};\n\t};\n};\n```"
                },
                {
                    "text": "```sqf\nif (_condition) exitWith\n{\n\thint \"reached\";\n};\n// else { hint \"not reached\" }; // [wrong] - using else does not work and makes no sense here\n```\n\n\n```sqf\nif (_condition) exitWith\n{\n\thint \"reached\";\n};\nhint \"not reached\"; // [correct] - if _condition is met, the scope has already been exited by now\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "ifType",
                            "description": "[If Type](https://community.bistudio.com/wiki/If%20Type)"
                        },
                        {
                            "name": "code",
                            "description": "`Code`"
                        }
                    ],
                    "outline": "ifType `exitWith` code",
                    "returns": "`Anything`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/exitWith"
        },
        "configuration": {
            "label": "exitWith",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "Exponential function with the base {{Link|https://en.wikipedia.org/wiki/E_(mathematical_constant)|e}}. Equal to `**e^x**`. [[File:A3 expx.jpg|thumb|See how green and blue are identical except for the offset]]",
            "examples": [
                {
                    "text": "```sqf\n_e = exp 1; // Returns e (2.7182...)\n```"
                },
                {
                    "text": "```sqf\nln exp 1; // Returns 1\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "x",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`exp` x",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/exp"
        },
        "configuration": {
            "label": "exp",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return expected destination of unit as an array.",
            "examples": [
                {
                    "text": "```sqf\n_data = expectedDestination player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "person",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`expectedDestination` person",
                    "returns": "`Array` in format [destination, planningMode, forceReplan] where:\n* destination: `Array` format `PositionAGL`\n* planningMode: `String` - can be one of:\n** \"DoNotPlan\" - used when not moving\n** \"DoNotPlanFormation\" - used in formation when simple path testing is used\n** \"LEADER PLANNED\" - used for formation leader (full path finding used)\n** \"LEADER DIRECT\" - used for DirectGo (like getin, supply)\n** \"FORMATION PLANNED\" - used in formation when full path finding is used\n** \"VEHICLE PLANNED\" - used for vehicle driver\n* forceReplan: `Boolean` -  specifies if path replanning was forced (through `setDestination`)"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/expectedDestination"
        },
        "configuration": {
            "label": "expectedDestination",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Export list of JIP to a file. \nSpecial: BattlEye's RCON variant of this command is #exportJIPqueue (see also `Multiplayer_Server_Commands`)",
            "examples": [
                {
                    "text": "```sqf\nexportJIPMessages \"myFileNameWithoutExtension\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "fileName",
                            "description": "`String` - file where to store the list"
                        }
                    ],
                    "outline": "`exportJIPMessages` fileName",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/exportJIPMessages"
        },
        "configuration": {
            "label": "exportJIPMessages",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Exports landscape as XYZ file.\n**WARNING**: Not available in Retail Version!",
            "examples": [
                {
                    "text": "```sqf\nexportLandscapeXYZ \"myLandscape.txt\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "filename",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`exportLandscapeXYZ` filename",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/exportLandscapeXYZ"
        },
        "configuration": {
            "label": "exportLandscapeXYZ",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the direction object is watching (eyes, or a vehicle primary observer).",
            "examples": [
                {
                    "text": "```sqf\nCan = \"Land_Can_V3_F\" createVehicle position player;\nonEachFrame {\n\tCan setPosASL [\n\t\t(eyePos player select 0) + (eyeDirection player select 0),\n\t\t(eyePos player select 1) + (eyeDirection player select 1),\n\t\t(eyePos player select 2) + (eyeDirection player select 2)\n\t]\n};\n```"
                },
                {
                    "text": "Draw AI eye direction (green) and weapon direction (red) in 3D:\n\n```sqf\nBob = createGroup east createUnit [\"O_Soldier_F\", [0,0,0], [], 0, \"NONE\"];\nBob setVehiclePosition [player modelToWorld [0,100,0], [], 0, \"NONE\"];\nonEachFrame {\n\t_beg = ASLToAGL eyePos Bob;\n\t_endE = (_beg vectorAdd (eyeDirection Bob vectorMultiply 100));\n\tdrawLine3D [_beg, _endE, [0,1,0,1]];\n\t_endW = (_beg vectorAdd (Bob weaponDirection currentWeapon Bob vectorMultiply 100));\n\tdrawLine3D [_beg, _endW, [1,0,0,1]];\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`eyeDirection` unit",
                    "returns": "`Array` - 3D Vector"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/eyeDirection"
        },
        "configuration": {
            "label": "eyeDirection",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the object's eyes / main turret position.",
            "examples": [
                {
                    "text": "```sqf\n_eyesPos = eyePos player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`eyePos` object",
                    "returns": "`Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL)"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/eyePos"
        },
        "configuration": {
            "label": "eyePos",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the face of a person.",
            "examples": [
                {
                    "text": "```sqf\nface player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "person",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`face` person",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/face"
        },
        "configuration": {
            "label": "face",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets unit faction. Factions were introduced in Arma 2 and are defined under _CfgFactionClasses_.\n\n{{{!}} class=\"wikitable\" style{{=}}\"font-size: 0.9em; white-space: nowrap\"\n! Side\n! **(Arma 2)**\n! **(Arma 2: Operation Arrowhead)**\n! **(Arma 3)**\n\n{{!}}-\n{{!}} style=\"text-align: center\" {{!}} `west`/`blufor`\n\n{{!}} <!-- Arma 2 -->\n* USMC\n* CDF\n\n{{!}} <!-- Arma 2 OA -->\n* BIS_US\n* BIS_CZ\n* BIS_GER\n* BIS_BAF (BAF DLC)\n\n{{!}} <!-- Arma 3 -->\n* BLU_F (NATO)\n* BLU_G_F (FIA)\n* BLU_T_F (Pacific NATO, Apex Expansion)\n* BLU_CTRG_F (Pacific CTRG, Apex Expansion)\n* BLU_GEN_F (Gendarmerie, Apex Expansion)\n* BLU_W_F (Woodland NATO, Contact Expansion)\n\n{{!}}-\n{{!}} style{{=}}\"text-align: center\" {{!}} `east`/`opfor`\n\n{{!}} <!-- Arma 2 -->\n* INS (ChDKZ)\n* RU (Russia)\n\n{{!}} <!-- Arma 2 OA -->\n* BIS_TK (Takistan army)\n* BIS_TK_INS (TK insurgents)\n\n{{!}} <!-- Arma 3 -->\n* OPF_F (Iranian CSAT)\n* OPF_G_F (FIA)\n* OPF_T_F (Chinese CSAT, Apex Expansion)\n* OPF_R_F (Spetznatz, Contact Expansion)\n\n{{!}}-\n{{!}} style=\"text-align: center\" {{!}} `resistance`/\n`independent`\n\n{{!}} <!-- Arma 2 -->\n* GUE (Guerilla)\n\n{{!}} <!-- Arma 2 OA -->\n* BIS_TK_GUE\n* BIS_UN (United Nations)\n* PMC_BAF (PMC DLC)\n\n{{!}} <!-- Arma 3 -->\n* IND_F (AAF)\n* IND_G_F (FIA)\n* IND_C_F (Syndikat, Apex Expansion)\n* IND_E_F (LDF, Contact Expansion)\n* IND_L_F (Looters, Contact Expansion)\n\n{{!}}-\n{{!}} style=\"text-align: center\" {{!}} `civilian`\n\n{{!}} <!-- Arma 2 -->\n* CIV\n* CIV_RU\n\n{{!}} <!-- Arma 2 OA -->\n* BIS_TK_CIV\n* BIS_CIV_special\n\n{{!}} <!-- Arma 3 -->\n* CIV_F\n* CIV_IDAP_F (Laws of War DLC)\n{{!}}}\n\n**NOTE**: If a unit's faction is not defined in its config, an empty string is returned.",
            "examples": [
                {
                    "text": "```sqf\nprivate _playerFaction = faction player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`faction` unitName",
                    "returns": "`String`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/faction"
        },
        "configuration": {
            "label": "faction",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Changes the master environment volume smoothly within the given time and is different from `enableEnvironment` global mute option. The default volume is 1.\n\nInfluenced sounds, among others, are:\n{{Columns|2|\n* forest sounds (birds, crickets, ...)\n* waves\n* wind\n* rain\n* object sounds (air conditioners, ...)\n* {{GVI|arma3|2.06",
            "examples": [
                {
                    "text": "```sqf\n5 fadeEnvironment 0.1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "time",
                            "description": "`Number` - fade interval in seconds"
                        },
                        {
                            "name": "volume",
                            "description": "`Number` - speech volume in range 0..1"
                        }
                    ],
                    "outline": "time `fadeEnvironment` volume",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/fadeEnvironment"
        },
        "configuration": {
            "label": "fadeEnvironment",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Changes the current music volume to the given value smoothly within the given time. **NOTE**: The player's in-game setting is not changed by this command: `**Final Volume {{=**` Client Setting * Scripted Volume}}.",
            "examples": [
                {
                    "text": "```sqf\n5 fadeMusic 0; // fade current music volume to 0 in 5 sec\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "time",
                            "description": "`Number` - fade interval in seconds"
                        },
                        {
                            "name": "volume",
                            "description": "`Number` - music volume range from 0 to 5"
                        }
                    ],
                    "outline": "time `fadeMusic`  volume",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/fadeMusic"
        },
        "configuration": {
            "label": "fadeMusic",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Changes the radio volume smoothly within the given time. **NOTE**: The player's in-game setting is not changed by this command: `**Final Volume {{=**` Client Setting * Scripted Volume}}.",
            "examples": [
                {
                    "text": "```sqf\n5 fadeRadio 0.1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "time",
                            "description": "`Number` - fade interval in seconds"
                        },
                        {
                            "name": "volume",
                            "description": "`Number` - radio volume range 0 to 2"
                        }
                    ],
                    "outline": "time `fadeRadio`  volume",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/fadeRadio"
        },
        "configuration": {
            "label": "fadeRadio",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Changes the sound volume smoothly within the given time. **NOTE**: The player's in-game setting is not changed by this command: `**Final Volume {{=**` Client Setting * Scripted Volume}}.",
            "examples": [
                {
                    "text": "```sqf\n5 fadeSound 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "time",
                            "description": "`Number` - fade interval in seconds"
                        },
                        {
                            "name": "volume",
                            "description": "`Number` - sound volume range 0 to 1"
                        }
                    ],
                    "outline": "time `fadeSound`  volume",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/fadeSound"
        },
        "configuration": {
            "label": "fadeSound",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Changes the master speech volume smoothly within the given time. The default volume is 1.0. Some of the sounds that play through speech channel are:\n* [ Tactical Ping](https://community.bistudio.com/wiki/Arma%203%3A%20Difficulty%20Settings) sound\n* `playSound` when _isSpeech_ argument is `true`\n* `say3D` when _isSpeech_ argument is `true`",
            "examples": [
                {
                    "text": "```sqf\n5 fadeSpeech 0.1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "time",
                            "description": "`Number` - fade interval in seconds"
                        },
                        {
                            "name": "volume",
                            "description": "`Number` - speech volume range 0 to 2"
                        }
                    ],
                    "outline": "time `fadeSpeech`  volume",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/fadeSpeech"
        },
        "configuration": {
            "label": "fadeSpeech",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Finish the mission. If the server is set to run persistent mission, `failMission` will not end the mission when last player gets kicked to the lobby. Use `endMission` to end the mission.\n\nThe end type can be:\n* \"CONTINUE\" - this is default type, basically an alias to do nothing\n* \"KILLED\"\n* \"LOSER\"\n* \"END1\"\n* \"END2\"\n* \"END3\"\n* \"END4\"\n* \"END5\"\n* \"END6\"\n\n**Mission saves won't be deleted**.\n\n\n\n**Arma 3**: To maintain Arma 3 visual style, it is recommended to use `BIS_fnc_endMission` instead.",
            "examples": [
                {
                    "text": "```sqf\nfailMission \"LOSER\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "endtype",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`failMission` endtype",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/failMission"
        },
        "configuration": {
            "label": "failMission",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Always false.",
            "examples": [
                {
                    "text": "```sqf\n\n_var = false;\nsystemChat str _var; // false\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`false`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/false"
        },
        "configuration": {
            "label": "false",
            "grammarType": "boolean-literal"
        }
    },
    {
        "documentation": {
            "description": "Checks if file on given path exists. Uses same path resolve code as `loadFile`.\n**NOTE**: Absolute paths are not supported, such as those generated using `getMissionPath`. Attempting to check an absolute path will result in this error in `RPT` logs:\n`**Invalid path (only relative paths supported): 'C:\\...'**`",
            "examples": [
                {
                    "text": "```sqf\nfileExists \"\\a3\\mySuperPath\\bestFileEver.paa\"; // returns false\n```"
                },
                {
                    "text": "```sqf\n\nprivate _path = \"a3\\functions_f_mp_mark\\revive\\_addaction_revive.inc\";\nif (fileExists _path) then { loadFile _path } else { diag_log format [\"File (%1) does not exist!\", _path] };\n\n```"
                },
                {
                    "text": "```sqf\n\n// Sometimes it might be better to check if a file exists instead of checking if path is empty (\"\")\nprivate _class = \"ModuleObjectiveRaceFinish_F\";\nprivate _picture = getText (configFile >> \"CfgVehicles\" >> _class >> \"editorPreview\");\nif !(fileExists _picture) then { _picture = getText (configFile >> \"CfgVehicles\" >> _class >> \"portrait\") };\nif !(fileExists _picture) then { _picture = getText (configFile >> \"CfgVehicles\" >> _class >> \"icon\") };\nif !(fileExists _picture) then { _picture = getText (configFile >> \"CfgVehicles\" >> _class >> \"picture\") };\nif !(fileExists _picture) then { systemChat \"No valid picture found!\" } else { systemChat _picture };\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "path",
                            "description": "`String` - path to file"
                        }
                    ],
                    "outline": "`fileExists` path",
                    "returns": "`Boolean` - `true` if it exists, otherwise `false`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/fileExists"
        },
        "configuration": {
            "label": "fileExists",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds magazines from the campaign pool to the given unit, depending on his weapons. Available in campaigns only.",
            "examples": [
                {
                    "text": "```sqf\nfillWeaponsFromPool _soldier;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`fillWeaponsFromPool`  unit",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/fillWeaponsFromPool"
        },
        "configuration": {
            "label": "fillWeaponsFromPool",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Searches for an array element within an array or an ANSI string within an ANSI string.\n**Arma 3**: If Unicode support is desired, see `forceUnicode`.\n**IMPORTANT**: Search is cASe-seNsItiVE!",
            "examples": [
                {
                    "text": "```sqf\n[\"Apples\", \"Oranges\", \"Pears\"] find \"Oranges\"; // returns 1\n```"
                },
                {
                    "text": "```sqf\n[1, [2], [[3]]] find [[3]]; // returns 2 - does not work in OFP, returns -1\n```"
                },
                {
                    "text": "```sqf\nif (magazines player find \"Strela\" != -1) then { hint \"You've got Strela!\"; };\n```"
                },
                {
                    "text": "```sqf\nhint str (\"japa is the man!\" find \"the man!\"); // returns 8\n```"
                },
                {
                    "text": "```sqf\n\"abc\" find \"\"; // returns 0\n```"
                },
                {
                    "text": "```sqf\n\n\"abcdefghijklmnopqrstuvxyz\" find \"z\"; // returns 24\n\"abcdefghijklmnopqrstuvxyz\" find [\"z\", 20]; // returns 24, better performance\n\n```"
                },
                {
                    "text": "```sqf\n\n\"abcßdef\" find \"c\" // 2\n\"abcßdef\" find \"ß\" // 3\n\"abcßdef\" find \"d\" // 5 - before forceUnicode\n\nforceUnicode 0; // since {{arma3}} v2.02\n\"abcßdef\" find \"d\" // 4\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array` - array to search in"
                        },
                        {
                            "name": "element",
                            "description": "`Anything` - array element to find"
                        }
                    ],
                    "outline": "array `find` element",
                    "returns": "`Number` - zero-based position of the first array element that matches x, -1 if not found"
                },
                {
                    "parameters": [
                        {
                            "name": "string",
                            "description": "`String` - string to search in"
                        },
                        {
                            "name": "substring",
                            "description": "`String` - substring to find"
                        }
                    ],
                    "outline": "string `find` substring",
                    "returns": "`Number` - zero-based position of the first sequence of characters that matches substring, -1 if not found"
                },
                {
                    "parameters": [
                        {
                            "name": "string",
                            "description": "`String` - string to search in"
                        },
                        {
                            "name": "substring",
                            "description": "`String` - substring to find"
                        },
                        {
                            "name": "indexStart",
                            "description": "`Number` - zero-based index which defines where find starts from"
                        }
                    ],
                    "outline": "string `find` [substring, indexStart]",
                    "returns": "`Number` - zero-based position of the first sequence of characters that matches substring, -1 if not found"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/find"
        },
        "configuration": {
            "label": "find",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the zero-based index of the first element in array A that also exists in array B. If no common elements exist it returns -1.\n\nSimilar in functionality as [[find#Syntax 1|find's first syntax]], but the second parameter is an array of elements to find.",
            "examples": [
                {
                    "text": "```sqf\n[0,1,2,3,4] findAny [2,4,6,8]; // returns 2\n```"
                },
                {
                    "text": "```sqf\n[0,1,2,3,4] findAny [8,6,4,2]; // returns 2\n```"
                },
                {
                    "text": "```sqf\n[0,1,2,3,4] findAny [5,7,9]; // returns -1\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "searchIn",
                            "description": "`Array`"
                        },
                        {
                            "name": "toFind",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "searchIn `findAny` toFind",
                    "returns": "`Number` - the index of the first found item"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/findAny"
        },
        "configuration": {
            "label": "findAny",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the object around where the unit finds cover. The minDist, visibilityPosition and ignoreObject parameters are optional.\n**IMPORTANT**: Not implemented in Arma 2 and later titles (always returns `objNull`).",
            "examples": [
                {
                    "text": "```sqf\nunit1 findCover [ASLToATL aimPos unit2, 30];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "position",
                            "description": "`Array` format `Position`"
                        },
                        {
                            "name": "hidePosition",
                            "description": "`Array` format [[Position#PositionATL]] - `getHideFrom`-like position from which the unit should hide"
                        },
                        {
                            "name": "maxDist",
                            "description": "`Number`"
                        },
                        {
                            "name": "minDist",
                            "description": "`Number` - (Optional)"
                        },
                        {
                            "name": "visibilityPosition",
                            "description": "`Array` format `Position` - (Optional) used to select cover that unit can see in that direction from"
                        },
                        {
                            "name": "ignoreObject",
                            "description": "`Object` - (Optional) ignore this object in visibility check"
                        }
                    ],
                    "outline": "object `findCover` [position, hidePosition, maxDist, minDist, visibilityPosition, ignoreObject]",
                    "returns": "`Object` - always `objNull`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/findCover"
        },
        "configuration": {
            "label": "findCover",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Finds a display by its IDD which can either be defined in `missionConfigFile` ([[Description.ext|description.ext]]) or `configFile` ([[config.cpp]]) or by its [UI On Texture](https://community.bistudio.com/wiki/Procedural%20Textures%23UI%20On%20Texture)'s unique name (see `displayUniqueName`).\n\nIf the specified display cannot be found, `displayNull` is returned.\n**IMPORTANT**: \nDedicated servers and [headless clients](https://community.bistudio.com/wiki/Arma%203%3A%20Headless%20Client) do not have a primary display (e.g <sqf inline>findDisplay 46 will return `displayNull`).\n\nDetect both with the `hasInterface` command.\n\n\n**NOTE**: For a list of (almost) all Arma 3's IDDs, see [Arma 3: IDD List](https://community.bistudio.com/wiki/Arma%203%3A%20IDD%20List).",
            "examples": [
                {
                    "text": "```sqf\n\n[] spawn\n{\n\twaitUntil { !isNull findDisplay 46 };\n\thint \"Mission Display is now available!\";\n};\n\n```"
                },
                {
                    "text": "```sqf\n_display = findDisplay 1;\n```"
                },
                {
                    "text": "```sqf\nprivate _display = findDisplay \"RscDisplayRenderTest\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idd",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`findDisplay` idd",
                    "returns": "`Display`"
                },
                {
                    "parameters": [
                        {
                            "name": "displayName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`findDisplay` displayName",
                    "returns": "`Display`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/findDisplay"
        },
        "configuration": {
            "label": "findDisplay",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return object that matches the provided reference. \n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "value",
                            "description": "`Anything`"
                        }
                    ],
                    "outline": "map `findEditorObject` value",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/findEditorObject"
        },
        "configuration": {
            "label": "findEditorObject",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Searches for an empty area around the specified position, starting from the _center_ looking for an empty _areaRadius_ and looks as far away as _areaRadius_ + _maxDistance_.\nThis command ignores moving objects present within the search area. The search area can be preloaded with `findEmptyPositionReady` command.\n\n**NOTE**: \nThis command does not work outside of [world dimensions](https://community.bistudio.com/wiki/worldSize) and will always return the provided _center_.\nObjects outside the world dimensions will not be considered in the detection either.",
            "examples": [
                {
                    "text": "```sqf\n_position = getPosASL player findEmptyPosition [0, 100];\n```"
                },
                {
                    "text": "```sqf\n_position = _center findEmptyPosition [10,100,\"UH60M_EP1\"];\n```"
                },
                {
                    "text": "Check if exact position is empty:\n\n```sqf\n_position = _center findEmptyPosition [0, 0, \"B_Boat_Armed_01_minigun_F\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "center",
                            "description": "`Array` format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position3D](https://community.bistudio.com/wiki/Position%23Introduction) - search area center position in format [x,y] or [x,y,z] in which case z is ignored"
                        },
                        {
                            "name": "areaRadius",
                            "description": "`Number` - wanted area radius"
                        },
                        {
                            "name": "maxDistance",
                            "description": "`Number` - stop searching no further than `**areaRadius + maxDistance**` from the center"
                        },
                        {
                            "name": "vehicleType",
                            "description": "`String` - (Optional) classname of a vehicle to accommodate"
                        }
                    ],
                    "outline": "center `findEmptyPosition` [areaRadius, maxDistance, vehicleType]",
                    "returns": "`Array` - a suitable empty position in format [Position3D](https://community.bistudio.com/wiki/Position%23Introduction) or empty array <sqf inline>[] if not found"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/findEmptyPosition"
        },
        "configuration": {
            "label": "findEmptyPosition",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Preloads area to be used with `findEmptyPosition` command and returns `true` when area is ready.\nThe size of the area preloaded is from `**center - radius - maxDistance**` to `**center + radius + maxDistance**`\n**IMPORTANT**: Preloading large areas may take a long time, we are talking minutes. However once preloaded, it stays preloaded even after mission restart.",
            "examples": [
                {
                    "text": "Preload aread within 500m:\n\n```sqf\n_ready = _center findEmptyPositionReady [0, 500];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "center",
                            "description": "`Array` format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position3D](https://community.bistudio.com/wiki/Position%23Introduction) - search area center position in format [x,y] or [x,y,z] in which case z is ignored"
                        },
                        {
                            "name": "radius",
                            "description": "`Number` - distance from the center"
                        },
                        {
                            "name": "maxDistance",
                            "description": "`Number` - distance from the end of radius"
                        }
                    ],
                    "outline": "center `findEmptyPositionReady` [radius, maxDistance]",
                    "returns": "`Boolean` - `true` when ready"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/findEmptyPositionReady"
        },
        "configuration": {
            "label": "findEmptyPositionReady",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Searches for an element within array for which the code evaluates to true. Returns the zero-based index on success or -1 if not found.\n\nCode on the right side of the command is evaluated for each element of the array, processed element can be referenced in code as [_x](https://community.bistudio.com/wiki/Magic%20Variables%23x).\n**NOTE**: `findIf` terminates as soon as it finds an element that fulfills the condition, thus it is more efficient than `count` in scenarios where a check for presence / absence of at least one element should be done (See _Example 2_).",
            "examples": [
                {
                    "text": "```sqf\n[unit1, unit2, unit3] findIf {not alive _x}; // return index of the first dead unit)\n```"
                },
                {
                    "text": "```sqf\n\n// two ways how to 'wait for all units to be dead':\nwaitUntil { [unit1, unit2, unit3] findIf { alive _x } == -1 };\t// fast, terminates as soon as it finds a living unit\nwaitUntil { { alive _x } count [unit1, unit2, unit3] == 0 };\t// slow, always goes through all array elements\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array` - array to search in"
                        },
                        {
                            "name": "code",
                            "description": "`Code` - code defining an element to find, processed element can be referenced within the code as [_x](https://community.bistudio.com/wiki/Magic%20Variables%23x)"
                        }
                    ],
                    "outline": "array `findIf` code",
                    "returns": "`Number` - zero-based position of the first array element for which the code evaluate to true, -1 if not found"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/findIf"
        },
        "configuration": {
            "label": "findIf",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Finds the nearest enemy to the specified position. Returns a null object if the object's group does not [know about](https://community.bistudio.com/wiki/knowsAbout) any enemies. This command will return nearest object that is known to the unit and is considered enemy. An empty vehicle that is part of enemy group assets (see `addVehicle`) can be returned as valid nearest target.",
            "examples": [
                {
                    "text": "```sqf\n_myNearestEnemy = (units _myGroup select 0) findNearestEnemy player;\n```"
                },
                {
                    "text": "```sqf\n_myNearestEnemy = player findNearestEnemy player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "position",
                            "description": "`Object` or `Array` in format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) or [Position2D](https://community.bistudio.com/wiki/Position%23Introduction)"
                        }
                    ],
                    "outline": "object `findNearestEnemy` position",
                    "returns": "`Object`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/findNearestEnemy"
        },
        "configuration": {
            "label": "findNearestEnemy",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Finish world initialization before mission is launched.",
            "examples": [
                {
                    "text": "`finishMissionInit`"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**finishMissionInit**",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/finishMissionInit"
        },
        "configuration": {
            "label": "finishMissionInit",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if the provided number is finite (not infinite and a valid number). \n{{ Feature | Informative | \n* Maximum finite `Number` : 3.40282e+38\n* Minimum finite `Number` : -3.40282e+38 }}",
            "examples": [
                {
                    "text": "```sqf\nfinite 123; // returns true\n```"
                },
                {
                    "text": "```sqf\nfinite log -1; // returns false\n```"
                },
                {
                    "text": "```sqf\nif (not finite log -1) then { hint \"Infinite\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "number",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`finite` number",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/finite"
        },
        "configuration": {
            "label": "finite",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Forces a unit to fire the given weapon.\n**NOTE**: Just like with `forceWeaponFire` it is possible to pass remote unit as argument, but this could be unreliable. Considering this command might need to be used in combination with `selectWeapon`, which takes only [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality) arguments, it would make sense to execute the `fire` command where the unit is [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality) as well.",
            "examples": [
                {
                    "text": "```sqf\n_soldier fire \"M16\";\n```"
                },
                {
                    "text": "```sqf\n_soldier fire \"SmokeShellMuzzle\";\n```"
                },
                {
                    "text": "```sqf\n_soldier fire [\"SmokeShellMuzzle\", \"SmokeShellMuzzle\", \"SmokeShellRed\"];\n```"
                },
                {
                    "text": "```sqf\nplayer playActionNow \"PutDown\";\nplayer selectWeapon \"DemoChargeMuzzle\";\nplayer fire [\"DemoChargeMuzzle\", \"DemoChargeMuzzle\", \"DemoCharge_Remote_Mag\"];\nplayer setWeaponReloadingTime [player, \"DemoChargeMuzzle\", 0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit that is supposed to fire"
                        },
                        {
                            "name": "muzzle",
                            "description": "`String` - name of the muzzle to be fired"
                        }
                    ],
                    "outline": "unit `fire` muzzle",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "muzzle",
                            "description": "`String`"
                        },
                        {
                            "name": "mode",
                            "description": "`String`"
                        },
                        {
                            "name": "magazine",
                            "description": "`String` - (Optional)"
                        }
                    ],
                    "outline": "unit `fire` [muzzle, mode, magazine]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/fire"
        },
        "configuration": {
            "label": "fire",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Remotely forces a unit to fire the given weapon. See also `BIS_fnc_fire`.",
            "examples": [
                {
                    "text": "```sqf\n_handle = this fireAtTarget [groundtarget1, \"HellfireLauncher\"];\n```"
                },
                {
                    "text": "```sqf\n_handle = Igla_AA_pod_TK_EP1 fireAtTarget [_helicopter, currentWeapon Igla_AA_pod_TK_EP1];\n```"
                },
                {
                    "text": "```sqf\n_handle = Igla_AA_pod_TK_EP1 fireAtTarget [helicopter];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "sourceVehicle",
                            "description": "`Object` - source vehicle to fire from"
                        },
                        {
                            "name": "targetVehicle",
                            "description": "`Object` - target vehicle to fire at"
                        },
                        {
                            "name": "weaponMuzzleName",
                            "description": "`String` - (Optional) weapon muzzle classname, optional parameter"
                        }
                    ],
                    "outline": "sourceVehicle `fireAtTarget` [targetVehicle, weaponMuzzleName]",
                    "returns": "`Boolean` - `true` if fired, `false` if not"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/fireAtTarget"
        },
        "configuration": {
            "label": "fireAtTarget",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the first stored backpack.",
            "examples": [
                {
                    "text": "```sqf\nmyVariable = firstBackpack myBox;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "box",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`firstBackpack` box",
                    "returns": "`Object`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/firstBackpack"
        },
        "configuration": {
            "label": "firstBackpack",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the original flag pole of the flag the unit is carrying.",
            "examples": [
                {
                    "text": "```sqf\n_flag = flag _soldier;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`flag` unit",
                    "returns": "`Object` - flag pole object the flag belongs to. If the unit carries no flag, `objNull` is returned."
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/flag"
        },
        "configuration": {
            "label": "flag",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns flag position on the flag pole.",
            "examples": [
                {
                    "text": "```sqf\nflagAnimationPhase _flag1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "flag",
                            "description": "`Object` - flag pole of the type `**\"FlagCarrier\"**`"
                        }
                    ],
                    "outline": "`flagAnimationPhase`  flag",
                    "returns": "`Number` - flag position in range from 0 to 1, where 0 is bottom of the flag pole, 1 is the top of the flag pole"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/flagAnimationPhase"
        },
        "configuration": {
            "label": "flagAnimationPhase",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the global owner of a flag. A getter for `setFlagOwner`. Note that owner of a flag is `Object` rather than `Number`, as how it is usually with other `owner` commands",
            "examples": [
                {
                    "text": "```sqf\n_person = flagOwner _flagOne;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "flag",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`flagOwner`  flag",
                    "returns": "`Object` - the person or vehicle that owns the flag is returned. If used on anything else than a flag, the returned value is `objNull`. If the flag is on its pole, the return value is NULL. If the flagowner is dead, the return value is the name of the soldier model"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/flagOwner"
        },
        "configuration": {
            "label": "flagOwner",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `Side` of the [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality) instance of the flag. A getter for `setFlagSide`.",
            "examples": [
                {
                    "text": "```sqf\n_flagSide =  flagSide flag;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "flag",
                            "description": "`Object` - flag"
                        }
                    ],
                    "outline": "`flagSide` flag",
                    "returns": "`Side`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/flagSide"
        },
        "configuration": {
            "label": "flagSide",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns texture of the [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality) instance of the flag. A getter for `setFlagTexture`. It will not return flag textures applied using `forceFlagTexture`, use `getForcedFlagTexture` for that.",
            "examples": [
                {
                    "text": "```sqf\n_flagTexture = flagTexture _flag1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "flagCarrier",
                            "description": "`Object` - vehicle, unit or flag pole"
                        }
                    ],
                    "outline": "`flagTexture` flagCarrier",
                    "returns": "`String`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/flagTexture"
        },
        "configuration": {
            "label": "flagTexture",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Flattens an array.",
            "examples": [
                {
                    "text": "```sqf\nflatten [1, [2], [[3]], [[[4]]]]; // returns [1, 2, 3, 4]\n```"
                },
                {
                    "text": "```sqf\nflatten getUnitLoadout player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "`flatten` array",
                    "returns": "`Array` - flattened array"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/flatten"
        },
        "configuration": {
            "label": "flatten",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks if a unit is fleeing.\n\n\n\nNotes:\n* Fleeing only affects AI led groups.\n* Only the group as a whole can flee (or not).\n* The courage of the AI group is based on the group's leader [[Arma_3_AI_Skill#Sub-Skills|courage subskill]].\n* Each group has a max strength (summed \"armor\" of all infantry units - plus armor when inside vehicles).\n* If the group losses by injury/damage or death/destruction are higher than the max strength, multiplied by leader's courage or `allowFleeing` level , then the group will start fleeing.\n* As result primarily the AI flees to a nearby \"supply point\" (some friendly units - preferably with medic or engineer, or a vehicle with repair/ammo/fuel cargo). Alternatively it will try to find a safe position within a 600m radius from the initial waypoint (danger, distance, amount of cover positions are taken into account).\n* After the fleeing has been finished the group's initial strength is reset.\n* Fleeing units in `combatMode` red, will be set to yellow when fleeing to avoid engaging enemies while doing so.\n* While fleeing, the group leader will be set to green, to avoid giving engage or fire orders, unless in `combatMode` blue already. Also `speedMode` is set to full.\n* When reaching their flee point/destination, they will change to `combatMode` yellow and `speedMode` normal.\n* With `allowFleeing` one can make unit's flee earlier (or essentially never flee). Apply it, overrides the courage subskill influence.",
            "examples": [
                {
                    "text": "```sqf\nif (fleeing soldier_1) then {player sideChat \"We have won!\"} else {player sideChat \"Keep fighting!\"};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`fleeing`  unit",
                    "returns": "`Boolean` - returns `true` if a unit is fleeing, `false` if not. **Dead** or **empty** units return `false`."
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/fleeing"
        },
        "configuration": {
            "label": "fleeing",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the next **lowest** integer in relation to the provided number.",
            "examples": [
                {
                    "text": "```sqf\nfloor 5.1;\t\t// result is  5\nfloor 5.999;\t// result is  5\nfloor -2.01;\t// result is -3\nfloor -2.99;\t// result is -3\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "num",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`floor` num",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/floor"
        },
        "configuration": {
            "label": "floor",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the flying altitude for aircraft relatively to the ground surface. Avoid too low altitudes, as helicopters and planes won't evade trees and obstacles on the ground. The default flying altitude is 100 meters.\n**NOTE**: Height measurement is relative to the pilot and can be approximated with <sqf inline>ASLToAGL eyePos driver _aircraft;.",
            "examples": [
                {
                    "text": "```sqf\n_helicopter flyInHeight 40;\n```"
                },
                {
                    "text": "```sqf\n\n// for altitudes below 10m\n_helicopter flyInHeight 5;\t\t\t// helicopter will land\n_helicopter flyInHeight [5, true];\t// helicopter will hover at 5m altitude\n\n// on a landed helicopter\n_helicopter flyInHeight 50;\t\t\t// helicopter will not move until a waypoint is added\n_helicopter flyInHeight [50, true];\t// helicopter will start to rise immediately\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "aircraft",
                            "description": "`Object`"
                        },
                        {
                            "name": "altitude",
                            "description": "`Number` - flying altitude in meters"
                        }
                    ],
                    "outline": "aircraft `flyInHeight` altitude",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "aircraft",
                            "description": "`Object`"
                        },
                        {
                            "name": "altitude",
                            "description": "`Number` - flying altitude in meters"
                        },
                        {
                            "name": "forced",
                            "description": "`Boolean` - `true` to force altitude in all cases, `false` to behave like main syntax"
                        }
                    ],
                    "outline": "aircraft `flyInHeight` [altitude, forced]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/flyInHeight"
        },
        "configuration": {
            "label": "flyInHeight",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the minimal [ASL](https://community.bistudio.com/wiki/Position%23PositionASL) height. Final height is `**_flyInHeight_ `max` _flyInHeightASL_**` - the higher altitude has priority.",
            "examples": [
                {
                    "text": "```sqf\ncobraOne flyInHeightASL [200, 100, 400];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "aircraft",
                            "description": "`Object` - helicopter, airplane"
                        },
                        {
                            "name": "standardAltitude",
                            "description": "`Number` - base altitude used when `behaviour` is neither \"COMBAT\" or \"STEALTH\""
                        },
                        {
                            "name": "combatAltitude",
                            "description": "`Number` -  altitude used when `behaviour` is \"COMBAT\""
                        },
                        {
                            "name": "stealthAltitude",
                            "description": "`Number` - altitude used when `behaviour` is \"STEALTH\""
                        }
                    ],
                    "outline": "aircraft `flyInHeightASL` [standardAltitude, combatAltitude, stealthAltitude]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/flyInHeightASL"
        },
        "configuration": {
            "label": "flyInHeightASL",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns display's focused control.",
            "examples": [
                {
                    "text": "```sqf\nprivate _focusedCtrl = focusedCtrl findDisplay 12;\n```"
                },
                {
                    "text": "```sqf\nprivate _isFocused = focusedCtrl _display == _ctrl;\n```"
                },
                {
                    "text": "```sqf\nprivate _isFocused = focusedCtrl (ctrlParent _ctrl) == _ctrl;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "display",
                            "description": "`Display` - parent display"
                        }
                    ],
                    "outline": "`focusedCtrl` display",
                    "returns": "`Control` - control which has focus"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/focusedCtrl"
        },
        "configuration": {
            "label": "focusedCtrl",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the person the camera is focused on. If you need the vehicle, see `cameraOn`.",
            "examples": [
                {
                    "text": "```sqf\nprivate _currentlyControlledUnit = focusOn;\n```"
                },
                {
                    "text": "```sqf\n\nif (isNull player) exitWith { /* no player */ };\n\nif (player == focusOn) then\n{\n\thint \"You are controlling your player unit\";\n}\nelse\n{\n\thint \"You are remote-controlling a unit\";\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`focusOn`",
                    "returns": "`Object` - controlled person or `objNull` if no unit is controlled"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/focusOn"
        },
        "configuration": {
            "label": "focusOn",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "A getter for `setFog`. Returns the current value of the fog in range 0..1.",
            "examples": [
                {
                    "text": "```sqf\n_foglevel = fog;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`fog`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/fog"
        },
        "configuration": {
            "label": "fog",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the forecast fog value. A value of 0 means no fog, 1 means maximum fog.",
            "examples": [
                {
                    "text": "```sqf\n_level = fogForecast;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**fogForecast**",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/fogForecast"
        },
        "configuration": {
            "label": "fogForecast",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "A getter for `setFog` (Alt Syntax). Returns extended params for the fog",
            "examples": [
                {
                    "text": "```sqf\nprivate _fog = fogParams;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`fogParams`",
                    "returns": "`Array` of `Number`s - in `setFog` format: [fogValue, fogDecay, fogBase]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/fogParams"
        },
        "configuration": {
            "label": "fogParams",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "This operator creates a [For Type](https://community.bistudio.com/wiki/For%20Type) which is used in the for-constructs.\n**WARNING**: \nThe alternative syntax <sqf inline>for _array do _code is [slower](https://community.bistudio.com/wiki/Code%20Optimisation%23for) than the first syntax because the condition is checked in every iteration, and it has a few bugs.\n\nIt is only kept for backward compatibility; always use the first syntax <sqf inline>for \"_i\" from 0 to _end do _code.",
            "examples": [
                {
                    "text": "```sqf\n\n// will output 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 (the to value being inclusive)\nfor \"_i\" from 1 to 10 do { systemChat str _i; };\n\n```"
                },
                {
                    "text": "```sqf\n\n// will output 9, 7, 5, 3, 1\nfor \"_i\" from 9 to 1 step -2 do { systemChat str _i; };\n\n```"
                },
                {
                    "text": "```sqf\n\n// will output 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\nfor [{ _i = 0 }, { _i < 10 }, { _i = _i + 1 }] do { systemChat str _i };\n\n```"
                },
                {
                    "text": "```sqf\n\n// BAD CODE\n_i = 100;\nfor [{ _i = 0 }, { _i < 5 }, { _i = _i + 1 }] do { /* code */ };\nhint str _i; // 5\n\n// GOOD CODE (private keyword is recommended)\n_i = 100;\nfor [{ private _i = 0 }, { _i < 5 }, { _i = _i + 1 }] do { /* code */ };\nhint str _i; // 100\n\n// BEST CODE (primary syntax, fastest)\n_i = 100;\nfor \"_i\" from 0 to 4 do { /* code */ };\nhint str _i; // 100\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "arguments",
                            "description": "`String` - declares the index variable name like \"_myVar\". `from` and `to` are required, `step` is optional."
                        }
                    ],
                    "outline": "`for` arguments",
                    "returns": "[For Type](https://community.bistudio.com/wiki/For%20Type)"
                },
                {
                    "parameters": [
                        {
                            "name": "init",
                            "description": "`Code` - loop variable definition"
                        },
                        {
                            "name": "condition",
                            "description": "`Code` - `call`ed code returns `false`, leave the `for`-loop"
                        },
                        {
                            "name": "codeToExecute",
                            "description": "`Code` - code to be run on each loop"
                        }
                    ],
                    "outline": "`for` [init, condition, codeToExecute]",
                    "returns": "[For Type](https://community.bistudio.com/wiki/For%20Type)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/for"
        },
        "configuration": {
            "label": "for",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "Create a new uniform and hard link it into slot (without any restrictions).",
            "examples": [
                {
                    "text": "```sqf\n_unit forceAddUniform \"U_B_CombatUniform_mcam\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "type",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `forceAddUniform` type",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/forceAddUniform"
        },
        "configuration": {
            "label": "forceAddUniform",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds force generator to world.\n{{Feature|afm}}",
            "examples": [
                {
                    "text": "```sqf\nforceAtPositionRTD;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Array` - position where to force generator is created."
                        }
                    ],
                    "outline": "`forceAtPositionRTD` position",
                    "returns": "`Number` - force index"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/forceAtPositionRTD"
        },
        "configuration": {
            "label": "forceAtPositionRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Forces `**showCadetHints**` and `**showCadetWP**` global Cadet [[Arma 3: Difficulty Settings|Arma 3 difficulty]], returns previous settings.",
            "examples": [
                {
                    "text": "```sqf\nprivate _previousSettings = forceCadetDifficulty [true, false];\n```"
                },
                {
                    "text": "```sqf\n\nprivate _fnc_forceCadetDifficulty = \n{\n\tparams [\"_OKButtonPressed\"];\n\tif (_OKButtonPressed) then\n\t{\n\t\tforceCadetDifficulty (switch (toLowerANSI configName ((configFile >> \"CfgDifficultyPresets\") select difficulty)) do\n\t\t{\n\t\t\tcase \"recruit\";\n\t\t\tcase \"regular\":\n\t\t\t{\n\t\t\t\t// showCadetHints = 1;\n\t\t\t\t// showCadetWP = 1;\n\t\t\t\t[true, true]\n\t\t\t};\n\t\t\tcase \"veteran\":\n\t\t\t{\n\t\t\t\t// showCadetHints = 0;\n\t\t\t\t// showCadetWP = 1;\n\t\t\t\t[false, true]\n\t\t\t};\n\t\t\tdefault\n\t\t\t{\n\t\t\t\t// showCadetHints = 0;\n\t\t\t\t// showCadetWP = 0;\n\t\t\t\t[false, false]\n\t\t\t};\n\t\t});\n\t};\n};\n[true] call _fnc_forceCadetDifficulty;\n[missionNamespace, \"OnGameOptionsExited\", _fnc_forceCadetDifficulty] call BIS_fnc_addScriptedEventHandler;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "showCadetHints",
                            "description": "`Boolean` - `**showCadetHints**` difficulty"
                        },
                        {
                            "name": "showCadetWP",
                            "description": "`Boolean` - `**showCadetWP**` difficulty"
                        }
                    ],
                    "outline": "`forceCadetDifficulty` [showCadetHints, showCadetWP]",
                    "returns": "`Array` of `Boolean`s - [prev_showCadetHints, prev_showCadetWP]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/forceCadetDifficulty"
        },
        "configuration": {
            "label": "forceCadetDifficulty",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns if map was forced by using `forceMap` command or `openMap` command with force option",
            "examples": [
                {
                    "text": "```sqf\n_forceMapForced = forcedMap select 0;\n_openMapForced = forcedMap select 1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`forcedMap`",
                    "returns": "`Array` in format [forceMapForced, openMapForced]:\n* forceMapForced: `Boolean` - `true` if map was forced with `forceMap` command\n* openMapForced: `Boolean` - `true` if map was forced with `openMap` command."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/forcedMap"
        },
        "configuration": {
            "label": "forcedMap",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Forces mission ending (set with `endMission`) even if a camera effect or any another condition delays the endMission (mostly in [[:Category:Operation Flashpoint|Operation Flashpoint]]).",
            "examples": [
                {
                    "text": "```sqf\nforceEnd;// in an ending trigger to ensure no camera is delaying mission ending\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`forceEnd`",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/forceEnd"
        },
        "configuration": {
            "label": "forceEnd",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Forces a flag texture onto a flag carrier (unit, vehicle or flag pole).\nNo flag holder is required. If `**\"\"**` is used as texture, the texture is removed.\nThis will override regularly owned flags.\nThis type of flag texture cannot be retrieved using `flagTexture`, but `getForcedFlagTexture`.\n\n**IMPORTANT**: Forced flag texture is an additional flag texture, which visually overrides original flag texture and therefore is very expensive to simulate, so use the functionality sparingly.",
            "examples": [
                {
                    "text": "```sqf\nplayer forceFlagTexture \"\\A3\\Data_F\\Flags\\Flag_red_CO.paa\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - vehicle, unit or flag pole"
                        },
                        {
                            "name": "texture",
                            "description": "`String`"
                        }
                    ],
                    "outline": "object `forceFlagTexture` texture",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/forceFlagTexture"
        },
        "configuration": {
            "label": "forceFlagTexture",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Forces the vehicle to stay on road.",
            "examples": [
                {
                    "text": "```sqf\ncar forceFollowRoad true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - vehicle"
                        },
                        {
                            "name": "state",
                            "description": "`Boolean` - true: Force on road, false: default behaviour"
                        }
                    ],
                    "outline": "vehicle `forceFollowRoad` state",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/forceFollowRoad"
        },
        "configuration": {
            "label": "forceFollowRoad",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds force generator to world. {{Feature|afm}}",
            "examples": [
                {
                    "text": "```sqf\nforceGeneratorRTD 2;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "index",
                            "description": "`Number` - index"
                        }
                    ],
                    "outline": "`forceGeneratorRTD` index",
                    "returns": "`Number` - force index"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/forceGeneratorRTD"
        },
        "configuration": {
            "label": "forceGeneratorRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Synchronises hitpoints values and total damage across current network clients as well as JIP.\nPossible uses after executing script commands such as `setHit`, `setHitIndex`, `setHitPointDamage` or in conjunction with {{Link|Arma 3: Event Handlers#HandleDamage|HandleDamage}} event handler (see _Example 2_).\nTo sync static buildings, execute on the [server](https://community.bistudio.com/wiki/isServer).",
            "examples": [
                {
                    "text": "```sqf\nforceHitPointsDamageSync house1;\n```"
                },
                {
                    "text": "```sqf\n\nhouse1 addEventHandler [\"HandleDamage\", \n{\n\tif (isServer && { _this select 9 == 2 }) then { (_this select 0) spawn { forceHitPointsDamageSync _this; } };\n\tif (_this select 7 find \"glass\" >= 0) then { _this select 2 } else { 0 };\n}];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "`Object` - entity"
                        }
                    ],
                    "outline": "`forceHitPointsDamageSync` entity",
                    "returns": "`Boolean` - `true` if sync was attempted"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/forceHitPointsDamageSync"
        },
        "configuration": {
            "label": "forceHitPointsDamageSync",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Opens non-interactive main map in background that overrides user screen. To force open interactive map use `openMap` command.\n**WARNING**: \nWhen the map is forced open with this command, the user is still able to fire but cannot see the world, just the map.\nThe map cannot be closed manually and the user can get stuck requiring a game restart. Make sure you provide scripted mechanics to de-force the map at a later stage.",
            "examples": [
                {
                    "text": "```sqf\nforceMap true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "show",
                            "description": "`Boolean` - `true` to force, `false` to go back to normal map behaviour"
                        }
                    ],
                    "outline": "`forceMap` show",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/forceMap"
        },
        "configuration": {
            "label": "forceMap",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Forces the unit to respawn. The effect is as if the player pressed the RESPAWN button in the game pause menu; the unit is killed but there is no \"X was killed\" message and no score adjustment.",
            "examples": [
                {
                    "text": "```sqf\nforceRespawn player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`forceRespawn` unit",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/forceRespawn"
        },
        "configuration": {
            "label": "forceRespawn",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Force the speed limit on given object (object will never attempt to move faster than given by forceSpeed). Use negative value to return to default behaviour.",
            "examples": [
                {
                    "text": "```sqf\n_helicopter forceSpeed 150;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "speed",
                            "description": "`Number` - in metre per second"
                        }
                    ],
                    "outline": "object `forceSpeed` speed",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/forceSpeed"
        },
        "configuration": {
            "label": "forceSpeed",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "<div style=\"float: right\">\nList of the commands that work with `forceUnicode`:\n{{Columns|2|\n* `copyFromClipboard`\n* `copyToClipboard`\n* `count`\n* `find`\n* `in`\n* `insert`\n* `reverse`\n* `select`\n* `splitString`\n* `trim`\n* `regexFind`\n* `regexMatch`\n* `regexReplace`\n}}\n</div>\nSets the Unicode flag which forces some of the string manipulation commands to switch to {{Link|https://en.wikipedia.org/wiki/Unicode}}.\nThe Unicode flag is always set right after `forceUnicode` command execution, but is reset depending on the command mode (see _{{Link|#Syntax 1|mode}}_).\n\nWhen the flag is set it will also affect all scopes within the script including child scopes (see `diag_scope`).\nThere are many other string manipulation commands like `ctrlSetText`, `getTextWidth`, etc. that support Unicode by design so no additional forcing is needed.",
            "examples": [
                {
                    "text": "```sqf\n\ncopyToClipboard \"д\"; // copies \"Ð´\" to clipboard\nforceUnicode 1;\ncopyToClipboard \"д\"; // copies \"д\" to clipboard\n\n```"
                },
                {
                    "text": "```sqf\n\nprivate _string = \"привет\";\t\t\t// a string that uses Unicode characters\nsystemChat str count _string;\t\t// 12 - the character count is wrong without forceUnicode\n\ncall {\n\tsystemChat str count _string;\t// 12 - identical result\n\tforceUnicode 0;\n\tsystemChat str count _string;\t// 6 - correct result\n};\n\nsystemChat str count _string;\t\t// 6 - outer scope is affected by forceUnicode as well, because the command mode is 0\n\nforceUnicode -1; // cancelled\n\ncall {\n\tsystemChat str count _string;\t// 12 - wrong count\n\tforceUnicode 1;\n\tsystemChat str count _string;\t// 6 - correct result, but Unicode it reset after this operation, because command mode is 1\n};\n\nsystemChat str count _string;\t\t// 12 - outer scope is not affected as it was reset right after count\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`Number` - mode of operation, can be:\n* -1 - resets previously set Unicode flag\n* &nbsp;0 - sets Unicode flag until the end of script\n* &nbsp;1 - sets Unicode flag until after next supported command or until the end of script, whichever comes earlier"
                        }
                    ],
                    "outline": "`forceUnicode` mode",
                    "returns": "`Anything`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/forceUnicode"
        },
        "configuration": {
            "label": "forceUnicode",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Forces unit to walk even if run or sprint is selected.",
            "examples": [
                {
                    "text": "```sqf\nplayer forceWalk true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - the unit forced to walk"
                        },
                        {
                            "name": "value",
                            "description": "`Boolean` - true/false"
                        }
                    ],
                    "outline": "unit `forceWalk` value",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/forceWalk"
        },
        "configuration": {
            "label": "forceWalk",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "The unit will be forced to fire weapon from the given muzzle. The weapon will not fire if firemode passed as parameter is not supported by the given muzzle. The muzzle could belong to a vehicle weapon and unit in this case will be the unit operating this weapon. Doesnt't seem to work for units in FFV positions. Works on `player`. See also: `BIS_fnc_fire`",
            "examples": [
                {
                    "text": "```sqf\n_unit forceWeaponFire [\"arifle_MX_F\", \"Single\"];\n_unit forceWeaponFire [\"hgun_ACPC2_F\", \"hgun_ACPC2_F\"];\n_unit forceWeaponFire [\"HandGrenadeMuzzle\",\"HandGrenadeMuzzle\"];\n_unit forceWeaponFire [\"MiniGrenadeMuzzle\",\"MiniGrenadeMuzzle\"];\n_unit forceWeaponFire [\"HandGrenade_Stone\",\"HandGrenade_Stone\"];\n_unit forceWeaponFire [\"SmokeShellMuzzle\",\"SmokeShellMuzzle\"];\n_unit forceWeaponFire [\"ChemlightGreenMuzzle\",\"ChemlightGreenMuzzle\"];\n_unit forceWeaponFire [\"IRGrenade\",\"IRGrenade\"];\n_unit forceWeaponFire [\"Laserdesignator\",\"Laserdesignator\"];\n```"
                },
                {
                    "text": "```sqf\ngunner blackfoot forceWeaponFire [\"gatling_20mm\", \"close\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit alone or in vehicle"
                        },
                        {
                            "name": "muzzle",
                            "description": "`String`"
                        },
                        {
                            "name": "firemode",
                            "description": "`String` - common options are \"Single\", \"Burst\", \"FullAuto\". For the full list of a weapon firemodes:\n\n\n```sqf\nhint str (getArray (configFile >> \"CfgWeapons\" >> currentWeapon player >> \"modes\"));\n```\n If _modes[]_ param in config for the weapon says _{\"this\"}_, then the same classname as for the weapon param (`currentWeapon` `player`) should be used as firemode param."
                        }
                    ],
                    "outline": "unit `forceWeaponFire` [muzzle, firemode]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/forceWeaponFire"
        },
        "configuration": {
            "label": "forceWeaponFire",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Forcibly applies previously set weather settings. Skips smooth transitions. This might cause lag.\n\n**NOTE**: To prevent the engine from overwriting custom weather settings, enable the _Manual Control_ settings in [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor)'s intel section.",
            "examples": [
                {
                    "text": "```sqf\n0 setOvercast 1;\n0 setRain 1;\nforceWeatherChange; // Force immediate change overriding smooth transitions\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`forceWeatherChange`",
                    "returns": "`Nothing`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/forceWeatherChange"
        },
        "configuration": {
            "label": "forceWeatherChange",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Executes the given command(s) on every item of an `Array` or a `HashMap`.\n**Arma 2**: Since Arma 2, the variable [_x](https://community.bistudio.com/wiki/Magic%20Variables%23x) is always `private` to the `forEach` block so it is safe to nest them (see _Example 8_).",
            "examples": [
                {
                    "text": "```sqf\n\n// SQF\n{ _x setDamage 1 } forEach units player;\n\n```\n\n<sqs>\n; SQS\n\"_x setDammage 1\" forEach units player\n</sqs>"
                },
                {
                    "text": "This command can also easily be used to execute a single command multiple times without respect to the array items - see also `for`\n\n```sqf\n\n{ player addMagazine \"30Rnd_556x45_Stanag\" } forEach [1, 2, 3, 4];\n// equivalent to\nfor \"_i\" from 1 to 4 do { player addMagazine \"30Rnd_556x45_Stanag\" };\n\n```"
                },
                {
                    "text": "You can also use multiple commands in the same block:\n\n```sqf\n\n{\n\t_x setCaptive true;\n\tremoveAllWeapons _x;\n\tdoStop _x;\n} forEach units group this;\n\n```"
                },
                {
                    "text": "To get the index of a `forEach` loop, use [_forEachIndex](https://community.bistudio.com/wiki/Magic%20Variables%23forEachIndex):\n\n```sqf\n{ systemChat str _forEachIndex; } forEach [\"a\", \"b\", \"c\"]; // will return: \"0\", \"1\", \"2\" in systemChat messages\n```"
                },
                {
                    "text": "Iterating a `HashMap`'s [_forEachIndex](https://community.bistudio.com/wiki/Magic%20Variables%23forEachIndex):\n\n```sqf\n\n// shows \"0, k1, v1\", \"1, k2, v2\" in systemChat messages\n{\n\tsystemChat format [\"%1, %2, %3\", _forEachIndex, _x, _y];\n} forEach createHashMapFromArray [\n\t[\"k1\", \"v1\"],\n\t[\"k2\", \"v2\"]\n];\n\n```"
                },
                {
                    "text": "`findIf` equivalent for `HashMap`:\n\n```sqf\n\nprivate _resultKey = {\n\tif (_y isEqualTo \"wantedValue\") exitWith { _x };\n\t\"\"\n} forEach _hashmap;\n\n```"
                },
                {
                    "text": "Array is edited by reference:\n\n```sqf\n\n_arr1 = [1,2,3];\n_arr2 = [6,7,8];\n_arr3 = [0];\n{ _x set [1, \"changed\"] } forEach [_arr1, _arr2, _arr3];\n// _arr1 = [1, \"changed\", 3]\n// _arr2 = [6, \"changed\", 8]\n// _arr3 = [0, \"changed\"]\n\n```"
                },
                {
                    "text": "```sqf\n\n{\n\tprivate _verticalValue = _x; // needed, otherwise _horizontalValues' _x made this one inaccessible\n\t{\n\t\t[_x, _verticalValue] call TAG_fnc_doSomething;\n\t} forEach _horizontalValues;\n} forEach _verticalValues;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "{{!}} **(Arma 2",
                            "description": "Operation Arrowhead)**\n{{!}} **(Arma 3)**\n{{!}} {{GVI|tkoh|1.00}}\n{{!}}-\n! `String` support\n{{!}} colspan=\"2\" {{!}} {{Icon|checked}}\n{{!}} colspan=\"4\" {{!}} {{Icon|unchecked}}\n{{!}}-\n! `Code` support\n{{!}} {{Icon|unchecked}}\n{{!}} colspan=\"5\" {{!}} {{Icon|checked}}\n{{!}}}\ncode: `String` only in Operation Flashpoint and Armed Assault, {{GVI|arma1|1.00"
                        },
                        {
                            "name": "array",
                            "description": "`Array` - the array to iterate over"
                        }
                    ],
                    "outline": "code `forEach` array",
                    "returns": "`Anything` - will return the value of last executed statement"
                },
                {
                    "parameters": [
                        {
                            "name": "code",
                            "description": "`Code` - code applied to each key-value pair - available variables:\n* `**[_x](https://community.bistudio.com/wiki/Magic%20Variables%23x)**`: key\n* `**[_y](https://community.bistudio.com/wiki/Magic%20Variables%23x)**`: value\n* `**[_forEachIndex](https://community.bistudio.com/wiki/Magic%20Variables%23forEachIndex)**`: iteration number"
                        },
                        {
                            "name": "hashMap ",
                            "description": "`HashMap` - the HashMap to iterate over"
                        }
                    ],
                    "outline": "code `forEach` hashMap",
                    "returns": "`Anything` - will return the value of last executed statement"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/forEach"
        },
        "configuration": {
            "label": "forEach",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "Executes the given command recursively for both teams and agents that are members of the given team. For teams only use `forEachMemberTeam`. For agents only use `forEachMemberAgent`.",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "command",
                            "description": "`Code`"
                        },
                        {
                            "name": "team",
                            "description": "[Team Member](https://community.bistudio.com/wiki/Team%20Member)"
                        }
                    ],
                    "outline": "command `forEachMember` team",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/forEachMember"
        },
        "configuration": {
            "label": "forEachMember",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Executes the given command recursively for each agent that is a member of the given team. For just teams use `forEachMemberTeam`. For both teams and agents use `forEachMember`.",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "command",
                            "description": "`Code`"
                        },
                        {
                            "name": "team",
                            "description": "[Team Member](https://community.bistudio.com/wiki/Team%20Member)"
                        }
                    ],
                    "outline": "command `forEachMemberAgent` team",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/forEachMemberAgent"
        },
        "configuration": {
            "label": "forEachMemberAgent",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "Executes the given command recursively for each team that is a member of the given team. For just agents use `forEachMemberAgent`. For both teams and agents use `forEachMember`.",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "command",
                            "description": "`Code`"
                        },
                        {
                            "name": "team",
                            "description": "[Team Member](https://community.bistudio.com/wiki/Team%20Member)"
                        }
                    ],
                    "outline": "command `forEachMemberTeam` team",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/forEachMemberTeam"
        },
        "configuration": {
            "label": "forEachMemberTeam",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "Executes the given command(s) on every item of an `Array` in reversed order, compared to `forEach`.",
            "examples": [
                {
                    "text": "This command lets you easily iterate through an array from last to first element without modifying the array itself with `reverse` or using `for` loop with negative `step`.\n\n```sqf\n\n// Will show numbers from 5 to 1 in the chat\n{ systemChat str _x } forEachReversed [1, 2, 3, 4, 5];\n\n```"
                },
                {
                    "text": "Can be useful to walk through array while also deleting items from it, which you couldn't do with `forEach` as easily:\n\n```sqf\n\nprivate _array = [1, 1, 2, 2, 1, 1, 2, 2];\n{\n\tif (_x == 2) then { _array deleteAt _forEachIndex };\n} forEachReversed _array;\n// _array will be [1,1,1,1] here\n\n```\n\n\nWill not work with `forEach` as you might expect it:\n\n```sqf\n\nprivate _array = [1, 1, 2, 2, 1, 1, 2, 2];\n{\n\tif (_x == 2) then { _array deleteAt _forEachIndex };\n} forEach _array;\n// _array will be [1, 1, 2, 1, 1, 2] here\n\n```"
                },
                {
                    "text": "Deleting items from array with more complex condition than just comparison.\n\n```sqf\n\n{\n\tif (!alive _x) then { _vehicles deleteAt _forEachIndex };\n} forEachReversed _vehicles;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "code",
                            "description": "`Code` to execute on each array item - available variables:\n* `**[_x](https://community.bistudio.com/wiki/Magic%20Variables%23x)**`: iterated item\n* `**[_forEachIndex](https://community.bistudio.com/wiki/Magic%20Variables%23forEachIndex)**`: item's index"
                        },
                        {
                            "name": "array",
                            "description": "`Array` - the array to iterate over"
                        }
                    ],
                    "outline": "code `forEachReversed` array",
                    "returns": "`Anything` - will return the value of last executed statement"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/forEachReversed"
        },
        "configuration": {
            "label": "forEachReversed",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Resets the info a group has about a target, forcing `knowsAbout` value to 0.",
            "examples": [
                {
                    "text": "```sqf\nsoldier1 forgetTarget soldier2;\n```"
                },
                {
                    "text": "Give enemyBob some amnesia:\n\n```sqf\nonEachFrame { enemyBob forgetTarget player };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group` or `Object` - group itself or unit in a group"
                        },
                        {
                            "name": "target",
                            "description": "`Object` - group target"
                        }
                    ],
                    "outline": "group `forgetTarget` target",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/forgetTarget"
        },
        "configuration": {
            "label": "forgetTarget",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Composes a string containing other variables or other variable types. Converts any variable type to a string. If you want to convert a string back to a number, use `parseNumber`.\n**IMPORTANT**:  The output of this command is limited to ~8Kb. `joinString` on the other hand doesn't have such limit and is a bit faster.",
            "examples": [
                {
                    "text": "```sqf\nformat [\"Player:%1, player's side:%2\", player, side player]; // returns \"Player:WEST 1-1-A:1 (Username), player's side:WEST\"\n```"
                },
                {
                    "text": "```sqf\n\nplayer addEventHandler [\"HandleDamage\", {\n\thint format [\"You just sustained %1%2 damage!\", ceil ((_this select 2) * 100), \"%\"];\n}]; // Shows \"You just sustained 20% damage!\"\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "formatString",
                            "description": "`String` - a string containing text and/or references to the variables listed below in the array. The references appear in the form of %1, %2 etc."
                        },
                        {
                            "name": "varN",
                            "description": "`Anything` - variable referenced by %N"
                        }
                    ],
                    "outline": "`format` [formatString, var1, var2, ...]",
                    "returns": "`String` - the full string (up to 8kb, see above) is returned."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/format"
        },
        "configuration": {
            "label": "format",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the current formation of a group.",
            "examples": [
                {
                    "text": "```sqf\nif (formation group player == \"wedge\") then { hint \"this is the default formation\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Object` or `Group`"
                        }
                    ],
                    "outline": "`formation`  target",
                    "returns": "`String` - can return:\n{{Columns|3|\n* \"COLUMN\"\n* \"STAG COLUMN\"\n* \"WEDGE\"\n* \"ECH LEFT\"\n* \"ECH RIGHT\"\n* \"VEE\"\n* \"LINE\"\n* \"FILE\"\n* \"DIAMOND\"\n}}"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/formation"
        },
        "configuration": {
            "label": "formation",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return the direction in degrees of the 'unit' watching in formation.",
            "examples": [
                {
                    "text": "```sqf\n_degrees = formationDirection _unit;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`formationDirection` unitName",
                    "returns": "`Number`"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/formationDirection"
        },
        "configuration": {
            "label": "formationDirection",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return leader of the formation.",
            "examples": [
                {
                    "text": "```sqf\nif (formationLeader player != leader player) then\n{\n\thint \"Formation leader is not the group leader.\";\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`formationLeader` unitName",
                    "returns": "`Object`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/formationLeader"
        },
        "configuration": {
            "label": "formationLeader",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return list of units (drivers) in the formation.",
            "examples": [
                {
                    "text": "```sqf\n_drivers = formationMembers _person;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "person",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`formationMembers` person",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/formationMembers"
        },
        "configuration": {
            "label": "formationMembers",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return position of unit in the formation.",
            "examples": [
                {
                    "text": "```sqf\n_pos = formationPosition _unit;\n```"
                },
                {
                    "text": "```sqf\n\n// Reposition entire group to a new position (ground level)\nprivate _group = group player;\nprivate _leader = leader _group;\n\n// Set the leader to the spawn position\n_leader setPosATL markerPos \"spawn_position\";\n\n// Reposition all units of the group except the leader\n{\n\tprivate _formationPos = formationPosition _x;\n\t_formationPos set [2, 0];\n\t_x setPosATL _formationPos;\n} forEach (units _group - [_leader]);\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`formationPosition` unit",
                    "returns": "`Position`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/formationPosition"
        },
        "configuration": {
            "label": "formationPosition",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return the current task of the unit in the formation.",
            "examples": [
                {
                    "text": "```sqf\n_currentTask = formationTask _unit;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`formationTask` unit",
                    "returns": "`String`: \"EXCLUDED\", \"MOVE\", \"COVER\", \"LEADER\", \"NOTHING\""
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/formationTask"
        },
        "configuration": {
            "label": "formationTask",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates a [Structured Text](https://community.bistudio.com/wiki/Structured%20Text) similar to `format` command.",
            "examples": [
                {
                    "text": "```sqf\nhint formatText [\"Image: %1\", image \"\\a3\\Data_f\\Flags\\flag_Altis_co.paa\"];\n```"
                },
                {
                    "text": "```sqf\n\nhint formatText [\"%1%2%3\", \"line1\", \"<br/>\", \"line2\"];\t\t// result displayed in one line\nhint formatText [\"%1%2%3\", \"line1\", lineBreak, \"line2\"];\t// result displayed in two lines\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "format",
                            "description": "`String` - a string containing text and/or references to the variables listed below in the array. The references appear in the form of %1, %2 etc."
                        },
                        {
                            "name": "argumentN",
                            "description": "`Anything` - use [Structured Text](https://community.bistudio.com/wiki/Structured%20Text) where necessary (see [Example 2](https://community.bistudio.com/wiki/%23Example))"
                        }
                    ],
                    "outline": "`formatText` [format, argument1, argument2, ...]",
                    "returns": "[Structured Text](https://community.bistudio.com/wiki/Structured%20Text)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/formatText"
        },
        "configuration": {
            "label": "formatText",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the formation leader of a given unit.\nThis is often the same as the group leader, but not always, for example in cases when a unit is ordered to follow another unit.",
            "examples": [
                {
                    "text": "```sqf\nif (formLeader player != leader player) then\n{\n\thint \"The formation leader is different to the group leader!\";\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`formLeader` unitName",
                    "returns": "`Object` - the leader of the formation is returned. If used on a dead unit, the returned value is `objNull`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/formLeader"
        },
        "configuration": {
            "label": "formLeader",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Unloads given extension loaded previously with `callExtension` so that extension developer could rapidly tweak developed extension without restarting the game.\n**IMPORTANT**: This command was introduced in Arma 3 dev v2.11.149751 and is only effective in DevBranch; it does nothing in stable branch.",
            "examples": [
                {
                    "text": "```sqf\nfreeExtension \"myExt\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "extension",
                            "description": "`String` - extension name (see `callExtension`)"
                        }
                    ],
                    "outline": "`freeExtension` extension",
                    "returns": "`Boolean` or `Nothing`\n* `false` if extension unloading attempt failed, `true` otherwise\n* `Nothing` if not dev branch"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/freeExtension"
        },
        "configuration": {
            "label": "freeExtension",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns if freelook is active on the current machine's controlled character.",
            "examples": [
                {
                    "text": "```sqf\nif freeLook then\n{\n\tsystemChat \"Quit looking around, soldier!\";\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`freeLook`",
                    "returns": "`Boolean` - `true` if freelook is active, `false` otherwise"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/freeLook"
        },
        "configuration": {
            "label": "freeLook",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Continue sequence of `for` construct. It sets the start value of the index variable.",
            "examples": [
                {
                    "text": "```sqf\n\nfor \"_i\" from 10 to 20 do\n{\n\thint str _i; // will hint from 10 to 20, spaced by 1 second\n\tsleep 1;\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "for",
                            "description": "[For Type](https://community.bistudio.com/wiki/For%20Type)"
                        },
                        {
                            "name": "b",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "for `from` b",
                    "returns": "[For Type](https://community.bistudio.com/wiki/For%20Type)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/from"
        },
        "configuration": {
            "label": "from",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "Return if given team was inserted directly from mission editor.\n**NOTE**: Some Old Editor Command",
            "examples": [
                {
                    "text": "```sqf\n_fromEditor = fromEditor _member;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "teamMember",
                            "description": "[Team Member](https://community.bistudio.com/wiki/Team%20Member)"
                        }
                    ],
                    "outline": "`fromEditor` teamMember",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/fromEditor"
        },
        "configuration": {
            "label": "fromEditor",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks how much fuel is left in the gas tank of a vehicle.",
            "examples": [
                {
                    "text": "```sqf\nif (fuel vehicle player == 0) then { hint \"The vehicle is out of fuel!\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`fuel` vehicle",
                    "returns": "`Number` - the returned number is in range 0 (empty tank) to 1 (full tank)."
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/fuel"
        },
        "configuration": {
            "label": "fuel",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array with all crew inside given vehicle, with or without empty seats.\n\n**IMPORTANT**: \nWith the introduction of person turrets (FFV), the returned _cargoIndex_ works with `moveInCargo` but does not with `action`s such as \"GetInCargo\" and \"MoveToCargo\".\nTo find out indexes for actions, use the \"cargo\" filter (See _Example 3_).",
            "examples": [
                {
                    "text": "```sqf\n\n_list = fullCrew vehicle player;\n/*\n\treturns for example (on an armed WY-55 Hellcat):\n\t[\n\t\t[R Alpha 1-1:1, \"driver\", -1, [], false, R Alpha 1-1:1, \"$STR_POSITION_DRIVER\"],\n\t\t[R Alpha 1-1:2, \"turret\", -1, [0], false, R Alpha 1-1:2, \"$STR_A3_COPILOT\"]\n\t]\n*/\n\n```"
                },
                {
                    "text": "```sqf\n\n_list = fullCrew [vehicle player, \"turret\"];\n/*\n\treturns for example (on an armed WY-55 Hellcat):\n\t[\n\t\t[R Alpha 1-1:2, \"turret\", -1, [0], false, R Alpha 1-1:2, \"$STR_A3_COPILOT\"]\n\t]\n*/\n\n```"
                },
                {
                    "text": "```sqf\n\nprivate _actionCompatibleCargoIndexes = fullCrew [heli, \"cargo\", true];\n/*\n\treturns for example (on an empty armed WY-55 Hellcat):\n\t[\n\t\t[objNull, \"cargo\", 2, [], false, objNull, \"$STR_GETIN_POS_PASSENGER\"],\n\t\t[objNull, \"cargo\", 3, [], false, objNull, \"$STR_GETIN_POS_PASSENGER\"],\n\t\t[objNull, \"cargo\", 4, [], false, objNull, \"$STR_GETIN_POS_PASSENGER\"],\n\t\t[objNull, \"cargo\", 5, [], false, objNull, \"$STR_GETIN_POS_PASSENGER\"]\n\t]\n\tusing the element's index is compatible with action cargo commands - see below\n*/\n\n// the following commands will put the player in the same seat:\nplayer moveInCargo [heli, 2];\nplayer action [\"GetInCargo\", heli, 0];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`fullCrew` vehicle",
                    "returns": "`Array` - list of arrays in format [unit, role, cargoIndex, turretPath, personTurret, assignedUnit, positionName]:\n* unit: `Object`\n* role: `String` - not always lowercase before {{GVI|arma3|2.04"
                },
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "type",
                            "description": "`String` - role filter (case-insensitive). An invalid value (e.g \"\") will return all positions. Available values:\n* \"driver\"\n* \"commander\"\n* \"gunner\"\n* \"turret\"\n* \"cargo\""
                        },
                        {
                            "name": "includeEmpty",
                            "description": "`Boolean` - (Optional, default `false`) include empty crew seats"
                        }
                    ],
                    "outline": "`fullCrew` [vehicle, type, includeEmpty]",
                    "returns": "`Array` - list of arrays in format [unit, role, cargoIndex, turretPath, personTurret, assignedUnit, positionName]:\n* unit: `Object`\n* role: `String` - not always lowercase before {{GVI|arma3|2.04"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/fullCrew"
        },
        "configuration": {
            "label": "fullCrew",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns ammo count of assigned magazine.",
            "examples": [
                {
                    "text": "```sqf\n_ammoCount = gearIDCAmmoCount _control;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - idc of control type CT_ITEMSLOT 103"
                        }
                    ],
                    "outline": "`gearIDCAmmoCount` idc",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/gearIDCAmmoCount"
        },
        "configuration": {
            "label": "gearIDCAmmoCount",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns ammo count of assigned magazine.",
            "examples": [
                {
                    "text": "```sqf\nammo = gearSlotAmmoCount _control;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control` - CT_ITEMSLOT 103"
                        }
                    ],
                    "outline": "`gearSlotAmmoCount` control",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/gearSlotAmmoCount"
        },
        "configuration": {
            "label": "gearSlotAmmoCount",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns gear slot item name.",
            "examples": [
                {
                    "text": "```sqf\ngearSlotData _myControl;\n```"
                },
                {
                    "text": "Open any ammobox and click by any gear slots:\n\n```sqf\n\nprivate \"_display\";\ndisableSerialization;\n\nwaitUntil {\n\t_display = findDisplay 106;\n\t! isNull _display;\n};\n\nuiNamespace setVariable [\"/TAG/RscDisplayGear/SlotDataEH\", {\n\t_weaponName = gearSlotData (_this select 0);\n\t_conf = configFile >> _confSection >> _weaponName;\n\t_name = getText (_conf >> \"displayName\");\n\t_desc = getText (_conf >> \"Library\" >> \"libTextDesc\");\n\t_image = getText (_conf >> \"picture\");\n\thint parseText format [\n\t\t\"<t size='1.3' align='center' shadow='true' shadowColor='#000000'>%1</t><br><img image='%2' size='6' align='center' /><br>%3<br>%4\",\n\t\t_name, _image, _desc\n\t];\n}];\n\nfor \"_i\" from 107 to 145 do {\n\t_display displayCtrl _i ctrlAddEventHandler [\"ButtonClick\",\n\t\tformat [\n\t\t\t\"_confSection = '%1'; _this call (uiNamespace getVariable '/TAG/RscDisplayGear/SlotDataEH');\",\n\t\t\tif (_i >= 109 && _i <= 129) then { \"CfgMagazines\" } else { \"CfgWeapons\" }\n\t\t]\n\t];\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control` - CT_ITEMSLOT 103"
                        }
                    ],
                    "outline": "`gearSlotData` control",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/gearSlotData"
        },
        "configuration": {
            "label": "gearSlotData",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the name of a unit's current gesture. Seems to be forced to lower case in Arma 3.\n**NOTE**: This command is only for a man unit, other units such as animals cannot use this command.",
            "examples": [
                {
                    "text": "```sqf\nprivate _state = gestureState player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`gestureState` unitName",
                    "returns": "`String` - empty string if not available"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/gestureState"
        },
        "configuration": {
            "label": "gestureState",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Retrieves a value out of a `HashMap` after looking it up by its key.",
            "examples": [
                {
                    "text": "```sqf\nprivate _myValue = _myHashMap get \"a\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "hashMap",
                            "description": "`HashMap`"
                        },
                        {
                            "name": "key",
                            "description": "`HashMapKey` - case sensitive key"
                        }
                    ],
                    "outline": "hashMap `get` key",
                    "returns": "`Anything`, or `Nothing` if _key_ is not found"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/get"
        },
        "configuration": {
            "label": "get",
            "grammarType": "property-accessor"
        }
    },
    {
        "documentation": {
            "description": "Returns state of given [Eden Editor action](https://community.bistudio.com/wiki/Eden%20Editor%3A%20Actions).",
            "examples": [
                {
                    "text": "```sqf\nif (get3DENActionState \"ToggleMap\" == 1) then {systemChat \"Editor map is open!\"};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "action",
                            "description": "`String` - see [Eden Editor: Actions](https://community.bistudio.com/wiki/Eden%20Editor%3A%20Actions)"
                        }
                    ],
                    "outline": "`get3DENActionState`  action",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/get3DENActionState"
        },
        "configuration": {
            "label": "get3DENActionState",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the value of the given entity's [attribute](https://community.bistudio.com/wiki/Eden_Editor%3A_Entity_Attributes) in [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor).\n\n\nAn attribute is identified by its `**property**` (`**data**` when it is engine-drive attribute) value in config. For the list of all attributes with their properties, see [Setting Attributes](https://community.bistudio.com/wiki/Eden_Editor%3A_Setting_Attributes%23Attributes).\n\n**IMPORTANT**: Attributes are available only within the Eden Editor workspace. You cannot access them in scenario preview or exported scenario!",
            "examples": [
                {
                    "text": "```sqf\n// returns variable name of the object under cursor\nsystemChat str ((get3DENMouseOver select 1) get3DENAttribute \"name\");\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "[Eden Entity](https://community.bistudio.com/wiki/Eden%20Entity) or [Eden ID](https://community.bistudio.com/wiki/Eden%20ID)"
                        },
                        {
                            "name": "attribute",
                            "description": "`String` - attribute property"
                        }
                    ],
                    "outline": "entity `get3DENAttribute` attribute",
                    "returns": "`Array` with `Anything`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/get3DENAttribute"
        },
        "configuration": {
            "label": "get3DENAttribute",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Retrieve all attributes and their values of the specified (optional) category.",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "`Object`"
                        },
                        {
                            "name": "category",
                            "description": "`String`"
                        }
                    ],
                    "outline": "entity `get3DENAttributes` category",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/get3DENAttributes"
        },
        "configuration": {
            "label": "get3DENAttributes",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the camera `Object` used by the [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor).",
            "examples": [
                {
                    "text": "```sqf\n// set exact yaw, pitch, and roll\n_y = 45; _p = -80; _r = 0;\nget3DENCamera setVectorDirAndUp [\n\t[sin _y * cos _p,cos _y * cos _p,sin _p],\n\t[[sin _r,-sin _p,cos _r * cos _p],-_y] call BIS_fnc_rotateVector2D\n];\n```"
                },
                {
                    "text": "```sqf\n//Look at player\n_a = positionCameraToWorld [0,0,0] vectorFromTo (getPosATL player);\n_y = asin(_a select 0);\n_b = [_a,_y] call BIS_fnc_rotateVector2D;\n_z = _b select 2;\n_p = asin(_z / sqrt((_b select 1)^2 + _z^2));\nget3DENCamera setVectorDirAndUp [\n\t_a,\n\t[[0,-sin _p,cos _p],-_y] call BIS_fnc_rotateVector2D\n];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`get3DENCamera`",
                    "returns": "`Object` - [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor) camera"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/get3DENCamera"
        },
        "configuration": {
            "label": "get3DENCamera",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns all [connections](https://community.bistudio.com/wiki/Eden%20Editor%3A%20Connecting) currently present on an entity.",
            "examples": [
                {
                    "text": "```sqf\nget3DENConnections _trigger; // Can return [[\"WaypointActivation\",[B Alpha 4-5,0]]]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "[Eden Entity](https://community.bistudio.com/wiki/Eden%20Entity) or [Eden ID](https://community.bistudio.com/wiki/Eden%20ID)"
                        }
                    ],
                    "outline": "`get3DENConnections`  entity",
                    "returns": "`Array` in format: `**[[type1, to1], [type2, to2], ..., [typeN, toN]]**`\n* type: `String` - connection class from _Cfg3DEN >> Connections_\n* to: [Eden Entity](https://community.bistudio.com/wiki/Eden%20Entity): Entitiy the connection leads to"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/get3DENConnections"
        },
        "configuration": {
            "label": "get3DENConnections",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns [Eden Entity](https://community.bistudio.com/wiki/Eden%20Entity) based on its [Eden ID](https://community.bistudio.com/wiki/Eden%20ID).",
            "examples": [
                {
                    "text": "```sqf\nmyEntity = get3DENEntity 1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "ID",
                            "description": "`Number` - [Eden ID](https://community.bistudio.com/wiki/Eden%20ID)"
                        }
                    ],
                    "outline": "`get3DENEntity`  ID",
                    "returns": "[Eden Entity](https://community.bistudio.com/wiki/Eden%20Entity), `Number`\n* If the _ID_ points to an [Eden Entity](https://community.bistudio.com/wiki/Eden%20Entity) the entity is returned\n* If it points to a [Eden Editor: Layer](https://community.bistudio.com/wiki/Eden%20Editor%3A%20Layer) or [Eden Editor: Comment](https://community.bistudio.com/wiki/Eden%20Editor%3A%20Comment) the _ID_ is returned\n* If no entity with given _ID_ exists `**-1**` is returned"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/get3DENEntity"
        },
        "configuration": {
            "label": "get3DENEntity",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns unique index of an [Eden Entity](https://community.bistudio.com/wiki/Eden%20Entity). This number remains the same even after saving and loading the scenario. **NOTE**: This ID is only available in [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor).",
            "examples": [
                {
                    "text": "```sqf\nmyID = get3DENEntityID player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "[Eden Entity](https://community.bistudio.com/wiki/Eden%20Entity) or [Eden ID](https://community.bistudio.com/wiki/Eden%20ID)"
                        }
                    ],
                    "outline": "`get3DENEntityID` entity",
                    "returns": "`Number` - [Eden ID](https://community.bistudio.com/wiki/Eden%20ID) If ID is not available, -1 is returned"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/get3DENEntityID"
        },
        "configuration": {
            "label": "get3DENEntityID",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the grid increment for the given transformation type.",
            "examples": [
                {
                    "text": "```sqf\n_currentIncrement = get3DENGrid \"t\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`String` - name of transformation type. Can be:\n* `**\"r\"**` - Rotation\n* `**\"t\"**` - Translation\n* `**\"s\"**` - Scale"
                        }
                    ],
                    "outline": "`get3DENGrid`  type",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/get3DENGrid"
        },
        "configuration": {
            "label": "get3DENGrid",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets visibility state of [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor) icons.",
            "examples": [
                {
                    "text": "```sqf\nif (get3DENIconsVisible select 0) then {hint \"Icons are visible in the map.\";};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`get3DENIconsVisible`",
                    "returns": "`Array` in format [showMap, showScene]\n* showScene: `Boolean` - Visibility in the scene\n* showMap : `Boolean` - Visibility in the map"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/get3DENIconsVisible"
        },
        "configuration": {
            "label": "get3DENIconsVisible",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the provided entity's layer ID.",
            "examples": [
                {
                    "text": "```sqf\nhint format [\"Entity %1 is in layer %2\", typeOf _entity, get3DENLayer _entity];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "edenEntity",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`get3DENLayer` edenEntity",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/get3DENLayer"
        },
        "configuration": {
            "label": "get3DENLayer",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return all entities and sub-layer in [Eden Entity](https://community.bistudio.com/wiki/Eden%20Entity) layer. In order to get all layer entities during a scenario use `getMissionLayerEntities`.",
            "examples": [
                {
                    "text": "```sqf\n_myLayer = -1 add3DENLayer \"CTRG\";\nplayer set3DENLayer _myLayer;\n_entities = get3DENLayerEntities _myLayer;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "layerID",
                            "description": "`Number` - layer ID as returned by `add3DENLayer` command"
                        }
                    ],
                    "outline": "`get3DENLayerEntities` layerID",
                    "returns": "`Array` of [Eden Entities](https://community.bistudio.com/wiki/Eden%20Entity)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/get3DENLayerEntities"
        },
        "configuration": {
            "label": "get3DENLayerEntities",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get visibility state of [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor) lines.",
            "examples": [
                {
                    "text": "```sqf\nif (get3DENLinesVisible select 0) then { hint \"Lines are visible in the map.\"; };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`get3DENLinesVisible`",
                    "returns": "`Array` in format [showMap, showScene]\n* showScene: `Boolean` - visibility in the scene\n* showMap : `Boolean` - visibility in the map"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/get3DENLinesVisible"
        },
        "configuration": {
            "label": "get3DENLinesVisible",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return value of [scenario attribute](https://community.bistudio.com/wiki/Eden_Editor%3A_Scenario_Atttributes). For a list of all available mission attributes see [Mission Attributes](https://community.bistudio.com/wiki/Eden_Editor%3A_Setting_Attributes%23Scenario).\n**IMPORTANT**: Attributes are available only within the Eden Editor workspace. You cannot access them in scenario preview or exported scenario!",
            "examples": [
                {
                    "text": "```sqf\nsystemChat str (\"Multiplayer\" get3DENMissionAttribute \"respawn\");\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "section",
                            "description": "`String` - attribute section. See [[Eden_Editor:_Setting_Attributes#Sections_.26_Properties|Sections & Properties]]"
                        },
                        {
                            "name": "class",
                            "description": "`String` - attribute name"
                        }
                    ],
                    "outline": "section `get3DENMissionAttribute` class",
                    "returns": "`Anything`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/get3DENMissionAttribute"
        },
        "configuration": {
            "label": "get3DENMissionAttribute",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Retrieve all attributes and their values from the specified section/category (category is optional).",
            "examples": [
                {
                    "text": "```sqf\nprivate _result = \"Multiplayer\" get3DENMissionAttributes \"\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "section",
                            "description": "`String`"
                        },
                        {
                            "name": "category",
                            "description": "`String`"
                        }
                    ],
                    "outline": "section `get3DENMissionAttributes` category",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/get3DENMissionAttributes"
        },
        "configuration": {
            "label": "get3DENMissionAttributes",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the [Eden Entity](https://community.bistudio.com/wiki/Eden%20Entity) the mouse is hovering over in [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor).",
            "examples": [
                {
                    "text": "```sqf\nsystemChat str get3DENMouseOver; // returns e.g [\"Object\", B Alpha 1-1:1]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`get3DENMouseOver`",
                    "returns": "`Array` in format [type, entity]:\n\n* type: `String` - can be one of:\n** \"Object\"\n** \"Group\"\n** \"Trigger\"\n** \"Logic\"\n** \"Waypoint\"\n** \"Marker\"\n* entity: [Eden Entity](https://community.bistudio.com/wiki/Eden%20Entity)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/get3DENMouseOver"
        },
        "configuration": {
            "label": "get3DENMouseOver",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Obtain the provided entity's parent.",
            "examples": [
                {
                    "text": "```sqf\nprivate _parent = get3DENParent _myObject;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`get3DENParent` entity",
                    "returns": "`Object`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/get3DENParent"
        },
        "configuration": {
            "label": "get3DENParent",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array of all selected [Eden Editor Entities](https://community.bistudio.com/wiki/Eden%20Entity) of the given type.\n\nIf a wrong type is provided, `**[[], [], [], [], [], []]**` is returned and an error message is shown.",
            "examples": [
                {
                    "text": "```sqf\n\nget3DENSelected \"\";\n\n/*\n[\n\t[B Alpha 2-1:1],\t\t\t\t// objects\n\t[B Alpha 2-1],\t\t\t\t\t// groups\n\t[164494: <no shape>],\t\t\t// triggers\n\t[<No center> Charlie 1-2:4],\t// logic\n\t[[B Alpha 2-1,0]],\t\t\t\t// waypoints\n\t[\"Hotel_Whiskey\"]\t\t\t\t// markers\n]\n*/\n\n```"
                },
                {
                    "text": "```sqf\nget3DENSelected \"object\"; // [B Alpha 2-1:1]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`String` - entity type, can be one of:\n{{Columns|2|\n* `**\"object\"**`\n* `**\"group\"**`\n* `**\"trigger\"**`\n* `**\"logic\"**`\n* `**\"waypoint\"**`\n* `**\"marker\"**`\n* `**\"layer\"**`\n* `**\"comment\"**`\n* `**\"\"**` - everything but \"layer\" and \"comment\"\n}}"
                        }
                    ],
                    "outline": "`get3DENSelected` type",
                    "returns": "`Array` - array of entities"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/get3DENSelected"
        },
        "configuration": {
            "label": "get3DENSelected",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get current aiming coefficient (higher ~ less precise, default is 1)",
            "examples": [
                {
                    "text": "_coef = `getAimingCoef` `player`"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getAimingCoef` unit",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getAimingCoef"
        },
        "configuration": {
            "label": "getAimingCoef",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array containing the names and values of environmental 2D sound controllers, variables that can be used in simple expressions when configuring sounds.\n**IMPORTANT**: \n* Controller names are case sensitive\n* Wind param difference:\n** `**wind**` is for **3D** controller\n** `**wind**y****` is for **2D** controller (`getAllEnvSoundControllers`)",
            "examples": [
                {
                    "text": "```sqf\n\ngetAllEnv3DSoundControllers _thatTreeOverThere;\n/*\n\treturns e.g\n\t[\n\t\t[\"rain\",0],\n\t\t[\"night\",0],\n\t\t[\"wind\",0.161588],\n\t\t...\n\t]\n*/\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - environmental sound source like a tree or a house, see `allEnv3DSoundSources`"
                        }
                    ],
                    "outline": "`getAllEnv3DSoundControllers` object",
                    "returns": "`Array` in format [<nowiki/>[\"controllerA\", valueA], [\"controllerB\", valueB], ...], controllers being, in order:\n{{Columns|3|\n* `**\"rain\"**`\n* `**\"night\"**`\n* `**\"wind\"**`\n* `**\"daytime\"**`\n* `**\"distance\"**`\n* `**\"shooting\"**`\n* `**\"meadows\"**`\n* `**\"trees\"**`\n* `**\"houses\"**`\n* `**\"forest\"**`\n* `**\"sea\"**`\n* `**\"altitudeSea\"**`\n* `**\"altitudeGround\"**`\n* `**\"rainDrops\"**`\n* `**\"yearTime\"**`\n* `**\"ambientTemp\"**`\n* `**\"snow\"**`\n}}"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getAllEnv3DSoundControllers"
        },
        "configuration": {
            "label": "getAllEnv3DSoundControllers",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array containing the names and values of environmental 2D sound controllers, variables that can be used in simple expressions when configuring sounds.\n**IMPORTANT**: \n* Controller names are case sensitive\n* Please note that the name for the wind param for **2D** controller is 'windy', 'wind' being the name for the **3D** controller `getAllEnv3DSoundControllers`.",
            "examples": [
                {
                    "text": "```sqf\n\ngetAllEnvSoundControllers position player;\n/*\n\treturns e.g\n\t[\n\t\t[\"rain\",0],\n\t\t[\"night\",0],\n\t\t[\"windy\",0.161588],\n\t\t...\n\t]\n*/\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Position`"
                        }
                    ],
                    "outline": "`getAllEnvSoundControllers` position",
                    "returns": "`Array` in format [<nowiki/>[\"controllerA\", valueA], [\"controllerB\", valueB], ...], controllers being, in order:\n{{Columns|3|\n* `**\"rain\"**`\n* `**\"night\"**`\n* `**\"windy\"**`\n* `**\"daytime\"**`\n* `**\"meadows\"**`\n* `**\"trees\"**`\n* `**\"houses\"**`\n* `**\"forest\"**`\n* `**\"sea\"**`\n* `**\"coast\"**`\n* `**\"altitudeGround\"**`\n* `**\"altitudeSea\"**`\n* `**\"shooting\"**`\n* `**\"deadbody\"**`\n* `**\"fog\"**`\n* {{GVI|arma3|2.08"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getAllEnvSoundControllers"
        },
        "configuration": {
            "label": "getAllEnvSoundControllers",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get provided object's hit points damage.",
            "examples": [
                {
                    "text": "```sqf\nhint str getAllHitPointsDamage player;\n/*\n[\n\t[\"hitface\",\"hitneck\",\"hithead\",\"hitpelvis\",\"hitabdomen\",\"hitdiaphragm\",\"hitchest\",\"hitbody\",\"hitarms\",\"hithands\",\"hitlegs\",\"incapacitated\"],\n\t[\"face_hub\",\"neck\",\"head\",\"pelvis\",\"spine1\",\"spine2\",\"spine3\",\"body\",\"arms\",\"hands\",\"legs\",\"body\"],\n\t[0,0,0,0,0,0,0,0,0,0,0,0]\n]\n*/\n\n```"
                },
                {
                    "text": "```sqf\nhint str getAllHitPointsDamage vehicle player;\n/*\n[\n\t[\"hithull\",\"hitengine\",\"hitengine2\",\"hitavionics\",\"hitfuel\",\"hitfuel2\",\"hitglass1\",\"hitlaileron\",\"hitraileron\",\"hitlcrudder\",\"hitrrudder\",\"hitlcelevator\",\"hitrelevator\",\"#gear_f_lights\"],\n\t[\"hithull\",\"hitengine\",\"hitengine2\",\"hitavionics\",\"hitfuel\",\"hitfuel2\",\"hitglass1\",\"hitlaileron\",\"hitraileron\",\"hitlcrudder\",\"hitrrudder\",\"hitlcelevator\",\"hitrelevator\",\" \"],\n\t[0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n]\n*/\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "`Object` - object to be queried"
                        }
                    ],
                    "outline": "`getAllHitPointsDamage` entity",
                    "returns": "`Array` - [] if entity is null or has no shape, otherwise [hitpointNames, selectionNames, damageValues]:\n* hitpointNames: `Array` of `String`s\n* selectionNames: `Array` of `String`s\n* damageValues: `Array` of `Number`s - in range 0..1 where 0 = no damage, 1 = full damage\nAll values in all arrays are ordered accordingly to hit part index for convenience and for use in `setHitIndex` and `getHitIndex`."
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getAllHitPointsDamage"
        },
        "configuration": {
            "label": "getAllHitPointsDamage",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets all mine objects this unit has ownership over.",
            "examples": [
                {
                    "text": "```sqf\n_mines = getAllOwnedMines player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getAllOwnedMines` unit",
                    "returns": "`Array` of `Object`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getAllOwnedMines"
        },
        "configuration": {
            "label": "getAllOwnedMines",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return an array with the vehicle's all pylons info.",
            "examples": [
                {
                    "text": "```sqf\n\ngetAllPylonsInfo vehicle player;\n/*\n\tExecuted on an Mi-48 Kajman:\n\t[\n\t\t[1,\"PylonLeft1\",[0],\"PylonRack_4Rnd_LG_scalpel\",4,\"0:10000646\"],\n\t\t[2,\"PylonLeft2\",[0],\"PylonRack_19Rnd_Rocket_Skyfire\",19,\"0:10000648\"],\n\t\t[3,\"PylonRight2\",[0],\"PylonRack_19Rnd_Rocket_Skyfire\",19,\"0:10000649\"],\n\t\t[4,\"PylonRight1\",[0],\"PylonRack_4Rnd_LG_scalpel\",4,\"0:10000650\"]\n\t]\n*/\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getAllPylonsInfo` vehicle",
                    "returns": "`Array` of `Array`s in format [Pylon index, Pylon name, Assigned turret, Magazine className, Magazine ammo count, [Magazine detail](https://community.bistudio.com/wiki/currentMagazineDetail)<nowiki>]</nowiki>"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getAllPylonsInfo"
        },
        "configuration": {
            "label": "getAllPylonsInfo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array containing names and values of the sound controllers that can be used in simple expressions when configuring sounds.",
            "examples": [
                {
                    "text": "```sqf\n\ngetAllSoundControllers vehicle player;\n/*\n\treturns e.g\n\t[\n\t\t[\"rpm\",0],\n\t\t[\"randomizer\",0.874332],\n\t\t[\"speed\",0],\n\t\t[\"thrust\",0],\n\t\t...\n\t]\n*/\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - a **vehicle** - this does not work on humans"
                        }
                    ],
                    "outline": "`getAllSoundControllers` vehicle",
                    "returns": "`Array` in format [<nowiki/>[\"controllerA\", valueA], [\"controllerB\", valueB], ...], controllers being, in order:\n{{Columns|4|\n* `**\"rpm\"**`\n* `**\"randomizer\"**`\n* `**\"speed\"**`\n* `**\"thrust\"**`\n* `**\"campos\"**`\n* `**\"engineon\"**`\n* `**\"rotorspeed\"**`\n* `**\"rotorthrust\"**`\n* `**\"angvelocity\"**`\n* `**\"gmeterz\"**`\n* `**\"roughness\"**`\n* `**\"dustness\"**`\n* `**\"damper0\"**`\n* `**\"damper1\"**`\n* `**\"damper2\"**`\n* `**\"damper3\"**`\n* `**\"rock\"**`\n* `**\"sand\"**`\n* `**\"grass\"**`\n* `**\"mud\"**`\n* `**\"gravel\"**`\n* `**\"asphalt\"**`\n* `**\"gear\"**`\n* `**\"flaps\"**`\n* `**\"rotpos\"**`\n* `**\"water\"**`\n* `**\"apu\"**`\n* `**\"batteries\"**`\n* `**\"rpmstarter\"**`\n* `**\"rpm1\"**`\n* `**\"rpmstarter1\"**`\n* `**\"motordamage\"**`\n* `**\"transmissiondamage\"**`\n* `**\"rotorbrake\"**`\n* `**\"slingloadactive\"**`\n* `**\"latslip\"**`\n* `**\"latslipdrive\"**`\n* `**\"longslip\"**`\n* `**\"longslipdrive\"**`\n* `**\"scrubland\"**`\n* `**\"scrubobject\"**`\n* `**\"scrubtree\"**`\n* `**\"scrubbuilding\"**`\n* `**\"scrubarmor\"**`\n* `**\"engineeffectivity\"**`\n* `**\"rain\"**`\n* `**\"wind\"**`\n* `**\"lateralmovement\"**`\n* `**\"playerpos\"**`\n* `**\"rotordamage\"**`\n* `**\"distance\"**`\n* `**\"machcone\"**`\n* `**\"camint\"**`\n* `**\"camext\"**`\n* `**\"houses\"**`\n* `**\"meadow\"**`\n* `**\"forest\"**`\n* `**\"trees\"**`\n* `**\"altRadar\"**`\n* `**\"acceleration\"**`\n* `**\"CustomSoundController1\"**`\n* `**\"CustomSoundController2\"**`\n* `**\"CustomSoundController3\"**`\n* `**\"CustomSoundController4\"**`\n* `**\"CustomSoundController5\"**`\n* `**\"CustomSoundController6\"**`\n* `**\"CustomSoundController7\"**`\n* `**\"CustomSoundController8\"**`\n* `**\"CustomSoundController9\"**`\n* `**\"CustomSoundController10\"**`\n* `**\"CustomSoundController11\"**`\n* `**\"CustomSoundController12\"**`\n* `**\"CustomSoundController13\"**`\n* `**\"CustomSoundController14\"**`\n* `**\"CustomSoundController15\"**`\n* `**\"CustomSoundController16\"**`\n* `**\"CustomSoundController17\"**`\n* `**\"CustomSoundController18\"**`\n* `**\"CustomSoundController19\"**`\n* `**\"CustomSoundController20\"**`\n* `**\"CustomSoundController21\"**`\n* `**\"CustomSoundController22\"**`\n* `**\"CustomSoundController23\"**`\n* `**\"CustomSoundController24\"**`\n* `**\"CustomSoundController25\"**`\n* `**\"CustomSoundController26\"**`\n* `**\"CustomSoundController27\"**`\n* `**\"CustomSoundController28\"**`\n* `**\"CustomSoundController29\"**`\n* `**\"CustomSoundController30\"**`\n* `**\"CustomSoundController31\"**`\n* `**\"CustomSoundController32\"**`\n}}"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getAllSoundControllers"
        },
        "configuration": {
            "label": "getAllSoundControllers",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns unit traits (native or set by `setUnitTrait`).",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _playerTraits = getAllUnitTraits player;\n/*\nCould return something like this:\n[\n\t[\"Medic\", false],\n\t[\"Engineer\", false],\n\t[\"ExplosiveSpecialist\", false],\n\t[\"UavHacker\", false],\n\t[\"CamouflageCoef\", 1],\n\t[\"AudibleCoef\", 1],\n\t[\"LoadCoef\", 1],\n\t[\"test\", \"custom\"]\n]\n*/\n\n```"
                },
                {
                    "text": "```sqf\n\nprivate _unitTraits = getAllUnitTraits _unit;\nprivate _indexes = [_unitTraits, \"Medic\"] call BIS_fnc_findNestedElement;\nprivate _unitCanHeal = _unitTraits select (_indexes select 0) select 1;\n\n```"
                },
                {
                    "text": "Since {{GVI|arma3|2.18"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` or {{GVI|arma3|2.18"
                        }
                    ],
                    "outline": "`getAllUnitTraits` unit",
                    "returns": "`Array` of `Array`s in format [name, value] where:\n* name: `String` - trait's name\n* value `String` or `Boolean` - trait's value"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getAllUnitTraits"
        },
        "configuration": {
            "label": "getAllUnitTraits",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the amount (1 is full) of ammo resources in the cargo space of a rearm vehicle.\n**NOTE**: Since Arma 3 v1.96 the return value for vehicles that are not configured to have ability to rearm other vehicles is -1. (Prior to that the value was negative infinity)",
            "examples": [
                {
                    "text": "```sqf\nvalue = getAmmoCargo myVehicleName;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getAmmoCargo` vehicle",
                    "returns": "`Number` - ammo cargo value, -1 if ammo cargo is not supported, 0 if the vehicle is !`alive` or `isNull`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getAmmoCargo"
        },
        "configuration": {
            "label": "getAmmoCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns aim precision for current animation",
            "examples": [
                {
                    "text": "```sqf\nprivate _aimPrecision = getAnimAimPrecision player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getAnimAimPrecision` unit",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getAnimAimPrecision"
        },
        "configuration": {
            "label": "getAnimAimPrecision",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get coefficient for animation speed.",
            "examples": [
                {
                    "text": "```sqf\nif (getAnimSpeedCoef player > 1) then { hint \"Speedy Gonzales!\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getAnimSpeedCoef` unit",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getAnimSpeedCoef"
        },
        "configuration": {
            "label": "getAnimSpeedCoef",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Extract array from config entry.",
            "examples": [
                {
                    "text": "```sqf\n_array = getArray (configFile >> \"CfgVehicles\" >> \"Thing\" >> \"threat\");\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "config",
                            "description": "`Config`"
                        }
                    ],
                    "outline": "`getArray` config",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getArray"
        },
        "configuration": {
            "label": "getArray",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get list of all available magazines of artillery units on the list. Command returns only unique magazine types and doesn't contain any information about which unit has which magazine.",
            "examples": [
                {
                    "text": "```sqf\nif (\"8Rnd_82mm_Mo_Flare_white\" in getArtilleryAmmo [\n\t_mortar1,\n\t_mortar2,\n\t_mortar3, \n\t_mortar4\n]) then\n{\n\thint \"Sir, we have white flares, Sir!\";\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "artilleryList",
                            "description": "`Array` of `Object`s"
                        }
                    ],
                    "outline": "`getArtilleryAmmo` artilleryList",
                    "returns": "`Array` of `String`s"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getArtilleryAmmo"
        },
        "configuration": {
            "label": "getArtilleryAmmo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns settings from artillery computer currently opened by player.",
            "examples": [
                {
                    "text": "```sqf\nhint str getArtilleryComputerSettings; //[\"Semi (medium)\",\"HE Mortar Shells\",0]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**getArtilleryComputerSettings**",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getArtilleryComputerSettings"
        },
        "configuration": {
            "label": "getArtilleryComputerSettings",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns ETA to the target in seconds for given artillery unit based on target position and used magazine, -1 if target can't be hit.",
            "examples": [
                {
                    "text": "```sqf\n_mortar getArtilleryETA [getPos _target, getArtilleryAmmo [_mortar] select 0];\n```"
                },
                {
                    "text": "```sqf\n_mortar getArtilleryETA [position _target, currentMagazine _mortar];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - artillery unit"
                        },
                        {
                            "name": "targetPosition",
                            "description": "`Position` - position of the target in format [PositionAGLS](https://community.bistudio.com/wiki/Position%23PositionAGLS) (`getPos`, `position`)"
                        },
                        {
                            "name": "magazineType",
                            "description": "`String` - type of magazine used"
                        }
                    ],
                    "outline": "unit `getArtilleryETA` [targetPosition, magazineType]",
                    "returns": "`Number`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getArtilleryETA"
        },
        "configuration": {
            "label": "getArtilleryETA",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns DLC information about given object or model.",
            "examples": [
                {
                    "text": "```sqf\ngetAssetDLCInfo player;\n```"
                },
                {
                    "text": "```sqf\ngetAssetDLCInfo \"a3\\Weapons_F_Enoch\\Rifles\\MSBS\\MSBS65_F\";\n```"
                },
                {
                    "text": "```sqf\ngetAssetDLCInfo [\"C_Van_01_transport_F\"];\n```"
                },
                {
                    "text": "```sqf\ngetAssetDLCInfo [\"arifle_AK12_F\", configFile >> \"CfgWeapons\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "asset",
                            "description": "`Object` or `String` - object reference or path to the model"
                        }
                    ],
                    "outline": "`getAssetDLCInfo` asset",
                    "returns": "`Array` - array in format: [isDlc, isOwned, isInstalled, isAvailable, appID, DLCName], where:\n* isDlc: `Boolean` - the asset belongs to a DLC\n* isOwned: `Boolean` \n* isInstalled: `Boolean` \n* isAvailable: `Boolean` \n* appID: `String` - actual steam item ID or \"0\" for none or \"-1\" for unknown \n* DLCName: `String` - actual DLC name or \"\""
                },
                {
                    "parameters": [
                        {
                            "name": "class",
                            "description": "`String` - class name of the asset"
                        },
                        {
                            "name": "config",
                            "description": "`Config` - (Optional, default <sqf inline>configFile >> \"CfgVehicles\") config in which to search"
                        }
                    ],
                    "outline": "`getAssetDLCInfo` [class, config]",
                    "returns": "`Array` in format [isDlc, isOwned, isInstalled, isAvailable, appID, DLCName], where:\n* isDlc: `Boolean` - the asset belongs to a DLC\n* isOwned: `Boolean` \n* isInstalled: `Boolean` \n* isAvailable: `Boolean` \n* appID: `String` - actual steam item ID or \"0\" for none or \"-1\" for unknown \n* DLCName: `String` - actual DLC name or \"\""
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getAssetDLCInfo"
        },
        "configuration": {
            "label": "getAssetDLCInfo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns curator logic to which given player has access.",
            "examples": [
                {
                    "text": "```sqf\n(getAssignedCuratorLogic player) removeCuratorEditableObjects [allDead, true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "player",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getAssignedCuratorLogic` player",
                    "returns": "`Object`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getAssignedCuratorLogic"
        },
        "configuration": {
            "label": "getAssignedCuratorLogic",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns unit assigned to curator logic.",
            "examples": [
                {
                    "text": "```sqf\n_curatorUnit = getAssignedCuratorUnit (allCurators select 0);\n_curatorUnit joinAs [createGroup civilian, 0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curatorObj",
                            "description": "`Object` - curator module."
                        }
                    ],
                    "outline": "`getAssignedCuratorUnit` curatorObj",
                    "returns": "`Object`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getAssignedCuratorUnit"
        },
        "configuration": {
            "label": "getAssignedCuratorUnit",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the target given unit is engaging.",
            "examples": [
                {
                    "text": "```sqf\nprivate _unitsTarget = getAttackTarget _unit;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getAttackTarget` unit",
                    "returns": "`Object`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getAttackTarget"
        },
        "configuration": {
            "label": "getAttackTarget",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns profile audio volumes.",
            "examples": [
                {
                    "text": "```sqf\ngetAudioOptionVolumes params [\"_effects\", \"_music\", \"_radio\", \"_von\", \"_ui\", \"_map\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`getAudioOptionVolumes`",
                    "returns": "`Array` of `Number`s - [effects, music, radio, von, UI, map], where:\n* effects: `Number` - fx volume factor \n* music: `Number` - music volume factor\n* radio: `Number` - speech volume factor\n* von: `Number` - Voice over Network (VoN) volume factor\n* {{GVI|arma3|2.10"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getAudioOptionVolumes"
        },
        "configuration": {
            "label": "getAudioOptionVolumes",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns all backpack types and count from the cargo space.",
            "examples": [
                {
                    "text": "```sqf\n_content = getBackpackCargo carName;\n```"
                },
                {
                    "text": "```sqf\n_content = getBackpackCargo ammoBoxName;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - object to check"
                        }
                    ],
                    "outline": "`getBackpackCargo` object",
                    "returns": "`Array` of Arrays - format `**[[\"5BackpacksType1\", \"10BackpacksType2\"], [5, 10]]**`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getBackpackCargo"
        },
        "configuration": {
            "label": "getBackpackCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns how many seconds injured unit will continue leaving blood trail. If unit damage is < 0.1, the return value is 0 and unit doesn't leave any blood trail. Use `setBleedingRemaining` to set different remaining time.",
            "examples": [
                {
                    "text": "```sqf\n_bleedingRemaining = getBleedingRemaining _unit;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getBleedingRemaining` unit",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getBleedingRemaining"
        },
        "configuration": {
            "label": "getBleedingRemaining",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array of bone names and their parents.",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getBoneNames` object",
                    "returns": "`Array` of `String`s - bone names and parents in format: [bone1, parent1, bone2, parent2, ....]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getBoneNames"
        },
        "configuration": {
            "label": "getBoneNames",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns how much the unit is exposed to fire damage.",
            "examples": [
                {
                    "text": "```sqf\nprivate _fireDamage = getBurningValue player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getBurningValue` unit",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getBurningValue"
        },
        "configuration": {
            "label": "getBurningValue",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if visibility of `player` by friendly units is calculated.",
            "examples": [
                {
                    "text": "```sqf\n\nif (!getCalculatePlayerVisibilityByFriendly) then\n{\n\tcalculatePlayerVisibilityByFriendly true;\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`getCalculatePlayerVisibilityByFriendly`",
                    "returns": "`Boolean` - `true` if visibility is calculated, `false` if not"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getCalculatePlayerVisibilityByFriendly"
        },
        "configuration": {
            "label": "getCalculatePlayerVisibilityByFriendly",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the direction unit is looking in render time scope. While for AI the origin for the view direction vector can be taken from <sqf inline>eyePos unit, for human player the origin should be taken from player camera position <sqf inline>positionCameraToWorld [0,0,0]",
            "examples": [
                {
                    "text": "Draw AI eye direction (green), weapon direction (red) and camera direction (blue) in 3D:\n\n```sqf\n\nBob = createGroup east createUnit [\"O_Soldier_F\", [0,0,0], [], 0, \"NONE\"];\nBob setVehiclePosition [player modelToWorld [0,100,0], [], 0, \"NONE\"];\nonEachFrame {\n\t_beg = ASLToAGL eyePos Bob;\n\t_endE = (_beg vectorAdd (eyeDirection Bob vectorMultiply 100));\n\tdrawLine3D [_beg, _endE, [0,1,0,1]];\n\t_endW = (_beg vectorAdd (Bob weaponDirection currentWeapon Bob vectorMultiply 100));\n\tdrawLine3D [_beg, _endW, [1,0,0,1]];\n\t_endV = (_beg vectorAdd (getCameraViewDirection Bob vectorMultiply 100));\n\tdrawLine3D [_beg, _endV, [0,0,1,1]];\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getCameraViewDirection` unit",
                    "returns": "`Array` - 3D Vector"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getCameraViewDirection"
        },
        "configuration": {
            "label": "getCameraViewDirection",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns index of the unit in cargo. -1 if not in cargo.",
            "examples": [
                {
                    "text": "```sqf\nplayer moveInCargo heli;\nhint str (heli getCargoIndex player);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "vehicle `getCargoIndex` unit",
                    "returns": "`Number`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getCargoIndex"
        },
        "configuration": {
            "label": "getCargoIndex",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns center of mass of an object.",
            "examples": [
                {
                    "text": "```sqf\n_com = getCenterOfMass _myCar;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - PhysX object"
                        }
                    ],
                    "outline": "`getCenterOfMass` object",
                    "returns": "`Array` - [x,y,z] offset relative to the model centre"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getCenterOfMass"
        },
        "configuration": {
            "label": "getCenterOfMass",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns client state in network game. Works on both, client and dedicated server. The following states are possible:\n\n{{{!}} class=\"wikitable\"\n! `getClientStateNumber`\n! `getClientState`\n! Description\n{{!}}-\n{{!}} 0 {{!}}{{!}} \"NONE\" {{!}}{{!}} No client (or singleplayer)\n{{!}}-\n{{!}} 1 {{!}}{{!}} \"CREATED\" {{!}}{{!}} Client is created\n{{!}}-\n{{!}} 2 {{!}}{{!}} \"CONNECTED\" {{!}}{{!}} Client is connected to server, message formats are registered\n{{!}}-\n{{!}} 3 {{!}}{{!}} \"LOGGED IN\" {{!}}{{!}} Identity is created\n{{!}}-\n{{!}} 4 {{!}}{{!}} \"MISSION SELECTED\" {{!}}{{!}}Mission is selected\n{{!}}-\n{{!}} 5 {{!}}{{!}} \"MISSION ASKED\" {{!}}{{!}} Server was asked to send / not send mission\n{{!}}-\n{{!}} 6 {{!}}{{!}} \"ROLE ASSIGNED\" {{!}}{{!}} Role was assigned (and confirmed)\n{{!}}-\n{{!}} 7 {{!}}{{!}} \"MISSION RECEIVED\" {{!}}{{!}} Mission received\n{{!}}-\n{{!}} 8 {{!}}{{!}} \"GAME LOADED\" {{!}}{{!}} Island loaded, vehicles received\n{{!}}-\n{{!}} 9 {{!}}{{!}} \"BRIEFING SHOWN\" {{!}}{{!}} Briefing was displayed\n{{!}}-\n{{!}} 10 {{!}}{{!}} \"BRIEFING READ\" {{!}}{{!}} Ready to play mission\n{{!}}-\n{{!}} 11 {{!}}{{!}} \"GAME FINISHED\" {{!}}{{!}} Game was finished\n{{!}}-\n{{!}} 12 {{!}}{{!}} \"DEBRIEFING READ\" {{!}}{{!}} Debriefing read, ready to continue with next mission\n{{!}}}",
            "examples": [
                {
                    "text": "```sqf\n_state = getClientState;\n```"
                },
                {
                    "text": "```sqf\nif (getClientState == \"BRIEFING READ\") then { hint \"Let the show begin!\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`getClientState`",
                    "returns": "`String` - client state (see table above)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getClientState"
        },
        "configuration": {
            "label": "getClientState",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns client state in network game. Works on both, client and dedicated server. The following states are possible:\n\n{{{!}} class{{=}}\"wikitable\"\n! `getClientStateNumber`\n! `getClientState`\n! Description\n{{!}}-\n{{!}} 0 {{!}}{{!}} \"NONE\" {{!}}{{!}} No client (or singleplayer)\n{{!}}-\n{{!}} 1 {{!}}{{!}} \"CREATED\" {{!}}{{!}} Client is created\n{{!}}-\n{{!}} 2 {{!}}{{!}} \"CONNECTED\" {{!}}{{!}} Client is connected to server, message formats are registered\n{{!}}-\n{{!}} 3 {{!}}{{!}} \"LOGGED IN\" {{!}}{{!}} Identity is created\n{{!}}-\n{{!}} 4 {{!}}{{!}} \"MISSION SELECTED\" {{!}}{{!}}Mission is selected\n{{!}}-\n{{!}} 5 {{!}}{{!}} \"MISSION ASKED\" {{!}}{{!}} Server was asked to send / not send mission\n{{!}}-\n{{!}} 6 {{!}}{{!}} \"ROLE ASSIGNED\" {{!}}{{!}} Role was assigned (and confirmed)\n{{!}}-\n{{!}} 7 {{!}}{{!}} \"MISSION RECEIVED\" {{!}}{{!}} Mission received\n{{!}}-\n{{!}} 8 {{!}}{{!}} \"GAME LOADED\" {{!}}{{!}} Island loaded, vehicles received\n{{!}}-\n{{!}} 9 {{!}}{{!}} \"BRIEFING SHOWN\" {{!}}{{!}} Briefing was displayed\n{{!}}-\n{{!}} 10 {{!}}{{!}} \"BRIEFING READ\" {{!}}{{!}} Ready to play mission\n{{!}}-\n{{!}} 11 {{!}}{{!}} \"GAME FINISHED\" {{!}}{{!}} Game was finished\n{{!}}-\n{{!}} 12 {{!}}{{!}} \"DEBRIEFING READ\" {{!}}{{!}} Debriefing read, ready to continue with next mission\n{{!}}}",
            "examples": [
                {
                    "text": "```sqf\n_state = getClientStateNumber;\n```"
                },
                {
                    "text": "```sqf\n_inGame = getClientStateNumber > 8;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`getClientStateNumber`",
                    "returns": "`Number` - client state (see table above)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getClientStateNumber"
        },
        "configuration": {
            "label": "getClientStateNumber",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get array of compatible pylon magazines",
            "examples": [
                {
                    "text": "```sqf\n\n// returns array of arrays containing all compatible magazines\nvehicle player getCompatiblePylonMagazines 0;\n\n```"
                },
                {
                    "text": "```sqf\n\n// returns array of compatible magazines for the 3rd pylon if it exists; otherwise returns array of arrays (see above)\njet1 getCompatiblePylonMagazines 3;\n\n```"
                },
                {
                    "text": "```sqf\n\n// returns array of compatible magazines for \"pylon1\" class, defined in\n// configFile >> \"CfgVehicles\" >> \"B_Plane_CAS_01_dynamicLoadout_F\" >> \"Components\" >> \"TransportPylonsComponent\" >> \"Pylons\"\n\"B_Plane_CAS_01_dynamicLoadout_F\" getCompatiblePylonMagazines \"pylon1\";\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` or `String` - aircraft object or config class"
                        },
                        {
                            "name": "pylon",
                            "description": "`Number` or `String`\n* If `String` - pylon class name from `**TransportPylonsComponent &gt;&gt; pylons**` class \n* If `Number` - pylon ID\n* If an invalid pylon ID or class name is provided, such as 0 or \"\", all compatible magazines from all pylons are returned."
                        }
                    ],
                    "outline": "vehicle `getCompatiblePylonMagazines` pylon",
                    "returns": "`Array` of `String`s, or `Array` of `Array` of `String`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getCompatiblePylonMagazines"
        },
        "configuration": {
            "label": "getCompatiblePylonMagazines",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns UAV/UGV vehicle if person has connection to some UAV. To return the AI unit which player controls, see `getConnectedUAVUnit`.",
            "examples": [
                {
                    "text": "```sqf\ngetConnectedUAV player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "person",
                            "description": "`Object` - player controlling UAV/UGV"
                        }
                    ],
                    "outline": "`getConnectedUAV` person",
                    "returns": "`Object` - the UAV/UGV object or `objNull` if no UAV is connected or if the connected unit is remote."
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getConnectedUAV"
        },
        "configuration": {
            "label": "getConnectedUAV",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns UAV/UGV AI unit, which player is controlling. To return UAV vehicle, see `getConnectedUAV`",
            "examples": [
                {
                    "text": "```sqf\nprivate _playersDrone = getConnectedUAVUnit player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "person",
                            "description": "`Object` - unit controlling the UAV/UGV"
                        }
                    ],
                    "outline": "`getConnectedUAVUnit` person",
                    "returns": "`Object` - UAV unit (AI driver or AI gunner) or `objNull` otherwise including if the connected person is remote"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getConnectedUAVUnit"
        },
        "configuration": {
            "label": "getConnectedUAVUnit",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns max load value of given uniform, vest or backpack container. For other types of containers, use `maxLoad` command",
            "examples": [
                {
                    "text": "```sqf\n_maxLoadUniform = getContainerMaxLoad uniform player;\n_maxLoadVest = getContainerMaxLoad vest player;\n_maxLoadBackpack = getContainerMaxLoad backpack player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "containerClass",
                            "description": "`String` - uniform, vest or backpack class"
                        }
                    ],
                    "outline": "`getContainerMaxLoad` containerClass",
                    "returns": "`Number` - load value, -1 if not available."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getContainerMaxLoad"
        },
        "configuration": {
            "label": "getContainerMaxLoad",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the corpse associated with given weaponholder. When unit is killed and had a weapon, the weapon is placed inside \"WeaponHolderSimulated\" and dropped together with the unit. This command returns the dead body associated with this weaponholder.",
            "examples": [
                {
                    "text": "```sqf\nsystemChat str getCorpse cursorObject;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "weaponholder",
                            "description": "`Object` - weaponholder dropped by the dead unit"
                        }
                    ],
                    "outline": "`getCorpse` weaponholder",
                    "returns": "`Object` - dead unit"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getCorpse"
        },
        "configuration": {
            "label": "getCorpse",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns primary and secondary weapon holders of a dead unit. If a unit had weapons at the moment of death, primary weapon is dropped into primary weaponholder and secondary weapon is dropped into secondary.",
            "examples": [
                {
                    "text": "```sqf\nsystemChat str getCorpseWeaponholders cursorObject;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "corpse",
                            "description": "`Object` - dead unit"
                        }
                    ],
                    "outline": "`getCorpseWeaponholders` corpse",
                    "returns": "`Array` of `Object`s in format [primaryWeaponHolder, secondaryWeaponHolder]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getCorpseWeaponholders"
        },
        "configuration": {
            "label": "getCorpseWeaponholders",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns cruise control settings set with `setCruiseControl` command.",
            "examples": [
                {
                    "text": "```sqf\ngetCruiseControl vehicle player params [\"_speedLimit\", \"_cruiseControlActive\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - the vehicle"
                        }
                    ],
                    "outline": "`getCruiseControl` vehicle",
                    "returns": "`Array` in format:\n* 0: `Number` - defined speed limit\n* 1: `Boolean` - `true` if cruise control is enabled, `false` if only speed was limited"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/getCruiseControl"
        },
        "configuration": {
            "label": "getCruiseControl",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns object and named selections under cursor and distance to object's surface (to the point cursor points at). If object surface is further away than 50 meters, selections are always an empty array and distance is 1e10 (10^10).",
            "examples": [
                {
                    "text": "```sqf\nhint str getCursorObjectParams;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**getCursorObjectParams**",
                    "returns": "`Array` - [cursorObject, selections, distance]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getCursorObjectParams"
        },
        "configuration": {
            "label": "getCursorObjectParams",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns aimPrecision from animation state with custom value that will directly affects weapon sway size and speed.",
            "examples": [
                {
                    "text": "```sqf\n_coef = getCustomAimCoef player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getCustomAimCoef` unit",
                    "returns": "`Number`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getCustomAimCoef"
        },
        "configuration": {
            "label": "getCustomAimCoef",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns current value set to the controller (see `setCustomSoundController`).",
            "examples": [
                {
                    "text": "```sqf\ngetCustomSoundController [vehicle player, \"CustomSoundController1\"];\n```"
                },
                {
                    "text": "```sqf\n\nprivate _allCustomSoundControllers = [];\nfor \"_i\" from 1 to (getCustomSoundControllerCount vehicle player) do\n{\n\t_allCustomSoundControllers pushBack getCustomSoundController [vehicle player, format [\"CustomSoundController%1\", _i]];\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - a transport type vehicle. Does not work on characters or buildings"
                        },
                        {
                            "name": "controller",
                            "description": "`String` - name of custom sound controller - needs to be full string e.g \"CustomSoundController1\". It goes from \"CustomSoundController1\" to \"CustomSoundController32\""
                        }
                    ],
                    "outline": "`getCustomSoundController` [vehicle, controller]",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getCustomSoundController"
        },
        "configuration": {
            "label": "getCustomSoundController",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns current number of custom sound controllers supported by the engine for the given vehicle (currently 32)",
            "examples": [
                {
                    "text": "```sqf\ngetCustomSoundControllerCount vehicle player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - a transport type vehicle. Does not work on characters or buildings"
                        }
                    ],
                    "outline": "`getCustomSoundControllerCount` vehicle",
                    "returns": "`Number` - number of custom controllers"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getCustomSoundControllerCount"
        },
        "configuration": {
            "label": "getCustomSoundControllerCount",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the object damage in the range from 0 to 1.",
            "examples": [
                {
                    "text": "```sqf\nprivate _damage = getDammage player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getDammage` object",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getDammage"
        },
        "configuration": {
            "label": "getDammage",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "A getter for `setDebriefingText`.",
            "examples": [
                {
                    "text": "```sqf\nprivate _debriefingTextDeath = getDebriefingText \"endDeath\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "end",
                            "description": "`String` - end type"
                        }
                    ],
                    "outline": "`getDebriefingText` end",
                    "returns": "`Array` in format:\n* [text, title] if old syntax of `setDebriefingText` was used)\n* [text, title, subtitle, picture, background] if `setDebriefingText`'s alternative syntax was used\n* empty array if `setDebriefingText` was not used"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getDebriefingText"
        },
        "configuration": {
            "label": "getDebriefingText",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the string representation of unit as an four slots array.",
            "examples": [
                {
                    "text": "```sqf\n\ngetDescription player; // UAV Operator\n// returns [\"B_soldier_UAV_F\", \"Combat Fatigues (MTP)\", \"Carrier Special Rig (Green)\", \"B_UAV_01_backpack_F\"]\n\n```"
                },
                {
                    "text": "```sqf\ngetDescription objNull; // returns [\"ERROR\", \"ERROR\", \"ERROR\", \"ERROR\"]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getDescription` unit",
                    "returns": "`Array` of `String`s format `**[unit**Class**, uniform**Name**, vest**Name**, backpack**Class**]**`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getDescription"
        },
        "configuration": {
            "label": "getDescription",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the object heading in the range 0..360.\n**Arma 3**: The alternative syntax gets heading from one object or position to another object or position, and should be used instead of `BIS_fnc_dirTo`.",
            "examples": [
                {
                    "text": "```sqf\n_azimuth = getDir player;\n```"
                },
                {
                    "text": "```sqf\n_azimuth = player getDir tank;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getDir` object",
                    "returns": "`Number`"
                },
                {
                    "parameters": [
                        {
                            "name": "pos1",
                            "description": "`Object`, [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position3D](https://community.bistudio.com/wiki/Position%23Introduction) - from where"
                        },
                        {
                            "name": "pos2",
                            "description": "`Object`, [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position3D](https://community.bistudio.com/wiki/Position%23Introduction) - to where"
                        }
                    ],
                    "outline": "pos1 `getDir` pos2",
                    "returns": "`Number`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getDir"
        },
        "configuration": {
            "label": "getDir",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns object's heading in the range from 0 to 360 in render time scope.\n**Arma 3**: The alternative syntax gets heading from one object or position to another object or position in render time scope, and should be used instead of `BIS_fnc_dirTo`.",
            "examples": [
                {
                    "text": "```sqf\n_dir = getDirVisual player;\n```"
                },
                {
                    "text": "```sqf\n_azimuth = player getDirVisual tank;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getDirVisual` object",
                    "returns": "`Number`"
                },
                {
                    "parameters": [
                        {
                            "name": "pos1",
                            "description": "`Object`, [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position3D](https://community.bistudio.com/wiki/Position%23Introduction) - from where"
                        },
                        {
                            "name": "pos2",
                            "description": "`Object`, [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position3D](https://community.bistudio.com/wiki/Position%23Introduction) - to where"
                        }
                    ],
                    "outline": "pos1 `getDirVisual` pos2",
                    "returns": "`Number`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getDirVisual"
        },
        "configuration": {
            "label": "getDirVisual",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` when object is in diver state - e.g when the unit would put diving `goggles` on.\n**NOTE**: \nDiving `goggles` remove blurriness underwater, however when assigned, they do not appear on the face of the unit until the unit steps into the water.\nThis command allows to detect the moment when the goggles are visible.\nIf the unit doesn't have diving goggles assigned, this command would still return `true` at appropriate time if the unit steps into the water.",
            "examples": [
                {
                    "text": "```sqf\nprivate _gogglesOn = getDiverState player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getDiverState` unit",
                    "returns": "`Boolean` - `true` when diving `goggles` are visible"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getDiverState"
        },
        "configuration": {
            "label": "getDiverState",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array of the DLC usage times.",
            "examples": [
                {
                    "text": "```sqf\n_dlcAssetsUsageInfo = getDLCAssetsUsage;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`getDLCAssetsUsage`",
                    "returns": "`Array` - array of DLC usage information, containing DLC items in format:\n\n[<nowiki/>[name, dlcAppId, sessionTime, totalTime], [name, dlcAppId, sessionTime, totalTime], (…)]\n\n**NOTE:** unused assets won't appear in the result (usage time = 0)."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getDLCAssetsUsage"
        },
        "configuration": {
            "label": "getDLCAssetsUsage",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array with the session and global time the asset has been used.",
            "examples": [
                {
                    "text": "```sqf\n_dlcAssetUsage = getDLCAssetsUsageByName \"C_IDAP_Heli_Transport_02_F\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "assetName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`getDLCAssetsUsageByName` assetName",
                    "returns": "`Array` - array in format: [sessionTime, totalTime]."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getDLCAssetsUsageByName"
        },
        "configuration": {
            "label": "getDLCAssetsUsageByName",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array of app IDs of DLCs.",
            "examples": [
                {
                    "text": "```sqf\n_ownedDLCs = getDLCs 1;\n```"
                },
                {
                    "text": "```sqf\n_hasKarts = (288520 in (getDLCs 1));\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "filter",
                            "description": "`Number` - can be:\n* 0 - all\n* 1 - owned\n* 2 - not owned"
                        }
                    ],
                    "outline": "`getDLCs` filter",
                    "returns": "`Array` - array of DLC numbers."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getDLCs"
        },
        "configuration": {
            "label": "getDLCs",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns total time the assets of the given DLC have been used. See [[:Category:Arma 3 DLCs & Expansions|Arma 3 DLCs & Expansions]] for a list of DLCs and ids.",
            "examples": [
                {
                    "text": "```sqf\nprivate _kartsUsage = getDLCUsageTime 288520;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "appId",
                            "description": "`Number` - DLC's Steam appId"
                        }
                    ],
                    "outline": "`getDLCUsageTime` appId",
                    "returns": "`Number` - DLC assets usage time in seconds"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getDLCUsageTime"
        },
        "configuration": {
            "label": "getDLCUsageTime",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Fetches a reference to the mission editor camera.\n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`getEditorCamera` map",
                    "returns": "`Object`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getEditorCamera"
        },
        "configuration": {
            "label": "getEditorCamera",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the current mode of the editor.\n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`getEditorMode` map",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getEditorMode"
        },
        "configuration": {
            "label": "getEditorMode",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the editor object scope of the specified editor object.\n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "object",
                            "description": "`String`"
                        }
                    ],
                    "outline": "map `getEditorObjectScope` object",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getEditorObjectScope"
        },
        "configuration": {
            "label": "getEditorObjectScope",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the map elevation offset from [map]/config.cpp.\n\nReturns 0 if there is no elevationOffset defined in the config of the current world.",
            "examples": [
                {
                    "text": "```sqf\n_offset = getElevationOffset;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`getElevationOffset`",
                    "returns": "`Number` - elevation offset of the map"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getElevationOffset"
        },
        "configuration": {
            "label": "getElevationOffset",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns RPM of all engines. {{Feature|afm}}",
            "examples": [
                {
                    "text": "```sqf\nprivate _rpm = getEngineTargetRPMRTD _helicopter;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "helicopter",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getEngineTargetRPMRTD` helicopter",
                    "returns": "`Array` of `Number`s with the RPM of each engine"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getEngineTargetRPMRTD"
        },
        "configuration": {
            "label": "getEngineTargetRPMRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns various properties for the given entity. Most properties should be checked where entity is `local`",
            "examples": [
                {
                    "text": "```sqf\nprivate _entityInfo = getEntityInfo ent1;\n```"
                },
                {
                    "text": "```sqf\nprivate _isMan = ent1 getEntityInfo 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getEntityInfo` entity",
                    "returns": "`Array` in format [isMan, isAnimal, isDeadSet, deadSetTime, lastEntityCausingDamage, lastDamageTime, isUpsideDown, upsideDownTime, isStopped, canFloat, hasTerminalOpened, isWeaponholder, isWreck, isSmoking, isSetForDeletion], where:\n* 0 - isMan `Boolean` - `true` if the entity is a man\n* 1 - isAnimal: `Boolean` - `true` if the entity is an animal\n* 2 - isDeadSet: `Boolean` - `true` if the entity has dead flag set. Often has the same value as !`alive`, but is not the same, as `alive` checks the total damage.\n* 3 - deadSetTime: `Number` - for how long the entity was dead\n* 4 - lastEntityCausingDamage: `Object` - `objNull` or the entity that last caused damage to this entity. Is not the same as the killer but could be the same. Killed entity might not have this set either. The entity does not have to be dead in order to have last entity that caused damage assigned.\n* 5 - lastDamageTime: `Number` - how long ago was _lastEntityCausingDamage_ assigned\n* 6 - isUpsideDown: `Boolean` - `true` if the entity is upside down. The engine considers this to be <sqf inline>vectorUp ent select 2 < 0.3\n* 7 - upsideDownTime: `Number` - how long the entity was upside down.\n* 8 - isStopped: `Boolean` - `true` when the entity does not need to be actively simulated.\n* 9 - canFloat: `Boolean` - `true` if the entity is able to float on water.\n* 10 - hasTerminalOpened: `Boolean` - `true` if the UAV terminal is opened for the given entity.\n* 11 - isWeaponholder: `Boolean` - `true` if the entity is weaponholder.\n* 12 - isWreck: `Boolean` - `true` if the entity is wreck.\n* 13 - isSmoking: `Boolean` - `true` if the entity has smoke and fire destruction effect active.\n* 14 - isSetForDeletion: `Boolean` - `true` if the entity was set for deletion, but is not yet removed from the simulation.\n\n**NOTE**: \nIn multiplayer, following values update properly only when entity is `local`:\n* lastEntityCausingDamage\n* lastDamageTime\n* isStopped\nOther values are either static or update depending on how your client sees the entity right now.\n\nTimer values are never exact between clients and vary slightly depending on latency, JIP clients end up with large timer values close to game's `time` but get normal once associated value changes again:\n* deadSetTime\n* lastDamageTime\n* upsideDownTime"
                },
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "`Object`"
                        },
                        {
                            "name": "index",
                            "description": "`Number` - property index (see main syntax, 2 - isDeadSet for example)"
                        }
                    ],
                    "outline": "entity `getEntityInfo` index",
                    "returns": "`Anything` - depends on the requested property, or `Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getEntityInfo"
        },
        "configuration": {
            "label": "getEntityInfo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns value of the specified 3D controller, see `getAllEnv3DSoundControllers`.",
            "examples": [
                {
                    "text": "```sqf\n_thatTreeOverThere getEnv3DSoundController \"rainDrops\"; // returns 1\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - environmental sound source like a tree or a house - see `allEnv3DSoundSources`"
                        },
                        {
                            "name": "controller",
                            "description": "`String` - name of environmental variable like \"trees\" or \"houses\""
                        }
                    ],
                    "outline": "object `getEnv3DSoundController` controller",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getEnv3DSoundController"
        },
        "configuration": {
            "label": "getEnv3DSoundController",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns value of the specified controller, see `getAllEnvSoundControllers`",
            "examples": [
                {
                    "text": "```sqf\nposition player getEnvSoundController \"trees\"; //0.3333\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Position`"
                        },
                        {
                            "name": "controller",
                            "description": "`String` - name of environmental variable like \"trees\" or \"houses\""
                        }
                    ],
                    "outline": "position `getEnvSoundController` controller",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getEnvSoundController"
        },
        "configuration": {
            "label": "getEnvSoundController",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Queries given event handler's information.",
            "examples": [
                {
                    "text": "```sqf\nprivate _info = player getEventHandlerInfo [\"MPKilled\", 1];\t\t// object EH\n```"
                },
                {
                    "text": "```sqf\nprivate _info = getEventHandlerInfo [\"EachFrame\", 0];\t\t\t\t// mission EH\n```"
                },
                {
                    "text": "```sqf\nprivate _info = _bullet getEventHandlerInfo [\"Deflected\", 0];\t\t// projectile EH\n```"
                },
                {
                    "text": "```sqf\nprivate _info = _group getEventHandlerInfo [\"EnemyDetected\", 1];\t// group EH\n```"
                },
                {
                    "text": "```sqf\nprivate _info = _control getEventHandlerInfo [\"ButtonClick\", 1];\t// control (UI) EH\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "oper",
                            "description": "`Object`, `Group`, `Control` or `Display` - subject to which event handler is assigned"
                        },
                        {
                            "name": "type",
                            "description": "`String` - event handler name"
                        },
                        {
                            "name": "id",
                            "description": "`Number` - event handler id returned by `addEventHandler`, `ctrlAddEventHandler`, `displayAddEventHandler`, or `addMPEventHandler`"
                        }
                    ],
                    "outline": "oper `getEventHandlerInfo` [type, id]",
                    "returns": "`Array` in format [exists, isLast, total] or empty array [], where:\n* exists: `Boolean` - event handler exists\n* isLast: `Boolean` - will be executed last (relevant if last event handler modifies default engine behaviour)\n* total: `Number` - total number of event handlers added to the same event"
                },
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`String` - event handler name"
                        },
                        {
                            "name": "id",
                            "description": "`Number` - event handler id returned by `addMissionEventHandler` or `addMusicEventHandler`"
                        }
                    ],
                    "outline": "`getEventHandlerInfo` [type, id]",
                    "returns": "`Array` in format [exists, isLast, total] or empty array [], where:\n* exists: `Boolean` - event handler exists\n* isLast: `Boolean` - will be executed last (relevant if last event handler modifies default engine behaviour)\n* total: `Number` - total number of event handlers added to the same event"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getEventHandlerInfo"
        },
        "configuration": {
            "label": "getEventHandlerInfo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns fatigue of given unit.",
            "examples": [
                {
                    "text": "```sqf\nif (getFatigue player < 0.5) then { player sideChat \"I'm good to go!\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getFatigue` unit",
                    "returns": "`Number`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getFatigue"
        },
        "configuration": {
            "label": "getFatigue",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array of the starting topic and hint the given field manual should display.",
            "examples": [
                {
                    "text": "```sqf\ngetFieldManualStartPage (findDisplay 46); // returns [\"\", \"\"]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "display",
                            "description": "`Display`"
                        }
                    ],
                    "outline": "`getFieldManualStartPage` display",
                    "returns": "`Array` - [starting topic, hint]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getFieldManualStartPage"
        },
        "configuration": {
            "label": "getFieldManualStartPage",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "A getter for `forceFlagTexture`. Forced texture is different from your normal flag texture, which can be retrieved with `flagTexture`",
            "examples": [
                {
                    "text": "```sqf\ngetForcedFlagTexture player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - vehicle, unit or flag pole"
                        }
                    ],
                    "outline": "`getForcedFlagTexture` object",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getForcedFlagTexture"
        },
        "configuration": {
            "label": "getForcedFlagTexture",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns forced speed set with `forceSpeed` or -1 if not set.",
            "examples": [
                {
                    "text": "```sqf\n_spd = getForcedSpeed _heli;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getForcedSpeed` entity",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getForcedSpeed"
        },
        "configuration": {
            "label": "getForcedSpeed",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns if sides are friendly or hostile. For a value smaller than 0.6 it results in being enemy, otherwise it is friendly. See also [Side Relations](https://community.bistudio.com/wiki/Side%20Relations).",
            "examples": [
                {
                    "text": "```sqf\nvalue = west getFriend east;\n```"
                },
                {
                    "text": "```sqf\n_isEnemy = side _killer getFriend side _victim < 0.6;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "side1",
                            "description": "`Side`"
                        },
                        {
                            "name": "side2",
                            "description": "`Side`"
                        }
                    ],
                    "outline": "side1 `getFriend` side2",
                    "returns": "`Number` - decimal value between 0.0 to 1.0"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getFriend"
        },
        "configuration": {
            "label": "getFriend",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return the value of variable in the variable space of given FSM. The FSM handle is the number returned by the `execFSM` command.",
            "examples": [
                {
                    "text": "```sqf\n_handle getFSMVariable \"_foo\";\n```"
                },
                {
                    "text": "```sqf\n_handle getFSMVariable [\"_foo\", 123];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "FSMhandle",
                            "description": "`Number`"
                        },
                        {
                            "name": "name",
                            "description": "`String` - name of the variable"
                        }
                    ],
                    "outline": "FSMhandle `getFSMVariable` name",
                    "returns": "`Anything`"
                },
                {
                    "parameters": [
                        {
                            "name": "FSMhandle",
                            "description": "`Number`"
                        },
                        {
                            "name": "name",
                            "description": "`String` - name of the variable"
                        },
                        {
                            "name": "defaultValue",
                            "description": "`Anything` - value to return if variable is `nil`"
                        }
                    ],
                    "outline": "FSMhandle `getFSMVariable` [name, defaultValue]",
                    "returns": "`Anything`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getFSMVariable"
        },
        "configuration": {
            "label": "getFSMVariable",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the fuel amount (1 is full) in the cargo space of a refueling vehicle.\n**NOTE**: Since Arma 3 v1.96 the return value for vehicles that are not configured to have ability to refuel other vehicles is -1. (Prior to that the value was negative infinity)",
            "examples": [
                {
                    "text": "```sqf\nvalue = getFuelCargo myVehicleName;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getFuelCargo` vehicle",
                    "returns": "`Number` - fuel cargo value, -1 if fuel cargo is not supported, 0 if the vehicle is !`alive` or `isNull`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getFuelCargo"
        },
        "configuration": {
            "label": "getFuelCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the fuel consumption coefficient, which is a multiplier of the [fuel consumption rate](https://community.bistudio.com/wiki/CfgVehicles_Config_Reference%23fuelConsumptionRate) in config.",
            "examples": [
                {
                    "text": "```sqf\nif (getFuelConsumptionCoef myCar > 1) then { hint \"You should have a mechanic look at your engine!\" }\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle ",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getFuelConsumptionCoef` vehicle",
                    "returns": "`Number` - fuel consumption coefficient"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getFuelConsumptionCoef"
        },
        "configuration": {
            "label": "getFuelConsumptionCoef",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Generate graph y - coordinates of all input values within specific x and y range.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _minX = 0;\nprivate _maxX = 10;\nprivate _minY = 0;\nprivate _maxY = 100;\nprivate _count = 11;\nprivate _random = 0;\n\ngetGraphValues [\n\t[_minX, _maxX, _minY, _maxY, _count, _random],\n\t0, 5,\n\t1, 10,\n\t2, 100,\n\t3, 50,\n\t4, 30,\n\t5, 100,\n\t6, 10,\n\t7, 50,\n\t8, 75,\n\t9, 100,\n\t10, 100\n];\n/*\n\treturns [[0.05, 0.1, 1, 0.5, 0.3, 1, 0.1, 0.5, 0.75, 1, 1], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]\n\tsupposedly [array of 1-based Y values, array of X values]\n*/\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "graphMinX",
                            "description": "`Number` - minimum x-axis value"
                        },
                        {
                            "name": "graphMaxX",
                            "description": "`Number` - maximum x-axis value"
                        },
                        {
                            "name": "graphMinY",
                            "description": "`Number` - minimum y-axis value"
                        },
                        {
                            "name": "graphMaxY",
                            "description": "`Number` - maximum y-axis value"
                        },
                        {
                            "name": "valueCount",
                            "description": "`Number` - number of values the returned array should have"
                        },
                        {
                            "name": "randomOffset",
                            "description": "`Number` - random range for returned y value"
                        },
                        {
                            "name": "xN",
                            "description": "`Number` - n<sup>th</sup> x value"
                        },
                        {
                            "name": "yN",
                            "description": "`Number` - n<sup>th</sup> y value"
                        }
                    ],
                    "outline": "`getGraphValues` <nowiki>[[graphMinX, graphMaxX, graphMinY, graphMaxY, valueCount, randomOffset], x1, y1, x2, y2, ...]</nowiki>",
                    "returns": "`Array` of `Array` of `Number`s - to format [arrayOfYvalues, arrayOfXvalues]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getGraphValues"
        },
        "configuration": {
            "label": "getGraphValues",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get group icon properties.",
            "examples": [
                {
                    "text": "```sqf\n_grpIconId = _group getVariable \"BIS_MARTA_ICON_TYPE\";\n_grpIcon = _group getGroupIcon _grpIconId;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group`"
                        },
                        {
                            "name": "id",
                            "description": "`Number` - icon id"
                        }
                    ],
                    "outline": "group `getGroupIcon`  id",
                    "returns": "`Array`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getGroupIcon"
        },
        "configuration": {
            "label": "getGroupIcon",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns group icons params used for command bar drawing such as color, text, scale, visibility, waypoint visibility, waypoint color.",
            "examples": [
                {
                    "text": "```sqf\n_iconParams = getGroupIconParams group player;\n```"
                },
                {
                    "text": "```sqf\ngetGroupIconParams group player params [\"_color\", \"_text\", \"_scale\", \"_visibility\", \"_WPVisibility\", \"_WPColor\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group`"
                        }
                    ],
                    "outline": "`getGroupIconParams` group",
                    "returns": "`Array` in format [color, text, scale, visibility, WPvisibility WPcolor], where:\n* color: `Array` - icon color in format [r,g,b,a]\n* text: `String` - icon text\n* scale: `Number` - icon scale\n* visibility: `Boolean` - icon visibility\n* WPvisibility: `Boolean` - waypoint visibility\n* WPcolor: `Array` - waypoint color in format [r,g,b,a]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getGroupIconParams"
        },
        "configuration": {
            "label": "getGroupIconParams",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns all group icons. [id,icon,[offsetx,offsety],[..],..]",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group`"
                        }
                    ],
                    "outline": "`getGroupIcons` group",
                    "returns": "`Array`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getGroupIcons"
        },
        "configuration": {
            "label": "getGroupIcons",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the `Position` where object believes the enemy to be. If there is no direct line of sight between the object and the enemy, this position is extrapolated based on the last known position and speed of the enemy. A returned position of [0,0,0] implies that object does not knowAbout enemy. If enemy is null it is some position in front of the object or enemy position.",
            "examples": [
                {
                    "text": "```sqf\n_pos = player getHideFrom _enemy;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "enemy",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "object `getHideFrom` enemy",
                    "returns": "`Array` - `ASLToATL` representation of the believed `aimPos` of the enemy object"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getHideFrom"
        },
        "configuration": {
            "label": "getHideFrom",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns selection damage. Same as `getHitPointDamage`, only the argument is selection part instead of hit point.\n**NOTE**: Some part names are in Czech; see the [translation table](https://community.bistudio.com/wiki/ArmA%3A%20Armed%20Assault%3A%20Selection%20Translations).",
            "examples": [
                {
                    "text": "```sqf\nhint str (player getHit \"head\");\n```"
                },
                {
                    "text": "```sqf\nprivate _engineDamage = _car getHit \"motor\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle ",
                            "description": "`Object` - vehicle to be queried"
                        },
                        {
                            "name": "selection",
                            "description": "`String` - selection part name"
                        }
                    ],
                    "outline": "vehicle `getHit` selection",
                    "returns": "`Number` - before {{GVI|arma3|1.94"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getHit"
        },
        "configuration": {
            "label": "getHit",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return current level of damage for a specific Hit Point (specified by its hit part index). All hit points can be obtained with `getAllHitPointsDamage` command.\n* 0: no damage\n* 1: full damage",
            "examples": [
                {
                    "text": "```sqf\nvehicle player getHitIndex 3;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle ",
                            "description": "`Object` - vehicle to be queried"
                        },
                        {
                            "name": "hitPartIndex",
                            "description": "`Number` - hit part index of the Hit Point"
                        }
                    ],
                    "outline": "vehicle `getHitIndex` hitPartIndex",
                    "returns": "`Number` - before {{GVI|arma3|1.94"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getHitIndex"
        },
        "configuration": {
            "label": "getHitIndex",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return current level of damage in range 0..1 for a specific Hit Point (specified by its config class).\nIf you need to get damage of a selection instead of hit point, use `getHit`.",
            "examples": [
                {
                    "text": "```sqf\nvehicle player getHitPointDamage \"hitEngine\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle ",
                            "description": "`Object` - vehicle to be queried"
                        },
                        {
                            "name": "hitPointName",
                            "description": "`String` - name of the Hit Point class"
                        }
                    ],
                    "outline": "vehicle `getHitPointDamage` hitPointName",
                    "returns": "`Number` - before {{GVI|arma3|1.94"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getHitPointDamage"
        },
        "configuration": {
            "label": "getHitPointDamage",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns all items names and count from ammo box (or any general weapon holder container).",
            "examples": [
                {
                    "text": "```sqf\nhint str getItemCargo cursorTarget;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "box",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getItemCargo` box",
                    "returns": "`Array` of Arrays - format: [[\"5ItemsType1\",\"10ItemsType2\"],[5,10]]"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getItemCargo"
        },
        "configuration": {
            "label": "getItemCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the leaning factor of the given unit.",
            "examples": [
                {
                    "text": "```sqf\nif (getLeaning player < 0) then { systemChat \"player is leaning left\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getLeaning` unit",
                    "returns": "`Number` - leaning factor from -1 to 1"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getLeaning"
        },
        "configuration": {
            "label": "getLeaning",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets general environment's light settings.",
            "examples": [
                {
                    "text": "```sqf\ngetLighting; // returns [[0.646753,0.781818,1],28526.2,[-0.0167152,0.211598,-0.977214],0]\n```"
                },
                {
                    "text": "```sqf\ngetLighting params [\"_ambientLightColour\", \"_ambientLightBrightness\", \"_lightDirection\", \"_starsVisibility\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`getLighting`",
                    "returns": "`Array` in format [ambientLightColor, ambientLightBrightness, lightDirection, starsVisibility]:\n* ambientLightColor: [[Color|Color (RGB)]]\n* ambientLightBrightness: `Number`\n* lightDirection: `Vector3D`\n* starsVisibility: `Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getLighting"
        },
        "configuration": {
            "label": "getLighting",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets provided object's lighting information.\n**NOTE**: The command will use `local` `player`'s night vision state to determine whether to include IR lights in the result or not.\n\nOn a dedicated server, [headless client](https://community.bistudio.com/wiki/Arma%203%3A%20Headless%20Client) or if the player is [null](https://community.bistudio.com/wiki/objNull), the night vision state will always be off.",
            "examples": [
                {
                    "text": "```sqf\ngetLightingAt player; // returns [[1,1,1], 0.5, [0,0,0], 0]\n```"
                },
                {
                    "text": "```sqf\ngetLightingAt player params [\"_ambientLightColour\", \"_ambientLightBrightness\", \"_dynamicLightColour\", \"_dynamicLightBrightness\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "obj",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getLightingAt` obj",
                    "returns": "`Array` in format [ambientLightColor, ambientLightBrightness, dynamicLightColor, dynamicLightBrightness]:\n* ambientLightColor: `Array` in format [[Color|Color (RGB)]]\n* ambientLightBrightness: `Number`\n* dynamicLightColor: `Array` in format [[Color|Color (RGB)]]\n* dynamiclightBrightness: `Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getLightingAt"
        },
        "configuration": {
            "label": "getLightingAt",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns information about all loaded modifications.\n\n{{Feature|informative|The first 7 values are equal to what is printed in [RPT](https://community.bistudio.com/wiki/Crash%20Files) on game startup in the {{hl",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _loadedMods = getLoadedModsInfo;\n/*\n\t[\n\t\t[\"dummy\",\"dummy\",false,false,\"NOT FOUND\",\"\",\"\",\"0\"],\n\t\t[\"CUP Units DEV Version r710 (r710-r710 UNITSSVN) (12|Jun|2020)\",\"@[DEV] CUP Units\",false,false,\"GAME DIR\",\"f3fb8a4c62443ac799c7c0e00f645b1f32cf1376\",\"c96577b4\",0],\n\t\t[\"CUP Weapons DEV Version r1486 (r1481-r1486 WEAPONSSVN) (12|Jun|2020)\",\"@[DEV] CUP Weapons\",false,false,\"GAME DIR\",\"6dbd7c052ce2ae68803e10f6a3653d0b046881d8\",\"bb1c4965\",0],\n\t\t[\"Community Base Addons v3.15.1\",\"@CBA_A3\",false,false,\"GAME DIR\",\"33eef5c0ed583d1222319460b184090513193287\",\"131bbb64\",0],\n\t\t[\"Arma 3 Contact (Platform)\",\"enoch\",true,true,\"GAME DIR\",\"4298e892077aec33be6b68730a974400a3c3a636\",\"43e900ae\",\"1021790\"],\n\t\t[\"Arma 3 Tanks\",\"tank\",true,true,\"GAME DIR\",\"c47d45d7ce1261e0a0d1c4ed9517611eae6ebf9f\",\"1aec74ec\",\"798390\"],\n\t\t[\"Arma 3 Tac-Ops\",\"tacops\",true,true,\"GAME DIR\",\"808cc67221feadc288c856395cac28b908966eee\",\"441362c6\",\"744950\"],\n\t\t[\"Arma 3 Laws of War\",\"orange\",true,true,\"GAME DIR\",\"aa86785568206ae1e7becaa09eb673ee645d971f\",\"4729aa84\",\"571710\"],\n\t\t[\"Arma 3 Malden\",\"argo\",true,true,\"GAME DIR\",\"db6d4d06a3ad28207da665e8c34bbd8adf191019\",\"61001811\",\"639600\"],\n\t\t[\"Arma 3 Jets\",\"jets\",true,true,\"GAME DIR\",\"8e8e1f9275e37cc90c0f2a8a6901dd2a3e81a29a\",\"fc8366ee\",\"601670\"],\n\t\t[\"Arma 3 Apex\",\"expansion\",true,true,\"GAME DIR\",\"48f32952612dbb6ca972790c17c9920797073233\",\"fc4aed7f\",\"395180\"],\n\t\t[\"Arma 3 Marksmen\",\"mark\",true,true,\"GAME DIR\",\"85c7f2284f8b0271bfafecd96c49230ce0515861\",\"534e5baa\",\"332350\"],\n\t\t[\"Arma 3 Helicopters\",\"heli\",true,true,\"GAME DIR\",\"dae29688657dbc9057f9eb83179a3ad21d3a689d\",\"e7165098\",\"304380\"],\n\t\t[\"Arma 3 Karts\",\"kart\",true,true,\"GAME DIR\",\"eae9e0b218e7a8e8e906477ee1a5e8e3d5298f18\",\"8240ae3f\",\"288520\"],\n\t\t[\"Arma 3 Zeus\",\"curator\",true,true,\"GAME DIR\",\"2310c5c95a558253c7286d93f5a2a810fbf9b620\",\"8af0db5d\",\"275700\"],\n\t\t[\"Arma 3\",\"A3\",true,true,\"NOT FOUND\",\"\",\"\",\"0\"]\n\t]\n*/\n\n```"
                },
                {
                    "text": "```sqf\n\nprivate _modInfo = getLoadedModsInfo select 0;\n_modInfo params [\"_modname\", \"_modDir\", \"_isDefault\", \"_isOfficial\", \"_origin\", \"_hash\", \"_hashShort\", \"_itemID\"];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`getLoadedModsInfo`",
                    "returns": "`Array` of `Array`s in format [modname, modDir, isDefault, isOfficial, origin, hash, hashShort, itemID (Either DLC appId, or steam workshop itemId)]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getLoadedModsInfo"
        },
        "configuration": {
            "label": "getLoadedModsInfo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns all magazines types and count from the cargo space",
            "examples": [
                {
                    "text": "```sqf\n_content = getMagazineCargo carName;\n```"
                },
                {
                    "text": "```sqf\n_content = getMagazineCargo ammoBoxName;\n```"
                },
                {
                    "text": "```sqf\nhint str getMagazineCargo unitBackpack cursorTarget;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - vehicle or ammo box"
                        }
                    ],
                    "outline": "`getMagazineCargo` object",
                    "returns": "`Array` of arrays. [[\"5MagsType1\",\"10MagsType2\"],[5,10]]"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getMagazineCargo"
        },
        "configuration": {
            "label": "getMagazineCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns marker color for given marker.\n**NOTE**: This command is identical to `markerColor`.",
            "examples": [
                {
                    "text": "```sqf\n\"MarkerOne\" setMarkerColor \"ColorBlack\";\n_color = getMarkerColor \"MarkerOne\"; // returns \"ColorBlack\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String` - marker name"
                        }
                    ],
                    "outline": "`getMarkerColor` markerName",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getMarkerColor"
        },
        "configuration": {
            "label": "getMarkerColor",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns marker position.",
            "examples": [
                {
                    "text": "```sqf\n_mPos1 = getMarkerPos \"markerOne\";\n```"
                },
                {
                    "text": "```sqf\n_mPos2 = getMarkerPos [\"markerTwo\", true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`getMarkerPos` markerName",
                    "returns": "`Array` format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) - format [x,y,0]"
                },
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String`"
                        },
                        {
                            "name": "preserveElevation",
                            "description": "`Boolean` (Optional, default `false`)"
                        }
                    ],
                    "outline": "`getMarkerPos` [markerName, preserveElevation]",
                    "returns": "`Array` format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) - if _preserveElevation_ is `true` or [x,y,0] if _preserveElevation_ is `false`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/getMarkerPos"
        },
        "configuration": {
            "label": "getMarkerPos",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the size of the given marker. A getter for `setMarkerSize` and an alias of `markerSize`.",
            "examples": [
                {
                    "text": "```sqf\n\"MarkerOne\" setMarkerSize [100,200];\n_size = getMarkerSize \"MarkerOne\"; //returns [100,200]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`getMarkerSize` markerName",
                    "returns": "`Array` in format [a-axis, b-axis], where:\n* a-axis: `Number` - 1/2 width of marker\n* b-axis: `Number` - 1/2 height of marker"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getMarkerSize"
        },
        "configuration": {
            "label": "getMarkerSize",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets type of marker. See `CfgMarkers` for a list of standard markers.",
            "examples": [
                {
                    "text": "```sqf\nif (getMarkerType \"Marker1\" == \"\") then { hint \"Marker1 is not an icon!\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`getMarkerType`  markerName",
                    "returns": "`String` - marker class name. See `CfgMarkers`."
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getMarkerType"
        },
        "configuration": {
            "label": "getMarkerType",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns mass of a PhysX object.",
            "examples": [
                {
                    "text": "```sqf\n_mass = getMass _myCar;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getMass` object",
                    "returns": "`Number`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getMass"
        },
        "configuration": {
            "label": "getMass",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `Config` entry for the given scenario attribute from the 1st tier. The attribute can be config class or config property. If it is defined in multiple places, the command checks them in the following order:\n# External _[[Description.ext]]_ file\n# [Eden Editor](https://community.bistudio.com/wiki/Eden_Editor%3A_Scenario_Atttributes) scenario attribute\nSo if attribute exists in both places, attribute from [[Description.ext|description.ext]] is used. Previously, scenario attributes were extracted from _Description.ext_ using `missionConfigFile`. That still works, but it ignores attributes set directly in the editor and it should not be used anymore.",
            "examples": [
                {
                    "text": "```sqf\n_header = getMissionConfig \"Header\";\n```\n\nReturns scenario header config. Replaces the previous approach which would scan only the external _Description.ext_ file, but ignore the value set in the Eden Editor:\n\n```sqf\n_header = missionConfigFile >> \"Header\"; // Old approach\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "attribute",
                            "description": "`String` - attribute name"
                        }
                    ],
                    "outline": "`getMissionConfig` attribute",
                    "returns": "`Config`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getMissionConfig"
        },
        "configuration": {
            "label": "getMissionConfig",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns value of the given scenario attribute from the 1st tier. Since only config properties have values, the attribute should be config property.\nIf it is not found or config class is given, the return is `nil`. If the attribute defined in multiple places, the command checks them in the following order:\n# [[Description.ext]] entry\n# [Eden Editor](https://community.bistudio.com/wiki/Eden%20Editor%3A%20Scenario%20Attributes) scenario attribute\n\nSo if an attribute exists in both places, the [[Description.ext]] value is used.\nPreviously, scenario attributes were extracted from Description.ext using `missionConfigFile`.\nThat still works, but it ignores attributes set directly in the editor and should not be used anymore.\n\n**IMPORTANT**: This command cannot force return type, it will return the value of the type given in config. Use `isEqualType` to additionally reaffirm the correct type if necessary to account for human error.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _respawnDelay = getMissionConfigValue [\"respawnDelay\", 0];\t\t\t// returns the real, defined respawn delay value\nprivate _respawnDelay = getNumber (missionConfigFile >> \"respawnDelay\");\t// old approach, ignoring the Eden Editor-set value\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "attribute",
                            "description": "`String` - attribute name"
                        }
                    ],
                    "outline": "`getMissionConfigValue` attribute",
                    "returns": "`Number`, `String`, `Boolean` or `Array`, depending on the attribute value type. [Nil](https://community.bistudio.com/wiki/nil) when the attribute is undefined."
                },
                {
                    "parameters": [
                        {
                            "name": "attribute",
                            "description": "`String` - attribute name"
                        },
                        {
                            "name": "defaultValue",
                            "description": "`Anything` - value used when the attribute is undefined"
                        }
                    ],
                    "outline": "`getMissionConfigValue` [attribute, defaultValue]",
                    "returns": "`Number`, `String`, `Boolean` or `Array`, depending on the attribute value type. Default value when the attribute is undefined."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getMissionConfigValue"
        },
        "configuration": {
            "label": "getMissionConfigValue",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns list of DLCs that are used in the mission.\n**IMPORTANT**: The list is created from units listed in [[Mission.sqm|mission.sqm]] and does **not** detect units later created by scripts.",
            "examples": [
                {
                    "text": "```sqf\n_usedDLCs = getMissionDLCs; // returns e.g [\"Orange\",\"Enoch\",\"Expansion\",\"Heli\",\"Contact\",\"Mark\",\"Argo\",\"Jets\"]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`getMissionDLCs`",
                    "returns": "`Array` - list of DLCs detected for the mission"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getMissionDLCs"
        },
        "configuration": {
            "label": "getMissionDLCs",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns all entities within the specific [Eden Editor layer](https://community.bistudio.com/wiki/Eden%20Editor%3A%20Layer) and its sub-layers.\nTo be used when the scenario is running, not in the editor workspace.\nUseful to disable/enable whole parts of the scenario if layers are used during mission design.\n**NOTE**: Default layers are not returned.",
            "examples": [
                {
                    "text": "```sqf\nprivate _base = getMissionLayerEntities \"Base\";\n```"
                },
                {
                    "text": "delete all objects within that layer after the player is over 800m away from _someObject:\n\n```sqf\n\nwaitUntil { sleep 1; (player distance _someObject) > 800 };\nprivate _simpleObjects = (getMissionLayerEntities \"Simple Objects\") select 0;\n{\n\tdeleteVehicle _x;\n} forEach _simpleObjects;\n\n```"
                },
                {
                    "text": "```sqf\nprivate _layer1337Entities = getMissionLayerEntities 1337;\n```"
                },
                {
                    "text": "```sqf\ngetMissionLayerEntities 42 params [[\"_objects\", []], [\"_markers\", []], [\"_groups\", []]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "layerName",
                            "description": "can be one of:\n* `String` - case-insensitive; layer name in the editor. If multiple layers with the same name are present in the scenario, the first found one is used\n* `Number` - layer ID in the editor"
                        }
                    ],
                    "outline": "`getMissionLayerEntities` layerName",
                    "returns": "`Array` in format [objects, markers, {{GVI|arma3|2.14"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/getMissionLayerEntities"
        },
        "configuration": {
            "label": "getMissionLayerEntities",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a list of all layers created in [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor). Designed to be used during a scenario. Default layers (BLUFOR, OPFOR...) are not returned.",
            "examples": [
                {
                    "text": "```sqf\ngetMissionLayers; // [\"Electronics\",\"Camp Endurance\",\"UGV Workstation\",\"Comments\",\"Extraction Air\",\"Comments\",\"Extraction Ground\",\"Extraction\",\"test\"]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`getMissionLayers`",
                    "returns": "`Array` - array of strings with names of layers"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getMissionLayers"
        },
        "configuration": {
            "label": "getMissionLayers",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns various mission options",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _missionOptions = getMissionOptions;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`getMissionOptions`",
                    "returns": "`HashMap` - Containing the names and values of all options (see `setMissionOptions`)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getMissionOptions"
        },
        "configuration": {
            "label": "getMissionOptions",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns mission root plus the filename in a form of filepath to be used with commands requiring absolute path such as `playSound3D`, `drawIcon3D`, `createSimpleObject`, etc.\nAny leading \"\\\" in the filename will be stripped as the mission root includes one already.",
            "examples": [
                {
                    "text": "```sqf\n\n// returns e.g \"C:\\Users\\Username\\Documents\\Arma 3\\missions\\MissionName.Altis\\icons\\myIcon.paa\"\nprivate _path = getMissionPath \"icons\\myIcon.paa\";\nprivate _path = getMissionPath \"\\icons\\myIcon.paa\"; // leading \\ is also fine\n\n```"
                },
                {
                    "text": "```sqf\n\n// returns e.g \"C:\\Users\\Username\\Documents\\Arma 3\\missions\\MissionName.Altis\\\" with the trailing \\\nprivate _root = getMissionPath \"\";\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "filename",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`getMissionPath` filename",
                    "returns": "`String` - absolute path"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getMissionPath"
        },
        "configuration": {
            "label": "getMissionPath",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns object's model info. Model path is suitable for use with `createSimpleObject` command.",
            "examples": [
                {
                    "text": "```sqf\n_modelInfo = getModelInfo player; // [\"b_soldier_03.p3d\", \"a3\\characters_f\\blufor\\b_soldier_03.p3d\", true, [0,0,0]]\n```"
                },
                {
                    "text": "```sqf\n_modelInfo = getModelInfo cursorObject;\n```"
                },
                {
                    "text": "Get Z ASL using placing point:\n\n```sqf\n_zASL = (heli modelToWorldWorld (getModelInfo heli select 3)) select 2;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getModelInfo` object",
                    "returns": "`Array` - array in format [modelName, modelPath, hasSkeleton, placingPoint, mass]\n* modelName: `String` - For example \"car.p3d\"\n* modelPath: `String` - Full path to model. For example: \"a3\\data\\models\\car.p3d\"\n* hasSkeleton: `Boolean` - Returns whether the model has a skeleton (which usually means it's also animated)\n* **(Arma 3)** placingPoint: `Vector3D` - Placing point of the model in model coordinates. Placing point is always in format [0,0,z].\n* **(Arma 3)** mass: `Number` - Mass defined in the p3d model"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getModelInfo"
        },
        "configuration": {
            "label": "getModelInfo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns mouse position in UI coordinates.",
            "examples": [
                {
                    "text": "```sqf\ngetMousePosition params [\"_mouseX\", \"_mouseY\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`getMousePosition`",
                    "returns": "`Array` - position in format [x, y], where x and y are UI coordinates"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getMousePosition"
        },
        "configuration": {
            "label": "getMousePosition",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns elapsed time in seconds for currently playing music track.",
            "examples": [
                {
                    "text": "```sqf\n\nplayMusic [\"LeadTrack06_F_Tank\", 0];\nonEachFrame {hintSilent str getMusicPlayedTime};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`getMusicPlayedTime`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getMusicPlayedTime"
        },
        "configuration": {
            "label": "getMusicPlayedTime",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Extract number from config entry.",
            "examples": [
                {
                    "text": "```sqf\n_value = getNumber (configFile >> \"CfgVehicles\" >> \"Thing\" >> \"maxSpeed\");\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "config",
                            "description": "`Config`"
                        }
                    ],
                    "outline": "`getNumber` config",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getNumber"
        },
        "configuration": {
            "label": "getNumber",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return name of object argument in mission editor.\n**NOTE**: Some Old Editor Command",
            "examples": [
                {
                    "text": "```sqf\n\n// returns string \"[1009.0351, 1319.4928]\"\n(findDisplay 128 displayCtrl 51) getObjectArgument [\"_unit_1\", \"POSITION\"]\n\n// returns array [1009.0351, 1319.4928]\n(findDisplay 128 displayCtrl 51) evalObjectArgument [\"_unit_1\", \"POSITION\"]\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "argument",
                            "description": "`String`"
                        }
                    ],
                    "outline": "map `getObjectArgument` [object, argument]",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getObjectArgument"
        },
        "configuration": {
            "label": "getObjectArgument",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return a list of all the children of the specified object.\n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "object",
                            "description": "`String`"
                        }
                    ],
                    "outline": "map `getObjectChildren` object",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getObjectChildren"
        },
        "configuration": {
            "label": "getObjectChildren",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns appID of the DLC the object belongs to or `nil` if object is vanilla.",
            "examples": [
                {
                    "text": "```sqf\n_appID = getObjectDLC cursorTarget;\nif (!isNil \"_appID\") then {\n\thint format [\"This object belongs to DLC with id: %1\", _appID];\n} else {\n\thint \"This object is vanilla\";\n};\n```"
                },
                {
                    "text": "```sqf\n_akm = createSimpleObject [\"A3\\Weapons_F_Exp\\Rifles\\AKM\\AKM_F.p3d\",getPosASL player];\ngetObjectDLC _akm;\t// 395180\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "obj",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getObjectDLC` obj",
                    "returns": "`Number` (or `Nothing` if vanilla item)"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getObjectDLC"
        },
        "configuration": {
            "label": "getObjectDLC",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns Field of View of the given object in `rad`ians. Static objects return default value, which is 1.\nFOV of `objNull` is 0.\nObject FOV is indirectly connected with optics magnification or player view zoom, the narrower the angle the greater the zoom.\n**NOTE**: The FOV returned by this command doesn't change if user has custom FOV set in profile. Use it in combination with `getResolution` to adjust for the difference if required.",
            "examples": [
                {
                    "text": "```sqf\nprivate _objFOV = getObjectFOV player;\n```"
                },
                {
                    "text": "```sqf\nprivate _objFOVinDegrees = deg getObjectFOV cursorObject;\n```"
                },
                {
                    "text": "Perceived distance to an object:\n\n```sqf\nprivate _vdist = (player distance _obj) * (getObjectFOV player / 0.75);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - for units it queries unit weapon optics/zoom, for vehicles - vehicle optics/zoom"
                        }
                    ],
                    "outline": "`getObjectFOV` object",
                    "returns": "`Number` - FOV in `rad`ians"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getObjectFOV"
        },
        "configuration": {
            "label": "getObjectFOV",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns Visitor ID of the given object. Visitor IDs of static map objects can change if map is in development and updated with new static objects.",
            "examples": [
                {
                    "text": "```sqf\ngetObjectID _tree;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getObjectID` object",
                    "returns": "`String` - Visitor ID"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getObjectID"
        },
        "configuration": {
            "label": "getObjectID",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets all custom materials associated with the object.",
            "examples": [
                {
                    "text": "```sqf\n_materials = getObjectMaterials car;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "obj",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getObjectMaterials` obj",
                    "returns": "`Array` of `String`s - array of materials"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getObjectMaterials"
        },
        "configuration": {
            "label": "getObjectMaterials",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return the proxy object associated with the given editor object.\n**NOTE**: Some Old Editor Command",
            "examples": [
                {
                    "text": "```sqf\n(findDisplay 128 displayCtrl 51) getObjectProxy \"_unit_1\"\n// returns the object 'B 1-1-A:1 (Sean Johnson)'\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "object",
                            "description": "`String`"
                        }
                    ],
                    "outline": "map `getObjectProxy` object",
                    "returns": "`Object`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getObjectProxy"
        },
        "configuration": {
            "label": "getObjectProxy",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the render scale of an object relative to the original model.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _objectScale = getObjectScale MyObject;\n\nif (_objectScale == 1) exitWith { systemChat \"Original scale\"; };\n\nif (_objectScale > 1) then\n{\n\tsystemChat \"Scaled up\";\n}\nelse\n{\n\tsystemChat \"Scaled down\";\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - object to return scale of. Can also be a [terrain object](https://community.bistudio.com/wiki/nearestTerrainObjects)."
                        }
                    ],
                    "outline": "`getObjectScale` object",
                    "returns": "`Number` - scale relative to the original model"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getObjectScale"
        },
        "configuration": {
            "label": "getObjectScale",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets all custom textures (hiddenSelectionsTextures) associated with the object. **IMPORTANT**: It will return an empty `Array` when executed on [simple objects](https://community.bistudio.com/wiki/Arma%203%3A%20Simple%20Objects).",
            "examples": [
                {
                    "text": "```sqf\n_textures = getObjectTextures player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "obj",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getObjectTextures` obj",
                    "returns": "`Array` of `String`s - array of textures"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getObjectTextures"
        },
        "configuration": {
            "label": "getObjectTextures",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns object type as a number:\n* 1 - Primary - Normal object placed in Visitor, part of landscape\n* 2 - Network - Road placed in Visitor, part of landscape\n* 4 - Temporary - Temporary object (like tracks)\n* 8 - TypeVehicle - Some entity added by game\n* 16 - TypeTempVehicle - Temporary entity\n* 32 - LandDecal - Land decal",
            "examples": [
                {
                    "text": "```sqf\n_objType = getObjectType player;\n```"
                },
                {
                    "text": "```sqf\n_objType = getObjectType cursorObject;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getObjectType` object",
                    "returns": "`Number` - object type"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getObjectType"
        },
        "configuration": {
            "label": "getObjectType",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets the values of rendering distances of objects and shadows.",
            "examples": [
                {
                    "text": "```sqf\n_arr = getObjectViewDistance;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**getObjectViewDistance**",
                    "returns": "`Array` - in format [objectDistance, shadowDistance]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getObjectViewDistance"
        },
        "configuration": {
            "label": "getObjectViewDistance",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the class name of the current optic mode of the current weapon.",
            "examples": [
                {
                    "text": "```sqf\n\nplayer getOpticsMode 0; // get current weapon's optic mode\nplayer getOpticsMode 1; // get primary weapon's optic mode\nplayer getOpticsMode 2; // get launcher's optic mode\nplayer getOpticsMode 3; // get handgun's optic mode\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "slot",
                            "description": "`Number` - can be one of:\n* 0 - [Current weapon](https://community.bistudio.com/wiki/currentWeapon)\n* 1 - [Primary weapon](https://community.bistudio.com/wiki/primaryWeapon)\n* 2 - [Secondary weapon](https://community.bistudio.com/wiki/secondaryWeapon)\n* 3 - [Handgun](https://community.bistudio.com/wiki/handgunWeapon)"
                        }
                    ],
                    "outline": "unit `getOpticsMode` slot",
                    "returns": "`String` - class name of the current optic mode of the current weapon"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getOpticsMode"
        },
        "configuration": {
            "label": "getOpticsMode",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Retrieves a value out of a `HashMap` after looking it up by its key. When the HashMap doesn't contain the key, the default value is returned",
            "examples": [
                {
                    "text": "```sqf\nprivate _myValue = _myHashMap getOrDefault [\"a\", \"Not Found!\"];\n```"
                },
                {
                    "text": "```sqf\nprivate _myValue = _hashMap getOrDefault [\"a\", \"Not Found!\", true]; // will add default value to the hash map if it does not exist\n```"
                },
                {
                    "text": "```sqf\n\nprivate _array = _hashmap getOrDefault [_key, [], true]; // a new array will be created if it doesn't exist\n_array pushBack _item; // _item will be added to the array (the one in the hashmap is updated by reference)\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "hashMap",
                            "description": "`HashMap`"
                        },
                        {
                            "name": "key",
                            "description": "`HashMapKey` - case sensitive key"
                        },
                        {
                            "name": "defaultValue",
                            "description": "`Anything` - (Optional, default `nil`)"
                        },
                        {
                            "name": "setDefault",
                            "description": "`Boolean` - (Optional, default `false`) if set to `true` and value does not exist in provided hash map, _defaultValue_ will be added to the hash map"
                        }
                    ],
                    "outline": "hashMap `getOrDefault` [key, defaultValue, setDefault]",
                    "returns": "`Anything`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getOrDefault"
        },
        "configuration": {
            "label": "getOrDefault",
            "grammarType": "property-accessor"
        }
    },
    {
        "documentation": {
            "description": "Retrieves a value from the `HashMap` for the given 'key', executes given 'code' if key was not found and returns result. Additionally sets key to the code result value if 'set' is true.",
            "examples": [
                {
                    "text": "```sqf\n_hashmap getOrDefaultCall [123, { systemChat \"The key 123 does not exist and will be created and assigned 345\"; 345 }, true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "hashMap",
                            "description": "`HashMap`"
                        },
                        {
                            "name": "key",
                            "description": "`HashMapKey` - case-sensitive key"
                        },
                        {
                            "name": "code",
                            "description": "`Code` - (Optional, default `nil`) - `Code` to execute if the key does not exist"
                        },
                        {
                            "name": "set",
                            "description": "`Boolean` - (Optional, default `false`) if `true` and value does not exist in the provided hash map, the result of the _code_ execution will be added to the hash map"
                        }
                    ],
                    "outline": "hashMap `getOrDefaultCall` [key, code, set]",
                    "returns": "`Anything`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getOrDefaultCall"
        },
        "configuration": {
            "label": "getOrDefaultCall",
            "grammarType": "property-accessor"
        }
    },
    {
        "documentation": {
            "description": "Returns amount of remaining oxygen.",
            "examples": [
                {
                    "text": "```sqf\n_oxygen = getOxygenRemaining player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getOxygenRemaining` unit",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getOxygenRemaining"
        },
        "configuration": {
            "label": "getOxygenRemaining",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a list of all DLCs objects the unit is currently using. For example if a unit is inside a vehicle from DLC, it will return the code of that DLC.",
            "examples": [
                {
                    "text": "```sqf\n_objects = getPersonUsedDLCs player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getPersonUsedDLCs` unit",
                    "returns": "`Array` of `Number`s"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getPersonUsedDLCs"
        },
        "configuration": {
            "label": "getPersonUsedDLCs",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns model space vector of the object airplane or helicopter [pilotCamera](https://community.bistudio.com/wiki/A3_Targeting_config_reference%23class_pilotCamera) .",
            "examples": [
                {
                    "text": "```sqf\n_pilotCamVector = getPilotCameraDirection vehicle player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getPilotCameraDirection` object",
                    "returns": "`Array` format `Vector3D` - relative to the model centre (In a similar fashion to [PositionRelative](https://community.bistudio.com/wiki/Position%23PositionRelative)). Returns [0,0,0] if object has no [pilotCamera](https://community.bistudio.com/wiki/A3_Targeting_config_reference%23class_pilotCamera)."
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getPilotCameraDirection"
        },
        "configuration": {
            "label": "getPilotCameraDirection",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the optics mode index (zoom) for the [pilotCamera](https://community.bistudio.com/wiki/Arma%203%3A%20Targeting%20config%20reference%23class%20pilotCamera)",
            "examples": [
                {
                    "text": "```sqf\ngetPilotCameraOpticsMode vehicle player\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getPilotCameraOpticsMode` object",
                    "returns": "`Number` - the index of the optic mode"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getPilotCameraOpticsMode"
        },
        "configuration": {
            "label": "getPilotCameraOpticsMode",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns model space coordinates of the object airplane or helicopter [pilotCamera](https://community.bistudio.com/wiki/A3_Targeting_config_reference%23class_pilotCamera).",
            "examples": [
                {
                    "text": "```sqf\n_pilotCamPos = getPilotCameraPosition vehicle player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getPilotCameraPosition` object",
                    "returns": "`Array` format [PositionRelative](https://community.bistudio.com/wiki/Position%23PositionRelative) - offset relative to the model centre. Returns [0,0,0] if object has no [pilotCamera](https://community.bistudio.com/wiki/A3_Targeting_config_reference%23class_pilotCamera)."
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getPilotCameraPosition"
        },
        "configuration": {
            "label": "getPilotCameraPosition",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns rotation (relative to the centered camera position) of the object airplane or helicopter [pilotCamera](https://community.bistudio.com/wiki/A3_Targeting_config_reference%23class_pilotCamera) .",
            "examples": [
                {
                    "text": "```sqf\n_pilotCamRot = getPilotCameraRotation vehicle player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getPilotCameraRotation` object",
                    "returns": "`Array` of `Number`s in format [yaw (turn), pitch (elevation)] - positive values are left yaw and down pitch from the center. Returns [0,0] when camera is centered but also if object has no [pilotCamera](https://community.bistudio.com/wiki/A3_Targeting_config_reference%23class_pilotCamera)."
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getPilotCameraRotation"
        },
        "configuration": {
            "label": "getPilotCameraRotation",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the target of the object airplane or helicopter [pilotCamera](https://community.bistudio.com/wiki/Arma%203%3A%20Targeting%20config%20reference%23class%20pilotCamera) tracking.",
            "examples": [
                {
                    "text": "```sqf\ngetPilotCameraTarget vehicle player params [\"_pilotCamTracking\", \"_pilotCamTargetPos\", \"_pilotCamTarget\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getPilotCameraTarget` object",
                    "returns": "`Array` in format [isTracking, targetPosition, targetObject]:\n* isTracking: `Boolean` - returns whether the camera is in a tracking mode\n* targetPosition: `Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) - returns the position of the tracked area or object\n* targetObject: `Object` - returns the tracked object, `objNull` if camera is only tracking an area\nreturns <sqf inline>[false, [0,0,0], objNull] if camera is not in a tracking mode or if object has no [pilotCamera](https://community.bistudio.com/wiki/Arma%203%3A%20Targeting%20config%20reference%23class%20pilotCamera)."
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getPilotCameraTarget"
        },
        "configuration": {
            "label": "getPilotCameraTarget",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get the set PiP (Picture-in-Picture) view distance (that can be set by `setPiPViewDistance`).",
            "examples": [
                {
                    "text": "```sqf\nprivate _pipViewDistance = getPiPViewDistance;\n```"
                },
                {
                    "text": "```sqf\nprivate _pipViewDistanceRatio = getPiPViewDistance / viewDistance;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`getPiPViewDistance`",
                    "returns": "`Number`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/getPiPViewDistance"
        },
        "configuration": {
            "label": "getPiPViewDistance",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get the license plates from any vehicle which has plates configured.",
            "examples": [
                {
                    "text": "```sqf\nif (getPlateNumber vehicle player != \"H4X0RZ\") then { hint \"u no 1337 bro\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getPlateNumber` vehicle",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getPlateNumber"
        },
        "configuration": {
            "label": "getPlateNumber",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns channel number for given player, **provided that player is speaking**, otherwise -1. Having mic on is not enough, player has to make a sound. There are several limitations to this command:\n* It does not work on dedicated server, the return is always -1, only client can detect other client talking.\n* Prior to Arma 3 v2.01.146856 did not detect when someone talked on direct chat at all anywhere. \n* The client on which command is executed has to able to receive transmission before the transmission channel can be detected. For example if a player is not in the same group as a speaker and the speaker speaks on Group Channel, the player cannot hear the speaker and therefore cannot detect what channel the speaker is on.\nIn short, this command mimics the speaking icon from the UI. Correspondence between channel and number:\n{{{!}} class{{=}}\"wikitable\" style{{=}}\"text-align: center\"\n! colspan{{=}}\"17\" {{!}} [channel ID](https://community.bistudio.com/wiki/Channel%20IDs) number correspondence\n{{!}}-\n{{!}} N/A\n{{!}} Global\n{{!}} Side\n{{!}} Command\n{{!}} Group\n{{!}} Vehicle\n{{!}} Direct\n{{!}} Custom1\n{{!}} Custom2\n{{!}} Custom3\n{{!}} Custom4\n{{!}} Custom5\n{{!}} Custom6\n{{!}} Custom7\n{{!}} Custom8\n{{!}} Custom9\n{{!}} Custom10\n{{!}}-\n{{!}} -1\n{{!}} 0\n{{!}} 1\n{{!}} 2\n{{!}} 3\n{{!}} 4\n{{!}} 5\n{{!}} 6\n{{!}} 7\n{{!}} 8\n{{!}} 9\n{{!}} 10\n{{!}} 11\n{{!}} 12\n{{!}} 13\n{{!}} 14\n{{!}} 15\n{{!}}}",
            "examples": [
                {
                    "text": "```sqf\nprivate _channelID = getPlayerChannel player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "player",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getPlayerChannel` player",
                    "returns": "`Number` - [channel ID](https://community.bistudio.com/wiki/Channel%20IDs)"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getPlayerChannel"
        },
        "configuration": {
            "label": "getPlayerChannel",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns user DirectPlay ID, which can be used with `getUserInfo`, and is found in `allMapMarkers` results and in some [mission event handlers](https://community.bistudio.com/wiki/Arma%203%3A%20Mission%20Event%20Handlers) such as [PlayerConnected](https://community.bistudio.com/wiki/Arma%203%3A%20Mission%20Event%20Handlers%23PlayerConnected).",
            "examples": [
                {
                    "text": "```sqf\ngetPlayerID player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getPlayerID` unit",
                    "returns": "`String` - \"-1\" if object is not a [player](https://community.bistudio.com/wiki/isPlayer)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getPlayerID"
        },
        "configuration": {
            "label": "getPlayerID",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "* In MP: Returns the unit's table of scores (infantry kills, soft vehicle kills, armor kills, air kills, deaths, total score).\n* In SP: Empty array []",
            "examples": [
                {
                    "text": "```sqf\ngetPlayerScores BIS_player1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getPlayerScores` unitName",
                    "returns": "`Array` - the score of the given player in format [infantry kills, soft vehicle kills, armor kills, air kills, deaths, total score]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getPlayerScores"
        },
        "configuration": {
            "label": "getPlayerScores",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return a UniqueID of the given unit (player).\n\n**Arma 3**: The returned string is the player's steamID64: <sqf inline>private _steamProfileUrl = \"http://steamcommunity.com/profiles/\" + (getPlayerUID player);\n\n**IMPORTANT**: Prior to [[Arma 2: Operation Arrowhead]] v1.60, the result always consisted of a [stringified](https://community.bistudio.com/wiki/str) number (see `getPlayerUIDOld`), but always had to be considered and processed as a `String`.<!--\n--> Converting it to a `Number` could cause precision problems, as `Number` cannot accurately represent integers above 16777216 (2<sup>24</sup>).<!--\n--> Moreover, games since [[Arma 2: Operation Arrowhead]] v1.61 provide a value that is not all-numeric.\n\n**NOTE**: Prior to [Arma 3](https://community.bistudio.com/wiki/Arma%203) v2.02, in some cases the identity of certain player units could fail to propagate to other clients and the server, which caused `isPlayer` and `getPlayerUID` to incorrectly return `**`false`**` and `**\"\"**` respectively, where the affected units were `not` `local`. See {{Link|https://github.com/michail-nikolaev/task-force-arma-3-radio/issues/1096|this bug report (GitHub)}} for more info. This was supposedly fixed, but you should remain vigilant toward false negatives nonetheless.",
            "examples": [
                {
                    "text": "```sqf\nprivate _uid = getPlayerUID player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getPlayerUID` unit",
                    "returns": "`String` - can be \"_SP_AI_\" or \"_SP_PLAYER_\" in SP, \"\" or UID in MP\n* The unique ID may be up to 100 characters long and may contain numbers, uppercase letters and underscores\n* The value can be used to construct a valid variable name by appending to another valid variable name, e.g <sqf inline>missionNamespace setVariable [\"TAG_player\" + _uid, _unit];"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getPlayerUID"
        },
        "configuration": {
            "label": "getPlayerUID",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets provided player's Voice over Network (VoN) volume.",
            "examples": [
                {
                    "text": "```sqf\nprivate _volume = getPlayerVoNVolume (units player select 1);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - the other player's unit"
                        }
                    ],
                    "outline": "`getPlayerVoNVolume` unit",
                    "returns": "`Number` in range 0..1, -1 in case of error (e.g provided a non-human)"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getPlayerVoNVolume"
        },
        "configuration": {
            "label": "getPlayerVoNVolume",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns object or location position. If the argument is an object, the return value is in format [PositionAGLS](https://community.bistudio.com/wiki/Position%23PositionAGLS).\n\nThe alternative syntax gets the position given distance and heading away from provided object or position - the command equivalent of `BIS_fnc_relPos`.\n\n**IMPORTANT**: \nDo **not** use this command to get an object's position in 3D format:\n* the Z value from this command is **relative** to the surface underneath, and there is no compatible setter command to use it with;\nthe commonly misused code: <sqf inline>_obj1 setPos getPos _obj2 is **absolutely wrong**\n* this command is significantly **slower** than other [position commands](https://community.bistudio.com/wiki/%3ACategory%3ACommand%20Group%3A%20Positions) because it has to calculate the surface below a position from objects in the (2D) area; its performance therefore suffers from areas with a high density of objects such as cities, and can easily be ~20x slower than other, simpler position commands - see [[Code Optimisation#getPos.2A and setPos.2A|this benchmark]].\nThe **only** correct usage of this command is to determine the altitude of an object **from the surface below it** (see _Example 5_).",
            "examples": [
                {
                    "text": "```sqf\nhintSilent str getPos player;\n```"
                },
                {
                    "text": "`getPos` vs. other methods (over sea). Pay attention to Z values:\n\n```sqf\n\ngetPos ship;\t\t\t\t// [2412.01, 6036.33, -0.839965]\ngetPosATL ship;\t\t\t\t// [2412.01, 6036.33, 19.4266]\ngetPosASL ship;\t\t\t\t// [2412.01, 6036.33, -0.920066]\ngetPosASLW ship;\t\t\t// [2412.01, 6036.33, -0.865981]\nvisiblePosition ship;\t\t// [2412.02, 6036.33, -0.837952]\nvisiblePositionASL ship;\t// [2412.02, 6036.33, -0.91798]\nposition ship;\t\t\t\t// [2412.01, 6036.33, -0.839965]\n\n```"
                },
                {
                    "text": "`getPos` vs. other methods (over land, on top of a 100m high building). Pay attention to Z values:\n\n```sqf\n\ngetPos car;\t\t\t\t\t// [2508.64, 5681.47, 0.0609589]\ngetPosATL car;\t\t\t\t// [2508.64, 5681.47, 100.0356369]\ngetPosASL car;\t\t\t\t// [2508.64, 5681.47, 171.718]\ngetPosASLW car;\t\t\t\t// [2508.64, 5681.47, 171.718]\nvisiblePosition car;\t\t// [2508.64, 5681.47, 0.0609512]\nvisiblePositionASL car;\t\t// [2508.64, 5681.47, 171.718]\nposition car;\t\t\t\t// [2508.64, 5681.47, 0.0609589]\n\n```"
                },
                {
                    "text": "Find position 100 metres and 45 degrees from player position:\n\n```sqf\nplayer getPos [100, 45];\n```"
                },
                {
                    "text": "Determine if a free-falling unit is close enough to the surface (including buildings, aircraft carriers etc) below to deploy the parachute:\n\n```sqf\nwaitUntil { sleep 1; getPos player select 2 < 200 };\nhint \"Deploying a parachute might be a good idea\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getPos` object",
                    "returns": "`Array` format [PositionAGLS](https://community.bistudio.com/wiki/Position%23PositionAGLS) - where Z is the height over the surface underneath"
                },
                {
                    "parameters": [
                        {
                            "name": "location",
                            "description": "`Location`"
                        }
                    ],
                    "outline": "`getPos` location",
                    "returns": "`Array` format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) - see `locationPosition`"
                },
                {
                    "parameters": [
                        {
                            "name": "origin",
                            "description": "`Object`, [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position3D](https://community.bistudio.com/wiki/Position%23Introduction)"
                        },
                        {
                            "name": "distance",
                            "description": "`Number` - distance from position"
                        },
                        {
                            "name": "heading",
                            "description": "`Number` - in which compass direction"
                        }
                    ],
                    "outline": "origin `getPos` [distance, heading]",
                    "returns": "`Array` format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL)"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getPos"
        },
        "configuration": {
            "label": "getPos",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the object position height above sea level.",
            "examples": [
                {
                    "text": "```sqf\n_aslPos = getPosASL player;\n```"
                },
                {
                    "text": "```sqf\nhint format [\"position above sea level: %1\", (getPosASL player) select 2];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getPosASL` object",
                    "returns": "`Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL)"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getPosASL"
        },
        "configuration": {
            "label": "getPosASL",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an object's rendered [ASL position](https://community.bistudio.com/wiki/Position%23PositionASL) (z value above sea level) in render time scope.",
            "examples": [
                {
                    "text": "```sqf\nprivate _playerRenderedPosASL = getPosASLVisual player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - name of the object"
                        }
                    ],
                    "outline": "`getPosASLVisual` object",
                    "returns": "`Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL)"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getPosASLVisual"
        },
        "configuration": {
            "label": "getPosASLVisual",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the object position height above water surface (waves and pond objects included).",
            "examples": [
                {
                    "text": "```sqf\n_pos = getPosASLW _diver;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "obj",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getPosASLW` obj",
                    "returns": "`Array` - [PositionASLW](https://community.bistudio.com/wiki/Position%23PositionASLW)"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getPosASLW"
        },
        "configuration": {
            "label": "getPosASLW",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the position of an object relative to the terrain.",
            "examples": [
                {
                    "text": "```sqf\n_objPosition = getPosATL player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getPosATL` object",
                    "returns": "`Array` format [PositionATL](https://community.bistudio.com/wiki/Position%23PositionATL)"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getPosATL"
        },
        "configuration": {
            "label": "getPosATL",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an object's rendered [ATL position](https://community.bistudio.com/wiki/Position%23PositionATL) (z value above ground) in render time scope.",
            "examples": [
                {
                    "text": "```sqf\n_playerRenderedPosATL = getPosATLVisual player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getPosATLVisual` object",
                    "returns": "`Array` format [PositionATL](https://community.bistudio.com/wiki/Position%23PositionATL)"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getPosATLVisual"
        },
        "configuration": {
            "label": "getPosATLVisual",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an object's [AGLS position](https://community.bistudio.com/wiki/Position%23PositionAGLS) in render time scope. Alias of `visiblePosition`.\n**IMPORTANT**: This command must **not** be used for actual 3D calculations. See `getPos` for more details.",
            "examples": [
                {
                    "text": "```sqf\n_playerRenderedPos = getPosVisual player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - name of the object"
                        }
                    ],
                    "outline": "`getPosVisual` object",
                    "returns": "`Array` format [PositionAGLS](https://community.bistudio.com/wiki/Position%23PositionAGLS)"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getPosVisual"
        },
        "configuration": {
            "label": "getPosVisual",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the provided object's model centre position ([0,0,0]) in [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL), rather than the transformed `boundingCenter` or [[Oxygen_2_-_Manual#LandContact|LandContact]] vertices.",
            "examples": [
                {
                    "text": "```sqf\n_obj setPosWorld getPosWorld _obj;\n```"
                },
                {
                    "text": "```sqf\nATLToASL (_groundObj modelToWorld [0,0,0]) isEqualTo getPosWorld _groundObj; // true\n```"
                },
                {
                    "text": "Wave height under a boat:\n\n```sqf\nprivate _h = ((boat modelToWorld [0,0,0]) vectorDiff getPosWorld boat) select 2;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getPosWorld` object",
                    "returns": "`Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) - **the model's centre**"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getPosWorld"
        },
        "configuration": {
            "label": "getPosWorld",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the provided object's, model centre position in render version in format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL), rather than transformed `boundingCenter` or [[Oxygen_2_-_Manual#LandContact|LandContact]] vertices.",
            "examples": [
                {
                    "text": "```sqf\n_obj setPosWorld getPosWorldVisual _obj;\n```"
                },
                {
                    "text": "```sqf\n_groundObj modelToWorldVisualWorld [0,0,0] isEqualTo getPosWorldVisual _groundObj; // true\n```"
                },
                {
                    "text": "```sqf\nprivate _waveHeight = ((boat modelToWorldVisual [0,0,0]) vectorDiff getPosWorldVisual boat) select 2;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getPosWorldVisual` object",
                    "returns": "`Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL)  - **the model centre**<nowiki/>'s position (see `getPosWorld`) in render scope"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getPosWorldVisual"
        },
        "configuration": {
            "label": "getPosWorldVisual",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return array of magazines on pylons.",
            "examples": [
                {
                    "text": "```sqf\ngetPylonMagazines vehicle player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getPylonMagazines`  vehicle",
                    "returns": "`Array` of `String`s - magazine names"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getPylonMagazines"
        },
        "configuration": {
            "label": "getPylonMagazines",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns direction, which is relative to object's current direction, from given object to another object or position in the range from 0 to 360, the equivalent of `BIS_fnc_relativeDirTo`.\nTaking the current `direction` of the object into account.",
            "examples": [
                {
                    "text": "```sqf\n_reldir = player getRelDir tank;\n```"
                },
                {
                    "text": "```sqf\n\n// Set object's direction towards any given position\n_object setDir (getDir _object + (_object getRelDir [_x, _y, _z]))\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "position",
                            "description": "`Object`, [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position3D](https://community.bistudio.com/wiki/Position%23Introduction)"
                        }
                    ],
                    "outline": "object `getRelDir` position",
                    "returns": "`Number`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getRelDir"
        },
        "configuration": {
            "label": "getRelDir",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns position that is given distance and relative direction away from original object. The alternative syntax available from Arma 3 v 2.14, returns the position offset of the attached object. If the animated memory point is used for attachment, the offset is calculated in [ render scope](https://community.bistudio.com/wiki/Simulation_vs_Render_Time_Scope%23Render_Time_Scope%20).",
            "examples": [
                {
                    "text": "Find position 100 metres away at player's 3 o'clock:\n\n```sqf\n_relpos = player getRelPos [100, 90];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - object"
                        },
                        {
                            "name": "distance",
                            "description": "`Number` - distance from object"
                        },
                        {
                            "name": "direction",
                            "description": "`Number` - direction relative to object's current direction"
                        }
                    ],
                    "outline": "object `getRelPos` [distance, direction]",
                    "returns": "`Array` format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL)"
                },
                {
                    "parameters": [
                        {
                            "name": "obj1",
                            "description": "`Object` - parent object"
                        },
                        {
                            "name": "obj2",
                            "description": "`Object` - attached object"
                        }
                    ],
                    "outline": "obj1 `getRelPos` obj2",
                    "returns": "`Array` format [PositionRelative](https://community.bistudio.com/wiki/Position%23PositionRelative)"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getRelPos"
        },
        "configuration": {
            "label": "getRelPos",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get status of disabled raycasts for remote entities. See `disableRemoteSensors` for detailed description.",
            "examples": [
                {
                    "text": "```sqf\n_status = getRemoteSensorsDisabled;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`getRemoteSensorsDisabled`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getRemoteSensorsDisabled"
        },
        "configuration": {
            "label": "getRemoteSensorsDisabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the amount (1 is full) of repair resources in the cargo space of a repair vehicle. **NOTE**: Since Arma 3 v1.96 the return value for vehicles that are not configured to have ability to repair other vehicles is -1. (Prior to that the value was negative infinity)",
            "examples": [
                {
                    "text": "```sqf\nvalue = getRepairCargo vehicleName;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getRepairCargo` vehicle",
                    "returns": "`Number` - repair cargo value, -1 if repair cargo is not supported, 0 if the vehicle is !`alive` or `isNull`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getRepairCargo"
        },
        "configuration": {
            "label": "getRepairCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array containing all information about current client screen resolution.\n\n**Arma 3**: \n**Render resolution** is not returned by this command.\n\nA sampling setting of **50%** means half of native width _and_ half of native height, resulting in a render resolution of **25%** the original resolution.\n**IMPORTANT**:  The engine default value for `**fovTop**` is **0.75** in case it is needed to calculate difference with custom FOV.\n**NOTE**: The `**aspectRatio**` is calculated as `**fovLeft&nbsp;/&nbsp;fovTop**` and should be the same as `**screenW&nbsp;/&nbsp;screenH**` for undistorted image if the FOV is custom. Some of the common values:\n{{{!}} class{{=}}\"wikitable\"\n! 16/9 !! 16/10 !! 5/4 !! 4/3 !! 16/9 triple screen\n{{!}}-\n{{!}} 1.777777(…) {{!}}{{!}} 1.6 {{!}}{{!}} 1.25 {{!}}{{!}} 1.333333(…) {{!}}{{!}} 5.333333(…)\n{{!}}}",
            "examples": [
                {
                    "text": "```sqf\nprivate _res = getResolution;\n```\n\n\nExample result with a single 16:9 monitor:\n\n```sqf\n\n[\n\t1920,\t\t// width\n\t1080,\t\t// height\n\t792,\t\t// 2D viewport width\n\t594,\t\t// 2D viewport height\n\t1.77778,\t// aspect ratio\n\t0.55,\t\t// UI scale\n\t0.75,\t\t// fovTop\n\t1.33333,\t// fovLeft\n\tfalse\t\t// tripleHead\n]\n\n```\n\nExample result with a triple 16:9 monitor setup:\n\n```sqf\n\n[\n\t5760,\t\t// width\n\t1080,\t\t// height\n\t792,\t\t// 2D viewport width\n\t594,\t\t// 2D viewport height\n\t5.33333,\t// aspect ratio\n\t0.55\t\t// UI scale\n]\n\n```\n\nExample result on a dedicated server:\n\n```sqf\n\n[\n\t160,\t\t// width\n\t120,\t\t// height\n\t136,\t\t// 2D viewport width\n\t102,\t\t// 2D viewport height\n\t1.33333,\t// aspect ratio\n\t0.85\t\t// UI scale\n]\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`getResolution`",
                    "returns": "`Array` - `**[screenW, screenH, viewPortW, viewPortH, aspectRatio, uiScale, fovTop, fovLeft, tripleHead, textureQuality]**`\n* `**screenW**`: `Number` - width of the screen in pixels\n* `**screenH**`: `Number` - height of the screen in pixels\n* `**viewPortW**`: `Number` - width of the **4:3** view port in pixels\n* `**viewPortH**`: `Number` - height of the **4:3** view port in pixels \n* `**aspectRatio**`: `Number` - screen aspect ratio\n* `**uiScale**`: `Number` - the scale of the UI, which affects view port size:\n: {{{!}} class=\"wikitable\" style=\"margin-top: -0.5em\"\n{{!}}+ Arma 3\n! Very Small !! Small !! Normal !! Large !! Very Large\n{{!}}-\n{{!}} 0.47 {{!}}{{!}} 0.55 {{!}}{{!}} 0.7 {{!}}{{!}} 0.85 {{!}}{{!}} 1\n{{!}}}\n* {{GVI|arma3|1.94"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getResolution"
        },
        "configuration": {
            "label": "getResolution",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns various properties for the respawning vehicle. All properties are synched over the network and should be the same on every client including `JIP`.",
            "examples": [
                {
                    "text": "```sqf\nprivate _vehInfo = getRespawnVehicleInfo veh1;\n```"
                },
                {
                    "text": "```sqf\nprivate _isRespawning = veh1 getRespawnVehicleInfo 10;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - transport"
                        }
                    ],
                    "outline": "`getRespawnVehicleInfo` vehicle",
                    "returns": "`Array` in format [respawnDelay, respawnCount, deleteOldWreck, respawnOnServer, respawnFlying, respawnUnit, respawnMode, respawnSide, useRespawnMarkerDir, canRespawn, isRespawning, respawnMarkerName, respawnTimeRemaining, missionRespawnDelay, missionRespawnMode], where:\n\n* 0 - respawnDelay: `Number` - how long the vehicle will be in respawn queue after death. -1 - 'missionRespawnDelay' value is used.\n* 1 - respawnCount: `Number` - how many times left for the vehicle to respawn. -1 - indefinite, 0 - no more respawns\n* 2 - deleteOldWreck: `Boolean` - if `true` then the old wreck will be deleted when vehicle respawns.\n* 3 - respawnOnServer: `Boolean` - if `true` the wreck will be transfered to the server and vehicle will respawn on server.\n* 4 - respawnFlying: `Boolean` - if `true` vehicle will not be forced to the ground and if can fly and has pilot will be spawned flying.\n* 5 - respawnUnit: `Object` - pilot/driver unit that will be placed into the new vehicle.\n* 6 - respawnMode: `Number` - individual respawn mode for this vehicle. Any mode other than 2,3 or -1 means disabled respawn. -1 - use 'missionRespawnMode'\n* 7 - respawnSide: `Side` - what side markers to use for respawn. For example if 'respawnSide' set to `east` the markers with names 'respawn_vehicle_eastXXX' and 'respawn_eastXXX' will be used. \n* 8 - useRespawnMarkerDir: `Boolean` - align respawned vehicle with respawn marker direction or with wreck direction if no marker found or \"INSTANT\" mode is used. Otherwise, direction is random.\n* 9 - canRespawn: `Boolean` - `true` if vehicle is respawnable (all conditions for respawn are ok)\n* 10 - isRespawning: `Boolean` - `true` if vehicle is currently in the respawn queue awaiting respawn.\n* 11 - respawnMarkerName: `String` - Chosen vehicle respawn marker, when vehicle respawns it will use the marker params. The respawn marker is processed instantly uppon vehicle's death.\n* 12 - respawnTimeRemaining: `Number` - how long left before the respawn. -1 after vehicle has respawned or has respawn disabled.\n* 13 - missionRespawnDelay: `Number` - global mission vehicle respawn delay. script command > mission param > 3DEN param\n* 14 - missionRespawnMode: `Number` - global mission vehicle respawn mode. script command > mission param > 3DEN param"
                },
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - transport"
                        },
                        {
                            "name": "index",
                            "description": "`Number` - property index (see main syntax, for example 10 for isRespawning)"
                        }
                    ],
                    "outline": "vehicle `getRespawnVehicleInfo` index",
                    "returns": "`Anything` - depends on the requested property, or `Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getRespawnVehicleInfo"
        },
        "configuration": {
            "label": "getRespawnVehicleInfo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns road piece information.\n**NOTE**: \n* Bridges are special case. Only large bridges are part of Road Net. Small pedestrian bridges are not recognized as roads. Bridge \"mapType\" is `**\"ROAD\"**` so the best way to detect bridges is to check \"isBridge\" value. Bridges are not part of new roads and don't have the same info as other new roads, so only \"mapType\", \"texture\" (maybe \"textureEnd\"), \"begPos\", \"endPos\" and \"isBridge\" are  updated.\n* Pedestrian roads \"mapType\" is usually `**\"TRAIL\"**`. They are part of Road Net but excluded from path finding. Use `roadsConnectedTo` with alternative flag to find the connections between pedestrian roads.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _info = getRoadInfo _road;\n_info params [\"_mapType\", \"_width\", \"_isPedestrian\", \"_texture\", \"_textureEnd\", \"_material\", \"_begPos\", \"_endPos\", \"_isBridge\"];\nprivate _roadDirection = _begPos getDir _endPos;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "road",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getRoadInfo` road",
                    "returns": "`Array` in format [mapType, width, isPedestrian, texture, textureEnd, material, begPos, endPos, isBridge, AIpathOffset], where:\n* mapType: `String` - road segment type, could be `**\"HIDE\"**`, `**\"ROAD\"**`, `**\"MAIN ROAD\"**`, `**\"TRACK\"**`, `**\"TRAIL\"**` (see `nearestTerrainObjects`)\n* width: `Number` - road segment width\n* isPedestrian: `Boolean` - when `true` road is for pedestrian use only\n* texture: `String` - road segment surface texture\n* textureEnd: `String` - road segment surface texture\n* material: `String` - road segment surface material \n* begPos: `Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) - start of the road segment\n* endPos: `Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) - finish of the road segment\n* isBridge: `Boolean` - when `true` road segment is a bridge\n* {{GVI|arma3|2.12"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getRoadInfo"
        },
        "configuration": {
            "label": "getRoadInfo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns if rotor break is on.\n{{Feature|afm}}",
            "examples": [
                {
                    "text": "```sqf\n_isOn = getRotorBrakeRTD _heli;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "helicopter ",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getRotorBrakeRTD` helicopter",
                    "returns": "`Boolean` - `true` if on, otherwise `false`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getRotorBrakeRTD"
        },
        "configuration": {
            "label": "getRotorBrakeRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array of bone names that are attached to the specified selection.\n**IMPORTANT**: This command is relatively slow because it searches in all vertices of every bone.",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "selectionName",
                            "description": "`String`"
                        },
                        {
                            "name": "LOD",
                            "description": "`String` or `Number` - can be one of:\n{{Columns|2|\n* `**\"Memory\"**`\n* `**\"Geometry\"**`\n* `**\"FireGeometry\"**`\n* `**\"LandContact\"**`\n* `**\"HitPoints\"**`\n* `**\"ViewGeometry\"**`\n}}\nWhen `Number` is used, command searches for a LOD with the same [LOD resolution](https://community.bistudio.com/wiki/LOD%20resolutions)"
                        }
                    ],
                    "outline": "object `getSelectionBones` [selectionName, LOD]",
                    "returns": "`Array` of `String`s - array of bone names"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getSelectionBones"
        },
        "configuration": {
            "label": "getSelectionBones",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns vehicle sensors' potential targets.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _radarTargets = getSensorTargets vehicle player;\n/*\n\treturns e.g\n\t[\n\t\t[O Alpha 1-3:1, \"air\", \"unknown\", [\"ir\", \"activeradar\", \"visual\"]],\n\t\t[17750112040# 163957: apc_tracked_01_aa_f.p3d, \"ground\", \"unknown\", [\"datalink\"]]\n\t]\n*/\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - the sensors-equipped vehicle"
                        }
                    ],
                    "outline": "`getSensorTargets` vehicle",
                    "returns": "`Array` of `Array`s format [<nowiki/>[target, type, relationship, sensor], ...]:\n* target: `Object`\n* type: `String` - can be one of:\n** \"unknown\"\n** \"footmobile\"\n** \"air\"\n** \"ground\"\n** \"laserTarget\"\n** \"irTarget\"\n** \"radarTarget\"\n* relationship: `String` - can be one of:\n** \"friendly\"\n** \"enemy\"\n** \"destroyed\"\n** \"unknown\"\n* sensor: `Array` of `String`s - among the following values:\n** \"ir\"\n** \"nv\"\n** \"laser\"\n** \"activeradar\"\n** \"passiveradar\"\n** \"man\"\n** \"visual\"\n** \"datalink\""
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getSensorTargets"
        },
        "configuration": {
            "label": "getSensorTargets",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns vehicle sensors' threats.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _dangers = getSensorThreats vehicle player;\n/*\n\treturns e.g\n\t[\n\t\t[164230: titan_missile_atl_fly.p3d, \"missile\", \"visual\"],\n\t\t[164233: titan_missile_atl_fly.p3d, \"threatmissile\", \"radar\"]\n\t]\n*/\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - the sensors-equipped vehicle"
                        }
                    ],
                    "outline": "`getSensorThreats` vehicle",
                    "returns": "`Array` of `Array`s - format [<nowiki/>[object, type, sensor], ...]:\n* object: `Object`\n* type: `String` - can be one of:\n** \"missile\"\n** \"marked\"\n** \"locked\"\n* sensor: `String` - can be one of:\n** \"ir\"\n** \"laser\"\n** \"missile\"\n** \"radar\" (**not** \"activeradar\"/\"passiveradar\")\n** \"visual\""
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getSensorThreats"
        },
        "configuration": {
            "label": "getSensorThreats",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets the shadows rendering distance.",
            "examples": [
                {
                    "text": "```sqf\n_value = getShadowDistance;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**getShadowDistance**",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getShadowDistance"
        },
        "configuration": {
            "label": "getShadowDistance",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns various properties for the given shot.",
            "examples": [
                {
                    "text": "```sqf\nprivate _shotInfo = getShotInfo shot1;\n```"
                },
                {
                    "text": "```sqf\nprivate _fuseDistanceLeft = shot1 getShotInfo 1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "shot",
                            "description": "`Object` - shot projectile"
                        }
                    ],
                    "outline": "`getShotInfo` shot",
                    "returns": "`Array` in format [effectiveTimeToLive, fuseDistanceLeft, timeToExplosion, triggerIsForced, shownTracer, isReal, isSubmunitionTriggered, isSetForDeletion], where:\n\n* 0 - effectiveTimeToLive: `Number` - how much more shot has to live.\n* 1 - fuseDistanceLeft: `Number` - how long shot has to travel more to get fused (undebarrel grenade for example).\n* 2 - timeToExplosion: `Number` - how long before shot fuse explodes (hand grenade for example).\n* 3 - triggerIsForced: `Boolean` - `true` if shot ammo was triggered with `triggerAmmo`.\n* 4 - shownTracer: `Boolean` - `true` if the shot shown as tracer.\n* 5 - isReal: `Boolean` - `true` if the shot is considered in damage events.\n* 6 - isSubmunitionTriggered: `Boolean` - `true` if the shot contains submunition and it is triggered.\n* 7 - isSetForDeletion: `Boolean` - `true` if the shot is already set for deletion but not yet removed from the scene."
                },
                {
                    "parameters": [
                        {
                            "name": "shot",
                            "description": "`Object` - shot projectile"
                        },
                        {
                            "name": "index",
                            "description": "`Number` - property index (see main syntax, for example 1 for fuseDistanceLeft)"
                        }
                    ],
                    "outline": "shot `getShotInfo` index",
                    "returns": "`Anything` - depends on the requested property, or `Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getShotInfo"
        },
        "configuration": {
            "label": "getShotInfo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns shot information for the given projectile. If shot was fired by a soldier on foot or in FFV position in vehicle, the soldier is returned for the vehicle.",
            "examples": [
                {
                    "text": "```sqf\n_shotParents = getShotParents myProjectile;\n```"
                },
                {
                    "text": "```sqf\nbatmobile addEventHandler [\"Fired\", {systemChat str getShotParents (_this select 6)}];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "projectile",
                            "description": "`Object` - the actual projectile shot"
                        }
                    ],
                    "outline": "`getShotParents` projectile",
                    "returns": "`Array` - [vehicle, instigator] - Where vehicle is the vehicle the shot was fired from, and the instigator is the person who pulled the trigger"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getShotParents"
        },
        "configuration": {
            "label": "getShotParents",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return object which is sling loaded by vehicle",
            "examples": [
                {
                    "text": "```sqf\n_cargo = getSlingLoad heli1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getSlingLoad` vehicle",
                    "returns": "`Object` - the sling loaded vehicle. `objNull` if nothing is sling loaded."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getSlingLoad"
        },
        "configuration": {
            "label": "getSlingLoad",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the name of assigned item in given slot or the empty string.",
            "examples": [
                {
                    "text": "```sqf\nhint (player getSlotItemName 610);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "slot",
                            "description": "`Number` - can be one of:\n{{Columns|4|\n* 603 - Goggles\n* 605 - Headgear\n* 608 - Map\n* 609 - Compass\n* 610 - Watch\n* 611 - Radio\n* 612 - GPS\n* 616 - HMD\n* 617 - Binoculars\n* 701 - Vest\n* 801 - Uniform\n* 901 - Backpack\n}}"
                        }
                    ],
                    "outline": "unit `getSlotItemName` slot",
                    "returns": "`String` - item name"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getSlotItemName"
        },
        "configuration": {
            "label": "getSlotItemName",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns value of the given sound controller.",
            "examples": [
                {
                    "text": "```sqf\nvehicle player getSoundController \"rpm\"; //600\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - must be a vehicle (does not work on soldiers)"
                        },
                        {
                            "name": "controller",
                            "description": "`String` - name of sound controller, for example \"rpm\" or \"thrust\"."
                        }
                    ],
                    "outline": "vehicle `getSoundController` controller",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getSoundController"
        },
        "configuration": {
            "label": "getSoundController",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the calculated value of [simple expression](https://community.bistudio.com/wiki/simple%20expression) defined in config. Config could be any config entry, even [ mission config](https://community.bistudio.com/wiki/missionConfigFile%20) entry. It is more important that the vehicle is a transport and not any object. If the expression contains sound controllers, the controller values will be taken from the given vehicle.",
            "examples": [
                {
                    "text": "```sqf\n_result = (vehicle player) getSoundControllerResult (configFile >> \"cfgVehicles\" >> typeOf (vehicle player) >> \"sounds\" >> \"idle_ext\" >> \"volume\");\n```"
                },
                {
                    "text": "```sqf\n\n// mission config entry to reverse rain strength:\n// myExpression = \"rain factor [1,0]\";\n_result = \"PaperCar\" createVehicleLocal position player getSoundControllerResult (missionConfigFile >> \"myExpression\");\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - transport vehicle"
                        },
                        {
                            "name": "config",
                            "description": "`Config` - path to config entry containing the expression"
                        }
                    ],
                    "outline": "vehicle `getSoundControllerResult` config",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getSoundControllerResult"
        },
        "configuration": {
            "label": "getSoundControllerResult",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get the speed for the given speed mode.\n\nSpeedMode can be:\n*\"AUTO\"\n*\"SLOW\"\n*\"NORMAL\"\n*\"FAST\"",
            "examples": [
                {
                    "text": "```sqf\n_spd = player getSpeed \"FAST\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "speedMode",
                            "description": "`String`"
                        }
                    ],
                    "outline": "object `getSpeed` speedMode",
                    "returns": "`Number` - m/s"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getSpeed"
        },
        "configuration": {
            "label": "getSpeed",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get current stamina (~ seconds until depletion)",
            "examples": [
                {
                    "text": "```sqf\ngetStamina player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getStamina` unit",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getStamina"
        },
        "configuration": {
            "label": "getStamina",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns value of the given stat.\n\nA list of possible StatNames can be found here: [Arma 3: Stat Names](https://community.bistudio.com/wiki/Arma%203%3A%20Stat%20Names)",
            "examples": [
                {
                    "text": "```sqf\ngetStatValue \"ExpWarlockDown\"; // Checks if the \"Warlock Down\" Achivement was already aquired\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "name",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`getStatValue` name",
                    "returns": "`Number` - (can return `Nothing`)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getStatValue"
        },
        "configuration": {
            "label": "getStatValue",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns servers information of Steam friends currently playing the game.",
            "examples": [
                {
                    "text": "```sqf\ngetSteamFriendsServers; // returns e.g [[\"127.42.33.8:2302\", \"MyFriend\"], [\"127.84.66.16:4604\", \"My Best Friend\"]]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`getSteamFriendsServers`",
                    "returns": "`Array` of `Array` of `String`s in format [ipAndPort, steamFriendName]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getSteamFriendsServers"
        },
        "configuration": {
            "label": "getSteamFriendsServers",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns subtitles settings.",
            "examples": [
                {
                    "text": "```sqf\nprivate _subtitleSettings = getSubtitleOptions;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`getSubtitleOptions`",
                    "returns": "`Array` of `Boolean`s - options in format [subtitlesEnabled, radioSubtitlesEnabled]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getSubtitleOptions"
        },
        "configuration": {
            "label": "getSubtitleOptions",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets the suppression value for the given unit. Returns varying `Number` between 0 and 1, or -1 if suppression is disabled (`**`disableAI` \"SUPPRESSION\"**`) or the suppression value is not available. Suppression is not calculated for player entities and is always 0, unless it is set with `setSuppression`. In this case the return value is the set value. Before Arma 3 v1.92 this command could return `nil`.\n\n  \n**IMPORTANT**:  The unit must not be `objNull`, must be [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality) and `alive`",
            "examples": [
                {
                    "text": "```sqf\ngetSuppression AI_unit_1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getSuppression` unit",
                    "returns": "`Number` - from 0 to 1, or -1 if suppression is not available."
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getSuppression"
        },
        "configuration": {
            "label": "getSuppression",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "A getter for `setTerrainGrid`, returns the current terrain grid.",
            "examples": [
                {
                    "text": "```sqf\n_terrainGrid = getTerrainGrid;\n```"
                },
                {
                    "text": "```sqf\n\nif (getTerrainGrid < 50) then\n{\n\thint \"Grass is enabled\";\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`getTerrainGrid`",
                    "returns": "`Number` - terrain grid value"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getTerrainGrid"
        },
        "configuration": {
            "label": "getTerrainGrid",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns terrain height at the specified location.\n**NOTE**: Unlike `getTerrainHeightASL` which returns the exact position's height, this command returns the height at the closest terrain grid pixel to the provided position:\n\n```sqf\n\nprivate _cellWidth = getTerrainInfo # 2;\ngetTerrainHeightASL (_pos apply { _cellWidth * round (_x / _cellWidth) });\n\n```",
            "examples": [
                {
                    "text": "```sqf\nprivate _gridCellHeight = getTerrainHeight getPosWorld player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "positionWorld",
                            "description": "[Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position3D](https://community.bistudio.com/wiki/Position%23Introduction) - position in world coordinates either in [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position3D](https://community.bistudio.com/wiki/Position%23Introduction)"
                        }
                    ],
                    "outline": "`getTerrainHeight` positionWorld",
                    "returns": "`Number` - terrain height"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getTerrainHeight"
        },
        "configuration": {
            "label": "getTerrainHeight",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the terrain height above the sea for the given position.",
            "examples": [
                {
                    "text": "```sqf\n_height = getTerrainHeightASL (getPosATL player);\n```"
                },
                {
                    "text": "```sqf\n_height = getTerrainHeightASL [5213,3245];\n```"
                },
                {
                    "text": "```sqf\n_seaDepth = abs (getTerrainHeightASL getPosATL player); // sea depth at player's position\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Array` in format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position3D](https://community.bistudio.com/wiki/Position%23Introduction) (in which case the Z value is ignored)"
                        }
                    ],
                    "outline": "`getTerrainHeightASL` position",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getTerrainHeightASL"
        },
        "configuration": {
            "label": "getTerrainHeightASL",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the terrain heightmap information, as well as sea level offset (due to tides, if available).",
            "examples": [
                {
                    "text": "```sqf\nprivate _terrainInfo = getTerrainInfo; // Stratis: [32,256,4,2048,0]; Altis: [30,1024,7.5,4096,0] \n```"
                },
                {
                    "text": "[[File:Terrain grid on Stratis.jpg|thumb|Terrain grid on Stratis]]\n\n```sqf\n\n// Draws a 20x20 terrain grid when clicking on the map\n// Each triangle of the terrain is formed by a diagonal\n// that starts from the top-left corner of the cell and ends at the bottom-right corner.\n// The green lines show the cell diagonals \nonMapSingleClick {\n\tgetTerrainInfo params [\"\", \"\", \"_cellsize\", \"_resolution\"];\n\tgridLines = [];\n\t_pos apply { floor (_x / _cellsize) } params [\"_x0\", \"_y0\"];\n\tfor \"_x\" from ((_x0 - 10) max 0) to ((_x0 + 10) min _resolution) do\n\t{\n\t\tfor \"_y\" from ((_y0 - 10) max 0) to ((_y0 + 10) min _resolution) do\n\t\t{\n\t\t\tprivate _p1 = [_x, _y] vectorMultiply _cellsize;\t\t// bottom-left corner\n\t\t\tprivate _p2 = [_x, _y + 1] vectorMultiply _cellsize;\t// top-left corner\n\t\t\tprivate _p3 = [_x + 1, _y] vectorMultiply _cellsize;\t// bottom-right corner\n\t\t\t// Positions are AGL, and Z value of 0 is already at the terrain surface (except on water surface). \n\t\t\t// Just move them up a few centimeters so they're visible.\n\t\t\t_p1 set [2, 0.1];\n\t\t\t_p2 set [2, 0.1];\n\t\t\t_p3 set [2, 0.1];\n\n\t\t\tgridLines pushBack [_p1, _p2, [1,0,0,1]];\n\t\t\tgridLines pushBack [_p1, _p3, [1,0,0,1]];\n\t\t\tgridLines pushBack [_p2, _p3, [0,1,0,1]];\n\t\t};\n\t};\n\n\tonEachFrame {\n\t\t{\n\t\t\tdrawLine3D _x;\n\t\t} forEach gridLines;\n\t}\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`getTerrainInfo`",
                    "returns": "`Array` in format `**[landGridWidth, landGridSize, terrainGridWidth, terrainGridSize, seaLevel]**`:\n* landGridWidth: `Number` - width of each land grid, in meters\n* landGridSize: `Number` - number of land grid pixels\n* terrainGridWidth: `Number` width of each terrain grid, in meters (also known as \"cell size\")\n* terrainGridSize: `Number` - number of terrain grid pixels (also known as \"heightmap resolution\")\n* seaLevel: `Number` - sea level without waves. The value is `**0**` if tides are disabled.\n\n**NOTE**: \n* The result of `**landGridWidth * landGridSize**` and `**terrainGridWidth * terrainGridSize**` is always equal to the `worldSize`.\n* \"land grid\" is used by the game for object placement (e.g. finding the `nearestObject`), dynamic simulation, etc.\n* \"terrain grid\" is the actual terrain, used to display the terrain, calculate [terrain height](https://community.bistudio.com/wiki/getTerrainHeightASL), [surface normal](https://community.bistudio.com/wiki/surfaceNormal), etc."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getTerrainInfo"
        },
        "configuration": {
            "label": "getTerrainInfo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Extracts `localize`d text from config entry, if entry is subject to [localization](https://community.bistudio.com/wiki/localize), otherwise returns text value.\nTo obtain the translation key itself, see `getTextRaw`.",
            "examples": [
                {
                    "text": "```sqf\n_text = getText (configFile >> \"CfgVehicles\" >> \"Thing\" >> \"icon\"); // \"Get in %1 as Driver\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "config",
                            "description": "`Config`"
                        }
                    ],
                    "outline": "`getText` config",
                    "returns": "`String` - text value"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getText"
        },
        "configuration": {
            "label": "getText",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns raw text from config entry. If entry is subject to [ localization](https://community.bistudio.com/wiki/localize%20), the translation key is returned. To obtain the [ localized](https://community.bistudio.com/wiki/isLocalized%20) text, see `getText`.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _text = getText (configFile >> \"CfgVehicles\" >> \"Thing\" >> \"displayName\");\t\t\t// \"Get in %1 as Driver\"\nprivate _rawText = getTextRaw (configFile >> \"CfgVehicles\" >> \"Thing\" >> \"displayName\");\t// \"$STR_ACTION_GETIN_DRIVER\"\nprivate _localized = localize _text;\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \"Get in %1 as Driver\"\n_localized == _text; // true\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "config",
                            "description": "`Config`"
                        }
                    ],
                    "outline": "`getTextRaw` config",
                    "returns": "`String` - raw text value"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getTextRaw"
        },
        "configuration": {
            "label": "getTextRaw",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return texture information - resolution in pixels (mipmap level 0) and average colour. Multiply the pixel values by `pixelW` and `pixelH` to get screen coordinates.",
            "examples": [
                {
                    "text": "```sqf\ngetTextureInfo \"a3\\characters_f\\blufor\\data\\clothing1_co.paa\"; // [2048, 2048, [0.458824, 0.427451, 0.34902, 1]]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "texture",
                            "description": "`String` - texture path (.paa, .jpg, .ogv)"
                        }
                    ],
                    "outline": "`getTextureInfo` texture",
                    "returns": "`Array` in format [width, height, rgbaAverageColour] where:\n* width: `Number`\n* height: `Number`\n* {{GVI|arma3|2.08"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getTextureInfo"
        },
        "configuration": {
            "label": "getTextureInfo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns estimated width of the text based on [font type](https://community.bistudio.com/wiki/FXY_File_Format%23Available_Fonts) and size. Similar to `ctrlTextWidth` but does not require a control and can be used to estimate text width for any control including buttons. Result does not include left and right margins (hardcoded at 0.008 each).\n**NOTE**: This command always uses unicode (see also `forceUnicode`).",
            "examples": [
                {
                    "text": "```sqf\n_textWidth = \"Hello World\" getTextWidth [\"PuristaMedium\", 0.03];\n```"
                },
                {
                    "text": "```sqf\n_textWidthInclMargins = (\"Hello World\" getTextWidth [\"PuristaMedium\", 0.03]) + 0.016;\n```"
                },
                {
                    "text": "```sqf\n\n#define MARGINS 0.0016\nprivate _ctrl = findDisplay 46 ctrlCreate [\"RscText\", -1];\n_ctrl ctrlSetText \"TestString\";\n_ctrl ctrlSetFont \"PuristaMedium\";\n_ctrl ctrlSetFontHeight 0.04;\nctrlTextWidth _ctrl == (\"TestString\" getTextWidth [\"PuristaMedium\", 0.04]) + MARGINS; // true\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "text",
                            "description": "`String` - text string to measure"
                        },
                        {
                            "name": "font",
                            "description": "`String` - [font type](https://community.bistudio.com/wiki/FXY_File_Format%23Available_Fonts)"
                        },
                        {
                            "name": "size",
                            "description": "`Number` - font size"
                        }
                    ],
                    "outline": "text `getTextWidth` [font, size]",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getTextWidth"
        },
        "configuration": {
            "label": "getTextWidth",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns all Thermal Imaging parameters.\n{{{!}} class=\"wikitable align-center-col-2\"\n! Parameter\n! Default Value\n! Description\n{{!}}-\n{{!}} `**OutputRangeStart**`\n{{!}} 0.1\n{{!}} Thermal output minimal value\n{{!}}-\n{{!}} `**OutputRangeWidth**`\n{{!}} 0.8\n{{!}} Thermal output width\n{{!}}}\n**NOTE**: The output formula is as follows: `**OutputRangeStart + _thermalValue_ &times; OutputRangeWidth**`, making the default range 0.1..0.9.",
            "examples": [
                {
                    "text": "```sqf\nif (getTIParameters get \"OutputRangeStart\" == 0.1) then { hint \"default Start\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`getTIParameters`",
                    "returns": "`HashMap` format <sqf inline>[[\"OutputRangeStart\", 0.1], [\"OutputRangeWidth\", 0.8]]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getTIParameters"
        },
        "configuration": {
            "label": "getTIParameters",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns total DLC usage time in this game session",
            "examples": [
                {
                    "text": "```sqf\n_dlcTime = getTotalDLCUsageTime;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`getTotalDLCUsageTime`",
                    "returns": "`Number` - time (in seconds?)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getTotalDLCUsageTime"
        },
        "configuration": {
            "label": "getTotalDLCUsageTime",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get the vehicle towing the provided one.",
            "examples": [
                {
                    "text": "```sqf\nprivate _towParent = getTowParent _towedvehicle;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "towedVehicle",
                            "description": "`Object` - the towed vehicle"
                        }
                    ],
                    "outline": "`getTowParent` towedVehicle",
                    "returns": "`Object` - the object towing the provided object - `objNull` if not towed"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getTowParent"
        },
        "configuration": {
            "label": "getTowParent",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns controls trim offset.{{Feature|afm}}",
            "examples": [
                {
                    "text": "```sqf\n_array = getTrimOffsetRTD vehicle player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "RTD_helicopter",
                            "description": "`Object` - helicopter with advanced flight model enabled"
                        }
                    ],
                    "outline": "`getTrimOffsetRTD` RTD_helicopter",
                    "returns": "`Array` - offsets in format [x,y,z]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getTrimOffsetRTD"
        },
        "configuration": {
            "label": "getTrimOffsetRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the rotation and elevation limits for the given turret.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _turretLimits = m2 getTurretLimits [0];\n_turretLimits params [\"_minTurn\", \"_maxTurn\", \"_minElev\", \"_maxElev\", \"_overridden\"];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - vehicle the turret belongs to"
                        },
                        {
                            "name": "turret",
                            "description": "`Array` - turret path"
                        }
                    ],
                    "outline": "vehicle `getTurretLimits` turret",
                    "returns": "`Array` in format [minTurn, maxTurn, minElev, maxElev, overridden], where:\n* minTurn: `Number` - from 0 to -angle in degrees (left)\n* maxTurn: `Number` - from 0 to +angle in degrees (right)\n* minElev: `Number` - from 0 to -angle in degrees (down)\n* maxElev: `Number` - from 0 to +angle in degrees (up)\n* overridden: `Boolean` - if custom limits were applied"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getTurretLimits"
        },
        "configuration": {
            "label": "getTurretLimits",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get the current optics mode of the optics in the turret occupied by the specified unit. The alternative syntax allows a vehicle and turret path to be specified without needing a unit. Optic modes refer to the different fields of view (FOV) or zoom levels of an optic.",
            "examples": [
                {
                    "text": "```sqf\ngetTurretOpticsMode player;\n```"
                },
                {
                    "text": "```sqf\nmyTank getTurretOpticsMode [-1];\n```"
                },
                {
                    "text": "```sqf\nmyAircraft getTurretOpticsMode [0, 0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "obj",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getTurretOpticsMode` obj",
                    "returns": "`Number`"
                },
                {
                    "parameters": [
                        {
                            "name": "obj",
                            "description": "`Object`"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` format [Turret Path](https://community.bistudio.com/wiki/Turret%20Path)"
                        }
                    ],
                    "outline": "obj `getTurretOpticsMode` turretPath",
                    "returns": "`Number`"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getTurretOpticsMode"
        },
        "configuration": {
            "label": "getTurretOpticsMode",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a unit's freefall information.",
            "examples": [
                {
                    "text": "```sqf\ngetUnitFreefallInfo player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit"
                        }
                    ],
                    "outline": "`getUnitFreefallInfo` unit",
                    "returns": "`Array` format [isFalling, isInFreefallPose, minFreefallHeight], where\n* isFalling: `Boolean` - `true` if unit is falling\n* isInFreefallPose: `Boolean` - `true` if unit is in freefall pose\n* minFreefallHeight: `Number` - current minimum freefall height (see `setUnitFreefallHeight`)"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getUnitFreefallInfo"
        },
        "configuration": {
            "label": "getUnitFreefallInfo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a **[Unit Loadout Array](https://community.bistudio.com/wiki/Unit%20Loadout%20Array)** with all assigned items, weapons, containers and their stored items.\n\n**NOTE**: \nThe config should contain the following standard entries:```cpp\nclass MyLoadout\n{\n\tuniformClass = \"U_B_CombatUniform_mcam\";\n\tbackpack = \"B_AssaultPack_mcamo\";\n\tlinkedItems[] = { \"V_PlateCarrier1_rgr\", \"H_HelmetB\", \"ItemCompass\", \"ItemWatch\", \"ItemRadio\", \"NVGoggles\" };\n\tweapons[] = { \"arifle_MX_ACO_pointer_F\", \"hgun_P07_F\" };\n\titems[] = { \"FirstAidKit\", \"FirstAidKit\", \"FirstAidKit\" };\n\tmagazines[] = {\n\t\t\"30Rnd_65x39_caseless_mag\", \"16Rnd_9x21_Mag\",\n\t\t\"SmokeShell\",\n\t\t\"HandGrenade\", \"HandGrenade\", \"HandGrenade\", \"HandGrenade\", \"HandGrenade\", \"HandGrenade\", \"HandGrenade\",\n\t\t\"HandGrenade\", \"HandGrenade\", \"HandGrenade\", \"HandGrenade\", \"HandGrenade\", \"HandGrenade\", \"HandGrenade\",\n\t\t\"HandGrenade\", \"HandGrenade\", \"HandGrenade\", \"HandGrenade\", \"HandGrenade\", \"HandGrenade\", \"HandGrenade\"\n\t};\n};\n```",
            "examples": [
                {
                    "text": "```sqf\ngetUnitLoadout player;\n```"
                },
                {
                    "text": "```sqf\ngetUnitLoadout [player, true];\n```"
                },
                {
                    "text": "```sqf\ngetUnitLoadout \"B_Soldier_F\";\n```"
                },
                {
                    "text": "```sqf\ngetUnitLoadout (configFile >> \"CfgVehicles\" >> \"B_Soldier_F\");\n```"
                },
                {
                    "text": "```sqf\ngetUnitLoadout (missionConfigFile >> \"MyLoadout\");\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getUnitLoadout` unit",
                    "returns": "`Array` format [Unit Loadout Array](https://community.bistudio.com/wiki/Unit%20Loadout%20Array)"
                },
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "fullMagazines",
                            "description": "`Boolean` - `true` to top up used magazines"
                        }
                    ],
                    "outline": "`getUnitLoadout` [unit, fullMagazines]",
                    "returns": "`Array` format [Unit Loadout Array](https://community.bistudio.com/wiki/Unit%20Loadout%20Array)"
                },
                {
                    "parameters": [
                        {
                            "name": "name",
                            "description": "`String` - `**CfgVehicles**` classname from which to extract the loadout"
                        }
                    ],
                    "outline": "`getUnitLoadout` name",
                    "returns": "`Array` format [Unit Loadout Array](https://community.bistudio.com/wiki/Unit%20Loadout%20Array)"
                },
                {
                    "parameters": [
                        {
                            "name": "config",
                            "description": "`Config` - loadout config class"
                        }
                    ],
                    "outline": "`getUnitLoadout` config",
                    "returns": "`Array` format [Unit Loadout Array](https://community.bistudio.com/wiki/Unit%20Loadout%20Array)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getUnitLoadout"
        },
        "configuration": {
            "label": "getUnitLoadout",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns various information about the unit moves (primary animation) and gestures (masked animation)",
            "examples": [
                {
                    "text": "```sqf\n\n// Getting the move velocity of the animation\nprivate _animInfo = getUnitMovesInfo player;\n// velocity = displacement / time\nprivate _animVelocity = _animInfo # 4 vectorMultiply -1 / _animInfo # 2; // -1 is because man model is reversed, so the rtm animation moves \"backwards\"\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getUnitMovesInfo` unit",
                    "returns": "`Array` in format:\n* 0 - moveProgress: `Number` - move progress in range 0-1\n* 1 - moveTime: `Number` - move elapsed time (`**move progress * move duration**`)\n* 2 - moveDuration: `Number` - move duration\n* 3 - moveFactor: `Number` - move blend factor\n* 4 - rtmStep: `Vector3D` - rtm step (how many meters the unit will move after finishing the animation)\n* 5 - gestureProgress: `Number` - gesture progress in range 0-1\n* 6 - gestureTime: `Number` - gesture elapsed time (`**gesture progress * gesture duration**`)\n* 7 - gestureDuration: `Number` - gesture duration\n* 8 - gestureFactor: `Number` - gesture blend factor"
                },
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "index",
                            "description": "`Number` - index of property from the main syntax"
                        }
                    ],
                    "outline": "unit `getUnitMovesInfo` index",
                    "returns": "`Anything` - Value of the requested property, or `Nothing` if index is invalid. See the main syntax."
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getUnitMovesInfo"
        },
        "configuration": {
            "label": "getUnitMovesInfo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets the current value of a trait of the given unit.\n**NOTE**: For the default values see {{Link|setUnitTrait}}.",
            "examples": [
                {
                    "text": "```sqf\nplayer getUnitTrait \"Medic\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "skillName",
                            "description": "`String` - name of the skill"
                        }
                    ],
                    "outline": "unit `getUnitTrait` skillName",
                    "returns": "* `Boolean` or `Number` - trait's value\n* `Nothing` - if _unit_ is invalid, e.g an empty vehicle"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getUnitTrait"
        },
        "configuration": {
            "label": "getUnitTrait",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "A getter for `setUnloadInCombat`. To return global config value see `canUnloadInCombat`",
            "examples": [
                {
                    "text": "```sqf\ngetUnloadInCombat _vehicle params [\"_cargo\", \"_turrets\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getUnloadInCombat` vehicle",
                    "returns": "`Array` in format [cargo, turrets]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getUnloadInCombat"
        },
        "configuration": {
            "label": "getUnloadInCombat",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns extended information about given server user.",
            "examples": [
                {
                    "text": "```sqf\nprivate _randomUserInfo = getUserInfo selectRandom allUsers;\n```"
                },
                {
                    "text": "```sqf\n\n_userInfo params [\"_playerID\", \"_ownerId\", \"_playerUID\", \"_profileName\", \"_displayName\", \"_steamName\", \"_clientState\", \"_isHC\", \"_adminState\", \"_networkInfo\", \"_unit\"];\n_networkInfo params [\"_avgPing\", \"_avgBandwidth\", \"_desync\"];\n\n```"
                },
                {
                    "text": "```sqf\nprivate _myInfo = getUserInfo getPlayerID player; // this particular example only works if player is server host\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "playerID",
                            "description": "`String` - user DirectPlay ID (see `getPlayerID`, [PlayerConnected](https://community.bistudio.com/wiki/Arma%203%3A%20Mission%20Event%20Handlers%23PlayerConnected))"
                        }
                    ],
                    "outline": "`getUserInfo` playerID",
                    "returns": "`Array` in format [playerID, owner, playerUID, soldierName, displayName, steamProfileName, clientStateNumber, isHeadless, adminState, networkInfo, playerObject], where:\n* 0 - playerID: `String` - user DirectPlay ID (see `getPlayerID`, [PlayerConnected](https://community.bistudio.com/wiki/Arma%203%3A%20Mission%20Event%20Handlers%23PlayerConnected))\n* 1 - owner: `Number` - user owner (see `owner`)\n* 2 - playerUID: `String` - player UID (see `getPlayerUID`)\n* 3 - soldierName: `String` - player name (see `profileName`)\n* 4 - displayName: `String` - player name including squad (see `name`, `squadParams`)\n* 5 - steamProfileName: `String` - steam profile name (see `profileNameSteam`)\n* 6 - clientStateNumber: `String` user client state (see `getClientStateNumber`)\n* 7 - isHeadless: `Boolean` - whether or not this is a headless client (see `hasInterface`, `isServer`)\n* 8 - adminState: `Number` - admin status of the user (see `admin`)\n* 9 - networkInfo: `Array` of `Number`s - format [ping, bandwidth, desync]\n* 10 - playerObject: `Object` - user player entity (see `player`, `selectPlayer`)\n\n**NOTE**: Returns an empty array if said player is not found."
                },
                {
                    "parameters": [
                        {
                            "name": "playerID",
                            "description": "`String` - user DirectPlay ID (see `getPlayerID`, [PlayerConnected](https://community.bistudio.com/wiki/Arma%203%3A%20Mission%20Event%20Handlers%23PlayerConnected))"
                        },
                        {
                            "name": "infoIndex",
                            "description": "`Number` - the index of the data in the return array (see main syntax)"
                        }
                    ],
                    "outline": "playerID `getUserInfo` infoIndex",
                    "returns": "`Anything` - depends on the requested index (see main syntax) or `Nothing`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/getUserInfo"
        },
        "configuration": {
            "label": "getUserInfo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array of user text variables used in MFD.",
            "examples": [
                {
                    "text": "```sqf\ngetUserMFDText _vehicle;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getUserMFDText` vehicle",
                    "returns": "`Array` of `String`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getUserMFDText"
        },
        "configuration": {
            "label": "getUserMFDText",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array of user text variables used in MFD.",
            "examples": [
                {
                    "text": "```sqf\ngetUserMFDValue vehicle player; // user0 in MFD will return 1\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - a vehicle with MFD"
                        }
                    ],
                    "outline": "`getUserMFDValue` vehicle",
                    "returns": "`Array` of `Number`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getUserMFDValue"
        },
        "configuration": {
            "label": "getUserMFDValue",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the value of variable in the variable space assigned to various data types.\nAll available data types combinations:\n{{{!}} class=\"wikitable\"\n!colspan=\"2\"{{!}}Primary syntax (`String`) !! colspan=\"2\"{{!}}Alternative syntax (`Array`)\n{{!}}-\n{{!}}**Code**\n{{!}}**Since**\n{{!}}**Code**\n{{!}}**Since**\n{{!}}-\n{{!}} `Namespace` getVariable `String` {{!}}{{!}} - {{!}}{{!}} `Namespace` getVariable `Array` {{!}}{{!}} Arma 2: Operation Arrowhead v1.60\n{{!}}-\n{{!}} `Object` getVariable `String` {{!}}{{!}} - {{!}}{{!}} `Object` getVariable `Array` {{!}}{{!}} - \n{{!}}-\n{{!}} `Group` getVariable `String` {{!}}{{!}} - {{!}}{{!}} `Group` getVariable `Array` {{!}}{{!}} -\n{{!}}-\n{{!}} [Team Member](https://community.bistudio.com/wiki/Team%20Member) getVariable `String` {{!}}{{!}} - {{!}}{{!}} [Team Member](https://community.bistudio.com/wiki/Team%20Member) getVariable `Array` {{!}}{{!}} - \n{{!}}-\n{{!}} `Task` getVariable `String` {{!}}{{!}} - {{!}}{{!}} `Task` getVariable `Array` {{!}}{{!}} Arma 3 v1.68\n{{!}}-\n{{!}} `Location` getVariable `String` {{!}}{{!}} - {{!}}{{!}} `Location` getVariable `Array` {{!}}{{!}} Arma 3 v1.68\n{{!}}-\n{{!}} `Control` getVariable `String` {{!}}{{!}} - {{!}}{{!}} `Control` getVariable `Array` {{!}}{{!}} Arma 3 v1.56\n{{!}}-\n{{!}} `Display` getVariable `String` {{!}}{{!}} Arma 3 v1.56 {{!}}{{!}} `Display` getVariable `Array` {{!}}{{!}} Arma 3 v1.56\n{{!}}}\n\n{{Feature|important|When variable is [set](https://community.bistudio.com/wiki/setVariable) on a `Task`, it is not actually set on the task itself, but on the FSM attached to the task.\n\nIf there is no FSM, `getVariable` will not work.}}\n**Arma 3**:  In the case of Alt Syntax usage in Arma 3, _defaultValue_ will be returned if:\n* Requested variable is either undefined or `nil`\n* Variable namespace is null (`objNull`, `grpNull`, etc.)",
            "examples": [
                {
                    "text": "```sqf\nprivate _variable = myTruck getVariable \"myVariable\"; // returns nil if \"myVariable\" is not set\n```"
                },
                {
                    "text": "```sqf\nprivate _variable = myTruck getVariable [\"myVariable\", 50]; // returns 50 if \"myVariable\" is not set\n```"
                },
                {
                    "text": "```sqf\n\nfor \"_i\" from 0 to 5 do\n{\n\t_car = missionNamespace getVariable (\"car\" + str _i);\n\t_car setDamage 0;\n}; // Set damage of car0..car5 to 0\n\n```"
                },
                {
                    "text": "```sqf\n\nmyMissionVar = 2015;\nmissionNamespace getVariable \"myMissionVar\"; // returns 2015\n\n```"
                },
                {
                    "text": "Get current value of a variable and if it is undefined, define it and get the defined value:\n\n```sqf\n\nprivate _var = missionNamespace getVariable \"varName\";\nif (isNil \"_var\") then\n{\n\tmissionNamespace setVariable [\"varName\", 123];\n\t_var = 123;\n};\n// _var here will contain current value of the variable varName\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "varspace",
                            "description": "`Namespace`, `Object`, `Display`, `Control`, `Group`, `Location`, `Task`, [Team Member](https://community.bistudio.com/wiki/Team%20Member), `Display`, `Control`"
                        },
                        {
                            "name": "name",
                            "description": "`String` - variable name in given namespace"
                        }
                    ],
                    "outline": "varspace `getVariable` name",
                    "returns": "`Anything` or `Nothing` if the variable doesn't exist"
                },
                {
                    "parameters": [
                        {
                            "name": "varspace",
                            "description": "`Namespace`, `Object`, `Display`, `Control`, `Group`, `Location`, `Task`, [Team Member](https://community.bistudio.com/wiki/Team%20Member), `Display`, `Control`"
                        },
                        {
                            "name": "name",
                            "description": "`String` - variable name in given namespace"
                        },
                        {
                            "name": "defaultValue",
                            "description": "`Anything` - value to return if variable doesn't exist **WARNING**: A dynamic _defaultValue_ e.g <sqf inline>random 500 will always be executed, even if the variable is defined."
                        }
                    ],
                    "outline": "varspace `getVariable` [name, defaultValue]",
                    "returns": "`Anything` - current value of the variable or _defaultValue_ if the variable doesn't exist."
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getVariable"
        },
        "configuration": {
            "label": "getVariable",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get a list of vehicles loaded as cargo inside this vehicle. The returned array is in the order the cargo vehicles were added to containing vehicle.",
            "examples": [
                {
                    "text": "```sqf\n_vehicleCargo = getVehicleCargo blackfish; // returns [] if empty\n```"
                },
                {
                    "text": "```sqf\n_vehicleCargo = getVehicleCargo blackfish; // returns [quad_3, quad_1, quad_2] as they were loaded in this order\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "storingVehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getVehicleCargo` storingVehicle",
                    "returns": "`Array` - vehicles loaded in storingVehicle, in order of their loading"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/getVehicleCargo"
        },
        "configuration": {
            "label": "getVehicleCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns TI parameters of a vehicle.",
            "examples": [
                {
                    "text": "```sqf\ngetVehicleTIPars _veh;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getVehicleTIPars` vehicle",
                    "returns": "`Array` in format [aliveFactor, movementFactor, metabolismFactor]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getVehicleTIPars"
        },
        "configuration": {
            "label": "getVehicleTIPars",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Obtain the current system's video settings.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _videoOptions = getVideoOptions;\n/*\n[\n\t[\"aspectRatioName\", \"Auto (Stretch)\"],\n\t[\"brightness\", 1.1],\n\t[\"cloudQualityName\", \"VeryHigh\"],\n\t[\"displayModeName\", \"FullScreenWindow\"],\n\t[\"dynLightsCount\", 32],\n\t[\"dynLightsQualityName\", \"VeryHigh\"],\n\t[\"gamma\", 1],\n\t[\"guiScale\", 0.7],\n\t[\"guiScaleName\", \"Normal\"],\n\t[\"hdrQuality\", 16],\n\t[\"hdrQualityName\", \"Normal\"],\n\t[\"monitorResolution\", [0, 0, 2304, 1440]],\t\t\t\t\t\t\t// presence not guaranteed\n\t[\"objectVisibility\", 6000],\n\t[\"objQualityName\", \"VeryHigh\"],\n\t[\"overallPresetName\", \"Custom\"],\n\t[\"overallVisibility\", 8000],\n\t[\"overrideHazeQuality\", -1],\n\t[\"particleQualityName\", \"High\"],\n\t[\"pipQuality\", 2048],\n\t[\"pipQualityName\", \"VeryHigh\"],\n\t[\"pipVisibility\", 3000],\n\t[\"ppBloom\", 1],\n\t[\"ppBrightness\", 1],\n\t[\"ppCausticsQualityName\", \"\"],\n\t[\"ppColorPresetName\", \"Custom\"],\n\t[\"ppContrast\", 1],\n\t[\"ppDOF\", 1],\n\t[\"ppFSAA\", 1],\n\t[\"ppHazeQualityName\", \"Standard\"],\n\t[\"ppPPAAQualityName\", \"CMAANormal\"],\n\t[\"ppRadialBlur\", 1],\n\t[\"ppRotationBlur\", 1],\n\t[\"ppSaturation\", 1.25],\n\t[\"ppSharpenFilter\", 0.75],\n\t[\"ppSSAOQualityName\", \"\"],\n\t[\"refreshRate\", 60],\n\t[\"samplingPercentage\", 100],\n\t[\"shadowQualityName\", \"VeryHigh\"],\n\t[\"shadowVisibility\", 200],\n\t[\"terrainQuality\", 3.125],\n\t[\"terrainQualityName\", \"VeryHigh\"],\n\t[\"texQualityName\", \"VeryHigh\"],\n\t[\"vramInfo\", [\"5.9 GiB\", \"16 GiB\", \"0 B\", \"978 MiB\", \"5.6 GiB\"]],\t// presence not guaranteed\n\t[\"vsync\", true],\n\t[\"waterReflectionQualityName\", \"High\"]\n]\n*/\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`getVideoOptions`",
                    "returns": "`HashMap` - all video settings, the key is always a `String`, the value can be a `String`, `Number`, `Boolean` or `Array` (see _Example 1_).\n**IMPORTANT**: `**vramInfo**` and `**monitorResolution**` keys presence is not guaranteed."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getVideoOptions"
        },
        "configuration": {
            "label": "getVideoOptions",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get an object's water filling.",
            "examples": [
                {
                    "text": "```sqf\n\nif (getWaterFillPercentage _myCar > 0) then\n{\n\thint \"My feet are wet.\";\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "obj",
                            "description": "`Object` - object to manipulate"
                        }
                    ],
                    "outline": "`getWaterFillPercentage` obj",
                    "returns": "`Number` - water level in range 0..1 (empty to full)"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getWaterFillPercentage"
        },
        "configuration": {
            "label": "getWaterFillPercentage",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get an object's water intake ratio when immersed.",
            "examples": [
                {
                    "text": "```sqf\n\nif (getWaterLeakiness _myCar > 0) then\n{\n\thint \"don't go in the water with it!\";\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "obj",
                            "description": "`Object` - object to check"
                        }
                    ],
                    "outline": "`getWaterLeakiness` obj",
                    "returns": "`Number` in range 0..1 where 0 is waterproof and 1 is full leak"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getWaterLeakiness"
        },
        "configuration": {
            "label": "getWaterLeakiness",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns all weapons types and count from the cargo space",
            "examples": [
                {
                    "text": "```sqf\n_content = getWeaponCargo carName;\n```"
                },
                {
                    "text": "```sqf\n_content = getWeaponCargo ammoBoxName;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - object to check"
                        }
                    ],
                    "outline": "`getWeaponCargo` object",
                    "returns": "`Array` - format [all_types_array, all_counts_array]. Eg: [[\"a\", \"b\"], [3, 2]]"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getWeaponCargo"
        },
        "configuration": {
            "label": "getWeaponCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns current size of weapon sway of a given unit, in [radians](https://community.bistudio.com/wiki/rad).",
            "examples": [
                {
                    "text": "```sqf\n_sway = getWeaponSway player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getWeaponSway` unit",
                    "returns": "`Number` - weapon sway"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getWeaponSway"
        },
        "configuration": {
            "label": "getWeaponSway",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns orientation of horizontal stabilizers.{{Feature|afm}}",
            "examples": [
                {
                    "text": "```sqf\n_orientation = getWingsOrientationRTD myHelicopter;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "RTD_helicopter",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getWingsOrientationRTD` RTD_helicopter",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getWingsOrientationRTD"
        },
        "configuration": {
            "label": "getWingsOrientationRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns position of stabilizers.{{Feature|afm}}",
            "examples": [
                {
                    "text": "```sqf\n_position = getWingsPositionRTD myHelicopter;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "RTD_helicopter",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`getWingsPositionRTD` RTD_helicopter",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/getWingsPositionRTD"
        },
        "configuration": {
            "label": "getWingsPositionRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the position of a selected waypoint of a given group. Waypoints include only those which were placed in the mission editor.",
            "examples": [
                {
                    "text": "```sqf\n\n[_group1, 1] setWPPos [200,600,0];\n_pos = getWPPos [_group1, 1]; // returns [200, 600, 0]\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "groupOrUnit",
                            "description": "`Group` or `Object` - the group (or unit) of which to select a waypoint"
                        },
                        {
                            "name": "index",
                            "description": "`Number` - 0 equals the starting position of the group.\n\nThe number used in this and other waypoint commands is _one more_ than the one displayed in the waypoint window in the editor. (i.e. if the editor labeled a WP `**\"0:MOVE\"**` the you would have to use `**getWPPos [grp,1]**` to access this particular WP)"
                        }
                    ],
                    "outline": "`getWPPos` [groupOrUnit, index]",
                    "returns": "`Array` format [Position3D](https://community.bistudio.com/wiki/Position%23Introduction) - the returned position equals [0,0,0] if the selected waypoint doesn't exist."
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/getWPPos"
        },
        "configuration": {
            "label": "getWPPos",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Control what the unit(s) is/are glancing at (target or `Position`). If target is used, it will get revealed fully.\n\nHow frequently the unit(s) is/are glancing there depends on behaviour.",
            "examples": [
                {
                    "text": "```sqf\n_someSoldier glanceAt _otherSoldier;\n```"
                },
                {
                    "text": "```sqf\n[_someSoldier, _otherSoldier] glanceAt markerPos \"markerOne\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit(s)",
                            "description": "`Object` or `Array`"
                        },
                        {
                            "name": "position",
                            "description": "`Object` or `Array`"
                        }
                    ],
                    "outline": "unit(s) `glanceAt` position",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/glanceAt"
        },
        "configuration": {
            "label": "glanceAt",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Types text to the global radio channel. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see `remoteExec`).",
            "examples": [
                {
                    "text": "```sqf\n_soldierOne globalChat \"Show this text\";\n```"
                },
                {
                    "text": "[[File:xChat.jpg|right]]\n\n```sqf\n\ndriver vehicle player sideChat \"sideChat\";\ndriver vehicle player globalChat \"globalChat\";\ndriver vehicle player groupChat \"groupChat\";\nvehicle player vehicleChat \"vehicleChat\";\ndriver vehicle player commandChat \"commandChat\";\ndriver vehicle player customChat [1, \"customChat\"];\nsystemChat \"systemChat\";\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit transmitting message"
                        },
                        {
                            "name": "chatText",
                            "description": "`String` - message to transmit"
                        }
                    ],
                    "outline": "unit `globalChat` chatText",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/globalChat"
        },
        "configuration": {
            "label": "globalChat",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sends the audio message to the global radio channel. The message is defined in CfgRadio in the [[Description.ext|description.ext]] file or config radio protocol. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see `remoteExec`).\n**NOTE**: When transmitting unit gets killed, transmission will be interrupted. However when receiving unit gets killed, the transmission continues to play.",
            "examples": [
                {
                    "text": "```sqf\n_soldierOne globalRadio \"messageOne\";\n```"
                },
                {
                    "text": "```sqf\nplayer globalRadio configName selectRandom (\"true\" configClasses (configFile >> \"CfgRadio\"));\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit to transmit"
                        },
                        {
                            "name": "radioName",
                            "description": "`String` - class name from CfgRadio"
                        }
                    ],
                    "outline": "unit `globalRadio` radioName",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/globalRadio"
        },
        "configuration": {
            "label": "globalRadio",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns name of currently used goggles (for NVGoggles use `hmd`).",
            "examples": [
                {
                    "text": "```sqf\n_goggles = goggles assaultDiver; //G_Diving\n```"
                },
                {
                    "text": "```sqf\n_goggles = goggles reconTeamLeader; //G_Shades_Black\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`goggles` unit",
                    "returns": "`String`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/goggles"
        },
        "configuration": {
            "label": "goggles",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Break script flow and go to given label (defined by **#** - **NOT** to be confused with [SQF](https://community.bistudio.com/wiki/SQF%20Syntax)'s [hash sign](https://community.bistudio.com/wiki/a_hash_b)!)\n{{Feature|warning|This command only works in [SQS Syntax](https://community.bistudio.com/wiki/SQS%20Syntax).}}\n**NOTE**: Note that labels are not case sensitive and are searched for from the top of the script, so multiple occurrences of a label will only result in the topmost one ever being found.",
            "examples": [
                {
                    "text": "<sqs>\ngoto \"myLabel\"\nplayer setDamage 1\n\n#myLabel\nhint \"you successfully avoided death!\"\n</sqs>"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "label",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`goto` label",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/goto"
        },
        "configuration": {
            "label": "goto",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "Returns the group a unit is assigned to.",
            "examples": [
                {
                    "text": "```sqf\n_playerGrp = group player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`group` object",
                    "returns": "`Group` - for dead units, the returned group equals `grpNull`."
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/group"
        },
        "configuration": {
            "label": "group",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Types text to the group radio channel. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see `remoteExec`).\n\n**IMPORTANT**: The unit must have an [assigned](https://community.bistudio.com/wiki/assignItem) radio item (such as **\"ItemRadio\"**) to see or transmit the messages. A radio item must have the property <syntaxhighlight lang=\"cpp\" inline>simulation = \"ItemRadio\";</syntaxhighlight> in its [[CfgWeapons_Config_Reference#simulation.3D.22Weapon.22|CfgWeapons config]].",
            "examples": [
                {
                    "text": "```sqf\n_soldierOne groupChat \"Show this text\";\n```"
                },
                {
                    "text": "[[File:xChat.jpg|right]]\n\n```sqf\n\ndriver vehicle player sideChat \"sideChat\";\ndriver vehicle player globalChat \"globalChat\";\ndriver vehicle player groupChat \"groupChat\";\nvehicle player vehicleChat \"vehicleChat\";\ndriver vehicle player commandChat \"commandChat\";\ndriver vehicle player customChat [1, \"customChat\"];\nsystemChat \"systemChat\";\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit transmitting message"
                        },
                        {
                            "name": "chatText",
                            "description": "`String` - message to transmit"
                        }
                    ],
                    "outline": "unit `groupChat` chatText",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/groupChat"
        },
        "configuration": {
            "label": "groupChat",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get group with given unique ID. For objects use `objectFromNetId`. As this command is MP only, you can use `BIS_fnc_groupFromNetId`, which extends the use to SP as well.",
            "examples": [
                {
                    "text": "```sqf\n_group = groupFromNetId \"4:45\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "id",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`groupFromNetId` id",
                    "returns": "`Group`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/groupFromNetId"
        },
        "configuration": {
            "label": "groupFromNetId",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns whether or not group icons raise `onGroupIconClick`, `onGroupIconOverEnter` and `onGroupIconOverLeave` events.",
            "examples": [
                {
                    "text": "```sqf\nhint str groupIconSelectable;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**groupIconSelectable**",
                    "returns": "`Boolean` - `true` is selectable"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/groupIconSelectable"
        },
        "configuration": {
            "label": "groupIconSelectable",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array with group icons visibility. A getter for `setGroupIconsVisible`",
            "examples": [
                {
                    "text": "```sqf\nhint str groupIconsVisible;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**groupIconsVisible**",
                    "returns": "`Array` - [visibleOnMap, visibleOnHUD]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/groupIconsVisible"
        },
        "configuration": {
            "label": "groupIconsVisible",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a group's name or a unit's group ID number.",
            "examples": [
                {
                    "text": "```sqf\n_name = groupId group player;\t\t\t// e.g \"B Alpha 1-1\"\n```"
                },
                {
                    "text": "```sqf\nprivate _unitGroupId = groupId player;\t// e.g 3 (number, not a string)\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group`"
                        }
                    ],
                    "outline": "`groupId` group",
                    "returns": "`String` - the group's name (e.g \"Alpha Red\")"
                },
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - a group's unit"
                        }
                    ],
                    "outline": "`groupId` unit",
                    "returns": "`Number` - the unit's group ID (e.g \"**2**, taking command\")"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/groupId"
        },
        "configuration": {
            "label": "groupId",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the [ machine network ID](https://community.bistudio.com/wiki/Multiplayer_Scripting%23Machine_network_ID%20) of the client to which the group is local. This command only works when called from the server. When called from a client, it always returns 0.",
            "examples": [
                {
                    "text": "```sqf\n_clientID = groupOwner _someGroup;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group`"
                        }
                    ],
                    "outline": "`groupOwner` group",
                    "returns": "`Number`"
                }
            ],
            "argumentLocality": "Global Argument",
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/groupOwner"
        },
        "configuration": {
            "label": "groupOwner",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sends the audio message to the group radio channel. The message is defined in CfgRadio in the [[Description.ext|description.ext]] file or config radio protocol. \n**IMPORTANT**: \nThe unit must have an [assigned](https://community.bistudio.com/wiki/assignItem) radio item (such as **\"ItemRadio\"**) to see or transmit the messages.\nA radio item must have the property <syntaxhighlight lang=\"cpp\" inline>simulation = \"ItemRadio\";</syntaxhighlight> in its [[CfgWeapons_Config_Reference#simulation.3D.22Weapon.22|CfgWeapons config]].\n\n**NOTE**: When the transmitting unit gets killed, the transmission is interrupted. However when the receiving unit gets killed, the transmission continues to play.",
            "examples": [
                {
                    "text": "```sqf\n_soldierOne groupRadio \"messageOne\";\n```"
                },
                {
                    "text": "```sqf\nplayer groupRadio (configName selectRandom (\"true\" configClasses (configFile >> \"CfgRadio\")));\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit to transmit"
                        },
                        {
                            "name": "radioName",
                            "description": "`String` - class name from `**CfgRadio**`"
                        }
                    ],
                    "outline": "unit `groupRadio`  radioName",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/groupRadio"
        },
        "configuration": {
            "label": "groupRadio",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array with all groups of given side.",
            "examples": [
                {
                    "text": "```sqf\nprivate _allBluforGroups = groups blufor; // equivalent of allGroups select { side _x == blufor };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "side",
                            "description": "`Side`"
                        }
                    ],
                    "outline": "`groups` side",
                    "returns": "`Array` of `Group`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/groups"
        },
        "configuration": {
            "label": "groups",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns selected units in source group for normal commanding mode (individual units). For the High Command equivalent, see `hcSelected`.",
            "examples": [
                {
                    "text": "```sqf\n_selectedUnits = groupSelectedUnits player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`groupSelectedUnits` unit",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/groupSelectedUnits"
        },
        "configuration": {
            "label": "groupSelectedUnits",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Selects a unit from player's group. If player is the leader, the effect of this command is similar to player pressing {{Controls|F1}}, {{Controls|F2}}, {{Controls|F3}} etc to highlight units in his squad, after which the unit command menu is shown.\nIf leader is AI, player will get usual communication menu to interact with the leader.",
            "examples": [
                {
                    "text": "After leaving menu, deselect all units (command menu is not opened → no selection)\n\n```sqf\n\n{\n\tplayer groupSelectUnit [_x, false];\n} forEach (groupSelectedUnits player);\n\n```"
                },
                {
                    "text": "Select all units when player is the leader:\n\n```sqf\n\n{\n\tplayer groupSelectUnit [_x, true];\n} forEach units player;\n\n```"
                },
                {
                    "text": "Open communication with group leader:\n\n```sqf\nplayer groupSelectUnit [leader player, true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "player",
                            "description": "`Object`"
                        },
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "select",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "player `groupSelectUnit` [unit, select]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/groupSelectUnit"
        },
        "configuration": {
            "label": "groupSelectUnit",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "A non-existing `Group`. To compare non-existent groups use `isNull` or `isEqualTo`:\n\n```sqf\n\ngrpNull == grpNull;\t\t\t// false\nisNull grpNull;\t\t\t\t// true\ngrpNull isEqualTo grpNull;\t// true\n\n```",
            "examples": [
                {
                    "text": "```sqf\n!isNull grpNull; // false\n```"
                },
                {
                    "text": "```sqf\nstr grpNull; // <NULL-group>\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`grpNull`",
                    "returns": "`Group`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/grpNull"
        },
        "configuration": {
            "label": "grpNull",
            "grammarType": "null-literal"
        }
    },
    {
        "documentation": {
            "description": "Returns the gunner of a vehicle.",
            "examples": [
                {
                    "text": "```sqf\ngunner _tank action [\"getout\", _tank];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`gunner`  vehicle",
                    "returns": "`Object` - the person sitting in the gunner place is returned. If vehicle is not a vehicle but a person, the person is returned."
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/gunner"
        },
        "configuration": {
            "label": "gunner",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return the current gusts value. Scale is 0 to 1.",
            "examples": [
                {
                    "text": "```sqf\n_gustsValue = gusts;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**gusts**",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/gusts"
        },
        "configuration": {
            "label": "gusts",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "This command was meant to break the script into debugger, however currently **it does not do anything** except displaying and logging the following error: `**Error Debugger breakpoint hit**`.",
            "examples": [
                {
                    "text": "```sqf\nif (_displayAnError) then {halt};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`halt`",
                    "returns": "`Boolean` - always returns `false`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/halt"
        },
        "configuration": {
            "label": "halt",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "Returns array with all items assigned to the `handgunWeapon` except magazines. Use `handgunMagazine` command for the latter. This command is used for infantry weapons only.",
            "examples": [
                {
                    "text": "```sqf\n\nhandgunItems player;\n/*\n[\n\t\"muzzle_snds_L\",\t// silencer\n\t\"\",\t\t\t\t\t// laser\n\t\"\",\t\t\t\t\t// optics\n\t\"\"\t\t\t\t\t// bipod\n]\n*/\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`handgunItems` unit",
                    "returns": "`Array` - [silencer, laserpointer/flashlight, optics, bipod]"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/handgunItems"
        },
        "configuration": {
            "label": "handgunItems",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Collects all loaded `magazines` from all `handgunWeapon` muzzles and returns them in `Array`, otherwise it returns []. This command is used for infantry weapons only.",
            "examples": [
                {
                    "text": "```sqf\nhint str handgunMagazine player; // [\"16Rnd_9x21_Mag\"]\n```"
                },
                {
                    "text": "```sqf\n\n_array = handgunMagazine player;\nif (count _array > 0) then {\n\thint (\"Handgun is loaded with \" + (_array select 0) + \"!\");\n} else {\n\tif (handgunWeapon player != \"\") then {\n\t\thint \"Handgun is not loaded!\";\n\t} else {\n\t\thint \"Player doesn't have a handgun!\";\n\t};\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`handgunMagazine` unit",
                    "returns": "`Array`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/handgunMagazine"
        },
        "configuration": {
            "label": "handgunMagazine",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the name of a unit's handgun (an empty string if there is none).",
            "examples": [
                {
                    "text": "```sqf\nhint handgunWeapon player; //\"hgun_P07_F\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`handgunWeapon` unit",
                    "returns": "`String`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/handgunWeapon"
        },
        "configuration": {
            "label": "handgunWeapon",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks if a soldier's hands are hit, which results in inaccurate aiming.",
            "examples": [
                {
                    "text": "<sqs>? (handsHit player == 1) : player globalChat \"Ouch! Don't shoot at my hands dammit!\"</sqs>"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`handsHit` unitName",
                    "returns": "`Number` - if the hands are not damaged, the returned value is 0. If the hands are hit or the unit is dead, the returned value is 1."
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/handsHit"
        },
        "configuration": {
            "label": "handsHit",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Processes provided _value_<nowiki/>'s hash, and encodes it using {{Link|https://en.wikipedia.org/wiki/Base64|Base64}}. The hash algorithm is {{Link|https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function|FNV-1A 64bit}}.\n**NOTE**: A hash value remains the same between game restarts but for `Object` and `Group` type, their hash being based on their `netId`.",
            "examples": [
                {
                    "text": "```sqf\nprivate _valueHash = hashValue \"Hello There\";\n```"
                },
                {
                    "text": "```sqf\nprivate _isCorrectPW = hashValue _enteredPassword == \"eWkXUUqiinE\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "value",
                            "description": "`Array`, `Boolean`, `Code`, `Config`, `Group`, `Namespace`, `NaN`, `Number`, `Object`, `Side` or `String`"
                        }
                    ],
                    "outline": "`hashValue` value",
                    "returns": "`String` - base64-encoded 64 bits hash"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/hashValue"
        },
        "configuration": {
            "label": "hashValue",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns true if the computer has an interface (a real player). False for a dedicated server or for a headless client.",
            "examples": [
                {
                    "text": "```sqf\n_isHC = !(hasInterface || isDedicated);\n```"
                },
                {
                    "text": "```sqf\n_isHC = !hasInterface && !isDedicated;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`hasInterface`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/hasInterface"
        },
        "configuration": {
            "label": "hasInterface",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns true if the object airplane or helicopter has a [pilotCamera](https://community.bistudio.com/wiki/A3_Targeting_config_reference%23class_pilotCamera).",
            "examples": [
                {
                    "text": "```sqf\nhasPilotCamera vehicle player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`hasPilotCamera` object",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/hasPilotCamera"
        },
        "configuration": {
            "label": "hasPilotCamera",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks if a unit has the given weapon in hands or on back/in holster. Weapons inside unit containers such as vest and backpack are not counted.",
            "examples": [
                {
                    "text": "```sqf\nif !(player hasWeapon \"arifle_MX_ACO_pointer_F\") then { player addWeapon \"arifle_MX_ACO_pointer_F\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        },
                        {
                            "name": "weaponName",
                            "description": "`String` - the name of the weapon to check for."
                        }
                    ],
                    "outline": "unitName `hasWeapon` weaponName",
                    "returns": "`Boolean` - returns true if the unit has the weapon, false if not."
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/hasWeapon"
        },
        "configuration": {
            "label": "hasWeapon",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns selected groups in [high command](https://community.bistudio.com/wiki/High%20Command).",
            "examples": [
                {
                    "text": "```sqf\nhcAllGroups player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - commander"
                        }
                    ],
                    "outline": "`hcAllGroups` unit",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/hcAllGroups"
        },
        "configuration": {
            "label": "hcAllGroups",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns parameters describing group in [high command](https://community.bistudio.com/wiki/High%20Command) bar. Return value is array in format [groupName, teamName] or [] if error. Possible values for team name:\n* `**\"teammain\"**` (default)\n* `**\"teamred\"**`\n* `**\"teamgreen\"**`\n* `**\"teamblue\"**`\n* `**\"teamyellow\"**`",
            "examples": [
                {
                    "text": "```sqf\nplayer hcGroupParams someGroup;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - commander"
                        },
                        {
                            "name": "group",
                            "description": "`Group`"
                        }
                    ],
                    "outline": "unit `hcGroupParams` group",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/hcGroupParams"
        },
        "configuration": {
            "label": "hcGroupParams",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns group's [high command](https://community.bistudio.com/wiki/High%20Command) commander.",
            "examples": [
                {
                    "text": "```sqf\n_leader = hcLeader groupName;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group`"
                        }
                    ],
                    "outline": "`hcLeader` group",
                    "returns": "`Object`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/hcLeader"
        },
        "configuration": {
            "label": "hcLeader",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Remove all groups from unit's [high command](https://community.bistudio.com/wiki/High%20Command) bar.",
            "examples": [
                {
                    "text": "```sqf\nhcRemoveAllGroups player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`hcRemoveAllGroups` unit",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/hcRemoveAllGroups"
        },
        "configuration": {
            "label": "hcRemoveAllGroups",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes group from unit's [high command](https://community.bistudio.com/wiki/High%20Command) bar.",
            "examples": [
                {
                    "text": "```sqf\nplayer hcRemoveGroup BIS_group;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "group",
                            "description": "`Group`"
                        }
                    ],
                    "outline": "unit `hcRemoveGroup` group",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/hcRemoveGroup"
        },
        "configuration": {
            "label": "hcRemoveGroup",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns selected groups in [high command](https://community.bistudio.com/wiki/High%20Command).",
            "examples": [
                {
                    "text": "```sqf\narray = hcSelected unit;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - commander"
                        }
                    ],
                    "outline": "`hcSelected` unit",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/hcSelected"
        },
        "configuration": {
            "label": "hcSelected",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Select given group in [high command](https://community.bistudio.com/wiki/High%20Command) bar.",
            "examples": [
                {
                    "text": "```sqf\nplayer hcSelectGroup [group_1,group_2];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - HC Owner"
                        },
                        {
                            "name": "array",
                            "description": "`Array` of `Group`s"
                        }
                    ],
                    "outline": "unit `hcSelectGroup` array",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/hcSelectGroup"
        },
        "configuration": {
            "label": "hcSelectGroup",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Add group to unit's [high command](https://community.bistudio.com/wiki/High%20Command) bar.\n\n**NOTE**: The previous HC leader should be [removed](https://community.bistudio.com/wiki/hcRemoveGroup) before adding the new one (see **_Example 3_**).",
            "examples": [
                {
                    "text": "```sqf\nunit hcSetGroup [group, \"HQ\", \"teamred\"];\n```"
                },
                {
                    "text": "```sqf\nplayer hcSetGroup [group];\n```"
                },
                {
                    "text": "```sqf\nif (player != hcLeader _group) then\n{\n\thcLeader _group hcRemoveGroup _group;\n\tplayer hcSetGroup [_group];\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - the leader"
                        },
                        {
                            "name": "group",
                            "description": "`Group`"
                        },
                        {
                            "name": "groupName",
                            "description": "`String` - (Optional)"
                        },
                        {
                            "name": "team",
                            "description": "`String` - (Optional, default \"teamMain\") can be one of:\n* \"teamMain\"\n* \"teamRed\"\n* \"teamGreen\"\n* \"teamBlue\"\n* \"teamYellow\""
                        }
                    ],
                    "outline": "unit `hcSetGroup` [group, groupName, team]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/hcSetGroup"
        },
        "configuration": {
            "label": "hcSetGroup",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Shows or hides [high command](https://community.bistudio.com/wiki/High%20Command) bar. There must be some groups under HC command to show HC bar.**Arma 3**:  Since Arma 3 v1.94 this command returns `Nothing` as it should",
            "examples": [
                {
                    "text": "```sqf\nhcShowBar true;\n```"
                },
                {
                    "text": "```sqf\nhcShowBar false;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "bool",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "`hcShowBar` bool",
                    "returns": "`Nothing` - (before {{GVI|arma3|1.94"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/hcShowBar"
        },
        "configuration": {
            "label": "hcShowBar",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return whether the [High Command](https://community.bistudio.com/wiki/High%20Command) bar is shown/active.",
            "examples": [
                {
                    "text": "```sqf\nif (hcShownBar) then { hint \"HC bar is active\"; };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`hcShownBar`",
                    "returns": "`Boolean` - `true` if HC bar is shown, otherwise `false`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/hcShownBar"
        },
        "configuration": {
            "label": "hcShownBar",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns headgear of unit.",
            "examples": [
                {
                    "text": "```sqf\nhint headgear player; //H_HelmetB\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`headgear` unit",
                    "returns": "`String`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/headgear"
        },
        "configuration": {
            "label": "headgear",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Hides dead body of the given unit. After a short delay, the body slowly sinks into the ground. After awhile, when group of the unit becomes `grpNull`, the body gets deleted and becomes `objNull`. If applied to alive unit, nothing happens until unit dies, then the unit's body gets hidden. If a dead unit is human player, the body is hidden but not deleted until player respawns.",
            "examples": [
                {
                    "text": "```sqf\nhideBody player1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - person"
                        }
                    ],
                    "outline": "`hideBody` unit",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/hideBody"
        },
        "configuration": {
            "label": "hideBody",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Hide entity. Can be used on soldiers and vehicles, also on static objects.",
            "examples": [
                {
                    "text": "```sqf\nhideObject unitName;\n```"
                },
                {
                    "text": "```sqf\nobjectName hideObject true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`hideObject` object",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "hidden",
                            "description": "`Boolean` - `true`->hidden; `false`->visible"
                        }
                    ],
                    "outline": "object `hideObject` hidden",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/hideObject"
        },
        "configuration": {
            "label": "hideObject",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "This command is designed for MP. Hides object on all connected clients as well as JIP. Can be used on static objects. In singleplayer this command behaves just like `hideObject`.",
            "examples": [
                {
                    "text": "```sqf\nhideObjectGlobal myObject; // hides myObject\nhideObjectGlobal nearestBuilding [2500, 2500, 0];\n```"
                },
                {
                    "text": "```sqf\nmyObject hideObjectGlobal true;\t// hides myObject\nmyObject hideObjectGlobal false;\t// shows myObject\n```"
                },
                {
                    "text": "```sqf\n[myObject, true] remoteExec [\"hideObjectGlobal\", 2]; // remote-executes hideObjectGlobal from a client to the server\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - object to hide"
                        }
                    ],
                    "outline": "`hideObjectGlobal` object",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "hidden",
                            "description": "`Boolean` - `true` &rarr; hidden; `false` &rarr; visible"
                        }
                    ],
                    "outline": "object `hideObjectGlobal`  hidden",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/hideObjectGlobal"
        },
        "configuration": {
            "label": "hideObjectGlobal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Hides or shows the [ simple object](https://community.bistudio.com/wiki/createSimpleObject%20)'s provided selection.",
            "examples": [
                {
                    "text": "```sqf\n_simpleObject hideSelection [\"some_selection\", true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - simple object"
                        },
                        {
                            "name": "selection",
                            "description": "`String` - selection name"
                        },
                        {
                            "name": "hidden",
                            "description": "`Boolean` - `true` to hide, `false` to show"
                        }
                    ],
                    "outline": "object `hideSelection` [selection, hidden]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/hideSelection"
        },
        "configuration": {
            "label": "hideSelection",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "The number of objects in hierarchy. **Arma 3**: This command is not present in Arma 3",
            "examples": [
                {
                    "text": "```sqf\n_number = hierarchyObjectsCount;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**hierarchyObjectsCount**",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/hierarchyObjectsCount"
        },
        "configuration": {
            "label": "hierarchyObjectsCount",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Outputs a hint message to the right of the screen (left of the screen in Operation Flashpoint) with a sound (except in Armed Assault).\nTo split message in multiple lines either use [Structured Text](https://community.bistudio.com/wiki/Structured%20Text) or `**\\n**` (in lower case).\n\n**Armed Assault**: Armed Assault hints are silent. For later titles, see `hintSilent`.",
            "examples": [
                {
                    "text": "```sqf\n\n// outputs the following:\n// Press W to move forward.\n// Press S to move backwards.\nhint \"Press W to move forward.\\nPress S to move backwards.\"\n\n```"
                },
                {
                    "text": "```sqf\nhint format [\"Hello, %1!\", name player];\n```"
                },
                {
                    "text": "```sqf\n\nhint str count allPlayers;\nsleep 10;\nhintSilent \"\"; // hides the previous hint display\n\n```"
                },
                {
                    "text": "```sqf\nhint parseText \"<t size='2.0'>Large text</t>\"; // displays text twice as large as the default one\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "message",
                            "description": "`String` or [Structured Text](https://community.bistudio.com/wiki/Structured%20Text) - the message to display."
                        }
                    ],
                    "outline": "`hint` message",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/hint"
        },
        "configuration": {
            "label": "hint",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Displays a very basic message dialog in the center of the screen. Player control is taken away until \"Continue\" is pressed. The message dialog can be dragged around on the screen. After \"Continue\" has been pressed, the content of the `hintC` is repeated in a normal `hint`.\n**NOTE**: In Singleplayer, the game is paused while the message dialog is visible.",
            "examples": [
                {
                    "text": "```sqf\nhintC \"Press W to move forward\";\n```"
                },
                {
                    "text": "Same as the above in Arma 3 but without second `hint` displayed:\n[[File:HintC.jpg|400px|right]]\n\n```sqf\n\nhintC \"Press W to move forward\";\nhintC_EH = findDisplay 57 displayAddEventHandler [\"Unload\", {\n\t_this spawn {\n\t\t_this select 0 displayRemoveEventHandler [\"Unload\", hintC_EH];\n\t\thintSilent \"\";\n\t};\n}];\n\n```"
                },
                {
                    "text": "```sqf\n\n\"Instructions\" hintC [\n\t\"Press W to move forward.\",\n\t\"Press S to move backwards.\",\n\t\"Use the mouse to turn right or left.\",\n\t\"Press V for weapon sights.\"\n];\n\n```"
                },
                {
                    "text": "Same as the above in Arma 3 but without second `hint` displayed:\n[[File:HintC_array.jpg|400px|right]]\n\n```sqf\n\n\"Instructions\" hintC [\n\t\"Press W to move forward.\",\n\t\"Press S to move backwards.\",\n\t\"Use the mouse to turn right or left.\",\n\t\"Press V for weapon sights.\"\n];\nhintC_EH = findDisplay 72 displayAddEventHandler [\"Unload\", {\n\t_this spawn {\n\t\t_this select 0 displayRemoveEventHandler [\"Unload\", hintC_EH];\n\t\thintSilent \"\";\n\t};\n}];\n\n```"
                },
                {
                    "text": "```sqf\n\nprivate _separator = parseText \"<br/>------------------------<br/>\";\nprivate _image = \"\\ca\\ui\\textures\\aus_flag.paa\";\nprivate _message = composeText [image _image, \"Heading Text\", _separator, \"Content\"];\n\"\" hintC _message;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "message",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`hintC` message",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "title",
                            "description": "`String` - message title"
                        },
                        {
                            "name": "message",
                            "description": "`String`, [Structured Text](https://community.bistudio.com/wiki/Structured%20Text), `Array` of `String`s or `Array` of [Structured Text](https://community.bistudio.com/wiki/Structured%20Text)"
                        }
                    ],
                    "outline": "title `hintC` message",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/hintC"
        },
        "configuration": {
            "label": "hintC",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Shows a text hint only when in `cadetMode`.\n\nThe text can contain several lines. \\n is used to indicate the end of a line.",
            "examples": [
                {
                    "text": "```sqf\nhintCadet \"Press W to move forward\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "text",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`hintCadet` text",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/hintCadet"
        },
        "configuration": {
            "label": "hintCadet",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Same as `hint`, but without a sound.",
            "examples": [
                {
                    "text": "```sqf\nhintSilent format [\"Hello, %1!\", name player];\n```"
                },
                {
                    "text": "```sqf\n\nhint \"Hello there!\";\nsleep 5;\nhintSilent \"\"; // removes message\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "text",
                            "description": "`String` or [Structured Text](https://community.bistudio.com/wiki/Structured%20Text)"
                        }
                    ],
                    "outline": "`hintSilent` text",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/hintSilent"
        },
        "configuration": {
            "label": "hintSilent",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns class name of currently used Head Mounted Display. Returns an empty string if the slot is empty.\n\n**NOTE**: If `hmd` returns \"\" this doesn't immediately mean unit has no `hmd`, some items like Special Helmet (\"H_HelmetO_ViperSP_ghex_F\") can have built-in `hmd` so you might want to check the type of `headgear` as well",
            "examples": [
                {
                    "text": "```sqf\n_nvgs = hmd player; //NVGoggles\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`hmd` unit",
                    "returns": "`String`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/hmd"
        },
        "configuration": {
            "label": "hmd",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Host the multiplayer mission defined in the config class and opens the lobby with the scenario loaded. Must be called in UI action from a dialog.",
            "examples": [
                {
                    "text": "```sqf\nhostMission [configFile >> \"CfgMissions\" >> \"MPMissions\" >> _scenarioClassName, _currentlyActiveDisplay];\n```"
                },
                {
                    "text": "Launch host mission dialog from a client on dedicated server in Arma 3:\n\n```sqf\nhostMission [\n\tconfigFile >> \"CfgMissions\" >> \"MPmissions\" >> \"MP_COOP_m01\",\n\tfindDisplay 46\n];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "configEntry",
                            "description": "`Config`"
                        },
                        {
                            "name": "activeDisplay",
                            "description": "`Display`"
                        }
                    ],
                    "outline": "`hostMission` [configEntry, activeDisplay]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/hostMission"
        },
        "configuration": {
            "label": "hostMission",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Load [HTML](https://community.bistudio.com/wiki/HTML%20File%20Format) from file or URI using given control. File path is relative to current mission dir or an absolute path (with drive letter etc.).\nThe command is subject to restrictions, imposed by `CfgCommands` class.\n{{Feature|arma3|Since {{GVI|arma3|2.10",
            "examples": [
                {
                    "text": "```sqf\n_control htmlLoad \"briefing.html\";\n```"
                },
                {
                    "text": "```sqf\n_control htmlLoad \"http://www.bistudio.com/newsfeed/arma3_news.php?build=main&language=English\";\n```"
                },
                {
                    "text": "Display news item:\n\n```sqf\n\n[] spawn {\n\tdisableSerialization;\n\tprivate _html = findDisplay 46 createDisplay \"RscCredits\" ctrlCreate [\"RscHTML\", -1];\n\t_html ctrlSetBackgroundColor [0,0,0,0.8];\n\t_html ctrlSetPosition [safeZoneX, safeZoneY, safeZoneW, safeZoneH];\n\t_html ctrlCommit 0;\n\t_html htmlLoad \"http://www.bistudio.com/newsfeed/arma3_news.php?build=main&language=English\";\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "filename",
                            "description": "`String` - local file name or remote file URL"
                        }
                    ],
                    "outline": "control `htmlLoad` filename",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/htmlLoad"
        },
        "configuration": {
            "label": "htmlLoad",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns movement borders for HUD [min speed, max speed, min alt, max alt, min dir, max dir, position[x,y,z] or target]",
            "examples": [
                {
                    "text": "```sqf\nHUDMovementLevels; // returns e.g [0,0,0,0,0,0,[0,0,0]]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`HUDMovementLevels`",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/HUDMovementLevels"
        },
        "configuration": {
            "label": "HUDMovementLevels",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the current humidity value. 0 is no humidity and 1 is 100% humidity. Humidity value quickly changes from 0 to 1 when rain starts, then slowly changes from 1 to 0 when rain stops.",
            "examples": [
                {
                    "text": "```sqf\ncurrentHumidity = humidity;\n```"
                },
                {
                    "text": "```sqf\nskipTime -24;\n86400 setOvercast 1;\nskipTime 24;\n[] spawn {\n\t10 setRain 1;\n\tsleep 10;\n\t10 setRain 0;\n};\nonEachFrame {\n\thintSilent str [round (rain * 10) / 10, round (humidity * 10) / 10];\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**humidity**",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/humidity"
        },
        "configuration": {
            "label": "humidity",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "This operator creates a [If Type](https://community.bistudio.com/wiki/If%20Type) which is used in the if-construct as described [[Control_Structures#if-Statement|here]].",
            "examples": [
                {
                    "text": "```sqf\n\n_retVal = if (1 > 0) then { \"It's true\" } else { \"It's false\" };\nhint str _retVal;\n\n```"
                },
                {
                    "text": "```sqf\n\n_val = if (true) then [{ \"true\" }, { \"false\" }];\nhint _val;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "condition",
                            "description": "`Boolean` - if it evaluates as `true`, the `then` clause is executed.  Otherwise, the `else` clause (if present) is executed"
                        }
                    ],
                    "outline": "`if`  condition",
                    "returns": "[If Type](https://community.bistudio.com/wiki/If%20Type) - predicate which will execute 1st or 2nd option when used. This predicate is used in `then` or `exitWith` commands"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/if"
        },
        "configuration": {
            "label": "if",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "Ignores all history steps created by executing the given code.",
            "examples": [
                {
                    "text": "```sqf\nignore3DENHistory {\n\tcreate3DENEntity [\"Object\", \"B_Soldier_F\", screenToWorld [0.5, 0.5]]; // no Ctrl+Z available for this operation\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "code",
                            "description": "`Code`"
                        }
                    ],
                    "outline": "`ignore3DENHistory` code",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ignore3DENHistory"
        },
        "configuration": {
            "label": "ignore3DENHistory",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets a target to be ignored by this Group. It will not appear in `nearTargets` and the group will not notice its presence. `targetKnowledge` can be used to check if a target is currently ignored. While a unit is ignored, `reveal` has no effect.",
            "examples": [
                {
                    "text": "```sqf\naiGroup ignoreTarget player\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group ",
                            "description": "`Object` or `Group` - which receives revealing information"
                        },
                        {
                            "name": "target",
                            "description": "`Object` - which would be ignored"
                        }
                    ],
                    "outline": "group `ignoreTarget` target",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "group ",
                            "description": "`Object` or `Group` - which receives revealing information"
                        },
                        {
                            "name": "target",
                            "description": "`Object` - which would be ignored"
                        },
                        {
                            "name": "isIgnored",
                            "description": "`Boolean` - whether the target should be ignored"
                        }
                    ],
                    "outline": "group `ignoreTarget` [target, isIgnored]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/ignoreTarget"
        },
        "configuration": {
            "label": "ignoreTarget",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates a structured text containing the given image. Use `setAttributes` to set additional [ attributes](https://community.bistudio.com/wiki/Structured_Text%23Attributes%20) on the image.",
            "examples": [
                {
                    "text": "```sqf\nhint composeText [\"Image: \", image \"\\a3\\Data_f\\Flags\\flag_Altis_co.paa\"];\n```"
                },
                {
                    "text": "```sqf\nhint str (composeText [\"Image: \", image \"\\a3\\Data_f\\Flags\\flag_Altis_co.paa\"] == parseText \"Image: <img image='\\a3\\Data_f\\Flags\\flag_Altis_co.paa'/>\"); // true\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "filename",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`image` filename",
                    "returns": "[Structured Text](https://community.bistudio.com/wiki/Structured%20Text)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/image"
        },
        "configuration": {
            "label": "image",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Imports one or multiple local variables from the parent scope, and defines them as `private` variables in the current scope. It can bypass `privateAll`.\n\n**NOTE**: For the config keyword, see [[import (Config)]].",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _myVar = 1;\ncall\n{\n\timport \"_myVar\"; // similar to: private _myVar = _myVar;\n};\n\n```"
                },
                {
                    "text": "```sqf\n\nprivate _a = 1;\nprivate _b = 2;\ncall\n{\n\timport [\"_a\", \"_b\"]; // similar to: [_a, _b] params [\"_a\", \"_b\"];\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "variableName",
                            "description": "`String` or `Array` of `String`s - variable(s) to import"
                        }
                    ],
                    "outline": "`import` variableName",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/import"
        },
        "configuration": {
            "label": "import",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Imports all groups into the RTE. \n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`importAllGroups` map",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/importAllGroups"
        },
        "configuration": {
            "label": "importAllGroups",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a location's importance value.",
            "examples": [
                {
                    "text": "```sqf\n_locationImportance = importance myLocation;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "location",
                            "description": "`Location`"
                        }
                    ],
                    "outline": "`importance` location",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/importance"
        },
        "configuration": {
            "label": "importance",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks whether value is in array, unit is in vehicle, position is inside location or ANSI string is part of other ANSI string. If Unicode support is desired, see `forceUnicode`.\n**NOTE**: `String` comparison is case-sensitive (see Examples **2** and **6**).",
            "examples": [
                {
                    "text": "```sqf\n1 in [0, 1, 2]; // true\n```"
                },
                {
                    "text": "```sqf\nprivate _myArray = [\"Aaa\", \"AAa\", \"AAA\"];\n\n\"aaa\" in _myArray; // false\n\"AAa\" in _myArray; // true\n\n// Case-insensitive alternatives:\n_myArray findIf { _x == \"aaa\"; } != -1; // true\n\n({\n\tif (_x == \"aaa\") exitWith { _forEachIndex };\n\t-1\n} forEach _myArray) != -1; // true, less performant but valid before the introduction of the findIf command\n\n{ if (_x == \"aaa\") exitWith { 1 } } count _myArray > 0; // true\n\n{ _x == \"aaa\"; } count _myArray > 0; // true, worst performance, only option available in OFP\n```"
                },
                {
                    "text": "```sqf\n[1,2,3] in [[1,2,3], [4,5,6]]; // true - Arma 3 only\n```"
                },
                {
                    "text": "```sqf\nprivate _isInCar = player in Car;\n```"
                },
                {
                    "text": "```sqf\nprivate _isInside = [1000,2000,0] in MyLocation;\n```"
                },
                {
                    "text": "```sqf\nprivate _isInString = \"foo\" in \"foobar\"; // true\n_isInString = \"Foo\" in \"foobar\"; // false\n```"
                },
                {
                    "text": "```sqf\nprivate _onFoot = _unit in _unit;\n```\n\nOther options:\n\n```sqf\nprivate _onFoot = vehicle _unit == _unit;\n```\n\n\n```sqf\nprivate _onFoot = isNull objectParent _unit;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "value",
                            "description": "`Anything` - any value (cannot  match `Array` before Arma 3)"
                        },
                        {
                            "name": "array",
                            "description": "`Array` - array of values"
                        }
                    ],
                    "outline": "value `in` array",
                    "returns": "`Boolean`"
                },
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - entity person"
                        },
                        {
                            "name": "vehicle",
                            "description": "`Object` - entity vehicle"
                        }
                    ],
                    "outline": "unit `in` vehicle",
                    "returns": "`Boolean`"
                },
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Array` - format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position3D](https://community.bistudio.com/wiki/Position%23Introduction)"
                        },
                        {
                            "name": "location",
                            "description": "`Location`"
                        }
                    ],
                    "outline": "position `in` location",
                    "returns": "`Boolean`"
                },
                {
                    "parameters": [
                        {
                            "name": "needle",
                            "description": "`String` - string to search **for**"
                        },
                        {
                            "name": "haystack",
                            "description": "`String` - string to search **in**"
                        }
                    ],
                    "outline": "needle `in` haystack",
                    "returns": "`Boolean`"
                },
                {
                    "parameters": [
                        {
                            "name": "key",
                            "description": "`HashMapKey`"
                        },
                        {
                            "name": "hashMap ",
                            "description": "`HashMap`"
                        }
                    ],
                    "outline": "key `in` hashMap",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/in"
        },
        "configuration": {
            "label": "in",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks whether given position or object is inside given area. Use `inAreaArray` to check multiple positions/objects within area.\n**NOTE**: This command also supports hexagon area which can be created from ellipse when both a and b are negative.\nHexagon ellipses are also supported by both marker creation and `drawEllipse`.",
            "examples": [
                {
                    "text": "```sqf\n_playerIsInside = player inArea _myTrigger;\n```"
                },
                {
                    "text": "```sqf\n_positionIsInside = _myPosition inArea [[100, 100, 0], 20, 30, 45, false];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Object` or `Array` in format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position3D](https://community.bistudio.com/wiki/Position%23Introduction) (must be [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) if area is checked in 3D)"
                        },
                        {
                            "name": "area",
                            "description": "`Object`, `String`, `Location`\n* `Object` - trigger\n* `String` - marker name\n* `Location` - location"
                        }
                    ],
                    "outline": "position `inArea` area",
                    "returns": "`Boolean`"
                },
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Object` or `Array` in format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position3D](https://community.bistudio.com/wiki/Position%23Introduction) (must be [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) if area is checked in 3D)"
                        },
                        {
                            "name": "center",
                            "description": "`Array` or `Object` - center of the area in format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction), [Position3D](https://community.bistudio.com/wiki/Position%23Introduction) (must be [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) if area is checked in 3D), `Object` or `Group`"
                        },
                        {
                            "name": "a",
                            "description": "`Number` - x axis (x / 2)"
                        },
                        {
                            "name": "b",
                            "description": "`Number` - y axis (y / 2)"
                        },
                        {
                            "name": "angle",
                            "description": "`Number` - rotation angle"
                        },
                        {
                            "name": "isRectangle",
                            "description": "`Boolean` - `true` if rectangle, `false` if ellipse"
                        },
                        {
                            "name": "c",
                            "description": "`Number` - (Optional, default -1 (unlimited)) z axis (z / 2)"
                        }
                    ],
                    "outline": "position `inArea` [center, a, b, angle, isRectangle, c]",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/inArea"
        },
        "configuration": {
            "label": "inArea",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns given list of `Object`s and/or `Position`s that are in the given area, area defined by a trigger, marker, location or array.\n\n**IMPORTANT**: Unlike `inAreaArrayIndexes`, _area_ position is [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL).",
            "examples": [
                {
                    "text": "```sqf\nvehicles inAreaArray myTrigger;\n```"
                },
                {
                    "text": "```sqf\nallUnits inAreaArray \"myMarker\";\n```"
                },
                {
                    "text": "```sqf\nallPlayers inAreaArray myLocation;\n```"
                },
                {
                    "text": "```sqf\nallDead inAreaArray [[100, 100, 0], 20, 30, 45, false, 10];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "positions",
                            "description": "`Array` of `Object`s and/or `Position`s"
                        },
                        {
                            "name": "area",
                            "description": "`Object`, `Location` or `String` - the defined area:\n* `Object` - trigger\n* `Location` - location\n* `String` - marker name"
                        }
                    ],
                    "outline": "positions `inAreaArray` area",
                    "returns": "`Array`: `Object`s and/or `Position`s inside the trigger area"
                },
                {
                    "parameters": [
                        {
                            "name": "positions",
                            "description": "`Array` - `Object`s and/or `Position`s to check. `Position`s must be [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) if area is checked in 3D"
                        },
                        {
                            "name": "centre",
                            "description": "`Array` format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL), {{GVI|arma3|2.14"
                        },
                        {
                            "name": "a",
                            "description": "`Number` - x axis (x / 2)"
                        },
                        {
                            "name": "b",
                            "description": "`Number` - y axis (y / 2)"
                        },
                        {
                            "name": "angle",
                            "description": "`Number` - (Optional, default 0) rotation angle"
                        },
                        {
                            "name": "isRectangle",
                            "description": "`Boolean` - (Optional, default `false`) `true` if rectangle, `false` if ellipse"
                        },
                        {
                            "name": "c",
                            "description": "`Number` - (Optional, default -1: unlimited) z axis (z / 2)"
                        }
                    ],
                    "outline": "positions `inAreaArray` [centre, a, b, angle, isRectangle, c]",
                    "returns": "`Array`: `Object`s and/or `Position`s inside the area"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/inAreaArray"
        },
        "configuration": {
            "label": "inAreaArray",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns indices of positions that are within the provided area.\n\n**IMPORTANT**: Unlike `inAreaArray`, _area_ 'center' position is [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL).",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _players = call BIS_fnc_listPlayers;\nprivate _indices = _players inAreaArrayIndexes _marker;\n{\n\tprivate _player = _players select _x;\n\t[\"You are in the marker!\"] remoteExec [\"hint\", _player];\n} forEach _indices;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "positions",
                            "description": "`Array` of `Object`s and/or `Position`s and/or `Location`s and/or `String`s and/or `Group`s, where:\n* `Object`s - entities\n* `Position`s - 2D or 3D positions\n* `Location`s - locations\n* `String`s - markers\n* `Group`s - AI groups, the position is the `leader`'s position"
                        },
                        {
                            "name": "area",
                            "description": "`Array` or `Object` or `Location` or `String`, where:\n* `Array` - in format:\n** [centre, a, b, angle, isRectangle, c] - area\n*** centre: `Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL)\n*** a: `Number` - area X size / 2, in metres\n*** b: `Number` - area Y size / 2, in metres\n*** angle: `Number` - area rotation in degrees\n*** isRectangle: `Boolean` - as the name says\n*** c: `Number` - area Z size / 2; -1 for infinite height\n** [point1, point2, point3, ...] - polygon\n* `Object` - trigger\n* `Location` - location\n* `String` - marker"
                        }
                    ],
                    "outline": "positions `inAreaArrayIndexes` area",
                    "returns": "`Array` of `Number`s - indices of _positions_<nowiki/>'s matching elements"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/inAreaArrayIndexes"
        },
        "configuration": {
            "label": "inAreaArrayIndexes",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the incapacitated sub-state of the given unit, when the `lifeState` of the unit is \"INCAPACITATED\". Could be one of:\n* \"UNCONSCIOUS\"\n* \"MOVING\"\n* \"SHOOTING\"",
            "examples": [
                {
                    "text": "```sqf\n_result = incapacitatedState player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "person",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`incapacitatedState` person",
                    "returns": "`String` - incapacitated sub-state (see description) or empty string \"\""
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/incapacitatedState"
        },
        "configuration": {
            "label": "incapacitatedState",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Pre-defined variable for the independent [side](https://community.bistudio.com/wiki/Side).",
            "examples": [
                {
                    "text": "```sqf\nif (side _unit == independent) then\n{\n\thint \"This is a independent unit!\";\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`independent`",
                    "returns": "`Side`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/independent"
        },
        "configuration": {
            "label": "independent",
            "grammarType": "reserved-literal"
        }
    },
    {
        "documentation": {
            "description": "Sets the state of a fireplace.",
            "examples": [
                {
                    "text": "```sqf\n_fireplaceOne inflame true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "fireplace",
                            "description": "`Object`"
                        },
                        {
                            "name": "burn",
                            "description": "`Boolean` - `true` to let it burn, `false` to extinguish it."
                        }
                    ],
                    "outline": "fireplace `inflame`  burn",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/inflame"
        },
        "configuration": {
            "label": "inflame",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks if fireplace is inflamed (burning) or not. To check if a unit is receiving damage from fire, use `isBurning` command.",
            "examples": [
                {
                    "text": "```sqf\n_inflamed = inflamed _fireplaceOne;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "fireplace",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`inflamed` fireplace",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/inflamed"
        },
        "configuration": {
            "label": "inflamed",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns information about what is currently displayed on given player's info panel.\n\nReturns [\"EmptyDisplay\",\"EmptyDisplayComponent\"] when no panel is open.",
            "examples": [
                {
                    "text": "```sqf\ninfoPanel \"left\" params [\"_componentClass\", \"_componentType\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "infoPanelId",
                            "description": "`String` - info panel classname, or \"left\" or \"right\""
                        }
                    ],
                    "outline": "`infoPanel` infoPanelId",
                    "returns": "`Array` of `String`s in format [componentClass, componentType]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/infoPanel"
        },
        "configuration": {
            "label": "infoPanel",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Controls availability of component to given object info panel.",
            "examples": [
                {
                    "text": "```sqf\n\n// returns true if specific component \"SensorDisplay\" is enabled on player vehicle's left panel\n_state = [vehicle player, [-1]] infoPanelComponentEnabled [\"VehicleSystemsDisplayManagerComponentLeft\", \"SensorDisplay\"];\n\n```"
                },
                {
                    "text": "```sqf\n\n// returns true if all \"SensorsDisplayComponent\" components are enabled on player vehicle's left panel, otherwise returns false\n_state = [vehicle player, [-1]] infoPanelComponentEnabled [\"VehicleSystemsDisplayManagerComponentLeft\", \"SensorsDisplayComponent\"];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - the concerned vehicle"
                        },
                        {
                            "name": "panelID",
                            "description": "`String` - \"left\" or \"right\" can be used as panel names"
                        },
                        {
                            "name": "componentClassOrType",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `infoPanelComponentEnabled` [panelID, componentClassOrType]",
                    "returns": "`Boolean` - `true` if component was successfully enabled on the panel, `false` otherwise (e.g. component is not available for the object)"
                },
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - the concerned vehicle"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` - turret index"
                        },
                        {
                            "name": "panelID",
                            "description": "`String` - \"left\" or \"right\" can be used as panel names"
                        },
                        {
                            "name": "componentClassOrType",
                            "description": "`String`"
                        }
                    ],
                    "outline": "[unit, turretPath] `infoPanelComponentEnabled` [panelID, componentClassOrType]",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/infoPanelComponentEnabled"
        },
        "configuration": {
            "label": "infoPanelComponentEnabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array of all components available to given object info panel.",
            "examples": [
                {
                    "text": "```sqf\n\n// returns array of all components configured for _helicopter pilot seat\nprivate _componentsData = [_helicopter, [-1]] infoPanelComponents \"left\";\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - the concerned vehicle"
                        },
                        {
                            "name": "panelID",
                            "description": "`String` - \"left\" or \"right\" can be used as panel names"
                        }
                    ],
                    "outline": "unit `infoPanelComponents` panelID",
                    "returns": "`Array` - format [className, componentType, isAccessible]:\n* className: `String` - component classname as defined in object/vehicle config\n* componentType: `String` - componentType - component type\n* isAccessible: `Boolean` - boolean flag that shows if component is currently accessible (lack of required item can make it temporarily inaccessible)"
                },
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - the concerned vehicle"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` - turret index"
                        },
                        {
                            "name": "panelID",
                            "description": "`String` - \"left\" or \"right\" can be used as panel names"
                        }
                    ],
                    "outline": "[unit, turretPath] `infoPanelComponents` panelID",
                    "returns": "`Array` - format [className, componentType, isAccessible]:\n* className: `String` - component classname as defined in object/vehicle config\n* componentType: `String` - componentType - component type\n* isAccessible: `Boolean` - boolean flag that shows if component is currently accessible (lack of required item can make it temporarily inaccessible)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/infoPanelComponents"
        },
        "configuration": {
            "label": "infoPanelComponents",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array all info panels configured for given object or object and turret path.",
            "examples": [
                {
                    "text": "```sqf\ninfoPanels [vehicle player, [0]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - the concerned vehicle"
                        }
                    ],
                    "outline": "`infoPanels` unit",
                    "returns": "`Array` - format [<nowiki/>[infoPanelId1, infoPanelShortcutId1], [infoPanelId2, infoPanelShortcutId2], ...]:\n* infoPanelId: `String` - name of the info panel class as defined in vehicle config\n* infopanelShortcutId: `String` - shortcut representation of _infopanelId_, currently are supported only shortcuts \"left\" and \"right\""
                },
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - the concerned vehicle"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` - turret index"
                        }
                    ],
                    "outline": "`infoPanels` [unit, turretPath]",
                    "returns": "`Array` - format [<nowiki/>[infoPanelId1, infoPanelShortcutId1], [infoPanelId2, infoPanelShortcutId2], ...]:\n* infoPanelId: `String` - name of the info panel class as defined in vehicle config\n* infopanelShortcutId: `String` - shortcut representation of _infopanelId_, currently are supported only shortcuts \"left\" and \"right\""
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/infoPanels"
        },
        "configuration": {
            "label": "infoPanels",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets given event handler of in-game UI. If EH function returns `true`, performed action is overridden. Event handlers available are:\n* \"PrevAction\" - mouse scroll up\n* \"Action\" - action key press\n* \"NextAction\" - mouse scroll down\nIn order to remove a previously added event handler, set it again with an empty _code_ string `**\"\"**`.\n\n{{Feature|important|This is a \"set\" command, which means event handlers are not stackable and will replace previously set event handlers of the same type.}}\n\n**Arma 3**: Since Arma 3 v1.50 the event handler receives an array of the selected/activated action's arguments in `**_this**` variable:\n\n```sqf\nparams [\"_target\", \"_caller\", \"_index\", \"_engineName\", \"_text\", \"_priority\", \"_showWindow\", \"_hideOnUse\", \"_shortcut\", \"_visibleMenu\", \"_eventName\"];\n```\n\n* _target: `Object` - target object to which action is attached\n* _caller: `Object` - caller object, basically `player`\n* _index: `Number` - index of the action in action menu (0 - top most)\n* _engineName: `String` - engine based action name (\"User\" for user added actions)\n* _text: `String` - `localize`d action plain text as seen by the caller\n* _priority: `Number` - action _priority_ value\n* _showWindow: `Boolean` - action _showWindow_ value\n* _hideOnUse: `Boolean` - action _hideOnUse_ value\n* _shortcut: `String` - action _shortcut_ name or \"\"\n* _visibleMenu: `Boolean` - [action menu visibility](https://community.bistudio.com/wiki/isActionMenuVisible) - on first scroll or action press the menu is still invisible, the menu is shown but no action is performed\n* _eventName: `String` - event name",
            "examples": [
                {
                    "text": "```sqf\ninGameUISetEventHandler [\"Action\", \"hint 'Lights, Camera, Action!'; true\"];\nsleep 10;\ninGameUISetEventHandler [\"Action\", \"\"]; // removes the \"Action\" EH\n```"
                },
                {
                    "text": "```sqf\ninGameUISetEventHandler [\"PrevAction\", \"hint str _this; false\"];\ninGameUISetEventHandler [\"NextAction\", \"hint str _this; false\"];\ninGameUISetEventHandler [\"Action\", \"hint str _this; false\"];\n```"
                },
                {
                    "text": "Deny any weapon disassembly:\n\n```sqf\ninGameUISetEventHandler [\"Action\", \"\n\tif (_this select 3 == 'DisAssemble') then {\n\t\thint 'You are not allowed to do this';\n\t\ttrue\n\t}\n\"];\n```"
                },
                {
                    "text": "Detect explosive/mine placement:\n\n```sqf\nprivate _onMagazineUse = '\n\tparams [\"_target\", \"\", \"\", \"_action\", \"\", \"\", \"\", \"\", \"\", \"\", \"_event\"];\n\tif (_action == \"UseMagazine\") then {\n\t\tif (_event == \"Action\") then {\n\t\t\t_target spawn {\n\t\t\t\twaitUntil {!(all_magazines isEqualTo magazines _this)};\n\t\t\t\t{\n\t\t\t\t\t0 = all_magazines deleteAt (all_magazines find _x);\n\t\t\t\t} count magazines _this;\n\t\t\t\thint format [\"Magazine Used: %1\", all_magazines select 0];\n\t\t\t};\n\t\t} else {\n\t\t\tall_magazines = magazines _target;\n\t\t};\n\t};\n\tfalse\n';\ninGameUISetEventHandler [\"PrevAction\", _onMagazineUse];\ninGameUISetEventHandler [\"NextAction\", _onMagazineUse];\ninGameUISetEventHandler [\"Action\", _onMagazineUse];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "handlerName",
                            "description": "`String`"
                        },
                        {
                            "name": "code",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`inGameUISetEventHandler` [handlerName, code]",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/inGameUISetEventHandler"
        },
        "configuration": {
            "label": "inGameUISetEventHandler",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns base entry of config entry.",
            "examples": [
                {
                    "text": "```sqf\n_base = inheritsFrom (configFile >> \"CfgVehicles\" >> \"Car\"); // returns \"LandVehicle\" Config entry\n```"
                },
                {
                    "text": "[[File:inheritsFrom.jpg|right|300px]]\nPrint parent tree of given config class:\n\n```sqf\n\nfnc_printParents =\n{\n\tdisableSerialization;\n\tif (!isClass _this) exitWith { hint \"Argument is not a config Class\" };\n\n\tprivate _parents = [];\n\n\twhile { !isNull _this } do\n\t{\n\t\t_parents pushBack configName _this;\n\t\t_this = inheritsFrom _this;\n\t};\n\n\treverse _parents;\n\n\tprivate _tv = findDisplay 46 createDisplay \"RscDisplayEmpty\" ctrlCreate [\"RscTree\", -1];\n\t_tv ctrlSetPosition [0,0,1,1];\n\t_tv ctrlSetBackgroundColor [0,0,0,0.5];\n\t_tv ctrlCommit 0;\n\n\tprivate _path = [];\n\t{\n\t\t_tv tvAdd [_path, _x];\n\t\t_path pushBack 0;\n\t}\n\tforEach _parents;\n\n\ttvExpandAll _tv;\n};\n\n// Example:\n(configFile >> \"CfgVehicles\" >> typeOf player) call fnc_printParents;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "config",
                            "description": "`Config`"
                        }
                    ],
                    "outline": "`inheritsFrom` config",
                    "returns": "`Config`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/inheritsFrom"
        },
        "configuration": {
            "label": "inheritsFrom",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Initialises the ambient life on [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality) client from `**CfgWorlds >> worldName >> AmbientA3**`. Has no effect on dedicated server or headless client.",
            "examples": [
                {
                    "text": "```sqf\ninitAmbientLife;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**initAmbientLife**",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/initAmbientLife"
        },
        "configuration": {
            "label": "initAmbientLife",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks whether position is inside given polygon. The polygon is only checked in 2 dimensions, i.e. the value of Z is ignored.",
            "examples": [
                {
                    "text": "```sqf\nprivate _isInside = [100, 100, 0] inPolygon [[0, 0, 0], [1000, 1000, 0], [1000, 0, 0]];\n```"
                },
                {
                    "text": "```sqf\n\nprivate _markerName = \"_USER_DEFINED #0/0/1\";\n\nprivate _xy2DPositions = markerPolyline _markerName;\nprivate _positions = [];\n\n// let's convert these x,y coordinates to \"normal\" position arrays\nfor \"_i\" from 0 to count _xy2DPositions - 1 step 2 do\n{\n\t_positions pushBack [_xy2DPositions select _i, _xy2DPositions select (_i + 1), 0];\n};\n\nplayer inPolygon _positions; // true if in the drawn shape, false if not\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Array` format [Position3D](https://community.bistudio.com/wiki/Position%23Introduction), {{GVI|arma3|2.14"
                        },
                        {
                            "name": "polygon",
                            "description": "`Array` of [Position3D](https://community.bistudio.com/wiki/Position%23Introduction) - positions in format: [position1, position2...., positionN]"
                        }
                    ],
                    "outline": "position `inPolygon` polygon",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/inPolygon"
        },
        "configuration": {
            "label": "inPolygon",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return the state of input devices mapped to given input action.\n\n\nFor Arma 3 inputActions and its bindings see: [[{{PAGENAME}}/actions]].\n\n\nFor earlier Arma editions  see [:Category:Key Actions](https://community.bistudio.com/wiki/%3ACategory%3AKey%20Actions).",
            "examples": [
                {
                    "text": "```sqf\ninputAction \"leanLeft\";\n```\n Returns 1 if the button mapped to \"leanLeft\" is pressed currently else 0."
                },
                {
                    "text": "```sqf\n[] spawn {\n\twaitUntil {inputAction \"reloadMagazine\" > 0};\n\thint \"Reload Key Pressed\";\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "name",
                            "description": "`String` - name of the action"
                        }
                    ],
                    "outline": "`inputAction` name",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/inputAction"
        },
        "configuration": {
            "label": "inputAction",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the state of controller inputs. The controller is a standard XBOX controller which is selected with Windows XBOX controller scheme. The input can be:\n{{Columns|4|\n* XBOX_A 0\n* XBOX_B 1\n* XBOX_X 2\n* XBOX_Y 3\n* XBOX_Up 4\n* XBOX_Down 5\n* XBOX_Left 6\n* XBOX_Right 7\n* XBOX_Start 8\n* XBOX_Back 9\n* XBOX_LeftBumper 10\n* XBOX_RightBumper 11\n* XBOX_LeftTrigger 12\n* XBOX_RightTrigger 13\n* XBOX_LeftThumb 14\n* XBOX_RightThumb 15\n* XBOX_LeftThumbXRight 16\n* XBOX_LeftThumbYUp 17\n* XBOX_RightThumbXRight 18\n* XBOX_RightThumbYUp 19\n* XBOX_LeftThumbXLeft 20\n* XBOX_LeftThumbYDown 21\n* XBOX_RightThumbXLeft 22\n* XBOX_RightThumbYDown 23\n}}",
            "examples": [
                {
                    "text": "State of the fire trigger:\n\n```sqf\nonEachFrame { hintSilent str inputController 13 };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "input",
                            "description": "`Number` - controller input 0...31 (see description) or -1 for controller detection."
                        }
                    ],
                    "outline": "`inputController` input",
                    "returns": "`Number` - value of the controller input 0...1. When input is -1, return is 1 if controller is available, 0 - if controller is unavailable"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/inputController"
        },
        "configuration": {
            "label": "inputController",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the state of mouse button action, alone or in combination with key presses. For more information on codes and combos see [Arma_3:_Modded_Keybinding](https://community.bistudio.com/wiki/Arma_3%3A_Modded_Keybinding) and `DIK_KeyCodes` but here are some examples of how codes could be hand constructed:\n\n* KEYBOARD_COMBO 16777216 (0x1000000)\n* DEVICE_MOUSE 65536 (0x10000)\n* HOLD_OFFSET 0\n* CLICK_OFFSET 128 (0x80)\n* DOUBLE_CLICK_OFFSET 256 (0x100)\n* SPECIAL_COMBINATIONS 1114112 (0x110000)\n<pre>\nClick + Hold: BUTTON + DEVICE_MOUSE + HOLD_OFFSET = BUTTON + 65536 + 0\nClick: BUTTON + DEVICE_MOUSE + CLICK_OFFSET = BUTTON + 65536 + 128 \nDouble Click: BUTTON + DEVICE_MOUSE + DOUBLE_CLICK_OFFSET = BUTTON + 65536 + 256\n\nRMB Click + Hold:  1 + 65536 + 0 = 65537\nRMB Click: 1 + 65536 + 128 = 65665\nRMB Double Click: 1 + 65536 + 256 = 65793\n\nCombo + Click + Hold: DIK * KEYBOARD_COMBO + SPECIAL_COMBINATIONS + BUTTON + HOLD_OFFSET = DIK * 16777216 + 1114112 + BUTTON + 0\nCombo + Click: DIK * KEYBOARD_COMBO + SPECIAL_COMBINATIONS + BUTTON + CLICK_OFFSET = DIK * 16777216 + 1114112 + BUTTON + 128\nCombo + Double Click: DIK * KEYBOARD_COMBO + SPECIAL_COMBINATIONS + BUTTON + DOUBLE_CLICK_OFFSET = DIK * 16777216 + 1114112 + BUTTON + 256\n\nLShift + RMB Click + Hold: 42 * 16777216 + 1114112 + 1 + 0 = 705757185\nLShift + RMB Click: 42 * 16777216 + 1114112 + 1 + 128 = 705757313\nLShift + RMB Double Click: 42 * 16777216 + 1114112 + 1 + 256 = 705757441\n</pre>",
            "examples": [
                {
                    "text": "State of the RMB:\n\n```sqf\nonEachFrame { hintSilent str inputMouse 1 };\n```"
                },
                {
                    "text": "Detect LCtrl + 2xRMB:\n\n```sqf\nonEachFrame { hintSilent str inputMouse \"487653633\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "button",
                            "description": "`Number` - button number 0..7: 0-LMB, 1-RMB, 2-MMB"
                        }
                    ],
                    "outline": "`inputMouse` button",
                    "returns": "`Number` - the state of the button:\n* 0 - released\n* 1 - click\n* 2 - click + hold\n* 3 - double click\n* 4 - double click + hold"
                },
                {
                    "parameters": [
                        {
                            "name": "combocode",
                            "description": "`String` - code or combination (see `actionKeys`)"
                        }
                    ],
                    "outline": "`inputMouse` combocode",
                    "returns": "`Boolean` - `true` if given code/combination detected, `false` otherwise"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/inputMouse"
        },
        "configuration": {
            "label": "inputMouse",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns true if all given units are able to fire at given position with given magazineType.",
            "examples": [
                {
                    "text": "```sqf\n_isInRange = getMarkerPos \"myTarget\" inRangeOfArtillery [[myArty], \"32Rnd_155mm_Mo_shells\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "pos",
                            "description": "`Position`"
                        },
                        {
                            "name": "units",
                            "description": "`Array` of `Object`s - array of units."
                        },
                        {
                            "name": "magazineType",
                            "description": "`String` - **case-sensitive**"
                        }
                    ],
                    "outline": "pos `inRangeOfArtillery` [units, magazineType]",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/inRangeOfArtillery"
        },
        "configuration": {
            "label": "inRangeOfArtillery",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Inserts multiple values into `Array`/`String`/`HashMap`.\n\nThe `String` variant also supports `forceUnicode`.",
            "examples": [
                {
                    "text": "```sqf\n\n\"Test\" insert [0, \"Radio\"];\t\t// returns \"RadioTest\"\n\"Test\" insert [2, \"Radio\"];\t\t// returns \"TeRadiost\"\n\"Test\" insert [-1, \"Radio\"];\t// returns \"TestRadio\"\n\n```"
                },
                {
                    "text": "```sqf\n\nprivate _array = [\"a\", \"b\", \"c\"];\n_array insert [0, [\"w\"]]; // _array is now [\"w\", \"a\", \"b\", \"c\"]\n\nprivate _array = [\"a\", \"b\", \"c\"];\n_array insert [-1, [\"w\"]]; // _array is now [\"a\", \"b\", \"c\", \"w\"]\n\nprivate _array = [\"a\", \"b\", \"c\"];\n_array insert [-2, [\"w\"]]; // _array is now [\"a\", \"b\", \"w\", \"c\"] // Arma 3 v2.14\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array ",
                            "description": "`Array`"
                        },
                        {
                            "name": "index",
                            "description": "`Number` - index at which the values will be inserted, -1 for append, {{GVI|arma3|2.14"
                        },
                        {
                            "name": "valuesToInsert",
                            "description": "`Array` of `Anything` - values to insert at the specified index"
                        },
                        {
                            "name": "onlyIfUnique",
                            "description": "`Boolean` - only insert if the value is unique in the array, like `pushBackUnique`"
                        }
                    ],
                    "outline": "array `insert` [index, valuesToInsert, onlyIfUnique]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "string ",
                            "description": "`String`"
                        },
                        {
                            "name": "index",
                            "description": "`Number` - index at which the values will be inserted, -1 for append"
                        },
                        {
                            "name": "substring",
                            "description": "`String` - string to insert"
                        }
                    ],
                    "outline": "string `insert` [index, substring]",
                    "returns": "`String` - the new string"
                },
                {
                    "parameters": [
                        {
                            "name": "hashMap",
                            "description": "`HashMap`"
                        },
                        {
                            "name": "keyN",
                            "description": "`HashMapKey`"
                        },
                        {
                            "name": "valueN",
                            "description": "`Anything`"
                        }
                    ],
                    "outline": "hashMap `insert` [<nowiki/>[key1, value1], [key2, value2], ...]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "hashMap",
                            "description": "`HashMap`"
                        },
                        {
                            "name": "splitArray",
                            "description": "`Boolean` - determines _keysAndValues_ format (see _keysAndValues_<nowiki/>'s description)"
                        },
                        {
                            "name": "keysAndValues",
                            "description": "`Array` - in format depending on _splitArray_<nowiki/>'s value:\n* `true` - `**[<nowiki/>[key1, key2, ...], [value1, value2, ...]]**`\n* `false` - `**[<nowiki/>[key1, value1], [key2, value2], ...]**` (same as {{Link|#Syntax 3}})"
                        }
                    ],
                    "outline": "hashMap `insert` [splitArray, [keysAndValues]]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/insert"
        },
        "configuration": {
            "label": "insert",
            "grammarType": "property-accessor"
        }
    },
    {
        "documentation": {
            "description": "Insert an object to the editor and assign arguments. Create script is,not called. Returns the ID of the new EditorObject. Subtype class is,optional.\n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "[type,value,[name1,value1,...],subtype class]",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "map `insertEditorObject` [type,value,[name1,value1,...],subtype class]",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/insertEditorObject"
        },
        "configuration": {
            "label": "insertEditorObject",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns how much a man is inside a building. The value is the same as normally returned by weapons/ammo sound controller \"interior\".\nIt is possible to modify an individual object to use sound interior with `enableAudioFeature`.\n\n**NOTE**: \nThe sound is considered internal when the corresponding surface sound name starts with \"int_\".\nAn object placed inside a building that does not have model `**CfgSurfaces**`' {{sic|[soundEviron](https://community.bistudio.com/wiki/Config%20Properties%20Megalist%23soundEviron)}} parameter named this way would generate external sound inside the building, and `insideBuilding` on top of this object would return 0.",
            "examples": [
                {
                    "text": "```sqf\nprivate _isFullyInside = insideBuilding player == 1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "man",
                            "description": "`Object` - entity of class Man"
                        }
                    ],
                    "outline": "`insideBuilding` man",
                    "returns": "`Number` - in range 0..1, where 0 is outside, 1 is inside"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/insideBuilding"
        },
        "configuration": {
            "label": "insideBuilding",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Finds named selections in object which are in specified LOD, intersected by given section of a line. Return value is in the form of [selection, distance]. Multiple returned arrays are nested within a single array. No intersection returns []. _lodName_ could be one of the following: \n* \"FIRE\"\n* \"VIEW\"\n* \"GEOM\"\n* \"IFIRE\" - (\"I\" stands for Indirect, almost the same as FIRE)\n* {{GVI|arma3|2.02",
            "examples": [
                {
                    "text": "```sqf\n[_tank, \"VIEW\"] intersect [[1500, 1500, 2], [1550, 1500, 2]];\n```"
                },
                {
                    "text": "```sqf\nsphere = \"Sign_Sphere10cm_F\" createVehicle [0,0,0];\nonEachFrame {\n\t_begPos = positionCameraToWorld [0,0,0];\n\t_begPosASL = AGLToASL _begPos;\n\t_endPos = positionCameraToWorld [0,0,1000];\n\t_endPosASL = AGLToASL _endPos;\n\t_ins = lineIntersectsSurfaces [_begPosASL, _endPosASL, player, objNull, true, 1, \"FIRE\", \"NONE\"];\n\tif (_ins isEqualTo []) exitWith {sphere setPosASL [0,0,0]};\n\t_ins select 0 params [\"_pos\", \"_norm\", \"_obj\", \"_parent\"];\n\tif !(getModelInfo _parent select 2) exitWith {sphere setPosASL [0,0,0]};\n\t_ins2 = [_parent, \"FIRE\"] intersect [_begPos, _endPos];\n\tif (_ins2 isEqualTo []) exitWith {sphere setPosASL [0,0,0]};\n\t_ins2 select 0 params [\"_name\", \"_dist\"];\n\t_posASL = _begPosASL vectorAdd ((_begPosASL vectorFromTo _endPosASL) vectorMultiply _dist);\n\tdrawIcon3D [\"\", [1,1,1,1], ASLToAGL _posASL, 0, 0, 0, _name, 1, 0.03, \"PuristaMedium\"];\n\tsphere setPosASL _posASL;\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "lodName",
                            "description": "`String`"
                        },
                        {
                            "name": "begPos",
                            "description": "`Array` format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL)"
                        },
                        {
                            "name": "endPos",
                            "description": "`Array` format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL)"
                        }
                    ],
                    "outline": "[object, lodName] `intersect` [begPos, endPos]",
                    "returns": "`Array` - array of intersections in format: [<nowiki/>[selection, distance],...], where\n* selection - name of intersected selection\n* distance - distance from begPos\nThe results are also sorted, closest selection first"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/intersect"
        },
        "configuration": {
            "label": "intersect",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if the [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor) is currently being used.",
            "examples": [
                {
                    "text": "```sqf\nif is3DEN then {systemChat \"Welcome to Eden Editor!\"};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`is3DEN`",
                    "returns": "`Boolean` - `true` when inside editor environment, `false` when outside of editor environment"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/is3DEN"
        },
        "configuration": {
            "label": "is3DEN",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if the [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor) is in multiplayer mode.",
            "examples": [
                {
                    "text": "```sqf\nif is3DENMultiplayer then {systemChat \"You are hosting a test server!\"};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`is3DENMultiplayer`",
                    "returns": "`Boolean` - returns `true` in the following cases:\n* Multiplayer preview launched directly from [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor) - `true` in preview and only for the creator\n* MP mission is chosen for editing when creating a server: `**Multiplayer - Server Browser - Host Server**`. When _3D EDITOR_ button is clicked for selected mission and [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor) is launched, command returns `true` within the editor environment"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/is3DENMultiplayer"
        },
        "configuration": {
            "label": "is3DENMultiplayer",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if the [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor) is currently in mission preview mode, single player or multiplayer. (see also `is3DEN`, `is3DENMultiplayer`)",
            "examples": [
                {
                    "text": "```sqf\nif is3DENPreview then { systemChat \"Welcome to Eden Editor Preview!\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`is3DENPreview`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/is3DENPreview"
        },
        "configuration": {
            "label": "is3DENPreview",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "If unit is diving and doesn't have a re-breather, it returns `false`. Diving means the unit's head is underwater. If unit is underwater and has a re-breather, the command returns `true`.",
            "examples": [
                {
                    "text": "```sqf\n_canBreath = isAbleToBreathe player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`isAbleToBreathe`  unit",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isAbleToBreathe"
        },
        "configuration": {
            "label": "isAbleToBreathe",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if scroll menu is visible.",
            "examples": [
                {
                    "text": "```sqf\nif (isActionMenuVisible) then { hint \"Scroll menu is opened\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`isActionMenuVisible`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isActionMenuVisible"
        },
        "configuration": {
            "label": "isActionMenuVisible",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check if team member is an agent.",
            "examples": [
                {
                    "text": "```sqf\nisAgent teamMember _unit;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "teamMember",
                            "description": "[Team Member](https://community.bistudio.com/wiki/Team%20Member)"
                        }
                    ],
                    "outline": "`isAgent` teamMember",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isAgent"
        },
        "configuration": {
            "label": "isAgent",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns true if procedural aiming precision affects weapon sway.",
            "examples": [
                {
                    "text": "```sqf\n_isAffected = isAimPrecisionEnabled player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit which should be checked"
                        }
                    ],
                    "outline": "`isAimPrecisionEnabled` unit",
                    "returns": "`Boolean` - true if affected, false if not"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isAimPrecisionEnabled"
        },
        "configuration": {
            "label": "isAimPrecisionEnabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns whether the [AI steering component](https://community.bistudio.com/wiki/useAISteeringComponent) feature is enabled for the specified vehicle.",
            "examples": [
                {
                    "text": "```sqf\nisAISteeringComponentEnabled myTank;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`isAISteeringComponentEnabled` vehicle",
                    "returns": "`Boolean` - `true` if AI steering component is supported by the vehicle (i.e. defined in config) and enabled, `false` otherwise"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/isAISteeringComponentEnabled"
        },
        "configuration": {
            "label": "isAISteeringComponentEnabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Whether or not units can be in a vehicle with broken tracks/wheels.",
            "examples": [
                {
                    "text": "```sqf\n\nif !(isAllowedCrewInImmobile _tank) then\n{\n\t_tank allowCrewInImmobile true;\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - transport"
                        }
                    ],
                    "outline": "`isAllowedCrewInImmobile` vehicle",
                    "returns": "`Boolean` - `true` - allowed, `false` - not allowed"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/isAllowedCrewInImmobile"
        },
        "configuration": {
            "label": "isAllowedCrewInImmobile",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check if config entry represents array.",
            "examples": [
                {
                    "text": "```sqf\n_ok = isArray (configFile >> \"CfgVehicles\") // returns false\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "config",
                            "description": "`Config`"
                        }
                    ],
                    "outline": "`isArray` config",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isArray"
        },
        "configuration": {
            "label": "isArray",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return `true` if vehicle has enabled auto hover. (always returns false if the vehicle can't set auto hover)",
            "examples": [
                {
                    "text": "```sqf\n_isOn = isAutoHoverOn vehicle player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`isAutoHoverOn` vehicle",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isAutoHoverOn"
        },
        "configuration": {
            "label": "isAutoHoverOn",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns whether the UAV is in autonomous mode or not.",
            "examples": [
                {
                    "text": "```sqf\nprivate _isAutonomous = isAutonomous uav;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "uav",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`isAutonomous` uav",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/isAutonomous"
        },
        "configuration": {
            "label": "isAutonomous",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns state of automatic start up action. {{Feature|afm}}",
            "examples": [
                {
                    "text": "```sqf\n_state = isAutoStartUpEnabledRTD _myHelicopter;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "helicopter",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`isAutoStartUpEnabledRTD` helicopter",
                    "returns": "`Boolean` - returns `true` if automatic start up action is enabled."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isAutoStartUpEnabledRTD"
        },
        "configuration": {
            "label": "isAutoStartUpEnabledRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns true if game was started with autotest parameter",
            "examples": [
                {
                    "text": "```sqf\n_bool = isAutotest;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`isAutotest`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isAutotest"
        },
        "configuration": {
            "label": "isAutotest",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns state of auto trim functionality. {{Feature|afm}}",
            "examples": [
                {
                    "text": "```sqf\n_state = isAutoTrimOnRTD _myHelicopter;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "helicopter",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`isAutoTrimOnRTD` helicopter",
                    "returns": "`Boolean` - returns `true` if auto trim is enabled"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isAutoTrimOnRTD"
        },
        "configuration": {
            "label": "isAutoTrimOnRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns resting state of a PhysX (EPE) object. Some EPE objects are deliberately put to sleep by the engine to save resources.\nThis command returns `true` when object is simulating and `false` when it is put to sleep. With units of type `**Man**` the behaviour is slightly different.\nAs units never get put to sleep, the command outputs ragdoll state of a unit instead. There are 6 states for the output of the command:\n* EPE object is simulating - `true`\n* EPE object is put to sleep - `false`\n* Unit is `alive`, ragdoll is active - `false`\n* Unit is `alive`, ragdoll is NOT active - `true`\n* {{GVI|arma3|2.10",
            "examples": [
                {
                    "text": "```sqf\nprivate _isAwake = isAwake _object;\n```"
                },
                {
                    "text": "{{GVI|arma3|2.10"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - PhysX object or unit"
                        }
                    ],
                    "outline": "`isAwake` object",
                    "returns": "`Boolean` - see description"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/isAwake"
        },
        "configuration": {
            "label": "isAwake",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns whether the unit is bleeding.",
            "examples": [
                {
                    "text": "```sqf\nif (isBleeding player) then { player groupChat \"I'm bleeding!!\"; };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`isBleeding`  unit",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isBleeding"
        },
        "configuration": {
            "label": "isBleeding",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns whether the unit is burning.\nThis returns true only if unit is damaged by nearby fire, it does **not** check whether a fireplace is burning, use `inflamed` command for that.",
            "examples": [
                {
                    "text": "```sqf\nif (isBurning player) then { player groupChat \"I'm burning!!\"; };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`isBurning` unit",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isBurning"
        },
        "configuration": {
            "label": "isBurning",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check if config entry represents config class.",
            "examples": [
                {
                    "text": "```sqf\n_ok = isClass (configFile >> \"CfgVehicles\");\n```\n Result is `true`."
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "config",
                            "description": "`Config`"
                        }
                    ],
                    "outline": "`isClass` config",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isClass"
        },
        "configuration": {
            "label": "isClass",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if vehicle collision lights are on otherwise `false`.",
            "examples": [
                {
                    "text": "```sqf\n_collisionLightOn = isCollisionLightOn heli;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`isCollisionLightOn` vehicle",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/isCollisionLightOn"
        },
        "configuration": {
            "label": "isCollisionLightOn",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns true if copilots actions are enabled.",
            "examples": [
                {
                    "text": "```sqf\nif (!isCopilotEnabled myHeli) then {\n\tmyHeli enableCopilot true;\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`isCopilotEnabled` vehicle",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/isCopilotEnabled"
        },
        "configuration": {
            "label": "isCopilotEnabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "A getter for `allowDamage` command. The command indicates if damage is allowed at current `local`ity, hence local effect of the command.\nFor complete solution for being able to tell whether or not an object can be damaged at current locality see _Example 1_.",
            "examples": [
                {
                    "text": "```sqf\nprivate _canBeDamaged = local _obj && isDamageAllowed _obj;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`isDamageAllowed` object",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/isDamageAllowed"
        },
        "configuration": {
            "label": "isDamageAllowed",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if the machine executing the command is a dedicated multiplayer server. Returns `false` in single player.",
            "examples": [
                {
                    "text": "```sqf\nif (isDedicated) then { diag_log \"Dedicated Server on the run !\"; };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`isDedicated`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isDedicated"
        },
        "configuration": {
            "label": "isDedicated",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns true if the DLC (CDLC included) is marked as available on Steam.\nOfficial and Creator DLC appIds can be found on [[:Category:Arma 3: DLCs & Expansions|Arma 3: DLCs & Expansions]] and [[:Category:Arma 3: CDLCs|Arma 3: CDLCs]] pages.\n**IMPORTANT**: This command will return `true` if the DLC is owned, even if it is **not** installed!",
            "examples": [
                {
                    "text": "```sqf\nprivate _karts = 288520;\nisDLCAvailable _karts; // returns true\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "appId ",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`isDLCAvailable` appId",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isDLCAvailable"
        },
        "configuration": {
            "label": "isDLCAvailable",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if engine is on, `false` if it is off.",
            "examples": [
                {
                    "text": "```sqf\n_carEngineIsOn = isEngineOn _carOne;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`isEngineOn` vehicle",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/isEngineOn"
        },
        "configuration": {
            "label": "isEngineOn",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Compares two values by reference, returns `true` if equal.",
            "examples": [
                {
                    "text": "```sqf\n\n_arr1 = [1,[2,[3]]];\n_arr2 = _arr1;\n_arr1 isEqualTo _arr2;\t// true\n_arr1 isEqualRef _arr2;\t// true\n\n_arr2 = +_arr1;\t\t\t// array copy\n_arr1 isEqualTo _arr2;\t// true\n_arr1 isEqualRef _arr2;\t// false\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "val1",
                            "description": "`Anything`"
                        },
                        {
                            "name": "val2",
                            "description": "`Anything`"
                        }
                    ],
                    "outline": "val1 `isEqualRef` val2",
                    "returns": "`Boolean` - `true` if the same ref"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isEqualRef"
        },
        "configuration": {
            "label": "isEqualRef",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Performs strict comparison between var1 and var2 and returns `true` if equal, otherwise `false`. Strict means that it would check that both arguments are of the same data type and then compare the values.\n\n\nSome differences between `isEqualTo` and [[==]]:\n* It performs case sensitive comparison on `String`s\n* It doesn't throw error when comparing different types, i.e. (\"eleven\" `isEqualTo` 11)\n* It can compare `Array`s, [Script Handle](https://community.bistudio.com/wiki/Script%20Handle)s and `Boolean`s (`alive` `player` `isEqualTo` `true`)\n* It can compare non-existent game objects (`grpNull` `isEqualTo` `grpNull`)\n* It is slightly faster than [[==]], especially when comparing `String`s\n* {{GVI|arma3|1.48",
            "examples": [
                {
                    "text": "```sqf\n\n_arr1 = [1, [2, [3]]];\n_arr2 = [1, [2, [3]]];\nif (_arr1 isEqualTo _arr2) then { hint \"Arrays match!\" };\n\n```"
                },
                {
                    "text": "```sqf\n\nif (a isEqualTo b) then { hint \"a is equal to b\" };\nif !(a isEqualTo b) then { hint \"a is not equal to b\" };\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "val1",
                            "description": "`Anything`"
                        },
                        {
                            "name": "val2",
                            "description": "`Anything`"
                        }
                    ],
                    "outline": "val1 `isEqualTo` val2",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isEqualTo"
        },
        "configuration": {
            "label": "isEqualTo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Compares two values' types. A much faster alternative to <sqf inline>typeName a == typeName b.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _var = [1,2,3];\n_var isEqualType 0; // false\n_var isEqualType []; // true\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "val1",
                            "description": "`Anything`"
                        },
                        {
                            "name": "val2",
                            "description": "`Anything`"
                        }
                    ],
                    "outline": "val1 `isEqualType` val2",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isEqualType"
        },
        "configuration": {
            "label": "isEqualType",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Compares types of all elements of an array to the type of a single value. Since Arma 3 v2.09.149634 no additional check is needed to make sure the first argument is an `Array`.\n**IMPORTANT**: An empty array will return `**`false`**` (see _Example 2_).",
            "examples": [
                {
                    "text": "```sqf\n_arr = [1,2,3,4,5,6,7,8,9,0];\n_arr isEqualTypeAll \"\"; // false\n_arr isEqualTypeAll 0;\t// true\n```"
                },
                {
                    "text": "```sqf\n[] isEqualTypeAll \"\";\t// false\n[\"\"] isEqualTypeAll \"\";\t// true\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "arr",
                            "description": "`Array` (`Anything` _Since Arma 3 v2.09.149634_)"
                        },
                        {
                            "name": "val",
                            "description": "`Anything`"
                        }
                    ],
                    "outline": "arr `isEqualTypeAll` val",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isEqualTypeAll"
        },
        "configuration": {
            "label": "isEqualTypeAll",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Compares type of given value to every type in the given array and if match is found, `true` is returned.",
            "examples": [
                {
                    "text": "```sqf\n_var = [1, 2, 3];\n_var isEqualTypeAny [0, \"\", objNull]; //false\n_var isEqualTypeAny [0, \"\", objNull, []]; //true\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "val",
                            "description": "`Anything`"
                        },
                        {
                            "name": "types",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "val `isEqualTypeAny` types",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isEqualTypeAny"
        },
        "configuration": {
            "label": "isEqualTypeAny",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Compares types of all elements of one array to types of all elements of another array. Since Arma 3 v2.09.149634 no additional check is needed to make sure the first argument is an `Array`.",
            "examples": [
                {
                    "text": "```sqf\n_arr = [1,true,\"three\"];\n_arr isEqualTypeArray [0,objNull,\"\"]; // false\n_arr isEqualTypeArray [0,false,\"\"]; // true\n```"
                },
                {
                    "text": "```sqf\n_arr = [1,2];\n_arr isEqualTypeArray [0]; // false\n_arr isEqualTypeArray [0,0]; // true\n_arr isEqualTypeArray [0,0,0]; // false\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "arr1",
                            "description": "`Array` (`Anything` _Since Arma 3 v2.09.149634_)"
                        },
                        {
                            "name": "arr2",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "arr1 `isEqualTypeArray` arr2",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isEqualTypeArray"
        },
        "configuration": {
            "label": "isEqualTypeArray",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Compares types of all elements of input array to types of all elements of template array. Similar to `isEqualTypeArray` however this command is designed for fast validation of functions params, so there are differences:\n* Input can be anything but will be expected to be an `Array`, otherwise `false` is returned\n* Input array can be longer but not shorter than template array, will return `false` if shorter\n* `nil` could be used in template type array as a wild card to allow any type match",
            "examples": [
                {
                    "text": "```sqf\n// These all return true\n[1,2,player,\"10\"] isEqualTypeParams [0,0,objNull,\"\"];\n[1,2,player,\"10\",true] isEqualTypeParams [0,0,nil,\"\"];\n[1,2,getPos player,\"10\",true] isEqualTypeParams [0,0,nil,\"\"];\n```"
                },
                {
                    "text": "```sqf\n// These all return false\n123 isEqualTypeParams [0,0,objNull,\"\"];\n[] isEqualTypeParams [0,0,objNull,\"\"];\n[1,2,player] isEqualTypeParams [0,0,objNull,\"\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "input",
                            "description": "`Anything` - could be value of any type, but only type `Array` will be validated"
                        },
                        {
                            "name": "template",
                            "description": "`Array` - array of expected types"
                        }
                    ],
                    "outline": "input `isEqualTypeParams`  template",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isEqualTypeParams"
        },
        "configuration": {
            "label": "isEqualTypeParams",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if file patching is enabled otherwise `false`",
            "examples": [
                {
                    "text": "```sqf\n_state = isFilePatchingEnabled;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`isFilePatchingEnabled`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isFilePatchingEnabled"
        },
        "configuration": {
            "label": "isFilePatchingEnabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks if `Code` or a variable was compiled final with `compileFinal`.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _myCode = compileFinal \"a = a + 1\";\nsystemChat format [\"isFinal \"\"_myCode\"\": %1\", isFinal \"_myCode\"];\t\t\t\t// true\nsystemChat format [\"isFinal _myCode: %1\", isFinal _myCode];\t\t\t\t\t\t// true\nsystemChat format [\"isFinal some code: %1\", isFinal { hint \"Hello there\" }];\t// false\n\nprivate _myArray1 = list _myTrigger;\nsystemChat format [\"isFinal _myArray1: %1\", isFinal _myArray1];\t\t\t\t\t// true\n\nprivate _myArray2 = [1, 2, 3];\nsystemChat format [\"isFinal _myArray2: %1\", isFinal _myArray2];\t\t\t\t\t// false\n\nprivate _myHashMap = compileFinal createHashMap;\nsystemChat format [\"isFinal _myHashMap: %1\", isFinal _myHashMap];\t\t\t\t// true\n\n```"
                },
                {
                    "text": "Avoid .rpt's overwrite warnings:\n\n```sqf\nif (!isFinal fnc_myCode) then { fnc_myCode = compileFinal str_myCode };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "variable",
                            "description": "`Code`, `String`, {{GVI|arma3|2.14"
                        }
                    ],
                    "outline": "`isFinal` variable",
                    "returns": "`Boolean` - `true` if final, `false` if not"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isFinal"
        },
        "configuration": {
            "label": "isFinal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns true if there is a linked and enabled flashlight on a given weapon.",
            "examples": [
                {
                    "text": "```sqf\nplayer isFlashlightOn (currentWeapon player);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "weapon",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `isFlashlightOn`  weapon",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isFlashlightOn"
        },
        "configuration": {
            "label": "isFlashlightOn",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks given position against given filter params. Filter includes checks for:\n* If there are any objects closer than given distance from given position (in 2D)\n* If the area around position is flat enough to match given gradient\n* If the given position is over water or land\n* If the given position is over shore line\nThe gradient seems to correlate with general hill steepness: 0.1 (10%) ~6°, 0.5 (50%) ~27°, 1.0 (100%) ~45°, etc.\n**NOTE**: See also `BIS_fnc_findSafePos`.",
            "examples": [
                {
                    "text": "Check if player position is over land:\n\n```sqf\n_overLand = !(position player isFlatEmpty [-1, -1, -1, -1, 0, false] isEqualTo []);\n```"
                },
                {
                    "text": "Check if player position is over shore line:\n\n```sqf\n_overShore = !(position player isFlatEmpty  [-1, -1, -1, -1, 0, true] isEqualTo []);\n```"
                },
                {
                    "text": "Check if player position is over water:\n\n```sqf\n_overWater = !(position player isFlatEmpty  [-1, -1, -1, -1, 2, false] isEqualTo []);\n```"
                },
                {
                    "text": "Check if no object is closer than 5m to player position:\n\n```sqf\n_isEmpty = !(position player isFlatEmpty  [5, -1, -1, -1, -1, false, player] isEqualTo []);\n```"
                },
                {
                    "text": "Check if area 10m around player position is relatively flat:\n\n```sqf\n_isFlat = !(position player isFlatEmpty  [-1, -1, 0.3, 10, -1] isEqualTo []);\n```"
                },
                {
                    "text": "Check if area 15m around player position is very flat and empty:\n\n```sqf\n_isFlatEmpty = !(position player isFlatEmpty  [15, -1, 0.1, 15, -1, false, player] isEqualTo []);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Array` format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL)"
                        },
                        {
                            "name": "minDistance",
                            "description": "`Number` - (Optional, default -1) minimum (2D) distance from other objects (range 0..50). -1 to ignore proximity check"
                        },
                        {
                            "name": "mode",
                            "description": "`Number` - (Optional, default -1) position check mode (**ALWAYS USE DEFAULT VALUE**)"
                        },
                        {
                            "name": "maxGradient",
                            "description": "`Number` - (Optional, default -1) maximum terrain steepness allowed. -1 to ignore"
                        },
                        {
                            "name": "maxGradientRadius",
                            "description": "`Number` - (Optional, default 1) how far to extend gradient check"
                        },
                        {
                            "name": "overLandOrWater",
                            "description": "`Number` - (Optional, default 0)\n* 0: position cannot be over water\n* 2: position cannot be over land\n* -1 to ignore"
                        },
                        {
                            "name": "shoreLine",
                            "description": "`Boolean` - (Optional, default `false`)\n* `true`: position is over shoreline (< ~25 m from water)\n* `false` to ignore"
                        },
                        {
                            "name": "ignoreObject",
                            "description": "`Object` - (Optional, default `objNull`) object to ignore in proximity checks. `objNull` to ignore"
                        }
                    ],
                    "outline": "position `isFlatEmpty` [minDistance, mode, maxGradient, maxGradientRadius, overLandOrWater, shoreLine, ignoreObject]",
                    "returns": "`Array` - empty array [] if check failed or [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) if succeded. Resulting position will be original [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) + `getTerrainHeightASL`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isFlatEmpty"
        },
        "configuration": {
            "label": "isFlatEmpty",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if player is forced to walk with `forceWalk`.",
            "examples": [
                {
                    "text": "```sqf\n_bool = isForcedWalk player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName ",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`isForcedWalk` unitName",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isForcedWalk"
        },
        "configuration": {
            "label": "isForcedWalk",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns true if the specified unit is subgroup leader.",
            "examples": [
                {
                    "text": "```sqf\n_isLeader = isFormationLeader player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit being checked."
                        }
                    ],
                    "outline": "`isFormationLeader` unit",
                    "returns": "`Boolean` - `true` if unit is subgroup leader."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isFormationLeader"
        },
        "configuration": {
            "label": "isFormationLeader",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the state of game focus changed by pressing {{Controls|ALT|TAB}} or similar action.",
            "examples": [
                {
                    "text": "```sqf\nif (!isGameFocused) then { endMission \"End\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`isGameFocused`",
                    "returns": "`Boolean` - `true` if game window is focused, `false` if not"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isGameFocused"
        },
        "configuration": {
            "label": "isGameFocused",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the state of game simulation. Simulation can get paused by pressing {{Controls|Alt|Tab}} or a system dialog opening (e.g. {{Controls|Esc}} menu).\nSimulation will not get paused if `**-noPause**` [startup parameter](https://community.bistudio.com/wiki/Arma%203%3A%20Startup%20Parameters) is used.\n**NOTE**: `onEachFrame` event and `**\"EachFrame\"**` event handler continue to execute when the simulation is paused, which could result in undesired backlog. Use `isGamePaused` to skip loop if needed.",
            "examples": [
                {
                    "text": "```sqf\n\nonEachFrame \n{\n\tif (isGamePaused) exitWith {};\n\t// ...do stuff\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`isGamePaused`",
                    "returns": "`Boolean` - returns `true` if game simulation is paused, `false` if not"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isGamePaused"
        },
        "configuration": {
            "label": "isGamePaused",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks if the given group marked for auto-deletion when empty. See `deleteGroupWhenEmpty`.\n{{Feature|informative|It might take up to a minute for the groups marked for auto-deletion when empty to get deleted when they become empty.}}\n**IMPORTANT**: This command is only a getter for the deleteWhenEmpty flag in `createGroup` command or `deleteGroupWhenEmpty` command. All it does is it shows what the flag was set to during group creation. [True](https://community.bistudio.com/wiki/true) does not mean the group will be deleted but that it was suggested to the engine that it should be deleted. It is up to the engine how it manages groups. [False](https://community.bistudio.com/wiki/false) does not mean that the group will not be deleted **at all**. It has no influence on the engine functionality whatsoever.",
            "examples": [
                {
                    "text": "```sqf\n_isMarked = isGroupDeletedWhenEmpty _group;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group`"
                        }
                    ],
                    "outline": "`isGroupDeletedWhenEmpty` group",
                    "returns": "`Boolean` - `true` the group is marked for auto-deletion when empty"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isGroupDeletedWhenEmpty"
        },
        "configuration": {
            "label": "isGroupDeletedWhenEmpty",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns whether a person is hidden (reached the hiding position).\n**IMPORTANT**:  Not to be confused with `isObjectHidden`, which is returning object visibility set with `hideObject`",
            "examples": [
                {
                    "text": "```sqf\n_bobIsHidden = isHidden bob;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "person",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`isHidden` person",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/isHidden"
        },
        "configuration": {
            "label": "isHidden",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks if unit or vehicle is queued for disposal after death.",
            "examples": [
                {
                    "text": "```sqf\nif (isInRemainsCollector unit1) then {hint \"unit1 is queued for disposal\"};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "remain",
                            "description": "`Object` - vehicle or unit"
                        }
                    ],
                    "outline": "`isInRemainsCollector` remain",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/isInRemainsCollector"
        },
        "configuration": {
            "label": "isInRemainsCollector",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the status of INSTRUCTOR FIGURE setting in UI (OPTIONS >> GAME >> GENERAL >> INSTRUCTOR FIGURE).",
            "examples": [
                {
                    "text": "```sqf\nhint str isInstructorFigureEnabled;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**isInstructorFigureEnabled**",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isInstructorFigureEnabled"
        },
        "configuration": {
            "label": "isInstructorFigureEnabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if there is a linked and enabled IR on the given weapon.",
            "examples": [
                {
                    "text": "```sqf\nplayer isIRLaserOn currentWeapon player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "weapon",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `isIRLaserOn` weapon",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isIRLaserOn"
        },
        "configuration": {
            "label": "isIRLaserOn",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks whether the given key is active in the current user profile.\n\nSee keys, keysLimit and doneKeys in the [[Description.ext#keys|description.ext]] file of the missions.",
            "examples": [
                {
                    "text": "```sqf\n_active = isKeyActive \"Mission04Key\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "keyName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`isKeyActive` keyName",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isKeyActive"
        },
        "configuration": {
            "label": "isKeyActive",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks whether the given object or type is (a subtype) of the given type.\n\nWhile {{Link|#Syntax 1}} and {{Link|#Syntax 2}} only support **CfgVehicles**, {{GVI|arma2|1.00",
            "examples": [
                {
                    "text": "```sqf\nvehicle player isKindOf \"Tank\";\n```"
                },
                {
                    "text": "```sqf\n\"BMP2\" isKindOf \"Tank\";\n```"
                },
                {
                    "text": "```sqf\ncurrentWeapon player isKindOf [\"Rifle\", configFile >> \"CfgWeapons\"];\n```"
                },
                {
                    "text": "```sqf\nprivate _isSoldier = player isKindOf \"CAManBase\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "typeName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "object `isKindOf` typeName",
                    "returns": "`Boolean`"
                },
                {
                    "parameters": [
                        {
                            "name": "class1",
                            "description": "`String`"
                        },
                        {
                            "name": "class2",
                            "description": "`String`"
                        }
                    ],
                    "outline": "class1 `isKindOf` class2",
                    "returns": "`Boolean`"
                },
                {
                    "parameters": [
                        {
                            "name": "class1",
                            "description": "`String`"
                        },
                        {
                            "name": "class2",
                            "description": "`String`"
                        },
                        {
                            "name": "targetConfig",
                            "description": "`Config`"
                        }
                    ],
                    "outline": "class1 `isKindOf` [class2, targetConfig]",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isKindOf"
        },
        "configuration": {
            "label": "isKindOf",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns true if the vehicle has its laser turned on. Not to be confused with `isIRLaserOn` which is for units. Main syntax is for primary gunner turret.",
            "examples": [
                {
                    "text": "```sqf\nif (isLaserOn _vehicle) then { hint \"target ready\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "`Object` - unit or vehicle"
                        }
                    ],
                    "outline": "`isLaserOn` entity",
                    "returns": "`Boolean` - `true` when laser is on, `false` otherwise"
                },
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - transport"
                        },
                        {
                            "name": "turret",
                            "description": "`Array` - turret path, [-1] for driver turret"
                        }
                    ],
                    "outline": "vehicle `isLaserOn` turret",
                    "returns": "`Boolean` - `true` when laser is on, `false` otherwise"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/isLaserOn"
        },
        "configuration": {
            "label": "isLaserOn",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if vehicle headlights are on otherwise `false`.",
            "examples": [
                {
                    "text": "```sqf\n_headlightsOn = isLightOn vehicle player;\n```"
                },
                {
                    "text": "```sqf\n_pilotLightOn = isLightOn heli;\n```"
                },
                {
                    "text": "```sqf\n_searchLightOn = isLightOn [heli, [0]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - vehicle with headlights"
                        }
                    ],
                    "outline": "`isLightOn` vehicle",
                    "returns": "`Boolean`"
                },
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - vehicle with search light on a turret"
                        },
                        {
                            "name": "turret",
                            "description": "`Array` - turret path"
                        }
                    ],
                    "outline": "`isLightOn` [vehicle, turret]",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/isLightOn"
        },
        "configuration": {
            "label": "isLightOn",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks whether given _stringName_ is `localize`d.",
            "examples": [
                {
                    "text": "```sqf\n\nif (isLocalized \"STR_USRACT_ADJUST\") then \n{\n\thint localize \"STR_USRACT_ADJUST\";\n} \nelse \n{\n\thint \"STR_USRACT_ADJUST\";\n\tdiag_log \"ToDo: STR_USRACT_ADJUST is not localized\";\n};\n\n```"
                },
                {
                    "text": "```sqf\nisLocalized \"$STR_USRACT_ADJUST\"; // Since Arma v2.04\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "stringName",
                            "description": "`String` - string which leads to localisation. Casing does not matter. Since Arma 3 v2.04 a string starting with `**\"$\"**` is supported as well"
                        }
                    ],
                    "outline": "`isLocalized`  stringName",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isLocalized"
        },
        "configuration": {
            "label": "isLocalized",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if manual fire is on. Manual fire could either be selected in vehicle action menu (if available) or with `action` \"ManualFire\" and \"ManualFireCancel\". Always returns `false` for a soldier.",
            "examples": [
                {
                    "text": "```sqf\n_bool = isManualFire vehicle player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicleName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`isManualFire` vehicleName",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/isManualFire"
        },
        "configuration": {
            "label": "isManualFire",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks whether the object is marked for weapons collection.",
            "examples": [
                {
                    "text": "```sqf\n_marked = isMarkedForCollection _truck;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`isMarkedForCollection`  object",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/isMarkedForCollection"
        },
        "configuration": {
            "label": "isMarkedForCollection",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "The `missionProfileNamespace` variables are loaded at the start of a mission, before 'init.sqf' is executed. If the file with saved variables for current mission exists in user profile and is loaded, the command returns `true`. It also will return `true` after the first execution of `saveMissionProfileNamespace` command, which also creates the file.",
            "examples": [
                {
                    "text": "```sqf\nprivate _isLoaded = isMissionProfileNamespaceLoaded;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`isMissionProfileNamespaceLoaded`",
                    "returns": "`Boolean` - `true` if mission profile variables file exists and is loaded."
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/isMissionProfileNamespaceLoaded"
        },
        "configuration": {
            "label": "isMissionProfileNamespaceLoaded",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return true if multiPlayer.",
            "examples": [
                {
                    "text": "```sqf\nif (isMultiplayer) then\n{\n\t// ...block\n}\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`isMultiplayer`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isMultiplayer"
        },
        "configuration": {
            "label": "isMultiplayer",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` when playing a game in **solo multiplayer** (for example Apex coop campaign PLAY SOLO option).",
            "examples": [
                {
                    "text": "```sqf\n_state = isMultiplayerSolo;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`isMultiplayerSolo`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isMultiplayerSolo"
        },
        "configuration": {
            "label": "isMultiplayerSolo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Tests whether a variable is `nil` or undefined from its [identifier](https://community.bistudio.com/wiki/Identifier), or whether the given expression evaluates to `nil` or `Nothing`.\n**Arma: Cold War Assault**: This command does not exist in Operation Flashpoint/Arma: Cold War Assault but can be emulated (see _Example 5_).",
            "examples": [
                {
                    "text": "```sqf\n\nif (isNil \"TAG_globalVariable\") then { TAG_globalVariable = 0 };\nif (isNil \"_localVariable\") then { hint \"_localVariable is nil\" };\n\n```"
                },
                {
                    "text": "```sqf\nisNil { player getVariable \"someVar\" };\n```"
                },
                {
                    "text": "```sqf\n\n_myArray = [0, 1];\nisNil { _myArray select 0 }; // returns false\nisNil { _myArray select 1 }; // returns false\nisNil { _myArray select 2 }; // returns true\nisNil { _myArray select 3 }; // throws a script error. only length+1 select is allowed\n\n```"
                },
                {
                    "text": "This trick forces executing something in [Unscheduled Environment](https://community.bistudio.com/wiki/Scheduler):\n\n```sqf\n\n0 spawn {\n\tsystemChat str canSuspend;\t\t// chat shows true\n\tisNil { hint str canSuspend };\t// hint shows false\n};\n\n```"
                },
                {
                    "text": "Operation Flashpoint `String` comparison workaround\n\n[SQS Syntax](https://community.bistudio.com/wiki/SQS%20Syntax):\n<sqs>\n_nil = format [\"%1\", _undefinedVariable]\n? (format [\"%1\", variableToTest] == _nil) : hint \"variableToTest is nil\"\n</sqs>\n\n[SQF Syntax](https://community.bistudio.com/wiki/SQF%20Syntax):\n\n```sqf\n\n_nil = format [\"%1\", _undefinedVariable];\nif (format [\"%1\", variableToTest] == _nil) then { hint \"variableToTest is nil\" };\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "variableName",
                            "description": "**`String`** - `missionNamespace`'s or local [variable](https://community.bistudio.com/wiki/Variables)'s [identifier](https://community.bistudio.com/wiki/Identifier) (e.g \"globalVariable\", \"_localVariable\")"
                        }
                    ],
                    "outline": "`isNil` variableName",
                    "returns": "`Boolean` - `true` if variable is `nil` or undefined"
                },
                {
                    "parameters": [
                        {
                            "name": "code",
                            "description": "`Code` - code to evaluate:\n* the code **will** be executed; <sqf inline>isNil { player setDamage 1 }; _will_ kill the player\n* the code will not be allowed to [suspend](https://community.bistudio.com/wiki/canSuspend) while expression is evaluated, even if the parent scope allows it (see _Example 4_)."
                        }
                    ],
                    "outline": "`isNil` code",
                    "returns": "`Boolean` - `true` if _code_ returns `Nothing`, `false` otherwise"
                },
                {
                    "parameters": [
                        {
                            "name": "namespace",
                            "description": "`Namespace`, `Object`, `Group` or `HashMap`"
                        },
                        {
                            "name": "variableName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "namespace `isNil` variableName",
                    "returns": "`Boolean` - `true` if variable is `nil` or undefined"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isNil"
        },
        "configuration": {
            "label": "isNil",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Compares two values by reference, returns `true` if not equal.",
            "examples": [
                {
                    "text": "```sqf\n\n_arr1 = [1,[2,[3]]];\n_arr2 = _arr1;\n_arr1 isEqualTo _arr2;\t\t// true\n_arr1 isNotEqualRef _arr2;\t// false\n\n_arr2 = +_arr1;\t\t\t\t// array copy\n_arr1 isEqualTo _arr2;\t\t// true\n_arr1 isNotEqualRef _arr2;\t// true\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "val1",
                            "description": "`Anything`"
                        },
                        {
                            "name": "val2",
                            "description": "`Anything`"
                        }
                    ],
                    "outline": "val1 `isNotEqualRef` val2",
                    "returns": "`Boolean` - `true` if not the same reference"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isNotEqualRef"
        },
        "configuration": {
            "label": "isNotEqualRef",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Performs strict comparison between var1 and var2 and returns `false` if equal, otherwise true.",
            "examples": [
                {
                    "text": "```sqf\nprivate _true = 0 isNotEqualTo 1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "val1",
                            "description": "`Anything`"
                        },
                        {
                            "name": "val2",
                            "description": "`Anything`"
                        }
                    ],
                    "outline": "val1 `isNotEqualTo` val2",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isNotEqualTo"
        },
        "configuration": {
            "label": "isNotEqualTo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks whether the tested item is null.\n\nWhich null type the item has to be equal to depends on the type of game entity tested:\n\n{{{!}} class=\"wikitable\" style=\"text-align: center\"\n! [Type](https://community.bistudio.com/wiki/%3ACategory%3AData%20Types)\n{{!}} `Object`\n{{!}} `Group`\n{{!}} `Control`\n{{!}} `Display`\n{{!}} `Location`\n{{!}} `Task`\n{{!}} [Script](https://community.bistudio.com/wiki/Script%20Handle)\n{{!}} `Config`\n{{!}} [Diary Record](https://community.bistudio.com/wiki/Diary%20Record)\n{{!}} [Team Member](https://community.bistudio.com/wiki/Team%20Member)\n{{!}}-\n! Null value\n{{!}} `objNull`\n{{!}} `grpNull`\n{{!}} `controlNull`\n{{!}} `displayNull`\n{{!}} `locationNull`\n{{!}} `taskNull`\n{{!}} `scriptNull`\n{{!}} `configNull`\n{{!}} `diaryRecordNull`\n{{!}} `teamMemberNull`\n{{!}}- style=\"font-size: .85em\"\n! Since\n{{!}} **(Operation Flashpoint)**\n{{!}} **(Operation Flashpoint)**\n{{!}} **(Armed Assault)**\n{{!}} **(Armed Assault)**\n{{!}} **(Arma 2)**\n{{!}} **(Arma 2)**\n{{!}} **(Arma 3)**\n{{!}} **(Arma 3)**\n{{!}} **(Arma 3)**\n{{!}} **(Arma 3)**\n{{!}}}\n\n{{Feature|important",
            "examples": [
                {
                    "text": "```sqf\n\nif (isNull obj) then\n{\n\thint \"obj variable is defined but obj is null\";\n};\n\n```"
                },
                {
                    "text": "[Diary Record](https://community.bistudio.com/wiki/Diary%20Record) support before **(Arma 3)**:\n\n```sqf\n\nprivate _nullRecord = objNull createDiaryRecord []; // wrong parameters = failure to create a record = null value\nprivate _createdRecord = player createDiaryRecord [\"Diary\", [\"title\", \"description\"]];\nif (_createdRecord isEqualTo _nullRecord) then { hint \"Failed\" };\n\n```\n\n\n[Team Member](https://community.bistudio.com/wiki/Team%20Member) support before **(Arma 3)**:\n\n```sqf\nprivate _isNull = _teamMember isEqualTo teamMemberNull;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "`Object`, `Control`, `Display`, `Group`, `Location`, `Task`, [Script Handle](https://community.bistudio.com/wiki/Script%20Handle), `Config` or [Diary Record](https://community.bistudio.com/wiki/Diary%20Record)"
                        }
                    ],
                    "outline": "`isNull` entity",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/isNull"
        },
        "configuration": {
            "label": "isNull",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check if config entry represents number.",
            "examples": [
                {
                    "text": "```sqf\n_ok = isNumber (configFile >> \"CfgVehicles\");\n```\n\n\nResult is false"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "config",
                            "description": "`Config`"
                        }
                    ],
                    "outline": "`isNumber` config",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isNumber"
        },
        "configuration": {
            "label": "isNumber",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks visibility of a given object on the local machine.",
            "examples": [
                {
                    "text": "```sqf\n_bobIsHidden = isObjectHidden bob;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - object to test"
                        }
                    ],
                    "outline": "`isObjectHidden` object",
                    "returns": "`Boolean` - `true` if hidden, `false` if visible"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/isObjectHidden"
        },
        "configuration": {
            "label": "isObjectHidden",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns true if RTD model is loaded.{{Feature|afm}}",
            "examples": [
                {
                    "text": "```sqf\n_heliRTD = isObjectRTD vehicle player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "helicopter",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`isObjectRTD` helicopter",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isObjectRTD"
        },
        "configuration": {
            "label": "isObjectRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks if given position is inside road segment. Same as `roadAt`, only return is boolean instead of road object.",
            "examples": [
                {
                    "text": "```sqf\n_objOnRoad = isOnRoad player;\n```"
                },
                {
                    "text": "```sqf\n_posOnRoad = isOnRoad ASLToAGL getPosASL player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Object` or `Array` in format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) (especially on bridges) or {{GVI|arma3|2.00"
                        }
                    ],
                    "outline": "`isOnRoad` position",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/isOnRoad"
        },
        "configuration": {
            "label": "isOnRoad",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns whether Picture-In-Picture video option (Render to Texture) is enabled or not.",
            "examples": [
                {
                    "text": "```sqf\nprivate _PiPState = isPiPEnabled;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`isPiPEnabled`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isPiPEnabled"
        },
        "configuration": {
            "label": "isPiPEnabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks if given person is a `player`. Returns `true` for headless clients as well.\n\n{{Feature|informative|Prior to Arma 3 v2.02, in some cases the identity of certain player units could fail to propagate to other clients and the server, which caused `isPlayer` and `getPlayerUID` to incorrectly return `**`false`**` and `**\"\"**` respectively, where the affected units were `not` `local`. See {{Link|https://github.com/michail-nikolaev/task-force-arma-3-radio/issues/1096|this GitHub bug report}} for more info. Remain vigilant toward potential false negatives.}}\n\n**IMPORTANT**: When used on vehicles, this command will return `true` if `effectiveCommander` of the vehicle is player. Just because it returns `true` does not automatically mean we have a `player` unit. Unlike main syntax, alternative syntax always returns `false` when used on vehicles, even if they're controlled by a player.",
            "examples": [
                {
                    "text": "```sqf\n\nif (isPlayer _Soldier1) then\n{\n\t_soldier1 setDamage 1;\n};\n\n```"
                },
                {
                    "text": "```sqf\n_playerCount = { isPlayer _x } count playableUnits;\n```"
                },
                {
                    "text": "```sqf\nprivate _wasPlayer = isPlayer [_deadBody]; // returns true if _deadBody's identity still exists and was controlled by a player\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`isPlayer` unit",
                    "returns": "`Boolean`"
                },
                {
                    "parameters": [
                        {
                            "name": "person",
                            "description": "`Object` - dead or alive unit"
                        }
                    ],
                    "outline": "`isPlayer` [person]",
                    "returns": "`Boolean` - `true` if is/was player **and** the identity still exists on the (dead) body"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/isPlayer"
        },
        "configuration": {
            "label": "isPlayer",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns true if the mission editor is operating in real time mode. \n**NOTE**: Some Old Editor Command",
            "examples": [
                {
                    "text": "```sqf\n_isRealTime = isRealTime _map;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`isRealTime` map",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isRealTime"
        },
        "configuration": {
            "label": "isRealTime",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if the given player is remote-controlling a unit.\n**IMPORTANT**: See also [Remote Control Tutorial](https://community.bistudio.com/wiki/Remote%20Control%20Tutorial).",
            "examples": [
                {
                    "text": "```sqf\n\nif (isRemoteControlling player) then\n{\n\thint format [\"You are controlling %1\", remoteControlled player];\n}\nelse\n{\n\thint \"Why not remote-control something?\";\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "person",
                            "description": "`Object` - a player"
                        }
                    ],
                    "outline": "`isRemoteControlling` person",
                    "returns": "`Boolean` - `true` if the given player is remote controlling a unit"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/isRemoteControlling"
        },
        "configuration": {
            "label": "isRemoteControlling",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if the code context is being remote executed by `remoteExec` or `remoteExecCall`. In SP always returns `false`. See also `isRemoteExecutedJIP`:\n:{{{!}} class=\"wikitable align-center align-left-col-1 align-center-row-1\"\n! rowspan=\"2\" {{!}} command\n! rowspan=\"2\" {{!}} Single Player\n! colspan=\"2\" {{!}} Multiplayer\n{{!}}-\n! Direct remoteExec\n! JIP remoteExec\n{{!}}-\n{{!}} `isRemoteExecuted`\n{{!}} {{Icon|unchecked}}\n{{!}} {{Icon|checked}}\n{{!}} {{Icon|checked}}\n{{!}}-\n{{!}} `isRemoteExecutedJIP`\n{{!}} {{Icon|unchecked}}\n{{!}} {{Icon|unchecked}}\n{{!}} {{Icon|checked}}\n{{!}}}",
            "examples": [
                {
                    "text": "```sqf\nprivate _remoteExecuted = isRemoteExecuted;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`isRemoteExecuted`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isRemoteExecuted"
        },
        "configuration": {
            "label": "isRemoteExecuted",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if the code context is being remote executed from the JIP queue by `remoteExec` or `remoteExecCall` (when JIP param was set). It is a subset of `isRemoteExecuted`:\n\n:{{{!}} class=\"wikitable align-center align-left-col-1 align-center-row-1\"\n! rowspan=\"2\" {{!}} command\n! rowspan=\"2\" {{!}} Single Player\n! colspan=\"2\" {{!}} Multiplayer\n{{!}}-\n! Direct remoteExec\n! JIP remoteExec\n{{!}}-\n{{!}} `isRemoteExecuted`\n{{!}} {{Icon|unchecked}}\n{{!}} {{Icon|checked}}\n{{!}} {{Icon|checked}}\n{{!}}-\n{{!}} `isRemoteExecutedJIP`\n{{!}} {{Icon|unchecked}}\n{{!}} {{Icon|unchecked}}\n{{!}} {{Icon|checked}}\n{{!}}}",
            "examples": [
                {
                    "text": "```sqf\n\nif (isRemoteExecutedJIP) then\n{\n\twaitUntil { sleep 0.1; not isNull player };\n\thint \"Welcome... the battlefield did not wait for you!\";\n}\nelse\n{\n\thint \"You are present and that's good!\";\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`isRemoteExecutedJIP`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isRemoteExecutedJIP"
        },
        "configuration": {
            "label": "isRemoteExecutedJIP",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the status of autosave request, made when `saveGame` command is executed. When request is made, the command immediately returns `true`. The engine then handles the saving and when it is done, the command returns `false`.",
            "examples": [
                {
                    "text": "```sqf\n\n[] spawn\n{\n\tsaveGame;\n\twaitUntil { !isSaving };\n\tsystemChat \"Game Saving Is Done!\";\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`isSaving`",
                    "returns": "`Boolean` - `true` autosave request is made, `false` autosave request is processed"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isSaving"
        },
        "configuration": {
            "label": "isSaving",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns if given unit is confirmed target for given side.",
            "examples": [
                {
                    "text": "```sqf\nprivate _enemyConfirmed = _possibleEnemy isSensorTargetConfirmed opfor;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "side",
                            "description": "`Side`"
                        }
                    ],
                    "outline": "unit `isSensorTargetConfirmed` side",
                    "returns": "`Boolean` - `true` if confirmed target, otherwise `false`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isSensorTargetConfirmed"
        },
        "configuration": {
            "label": "isSensorTargetConfirmed",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if the machine executing the command is the server in a multiplayer game or is running single player. It will return `true` for both dedicated and player-hosted server. See also [[Multiplayer Scripting#Different machines and how to target them|Multiplayer Scripting/machines]].",
            "examples": [
                {
                    "text": "```sqf\nif (!isServer) exitWith {};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`isServer`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isServer"
        },
        "configuration": {
            "label": "isServer",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns true if the editor is set to draw 3D icons.\n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`isShowing3DIcons` map",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isShowing3DIcons"
        },
        "configuration": {
            "label": "isShowing3DIcons",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if given object is [simple object](https://community.bistudio.com/wiki/createSimpleObject)",
            "examples": [
                {
                    "text": "```sqf\n_isSimple = isSimpleObject _obj1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`isSimpleObject` object",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isSimpleObject"
        },
        "configuration": {
            "label": "isSimpleObject",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns true if player is allowed to sprint",
            "examples": [
                {
                    "text": "```sqf\nif (not isSprintAllowed player) then { hint \"no running in the corridors!\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`isSprintAllowed` unit",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/isSprintAllowed"
        },
        "configuration": {
            "label": "isSprintAllowed",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check if stamina depletion is enabled.",
            "examples": [
                {
                    "text": "```sqf\nif (isStaminaEnabled player) then { hint \"You can get exhausted.\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`isStaminaEnabled`  unit",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/isStaminaEnabled"
        },
        "configuration": {
            "label": "isStaminaEnabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns true if the current mission is a Steam Workshop mission.",
            "examples": [
                {
                    "text": "```sqf\nif (isSteamMission) then\n{\n\thint \"Thank you for subscribing to my mission on Steam!\";\n}\nelse\n{\n\thint \"Thank you for downloading my mission off the Internet!\";\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**isSteamMission**",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isSteamMission"
        },
        "configuration": {
            "label": "isSteamMission",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if Steam overlay is enabled, otherwise `false`.",
            "examples": [
                {
                    "text": "```sqf\n_overlayEnabled = isSteamOverlayEnabled;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`isSteamOverlayEnabled`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isSteamOverlayEnabled"
        },
        "configuration": {
            "label": "isSteamOverlayEnabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the status of STREAM FRIENDLY UI setting in UI (OPTIONS >> GAME >> GENERAL >> STREAM FRIENDLY UI).",
            "examples": [
                {
                    "text": "```sqf\nhint str isStreamFriendlyUIEnabled;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**isStreamFriendlyUIEnabled**",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isStreamFriendlyUIEnabled"
        },
        "configuration": {
            "label": "isStreamFriendlyUIEnabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if stress damage is enabled in the game settings. A getter for `enableStressDamage`.\n{{Feature|afm}}",
            "examples": [
                {
                    "text": "```sqf\n_settingEnabled = isStressDamageEnabled;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`isStressDamageEnabled`",
                    "returns": "`Boolean` Returns true if enabled, otherwise false"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/isStressDamageEnabled"
        },
        "configuration": {
            "label": "isStressDamageEnabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks if config entry represents a text value.",
            "examples": [
                {
                    "text": "```sqf\n_isText = isText (configFile >> \"CfgVehicles\") // false\n```"
                },
                {
                    "text": "```sqf\n_isText = isText (configFile >> \"CfgVehicles\" >> \"B_MRAP_01_F\" >> \"displayName\") // true\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "config",
                            "description": "`Config`"
                        }
                    ],
                    "outline": "`isText`  config",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isText"
        },
        "configuration": {
            "label": "isText",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if the given magazine is a throwable.",
            "examples": [
                {
                    "text": "```sqf\nisThrowable \"HandGrenade\"; // true\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "magazine",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`isThrowable` magazine",
                    "returns": "`Boolean` - `true` if throwable"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isThrowable"
        },
        "configuration": {
            "label": "isThrowable",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns true if object is touching the ground.",
            "examples": [
                {
                    "text": "```sqf\nif (isTouchingGround player) then { hint \"Terraferma!\" };\n```"
                },
                {
                    "text": "A full \"is safely parked\" method for air, ground and water vehicles:\n\n```sqf\n\n// get if a vehicle is properly parked - covers e.g helicopter landed on a building, boat (beached or not) and underwater or not submarine\n// return false on null, disabled or destroyed vehicle\nprivate _isSafelyParked = {\n\tparams [\n\t\t[\"_vehicle\", objNull, [objNull]],\t\t\t\t// 0: OBJECT - vehicle - a null object returns false\n\t\t[\"_altitudeTolerance\", 0.1, [0]],\t\t\t\t// 1: NUMBER - altitude tolerance - in metre\n\t\t[\"_velocityTolerance\", 0.01, [0]]\t\t\t\t// 2: NUMBER - velocity tolerance - in km/h\n\t];\n\n\tif (not canMove _vehicle) exitWith { false };\t\t// returns false for null as well\n\n\tif (_vehicle isKindOf \"Ship\") then\n\t{\n\t\t// surfaceIsWater getPosASL _vehicle\t\t\t\t\t\t// a beached boat is fine\n\t\tvelocity _vehicle params [\"_velX\", \"_velY\"];\n\t\tsqrt (_velX * _velX + _velY * _velY) < _velocityTolerance\t// only 2D speed matters (think waves)\n\t\t&& {\n\t\t\tgetPosASLW _vehicle < _altitudeTolerance\t\t\t\t// underwater submarines are OK\n\t\t\t|| { getPos _vehicle select 2 < _altitudeTolerance }\t// beached boat\n\t\t};\n\t}\n\telse\n\t{\n\t\t// over -a- ground and not over ocean\n\t\t(isTouchingGround _vehicle || {\n\t\t\tgetPosASLW _vehicle select 2 >= _altitudeTolerance\t\t// not in water\n\t\t\t&& { getPos _vehicle select 2 < _altitudeTolerance }\n\t\t})\n\t\t&& { vectorMagnitude velocity _vehicle * 3.6 < _velocityTolerance }\n\t}\n};\n\nobjectParent player call _isSafelyParked;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`isTouchingGround` object",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/isTouchingGround"
        },
        "configuration": {
            "label": "isTouchingGround",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if given unit is turned out, otherwise `false`. The output changes to `true` after unit finished turning out, however will change to `false` almost immediately after unit is ordered to turn in.",
            "examples": [
                {
                    "text": "```sqf\n_commanderOut = isTurnedOut (tank turretUnit [0,0]);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit on turn(in/out) enabled turret"
                        }
                    ],
                    "outline": "`isTurnedOut` unit",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isTurnedOut"
        },
        "configuration": {
            "label": "isTurnedOut",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the status of TUTORIAL HINTS setting in UI (OPTIONS >> GAME >> GENERAL >> TUTORIAL HINTS).",
            "examples": [
                {
                    "text": "```sqf\nhint str isTutHintsEnabled;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**isTutHintsEnabled**",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isTutHintsEnabled"
        },
        "configuration": {
            "label": "isTutHintsEnabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns true if UAV is connectable by AV terminal(s).",
            "examples": [
                {
                    "text": "```sqf\nprivate _canConnect = myUnit isUAVConnectable [myUav, true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "uav",
                            "description": "`Object` or `Array`"
                        },
                        {
                            "name": "checkAllItems",
                            "description": "`Boolean` - `true` to check all terminals in unit's inventory, `false` to only check assigned terminal."
                        }
                    ],
                    "outline": "object `isUAVConnectable` [uav, checkAllItems]",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isUAVConnectable"
        },
        "configuration": {
            "label": "isUAVConnectable",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns true if UAV is connected to some terminal. Termnal onnection is handled `local`ly, therefore the result of this command will be returned only for the client on which this command is executed.",
            "examples": [
                {
                    "text": "```sqf\n_isConnected = isUAVConnected cursorTarget;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "uav",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`isUAVConnected` uav",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/isUAVConnected"
        },
        "configuration": {
            "label": "isUAVConnected",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if the script originated from some UI control event, for example from \"onButtonDown\" EH. Exists within parent scope and immediate child scopes.",
            "examples": [
                {
                    "text": "```sqf\nif (isUIContext) then { hint \"UI control event\" };\n```"
                },
                {
                    "text": "```sqf\n_button ctrlSetEventHandler [\"ButtonDown\", \"call { diag_log isUIContext }\"]; // outputs true\n```"
                },
                {
                    "text": "```sqf\n_button ctrlSetEventHandler [\"ButtonDown\", \"0 spawn { diag_log isUIContext }\"]; // outputs false\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`isUIContext`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isUIContext"
        },
        "configuration": {
            "label": "isUIContext",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check whether given uniform can be dressed by target soldier.",
            "examples": [
                {
                    "text": "```sqf\n_canUse = _unit isUniformAllowed \"U_B_CombatUniform_mcam\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "type",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `isUniformAllowed` type",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/isUniformAllowed"
        },
        "configuration": {
            "label": "isUniformAllowed",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns whether the [AI steering component](https://community.bistudio.com/wiki/useAISteeringComponent) setting is enabled globally.",
            "examples": [
                {
                    "text": "```sqf\n\nif (isUsingAISteeringComponent) then\n{\n\tuseAISteeringComponent false;\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`isUsingAISteeringComponent`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isUsingAISteeringComponent"
        },
        "configuration": {
            "label": "isUsingAISteeringComponent",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Despite a misleading name, returns the vehicle that is transporting given vehicle in cargo. If the given vehicle is not in vehicle cargo, `objNull` is returned.",
            "examples": [
                {
                    "text": "Blackfish with given variable name blackfish, with a vehicle inside called quad\n\n```sqf\n_transportingVehicle = isVehicleCargo quad; //returns blackfish\n```"
                },
                {
                    "text": "Vehicle called quad that is not being transported as cargo\n\n```sqf\n_transportingVehicle = isVehicleCargo quad; //returns objNull\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "cargo",
                            "description": "`Object` - vehicle in cargo"
                        }
                    ],
                    "outline": "`isVehicleCargo` cargo",
                    "returns": "`Object` - transporting vehicle"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isVehicleCargo"
        },
        "configuration": {
            "label": "isVehicleCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns true if vehicle has active sensors on.",
            "examples": [
                {
                    "text": "```sqf\nisVehicleRadarOn vehicle player; // returns true if radar is turned on\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - vehicle on which check is performed"
                        }
                    ],
                    "outline": "`isVehicleRadarOn` vehicle",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isVehicleRadarOn"
        },
        "configuration": {
            "label": "isVehicleRadarOn",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns class name (to identify list based on component name) and info if given sensor is enabled.",
            "examples": [
                {
                    "text": "```sqf\nvehicle player isVehicleSensorEnabled \"PassiveRadarSensorComponent\"; // [<nowiki/>[\"PassiveRadarSensorComponent\", true]]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "componentName ",
                            "description": "`String` - the component's name (can either be it is \"real name\" or it is className)"
                        }
                    ],
                    "outline": "vehicle `isVehicleSensorEnabled` componentName",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/isVehicleSensorEnabled"
        },
        "configuration": {
            "label": "isVehicleSensorEnabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if walk is **toggled** (default {{Controls|W|S}} in Arma 3).\n**NOTE**: This command can still return true when the unit is sprinting or stopped; it only returns the **toggle** value of walking, not if the unit is walking right now.",
            "examples": [
                {
                    "text": "```sqf\n_bool = isWalking player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`isWalking` unitName",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/isWalking"
        },
        "configuration": {
            "label": "isWalking",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns true if weapon is currently deployed.",
            "examples": [
                {
                    "text": "```sqf\n_dep = isWeaponDeployed player;\n```"
                },
                {
                    "text": "```sqf\n_depOnObj = isWeaponDeployed [player, false];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`isWeaponDeployed` unit",
                    "returns": "`Boolean`"
                },
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "onGround",
                            "description": "`Boolean` - (Optional) `true` to check if deployed on ground, `false` to check if deployed on object. Omitted - same as main syntax."
                        }
                    ],
                    "outline": "`isWeaponDeployed` [unit, onGround]",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/isWeaponDeployed"
        },
        "configuration": {
            "label": "isWeaponDeployed",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns true if weapon is currently rested.",
            "examples": [
                {
                    "text": "```sqf\n_rest = isWeaponRested player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`isWeaponRested` unit",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/isWeaponRested"
        },
        "configuration": {
            "label": "isWeaponRested",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get array with items from ammo box (or any general weapon holder container).",
            "examples": [
                {
                    "text": "```sqf\nhint str itemCargo vestContainer player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - vehicle or ammo box"
                        }
                    ],
                    "outline": "`itemCargo` object",
                    "returns": "`Array` - format: [\"ItemType1\",\"ItemType2\",\"ItemType3\"...]"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/itemCargo"
        },
        "configuration": {
            "label": "itemCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array of names of all unit's stored items, including `weapons` but excluding `magazines` (see `itemsWithMagazines`) and `assignedItems`.",
            "examples": [
                {
                    "text": "```sqf\n_itemsPlayer = items player;\n```"
                },
                {
                    "text": "```sqf\nplayer sideChat format [\"%1\", items player];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`items` unit",
                    "returns": "`Array`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/items"
        },
        "configuration": {
            "label": "items",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns combined array including all unit's stored `items` and all unit's stored `magazines` and all unit's **stored** `weapons`. Loaded magazines such as `currentMagazine`, `primaryWeaponMagazine`, `secondaryWeaponMagazine`, `handgunMagazine`, `binocularMagazine` as well as `assignedItems` are excluded.",
            "examples": [
                {
                    "text": "```sqf\nprivate _res1 = itemsWithMagazines player;\n// ... is essentially the same as ...\nprivate _res2 = items player + magazines player;\n```\n\nExample result:\n\n```sqf\n[\n\t\"FirstAidKit\",\t\t\t//item\n\t\"30Rnd_65x39_caseless_mag\",\t//magazine\n\t\"16Rnd_9x21_Mag\",\t\t//magazine\n\t\"Chemlight_green\",\t\t//magazine\n\t\"HandGrenade\",\t\t\t//magazine\n\t\"ToolKit\",\t\t\t\t//item\n\t\"MineDetector\"\t\t\t//item\n]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`itemsWithMagazines` unit",
                    "returns": "`Array`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/itemsWithMagazines"
        },
        "configuration": {
            "label": "itemsWithMagazines",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "{{{!}} class{{=}}\"wikitable\" style{{=}}\"float: right; font-size: 0.9em; margin: 0 0 0.5em 1.5em\"\n! colspan{{=}}\"2\" {{!}} Maximum number of\nunits per group\n{{!}}-\n{{!}} Operation Flashpoint {{!}}{{!}} 12\n{{!}}-\n{{!}} Later titles {{!}}{{!}} 10000+\n{{!}}}\nJoins units into a given `Group`.\n\nTo make a unit leave its current group, join it into `grpNull` (e.g. <sqf inline>[MyUnit] join grpNull) - but beware: A new group is created for the leaving unit; this could result in the number of groups growing out of control.",
            "examples": [
                {
                    "text": "```sqf\n[_unitOne, _unitTwo] join player;\n```"
                },
                {
                    "text": "```sqf\n[_unitOne, _unitTwo] join (group player);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitArray",
                            "description": "`Array` - units to join group"
                        },
                        {
                            "name": "group",
                            "description": "`Group` or `Object`"
                        }
                    ],
                    "outline": "unitArray `join` group",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/join"
        },
        "configuration": {
            "label": "join",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Joins the unit to the given group, if position id is available, this one is used.",
            "examples": [
                {
                    "text": "```sqf\nplayer joinAs [_group, 4];\n```"
                },
                {
                    "text": "To get the position id:\n\n```sqf\n\ngetUnitPositionId = {\n\tprivate [\"_vvn\", \"_str\"];\n\t_vvn = vehicleVarName _this;\n\t_this setVehicleVarName \"\";\n\t_str = str _this;\n\t_this setVehicleVarName _vvn;\n\tparseNumber (_str select [(_str find \":\") + 1])\n};\nplayer joinAs [createGroup west, 5];\n_id = player call getUnitPositionId;\nhint str _id; // 5\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "group",
                            "description": "`Group`"
                        },
                        {
                            "name": "id",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "unit `joinAs` [group, id]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/joinAs"
        },
        "configuration": {
            "label": "joinAs",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Joins the unit to the given group, if position id is available, this one is used. Avoid any radio communication related to joining.",
            "examples": [
                {
                    "text": "```sqf\nplayer joinAsSilent [_group, 4];\n```"
                },
                {
                    "text": "To get the position id:\n\n```sqf\n\ngetUnitPositionId = {\n\tprivate [\"_vvn\", \"_str\"];\n\t_vvn = vehicleVarName _this;\n\t_this setVehicleVarName \"\";\n\t_str = str _this;\n\t_this setVehicleVarName _vvn;\n\tparseNumber (_str select [(_str find \":\") + 1])\n};\nplayer joinAsSilent [createGroup west, 5];\n_id = player call getUnitPositionId;\nhint str _id; // 5\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "group",
                            "description": "`Group`"
                        },
                        {
                            "name": "id",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "unit `joinAsSilent` [group, id]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/joinAsSilent"
        },
        "configuration": {
            "label": "joinAsSilent",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Join all units in the array to given group silently (without radio message). To have a group member leave a group, join him with the `grpNull` group (e.g. `**[guy1] `joinSilent` `grpNull`**`), but **beware**, as brand new group is created for the leaving unit and this could result in the number of groups in a mission growing out of control.",
            "examples": [
                {
                    "text": "```sqf\n[_unitOne, _unitTwo] joinSilent (group player);\n```"
                },
                {
                    "text": "```sqf\n[_unitOne, _unitTwo] joinSilent player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitArray",
                            "description": "`Array` - units to join group"
                        },
                        {
                            "name": "group",
                            "description": "`Object` or `Group`"
                        }
                    ],
                    "outline": "unitArray `joinSilent` group",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/joinSilent"
        },
        "configuration": {
            "label": "joinSilent",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Joins _array_ into `String` with provided _separator_. Array can be of mixed types, all elements will be converted to `String` prior to joining, but the fastest operation is on the array of `String`s.",
            "examples": [
                {
                    "text": "```sqf\n\n_str = \"- This, is a sample string.\" splitString \"-,. \"; // [\"This\",\"is\",\"a\",\"sample\",\"string\"]\n_str joinString \" \"; // \"This is a sample string\"\n\n```"
                },
                {
                    "text": "```sqf\n[\"This\",\"is\",\"sparta\"] joinString \" ~ \"; // \"This ~ is ~ sparta\"\n```"
                },
                {
                    "text": "```sqf\n[\"1\",2,text \"3\"] joinString \"\"; // \"123\"\n```"
                },
                {
                    "text": "```sqf\n\"Japa is the best!\" splitString \"\" joinString \" \"; // \"J a p a   i s   t h e   b e s t !\"\n```"
                },
                {
                    "text": "Remove all \\r\\n from file:\n\n```sqf\nloadFile \"somefile.txt\" splitString toString [13,10] joinString \" \"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array` - array of `Anything`"
                        },
                        {
                            "name": "separator",
                            "description": "`String` - separator used to join array elements."
                        }
                    ],
                    "outline": "array `joinString` separator",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/joinString"
        },
        "configuration": {
            "label": "joinString",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Register knowledge base database to given person. See `Conversations` for more details.\n**IMPORTANT**: This command is no longer available in Arma 2 and Arma 3.",
            "examples": [
                {
                    "text": "```sqf\n_hasBeenAdded = _unit kbAddDatabase \"chat.txt\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "person",
                            "description": "`Object`"
                        },
                        {
                            "name": "fileName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "person `kbAddDatabase` fileName",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/kbAddDatabase"
        },
        "configuration": {
            "label": "kbAddDatabase",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Register target list knowledge base database to given person. See `Conversations` for more details.\n**IMPORTANT**: This command is no longer available in Arma 2 and Arma 3.",
            "examples": [
                {
                    "text": "```sqf\n_hasBeenAdded = _unit kbAddDatabaseTargets \"chat.txt\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "person",
                            "description": "`Object`"
                        },
                        {
                            "name": "fileName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "person `kbAddDatabaseTargets` fileName",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/kbAddDatabaseTargets"
        },
        "configuration": {
            "label": "kbAddDatabaseTargets",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Register conversation topic to given person. See `Conversations` for more details.\n**NOTE**: Only the speaker(s) need to have the topic added.",
            "examples": [
                {
                    "text": "```sqf\nplayer kbAddTopic [\"myTest\", \"myTest.bikb\", \"myTest.fsm\", compile preprocessFileLineNumbers \"myTest.sqf\"];\n```"
                },
                {
                    "text": "```sqf\nplayer kbAddTopic [\"itsGettingWarm\", \"weatherTalk.bikb\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "person",
                            "description": "`Object`"
                        },
                        {
                            "name": "topicName",
                            "description": "`String` - the topic id for further reference"
                        },
                        {
                            "name": "conversationFile",
                            "description": "`String` - .bikb file path"
                        },
                        {
                            "name": "fsmFile",
                            "description": "`String` - (Optional) .fsm file path. Receives the following parameters:\n* **_sentenceId:** the sentence as defined in the .bikb file\n* **_topic:** TopicName registered via kbAddTopic\n* **_this:** the person that was talked to (receiver)\n* **_from:** the person that talked to the receiver and triggered the script"
                        },
                        {
                            "name": "eventHandler",
                            "description": "`Code` or `String` - (Optional) code to execute - given String will be `compile`d. This is **not** an sqf file path.\n\nParameters: identical to _fsmFile_ - see above."
                        }
                    ],
                    "outline": "person `kbAddTopic` [topicName, conversationFile, fsmFile, eventHandler]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/kbAddTopic"
        },
        "configuration": {
            "label": "kbAddTopic",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check if conversation topic was registered to given person. See `Conversations` for more details.",
            "examples": [
                {
                    "text": "```sqf\n_obiHasTopic = player kbHasTopic \"helloThereGeneralK\";\n```"
                },
                {
                    "text": "```sqf\nif (player kbHasTopic \"dontShoot\") then { player kbRemoveTopic \"dontShoot\"; };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "person",
                            "description": "`Object`"
                        },
                        {
                            "name": "topicName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "person `kbHasTopic` topicName",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/kbHasTopic"
        },
        "configuration": {
            "label": "kbHasTopic",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Pass a non-verbal communication to the receiver. This command does **as if** the sentence was said and triggers the reaction scripts (AI FSM or player's conversation EH). See `Conversations` for more details.",
            "examples": [
                {
                    "text": "```sqf\n\n// will trigger AS IF unit1 said the sentence (via kbTell)\n// unit2's FSM will react accordingly.\nunit1 kbReact [unit2, \"topicName\", \"speech1\"];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "person",
                            "description": "`Object`"
                        },
                        {
                            "name": "receiver",
                            "description": "`Object`"
                        },
                        {
                            "name": "topicName",
                            "description": "`String`"
                        },
                        {
                            "name": "sentenceID",
                            "description": "`String`"
                        },
                        {
                            "name": "argumentArrayN",
                            "description": "`Array` - (Optional) in format [argumentName, argumentValue, argumentText, argumentSpeech]:\n* argumentName: `String`\n* argumentValue: `Code`\n* argumentText: `String`\n* argumentSpeech: `Array` of `String`s - each string is an already defined word in config."
                        }
                    ],
                    "outline": "person `kbReact` [receiver, topicName, sentenceID, argumentArray1, argumentArray2, ...]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/kbReact"
        },
        "configuration": {
            "label": "kbReact",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Unregister conversation topic from given person. See `Conversations` for more details.",
            "examples": [
                {
                    "text": "```sqf\n_unit1 kbRemoveTopic \"howsTheWeather\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "person",
                            "description": "`Object`"
                        },
                        {
                            "name": "topicName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "person `kbRemoveTopic` topicName",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/kbRemoveTopic"
        },
        "configuration": {
            "label": "kbRemoveTopic",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Make the person tell to the receiver the sentence. See `Conversations` for more details.",
            "examples": [
                {
                    "text": "```sqf\nplayer kbTell [BIS_HQ, \"myTopic\", \"playerSentence1\"];\n```"
                },
                {
                    "text": "```sqf\nplayer kbTell [\n\tBIS_HQ,\t\t\t\t\t\t\t\t\t\t// to\n\t\"Airstrike\",\t\t\t\t\t\t\t\t// topic\n\t\"AirstrikeRequest\",\t\t\t\t\t\t\t// sentence\n\t[\"Team\", {}, \"Anvil\", [\"Anvil\"]],\t\t\t// argument 1\n\t[\"Location\", {}, \"Strelka\", [\"Strelka\"]],\t// argument 2\n\ttrue];\t\t\t\t\t\t\t\t\t\t// use radio\n```\n\nin given .bikb:\n```cpp\nclass AirstrikeRequest \n{\n\ttext = \"%team requesting close air support at grid %location \";\n\tspeech[] = { %Team, RequestingCloseAirSupportAtGrid, %Location };\n\tclass Arguments \n\t{\n\t\tclass Team\t\t{ type = \"simple\"; };\n\t\tclass Location\t{ type = \"simple\"; };\n\t};\n};\n```"
                },
                {
                    "text": "```sqf\nplayer kbTell [\n\tBIS_HQ,\t\t\t\t\t\t\t\t\t\t// to\n\t\"Airstrike\",\t\t\t\t\t\t\t\t// topic\n\t\"AirstrikeRequest\",\t\t\t\t\t\t\t// sentence\n\t[\"argumentName\", argumentValue],\t\t\t// argument 1\n\ttrue];\t\t\t\t\t\t\t\t\t\t// use radio\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "person",
                            "description": "`Object`"
                        },
                        {
                            "name": "receiver",
                            "description": "`Object`"
                        },
                        {
                            "name": "topicName",
                            "description": "`String`"
                        },
                        {
                            "name": "sentenceClass",
                            "description": "`String`"
                        },
                        {
                            "name": "argumentArrayN",
                            "description": "`Array` - (Optional) format [argumentName, argumentValue, argumentText, argumentSpeech]:\n* argumentName: `String`\n* argumentValue: `Code`\n* argumentText: `String`\n* argumentSpeech: `Array` of `String`s - each string is an already defined word in config."
                        },
                        {
                            "name": "forceRadio",
                            "description": "`Boolean`, `Number` or `String` (_last value of the array_) - (Optional)\n* `Boolean` true/false to force use of radio\n* `Number` 1-10 to force use of custom radio channel\n* `String` name of radio channel to use, from: 'GLOBAL', 'SIDE', 'GROUP', 'VEHICLE', 'DIRECT', 'COMMAND'"
                        }
                    ],
                    "outline": "person `kbTell` [receiver, topicName, sentenceClass, argumentArray1, argumentArray2, ..., forceRadio]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/kbTell"
        },
        "configuration": {
            "label": "kbTell",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check if given item was said by person to someone. See `Conversations` for more details.",
            "examples": [
                {
                    "text": "```sqf\nplayer kbWasSaid [otherUnit, \"myTopic\", \"mySentenceID\", 3];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "person",
                            "description": "`Object` - who said the item"
                        },
                        {
                            "name": "receiver",
                            "description": "`Object` - receiver of the sentence"
                        },
                        {
                            "name": "topic",
                            "description": "`String` - name of the topic used in `kbAddTopic`"
                        },
                        {
                            "name": "sentenceID",
                            "description": "`String` - id of sentence that we want to check"
                        },
                        {
                            "name": "maxAge",
                            "description": "`Number` - time in seconds. `kbWasSaid` will check whether the sentence was said in last **max. age** seconds"
                        }
                    ],
                    "outline": "person `kbWasSaid` [receiver, topic, sentenceID, maxAge]",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/kbWasSaid"
        },
        "configuration": {
            "label": "kbWasSaid",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a structured text, containing an image or name (if no image is found) of the button, on the keyboard, mouse or joystick, with the given code.",
            "examples": [
                {
                    "text": "```sqf\n_image = keyImage 28; // result is \"Enter\"\n```"
                },
                {
                    "text": "From Arma 3 v2.08:\n\n```sqf\n_image = keyImage \"-1660944350\"; // result is \"Right Ctrl+G\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "dikCode",
                            "description": "`Number` or {{GVI|arma3|2.08"
                        }
                    ],
                    "outline": "`keyImage`  dikCode",
                    "returns": "[Structured Text](https://community.bistudio.com/wiki/Structured%20Text)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/keyImage"
        },
        "configuration": {
            "label": "keyImage",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the name of a button with extra quotation marks (on the keyboard, mouse or joystick) with the given code.",
            "examples": [
                {
                    "text": "```sqf\n_name = keyName 28; // result is \"\"\"Enter\"\"\"\n```"
                },
                {
                    "text": "From Arma 3 v2.08:\n\n```sqf\nprivate _name = keyName \"-1660944350\"; // result is \"\"\"Right Ctrl+G\"\"\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "dikCode",
                            "description": "`Number` or {{GVI|arma3|2.08"
                        }
                    ],
                    "outline": "`keyName` dikCode",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/keyName"
        },
        "configuration": {
            "label": "keyName",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Retrieves a list of all keys in a `HashMap`.",
            "examples": [
                {
                    "text": "```sqf\nkeys _myHashMap;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "hashMap ",
                            "description": "`HashMap`"
                        }
                    ],
                    "outline": "`keys` hashMap",
                    "returns": "`Array` - array of all keys in the HashMap"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/keys"
        },
        "configuration": {
            "label": "keys",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks if a group or a side knows about target.\n* Enemy knowledge is instantly shared among the group units\n* Units in the same group always perfectly know about each others\n* AI knowledge cannot check beyond current `viewDistance` and it resets to zero as soon as the target's distance is over it\nNote: neither fog nor daylight affect this behaviour\n* Losing sight of a target for more than 120 seconds resets its `knowsAbout` to zero as well\n* **Magic number** is the value that must be reached for a unit to shoot at an enemy (used by \"Detected by\" triggers as well):\n:{{{!}}class=\"wikitable align-center\"\n! Game\n{{!}} **(Operation Flashpoint)**\n{{!}} **(Operation Flashpoint: Resistance)**\n{{!}} **(Armed Assault)**\n{{!}} **(Arma 2)**\n{{!}} **(Arma 2: Operation Arrowhead)**\n{{!}} **(Arma 3)**\n{{!}}-\n! Magic value\n{{!}} 0.7\n{{!}} 0.105\n{{!}} ?\n{{!}} ?\n{{!}} ?\n{{!}} ?\n{{!}}}",
            "examples": [
                {
                    "text": "```sqf\n_knowledge = player knowsAbout _target;\n```"
                },
                {
                    "text": "```sqf\n_knowledge = (group player) knowsAbout _target;\n```"
                },
                {
                    "text": "```sqf\n_knowledge = (side player) knowsAbout _target;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "who",
                            "description": "`Object`, `Group` or `Side` - if a unit, unit's `group` is considered; if a vehicle, vehicle commander's `group` is used."
                        },
                        {
                            "name": "target",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "who `knowsAbout` target",
                    "returns": "`Number` - in range of 0..4, where 4 is maximum knowledge."
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/knowsAbout"
        },
        "configuration": {
            "label": "knowsAbout",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Forces a helicopter landing.",
            "examples": [
                {
                    "text": "```sqf\n_cobraOne land \"LAND\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "helicopter",
                            "description": "`Object`"
                        },
                        {
                            "name": "mode",
                            "description": "`String` - can be one of:\n* \"LAND\" - Complete stop\n* \"GET IN\" - Hovering very low, for another unit to get in\n* \"GET OUT\" - Hovering low, for another unit to get out\n* {{GVI|arma2|1.00"
                        }
                    ],
                    "outline": "helicopter `land` mode",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/land"
        },
        "configuration": {
            "label": "land",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Order an AI airplane to land at a given airport. **ID** is the number to identify which map airport you want the airplane to land at. See [Arma: Airport IDs](https://community.bistudio.com/wiki/Arma%3A%20Airport%20IDs) for more information.\n**Arma 3**:  Since Arma 3 v1.68 it is possible to also make the airplane land at a [dynamic airport](https://community.bistudio.com/wiki/Arma%203%3A%20Dynamic%20Airport%20Configuration) `object` (e.g. aircraft carrier, makeshift runway...) – see **Example 2**.\n**Arma 3**:  Since Arma3 v2.18 it is also possible to make a helicopter land at a specific helipad. \n**NOTE**: To make a **helicopter** land there is also the `land` command.",
            "examples": [
                {
                    "text": "```sqf\n_plane1 landAt 1;\n```"
                },
                {
                    "text": "```sqf\n_dynamicAirport1 = \"DynamicAirport_01_F\" createVehicle position player;\n_plane1 landAt _dynamicAirport1;\n```"
                },
                {
                    "text": "```sqf\n_hpad = \"Land_HelipadEmpty_F\" createVehicle [0,0,0];\n_hpad setPosASL _pos;\nheli landAt [_hpad, \"LAND\"];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "plane",
                            "description": "`Object` - a plane"
                        },
                        {
                            "name": "ID",
                            "description": "`Number` - [Airport ID](https://community.bistudio.com/wiki/Arma%3A%20Airport%20IDs)"
                        }
                    ],
                    "outline": "plane `landAt` ID",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "plane",
                            "description": "`Object`"
                        },
                        {
                            "name": "airportObject",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "plane `landAt` airportObject",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "heli",
                            "description": "`Object` - Helicopter/VTOL aircraft"
                        },
                        {
                            "name": "heliPad",
                            "description": "`Object` - A helipad object (can be an invisible helipad)"
                        },
                        {
                            "name": "mode",
                            "description": "`String` - Landing mode. See the `land` command"
                        }
                    ],
                    "outline": "heli `landAt` [heliPad, mode]",
                    "returns": "`Boolean` - Returns `true` if landing command was issued successfully. `false` if failed."
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/landAt"
        },
        "configuration": {
            "label": "landAt",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return the result of helicopter landing position searching (performed after the `land` command).",
            "examples": [
                {
                    "text": "```sqf\n_result = landResult BIS_heli;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "helicopter",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`landResult` helicopter",
                    "returns": "`String` - result, can be:\n* `**\"Found\"**` - position found\n* `**\"NotFound\"**` - position not found\n* `**\"NotReady\"**` - position searching is still in progress\n* `**\"\"**` - empty string when the provided _helicopter_ is invalid"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/landResult"
        },
        "configuration": {
            "label": "landResult",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns current game language.",
            "examples": [
                {
                    "text": "```sqf\n_myLanguage = language; // will return \"English\" if game language is set to English\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`language`",
                    "returns": "`String` - see [[Stringtable.xml#Supported_languages|supported languages]] for possible values"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/language"
        },
        "configuration": {
            "label": "language",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the laser target object created by given unit (vehicle or soldier) when using a laser targeting device. The main syntax targets the primary gunner turret.",
            "examples": [
                {
                    "text": "```sqf\nprivate _target = laserTarget gunner heli;\n```"
                },
                {
                    "text": "```sqf\nprivate _designatedPos = getPosATL laserTarget player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "`Object` - unit or vehicle"
                        }
                    ],
                    "outline": "`laserTarget` entity",
                    "returns": "`Object` - laser target or `objNull` if no laser target exists"
                },
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - transport"
                        },
                        {
                            "name": "turret",
                            "description": "`Array` format [Turret Path](https://community.bistudio.com/wiki/Turret%20Path)"
                        }
                    ],
                    "outline": "vehicle `laserTarget` turret",
                    "returns": "`Object` - laser target or `objNull` if no laser target exists"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/laserTarget"
        },
        "configuration": {
            "label": "laserTarget",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds an item with the given text to the `CT_LISTBOX` or `CT_COMBO` or `CT_TOOLBOX`.\n\n**NOTE**:  If using `**RscToolBox**` as template with `ctrlCreate`, clear it first with `lbClear`",
            "examples": [
                {
                    "text": "```sqf\n_index = lbAdd [101, \"First item\"];\n```"
                },
                {
                    "text": "```sqf\n_index = _control lbAdd \"First item\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - control IDC"
                        },
                        {
                            "name": "text",
                            "description": "`String` - visible text"
                        }
                    ],
                    "outline": "`lbAdd` [idc, text]",
                    "returns": "`Number` - index (row) of newly added item"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "text",
                            "description": "`String`"
                        }
                    ],
                    "outline": "control `lbAdd` text",
                    "returns": "`Number` - index (row) of newly added item"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/lbAdd"
        },
        "configuration": {
            "label": "lbAdd",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Clear all items from a `CT_LISTBOX` or `CT_COMBO` control.",
            "examples": [
                {
                    "text": "```sqf\nlbClear 101;\n```"
                },
                {
                    "text": "```sqf\nlbClear _ctrl;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - control IDC"
                        }
                    ],
                    "outline": "`lbClear` idc",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`lbClear` control",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/lbClear"
        },
        "configuration": {
            "label": "lbClear",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the text color of the item with the given index of the `CT_LISTBOX` or `CT_COMBO` with IDC of the topmost user `dialog`.",
            "examples": [
                {
                    "text": "```sqf\n_colour = lbColor [101, 0];\n```"
                },
                {
                    "text": "```sqf\n_color = _control lbColor 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - control IDC"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`lbColor` [idc, index]",
                    "returns": "`Array` format [[Color|Color (RGBA)]]"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "control `lbColor`  index",
                    "returns": "`Array` format [[Color|Color (RGBA)]]"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/lbColor"
        },
        "configuration": {
            "label": "lbColor",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the text color of the item (right) with the given index of the listbox or combobox with id idc of the topmost user `dialog`.",
            "examples": [
                {
                    "text": "```sqf\n_colour = lbColorRight [101, 0];\n```"
                },
                {
                    "text": "```sqf\n_color = _control lbColorRight 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - control's id"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`lbColorRight` [idc, index]",
                    "returns": "`Array` in format [[Color|Color (RGBA)]]"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "control `lbColorRight`  index",
                    "returns": "`Array` in format [[Color|Color (RGBA)]]"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/lbColorRight"
        },
        "configuration": {
            "label": "lbColorRight",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the index of the selected item of the `CT_LISTBOX`, `CT_LISTNBOX`, `CT_COMBO` or `CT_TOOLBOX`. For `CT_LISTBOX` with multi selection enabled use `lbSelection`.",
            "examples": [
                {
                    "text": "```sqf\n_index = lbCurSel 101;\n```"
                },
                {
                    "text": "```sqf\nlbCurSel _ctrl;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`lbCurSel`  idc",
                    "returns": "`Number` - selected index (row) or -1 if nothing is selected"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`lbCurSel`  control",
                    "returns": "`Number` - selected index (row) or -1 if nothing is selected"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lbCurSel"
        },
        "configuration": {
            "label": "lbCurSel",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the data set in given index of the `CT_LISTBOX` or `CT_COMBO`.",
            "examples": [
                {
                    "text": "```sqf\n_data = lbData [101, 0];\n```"
                },
                {
                    "text": "```sqf\n_data = _control lbData 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - control's IDC"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`lbData` [idc, index]",
                    "returns": "`String`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "control `lbData`  index",
                    "returns": "`String`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/lbData"
        },
        "configuration": {
            "label": "lbData",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes the item with the given index from the `CT_LISTBOX`, `CT_COMBO` or `CT_TOOLBOX`.",
            "examples": [
                {
                    "text": "```sqf\nlbDelete [101, 0];\n```"
                },
                {
                    "text": "```sqf\n_control lbDelete 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - control IDC"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`lbDelete` [idc, index]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "control `lbDelete`  index",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/lbDelete"
        },
        "configuration": {
            "label": "lbDelete",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks whether or not given row of the given listbox is selected.",
            "examples": [
                {
                    "text": "```sqf\n_selected = _control lbIsSelected 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "control `lbIsSelected` index",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lbIsSelected"
        },
        "configuration": {
            "label": "lbIsSelected",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the picture name of the item with the given index of the listbox or combobox with id idc of the topmost user `dialog`.",
            "examples": [
                {
                    "text": "```sqf\n_picture = lbPicture [101, 0];\n```"
                },
                {
                    "text": "```sqf\n_picture = _control lbPicture 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - idc of control"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`lbPicture` [idc, index]",
                    "returns": "`String`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "control `lbPicture` index",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lbPicture"
        },
        "configuration": {
            "label": "lbPicture",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the right picture name of the item with the given index of the listbox or combobox with id idc of the topmost user `dialog`.",
            "examples": [
                {
                    "text": "```sqf\n_picture = lbPictureRight [101, 0];\n```"
                },
                {
                    "text": "```sqf\n_picture = _control lbPictureRight 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - idc of control"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`lbPictureRight` [idc, index]",
                    "returns": "`String`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "control `lbPictureRight` index",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lbPictureRight"
        },
        "configuration": {
            "label": "lbPictureRight",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `Array` of selected rows indices in the given listbox. If listbox is of style LB_MULTI (multi-selection) the array will contain multiple elements, otherwise only a single element. For single selection listbox one can also use `lbCurSel`. See also `lbIsSelected`, `lbSetSelected`",
            "examples": [
                {
                    "text": "```sqf\n_indices = lbSelection _control;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`lbSelection` control",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lbSelection"
        },
        "configuration": {
            "label": "lbSelection",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the color of the item (left) with the given index of the listbox or combobox with id idc of the topmost user `Dialog` to color.",
            "examples": [
                {
                    "text": "```sqf\nlbSetColor [101, 0, [0, 1, 0, 0.5]];\n```"
                },
                {
                    "text": "```sqf\n_control lbSetColor [0, [0, 1, 0, 0.5]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - control's IDC"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        },
                        {
                            "name": "color",
                            "description": "[[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "`lbSetColor` [idc, index, color]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        },
                        {
                            "name": "color",
                            "description": "[[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "control `lbSetColor` [index, color]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/lbSetColor"
        },
        "configuration": {
            "label": "lbSetColor",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the color of the item (right) with the given index of the listbox or combobox with id idc of the topmost user `dialog` to color.",
            "examples": [
                {
                    "text": "```sqf\nlbSetColorRight [101, 0, [0, 1, 0, 0.5]];\n```"
                },
                {
                    "text": "```sqf\n_control lbSetColorRight [0, [0, 1, 0, 0.5]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` of control"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        },
                        {
                            "name": "color",
                            "description": "`Array` format [[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "`lbSetColorRight` [idc, index, color]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        },
                        {
                            "name": "color",
                            "description": "[[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "control `lbSetColorRight` [index, color]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/lbSetColorRight"
        },
        "configuration": {
            "label": "lbSetColorRight",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Selects the item with the given index in the listbox, listnbox, combobox, xcombobox, xlistbox\n\n**IMPORTANT**: **The following only applies to the {{Link|#Syntax 2|Alternative Syntax}} when used with `CT_LISTBOX` and `CT_LISTNBOX`.**\n\nTo deselect all entries, use -1: <sqf inline>_ctrl lbSetCurSel -1; For listbox of style LB_MULTI use `lbSetSelected` instead.\n\n`CT_COMBO` does not allow deselecting entries, it will instead select the first one as it is not a combobox usual behaviour.\nIf you really need to deselect a combobox, see {{Link|#Notes|DreadedEntity's note}}.",
            "examples": [
                {
                    "text": "```sqf\nlbSetCurSel [101, 0];\n```"
                },
                {
                    "text": "```sqf\n_control lbSetCurSel 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - control's IDC"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`lbSetCurSel` [idc, index]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "control `lbSetCurSel` index",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lbSetCurSel"
        },
        "configuration": {
            "label": "lbSetCurSel",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the additional text (invisible) in the item with the given index of the listbox or combobox with id idc of the topmost user `dialog` to the given data.\n\n**NOTE**: See more information on the `CT_LISTBOX` command family [here](https://community.bistudio.com/wiki/CT_LISTBOX%23Scripting_Example).",
            "examples": [
                {
                    "text": "```sqf\nlbSetData [101, 1, \"#1\"];\n```"
                },
                {
                    "text": "```sqf\n_control lbSetData [1, \"#1\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - control's IDC"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        },
                        {
                            "name": "data",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`lbSetData` [idc, index, data]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        },
                        {
                            "name": "data",
                            "description": "`String`"
                        }
                    ],
                    "outline": "control `lbSetData` [index, data]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lbSetData"
        },
        "configuration": {
            "label": "lbSetData",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the left picture in the row with given index of `CT_LISTBOX` or `CT_COMBO`. The picture is searched for in the mission directory, the dtaExt subdirectory of the campaign directory and the dtaExt directory and the data bank (or directory).\n\n**Arma 3**: In Arma 3 it might be necessary to set the color of the picture as well with `lbSetPictureColor` as default color <sqf inline>[0,0,0,0] makes the picture invisible.",
            "examples": [
                {
                    "text": "```sqf\nlbSetPicture [101, 0, \"iskoda.paa\"];\n```"
                },
                {
                    "text": "```sqf\n_control lbSetPicture [0, \"iskoda.paa\"];\n```"
                },
                {
                    "text": "{{Feature|informative|\nAdding pictures to lists is very slow. In order to prevent a list filling's possible slowdown, add the pictures in the **scheduled** environment using `spawn`.\n\nOne drawback of that method is that sorting the entries is not easily possible.\n}}\n\n```sqf\n\nprivate _path = _ctrlTV tvAdd [[], \"Some Entry\"];\n[_ctrlTV, _path] spawn {\n\t(_this select 0) tvSetPictureRight [[_this select 1], \"someImage.paa\"];\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - control IDC"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`String` - path to the picture"
                        }
                    ],
                    "outline": "`lbSetPicture` [idc, index, path]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`String` - path to the picture"
                        }
                    ],
                    "outline": "control `lbSetPicture` [index, path]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/lbSetPicture"
        },
        "configuration": {
            "label": "lbSetPicture",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the color of item's picture (left) with the given index of the listbox with id idc of the topmost user dialog to the given color. Color is in format [[Color|Color (RGBA)]]. Color which consists from only zeros means disable this override.",
            "examples": [
                {
                    "text": "```sqf\nlbSetPictureColor [101, 0, [0, 1, 0, 0.5]];\n```"
                },
                {
                    "text": "```sqf\n_ctrl lbSetPictureColor [0, [1, 1, 1, 1]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` of control"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        },
                        {
                            "name": "color",
                            "description": "`Array` format [[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "`lbSetPictureColor` [idc, index, color]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        },
                        {
                            "name": "color",
                            "description": "`Array` format [[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "control `lbSetPictureColor` [index, color]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lbSetPictureColor"
        },
        "configuration": {
            "label": "lbSetPictureColor",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the disabled color of item's picture (left) with the given index of the listbox with id idc of the topmost user dialog to the given color. Color is in format [[Color|Color (RGBA)]]. Color which consists from only zeros means disable this override.",
            "examples": [
                {
                    "text": "```sqf\nlbSetPictureColorDisabled [101, 0, [1, 1, 1, 0.25]];\n```"
                },
                {
                    "text": "```sqf\n_ctrl lbSetPictureColorDisabled [0, [1, 1, 1, 0.25]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` of control"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        },
                        {
                            "name": "color",
                            "description": "`Array` format [[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "`lbSetPictureColorDisabled` [idc, index, color]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        },
                        {
                            "name": "color",
                            "description": "`Array` format [[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "control `lbSetPictureColorDisabled` [index, color]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lbSetPictureColorDisabled"
        },
        "configuration": {
            "label": "lbSetPictureColorDisabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the selected color of item's picture (left) with the given index of the listbox with id idc of the topmost user dialog to the given color. Color is in format [[Color|Color (RGBA)]]. Color which consists from only zeros means disable this override.",
            "examples": [
                {
                    "text": "```sqf\nlbSetPictureColorSelected [101, 0, [0, 1, 0, 0.5]];\n```"
                },
                {
                    "text": "```sqf\n_ctrl lbSetPictureColorSelected [0, [1, 1, 1, 1]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - control id"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        },
                        {
                            "name": "color",
                            "description": "`Array` format [[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "`lbSetPictureColorSelected` [idc, index, color]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        },
                        {
                            "name": "color",
                            "description": "`Array` format [[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "control `lbSetPictureColorSelected` [index, color]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lbSetPictureColorSelected"
        },
        "configuration": {
            "label": "lbSetPictureColorSelected",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the second (right aligned) picture in the item with the given index of the listbox or combobox with id idc of the topmost user `dialog`. Name is the picture name.\nThe picture is searched for in the mission directory, the dtaExt subdirectory of the campaign directory and the dtaExt directory and the data bank (or directory).\n\nIn Arma 3 it might be necessary to set the color of the picture as well with `lbSetPictureRightColor` as default [0,0,0,0] color makes the picture invisible.\n\n**NOTE**: When trying to select a listBox entry by clicking at the right picture, the control in the background is focused. It seems the width of the control is not extended by adding a right picture.",
            "examples": [
                {
                    "text": "```sqf\nlbSetPictureRight [101, 0, \"a3\\3den\\data\\cfg3den\\history\\createcomment_ca.paa\"];\n```"
                },
                {
                    "text": "```sqf\n_control lbSetPictureRight [0, \"a3\\3den\\data\\cfg3den\\history\\createcomment_ca.paa\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` of control"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`lbSetPictureRight` [idc, index, path]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`String`"
                        }
                    ],
                    "outline": "control `lbSetPictureRight` [index, path]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/lbSetPictureRight"
        },
        "configuration": {
            "label": "lbSetPictureRight",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the color of the second (right aligned) picture of the given index of the listbox with id idc of the topmost user dialog to the given color.\nColor which consists from only zeros means disable this override.",
            "examples": [
                {
                    "text": "```sqf\nlbSetPictureRightColor [101, 0, [0, 1, 0, 0.5]];\n```"
                },
                {
                    "text": "```sqf\n_ctrl lbSetPictureRightColor [0, [1, 1, 1, 1]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` of control"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        },
                        {
                            "name": "color",
                            "description": "`Array` format [[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "`lbSetPictureRightColor` [idc, index, color]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        },
                        {
                            "name": "color",
                            "description": "`Array` format [[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "control `lbSetPictureRightColor` [index, color]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lbSetPictureRightColor"
        },
        "configuration": {
            "label": "lbSetPictureRightColor",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the disabled color of second (right aligned) picture of the item with the given index of the listbox with id idc of the topmost user dialog to the given color.\nColor which consists from only zeros means disable this override.",
            "examples": [
                {
                    "text": "```sqf\nlbSetPictureRightColorDisabled [101, 0, [1, 1, 1, 0.25]];\n```"
                },
                {
                    "text": "```sqf\n_ctrl lbSetPictureRightColorDisabled [0, [1, 1, 1, 0.25]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` of control"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        },
                        {
                            "name": "color",
                            "description": "`Array` format [[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "`lbSetPictureRightColorDisabled` [idc, index, color]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        },
                        {
                            "name": "color",
                            "description": "`Array` format [[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "control `lbSetPictureRightColorDisabled` [index, color]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lbSetPictureRightColorDisabled"
        },
        "configuration": {
            "label": "lbSetPictureRightColorDisabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the selected color of the second (right aligned) picture of the item with the given index of the listbox with id idc of the topmost user dialog to the given color.\nColor which consists from only zeros means disable this override.",
            "examples": [
                {
                    "text": "```sqf\n_ctrl lbSetPictureRightColorSelected [0, [1, 1, 1, 1]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        },
                        {
                            "name": "color",
                            "description": "`Array` format [[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "control `lbSetPictureRightColorSelected` [index, color]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lbSetPictureRightColorSelected"
        },
        "configuration": {
            "label": "lbSetPictureRightColorSelected",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the select color of the item with the given index of the listbox or combobox with id idc of the topmost user `dialog` to color.",
            "examples": [
                {
                    "text": "```sqf\nlbSetSelectColor [101, 0, [0, 1, 0, 0.5]];\n```"
                },
                {
                    "text": "```sqf\n_control lbSetSelectColor [0, [0, 1, 0, 0.5]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` of control"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        },
                        {
                            "name": "color",
                            "description": "`Array` format [[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "`lbSetSelectColor` [idc, index, color]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        },
                        {
                            "name": "color",
                            "description": "`Array` format [[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "control `lbSetSelectColor` [index, color]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lbSetSelectColor"
        },
        "configuration": {
            "label": "lbSetSelectColor",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the select color of the of the secondary text (right aligned) of the item with the given index of the listbox or combobox with id idc of the topmost user `dialog` to color.",
            "examples": [
                {
                    "text": "```sqf\nlbSetSelectColorRight [101, 0, [0, 1, 0, 0.5]];\n```"
                },
                {
                    "text": "```sqf\n_control lbSetSelectColorRight [0, [0, 1, 0, 0.5]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` of control"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        },
                        {
                            "name": "color",
                            "description": "`Array` format [[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "`lbSetSelectColorRight` [idc, index, color]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        },
                        {
                            "name": "color",
                            "description": "`Array` format [[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "control `lbSetSelectColorRight` [index, color]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lbSetSelectColorRight"
        },
        "configuration": {
            "label": "lbSetSelectColorRight",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the selection state of the given row of the given listbox of style LB_MULTI.\nThe command has to be called for every row which is needed to be selected in multi-selection listbox. Use negative index -1 to select/deselect all rows (since **(Arma 3)**).\nFor single selection listbox use `lbSetCurSel` instead.",
            "examples": [
                {
                    "text": "```sqf\n_control lbSetSelected [0, true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number` or since **(Arma 3)** `Array` of `Number`s"
                        },
                        {
                            "name": "selected",
                            "description": "`Boolean`"
                        },
                        {
                            "name": "forceEH",
                            "description": "`Boolean` - (Optional, default `false`) will force [ lbSelChanged](https://community.bistudio.com/wiki/User_Interface_Event_Handlers%23onLBSelChanged%20) EH to fire"
                        }
                    ],
                    "outline": "control `lbSetSelected` [index, selected, forceEH]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lbSetSelected"
        },
        "configuration": {
            "label": "lbSetSelected",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the text on the left side of the item with the given index of the listbox or combobox with id idc of the topmost user dialog.",
            "examples": [
                {
                    "text": "```sqf\nlbSetText [101, 0, \"iskoda\"];\n```"
                },
                {
                    "text": "```sqf\n_control lbSetText [0, \"iskoda\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` of control"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        },
                        {
                            "name": "name",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`lbSetText` [idc, index, name]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        },
                        {
                            "name": "name",
                            "description": "`String`"
                        }
                    ],
                    "outline": "control `lbSetText` [index, name]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/lbSetText"
        },
        "configuration": {
            "label": "lbSetText",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the text on the right side of the item with the given row index of the listbox or combobox with id idc of the topmost user dialog.",
            "examples": [
                {
                    "text": "```sqf\n_control lbSetTextRight [0, \"iskoda\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "row",
                            "description": "`Number` - 0-based index (first row is 0, second is 1, etc)"
                        },
                        {
                            "name": "name",
                            "description": "`String`"
                        }
                    ],
                    "outline": "control `lbSetTextRight` [row, name]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lbSetTextRight"
        },
        "configuration": {
            "label": "lbSetTextRight",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets tooltip for item with given index of the listbox or combobox with id idc of the topmost user dialog to the given data.",
            "examples": [
                {
                    "text": "```sqf\nlbSetTooltip [101, 1, \"tooltip\"];\n```"
                },
                {
                    "text": "```sqf\n_control lbSetTooltip [0, \"another tooltip\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        },
                        {
                            "name": "tooltip",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`lbSetTooltip` [idc, index, tooltip]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        },
                        {
                            "name": "tooltip",
                            "description": "`String`"
                        }
                    ],
                    "outline": "control `lbSetTooltip` [index, tooltip]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lbSetTooltip"
        },
        "configuration": {
            "label": "lbSetTooltip",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the additional value in the row with the given index of a `CT_LISTBOX` or `CT_COMBO` control.",
            "examples": [
                {
                    "text": "```sqf\nlbSetValue [101, 0, 1];\n```"
                },
                {
                    "text": "```sqf\n_control lbSetValue [0, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - control IDC"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        },
                        {
                            "name": "value",
                            "description": "`Number` - only integer values are supported"
                        }
                    ],
                    "outline": "`lbSetValue` [idc, index, value]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        },
                        {
                            "name": "value",
                            "description": "`Number` - only integer values are supported"
                        }
                    ],
                    "outline": "control `lbSetValue` [index, value]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lbSetValue"
        },
        "configuration": {
            "label": "lbSetValue",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the number of items in a `CT_LISTBOX` or `CT_COMBO` control. For `CT_TOOLBOX` size see `lnbSize`.",
            "examples": [
                {
                    "text": "```sqf\n_size = lbSize 101;\n```"
                },
                {
                    "text": "```sqf\n_size = lbSize _control;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - control's id"
                        }
                    ],
                    "outline": "`lbSize` idc",
                    "returns": "`Number`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`lbSize` control",
                    "returns": "`Number`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/lbSize"
        },
        "configuration": {
            "label": "lbSize",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sorts listbox entries alphabetically ascending by their `lbText`.",
            "examples": [
                {
                    "text": "```sqf\nlbSort _myControl;\n```"
                },
                {
                    "text": "```sqf\nlbSort [_myControl, \"DESC\"];\n```"
                },
                {
                    "text": "```sqf\nlbSort 101;\n```"
                },
                {
                    "text": "```sqf\nlbSort [101, \"DESC\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`lbSort` control",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "sortOrder",
                            "description": "`String` - \"ASC\": ascending, \"DESC\": descending"
                        }
                    ],
                    "outline": "`lbSort` [control, sortOrder]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`lbSort` idc",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "sortOrder",
                            "description": "`String` - \"ASC\": ascending, \"DESC\": descending"
                        }
                    ],
                    "outline": "`lbSort` [idc, sortOrder]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lbSort"
        },
        "configuration": {
            "label": "lbSort",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sorts given ListBox by either `lbText`, `lbValue` or `lbData` in normal or reversed order, using case-sensitive or case-insensitive comparison. This command supports UNICODE characters.\nWhen sorting by `**\"VALUE\"**`, the rows with the same `lbValue` will additionally be sorted by `lbText` in the order specified by `reversedOrder` flag, text specified by `useTextRight` flag and case-sensitivity specified by `caseSensitive` flag.\n\n**IMPORTANT**: \n* This command supports referencing control via IDC as well, but as with any use of IDC in UI `Control` commands, a `dialog` should be present, i.e. UI user interaction is created with `createDialog` rather than `createDisplay`.\n* As this command supports UNICODE by default, which may result in slower sorting, you can switch it off with `**unicodeOff**` param.",
            "examples": [
                {
                    "text": "```sqf\n\nwith uiNamespace do\n{\n\tprivate _lb = findDisplay 46 createDisplay \"RscDisplayEmpty\" ctrlCreate [\"RscListBox\", -1];\n\t_lb ctrlSetPosition [0,0,1,1];\n\t_lb ctrlCommit 0;\n\tlbClear _lb;\n\t{\n\t\t_lb lbAdd (_x select 0);\n\t\t_lb lbSetValue [_forEachIndex, _x select 1];\n\t}\n\tforEach [[\"В\",1], [\"Я\",0], [\"Б\",1], [\"Ю\",0], [\"А\",1]];\n\t_lb lbSortBy [\"VALUE\", false, false];\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlOrIDC",
                            "description": "`Control` or `Number` - the ListBox control or its IDC"
                        },
                        {
                            "name": "sortByType",
                            "description": "`String` - (Optional, default \"TEXT\") one of:\n* `**\"TEXT\"**`\n* `**\"VALUE\"**`\n* `**\"DATA\"**`"
                        },
                        {
                            "name": "reversedOrder",
                            "description": "`Boolean` - (Optional, default `false`) `true` for sorting in reversed order"
                        },
                        {
                            "name": "caseSensitive",
                            "description": "`Boolean` - (Optional, default `false`) `true` for using case-sensitive comparison"
                        },
                        {
                            "name": "useTextRight",
                            "description": "`Boolean` - (Optional, default `false`) `true` to sort by [ text right](https://community.bistudio.com/wiki/lbSetTextRight%20)"
                        },
                        {
                            "name": "unicodeOff",
                            "description": "`Boolean` - (Optional, default `false`) `true` to switch off UNICODE conversion for faster sorting"
                        }
                    ],
                    "outline": "controlOrIDC `lbSortBy` [sortByType, reversedOrder, caseSensitive, useTextRight, unicodeOff]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lbSortBy"
        },
        "configuration": {
            "label": "lbSortBy",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sorts the ListBox entries by `lbValue`. The entries are sorted in ascending order. Also note that this command will mix up the entries randomly if multiple entries have the same value. In Arma 3 use `lbSortBy` to avoid this problem.",
            "examples": [
                {
                    "text": "```sqf\nlbSortByValue _control;\n```"
                },
                {
                    "text": "```sqf\nlbSortByValue 101;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`lbSortByValue`  control",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`lbSortByValue`  idc",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lbSortByValue"
        },
        "configuration": {
            "label": "lbSortByValue",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the shown text of the item with the given index of the `CT_LISTBOX` or `CT_COMBO`.",
            "examples": [
                {
                    "text": "```sqf\n_text = lbText [101, 0];\n```"
                },
                {
                    "text": "```sqf\n_text = _control lbText 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - control IDC"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`lbText` [idc, index]",
                    "returns": "`String`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "control `lbText` index",
                    "returns": "`String`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/lbText"
        },
        "configuration": {
            "label": "lbText",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the shown right text in the item with the given index of the listbox or combobox with id idc of the topmost user `dialog`.",
            "examples": [
                {
                    "text": "```sqf\n_text = lbTextRight [101, 0];\n```"
                },
                {
                    "text": "```sqf\n_text = _control lbTextRight 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` of control"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`lbTextRight` [idc, index]",
                    "returns": "`String`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "control `lbTextRight` index",
                    "returns": "`String`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/lbTextRight"
        },
        "configuration": {
            "label": "lbTextRight",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns tooltip for ListBox, ComboBox and Toolbox",
            "examples": [
                {
                    "text": "```sqf\nlbTooltip [1, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`lbTooltip` [idc, index]",
                    "returns": "`String`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "control `lbTooltip` index",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lbTooltip"
        },
        "configuration": {
            "label": "lbTooltip",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the additional integer value of the item with the given index of the `CT_LISTBOX` or `CT_COMBO`.",
            "examples": [
                {
                    "text": "```sqf\n_value = lbValue [101, 0];\n```"
                },
                {
                    "text": "```sqf\n_value = _control lbValue 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - control IDC"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`lbValue` [idc, index]",
                    "returns": "`Number` - only integers"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "control `lbValue`  index",
                    "returns": "`Number` - only integers"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/lbValue"
        },
        "configuration": {
            "label": "lbValue",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the group leader for the given **unit** or **group**. For dead units, `objNull` is returned.",
            "examples": [
                {
                    "text": "```sqf\nleader group player == leader player;\n```"
                },
                {
                    "text": "```sqf\nleader group vehicle player;\n```"
                },
                {
                    "text": "```sqf\nleader player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitOrGroup",
                            "description": "`Object` or `Group`"
                        }
                    ],
                    "outline": "`leader`  unitOrGroup",
                    "returns": "`Object`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/leader"
        },
        "configuration": {
            "label": "leader",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Deletes internal class for the leaderboard with given name. Returns true if the board has been found and deinitialized.",
            "examples": [
                {
                    "text": "```sqf\nleaderboardDeInit \"TT01\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "boardName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`leaderboardDeInit` boardName",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/leaderboardDeInit"
        },
        "configuration": {
            "label": "leaderboardDeInit",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns values for the given leaderboard; this can be called after the one of the row request function has been called and successfully finished!",
            "examples": [
                {
                    "text": "```sqf\nleaderboardGetRows \"TT01\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "boardName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`leaderboardGetRows` boardName",
                    "returns": "`Array` in format: <nowiki>[[player1Name, score, rank], [player2Name, score, rank], [player3Name, score, rank] ...]</nowiki>"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/leaderboardGetRows"
        },
        "configuration": {
            "label": "leaderboardGetRows",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Initialize the leaderboard structure for board with given name. Returns true if board is already initialized.",
            "examples": [
                {
                    "text": "```sqf\nleaderboardInit \"TT01\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "boardName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`leaderboardInit` boardName",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/leaderboardInit"
        },
        "configuration": {
            "label": "leaderboardInit",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Requests given leaderboard to download friends rows from the given leaderboard",
            "examples": [
                {
                    "text": "```sqf\nleaderboardRequestRowsFriends \"TT01\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "boardName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`leaderboardRequestRowsFriends`  boardName",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/leaderboardRequestRowsFriends"
        },
        "configuration": {
            "label": "leaderboardRequestRowsFriends",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Requests given leaderboard to download values from global table.",
            "examples": [
                {
                    "text": "```sqf\n_isGettingValues = leaderboardRequestRowsGlobal [\"TT01\", 0, 10];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "leaderboard",
                            "description": "`String` - name of the leaderboard"
                        },
                        {
                            "name": "offset",
                            "description": "`Number` - defines how many rows are skipped"
                        },
                        {
                            "name": "rows",
                            "description": "`Number` - defines how many rows are requested"
                        }
                    ],
                    "outline": "`leaderboardRequestRowsGlobal` [leaderboard, offset, rows]",
                    "returns": "`Boolean` - returns `true` if request has been started"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/leaderboardRequestRowsGlobal"
        },
        "configuration": {
            "label": "leaderboardRequestRowsGlobal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Requests given leaderboard to download values around the user position in the table.",
            "examples": [
                {
                    "text": "```sqf\n_isGettingValues = leaderboardRequestRowsGlobalAroundUser [\"TT01\", -5, 10];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "leaderboard",
                            "description": "`String` - name of the leaderboard"
                        },
                        {
                            "name": "offset",
                            "description": "`Number` - offset from user position."
                        },
                        {
                            "name": "rows",
                            "description": "`Number` - defines how many rows are requested"
                        }
                    ],
                    "outline": "`leaderboardRequestRowsGlobalAroundUser` [leaderboard, offset, rows]",
                    "returns": "`Boolean` - returns `true` if request has been started"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/leaderboardRequestRowsGlobalAroundUser"
        },
        "configuration": {
            "label": "leaderboardRequestRowsGlobalAroundUser",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Starts async. operation to upload score to board with given name, value always overwrite the current value in the board. The board has to be initialized before the call.",
            "examples": [
                {
                    "text": "```sqf\nleaderboardsRequestUploadScore [\"TT01\", 1234, [5,6,7,8]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "boardName",
                            "description": "`String`"
                        },
                        {
                            "name": "score",
                            "description": "`Number`"
                        },
                        {
                            "name": "details",
                            "description": "`Array` - (Optional)"
                        }
                    ],
                    "outline": "`leaderboardsRequestUploadScore` [boardName, score, details]",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/leaderboardsRequestUploadScore"
        },
        "configuration": {
            "label": "leaderboardsRequestUploadScore",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Starts async. operation to upload score to board with given name, value is only stored to board if it is better than one already in the board. The board has to be initialised before the call.",
            "examples": [
                {
                    "text": "```sqf\nleaderboardsRequestUploadScoreKeepBest [\"TT01\", 1234, [5,6,7,8]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "boardName",
                            "description": "`String`"
                        },
                        {
                            "name": "score",
                            "description": "`Number`"
                        },
                        {
                            "name": "details",
                            "description": "`Array` of `Number`s (Optional)"
                        }
                    ],
                    "outline": "`leaderboardsRequestUploadScoreKeepBest` [boardName, score, details]",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/leaderboardsRequestUploadScoreKeepBest"
        },
        "configuration": {
            "label": "leaderboardsRequestUploadScoreKeepBest",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the state of the board with the given name.",
            "examples": [
                {
                    "text": "```sqf\nleaderboardState \"TT01\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "boardname",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`leaderboardState` boardname",
                    "returns": "`Number`\n* 0: Busy (async. operation in progress)\n* 1: Async. operation ended with success\n* 2: Async. operation ended with error\n* 3: Invalid board (bad board name, not initialised etc)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/leaderboardState"
        },
        "configuration": {
            "label": "leaderboardState",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Ceases the using of the vehicle by a group and unassigns vehicle from the group.\nIf the argument is a single unit, the vehicle will be unassigned from unit's group.\nAfter vehicle is unassigned from the group, each individual crew member then unassigned from the vehicle.\n\n\n\nIn short the command could be hypothetically presented as:\n\n\n```sqf\nleaveVehicle = un-addVehicle + unassignVehicle forEach crew\n```\n\n\nHowever, to make it more reliable, it is best to move unit out of the vehicle manually with `moveOut` and force unassign the vehicle with `unassignVehicle`.\n**NOTE**: See [AI Group Vehicle Management](https://community.bistudio.com/wiki/AI%20Group%20Vehicle%20Management) for more information.",
            "examples": [
                {
                    "text": "```sqf\n_unit leaveVehicle _vehicle;\n```"
                },
                {
                    "text": "```sqf\n_grp leaveVehicle _vehicle;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group` or `Object` - object's `Group` is used"
                        },
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "group `leaveVehicle` vehicle",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/leaveVehicle"
        },
        "configuration": {
            "label": "leaveVehicle",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the credits for the libraries used by the game.",
            "examples": [
                {
                    "text": "```sqf\nhint str libraryCredits; // as of Arma 2 OA 1.62.95208\n\n/*\n[\n\t[\n\t\t\"Botan\",\n\t\t\"1999-2012 Jack Lloyd, 2001 Peter J Jones, 2004-2007 Justin Karneges, 2004 Vaclav Ovsik, 2005 Matthew Gregan, 2005-2006 Matt Johnston, 2006 Luca Piccarreta, 2007 Yves Jerschow, 2007-2008 FlexSecure GmbH, 2007-2008 Technische Universitat Darmstadt, 2007-2008 Falko Strenzke, 2007-2008 Martin Doering, 2007 Manuel Hartl, 2007 Christoph Ludwig, 2007 Patrick Sona, 2010 Olivier de Gaalon\"\n\t],\n\t[\n\t\t\"rapidjson\",\n\t\t\"2011 Milo Yip\"\n\t],\n\t[\n\t\t\"libcurl\",\n\t\t\"Copyright (c) 1996 - 2012, Daniel Stenberg\"\n\t],\n\t[\n\t\t\"GameSpy\",\n\t\t\"2009 GameSpy Industries, Inc.\"\n\t],\n\t[\n\t\t\"Theora\",\n\t\t\"2002-2009 by the Xiph.Org Foundation http://www.xiph.org/\"\n\t],\n\t[\n\t\t\"OggVorbis\",\n\t\t\"1994-2002 by the Xiph.Org Foundation http://www.xiph.org/\"\n\t],\n\t[\n\t\t\"Intel JPEG Library\",\n\t\t\"1998 Intel Corporation\"\n\t],\n\t[\n\t\t\"Matrix Template Library\",\n\t\t\"2001-2005 The Trustees of Indiana University\"\n\t],\n\t[\n\t\t\"Matrix Template Library\",\n\t\t\"1998-2001 University of Notre Dame\"\n\t],\n\t[\n\t\t\"Speex\",\n\t\t\"2002-2006 Jean-Marc Valin\"\n\t],\n\t[\n\t\t\"LZO Professional\",\n\t\t\"1996-2011 Markus Franz Xaver Johannes Oberhumer\"\n\t],\n\t[\n\t\t\"NVIDIA FXAA by TIMOTHY LOTTES\",\n\t\t\"2010, 2011 NVIDIA CORPORATION\"\n\t],\n\t[\n\t\t\"Jimenez's MLAA\",\n\t\t\"2012 2011 by Jorge Jimenez, Belen Masia, Jose I. Echevarria, Fernando Navarro and Diego Gutierrez\"\n\t]\n]\n*/\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**libraryCredits**",
                    "returns": "`Array` - [array1, array2, (..), arrayN] all under the form [libraryName, credits]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/libraryCredits"
        },
        "configuration": {
            "label": "libraryCredits",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the library disclaimers.",
            "examples": [
                {
                    "text": "```sqf\n\nhint str libraryDisclaimers;\n/*\n\treturns, in Arma 2:OA 1.62.95208:\n\t[\"THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\"]\n*/\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`libraryDisclaimers`",
                    "returns": "`Array` - array of one element"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/libraryDisclaimers"
        },
        "configuration": {
            "label": "libraryDisclaimers",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the life state of the given unit.\n{{{!}} class=\"wikitable\"\n! Arma 2\n! Arma 3\n{{!}}-\n{{!}}\n* \"ALIVE\"\n* \"DEAD\"\n* \"DEAD-RESPAWN\"\n* \"DEAD-SWITCHING\"\n* \"ASLEEP\"\n* \"UNCONSCIOUS\"\n{{!}}\n* \"HEALTHY\"\n* \"DEAD\"\n* \"DEAD-RESPAWN\"\n* \"DEAD-SWITCHING\"\n* \"INCAPACITATED\"\n* \"INJURED\"\n{{!}}}\n\n**Arma 3**:  In Arma 3, `lifeState` seems to change to \"INJURED\" when <sqf inline>damage aliveUnit >= 0.1 (0.1 seeming to be the value defined in config under {{sic|\"InjuredTreshold\"|Threshold}}). When the state is \"INCAPACITATED\", a sub-state is available via `incapacitatedState` command.",
            "examples": [
                {
                    "text": "```sqf\nprivate _lifeState = lifeState player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`lifeState` unit",
                    "returns": "`String`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/lifeState"
        },
        "configuration": {
            "label": "lifeState",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Attach light to given object at given position on object.",
            "examples": [
                {
                    "text": "```sqf\nmyLight lightAttachObject [myVehicle, [-0.5,-0.25,1]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "light",
                            "description": "`Object`"
                        },
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "position",
                            "description": "`Array` format `Position`"
                        }
                    ],
                    "outline": "light `lightAttachObject` [object, position]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/lightAttachObject"
        },
        "configuration": {
            "label": "lightAttachObject",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Detach light from object.",
            "examples": [
                {
                    "text": "```sqf\nlightDetachObject _light;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "light",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`lightDetachObject` light",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lightDetachObject"
        },
        "configuration": {
            "label": "lightDetachObject",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check if lampost is on (shining).\n{{Feature|informative|A lamp state is **local** to each client (see `switchLight`).}}\n**Arma 3**:  This command was originally designed to only work with CfgNonAIVehicles class \"StreetLamp\" only;\nsince Arma 3 v1.92 this command was extended to work with street lights.",
            "examples": [
                {
                    "text": "```sqf\nif (lightIsOn nearestObject [player, \"StreetLamp\"] == \"ON\") then { hint \"nightime\"; };\n```"
                },
                {
                    "text": "```sqf\n_it = lightIsOn object 159582;\n```"
                },
                {
                    "text": "```sqf\nif (count allMissionObjects \"StreetLamp\" == 0) then {\n\thint \"Objects compatible with 'lightIsOn' are not found.\";\n} else {\n\thint \"'lightIsOn' compatible objects are found!\";\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "lamppost",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`lightIsOn` lamppost",
                    "returns": "`String` - can be one of:\n* **\"ON\"** - light is on\n* **\"OFF\"** - light is off\n* **\"AUTO\"** - applicable only to the light of type \"StreetLamp\" and is only on during the night.\n* **\"ERROR\"** - if command fails"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lightIsOn"
        },
        "configuration": {
            "label": "lightIsOn",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return the current lightnings value.",
            "examples": [
                {
                    "text": "Get the current _lightnings_ value:\n```sqf\n_lightningsVal = lightnings;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**lightnings**",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lightnings"
        },
        "configuration": {
            "label": "lightnings",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Limit the speed of an AI-driven vehicle or AI person to given value. It has continuous effect and AI will not break through the speed limitation until one is contacted, engaged or regrouped.",
            "examples": [
                {
                    "text": "```sqf\n\nleader player limitSpeed 5;\t\t// set to walking speed\nsleep 30;\nleader player limitSpeed (2 * getNumber(configOf leader player >> \"maxSpeed\"));\t// remove the limit\n\n```"
                },
                {
                    "text": "```sqf\n\naddMissionEventHandler [\"OnEachFrame\", { hintSilent format [\"myVehicle's speed: %1 km/h\", speed myVehicle toFixed 2] }];\nsleep 5;\nmyVehicle limitSpeed 5;\n\n```"
                },
                {
                    "text": "```sqf\n\n// it was necessary to use limitSpeed repeatedly before Arma 3 1.24\n_this setVariable [\"speedLimit\", 50];\n_this spawn {\n\twhile { sleep 0.1; canMove _this } do\n\t{\n\t\t_this limitSpeed (_this getVariable \"speedLimit\");\n\t};\n};\nsleep 10;\n_this setVariable [\"speedLimit\", 100]; // update the speed limit\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "objectName",
                            "description": "`Object`"
                        },
                        {
                            "name": "speed",
                            "description": "`Number` - in km/h; By default, it's `**2 * maxSpeed**` of the vehicle/unit (which is defined in config). See Example 1."
                        }
                    ],
                    "outline": "objectName `limitSpeed` speed",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/limitSpeed"
        },
        "configuration": {
            "label": "limitSpeed",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Converts given value from given \"from\" range to wanted \"to\" range. If clipping is set to `true`, the resulting value is guaranteed to be within \"to\" range no matter what. **Arma 3**: Faster alternative to `BIS_fnc_linearConversion`.",
            "examples": [
                {
                    "text": "```sqf\n\n// Say given range is 0 to 1 and wanted range is 0 to 100 (percent calculation). Given value 0.55 then will be 55\nlinearConversion [0, 1, 0.55, 0, 100];\n\n// but if given value is 1.1 it will return 110\nlinearConversion [0, 1, 1.1, 0, 100, false];\n\n// or if clipping is true it will return 100\nlinearConversion [0, 1, 1.1, 0, 100, true];\n\n```"
                },
                {
                    "text": "```sqf\nlinearConversion [4, 8, 5, 0, 1, false];\n```"
                },
                {
                    "text": "```sqf\n\n// Calculate days from 1/1/1970\nfnc_daysFromEpoc = \n{\n\tprivate _year = param [0];\n\tprivate _days = 0;\n\tfor \"_i\" from 1970 to _year - 1 do \n\t{\n\t\t_days = _days + round linearConversion [0, 1, dateToNumber [_i, 12, 31, 23, 59], 0, 365, false];\n\t};\n\t_days + linearConversion [0, 1, dateToNumber _this, 0, 365, false];\n};\n\nhint str (date call fnc_daysFromEpoc);\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "minFrom",
                            "description": "`Number` - start \"from\" range"
                        },
                        {
                            "name": "maxFrom",
                            "description": "`Number` - end \"from\" range"
                        },
                        {
                            "name": "value",
                            "description": "`Number` - given value from \"from\" range"
                        },
                        {
                            "name": "minTo",
                            "description": "`Number` - start \"to\" range"
                        },
                        {
                            "name": "maxTo",
                            "description": "`Number` - end \"to\" range"
                        },
                        {
                            "name": "clip",
                            "description": "`Boolean` - (Optional, default `false`) if `true`, resulting value cannot leave \"to\" range"
                        }
                    ],
                    "outline": "`linearConversion` [minFrom, maxFrom, value, minTo, maxTo, clip]",
                    "returns": "`Number` - respectful value from \"to\" range"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/linearConversion"
        },
        "configuration": {
            "label": "linearConversion",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates a structured text containing a line break.",
            "examples": [
                {
                    "text": "```sqf\nhint composeText [\"First line\", lineBreak, \"Second line\"];\n```"
                },
                {
                    "text": "```sqf\nhint str (composeText [lineBreak] == parseText \"<br/>\"); // true\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`lineBreak`",
                    "returns": "[Structured Text](https://community.bistudio.com/wiki/Structured%20Text)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lineBreak"
        },
        "configuration": {
            "label": "lineBreak",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks for object intersection with a virtual line between two positions.\n**NOTE**: \n* Does not work under water.\n* Max harcoded distance is 1000m.",
            "examples": [
                {
                    "text": "```sqf\nprivate _hasStraightLineToChopper = lineIntersects [eyePos player, aimPos chopper, player, chopper];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "begPos",
                            "description": "`Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL)"
                        },
                        {
                            "name": "endPos",
                            "description": "`Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL)"
                        },
                        {
                            "name": "objIgnore1",
                            "description": "`Object` - (Optional, default `objNull`) object to ignore. When testing intersection from an object/unit/vehicle, pass that object here to prevent intersection inside of the object"
                        },
                        {
                            "name": "objIgnore2",
                            "description": "`Object` - (Optional, default `objNull`) another object to ignore. When testing intersection of a line between two objects, pass the second object here to prevent intersection inside of it being reported"
                        }
                    ],
                    "outline": "`lineIntersects` [begPos, endPos, objIgnore1, objIgnore2]",
                    "returns": "`Boolean` - `true` if an intersection happens with an object (not with terrain)"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/lineIntersects"
        },
        "configuration": {
            "label": "lineIntersects",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a list of objects intersected by the line from _begPos_ to _endPos_.",
            "examples": [
                {
                    "text": "```sqf\n\ndata = [];\ndisplayFunction = {\n\t{\n\t\tdata set [_foreachindex, lineIntersectsObjs [eyePos player, ATLToASL screenToWorld [0.5, 0.5], objNull, objNull, false, _x]];\n\t} forEach [1, 2, 4, 8, 16, 32];\n\n\thintSilent format [\"ONLY_WATER: %1\\nNEAREST_CONTACT: %2\\nONLY_STATIC: %3\\nONLY_DYNAMIC: %4\\nFIRST_CONTACT: %5\\nALL_OBJECTS: %6\",\n\tdata select 0, data select 1, data select 2, data select 3, data select 4, data select 5];\n};\n\n[\"sample_id\", \"onEachFrame\", \"displayFunction\"] call BIS_fnc_addStackedEventHandler;\n// example display objects' array in the middle of the screen sorted by 6 flags\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "begPos",
                            "description": "`Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) - virtual line start"
                        },
                        {
                            "name": "endPos",
                            "description": "`Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) - virtual line end"
                        },
                        {
                            "name": "ignoreObj1",
                            "description": "`Object` - object to ignore"
                        },
                        {
                            "name": "ignoreObj2",
                            "description": "`Object` - object to ignore"
                        },
                        {
                            "name": "sortByDistance",
                            "description": "`Boolean` - `true`: furthest object first, closest object last; `false`: unsorted"
                        },
                        {
                            "name": "flags",
                            "description": "`Number`\n* 1 - CF_ONLY_WATER \n* 2 - CF_NEAREST_CONTACT \n* 4 - CF_ONLY_STATIC \n* 8 - CF_ONLY_DYNAMIC \n* 16 - CF_FIRST_CONTACT \n* 32 - CF_ALL_OBJECTS (Usable only with CF_FIRST_CONTACT and it will check one contact per object)\nFlags can be combined: 2 + 4 = 6 is CF_NEAREST_OBJECT + CF_ONLY_STATIC"
                        }
                    ],
                    "outline": "`lineIntersectsObjs` [begPos, endPos, ignoreObj1, ignoreObj2, sortByDistance, flags]",
                    "returns": "`Array` of `Object`s - intersecting objects"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/lineIntersectsObjs"
        },
        "configuration": {
            "label": "lineIntersectsObjs",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a list of intersections with surfaces and ground from _begPosASL_ to _endPosASL_. Doesn't return intersection with sea surface. Works underwater, unlike `lineIntersects`. Hardcoded max distance: 5000m.\n**IMPORTANT**: \n* if _begPosASL_ is under the ground and _endPosASL_ is above it, the command will only return intersection with the ground, this is an engine limitation and none of the intersectXXX commands will work when initiated from under the ground.\n* only a single LOD is checked for intersection. LOD2 will only be checked if LOD1 is unavailable.",
            "examples": [
                {
                    "text": "```sqf\n_intersections = lineIntersectsSurfaces [eyePos player, aimPos chopper, player, chopper, true, -1];\n```"
                },
                {
                    "text": "```sqf\n\narrow = \"Sign_Arrow_F\" createVehicle [0,0,0];\nonEachFrame {\n\t_ins = lineIntersectsSurfaces [\n\t\tAGLToASL positionCameraToWorld [0,0,0], \n\t\tAGLToASL positionCameraToWorld [0,0,1000], \n\t\tplayer\n\t];\n\tif (count _ins == 0) exitWith { arrow setPosASL [0,0,0] };\n\tarrow setPosASL (_ins select 0 select 0);\n\tarrow setVectorUp (_ins select 0 select 1);\n\thintSilent str _ins;\n};\n\n```"
                },
                {
                    "text": "This should detect glass windows and wire fences (since Arma 3 v1.52):\n\n```sqf\n\nwirefence = \"Land_New_WiredFence_5m_F\" createVehicle position player;\narrow = \"Sign_Arrow_F\" createVehicle [0,0,0];\nonEachFrame {\n\t_ins = lineIntersectsSurfaces [\n\t\tAGLToASL positionCameraToWorld [0,0,0], \n\t\tAGLToASL positionCameraToWorld [0,0,1000], \n\t\tplayer,\n\t\tobjNull,\n\t\ttrue,\n\t\t1,\n\t\t\"GEOM\",\n\t\t\"NONE\"\n\t];\n\tif (count _ins == 0) exitWith { arrow setPosASL [0,0,0] };\n\tarrow setPosASL (_ins select 0 select 0);\n\tarrow setVectorUp (_ins select 0 select 1);\n\thintSilent str _ins;\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "begPosASL",
                            "description": "`Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) - virtual line start"
                        },
                        {
                            "name": "endPosASL",
                            "description": "`Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) - virtual line end"
                        },
                        {
                            "name": "ignoreObj1",
                            "description": "`Object` - (Optional, default `objNull`) first object to ignore"
                        },
                        {
                            "name": "ignoreObj2",
                            "description": "`Object` - (Optional, default `objNull`) second object to ignore"
                        },
                        {
                            "name": "sortMode",
                            "description": "`Boolean` -  (Optional, default `true`) `true`: closest to furthest, `false`: furthest to closest"
                        },
                        {
                            "name": "maxResults",
                            "description": "`Number` - (Optional, default 1) max results to return. -1 to return every result"
                        },
                        {
                            "name": "LOD1",
                            "description": "`String` - (Optional, default \"VIEW\") primary `LOD` to look for intersection. Can be one of:\n* \"FIRE\"\n* \"VIEW\"\n* \"GEOM\"\n* \"IFIRE\" - (\"I\" stands for Indirect, _almost_ identical to \"FIRE\")\n* \"NONE\"\n* {{GVI|arma3|2.02"
                        },
                        {
                            "name": "LOD2",
                            "description": "`String` - (Optional, default \"FIRE\") secondary `LOD` to look for intersection. See _LOD1_ for possible values"
                        },
                        {
                            "name": "returnUnique",
                            "description": "`Boolean` - (Optional, default `true`) when `false`, all intersections in the same object are included, otherwise only the first one"
                        }
                    ],
                    "outline": "`lineIntersectsSurfaces` [begPosASL, endPosASL, ignoreObj1, ignoreObj2, sortMode, maxResults, LOD1, LOD2, returnUnique]",
                    "returns": "`Array` of intersections in format [<nowiki/>[intersectPosASL, surfaceNormal, intersectObj, parentObject, selectionNames, pathToBisurf], ...] where:\n* intersectPosASL: `PositionASL` - the actual position where line intersects surface\n* `surfaceNormal`: `Vector` - a normal to the intersected surface \n* intersectObject: `Object` - the object the surface belongs to (could be proxy object) - `objNull` if terrain\n* parentObject: `Object` - the object proxy object belongs to (not always the same as intersect object) - `objNull` if terrain\n* {{GVI|arma3|2.10"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/lineIntersectsSurfaces"
        },
        "configuration": {
            "label": "lineIntersectsSurfaces",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns objects intersecting with the virtual line from _begPos_ to _endPos_. By default, the resulting array of intersecting objects is unsorted (see _[sortByDistance](https://community.bistudio.com/wiki/%23Syntax)_).\n**NOTE**: \n* Does not work under water.\n* Max hardcoded distance is 1000m.",
            "examples": [
                {
                    "text": "```sqf\n_objects = lineIntersectsWith [eyePos player, AGLToASL screenToWorld [0.5, 0.5]];\n```"
                },
                {
                    "text": "Sort by distance:\n\n```sqf\n_objects = lineIntersectsWith [eyePos player, AGLToASL screenToWorld [0.5, 0.5], objNull, objNull, true];\n```"
                },
                {
                    "text": "Ignore objects:\n\n```sqf\n_objects = lineIntersectsWith [eyePos player, aimPos chopper, player, chopper];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "begPos",
                            "description": "`Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) - virtual line start"
                        },
                        {
                            "name": "endPos",
                            "description": "`Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) - virtual line end"
                        },
                        {
                            "name": "objIgnore1",
                            "description": "`Object` - (Optional) object to ignore. When testing intersection from an object/unit/vehicle, pass that object here to prevent intersection inside of the object."
                        },
                        {
                            "name": "objIgnore2",
                            "description": "`Object` - (Optional) another object to ignore. When testing intersection of a line between two objects, pass the second object here to prevent intersection inside of it being reported"
                        },
                        {
                            "name": "sortByDistance",
                            "description": "`Boolean` - (Optional) `true`: sort by **desc**ending distance (furthermost object first, closest object last); `false`: unsorted"
                        }
                    ],
                    "outline": "`lineIntersectsWith` [begPos, endPos, objIgnore1, objIgnore2, sortByDistance]",
                    "returns": "`Array` - intersecting objects"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/lineIntersectsWith"
        },
        "configuration": {
            "label": "lineIntersectsWith",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Create and assign item to the correct slot. If there is an item in the targeted slot, it gets replaced. See also `assignItem`.",
            "examples": [
                {
                    "text": "```sqf\nbluforUnit linkItem \"NVGoggles\";\nopforUnit linkItem \"NVGoggles_OPFOR\";\nindependentUnit linkItem \"NVGoggles_INDEP\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "item",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `linkItem` item",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/linkItem"
        },
        "configuration": {
            "label": "linkItem",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "List of units that would activate given [Trigger](https://community.bistudio.com/wiki/Triggers).\n\nIt returns nothing before the simulation started, i.e. in (undelayed) init.sqf files. Returns a **[pointer](https://community.bistudio.com/wiki/Array%23Array%20properties)** to the trigger's list after the simulation started.\n\nSince this is just a _reference_ this means that the value in your local variable will change as the content of the trigger area changes.\nTo permanently copy the returned list to a different variable, use <sqf inline>_mylist = +(list triggerOne).\n\nThe second example can be used inside the trigger (in that case, no need to name your trigger).\n\nThe list returned for trigger of type \"Not present\" is the same as that returned for type \"present\". \n\n**IMPORTANT**: While the command can query any trigger, local or remote, the result will be only for the trigger condition set on the local client. See `createTrigger` for more info.",
            "examples": [
                {
                    "text": "```sqf\n_triggerList = list _triggerOne;\n```"
                },
                {
                    "text": "```sqf\nhint format [\"%1\", thisList];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "trigger",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`list` trigger",
                    "returns": "`Array` or `Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/list"
        },
        "configuration": {
            "label": "list",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return the list of all objects of given type.\n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "type",
                            "description": "`String`"
                        }
                    ],
                    "outline": "map `listObjects` type",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/listObjects"
        },
        "configuration": {
            "label": "listObjects",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return list of datalink targets and time for which they will be/were known.",
            "examples": [
                {
                    "text": "```sqf\nlistRemoteTargets opfor;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "side",
                            "description": "`Side`"
                        }
                    ],
                    "outline": "`listRemoteTargets` side",
                    "returns": "`Array` of `Array`s in format [remoteTarget, lastDetected] where:\n* remoteTarget: `Object`\n* lastDetected: `Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/listRemoteTargets"
        },
        "configuration": {
            "label": "listRemoteTargets",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array of the sensors in the given vehicle's config (configFile >> \"CfgVehicles\" >> _vehicle_ >> \"Components\" >> \"SensorsManagerComponent\" >> \"Components\").",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _sensors = listVehicleSensors _v44blackfish;\nhint str _sensors;\n/*\n\te.g for a V44 Blackfish:\n\t[\n\t\t[\"IRSensorComponent\", \"IRSensorComponent\"],\n\t\t[\"VisualSensorComponent\", \"VisualSensorComponent\"],\n\t\t[\"ActiveRadarSensorComponent\", \"ActiveRadarSensorComponent\"],\n\t\t[\"PassiveRadarSensorComponent\", \"PassiveRadarSensorComponent\"],\n\t\t[\"LaserSensorComponent\", \"LaserSensorComponent\"],\n\t\t[\"NVSensorComponent\", \"NVSensorComponent\"]\n\t]\n*/\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`listVehicleSensors` vehicle",
                    "returns": "`Array` of `Array`s of `String`s format [className, componentType] (use _className_ for `enableVehicleSensor` / `isVehicleSensorEnabled`)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/listVehicleSensors"
        },
        "configuration": {
            "label": "listVehicleSensors",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the natural logarithm of x.  [[File:A3 lnx figure.jpg|thumb|400|ln(x) and ln(e)]]",
            "examples": [
                {
                    "text": "```sqf\n_nlog = ln 10;\n```"
                },
                {
                    "text": "```sqf\n_euler = exp 1;\n_euler = ln _euler; // Returns 1\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "x",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`ln`  x",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ln"
        },
        "configuration": {
            "label": "ln",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds list of rows of strings.",
            "examples": [
                {
                    "text": "```sqf\n\nlnbAddArray [\n\t102,\n\t[\n\t\t[\n\t\t\t[\"#1\"],\n\t\t\t[1],\n\t\t\t[\"#1\"]\n\t\t],\n\t\t[\n\t\t\t[\"#2\"],\n\t\t\t[2],\n\t\t\t[\"#2\"]\n\t\t]\n\t]\n];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` or `Control`"
                        },
                        {
                            "name": "arrayOfTextAndValues",
                            "description": "`Array` of `Array`s format <nowiki>[[text], [value], [data]]</nowiki>:\n* text: `String`\n* value: `Number`\n* data: `String`"
                        }
                    ],
                    "outline": "`lnbAddArray` [idc, arrayOfTextAndValues]",
                    "returns": "`Number` - index"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/lnbAddArray"
        },
        "configuration": {
            "label": "lnbAddArray",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds a column at given position.",
            "examples": [
                {
                    "text": "```sqf\n_ctrl lnbAddColumn 0.8;\n```"
                },
                {
                    "text": "```sqf\nlnbAddColumn [105, 0.8];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "position",
                            "description": "`Number` - position of the new column where 0 means all the way to the left and 1 all the way to the right of the control"
                        }
                    ],
                    "outline": "control `lnbAddColumn` position",
                    "returns": "`Number` or `nil` - returns the zero based index of the new column"
                },
                {
                    "parameters": [
                        {
                            "name": "controlOrIdc",
                            "description": "`Control`, `Number` - control or the idc of the control"
                        },
                        {
                            "name": "position",
                            "description": "`Number` - position of the new column where 0 means all the way to the left and 1 all the way to the right of the control"
                        }
                    ],
                    "outline": "`lnbAddColumn` [controlOrIdc, position]",
                    "returns": "`Number` or `nil` - returns the zero based index of the new column"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/lnbAddColumn"
        },
        "configuration": {
            "label": "lnbAddColumn",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds a row of strings.",
            "examples": [
                {
                    "text": "```sqf\nlnbAddRow [1, [\"COL1\", \"COL2\"]];\n```"
                },
                {
                    "text": "```sqf\n_ctrl lnbAddRow [\"COL1\", \"COL2\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "data",
                            "description": "`Array` of `String`s"
                        }
                    ],
                    "outline": "`lnbAddRow` [idc, data]",
                    "returns": "`Number` - row index"
                },
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "data",
                            "description": "`Array` of `String`s"
                        }
                    ],
                    "outline": "ctrl `lnbAddRow` data",
                    "returns": "`Number` - row index"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/lnbAddRow"
        },
        "configuration": {
            "label": "lnbAddRow",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Clears all items in the given listbox or combobox.",
            "examples": [
                {
                    "text": "```sqf\nlnbClear _ctrl;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`lnbClear` idc",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`lnbClear` ctrl",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lnbClear"
        },
        "configuration": {
            "label": "lnbClear",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the text color of the item with the given position of the 2D listbox. The color is returned in format [[Color|Color (RGBA)]].",
            "examples": [
                {
                    "text": "```sqf\n_ctrl lnbColor [0,0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "row",
                            "description": "`Number`"
                        },
                        {
                            "name": "column",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`lnbColor` [idc, [row, column]]",
                    "returns": "`Array`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "row",
                            "description": "`Number`"
                        },
                        {
                            "name": "column",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "control `lnbColor` [row, column]",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lnbColor"
        },
        "configuration": {
            "label": "lnbColor",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the right color of given row.",
            "examples": [
                {
                    "text": "```sqf\nprivate _result = _control lnbColorRight [0, 0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "row",
                            "description": "`Number` - index of the row"
                        },
                        {
                            "name": "column",
                            "description": "`Number` - index of the column"
                        }
                    ],
                    "outline": "`lnbColorRight` [idc, [row, column]]",
                    "returns": "`Array` - RGBA"
                },
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "row",
                            "description": "`Number` - index of the row"
                        },
                        {
                            "name": "column",
                            "description": "`Number` - index of the column"
                        }
                    ],
                    "outline": "ctrl `lnbColorRight` [row, column]",
                    "returns": "`Array` - RGBA"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lnbColorRight"
        },
        "configuration": {
            "label": "lnbColorRight",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the index of the selected row id 2D listbox.",
            "examples": [
                {
                    "text": "```sqf\nlnbCurSelRow _ctrl;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`lnbCurSelRow` idc",
                    "returns": "`Number`"
                },
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`lnbCurSelRow` ctrl",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lnbCurSelRow"
        },
        "configuration": {
            "label": "lnbCurSelRow",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the additional text (invisible) in an item with the given position of the 2D listbox.",
            "examples": [
                {
                    "text": "```sqf\n_ctrl lnbData [lnbCurSelRow _ctrl,0]; // \"#1\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` or `Control`"
                        },
                        {
                            "name": "row",
                            "description": "`Number`"
                        },
                        {
                            "name": "column",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`lnbData` [idc, [row, column]]",
                    "returns": "`String`"
                },
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "row",
                            "description": "`Number`"
                        },
                        {
                            "name": "column",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "ctrl `lnbData` [row, column]",
                    "returns": "`String`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/lnbData"
        },
        "configuration": {
            "label": "lnbData",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes column with given index from ListNBox control.",
            "examples": [
                {
                    "text": "```sqf\n_ctrl lnbDeleteColumn 1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`lnbDeleteColumn` [idc, index]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "ctrl `lnbDeleteColumn` index",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/lnbDeleteColumn"
        },
        "configuration": {
            "label": "lnbDeleteColumn",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes row with the given index from the given listbox or combobox.",
            "examples": [
                {
                    "text": "```sqf\n_ctrl lnbDeleteRow 1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "_ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "row",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "_ctrl `lnbDeleteRow` row",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lnbDeleteRow"
        },
        "configuration": {
            "label": "lnbDeleteRow",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns relative screen X of ListNBox control columns position [0.1,0.3,0.6...]. Use `lnbSetColumnsPos` to set positions.",
            "examples": [
                {
                    "text": "```sqf\nlnbGetColumnsPosition _ctrl;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "_ctrl",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`lnbGetColumnsPosition` _ctrl",
                    "returns": "`Array`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/lnbGetColumnsPosition"
        },
        "configuration": {
            "label": "lnbGetColumnsPosition",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the picture name or path of the item with the given position of the 2D listbox.",
            "examples": [
                {
                    "text": "```sqf\nlnbPicture [200, [1, 1]];\n```"
                },
                {
                    "text": "```sqf\n_control lnbPicture [1, 1]; // \"a3\\ui_f\\data\\gui\\cfg\\ranks\\corporal_gs.paa\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - number of `Control`"
                        },
                        {
                            "name": "row",
                            "description": "`Number` - index of Row"
                        },
                        {
                            "name": "column",
                            "description": "`Number` - index of Column"
                        }
                    ],
                    "outline": "`lnbPicture` [idc, [row, column]]",
                    "returns": "`String`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "row",
                            "description": "`Number` - index of Row in given Control"
                        },
                        {
                            "name": "column",
                            "description": "`Number` - index of Column in given Control"
                        }
                    ],
                    "outline": "control `lnbPicture` [row, column]",
                    "returns": "`String`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/lnbPicture"
        },
        "configuration": {
            "label": "lnbPicture",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the right picture of given row. The _column_ parameter does not matter.",
            "examples": [
                {
                    "text": "```sqf\n_path = _control lnbPictureRight [0, 0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "row",
                            "description": "`Number` - index of the row"
                        },
                        {
                            "name": "column",
                            "description": "`Number` - index of the column"
                        }
                    ],
                    "outline": "`lnbPictureRight` [idc, [row, column]]",
                    "returns": "`String` - path of image"
                },
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "row",
                            "description": "`Number` - index of the row"
                        },
                        {
                            "name": "column",
                            "description": "`Number` - index of the column"
                        }
                    ],
                    "outline": "ctrl `lnbPictureRight` [row, column]",
                    "returns": "`String` - path of image"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lnbPictureRight"
        },
        "configuration": {
            "label": "lnbPictureRight",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the color of the item with the given position of the 2D listbox. Color is in format [[Color|Color (RGBA)]].",
            "examples": [
                {
                    "text": "```sqf\n_ctrl lnbSetColor [[0,0], [1,0,0,1]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "row",
                            "description": "`Number`"
                        },
                        {
                            "name": "column",
                            "description": "`Number`"
                        },
                        {
                            "name": "color",
                            "description": "`Array` format [[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "`lnbSetColor` [idc, [row, column], color]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "row",
                            "description": "`Number`"
                        },
                        {
                            "name": "column",
                            "description": "`Number`"
                        },
                        {
                            "name": "color",
                            "description": "`Array` format [[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "ctrl `lnbSetColor` [<nowiki/>[row, column], color]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/lnbSetColor"
        },
        "configuration": {
            "label": "lnbSetColor",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the right color.",
            "examples": [
                {
                    "text": "```sqf\n_control lnbSetColorRight [[0, 0], [1,1,1,0.5]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "row",
                            "description": "`Number` - index of the row"
                        },
                        {
                            "name": "column",
                            "description": "`Number` - index of the column"
                        },
                        {
                            "name": "color",
                            "description": "`Array` - color RGBA"
                        }
                    ],
                    "outline": "`lnbSetColorRight` [idc, [row, column], color]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "row",
                            "description": "`Number` - index of the row"
                        },
                        {
                            "name": "column",
                            "description": "`Number` - index of the column"
                        },
                        {
                            "name": "color",
                            "description": "`Array` - color RGBA"
                        }
                    ],
                    "outline": "ctrl `lnbSetColorRight` [<nowiki/>[row, column], color]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lnbSetColorRight"
        },
        "configuration": {
            "label": "lnbSetColorRight",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets relative screen X for ListNBox control columns positions. Setter for `lnbGetColumnsPosition`.",
            "examples": [
                {
                    "text": "```sqf\nlnbSetColumnsPos [101, [0.1,0.5,0.7]];\n```"
                },
                {
                    "text": "```sqf\n_ctrl lnbSetColumnsPos [0.1,0.5,0.7];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - idc of the control"
                        },
                        {
                            "name": "positions",
                            "description": "`Array` - positions of the columns"
                        }
                    ],
                    "outline": "`lnbSetColumnsPos` [idc, positions]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control` - lnb control"
                        },
                        {
                            "name": "positions",
                            "description": "`Array` - positions of the columns"
                        }
                    ],
                    "outline": "ctrl `lnbSetColumnsPos` positions",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lnbSetColumnsPos"
        },
        "configuration": {
            "label": "lnbSetColumnsPos",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Selects the row with the given index of the 2D listbox.",
            "examples": [
                {
                    "text": "```sqf\ndisableSerialization;\n_ctrl = (findDisplay 300) displayCtrl 304;\n_ctrl lnbSetCurSelRow 1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`lnbSetCurSelRow` [idc, index]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "ctrl `lnbSetCurSelRow` index",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lnbSetCurSelRow"
        },
        "configuration": {
            "label": "lnbSetCurSelRow",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the additional text (invisible) on the item with the given position of the 2D listbox.",
            "examples": [
                {
                    "text": "```sqf\nlnbSetData [123, [0,0],\"#1\"];\n```"
                },
                {
                    "text": "```sqf\n_ctrl lnbSetData [[0,0],\"#1\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "row",
                            "description": "`Number`"
                        },
                        {
                            "name": "column",
                            "description": "`Number`"
                        },
                        {
                            "name": "data",
                            "description": "`String` - the invisible text to add"
                        }
                    ],
                    "outline": "`lnbSetData` [idc, [row, column], data]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "row",
                            "description": "`Number`"
                        },
                        {
                            "name": "column",
                            "description": "`Number`"
                        },
                        {
                            "name": "data",
                            "description": "`String` - the invisible text to add"
                        }
                    ],
                    "outline": "ctrl `lnbSetData` [<nowiki/>[row, column], data]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lnbSetData"
        },
        "configuration": {
            "label": "lnbSetData",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the picture in the item with the given position of the 2D listbox.The picture is searched in the mission, directory, the dtaExt subdirectory of the campaign directory, and the dtaExt directory and the data bank (or directory).",
            "examples": [
                {
                    "text": "```sqf\nlnbSetPicture [1, [0, 0], \"Picture\"];\n```"
                },
                {
                    "text": "```sqf\n_ctrl lnbSetPicture [[0, 0], \"\\A3\\Ui_f\\data\\GUI\\Cfg\\Ranks\\lieutenant_gs.paa\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "row",
                            "description": "`Number`"
                        },
                        {
                            "name": "column",
                            "description": "`Number`"
                        },
                        {
                            "name": "picturePathOrName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`lnbSetPicture` [idc, [row, column], picturePathOrName]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "row",
                            "description": "`Number`"
                        },
                        {
                            "name": "column",
                            "description": "`Number`"
                        },
                        {
                            "name": "picturePathOrName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "ctrl `lnbSetPicture` [<nowiki/>[row, column], picturePathOrName]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lnbSetPicture"
        },
        "configuration": {
            "label": "lnbSetPicture",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the cell picture's colour.",
            "examples": [
                {
                    "text": "```sqf\nlnbSetPictureColor [1492, [1,0], [0,0.75,0.3,0.5]];\n```"
                },
                {
                    "text": "```sqf\nctrl lnbSetPictureColor [[0, 3], [1,0,0,1]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "row",
                            "description": "`Number` - 0-based index (first column is 0, second is 1, etc)"
                        },
                        {
                            "name": "column",
                            "description": "`Number` - 0-based index (first column is 0, second is 1, etc)"
                        },
                        {
                            "name": "colour",
                            "description": "[[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "`lnbSetPictureColor` [idc, [row, column], colour]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "row",
                            "description": "`Number` - 0-based index (first column is 0, second is 1, etc)"
                        },
                        {
                            "name": "column",
                            "description": "`Number` - 0-based index (first column is 0, second is 1, etc)"
                        },
                        {
                            "name": "colour",
                            "description": "[[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "ctrl `lnbSetPictureColor` [<nowiki/>[row, column], colour]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lnbSetPictureColor"
        },
        "configuration": {
            "label": "lnbSetPictureColor",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets color of the right picture in a `CT_LISTNBOX`.",
            "examples": [
                {
                    "text": "```sqf\n_control lnbSetPictureColorRight [[0, 0], [1,1,1,0.5]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "row",
                            "description": "`Number` - index of the row"
                        },
                        {
                            "name": "column",
                            "description": "`Number` - index of the column"
                        },
                        {
                            "name": "color",
                            "description": "`Array` - color RGBA"
                        }
                    ],
                    "outline": "`lnbSetPictureColorRight` [idc, [row, column], color]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "row",
                            "description": "`Number` - index of the row"
                        },
                        {
                            "name": "column",
                            "description": "`Number` - index of the column"
                        },
                        {
                            "name": "color",
                            "description": "`Array` - color RGBA"
                        }
                    ],
                    "outline": "ctrl `lnbSetPictureColorRight` [<nowiki/>[row, column], color]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lnbSetPictureColorRight"
        },
        "configuration": {
            "label": "lnbSetPictureColorRight",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the cell picture's colour on cell selection.",
            "examples": [
                {
                    "text": "```sqf\nlnbSetPictureColorSelected [1492, [1,0], [0,0.75,0.3,0.5]];\n```"
                },
                {
                    "text": "```sqf\nctrl lnbSetPictureColorSelected [[0, 3], [1,0,0,1]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "row",
                            "description": "`Number` - 0-based index (first row is 0, second is 1, etc)"
                        },
                        {
                            "name": "column",
                            "description": "`Number` - 0-based index (first column is 0, second is 1, etc)"
                        },
                        {
                            "name": "colour",
                            "description": "[[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "`lnbSetPictureColorSelected` [idc, [row, column], colour]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "row",
                            "description": "`Number` - 0-based index (first row is 0, second is 1, etc)"
                        },
                        {
                            "name": "column",
                            "description": "`Number` - 0-based index (first column is 0, second is 1, etc)"
                        },
                        {
                            "name": "colour",
                            "description": "[[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "ctrl `lnbSetPictureColorSelected` [<nowiki/>[row, column], colour]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lnbSetPictureColorSelected"
        },
        "configuration": {
            "label": "lnbSetPictureColorSelected",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the color of the right picture when it is selected.",
            "examples": [
                {
                    "text": "```sqf\n_control lnbSetPictureColorSelectedRight [[0, 0], [1,1,1,0.5]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "row",
                            "description": "`Number` - index of the row"
                        },
                        {
                            "name": "column",
                            "description": "`Number` - index of the column"
                        },
                        {
                            "name": "color",
                            "description": "`Array` - color RGBA"
                        }
                    ],
                    "outline": "`lnbSetPictureColorSelectedRight` [idc, [row, column], color]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "row",
                            "description": "`Number` - index of the row"
                        },
                        {
                            "name": "column",
                            "description": "`Number` - index of the column"
                        },
                        {
                            "name": "color",
                            "description": "`Array` - color RGBA"
                        }
                    ],
                    "outline": "ctrl `lnbSetPictureColorSelectedRight` [<nowiki/>[row, column], color]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lnbSetPictureColorSelectedRight"
        },
        "configuration": {
            "label": "lnbSetPictureColorSelectedRight",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the cell's right-picture. The picture is set to the end of the **row**, the _column_ parameter does not matter.\n**NOTE**: The picture is searched in the mission, directory, the campaign directory's dtaExt subdirectory, and the data bank (or directory).",
            "examples": [
                {
                    "text": "```sqf\nlnbSetPictureRight [1, [0, 0], \"Picture.paa\"];\n```"
                },
                {
                    "text": "```sqf\n_ctrl lnbSetPictureRight [[0, 0], \"\\A3\\Ui_f\\data\\GUI\\Cfg\\Ranks\\lieutenant_gs.paa\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "row",
                            "description": "`Number` - 0-based index (first row is 0, second is 1, etc)"
                        },
                        {
                            "name": "column",
                            "description": "`Number` - 0-based index (first column is 0, second is 1, etc)"
                        },
                        {
                            "name": "path",
                            "description": "`String` - the picture's file path"
                        }
                    ],
                    "outline": "`lnbSetPictureRight` [idc, [row, column], path]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "row",
                            "description": "`Number` - 0-based index (first row is 0, second is 1, etc)"
                        },
                        {
                            "name": "column",
                            "description": "`Number` - 0-based index (first column is 0, second is 1, etc)"
                        },
                        {
                            "name": "path",
                            "description": "`String` - the picture's file path"
                        }
                    ],
                    "outline": "ctrl `lnbSetPictureRight` [<nowiki/>[row, column], path]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lnbSetPictureRight"
        },
        "configuration": {
            "label": "lnbSetPictureRight",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the text in the item with the given position of the 2D listbox.",
            "examples": [
                {
                    "text": "```sqf\nlnbSetText [101, [0,1], \"#1\"];\n```"
                },
                {
                    "text": "```sqf\n_ctrl lnbSetText [[0,1], \"#1\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "row",
                            "description": "`Number`"
                        },
                        {
                            "name": "column",
                            "description": "`Number`"
                        },
                        {
                            "name": "data",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`lnbSetText` [idc, [row, column], data]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "row",
                            "description": "`Number`"
                        },
                        {
                            "name": "column",
                            "description": "`Number`"
                        },
                        {
                            "name": "data",
                            "description": "`String`"
                        }
                    ],
                    "outline": "ctrl `lnbSetText` [<nowiki/>[row, column], data]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/lnbSetText"
        },
        "configuration": {
            "label": "lnbSetText",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets cell's right-aligned text. Does not replace [[lnbText|cell's text]].",
            "examples": [
                {
                    "text": "```sqf\nlnbSetTextRight [1492, [1,0], \"right text\"];\n```"
                },
                {
                    "text": "```sqf\n_ctrl lnbSetTextRight [[0, 3], \"right text\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "row",
                            "description": "`Number` - 0-based index (first row is 0, second is 1, etc)"
                        },
                        {
                            "name": "column",
                            "description": "`Number` - 0-based index (first column is 0, second is 1, etc)"
                        },
                        {
                            "name": "text",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`lnbSetTextRight` [idc, [row, column], text]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "row",
                            "description": "`Number` - 0-based index (first row is 0, second is 1, etc)"
                        },
                        {
                            "name": "column",
                            "description": "`Number` - 0-based index (first column is 0, second is 1, etc)"
                        },
                        {
                            "name": "text",
                            "description": "`String`"
                        }
                    ],
                    "outline": "ctrl `lnbSetTextRight` [<nowiki/>[row, column], text]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lnbSetTextRight"
        },
        "configuration": {
            "label": "lnbSetTextRight",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets tooltip on the item with the given row and column of `CT_LISTNBOX`.\n**IMPORTANT**: \nBy default, tooltips are added for all columns no matter what column index is provided.\nThis behaviour can be overwritten since **(Arma 3)** by setting the control's property `**tooltipPerColumn**` to `true`.\nSee [CT_LISTNBOX documentation](https://community.bistudio.com/wiki/CT_LISTNBOX%23tooltipPerColumn).",
            "examples": [
                {
                    "text": "```sqf\nlnbSetTooltip [1234, [1,0], \"tip\"];\n```"
                },
                {
                    "text": "```sqf\n_ctrl lnbSetTooltip [[3,0], \"top\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - control's IDC"
                        },
                        {
                            "name": "row",
                            "description": "`Number` - row where the tooltip should be shown"
                        },
                        {
                            "name": "column",
                            "description": "`Number` - column where tooltip should be shown. By default it is set for every column, see description"
                        },
                        {
                            "name": "text",
                            "description": "`String` - tooltip text"
                        }
                    ],
                    "outline": "`lnbSetTooltip` [idc, [row, column], text]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control` - control"
                        },
                        {
                            "name": "row",
                            "description": "`Number` - row where the tooltip should be shown"
                        },
                        {
                            "name": "column",
                            "description": "`Number` - column where tooltip should be shown. By default it is set for every column, see description"
                        },
                        {
                            "name": "text",
                            "description": "`String` - tooltip text"
                        }
                    ],
                    "outline": "ctrl `lnbSetTooltip` [<nowiki/>[row, column], text]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lnbSetTooltip"
        },
        "configuration": {
            "label": "lnbSetTooltip",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the additional **integer** value in the item with the position index of the 2D listbox.",
            "examples": [
                {
                    "text": "```sqf\n_ctrl lnbSetValue [[0,0],1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "row",
                            "description": "`Number`"
                        },
                        {
                            "name": "column",
                            "description": "`Number`"
                        },
                        {
                            "name": "value",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`lnbSetValue` [idc, [row, column], value]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "row",
                            "description": "`Number`"
                        },
                        {
                            "name": "column",
                            "description": "`Number`"
                        },
                        {
                            "name": "value",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "control `lnbSetValue` [<nowiki/>[row, column], value]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lnbSetValue"
        },
        "configuration": {
            "label": "lnbSetValue",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns size of `CT_LISTNBOX`. This command supports `CT_TOOLBOX` control since Arma 3 v2.06. For `CT_COMBO` or `CT_LISTBOX` see `lbSize`.",
            "examples": [
                {
                    "text": "```sqf\nlnbSize _control;\n```"
                },
                {
                    "text": "```sqf\nlnbSize _someIDC;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlOrIDC",
                            "description": "`Control` or `Number` - control or control's IDC"
                        }
                    ],
                    "outline": "`lnbSize` controlOrIDC",
                    "returns": "`Array` - in format [rows, columns]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lnbSize"
        },
        "configuration": {
            "label": "lnbSize",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sorts given multicolumn listbox by `lnbText` in given column in ascending or descending order.\n**IMPORTANT**: This command does not support UNICODE, use `lnbSortBy` if it is needed instead",
            "examples": [
                {
                    "text": "```sqf\nlnbSort [1800, 1, false];\n```"
                },
                {
                    "text": "```sqf\n_ctl lnbSort [1, true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "column",
                            "description": "`Number`"
                        },
                        {
                            "name": "reversed",
                            "description": "`Boolean` - (Optional, default `false`) `false`: descending / `true`: ascending"
                        }
                    ],
                    "outline": "`lnbSort` [idc, column, reversed]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "column",
                            "description": "`Number`"
                        },
                        {
                            "name": "reversed",
                            "description": "`Boolean` - (Optional, default `false`) `false`: descending / `true`: ascending"
                        }
                    ],
                    "outline": "control `lnbSort` [column, reversed]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lnbSort"
        },
        "configuration": {
            "label": "lnbSort",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sorts given multi-column ListNBox in the given column by either `lnbText`, `lnbValue` or `lnbData` in normal or reversed order, using case-sensitive or case-insensitive comparison. Unlike the older **lnbSortXXX** commands, this command supports UNICODE characters out of the box.\n\nWhen sorting by `**\"VALUE\"**`, the rows with the same `lnbValue` will additionally be sorted by `lnbText` in the order specified by the _reversedOrder_ flag, text specified by `useTextRight` flag and case-sensitivity specified by `caseSensitive` flag.\n\n**IMPORTANT**: \n* This command supports referencing control via IDC as well, but as with any use of IDC in UI `Control` commands, a `dialog` should be present, i.e. UI user interaction is created with `createDialog` rather than `createDisplay`.\n* As this command supports UNICODE by default, which may result in slower sorting, you can switch it off with `**unicodeOff**` param.",
            "examples": [
                {
                    "text": "```sqf\n\nwith uiNamespace do\n{\n\tprivate _column = 1;\n\tprivate _lnb = findDisplay 46 createDisplay \"RscDisplayEmpty\" ctrlCreate [\"RscListNBox\", -1];\n\t_lnb ctrlSetPosition [0,0,1,1];\n\t_lnb ctrlCommit 0;\n\tlnbClear _lnb;\n\t{ \n\t\t_lnb lnbAddRow [format [\"Row %1\", _forEachIndex], _x select 0];\n\t\t_lnb lnbSetValue [[_forEachIndex, _column], _x select 1];\n\t} \n\tforEach [[\"В\",1], [\"Я\",0], [\"Б\",1], [\"Ю\",0], [\"А\",1]];\n\t[_lnb, _column] lnbSortBy [\"VALUE\", true, false];\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlOrIDC",
                            "description": "`Control` or `Number` - the ListNBox control or its IDC"
                        },
                        {
                            "name": "column",
                            "description": "`Number` - column to sort (starts with 0)"
                        },
                        {
                            "name": "sortByType",
                            "description": "`String` - (Optional, default \"TEXT\") one of:\n* `**\"TEXT\"**`\n* `**\"VALUE\"**`\n* `**\"DATA\"**`"
                        },
                        {
                            "name": "reversedOrder",
                            "description": "`Boolean` - (Optional, default `false`) `true` for sorting in reversed order"
                        },
                        {
                            "name": "caseSensitive",
                            "description": "`Boolean` - (Optional, default `false`) `true` for using case-sensitive comparison"
                        },
                        {
                            "name": "useTextRight",
                            "description": "`Boolean` - (Optional, default `false`) `true` to sort by [ text right](https://community.bistudio.com/wiki/lnbSetTextRight%20)"
                        },
                        {
                            "name": "unicodeOff",
                            "description": "`Boolean` - (Optional, default `false`) `true` to switch off UNICODE conversion for faster sorting"
                        }
                    ],
                    "outline": "[controlOrIDC, column] `lnbSortBy` [sortByType, reversedOrder, caseSensitive, useTextRight,  unicodeOff]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lnbSortBy"
        },
        "configuration": {
            "label": "lnbSortBy",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sorts given multicolumn listbox by `lnbValue` in given column in ascending or descending order.",
            "examples": [
                {
                    "text": "```sqf\nlnbSortByValue [1800, 1, false];\n```"
                },
                {
                    "text": "```sqf\n_ctl lnbSortByValue [1, true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "column",
                            "description": "`Number`"
                        },
                        {
                            "name": "reversed",
                            "description": "`Boolean` - (Optional, default `false`) `false`: descending / `true`: ascending"
                        }
                    ],
                    "outline": "`lnbSortByValue` [idc, column, reversed]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "column",
                            "description": "`Number`"
                        },
                        {
                            "name": "reversed",
                            "description": "`Boolean` - (Optional, default `false`) `false`: descending / `true`: ascending"
                        }
                    ],
                    "outline": "control `lnbSortByValue` [column, reversed]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lnbSortByValue"
        },
        "configuration": {
            "label": "lnbSortByValue",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the shown text in the item with the given position of the given 2D listbox.",
            "examples": [
                {
                    "text": "```sqf\n_text = _ctrl lnbText [0,0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "row",
                            "description": "`Number`"
                        },
                        {
                            "name": "column",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "control `lnbText` [row, column]",
                    "returns": "`String`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/lnbText"
        },
        "configuration": {
            "label": "lnbText",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `CT_LISTNBOX`'s right aligned cell text.",
            "examples": [
                {
                    "text": "```sqf\n_text = _control lnbTextRight [0, 0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "row",
                            "description": "`Number` - index of the row"
                        },
                        {
                            "name": "column",
                            "description": "`Number` - index of the column"
                        }
                    ],
                    "outline": "`lnbTextRight` [idc, [row, column]]",
                    "returns": "`String`"
                },
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "row",
                            "description": "`Number` - index of the row"
                        },
                        {
                            "name": "column",
                            "description": "`Number` - index of the column"
                        }
                    ],
                    "outline": "ctrl `lnbTextRight` [row, column]",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lnbTextRight"
        },
        "configuration": {
            "label": "lnbTextRight",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the additional integer value in the item with the given position of the 2D listbox.",
            "examples": [
                {
                    "text": "```sqf\n_ctrl lnbValue [0,0]; // 1, default is 0 if value is String set by lnbSetValue\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "row",
                            "description": "`Number`"
                        },
                        {
                            "name": "column",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`lnbValue` [idc, [row, column]]",
                    "returns": "`Number`"
                },
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "row",
                            "description": "`Number`"
                        },
                        {
                            "name": "column",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "ctrl `lnbValue` [row, column]",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lnbValue"
        },
        "configuration": {
            "label": "lnbValue",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the percentage of fullness of a unit's cargo. Output is usually in range 0..1, but can be higher after using certain scripting commands (like `addWeaponWithAttachmentsCargoGlobal`) which ignore load values when adding items.\n**NOTE**: See _Example 2_ for load calculation.",
            "examples": [
                {
                    "text": "```sqf\nload player;\n```"
                },
                {
                    "text": "unit load calculation formula:\n\n```sqf\nprivate _unitLoad = loadAbs _unit / getNumber (configFile >> \"CfgInventoryGlobalVariable\" >> \"maxSoldierLoad\");\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - (before {{GVI|arma3|2.08"
                        }
                    ],
                    "outline": "`load` unit",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/load"
        },
        "configuration": {
            "label": "load",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Load the provided scenario or an empty scenario in the provided world.",
            "examples": [
                {
                    "text": "```sqf\nload3DENScenario \"MyMission.VR\";\n```"
                },
                {
                    "text": "```sqf\nload3DENScenario \"Stratis\";\n```"
                },
                {
                    "text": "```sqf\n\n//For a scenario located at ...\\Arma 3 - Other Profiles\\<PROFILENAME>\\missions\\subfolder\\myMission.VR\n//full path needs to be provided without leading \\\nload3DENScenario \"missions\\subfolder\\myMission.VR\";\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "scenarioOrWorld",
                            "description": "`String` - scenario name or world name"
                        }
                    ],
                    "outline": "`load3DENScenario` scenarioOrWorld",
                    "returns": "`Boolean` - `true` on success, `false` otherwise"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/load3DENScenario"
        },
        "configuration": {
            "label": "load3DENScenario",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns current sum of mass from items stored in all unit's containers, linked items and weapons.",
            "examples": [
                {
                    "text": "Player weight: \n```sqf\n_weight = loadAbs player;\n```"
                },
                {
                    "text": "```sqf\n\nprivate _loadUniform = loadAbs uniformContainer player;\nprivate _loadVest = loadAbs vestContainer player;\nprivate _loadBackpack = loadAbs backpackContainer player;\nhint format [\n\t\"Player's load:\\nUniform: %1\\nVest:%2\\nBackpack: $3\\nTotal: %4\",\n\t_loadUniform,\n\t_loadVest,\n\t_loadBackpack,\n\t_loadUniform + _loadVest + _loadBackpack\n];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - (before {{GVI|arma3|2.08"
                        }
                    ],
                    "outline": "`loadAbs` unit",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/loadAbs"
        },
        "configuration": {
            "label": "loadAbs",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns current percentage of mass from items stored in a backpack relative to the maximum capacity of the backpack.\n\nIt is equivalent to this formula:\n\n```sqf\n_loadBackpack = massOfAllItemsInBackpack / getContainerMaxLoad backpack player;\n```",
            "examples": [
                {
                    "text": "```sqf\nprivate _myVariable = loadBackpack myUnit;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`loadBackpack` unit",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/loadBackpack"
        },
        "configuration": {
            "label": "loadBackpack",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Loads the given file as a `Config`, allowing easy processing of the config file contents using commands such as `configClasses`, `configProperties`, [[config greater greater name|>>]], etc. It can load [[Rvmat File Format|.rvmat]], .bisurf, [[CPP File Format|.cpp]], [[BIN File Formats|.bin]], [[Mission.sqm|.sqm]], and [[Description.ext|description.ext]] files (both binarized and unbinarized configs are supported).\n**IMPORTANT**: \n* Config loading can be very slow; the config should only be loaded once and cached, e.g in a `HashMap` of `**File Path &rarr; Config**` pairs (see _Example 3_).\n* It is advised to store the generated config in a variable, otherwise it will get destroyed if it is not being referenced directly (see _Example 2_).",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _cfg = loadConfig \"a3\\data_f\\default_super.rvmat\"; // note: very slow! ~0.1200 ms on tested system\ngetText (_cfg >> \"Stage2\" >> \"uvSource\");\n\n```"
                },
                {
                    "text": "```sqf\n\n// INCORRECT - the config is destroyed after the first operator >> accesses it\ngetNumber (loadConfig \"mission.sqm\" >> \"ScenarioData\" >> \"respawnDelay\");\n\n// CORRECT - the config is destroyed only when the variable _cfg is destroyed\n_cfg = loadConfig \"mission.sqm\";\ngetNumber (_cfg >> \"ScenarioData\" >> \"respawnDelay\");\n\n```"
                },
                {
                    "text": "```sqf\n\n// using a hashmap to cache loaded configs, since loading configs is very slow and should be done once.\nprivate _fnc_loadConfig = {\n\tparams [\"_path\"];\n\t// initialize cache if not initialized yet\n\tif (isNil \"TAG_configCache\") then\n\t{\n\t\tTAG_configCache = createHashMap;\n\t};\n\tprivate _cfg = TAG_configCache getOrDefault [_path, configNull];\n\t// if path doesn't exist in the cache or cfg is null, load the config\n\tif (isNull _cfg) then\n\t{\n\t\t_cfg = loadConfig _path;\n\t\tTAG_configCache set [_path, _cfg];\n\t};\n\t_cfg;\n};\n// the first call will be slow (~0.1200 ms), but subsequent calls are fast (~0.0050 ms)\n[\"a3\\data_f\\default_super.rvmat\"] call _fnc_loadConfig;\n\n```"
                },
                {
                    "text": "```sqf\n\n// converting a config into hashmap\nprivate _fnc_convertClass = {\n\tparams [\"_cfgClass\"];\n\n\tprivate _result = createHashMap;\n\tprivate _props = configProperties [_cfgClass, \"true\", true];\n\t// note: Hashmaps are case-sensitive so configName cases have to be consistent (e.g. all lowercase)\n\t{\n\t\tif (isNumber _x)\tthen { _result set [toLowerANSI configName _x, getNumber _x];\tcontinue; };\n\t\tif (isText _x)\t\tthen { _result set [toLowerANSI configName _x, getText _x];\t\tcontinue; };\n\t\tif (isArray _x)\t\tthen { _result set [toLowerANSI configName _x, getArray _x];\tcontinue; };\n\t} forEach _props;\n\n\tprivate _classes = \"true\" configClasses _cfgClass;\n\t{\n\t\t_result set [toLowerANSI configName _x, _x call _fnc_convertClass];\n\t} forEach _classes;\n\n\t_result;\n};\n\nprivate _cfg = loadConfig \"mission.sqm\";\nprivate _cfgMap = _cfg call _fnc_convertClass;\n\n// the following expression is similar to getNumber(_cfg >> \"EditorData\" >> \"moveGridStep\")\n// note that all strings are lowercase (which is how they were stored in hashmap)\n_cfgMap get \"editordata\" get \"movegridstep\";\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "path",
                            "description": "`String` - path to the file, which should be in a valid config format."
                        }
                    ],
                    "outline": "`loadConfig` path",
                    "returns": "`Config` - loaded config. Returns `configNull` if the file doesn't exist."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/loadConfig"
        },
        "configuration": {
            "label": "loadConfig",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Load the given selection preset to the current selection of the curator.",
            "examples": [
                {
                    "text": "```sqf\nloadCuratorSelectionPreset 1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "numkey",
                            "description": "`Number` - the number key under which the selection preset is saved"
                        }
                    ],
                    "outline": "`loadCuratorSelectionPreset` numkey",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/loadCuratorSelectionPreset"
        },
        "configuration": {
            "label": "loadCuratorSelectionPreset",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the content of given files. If you plan to `compile` said string, be aware that the file should not contain comments or `compile` will throw an error. If there are comments, use `preprocessFile`/`preprocessFileLineNumbers` instead.\n**WARNING**: If the file is not prepared using UTF-8 encoding and contains some characters [with codes](https://community.bistudio.com/wiki/toArray) > 127, they might convert incorrectly.",
            "examples": [
                {
                    "text": "```sqf\n_contents = loadFile \"wantedString.txt\";\n```"
                },
                {
                    "text": "```sqf\n_contents = compile loadFile \"myFunction.sqf\"; // will compile string into code\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "fileName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`loadFile` fileName",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/loadFile"
        },
        "configuration": {
            "label": "loadFile",
            "grammarType": "file-compiler"
        }
    },
    {
        "documentation": {
            "description": "Loads game from the last autosave made with `saveGame`.\nIf no autosave exists, restarts the mission. When used in campaign it will also deduct 1 life, defined in:\n\n```sqf\ncampaignConfigFile >> \"Campaign\" / \"ChapterName\" / \"MissionName\" / \"lives\"\n```\n\n\n**NOTE**: \nA `**[[Arma 3: Mission Event Handlers#Loaded|\"Loaded\"]]**` [mission event handler](https://community.bistudio.com/wiki/addMissionEventHandler) is available;\nit is important that it is added in `**preInit**` in order for it to fire on load from save.",
            "examples": [
                {
                    "text": "```sqf\nloadGame;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`loadGame`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/loadGame"
        },
        "configuration": {
            "label": "loadGame",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Loads person's identity from [[Objects.sav]] file in campaign directory (from entry name).",
            "examples": [
                {
                    "text": "```sqf\n_ok = player loadIdentity \"playerIdentity\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "name",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `loadIdentity`  name",
                    "returns": "`Boolean` - `true` if successfull, otherwise `false`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/loadIdentity"
        },
        "configuration": {
            "label": "loadIdentity",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Initiates the loading action on given weapon of the turret of a transport. So the new magazine is not available instantly, yet according to the reloadTime.\n\nThe turret has to be manned. One can also change the magazine if its respective weapon is not selected.",
            "examples": [
                {
                    "text": "```sqf\nvehicle player loadMagazine [[0], \"m256\", \"20Rnd_120mmHE_M1A2\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "transport",
                            "description": "`Object`"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` format [Turret Path](https://community.bistudio.com/wiki/Turret%20Path)"
                        },
                        {
                            "name": "weaponName",
                            "description": "`String`"
                        },
                        {
                            "name": "magazineName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "transport `loadMagazine` [turretPath, weaponName, magazineName]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/loadMagazine"
        },
        "configuration": {
            "label": "loadMagazine",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates the load overlay dialog for the specified type of overlay.\n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "config",
                            "description": "`Config`"
                        }
                    ],
                    "outline": "map `loadOverlay` config",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/loadOverlay"
        },
        "configuration": {
            "label": "loadOverlay",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Loads object's properties from [[Objects.sav]] file in campaign directory (from entry name).",
            "examples": [
                {
                    "text": "```sqf\n_ok = player loadStatus \"playerState\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "entryName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "object `loadStatus`  entryName",
                    "returns": "`Boolean` - `true` if successfull, otherwise `false`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/loadStatus"
        },
        "configuration": {
            "label": "loadStatus",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns current percentage of mass from items stored in a uniform relative to the maximum capacity of the uniform.\n\nIt is equivalent to this formula:\n\n```sqf\nprivate _loadUniform = massOfAllItemsInUniform / getContainerMaxLoad uniform player;\n```",
            "examples": [
                {
                    "text": "```sqf\nprivate _weight = loadUniform player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`loadUniform` unit",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/loadUniform"
        },
        "configuration": {
            "label": "loadUniform",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns current percentage of mass from items stored in a vest relative to the maximum capacity of the vest. \n\nIt is equivalent to this formula:\n\n```sqf\n_loadVest = massOfAllItemsInVest / getContainerMaxLoad vest player;\n```",
            "examples": [
                {
                    "text": "```sqf\n_weight = loadVest player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`loadVest` unit",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/loadVest"
        },
        "configuration": {
            "label": "loadVest",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check if given unit is local on the computer in multiplayer games - see {{Link|Multiplayer Scripting#Locality}}.\n\nThis can be used to determine on which computer some code must be run. In single player all objects are local.",
            "examples": [
                {
                    "text": "```sqf\n\nif (not local _unit) then\n{\n\thint format [\"%1 is remote\", name _unit];\n};\n\n```"
                },
                {
                    "text": "```sqf\n_isLocalGroup = local group _unit;\n```"
                },
                {
                    "text": "Sets variable's [scope](https://community.bistudio.com/wiki/Variables%23Scopes):\n\n```sqf\n\n// from Arma 2 v1.00 until Arma 3v1.54\nlocal _myVariable = 42;\n\n// since {{arma3}} v1.54\nprivate _myVariable = 42;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` or `Group` (since {{GVI|arma3|1.32"
                        }
                    ],
                    "outline": "`local` object",
                    "returns": "`Boolean`"
                },
                {
                    "parameters": [],
                    "outline": "`local` variable = value <span style=\"margin-left: 7em\">**{{Color|red|From Arma 2 v1.00 until Arma 3 v1.54}}** - see **`private`** for later versions</span>",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/local"
        },
        "configuration": {
            "label": "local",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Used to internationalise text messages. The provided translation key is looked up in [[Stringtable.xml]] (or [[Stringtable.csv]]).",
            "examples": [
                {
                    "text": "```sqf\n\nhint localize \"STR_West\";\t\t\t\t// returns \"BLUFOR\"\nhint localize \"STR_WEST\";\t\t\t\t// returns \"BLUFOR\"\nhint localize \"STR_weSt\";\t\t\t\t// returns \"BLUFOR\"\nhint localize \"STR_NonExistentString\";\t// returns \"\" and logs \"String STR_NonExistentString not found\"\n\n```"
                },
                {
                    "text": "```sqf\nhint format [\"Go %1\", localize \"STR_Q_NORTH\"]; // returns \"Go North\"\n```"
                },
                {
                    "text": "```sqf\n\nhint format \n[\n\tlocalize \"STR_ACTION_DROP_WEAPON\",\t// \"STR_ACTION_DROP_WEAPON\" contains \"Drop %1\"\n\tlocalize \"STR_SN_RIFLE\"\t\t\t\t// \"STR_SN_RIFLE\" contains \"Rifle\"\n]; // returns \"Drop Rifle\"\n\n```"
                },
                {
                    "text": "```sqf\nlocalize \"$STR_USRACT_ADJUST\"; // returns \"Adjust\" since Arma 3 v2.04\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "stringName",
                            "description": "`String` - string which leads to localisation. Casing does not matter. {{GVI|arma3|2.04"
                        }
                    ],
                    "outline": "`localize` stringName",
                    "returns": "`String` - text found in corresponding entry in stringtable file. If the key could not be found an empty string `**\"\"**` is returned and an entry is added to .rpt file, for example `**String STR_DN_SNAKE not found**`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/localize"
        },
        "configuration": {
            "label": "localize",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns local `Namespace` attached to the mission.\nHas the same lifetime as `missionNamespace` but variables **cannot be broadcasted** out of or into this namespace in multiplayer and will not be serialized when game is saved. UI variables can be safely stored in this namespace.\nUse `allVariables` command to save the variables elsewhere if required.",
            "examples": [
                {
                    "text": "```sqf\nlocalNamespace setVariable [\"abc\", 123];\n```"
                },
                {
                    "text": "```sqf\nwith localNamespace do { hint str abc };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`localNamespace`",
                    "returns": "`Namespace`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/localNamespace"
        },
        "configuration": {
            "label": "localNamespace",
            "grammarType": "namespace"
        }
    },
    {
        "documentation": {
            "description": "A non-existing `Location`. To compare non-existent locations use `isNull` or `isEqualTo`:\n\n```sqf\n\nlocationNull == locationNull;\t\t\t// false\nisNull locationNull;\t\t\t\t\t// true\nlocationNull isEqualTo locationNull;\t// true\n\n```",
            "examples": [
                {
                    "text": "```sqf\n!isNull locationNull; // false\n```"
                },
                {
                    "text": "```sqf\nstr locationNull; // No location\n```"
                },
                {
                    "text": "```sqf\nposition locationNull; // [0,0,0]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`locationNull`",
                    "returns": "`Location`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/locationNull"
        },
        "configuration": {
            "label": "locationNull",
            "grammarType": "null-literal"
        }
    },
    {
        "documentation": {
            "description": "Returns the [position](https://community.bistudio.com/wiki/Position) of a location. If the location is attached to an object, that object's position is returned.",
            "examples": [
                {
                    "text": "```sqf\n_locationPos = locationPosition myLocation;\n```"
                },
                {
                    "text": "```sqf\n\n_location = nearestLocation [getPos player, \"nameCity\"];\n_locationPos = locationPosition _location;\n\n```"
                },
                {
                    "text": "```sqf\n\nprivate _landLocation = locationPosition nearestLocation [[2915.2, 6164.52], \"NameCityCapital\"]; // \"Agia Marina\" [2915.2, 6164.52, -21.9009]\nprivate _waterLocation = locationPosition nearestLocation [[2647.8799, 5989.9502], \"NameMarine\"]; // \"Marina Bay\" [2647.88, 5989.95, 0.0161484]\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "location",
                            "description": "`Location`"
                        }
                    ],
                    "outline": "`locationPosition` location",
                    "returns": "`Array` format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) - as locations are placed at Z = zero [ASL](https://community.bistudio.com/wiki/Position%23PositionASL) the returned Z is negative on land and around zero on water, see _Example 3_"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/locationPosition"
        },
        "configuration": {
            "label": "locationPosition",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Lock vehicle (disable mounting / dismounting) for player.\nThis command will remove user get in/get out actions but will not stop player getting into or out of vehicle via script commands (e.g `moveInCargo`).\n**NOTE**: Alternative syntax is similar to `setVehicleLock` but with numbers.",
            "examples": [
                {
                    "text": "```sqf\n_jeepOne lock true;\n```"
                },
                {
                    "text": "```sqf\n\nheli lock true;\nlocked heli; // 2\n\nheli lock false;\nlocked heli; // 0\n\nheli lock 1;\nlocked heli; // 1\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicleName",
                            "description": "`Object`"
                        },
                        {
                            "name": "locked",
                            "description": "`Boolean` - `true` to lock, `false` to unlock"
                        }
                    ],
                    "outline": "vehicleName `lock` locked",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "vehicleName",
                            "description": "`Object`"
                        },
                        {
                            "name": "lockstate",
                            "description": "`Number` - can be one of the following:\n\n0 - Unlocked\n\n1 - Default (player subordinate cannot enter until his leader says so)\n\n2 - Locked\n\n3 - Locked for player"
                        }
                    ],
                    "outline": "vehicleName `lock` lockstate",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/lock"
        },
        "configuration": {
            "label": "lock",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Lock/Unlock stabilized camera to target. Works only on turrets which have optic mode selected with [direction stabilization enabled](https://community.bistudio.com/wiki/directionStabilizationEnabled).\n\n**NOTE**: Since **(Arma 3)** the command also works with non-stabilized turrets (such as main turret of a tank). See {{Link|#Alternative_Syntax|syntax 2}}.\n\n**NOTE**: The command is local to the **turret** gunner, not the vehicle.",
            "examples": [
                {
                    "text": "```sqf\nuav lockCameraTo [vehicle, [0,0]];\n```"
                },
                {
                    "text": "```sqf\nuav lockCameraTo [objNull, [0,0]]; // unlocks the turret\n```"
                },
                {
                    "text": "```sqf\nvehicle player lockCameraTo [enemyTarget, vehicle player unitTurret player, false];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - UAV"
                        },
                        {
                            "name": "target",
                            "description": "`Object` or `Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) - use `objNull` to unlock"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` - path to the turret with required camera"
                        }
                    ],
                    "outline": "vehicle `lockCameraTo` [target, turretPath]",
                    "returns": "`Nothing`\n\n**IMPORTANT**: \n* This syntax only works with stabilized turrets.\n* When using this syntax, if target is out of possible view, the turret will move to its limit and get stuck there, with blocked input."
                },
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - UAV"
                        },
                        {
                            "name": "target",
                            "description": "`Object` or `Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) - use `objNull` to unlock"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` - path to the turret with required camera"
                        },
                        {
                            "name": "temporary",
                            "description": "`Boolean` - if set to `true`, the engine will automatically remove the lock-on once the turret reaches its target.\nIf the target is out of turret's reach, the turret will move to the maximum of its capacity towards the target."
                        }
                    ],
                    "outline": "vehicle `lockCameraTo` [target, turretPath, temporary]",
                    "returns": "`Nothing`\n\n**NOTE**: This syntax also works with non-stabilised turrets, unlike {{Link|#Syntax 1}}."
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/lockCameraTo"
        },
        "configuration": {
            "label": "lockCameraTo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Lock all cargo positions of a vehicle or lock by index.\nThis command will remove user \"get in\" action (not get out) but will also stop player getting into vehicle via script commands (e.g `moveInCargo`) unlike `lock` command.",
            "examples": [
                {
                    "text": "```sqf\nvehicleName lockCargo true;\n```"
                },
                {
                    "text": "```sqf\nvehicleName lockCargo [0, true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "lock",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "vehicle `lockCargo` lock",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        },
                        {
                            "name": "lock",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "vehicle `lockCargo` [index, lock]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/lockCargo"
        },
        "configuration": {
            "label": "lockCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Lock the driver position of the vehicle. This command must be executed where vehicle is [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality). This command will remove user get in action (not get out) but will also stop player getting into vehicle via script commands unlike `lock` command",
            "examples": [
                {
                    "text": "```sqf\nvehicleName lockDriver true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "lock",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "vehicle `lockDriver` lock",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/lockDriver"
        },
        "configuration": {
            "label": "lockDriver",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check if `vehicle` is locked. If it is locked, [Persons](https://community.bistudio.com/wiki/Object%23Person) cannot mount / dismount without order.",
            "examples": [
                {
                    "text": "```sqf\n_locked = locked _jeepOne;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`locked` vehicle",
                    "returns": "* `Number` - since **(Arma 3)**\n** 0: Unlocked\n** 1: Default - a subordinate player cannot enter without AI leader order\n** 2: Locked\n** 3: Locked for player\n** -1: vehicle [is null](https://community.bistudio.com/wiki/isNull)\n* `Boolean` for older games"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/locked"
        },
        "configuration": {
            "label": "locked",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return the turret lock target.\n**NOTE**: The command is local to the **turret**, not the vehicle.",
            "examples": [
                {
                    "text": "```sqf\nvehicle player lockedCameraTo [];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` of `Number`s - turret path. Use an empty array to select the gunner's turret by default"
                        }
                    ],
                    "outline": "vehicle `lockedCameraTo` turretPath",
                    "returns": "Can be one of:\n* `Nothing` - not locked\n* `Object` - if locked to an object\n* `Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) - if locked to a position"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/lockedCameraTo"
        },
        "configuration": {
            "label": "lockedCameraTo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check whether cargo position of the vehicle is locked.",
            "examples": [
                {
                    "text": "```sqf\n_result = vehicleName lockedCargo 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "cargoIndex",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "vehicle `lockedCargo` cargoIndex",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lockedCargo"
        },
        "configuration": {
            "label": "lockedCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check whether driver position of the vehicle turret is locked.",
            "examples": [
                {
                    "text": "```sqf\n_driverLocked = lockedDriver vehicle player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`lockedDriver` vehicle",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lockedDriver"
        },
        "configuration": {
            "label": "lockedDriver",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get a vehicle's inventory lock state. Can also be used on a unit's backback (see `lockInventory`).",
            "examples": [
                {
                    "text": "```sqf\nprivate _isInventoryLocked = lockedInventory vehicle player;\n```"
                },
                {
                    "text": "```sqf\nprivate _isBackpackLocked = lockedInventory backpackContainer player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`lockedInventory` vehicle",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lockedInventory"
        },
        "configuration": {
            "label": "lockedInventory",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check whether gunner position of the vehicle turret is locked.",
            "examples": [
                {
                    "text": "```sqf\n_locked = tank lockedTurret [0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` format [Turret Path](https://community.bistudio.com/wiki/Turret%20Path)"
                        }
                    ],
                    "outline": "vehicle `lockedTurret` turretPath",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lockedTurret"
        },
        "configuration": {
            "label": "lockedTurret",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Locks the identity of a person. This will disable default identity.",
            "examples": [
                {
                    "text": "```sqf\n_success = lockIdentity player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`lockIdentity` unit",
                    "returns": "`Boolean` - `true`, if it was applied"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lockIdentity"
        },
        "configuration": {
            "label": "lockIdentity",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Lock or unlock a vehicle's inventory access.\nThis command can also lock backpack a unit is wearing to prevent access by a third party.\nIf set to `true` (locked), the inventory cannot be accessed _via_ hotkey or action menu.",
            "examples": [
                {
                    "text": "```sqf\nvehicle player lockInventory true;\n```"
                },
                {
                    "text": "```sqf\nbackpackContainer player lockInventory true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "lock",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "vehicle `lockInventory` lock",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/lockInventory"
        },
        "configuration": {
            "label": "lockInventory",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Lock the gunner position of the vehicle turret.\nThis command will remove user \"get in\" action (not \"get out\") but will also stop player getting into vehicle via script commands unlike `lock` command.",
            "examples": [
                {
                    "text": "```sqf\nvehicleName lockTurret [[0,0], true];\n```"
                },
                {
                    "text": "```sqf\nvehicle player lockTurret [[0], true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` format [Turret Path](https://community.bistudio.com/wiki/Turret%20Path)"
                        },
                        {
                            "name": "lock",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "vehicle `lockTurret` [turretPath, lock]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/lockTurret"
        },
        "configuration": {
            "label": "lockTurret",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Disable switching to next waypoint (current waypoint will never complete while lockwp is used). Sometimes used during cut-scenes.",
            "examples": [
                {
                    "text": "```sqf\n_groupOne lockWP true;\n```"
                },
                {
                    "text": "```sqf\n_Soldier lockWP true;\n```"
                },
                {
                    "text": "```sqf\n_MyTank lockWP false;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "groupName",
                            "description": "`Object` or `Group`"
                        },
                        {
                            "name": "lock",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "groupName `lockWP` lock",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/lockWP"
        },
        "configuration": {
            "label": "lockWP",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Base-10 logarithm of x. [[File:A3 logx.jpg|thumb|The function of log(x) will never touch the y-axis.]]",
            "examples": [
                {
                    "text": "```sqf\n_log = log 10;\n```"
                },
                {
                    "text": "```sqf\n_log = log abs -10;\n```"
                },
                {
                    "text": "```sqf\nfinite log -10; // Returns false\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "x",
                            "description": "`Number` - a positive number"
                        }
                    ],
                    "outline": "`log`  x",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/log"
        },
        "configuration": {
            "label": "log",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates a log file containing the list of all game entities in scene. \n\nFile is created in the same directory as [[Crash_Files|.rpt file]]. \n\nSpecial: BattlEye's RCON variant of this command is #logEntities (see also `Multiplayer_Server_Commands`)",
            "examples": [
                {
                    "text": "```sqf\nlogEntities;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**logEntities**",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/logEntities"
        },
        "configuration": {
            "label": "logEntities",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Registers new log file recording a network traffic and returns handle of the log. The log file is saved inside the Arma 3 root folder.\n**IMPORTANT**: `logNetwork` can potentially create a large log file.",
            "examples": [
                {
                    "text": "```sqf\n_handle = logNetwork [\"myLog.txt\", [\"\"]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "logFile",
                            "description": "`String` - where to store the log"
                        },
                        {
                            "name": "filter",
                            "description": "`Array` of `String`s - ????"
                        }
                    ],
                    "outline": "`logNetwork` logFile",
                    "returns": "`Number` - handle for the logging"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/logNetwork"
        },
        "configuration": {
            "label": "logNetwork",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Terminates a network log file started with `logNetwork` with the given handle",
            "examples": [
                {
                    "text": "```sqf\nlogNetworkTerminate _someHandle;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "handle",
                            "description": " `Number` - handle to terminate (created with `logNetwork`)"
                        }
                    ],
                    "outline": "`logNetworkTerminate` handle",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/logNetworkTerminate"
        },
        "configuration": {
            "label": "logNetworkTerminate",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Control what the unit(s) is/are looking at (target or `Position`). If target is used, it will get revealed fully.",
            "examples": [
                {
                    "text": "```sqf\n_someSoldier lookAt _otherSoldier;\n```"
                },
                {
                    "text": "```sqf\n[_someSoldier, _otherSoldier] lookAt markerPos \"markerOne\";\n```"
                },
                {
                    "text": "```sqf\nhint \"R U N !\";\nBFG = \"B_AAA_System_01_F\" createVehicle position player;\ncreateVehicleCrew BFG;\nt = time + 10;\nonEachFrame\n{\n\tBFG lookAt (unitAimPosition player vectorAdd (velocity player vectorMultiply 0.2));\n\tif (time > t && alive player) then\n\t{\n\t\t[BFG,\"weapon_Cannon_Phalanx\",[0]] call BIS_fnc_fire;\n\t};\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit(s)",
                            "description": "`Object` or `Array` of `Object`s"
                        },
                        {
                            "name": "position",
                            "description": "`Object` or `PositionAGL`"
                        }
                    ],
                    "outline": "unit(s) `lookAt` position",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lookAt"
        },
        "configuration": {
            "label": "lookAt",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Point the camera and center the map on the position.\n**NOTE**: Some Old Editor Command",
            "examples": [
                {
                    "text": "```sqf\nfindDisplay 12 lookAtPos [0,0,0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "position",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "map `lookAtPos` position",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/lookAtPos"
        },
        "configuration": {
            "label": "lookAtPos",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get array with magazines from ammo box (or any general weapon holder container).",
            "examples": [
                {
                    "text": "```sqf\nhint str magazineCargo uniformContainer cursorTarget;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - vehicle or ammo box"
                        }
                    ],
                    "outline": "`magazineCargo` object",
                    "returns": "`Array` - format: [\"MagType1\",\"MagType1\",\"MagType2\"...]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/magazineCargo"
        },
        "configuration": {
            "label": "magazineCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array of type names of all vehicle's magazines. When applied to a unit, the command behaves differently and will omit magazines already loaded into unit's weapons. Use `currentMagazine` to get this information for a currently loaded magazine.",
            "examples": [
                {
                    "text": "```sqf\n_mags = magazines player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - unit or vehicle"
                        }
                    ],
                    "outline": "`magazines` vehicle",
                    "returns": "`Array`"
                },
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - unit or vehicle"
                        },
                        {
                            "name": "includeEmpty",
                            "description": "`Boolean` - (Optional, default `false`) `true` to include empty magazines"
                        }
                    ],
                    "outline": "`magazines` [vehicle, includeEmpty]",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/magazines"
        },
        "configuration": {
            "label": "magazines",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns all magazines (including empty) from all vehicle turrets (including driver turret [-1]) and their ammo counts. Since Arma 3 v2.08.148327 it is possible to exclude person turrets from returned results.",
            "examples": [
                {
                    "text": "```sqf\n_mags = magazinesAllTurrets vehicle player;\n```"
                },
                {
                    "text": "```sqf\n_mags = magazinesAllTurrets [vehicle player, true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - vehicle with turrets"
                        }
                    ],
                    "outline": "`magazinesAllTurrets` vehicle",
                    "returns": "`Array` - in the following format: [<nowiki/>[className, turretPath, ammoCount, id, creator],...]  where:\n* className: `String` - magazine class name\n* turretPath: `Array` format [Turret Path](https://community.bistudio.com/wiki/Turret%20Path)\n* ammoCount: `Number` - how many rounds left in the magazine\n* id: `Number` - id of the magazine object. The number starts at 10,000,000. This gives it about 6,700,000 possible ids before the number starts losing precision and cannot be used in scripts.\n* creator: `Number` - `owner` / `clientOwner` of the PC that created the object"
                },
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - vehicle with turrets"
                        },
                        {
                            "name": "excludePersonTurrets",
                            "description": "`Boolean` - when `true` only vehicle's turrets are queried"
                        }
                    ],
                    "outline": "`magazinesAllTurrets` [vehicle, excludePersonTurrets]",
                    "returns": "`Array` - in the following format: [<nowiki/>[className, turretPath, ammoCount, id, creator],...]  where:\n* className: `String` - magazine class name\n* turretPath: `Array` format [Turret Path](https://community.bistudio.com/wiki/Turret%20Path)\n* ammoCount: `Number` - how many rounds left in the magazine\n* id: `Number` - id of the magazine object. The number starts at 10,000,000. This gives it about 6,700,000 possible ids before the number starts losing precision and cannot be used in scripts.\n* creator: `Number` - `owner` / `clientOwner` of the PC that created the object"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/magazinesAllTurrets"
        },
        "configuration": {
            "label": "magazinesAllTurrets",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns all vehicle's magazines and their ammo count (also works on supply boxes). When applied to a unit (soldier), the command behaves differently and will omit magazines already loaded into unit's weapons. Use `magazinesAmmoFull` to return all magazines.",
            "examples": [
                {
                    "text": "```sqf\n_magazinesAmmo = magazinesAmmo player;\n/*\n[\n\t[\"30Rnd_65x39_caseless_mag\",30],\n\t[\"30Rnd_65x39_caseless_mag\",30],\n\t[\"16Rnd_9x21_Mag\",16],\n\t[\"SmokeShellGreen\",1],\n\t[\"Chemlight_green\",1],\n\t[\"HandGrenade\",1]\n]\n*/\n```"
                },
                {
                    "text": "```sqf\n_magazinesAmmo = magazinesAmmo Mi_48;\n/*\n[\n\t[\"250Rnd_30mm_APDS_shells\",250],\n\t[\"250Rnd_30mm_HE_shells\",250],\n\t[\"8Rnd_LG_scalpel\",8],\n\t[\"38Rnd_80mm_rockets\",38]\n]\n*/\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - unit or vehicle or container. When transport is supplied, the command returns vehicle's magazines not the cargo. When container is supplied, the command behaves identically to `magazinesAmmoCargo`"
                        }
                    ],
                    "outline": "`magazinesAmmo` vehicle",
                    "returns": "`Array` of `Array`s in format:\n* `String`: magazine class name\n* `Number`: magazine ammo count"
                },
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - unit or vehicle."
                        },
                        {
                            "name": "includeEmpty",
                            "description": "`Boolean` - (Optional, default `false`) `true` to include empty magazines"
                        }
                    ],
                    "outline": "`magazinesAmmo` [vehicle, includeEmpty]",
                    "returns": "`Array` of `Array`s in format:\n* `String`: magazine class name\n* `Number`: magazine ammo count"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/magazinesAmmo"
        },
        "configuration": {
            "label": "magazinesAmmo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array of subarrays with the type names and ammo left of all the vehicle's cargo or container magazines.",
            "examples": [
                {
                    "text": "```sqf\nmagazinesAmmoCargo vehicle player;\n```"
                },
                {
                    "text": "```sqf\nmagazinesAmmoCargo uniformContainer player;\n```\n\n\n```sqf\n\n// returns:\n[\n\t[\"30Rnd_65x39_caseless_mag\",30],\n\t[\"30Rnd_65x39_caseless_mag\",30],\n\t[\"Chemlight_green\",1]\n]\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`magazinesAmmoCargo` vehicle",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/magazinesAmmoCargo"
        },
        "configuration": {
            "label": "magazinesAmmoCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array of arrays of all unit's or vehicle's magazines with extended information about them.\nThe magazines returned are for primary gunner. If you need magazines for all turrets, see `magazinesAllTurrets`.\n**IMPORTANT**: This command does not return empty magazines from containers, only from the weapon. Use `magazinesAmmoCargo` instead.",
            "examples": [
                {
                    "text": "```sqf\n\ntoFixed 0;\nmagazinesAmmoFull player;\n/*\n[\n\t[\"30Rnd_65x39_caseless_mag\",30,false,-1,\"Uniform\",10000003,0],\n\t[\"Chemlight_green\",1,true,0,\"ChemlightGreenMuzzle\",10000016,0],\n\t[\"30Rnd_65x39_caseless_mag\",30,false,-1,\"Vest\",10000008,0],\n\t[\"30Rnd_65x39_caseless_mag\",30,false,-1,\"Vest\",10000009,0],\n\t[\"30Rnd_65x39_caseless_mag\",30,false,-1,\"Vest\",10000010,0],\n\t[\"HandGrenade\",1,true,0,\"HandGrenadeMuzzle\",10000018,0],\n\t[\"HandGrenade\",1,false,-1,\"Vest\",10000019,0],\n\t[\"30Rnd_65x39_caseless_mag\",30,true,1,\"arifle_MX_ACO_pointer_F\",10000001,0],\n\t[\"16Rnd_9x21_Mag\",16,true,2,\"hgun_P07_F\",10000011,0]\n]\n*/\n```"
                },
                {
                    "text": "```sqf\n\ntoFixed 0;\nmagazinesAmmoFull Mi_48;\n/*\n[\n\t[\"250Rnd_30mm_HE_shells_Tracer_Green\",250,true,65536,\"HE\",10000043,0],\n\t[\"250Rnd_30mm_APDS_shells_Tracer_Green\",250,true,65536,\"AP\",10000044,0],\n\t[\"Laserbatteries\",1,true,65536,\"Laserdesignator_mounted\",10000045,0],\n\t[\"PylonRack_4Rnd_LG_scalpel\",4,false,-1,\"\",10000049,0],\n\t[\"PylonRack_19Rnd_Rocket_Skyfire\",19,false,-1,\"\",10000051,0],\n\t[\"PylonRack_19Rnd_Rocket_Skyfire\",19,false,-1,\"\",10000052,0],\n\t[\"PylonRack_4Rnd_LG_scalpel\",4,false,-1,\"\",10000053,0]\n]\n*/\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "`Object` - unit or vehicle"
                        }
                    ],
                    "outline": "`magazinesAmmoFull` entity",
                    "returns": "`Array` of `Array`s in format:\n* `String`: magazine class name\n* `Number`: magazine ammo count\n* `Boolean`: is magazine loaded\n* `Number`: magazine type:\n** -1 = n/a (default if magazine is not loaded)\n** 0 - grenade\n** 1 - primary weapon mag\n** 2 - handgun mag\n** 4 - secondary weapon mag\n** 4096 - binocular weapon mag\n** 65536 - vehicle mag\n* `String`: magazine location: \"Vest\", \"Uniform\", \"Backpack\", \"\" or `currentMuzzle` if the magazine is loaded\n* {{GVI|arma3|2.08"
                },
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - unit or vehicle"
                        },
                        {
                            "name": "includeEmpty",
                            "description": "`Boolean` - (Optional, default `false`) `true` to include empty magazines"
                        }
                    ],
                    "outline": "`magazinesAmmoFull` [vehicle, includeEmpty]",
                    "returns": "same as [Primary Syntax](https://community.bistudio.com/wiki/%23Syntax)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/magazinesAmmoFull"
        },
        "configuration": {
            "label": "magazinesAmmoFull",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array of strings with description of all vehicle's magazines, their ammo count (current/default) and their ids for the primary gunner. \n\nWhen applied to a unit (soldier), the command behaves differently and will omit magazines already loaded into unit's weapons. Use `currentMagazineDetail` to get this information for a currently loaded magazine.",
            "examples": [
                {
                    "text": "```sqf\n_magazinesDetail = magazinesDetail player;\n/*\n[\n\t\"6.5 mm 30Rnd Sand Mag(30/30)[id/cr:10000003/0]\",\n\t\"Chemlight (Green)(1/1)[id/cr:10000020/0]\",\n\t\"6.5 mm 30Rnd Sand Mag(30/30)[id/cr:10000012/0]\",\n\t\"RGO Grenade(1/1)[id/cr:10000016/0]\",\n\t\"RGO Grenade(1/1)[id/cr:10000017/0]\",\n\t\"6.5 mm 30Rnd Sand Mag(30/30)[id/cr:10000070/0]\",\n\t\"PCML Missile(1/1)[id/cr:10000072/0]\",\n\t\"6.5 mm 30Rnd Sand Mag(30/30)[id/cr:10000001/0]\",\n\t\"9 mm 16Rnd Mag(16/16)[id/cr:10000013/0]\"\n]\n*/\n```"
                },
                {
                    "text": "```sqf\n_magazinesDetail = magazinesDetail Mi_48;\n/*\n[\n\t\"30 mm HE Tracer (Green) Shells(250/250)[id/cr:10000043/0]\",\n\t\"30 mm APDS Tracer (Green) Shells(250/250)[id/cr:10000044/0]\",\n\t\"Designator Batteries(1/1)[id/cr:10000045/0]\",\n\t\"Scalpel 4x(4/4)[id/cr:10000049/0]\",\n\t\"Skyfire 19x(19/19)[id/cr:10000051/0]\",\n\t\"Skyfire 19x(19/19)[id/cr:10000052/0]\",\n\t\"Scalpel 4x(4/4)[id/cr:10000053/0]\"\n]\n*/\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - unit or vehicle"
                        }
                    ],
                    "outline": "`magazinesDetail` vehicle",
                    "returns": "`Array`"
                },
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - unit or vehicle"
                        },
                        {
                            "name": "includeEmpty",
                            "description": "`Boolean` - (Optional, default `false`) `true` to include empty magazines"
                        },
                        {
                            "name": "includeLoaded",
                            "description": "`Boolean` - (Optional, default `false`) `true` to include magazines loaded in weapons (Since Arma 3 v2.07.148195)"
                        }
                    ],
                    "outline": "`magazinesDetail` [vehicle, includeEmpty, includeLoaded]",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/magazinesDetail"
        },
        "configuration": {
            "label": "magazinesDetail",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array with the type names of all the unit's backpack magazines.",
            "examples": [
                {
                    "text": "```sqf\nmagazinesDetailBackpack player;\n/*\n[\n\t\"6.5 mm 30Rnd Sand Mag(30/30)[id/cr:10000011/2]\",\n\t\"6.5 mm 30Rnd Sand Mag(30/30)[id/cr:10000012/2]\",\n\t\"Chemlight (Green)(1/1)[id/cr:10000027/2]\",\n\t\"6.5 mm 30Rnd Sand Mag(30/30)[id/cr:10000013/2]\",\n\t\"6.5 mm 30Rnd Sand Mag(30/30)[id/cr:10000014/2]\",\n\t\"6.5 mm 30Rnd Sand Mag(30/30)[id/cr:10000015/2]\",\n\t\"6.5 mm 30Rnd Sand Mag(30/30)[id/cr:10000016/2]\",\n\t\"6.5 mm 30Rnd Sand Mag(30/30)[id/cr:10000017/2]\",\n\t\"9 mm 16Rnd Mag(16/16)[id/cr:10000019/2]\",\n\t\"9 mm 16Rnd Mag(16/16)[id/cr:10000020/2]\",\n\t\"RGO Grenade(1/1)[id/cr:10000021/2]\",\n\t\"RGO Grenade(1/1)[id/cr:10000022/2]\",\n\t\"IR Grenade [NATO](1/1)[id/cr:10000023/2]\",\n\t\"IR Grenade [NATO](1/1)[id/cr:10000024/2]\",\n\t\"Smoke Grenade (White)(1/1)[id/cr:10000025/2]\",\n\t\"Smoke Grenade (Green)(1/1)[id/cr:10000026/2]\",\n\t\"Chemlight (Green)(1/1)[id/cr:10000028/2]\"\n]\n*/\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`magazinesDetailBackpack` unit",
                    "returns": "`Array`"
                },
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit"
                        },
                        {
                            "name": "includeEmpty",
                            "description": "`Boolean` - (Optional, default `false`) `true` to include empty magazines"
                        },
                        {
                            "name": "includeLoaded",
                            "description": "`Boolean` - (Optional, default `false`) `true` to include magazines loaded in weapons (Since Arma 3 v2.07.148195)"
                        }
                    ],
                    "outline": "`magazinesDetailBackpack` [unit, includeEmpty, includeLoaded]",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/magazinesDetailBackpack"
        },
        "configuration": {
            "label": "magazinesDetailBackpack",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array with the type names of all the unit's uniform magazines.",
            "examples": [
                {
                    "text": "```sqf\nmagazinesDetailUniform player;\n/*\n[\n\t\"6.5 mm 30Rnd Sand Mag(30/30)[id/cr:10000003/0]\",\n\t\"Chemlight (Green)(1/1)[id/cr:10000020/0]\"\n]\n*/\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`magazinesDetailUniform` unit",
                    "returns": "`Array`"
                },
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit"
                        },
                        {
                            "name": "includeEmpty",
                            "description": "`Boolean` - (Optional, default `false`) `true` to include empty magazines"
                        },
                        {
                            "name": "includeLoaded",
                            "description": "`Boolean` - (Optional, default `false`) `true` to include magazines loaded in weapons (Since Arma 3 v2.07.148195)"
                        }
                    ],
                    "outline": "`magazinesDetailUniform` [unit, includeEmpty, includeLoaded]",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/magazinesDetailUniform"
        },
        "configuration": {
            "label": "magazinesDetailUniform",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array with the type names of all the unit's vest magazines.",
            "examples": [
                {
                    "text": "```sqf\nmagazinesDetailVest player;\n/*\n[\n\t[\"6.5 mm 30Rnd Sand Mag(30/30)[id/cr:10000012/0]\",\n\t\"RGO Grenade(1/1)[id/cr:10000016/0]\",\n\t\"RGO Grenade(1/1)[id/cr:10000017/0]\"]\n]\n*/\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`magazinesDetailVest` unit",
                    "returns": "`Array`"
                },
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit"
                        },
                        {
                            "name": "includeEmpty",
                            "description": "`Boolean` - (Optional, default `false`) `true` to include empty magazines"
                        },
                        {
                            "name": "includeLoaded",
                            "description": "`Boolean` - (Optional, default `false`) `true` to include magazines loaded in weapons (Since Arma 3 v2.07.148195)"
                        }
                    ],
                    "outline": "`magazinesDetailVest` [unit, includeEmpty, includeLoaded]",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/magazinesDetailVest"
        },
        "configuration": {
            "label": "magazinesDetailVest",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns all magazines of given turret. Use turret path [-1] for driver's turret. Alternatively, use `magazinesAllTurrets`.\n**NOTE**: When main syntax is used, command excludes empty magazines for driver turret [-1] but returns empty magazines for all the other turrets.",
            "examples": [
                {
                    "text": "```sqf\n_mags = vehicle player magazinesTurret [0, 0];\n```"
                },
                {
                    "text": "```sqf\n_mags = _tank magazinesTurret [0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` format [Turret Path](https://community.bistudio.com/wiki/Turret%20Path)"
                        }
                    ],
                    "outline": "vehicle `magazinesTurret` turretPath",
                    "returns": "`Array` of `String`s"
                },
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` format [Turret Path](https://community.bistudio.com/wiki/Turret%20Path)"
                        },
                        {
                            "name": "includeEmpty",
                            "description": "`Boolean` - (Optional, default `true`) - `true` = include empty magazines (behaviour as the primary syntax, but consistent), `false` = exclude empty magazines"
                        }
                    ],
                    "outline": "vehicle `magazinesTurret` [turretPath, includeEmpty]",
                    "returns": "`Array` of `String`s"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/magazinesTurret"
        },
        "configuration": {
            "label": "magazinesTurret",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns ammo count of given magazine from given turret (see `setMagazineTurretAmmo` for more info)",
            "examples": [
                {
                    "text": "```sqf\nvehicle player magazineTurretAmmo [\"cls\", [0]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "magazineClass",
                            "description": "`String`"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` format [Turret Path](https://community.bistudio.com/wiki/Turret%20Path). [-1] for driver turret is supported"
                        }
                    ],
                    "outline": "vehicle `magazineTurretAmmo` [magazineClass, turretPath]",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/magazineTurretAmmo"
        },
        "configuration": {
            "label": "magazineTurretAmmo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Add next frame to map animation.",
            "examples": [
                {
                    "text": "```sqf\nmapAnimAdd [1, 0.1, markerPos \"anim1\"];\nmapAnimCommit;\n```"
                },
                {
                    "text": "```sqf\nmapAnimAdd [3, 0.01, player];\nmapAnimCommit;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "time",
                            "description": "`Number` - animation duration in seconds"
                        },
                        {
                            "name": "zoom",
                            "description": "`Number` - range from 0.01 (max. zoom) to 1 (zoomed out)"
                        },
                        {
                            "name": "position",
                            "description": "`Object` or `Array` format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction), [Position3D](https://community.bistudio.com/wiki/Position%23Introduction)"
                        }
                    ],
                    "outline": "`mapAnimAdd` [time, zoom, position]",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/mapAnimAdd"
        },
        "configuration": {
            "label": "mapAnimAdd",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Clear map animation.",
            "examples": [
                {
                    "text": "```sqf\nmapAnimClear;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`mapAnimClear`",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/mapAnimClear"
        },
        "configuration": {
            "label": "mapAnimClear",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Play map animation.",
            "examples": [
                {
                    "text": "```sqf\nmapAnimCommit;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`mapAnimCommit`",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/mapAnimCommit"
        },
        "configuration": {
            "label": "mapAnimCommit",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check if map animation is finished.",
            "examples": [
                {
                    "text": "```sqf\nprivate _isDone = mapAnimDone;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`mapAnimDone`",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/mapAnimDone"
        },
        "configuration": {
            "label": "mapAnimDone",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "The main syntax enables/disables continuous centering of the main map type control on the camera position. Needs to be executed once.\n\nThe alternative syntax centers mini map type control on camera. Needs to be executed each frame (preferably inside an `**onDraw**` event handler).",
            "examples": [
                {
                    "text": "```sqf\n\n// --- Minimap update\n((uiNamespace getVariable \"BIS_UAV_DISPLAY\") displayCtrl 112410) mapCenterOnCamera true;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mainmap",
                            "description": "`Control`"
                        },
                        {
                            "name": "enable",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "mainmap `mapCenterOnCamera` enable",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "minimap",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`mapCenterOnCamera`  minimap",
                    "returns": "`Array` in format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) of the map center (camera focus object's **model centre**<nowiki/>'s position (see `getPosWorld`)) in render scope"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/mapCenterOnCamera"
        },
        "configuration": {
            "label": "mapCenterOnCamera",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the map grid position of an object or position.\n\nThe format is determined by the Grid format specified in the CfgWorlds for the current world. Eg: \"024577\" or \"De82\" or similar.",
            "examples": [
                {
                    "text": "```sqf\n_gridPos = mapGridPosition player;\n```"
                },
                {
                    "text": "```sqf\n_gridPos = mapGridPosition getPos player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "param",
                            "description": "`Object` or `Position` - determines reference position"
                        }
                    ],
                    "outline": "`mapGridPosition` param",
                    "returns": "`String` - grid position"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/mapGridPosition"
        },
        "configuration": {
            "label": "mapGridPosition",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Marks current mission as finished on Steam. Returns true if Steam query is successfully started or false otherwise.",
            "examples": [
                {
                    "text": "```sqf\nmarkAsFinishedOnSteam;\nendMission \"END1\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**markAsFinishedOnSteam**",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/markAsFinishedOnSteam"
        },
        "configuration": {
            "label": "markAsFinishedOnSteam",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets the marker alpha. See `setMarkerAlpha`.",
            "examples": [
                {
                    "text": "```sqf\nAlphaMarker = markerAlpha \"myMarker\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`markerAlpha` markerName",
                    "returns": "`Number`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/markerAlpha"
        },
        "configuration": {
            "label": "markerAlpha",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets the marker brush. See `setMarkerBrush`.",
            "examples": [
                {
                    "text": "```sqf\nif (markerBrush \"Marker1\" == \"Solid\") then { hint \"Marker1 is solid!\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "name",
                            "description": "`String` - marker name"
                        }
                    ],
                    "outline": "`markerBrush` name",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/markerBrush"
        },
        "configuration": {
            "label": "markerBrush",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the channel that a marker belongs to.",
            "examples": [
                {
                    "text": "```sqf\nmarkerChannel \"marker_1\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "marker",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`markerChannel` marker",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/markerChannel"
        },
        "configuration": {
            "label": "markerChannel",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns marker color for given marker. See also `setMarkerColor`.",
            "examples": [
                {
                    "text": "```sqf\nif (markerColor \"Marker1\" == \"ColorRed\") then { hint \"Marker1 is red!\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`markerColor` markerName",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/markerColor"
        },
        "configuration": {
            "label": "markerColor",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get marker direction.",
            "examples": [
                {
                    "text": "```sqf\n_mPos = markerDir \"markerOne\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`markerDir` markerName",
                    "returns": "`Number`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/markerDir"
        },
        "configuration": {
            "label": "markerDir",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns marker draw priority.",
            "examples": [
                {
                    "text": "```sqf\nmarkerDrawPriority \"MarkerOne\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`markerDrawPriority` markerName",
                    "returns": "`Number` - draw priority"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/markerDrawPriority"
        },
        "configuration": {
            "label": "markerDrawPriority",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a polyline marker's path data.",
            "examples": [
                {
                    "text": "```sqf\nmarkerPolyline \"_USER_DEFINED #0/0/1\"; // returns your first polyline's data in Singleplayer\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "marker",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`markerPolyline` marker",
                    "returns": "`Array` in format `**[x1, y1, x2, y2, ... xn, yn]**`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/markerPolyline"
        },
        "configuration": {
            "label": "markerPolyline",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns marker position. See also `setMarkerPos`.",
            "examples": [
                {
                    "text": "```sqf\n_mPos1 = markerPos \"markerOne\";\n```"
                },
                {
                    "text": "```sqf\n_mPos2 = markerPos [\"markerTwo\", true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`markerPos` markerName",
                    "returns": "`Array` format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) - [x, y, **0**], z is always 0"
                },
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String`"
                        },
                        {
                            "name": "preserveElevation",
                            "description": "`Boolean` - (Optional, default `false`)"
                        }
                    ],
                    "outline": "`markerPos` [markerName, preserveElevation]",
                    "returns": "`Array` format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) - if _preserveElevation_ is `true` or [x, y, **0**] if _preserveElevation_ is `false`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/markerPos"
        },
        "configuration": {
            "label": "markerPos",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns if the marker is drawn with shadow enabled.",
            "examples": [
                {
                    "text": "```sqf\nprivate _shadowEnabled = markerShadow _myMarker;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "marker",
                            "description": "`String` - the marker"
                        }
                    ],
                    "outline": "`markerShadow` marker",
                    "returns": "`Boolean`: `true` if marker is enabled, `false` if not"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/markerShadow"
        },
        "configuration": {
            "label": "markerShadow",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the shape of given marker.",
            "examples": [
                {
                    "text": "```sqf\nif (markerShape \"Marker1\" == \"RECTANGLE\") then { hint \"Marker1 is a rectangle!\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "name",
                            "description": "`String` - name of the marker"
                        }
                    ],
                    "outline": "`markerShape`  name",
                    "returns": "`String` - shape of given marker. Can be return:\n* `**\"ICON\"**`\n* `**\"RECTANGLE\"**`\n* `**\"ELLIPSE\"**`\n* {{GVI|arma3|1.60"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/markerShape"
        },
        "configuration": {
            "label": "markerShape",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns marker size. This command is identical to `getMarkerSize`.",
            "examples": [
                {
                    "text": "```sqf\n_mSize = markerSize \"Marker1\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`markerSize` markerName",
                    "returns": "`Array` - in format [a-axis, b-axis], where:\n* a-axis: `Number` - 1/2 width of marker\n* b-axis: `Number` - 1/2 height of marker"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/markerSize"
        },
        "configuration": {
            "label": "markerSize",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get marker text.",
            "examples": [
                {
                    "text": "```sqf\nhint format [\"Marker Text: %1\", markerText \"Marker1\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`markerText` markerName",
                    "returns": "`String`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/markerText"
        },
        "configuration": {
            "label": "markerText",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets type of marker. See `CfgMarkers` for a list of standard markers.",
            "examples": [
                {
                    "text": "```sqf\nif (markerType \"Marker1\" == \"\") then { hint \"Marker1 is not an icon!\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`markerType`  markerName",
                    "returns": "`String` - marker class name. See `CfgMarkers`."
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/markerType"
        },
        "configuration": {
            "label": "markerType",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "[[File:matrixMultiply.jpg|right|600px]]\nReturns resulting matrix from the {{Link|https://en.wikipedia.org/wiki/Matrix_multiplication|multiplication}} of two matrices. First matrix must be of the size n &times; **k**, while the second must be of the size **k** &times; m, i.e `**columns**` matrix1 == `**rows**` matrix2. The resulting matrix will be of the size n &times; m. If the shapes do not match, empty array [] will be returned.",
            "examples": [
                {
                    "text": "```sqf\n\n[\n\t[2],\n\t[2]\n] \nmatrixMultiply \n[\n\t[3] \n]\n/* returns \n[\n\t[6],\n\t[6]\n] */\n\n```"
                },
                {
                    "text": "```sqf\n\n[\n\t[-1,0,0],\n\t[0,-1,0]\n] \nmatrixMultiply \n[\n\t[1,2],\n\t[3,1],\n\t[2,3]\n] \n/* returns \n[\n\t[-1,-2],\n\t[-3,-1]\n] */\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "matrix1",
                            "description": "`Array` - matrix of the size `**n**`_(rows)_ &times; `**k**`_(columns)_"
                        },
                        {
                            "name": "matrix2",
                            "description": "`Array` - matrix of the size `**k**`_(rows)_ &times; `**m**`_(columns)_"
                        }
                    ],
                    "outline": "matrix1 `matrixMultiply` matrix2",
                    "returns": "`Array` - resulting matrix of the size `**n**`_(rows)_ &times; `**m**`_(columns)_"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/matrixMultiply"
        },
        "configuration": {
            "label": "matrixMultiply",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "[[File:matrixTranspose.jpg|thumb|Matrix transposition]]\nReturns {{Link|https://en.wikipedia.org/wiki/Transpose|transposed}} version of the given matrix.\nThe matrix is an `Array` of rows.\nEach row is an `Array` of corresponding column values for the row. The minimum number of rows is 1.",
            "examples": [
                {
                    "text": "```sqf\n\nmatrixTranspose \n[\n\t[1,2,3], \n\t[3,1,2], \n\t[2,3,1]\n];\n/* returns \n[\n\t[1,3,2], \n\t[2,1,3], \n\t[3,2,1]\n] */\n\n```"
                },
                {
                    "text": "```sqf\n\nmatrixTranspose \n[\n\t[1,2,3]\n];\n/* returns \n[\n\t[1],\n\t[2],\n\t[3]\n] */\n\n```"
                },
                {
                    "text": "```sqf\n\nmatrixTranspose \n[\n\t[1],\n\t[2],\n\t[3]\n];\n/* returns \n[\n\t[1,2,3]\n] */\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "matrix",
                            "description": "`Array` - given matrix"
                        }
                    ],
                    "outline": "`matrixTranspose` matrix",
                    "returns": "`Array` - transposed matrix"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/matrixTranspose"
        },
        "configuration": {
            "label": "matrixTranspose",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "The greater value of a and b.",
            "examples": [
                {
                    "text": "```sqf\n3 max 2; // Result is 3\n```"
                },
                {
                    "text": "```sqf\n-3 max -2; // Result is -2\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "a",
                            "description": "`Number`"
                        },
                        {
                            "name": "b",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "a `max`  b",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/max"
        },
        "configuration": {
            "label": "max",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns maximum load limit for a unit, uniform/vest/backpack containers, vehicle cargo, supply boxes and weapon holders.",
            "examples": [
                {
                    "text": "```sqf\nprivate _maxLoad = maxLoad _yaMum;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "container",
                            "description": "`Object` - unit, uniform/vest/backpack container, vehicle cargo, supply box, weapon holder"
                        }
                    ],
                    "outline": "`maxLoad` container",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/maxLoad"
        },
        "configuration": {
            "label": "maxLoad",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return a list of members in given team.",
            "examples": [
                {
                    "text": "```sqf\n_members = members _team;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "team",
                            "description": "[Team Member](https://community.bistudio.com/wiki/Team%20Member)"
                        }
                    ],
                    "outline": "`members` team",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/members"
        },
        "configuration": {
            "label": "members",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns action stored in item on given path in `CT_MENU_STRIP` control.",
            "examples": [
                {
                    "text": "```sqf\nmenuAction [120, [1, 0]];\n```"
                },
                {
                    "text": "```sqf\nfindDisplay 313 displayCtrl 120 menuAction [1, 0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "`menuAction` [idc, path]",
                    "returns": "`String` - action"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "control `menuAction` path",
                    "returns": "`String` - action"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/menuAction"
        },
        "configuration": {
            "label": "menuAction",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds new submenu entry into item on given path.",
            "examples": [
                {
                    "text": "```sqf\nfindDisplay 313 displayCtrl 120 menuAdd [[], \"Custom Tools\"]; // Add new entry at the top level to the menu strip in Eden Editor\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        },
                        {
                            "name": "text",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`menuAdd` [idc, path, text]",
                    "returns": "`Number`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - path where the items should be added"
                        },
                        {
                            "name": "text",
                            "description": "`String` - displayed name for the entry"
                        }
                    ],
                    "outline": "control `menuAdd` [path, text]",
                    "returns": "`Number` - index of the item"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/menuAdd"
        },
        "configuration": {
            "label": "menuAdd",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns if item on given path is checked or not.",
            "examples": [
                {
                    "text": "```sqf\nprivate _isChecked = findDisplay 313 displayCtrl 120 menuChecked [0, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "`menuChecked` [idc, path]",
                    "returns": "`Boolean`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "control `menuChecked` path",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/menuChecked"
        },
        "configuration": {
            "label": "menuChecked",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes all entries from given menu strip.",
            "examples": [
                {
                    "text": "```sqf\nmenuClear (findDisplay 313 displayCtrl 120); // removes all entries from Eden Editor. Restart the editor to reset the menu.\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`menuClear` idc",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`menuClear` control",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/menuClear"
        },
        "configuration": {
            "label": "menuClear",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Collapses item on given path and all its children.",
            "examples": [
                {
                    "text": "```sqf\nfindDisplay 313 displayCtrl 120 menuCollapse [0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "`menuCollapse` [idc, path]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "control `menuCollapse` path",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/menuCollapse"
        },
        "configuration": {
            "label": "menuCollapse",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns data stored in menu entry on given path.",
            "examples": [
                {
                    "text": "```sqf\n\n// Create an entry which will return its data once clicked\nprivate _ctrlMenuStrip = findDisplay 313 displayCtrl 120;\nprivate _indexMain = _ctrlMenuStrip menuAdd [[], \"Custom Tools\"];\nprivate _indexData = _ctrlMenuStrip menuAdd [[_indexMain],\"This entry will print its data to system chat when clicked\"];\n_ctrlMenuStrip menuSetData [[_indexMain,_indexData], \"[objNull,'Some String',true]\"];\n_ctrlMenuStrip menuSetAction [[_indexMain,_indexData], \"systemChat (findDisplay 313 displayCtrl 120 menuData (menuHover (findDisplay 313 displayCtrl 120)));\"];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "`menuData` [idc, path]",
                    "returns": "`String`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "control `menuData` path",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/menuData"
        },
        "configuration": {
            "label": "menuData",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Deletes menu entry on given path.",
            "examples": [
                {
                    "text": "```sqf\n(findDisplay 313 displayCtrl 120) menuDelete [1]; // removes the second entry from Eden Editor menu strip. Restart Eden Editor to reset the menu.\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "`menuDelete` [idc,path]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "control `menuDelete` path",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/menuDelete"
        },
        "configuration": {
            "label": "menuDelete",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enables or disables menu entry on given path.",
            "examples": [
                {
                    "text": "```sqf\nfindDisplay 313 displayCtrl 120 menuEnable [0]; // old syntax, do not use\n```"
                },
                {
                    "text": "```sqf\nfindDisplay 313 displayCtrl 120 menuEnable [[0, 0, 1], false]; // since {{arma3}} v2.06\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        },
                        {
                            "name": "enable",
                            "description": "`Boolean` - (Optional, default `true`) disabled if `false`"
                        }
                    ],
                    "outline": "`menuEnable` [idc, path, enable]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        },
                        {
                            "name": "enable",
                            "description": "`Boolean` - (Optional, default `true`) disabled if `false`"
                        }
                    ],
                    "outline": "control `menuEnable` [path, enable]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "control `menuEnable` path {{Feature|obsolete|This old syntax is kept only for backward compatibility.|arma3|2.06}}",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/menuEnable"
        },
        "configuration": {
            "label": "menuEnable",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns if menu entry on given path is enabled or not.",
            "examples": [
                {
                    "text": "```sqf\n_isEnabled = findDisplay 313 displayCtrl 120 menuEnabled [0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "`menuEnabled` [idc, path]",
                    "returns": "`Boolean`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "control `menuEnabled` path",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/menuEnabled"
        },
        "configuration": {
            "label": "menuEnabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Expands given menu entry on given path and all its parents so entry is visible.",
            "examples": [
                {
                    "text": "```sqf\nfindDisplay 313 displayCtrl 120 menuExpand [0, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "`menuExpand` [idc, path]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "control `menuExpand` path",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/menuExpand"
        },
        "configuration": {
            "label": "menuExpand",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns path to menu entry mouse is currently hovering over.",
            "examples": [
                {
                    "text": "```sqf\nprivate _path = menuHover (findDisplay 313 displayCtrl 120);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`menuHover` idc",
                    "returns": "`Array`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`menuHover` control",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/menuHover"
        },
        "configuration": {
            "label": "menuHover",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns picture set into item on given path.",
            "examples": [
                {
                    "text": "```sqf\nprivate _picturePath = (findDisplay 313 displayCtrl 120) menuPicture [0, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "`menuPicture` [idc, path]",
                    "returns": "`String`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "control `menuPicture` path",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/menuPicture"
        },
        "configuration": {
            "label": "menuPicture",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets new action into menu entry on given path.",
            "examples": [
                {
                    "text": "```sqf\nfindDisplay 313 displayCtrl 120 menuSetAction [[0, 1], \"systemChat 'Hello World!'\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        },
                        {
                            "name": "action",
                            "description": "`String` - expression that should be executed when entry is clicked"
                        }
                    ],
                    "outline": "`menuSetAction` [idc, path, action]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        },
                        {
                            "name": "action",
                            "description": "`String` - expression that should be executed when entry is clicked"
                        }
                    ],
                    "outline": "control `menuSetAction` [path, action]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/menuSetAction"
        },
        "configuration": {
            "label": "menuSetAction",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets item on given path to be checked or not. By default menu strip entries are not checkable.\nOnce this command was executed, an entry can become checked and unchecked.\nIf an entry is checked is indicated by a tick to the left of the entry's text.\nSetting an entry to be checkable will overwrite set picture with `menuSetPicture`.",
            "examples": [
                {
                    "text": "```sqf\nfindDisplay 313 displayCtrl 120 menuSetCheck [[0,1], true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        },
                        {
                            "name": "checked",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "`menuSetCheck` [idc, path, checked]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        },
                        {
                            "name": "checked",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "control `menuSetCheck` [path, checked]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/menuSetCheck"
        },
        "configuration": {
            "label": "menuSetCheck",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets data into menu entry on given path.",
            "examples": [
                {
                    "text": "```sqf\nfindDisplay 313 displayCtrl 120 menuSetData [[0, 1], \"[true, player, 'Hello World!', 1337]\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        },
                        {
                            "name": "data",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`menuSetData` [idc, path, data]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        },
                        {
                            "name": "data",
                            "description": "`String`"
                        }
                    ],
                    "outline": "control `menuSetData` [path, data]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/menuSetData"
        },
        "configuration": {
            "label": "menuSetData",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets new picture into menu entry on given path. The picture will be replaced by a tick if the entry was set to checkable with `menuSetCheck`.",
            "examples": [
                {
                    "text": "```sqf\nfindDisplay 313 displayCtrl 120 menuSetPicture [[0, 1], \"\\a3\\modules_f\\data\\iconunlock_ca.paa\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        },
                        {
                            "name": "picture",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`menuSetPicture` [idc, path, picture]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        },
                        {
                            "name": "picture",
                            "description": "`String`"
                        }
                    ],
                    "outline": "control `menuSetPicture` [path, picture]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/menuSetPicture"
        },
        "configuration": {
            "label": "menuSetPicture",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets shortcut of given menu strip entry.",
            "examples": [
                {
                    "text": "```sqf\n_ctrlMenuStrip menuSetShortcut [[0,0], 2048 + 0x16]; // ALT + U\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        },
                        {
                            "name": "shortcut",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`menuSetShortcut` [idc, path, shortcut]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        },
                        {
                            "name": "shortcut",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "control `menuSetShortcut` [path, shortcut]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/menuSetShortcut"
        },
        "configuration": {
            "label": "menuSetShortcut",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets text of given menu strip entry.",
            "examples": [
                {
                    "text": "```sqf\n_ctrlMenuStrip menuSetText [[0,0,1], \"Hello World!\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        },
                        {
                            "name": "text",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`menuSetText` [idc, path, text]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        },
                        {
                            "name": "text",
                            "description": "`String`"
                        }
                    ],
                    "outline": "control `menuSetText` [path, text]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/menuSetText"
        },
        "configuration": {
            "label": "menuSetText",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets weblink (URL) of given menu strip entry, subject to `**allowedHTMLLoadURIs[]**` whitelisting in `CfgCommands` config.",
            "examples": [
                {
                    "text": "```sqf\n_ctrlMenuStrip menuSetURL [[0,0,1], \"https://arma3.com/\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        },
                        {
                            "name": "link",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`menuSetURL` [idc, path, link]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        },
                        {
                            "name": "link",
                            "description": "`String`"
                        }
                    ],
                    "outline": "control `menuSetURL` [path, link]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/menuSetURL"
        },
        "configuration": {
            "label": "menuSetURL",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets new value into menu entry on given path.",
            "examples": [
                {
                    "text": "```sqf\nfindDisplay 313 displayCtrl 120 menuSetValue [[0, 1], 1337];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        },
                        {
                            "name": "value",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`menuSetValue` [idc, path, value]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        },
                        {
                            "name": "value",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "control `menuSetValue` [path, value]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/menuSetValue"
        },
        "configuration": {
            "label": "menuSetValue",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns shortcut related to menu entry on given path in form of a bitflag. To get the shortcut text use `menuShortcutText`.",
            "examples": [
                {
                    "text": "```sqf\nfindDisplay 313 displayCtrl 120 menuShortcut [0, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "`menuShortcut` [idc, path]",
                    "returns": "`Number`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "control `menuShortcut` path",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/menuShortcut"
        },
        "configuration": {
            "label": "menuShortcut",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a string containing shortcut text for menu item on the given path.",
            "examples": [
                {
                    "text": "```sqf\nfindDisplay 313 displayCtrl 120 menuShortcutText [1, 8]; // returns \"#\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "`menuShortcutText` [idc, path]",
                    "returns": "`String`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "control `menuShortcutText` path",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/menuShortcutText"
        },
        "configuration": {
            "label": "menuShortcutText",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns how many sub entries is in item on given path.",
            "examples": [
                {
                    "text": "```sqf\nfindDisplay 313 displayCtrl 120 menuSize [];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "`menuSize` [idc, path]",
                    "returns": "`Number`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "control `menuSize` path",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/menuSize"
        },
        "configuration": {
            "label": "menuSize",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sorts subentries of item on given path by their text.",
            "examples": [
                {
                    "text": "```sqf\nfindDisplay 313 displayCtrl 120 menuSort [[], true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        },
                        {
                            "name": "sortOrder",
                            "description": "`Boolean` - `true` to sort from A to Z, `false` to sort from Z to A"
                        }
                    ],
                    "outline": "`menuSort` [idc, path, sortOrder]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        },
                        {
                            "name": "sortOrder",
                            "description": "`Boolean` - `true` to sort from A to Z, `false` to sort from Z to A"
                        }
                    ],
                    "outline": "control `menuSort` [path, sortOrder]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/menuSort"
        },
        "configuration": {
            "label": "menuSort",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns current text set in menu entry on given path.",
            "examples": [
                {
                    "text": "```sqf\n_ctrlMenuStrip menuText [1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "`menuText` [idc, path]",
                    "returns": "`String`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "control `menuText` path",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/menuText"
        },
        "configuration": {
            "label": "menuText",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns current URL set in entry on given path.",
            "examples": [
                {
                    "text": "```sqf\nfindDisplay 313 displayCtrl 120 menuURL [7, 0]; // returns \"https://community.bistudio.com/wiki/Eden_Editor\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "`menuURL` [idc, path]",
                    "returns": "`String`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "control `menuURL` path",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/menuURL"
        },
        "configuration": {
            "label": "menuURL",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns current value set in menu entry on given path.",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "`menuValue` [idc, path]",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/menuValue"
        },
        "configuration": {
            "label": "menuValue",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Merges two `HashMap`s.",
            "examples": [
                {
                    "text": "```sqf\n_hashMap merge _otherHashMap;\n```"
                },
                {
                    "text": "```sqf\n\nprivate _hashmap1 = [\"cow\", \"cat\", \"chicken\"] createHashMapFromArray [100, 200, 200];\nprivate _hashmap2 = [\"cow\", \"cat\", \"chicken\", \"camel\"] createHashMapFromArray [150, 300, 400, 800];\n_hashmap1 merge _hashmap2; // _hashmap is [[\"cow\",100],[\"cat\",200],[\"chicken\",200],[\"camel\",800]]\n\n```"
                },
                {
                    "text": "```sqf\n\nprivate _hashmap1 = [\"cow\", \"cat\", \"chicken\"] createHashMapFromArray [100, 200, 200];\nprivate _hashmap2 = [\"cow\", \"cat\", \"chicken\", \"camel\"] createHashMapFromArray [150, 300, 400, 800];\n_hashmap1 merge [_hashmap2, true]; // _hashmap is [[\"cow\",150],[\"cat\",300],[\"chicken\",400],[\"camel\",800]]\n\n```"
                },
                {
                    "text": "```sqf\n\nprivate _hashmap1 = [\"cow\", \"cat\", \"chicken\"] createHashMapFromArray [100, 200, 200];\nprivate _hashmap2 = [\"cow\", \"cat\", \"chicken\", \"camel\"] createHashMapFromArray [150, 300, 400, 800];\n_hashmap1 merge [_hashmap2, false]; // _hashmap is [[\"cow\",100],[\"cat\",200],[\"chicken\",200],[\"camel\",800]] as Syntax 1\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "hashMap1",
                            "description": "`HashMap` - this HashMap will be modified"
                        },
                        {
                            "name": "hashMap2",
                            "description": "`HashMap` - all key-value pairs from this HashMap are added to _hashMap1_. If a key from _hashMap2_ already exists in _hashMap1_, it doesn't overwrite the value in _hashMap1_."
                        }
                    ],
                    "outline": "hashMap1 `merge` hashMap2",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "hashMap1",
                            "description": "`HashMap` - this HashMap will be modified"
                        },
                        {
                            "name": "hashMap2",
                            "description": "`HashMap` - all key-value pairs from this HashMap are added to _hashMap1_"
                        },
                        {
                            "name": "overwriteExisting",
                            "description": "`Boolean` - (Optional, default `false`) if `true`, keys from _hashMap1_ that also exist in _hashMap2_ are overwritten. When set to `true`, merging is faster"
                        }
                    ],
                    "outline": "hashMap1 `merge` [hashMap2, overwriteExisting]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/merge"
        },
        "configuration": {
            "label": "merge",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "The smaller of a and b.",
            "examples": [
                {
                    "text": "```sqf\n3 min 2 // Result is 2\n```"
                },
                {
                    "text": "```sqf\n-3 min -2 // Result is -3\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "a",
                            "description": "`Number`"
                        },
                        {
                            "name": "b",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "a `min`  b",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/min"
        },
        "configuration": {
            "label": "min",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks if the given mine is active.",
            "examples": [
                {
                    "text": "```sqf\nif (mineActive _mine) then {hint \"BOOM!\"};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "obj",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`mineActive` obj",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/mineActive"
        },
        "configuration": {
            "label": "mineActive",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if mine has been detected by a given side",
            "examples": [
                {
                    "text": "```sqf\n(allMines select 0) mineDetectedBy west;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mine",
                            "description": "`Object`"
                        },
                        {
                            "name": "faction",
                            "description": "`Side`"
                        }
                    ],
                    "outline": "mine `mineDetectedBy` faction",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/mineDetectedBy"
        },
        "configuration": {
            "label": "mineDetectedBy",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a guided missile's target.",
            "examples": [
                {
                    "text": "```sqf\nmissileTarget missile1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "munition",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`missileTarget` munition",
                    "returns": "`Object`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/missileTarget"
        },
        "configuration": {
            "label": "missileTarget",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a guided missile's target position.",
            "examples": [
                {
                    "text": "```sqf\nprivate _targetDistance = vehicle player distance missileTargetPos missile1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "munition",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`missileTargetPos` munition",
                    "returns": "`Array` in format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/missileTargetPos"
        },
        "configuration": {
            "label": "missileTargetPos",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return root of mission [[Description.ext]] entries hierarchy.\n**IMPORTANT**: Since the introduction of the [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor), scenario attributes can be configured in the editor itself, not only in the external Description.ext file.\nTo access desired value independently on where it is stored, use the following commands:\n* `getMissionConfigValue`\n* `getMissionConfig`",
            "examples": [
                {
                    "text": "```sqf\n\nfor \"_i\" from 0 to (count paramsArray - 1) do\n{\n\tmissionNamespace setVariable [configName ((missionConfigFile/\"Params\") select _i), paramsArray select _i];\n};\n\n```"
                },
                {
                    "text": "To define custom values in [[Description.ext|description.ext]]:\n```cpp\nclass myMissionConfig\n{\n\tclass mySetup\n\t{\n\t\tmyNumber = 3;\n\t\tmyArray[] = { 1, 2, 3 };\n\t\tmyText = \"LOL\";\n\t};\n};\n```\n\nTo read defined custom values from a script:\n\n```sqf\n\n_myNumber = getNumber (missionConfigFile >> \"myMissionConfig\" >> \"mySetup\" >> \"myNumber\");\n_myArray = getArray (missionConfigFile >> \"myMissionConfig\" >> \"mySetup\" >> \"myArray\");\n_myText = getText (missionConfigFile >> \"myMissionConfig\" >> \"mySetup\" >> \"myText\");\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`missionConfigFile`",
                    "returns": "`Config`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/missionConfigFile"
        },
        "configuration": {
            "label": "missionConfigFile",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return difficulty that has been forced for this mission, returns -1 if difficulty is not forced and it is used one from player's options.",
            "examples": [
                {
                    "text": "```sqf\nprivate _number = missionDifficulty;\n```"
                },
                {
                    "text": "```sqf\n\nprivate _playedDifficulty = missionDifficulty;\nif (_playedDifficulty == -1) then\n{\n\t_playedDifficulty = difficulty;\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`missionDifficulty`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/missionDifficulty"
        },
        "configuration": {
            "label": "missionDifficulty",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns mission end type and how it was ended or an empty array [] is mission was not ended.",
            "examples": [
                {
                    "text": "```sqf\nprivate _endInfo = missionEnd;\n```"
                },
                {
                    "text": "```sqf\nmissionEnd params [\"_endType\", \"_failMission\", \"_isFailed\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`missionEnd`",
                    "returns": "`Array` in format [endType, failMission, isFailed] (or empty array if the mission is not ending), where:\n* endType : `String` - the ending that was passed to `failMission` or `endMission`\n* failMission: `Boolean` - `true` if the mission ended via `failMission`, `false` if via `endMission`\n* isFailed: `Boolean` - engine idea of how mission ended. For example if mission ended via `failMission` but the type of ending was not \"Killed\", _isFailed_ is `false`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/missionEnd"
        },
        "configuration": {
            "label": "missionEnd",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return currently loaded mission file (path to mission.pbo, relative to game exe).",
            "examples": [
                {
                    "text": "```sqf\nhint format [\"You are playing mission \"\"%1\"\"\", missionName];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`missionName`",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/missionName"
        },
        "configuration": {
            "label": "missionName",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return workshop-compatible currently loaded mission file (path to mission.pbo, relative to game exe).\n\n**NOTE**: \n* `missionName` will return the Workshop user-friendly mission name, whereas `missionNameSource` will take the information from [[Mission.sqm|mission.sqm]].\n* pre-v2.02 missions may return an empty string.",
            "examples": [
                {
                    "text": "```sqf\nhint format [\"You are playing mission \"\"%1\"\"\", missionNameSource];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`missionNameSource`",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/missionNameSource"
        },
        "configuration": {
            "label": "missionNameSource",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the global namespace attached to mission.",
            "examples": [
                {
                    "text": "```sqf\n\nmissionNamespace setVariable [\"StringVariable\", \"myString\"]; // same as: StringVariable = \"myString\";\n_myStringValue = missionNamespace getVariable \"StringVariable\";\nhint _myStringValue; // hints \"myString\"\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`missionNamespace`",
                    "returns": "`Namespace`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/missionNamespace"
        },
        "configuration": {
            "label": "missionNamespace",
            "grammarType": "namespace"
        }
    },
    {
        "documentation": {
            "description": "This namespace has the same lifetime as `profileNamespace` but is also connected to the mission it is saved from. See `saveMissionProfileNamespace` for more details.",
            "examples": [
                {
                    "text": "```sqf\nprivate _currentMissionProfileNamespace = missionProfileNamespace;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`missionProfileNamespace`",
                    "returns": "`Namespace` - namespace"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/missionProfileNamespace"
        },
        "configuration": {
            "label": "missionProfileNamespace",
            "grammarType": "namespace"
        }
    },
    {
        "documentation": {
            "description": "Returns date and time when mission started. Because this command returns the time of the actual start of the mission, it might not be available in _pre-init_ or _init_, but is guaranteed to be available in _post-init_ when <sqf inline>time > 0.",
            "examples": [
                {
                    "text": "```sqf\nsetDate (missionStart select [0,5]);\n```"
                },
                {
                    "text": "Set real date:\n\n```sqf\n\n//postInit = 1;\nif (isServer) then\n{\n\twaitUntil { time > 0 };\n\tsetDate (missionStart select [0, 5]);\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`missionStart`",
                    "returns": "`Array` format `**[year, month, day, hour, minute, second]**` in multiplayer, which differs from `date` format only by seconds. In SP returns `**[0,0,0,0,0,0]**`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/missionStart"
        },
        "configuration": {
            "label": "missionStart",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the version of the current mission.\n* Mission from the [2D Editor](https://community.bistudio.com/wiki/2D%20Editor): 12\n* Mission from the [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor): 15 and higher (for example current version for [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor) mission in Arma 3 v1.57 is 51)",
            "examples": [
                {
                    "text": "```sqf\n_version = missionVersion;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`missionVersion`",
                    "returns": "`Number` - SQM version"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/missionVersion"
        },
        "configuration": {
            "label": "missionVersion",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Remainder of a divided by b.",
            "examples": [
                {
                    "text": "```sqf\n_remaining = 5 mod 2; // returns 1, as 5 divided by 2 is 2 &times; 2 + 1\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "a",
                            "description": "`Number`"
                        },
                        {
                            "name": "b",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "a `mod` b",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/mod"
        },
        "configuration": {
            "label": "mod",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Translates relative position from object model space to world space in [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) format.\n\nThis command will take into account `vectorUp` of the object when calculating relative coordinates.\nFor the [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) version of this command, see `modelToWorldWorld`.\n\n**IMPORTANT**: For [scaled objects](https://community.bistudio.com/wiki/setObjectScale), the relative position will first be [multiplied](https://community.bistudio.com/wiki/vectorMultiply) by the object scale.\n\nFor example, if the object scale is 2, <sqf inline>_obj modelToWorld [0,1,0] will be offset **2 meters** from the model center (<sqf inline>[0,0,0]).",
            "examples": [
                {
                    "text": "```sqf\n_aboveAndBehindPlayer = player modelToWorld [0,-1,3];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "model",
                            "description": "`Object`"
                        },
                        {
                            "name": "position",
                            "description": "`Array` format [PositionRelative](https://community.bistudio.com/wiki/Position%23PositionRelative) - [x,y,z] offset relative to the model centre"
                        }
                    ],
                    "outline": "model `modelToWorld` position",
                    "returns": "`Array` format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) - translated world position"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/modelToWorld"
        },
        "configuration": {
            "label": "modelToWorld",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Converts position from object model space to world space in render time scope. For ASL version see `modelToWorldVisualWorld`.\n**IMPORTANT**: For [scaled objects](https://community.bistudio.com/wiki/setObjectScale), the relative position will first be [multiplied](https://community.bistudio.com/wiki/vectorMultiply) by the object scale.\n\nFor example, if the object scale is 2, <sqf inline>_obj modelToWorldVisual [0,1,0] will be offset **2 meters** from the model center (<sqf inline>[0,0,0]).",
            "examples": [
                {
                    "text": "```sqf\n_aboveAndBehindPlayer = player modelToWorldVisual [0,-1,3];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "modelPos",
                            "description": "`Array` - in format [PositionRelative](https://community.bistudio.com/wiki/Position%23PositionRelative) ([x,y,z] offset relative to the model centre)"
                        }
                    ],
                    "outline": "object `modelToWorldVisual`  modelPos",
                    "returns": "`Array` - world position in format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/modelToWorldVisual"
        },
        "configuration": {
            "label": "modelToWorldVisual",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Converts position from object model space to world space in render time scope. For the [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) version see `modelToWorldVisual`.\n**IMPORTANT**: \nFor [scaled objects](https://community.bistudio.com/wiki/setObjectScale), the relative position will first be [multiplied](https://community.bistudio.com/wiki/vectorMultiply) by the object scale.\n\nFor example, if the object's scale is 2, <sqf inline>_obj modelToWorldVisualWorld [0,1,0] will be offset **2 meters** from the model center (<sqf inline>[0,0,0]).",
            "examples": [
                {
                    "text": "```sqf\nplayer modelToWorldVisualWorld [0,1,0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "obj",
                            "description": "`Object`"
                        },
                        {
                            "name": "modelPos",
                            "description": "`Array` format [PositionRelative](https://community.bistudio.com/wiki/Position%23PositionRelative)"
                        }
                    ],
                    "outline": "obj `modelToWorldVisualWorld` modelPos",
                    "returns": "`Array` in format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) - **the model's centre** (see `getPosWorld`)"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/modelToWorldVisualWorld"
        },
        "configuration": {
            "label": "modelToWorldVisualWorld",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Converts position from object model space to world space in [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) format from the object's centre position.\n**IMPORTANT**: \nFor [scaled objects](https://community.bistudio.com/wiki/setObjectScale), the relative position will first be [multiplied](https://community.bistudio.com/wiki/vectorMultiply) by the object scale.\n\nFor example, if the object scale is 2, <sqf inline>_obj modelToWorldWorld [0,1,0] will be offset **2 meters** from the model center (<sqf inline>[0,0,0]).",
            "examples": [
                {
                    "text": "```sqf\nprivate _playersFrontWorld = player modelToWorldWorld [0,1,0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "obj",
                            "description": "`Object`"
                        },
                        {
                            "name": "modelPos",
                            "description": "`Array` format [PositionRelative](https://community.bistudio.com/wiki/Position%23PositionRelative)"
                        }
                    ],
                    "outline": "obj `modelToWorldWorld` modelPos",
                    "returns": "`Array` in format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) - **the model's centre** (see `getPosWorld`)"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/modelToWorldWorld"
        },
        "configuration": {
            "label": "modelToWorldWorld",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns list of mod parameters according to given options, values are in same order as the given options.",
            "examples": [
                {
                    "text": "```sqf\n_data = modParams [\"Kart\", [\"name\", \"logo\", \"picture\"]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "modClass",
                            "description": "`String` - mod classname"
                        },
                        {
                            "name": "options",
                            "description": "`Array` of `String`s - can be:{{{!}} class=\"wikitable\"\n! Option\n! [Data Type](https://community.bistudio.com/wiki/%3ACategory%3AData%20Types)\n! Description\n{{!}}-\n{{!}} `**\"name\"**`\n{{!}} `String`\n{{!}} Name to be shown (Arma 3 instead of A3, etc.)\n{{!}}-\n{{!}} `**\"picture\"**`\n{{!}} `String`\n{{!}} Picture shown in Mod Launcher\n{{!}}-\n{{!}} `**\"logo\"**`\n{{!}} `String`\n{{!}} Logo to be shown in Main Menu\n{{!}}-\n{{!}} `**\"logoOver\"**`\n{{!}} `String`\n{{!}} Logo to be shown in Main Menu when mouse is over\n{{!}}-\n{{!}} `**\"logoSmall\"**`\n{{!}} `String`\n{{!}} Small version of logo, prepared for drawing small icons\n{{!}}-\n{{!}} `**\"tooltip\"**`\n{{!}} `String`\n{{!}} Tooltip to be shown on mouse over \n{{!}}-\n{{!}} `**\"tooltipOwned\"**`\n{{!}} `String`\n{{!}} Tooltip to be shown on mouse over the icon when DLC is owned by player\n{{!}}-\n{{!}} `**\"action\"**`\n{{!}} `String`\n{{!}} URL to be triggered when mod button is clicked\n{{!}}-\n{{!}} `**\"actionName\"**`\n{{!}} `String`\n{{!}} What to put on Action Button\n{{!}}-\n{{!}} `**\"overview\"**`\n{{!}} `String`\n{{!}} Overview text visible in expansion menu\n{{!}}-\n{{!}} `**\"hidePicture\"**`\n{{!}} `Boolean`\n{{!}} Do not show mod picture icon in the main menu mod list\n{{!}}-\n{{!}} `**\"hideName\"**`\n{{!}} `Boolean`\n{{!}} Do not show mod name in the main menu mod list\n{{!}}-\n{{!}} `**\"defaultMod\"**`\n{{!}} `Boolean`\n{{!}} Default mods cannot be moved or disabled by Mod Launcher\n{{!}}-\n{{!}} `**\"serverOnly\"**`\n{{!}} `Boolean`\n{{!}} Mod does not have to be installed on client in order to play on server with this mod running\n{{!}}-\n{{!}} `**\"active\"**`\n{{!}} `Boolean`\n{{!}} Active mod (activated through command line or stored in profile by mod launcher)\n**IMPORTANT**: Note that `**\"active\"**` does not actually tell if a mod is actually running.\n{{!}}}"
                        }
                    ],
                    "outline": "`modParams` [modClass, options]",
                    "returns": "`Array` - retrieved requested data on success or empty array `**[]**`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/modParams"
        },
        "configuration": {
            "label": "modParams",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the intensity of the moon's brightness in range 0...1.",
            "examples": [
                {
                    "text": "```sqf\n_intensity = moonIntensity;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**moonIntensity**",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/moonIntensity"
        },
        "configuration": {
            "label": "moonIntensity",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the phase of the in-game Moon on the given date.\nAccording to this command, the fullest Moon in Arma 3 at midnight is on <sqf inline>setDate [4804, 7, 13, 0, 0];.\nUse the {{Link|Arma 3: Utilities#Moon Phases|Moon Phase Utility}} to find out a scenario date with desired moon.",
            "examples": [
                {
                    "text": "```sqf\nprivate _currentMoonPhase = moonPhase date;\n```"
                },
                {
                    "text": "```sqf\n\n// Returns array of dates for given year when moon is at its fullest\nfnc_fullMoonDates = \n{\n\tprivate _year = param [0, 2035];\n\tprivate [\"_date\", \"_phase\", \"_fullMoonDate\"];\n\tprivate _fullMoonPhase = 1;\n\tprivate _waxing = false;\n\tprivate _fullMoonDates = [];\n\tfor \"_i\" from dateToNumber [_year, 1, 1, 0, 0] to dateToNumber [_year, 12, 31, 23, 59] step 1 / 365 do\n\t{\n\t\t_date = numberToDate [_year, _i];\n\t\t_phase = moonPhase _date;\n\n\t\tcall\n\t\t{\n\t\t\tif (_phase > _fullMoonPhase) exitWith\n\t\t\t{\n\t\t\t\t_waxing = true;\n\t\t\t\t_fullMoonDate = _date;\n\t\t\t};\n\n\t\t\tif (_waxing) exitWith \n\t\t\t{\n\t\t\t\t_waxing = false;\n\t\t\t\t_fullMoonDates pushBack _fullMoonDate;\n\t\t\t};\n\t\t};\n\n\t\t_fullMoonPhase = _phase;\n\t};\n\n\t_fullMoonDates;\n};\n\n//set random full moon date in year 1970\nsetDate selectRandom (1970 call fnc_fullMoonDates);\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "date",
                            "description": "`Array` format `Date`"
                        }
                    ],
                    "outline": "`moonPhase` date",
                    "returns": "`Number` in 0..1 range - 0 = new Moon, 1 = full Moon"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/moonPhase"
        },
        "configuration": {
            "label": "moonPhase",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get the provided unit's current morale level.",
            "examples": [
                {
                    "text": "```sqf\nhint format [\"Leader's morale: %1\", morale leader player];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`morale` unit",
                    "returns": "`Number` - in range -1..+1"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/morale"
        },
        "configuration": {
            "label": "morale",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Let group move to given position. Active waypoints will be ignored when command is used.",
            "examples": [
                {
                    "text": "```sqf\n_groupOne move position player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Object` or `Group`"
                        },
                        {
                            "name": "position",
                            "description": "[Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [PositionATL](https://community.bistudio.com/wiki/Position%23PositionATL)"
                        }
                    ],
                    "outline": "group `move` position",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/move"
        },
        "configuration": {
            "label": "move",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Moves the [Eden Editor camera](https://community.bistudio.com/wiki/get3DENCamera).",
            "examples": [
                {
                    "text": "```sqf\nmove3DENCamera [getPosASL player, true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) - new position"
                        },
                        {
                            "name": "useOffset",
                            "description": "`Boolean`\n* if `true` the camera will move to the _position_, add the offset defined in <sqf inline>configFile >> \"Cfg3DEN\" >> \"Camera\" >> \"moveOffset\" and look at the _position_.  Default camera offset: `**[0, -25, 25]**`\n* if `false`, the camera will be moved to the exact _position_"
                        }
                    ],
                    "outline": "`move3DENCamera` [position, useOffset]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/move3DENCamera"
        },
        "configuration": {
            "label": "move3DENCamera",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Moves unit to the first available seat in the specified vehicle.\n\nThe order of priorities is the same order used in squad command when you order subordinates to get in vehicle to any position and is the same order used in Zeus when you drag units to a vehicle.\n\n\nSeat assignment seems to use the following priority logic:\n\ndriver (`moveInDriver`) &rarr; commander (`moveInCommander`) &rarr; gunner (`moveInGunner`) &rarr; turrets (`moveInTurret`) &rarr; cargo (`moveInCargo`).\n**IMPORTANT**: If the unit is already in a vehicle, nothing will happen. You should use `moveOut` to move the unit out of his vehicle before trying to move him into a new (or same) vehicle.\n**NOTE**: This command will move player into the `locked` vehicle or seat just as well.",
            "examples": [
                {
                    "text": "```sqf\nplayer moveInAny tank;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "unit `moveInAny` vehicle",
                    "returns": "`Boolean` - `true` on success, `false` on failure"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/moveInAny"
        },
        "configuration": {
            "label": "moveInAny",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Moves a unit into a vehicle cargo position (immediately and without animation).\n{{Feature|informative|See [AI Group Vehicle Management](https://community.bistudio.com/wiki/AI%20Group%20Vehicle%20Management) for more information.}}\n**IMPORTANT**: If the unit is already in a vehicle, nothing will happen. You should use `moveOut` to move the unit out of his vehicle before trying to move him into a new (or same) vehicle.",
            "examples": [
                {
                    "text": "```sqf\n_soldierOne moveInCargo _jeepOne;\n```"
                },
                {
                    "text": "```sqf\n_soldierOne moveInCargo [_jeepOne, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "unit `moveInCargo` vehicle",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "cargoIndex",
                            "description": "`Number`"
                        },
                        {
                            "name": "canReassign",
                            "description": "`Boolean` - (Optional, default `true`) try to move _unit_ into the first free _vehicle_ cargo seat if _cargoIndex_ is already occupied"
                        }
                    ],
                    "outline": "unit `moveInCargo` [vehicle, cargoIndex, canReassign]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/moveInCargo"
        },
        "configuration": {
            "label": "moveInCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Move soldier into vehicle commander position (Immediate, no animation).\n**IMPORTANT**: If the unit is already in a vehicle, nothing will happen. You should use `moveOut` to move the unit out of his vehicle before trying to move him into a new (or same) vehicle.",
            "examples": [
                {
                    "text": "```sqf\n_soldierOne moveInCommander _tankOne;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        },
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "unitName `moveInCommander` vehicle",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/moveInCommander"
        },
        "configuration": {
            "label": "moveInCommander",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Moves soldier into vehicle driver position (immediate, no animation).\n{{Feature|informative|See [AI Group Vehicle Management](https://community.bistudio.com/wiki/AI%20Group%20Vehicle%20Management) for more information.}}\n**IMPORTANT**: If the unit is already in a vehicle, nothing will happen unless `moveOut` (since Arma 2) is used first to move the unit out of their vehicle (see _Example 2_).",
            "examples": [
                {
                    "text": "```sqf\n_soldierOne moveInDriver _tankOne;\n```"
                },
                {
                    "text": "```sqf\n\nif (not isNull vehicle player) then\n{\n\tmoveOut player;\n};\n\nplayer moveInDriver _myTruck;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "unit `moveInDriver` vehicle",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/moveInDriver"
        },
        "configuration": {
            "label": "moveInDriver",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Move soldier into vehicle gunner position (Immediate, no animation).\n{{Feature|informative|See [AI Group Vehicle Management](https://community.bistudio.com/wiki/AI%20Group%20Vehicle%20Management) for more information.}}\n**IMPORTANT**: If the unit is already in a vehicle, nothing will happen. You should use `moveOut` to move the unit out of his vehicle before trying to move him into a new (or same) vehicle.",
            "examples": [
                {
                    "text": "```sqf\nsoldierOne moveInGunner tankOne;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        },
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "unitName `moveInGunner` vehicle",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/moveInGunner"
        },
        "configuration": {
            "label": "moveInGunner",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Moves the soldier into the vehicle's turret. (Immediately, without animation).\n{{Feature|informative|See [AI Group Vehicle Management](https://community.bistudio.com/wiki/AI%20Group%20Vehicle%20Management) for more information.}}\n**IMPORTANT**: If the unit is already in a vehicle, nothing will happen. You should use `moveOut` to move the unit out of his vehicle before trying to move him into a new (or same) vehicle.",
            "examples": [
                {
                    "text": "```sqf\n_soldierOne moveInTurret [_tank, [0, 0]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        },
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` format [Turret Path](https://community.bistudio.com/wiki/Turret%20Path)"
                        }
                    ],
                    "outline": "unitName `moveInTurret` [vehicle, turretPath]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/moveInTurret"
        },
        "configuration": {
            "label": "moveInTurret",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Shifts an editor object to the end of the objects array. This means,that the object will be drawn last (after all other objects). \n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "object",
                            "description": "`String`"
                        }
                    ],
                    "outline": "map `moveObjectToEnd` object",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/moveObjectToEnd"
        },
        "configuration": {
            "label": "moveObjectToEnd",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Moves the soldier out of the vehicle.\n\n\n\nNotes:\n* Works for both AI and player entities\n* AI unit gets back in - unless is under player command or combined with other sqf commands (`orderGetIn` false, `allowGetIn` false or `leaveVehicle`)\n* Respects the vehicle's lock state (same as [[Arma 3: Actions#Eject|action \"Eject\"]]) - unlike `doGetOut`, `commandGetOut`. It will work for `player` entities regardless though\n* Still executes when the vehicle is moving/flying (same as [[Arma 3: Actions#Eject|action \"Eject\"]]) - unlike `doGetOut`, `commandGetOut`\n* Without vehicle's position's get out animation - unlike [action eject](https://community.bistudio.com/wiki/Arma%203%3A%20Actions%23Eject), `doGetOut`, `commandGetOut`\n* Immediately - unlike [action eject](https://community.bistudio.com/wiki/Arma%203%3A%20Actions%23Eject), `doGetOut`, `commandGetOut`\n* Works also on dead units (same as [[Arma 3: Actions#Eject|action \"Eject\"]] (but one after another)) - unlike `doGetOut`, `commandGetOut`\n* Does not work for UAV crew\n* Does not work for `remoteControl`led units\n* Works on [unconscious](https://community.bistudio.com/wiki/setUnconscious) (same as [[Arma 3: Actions#Eject|action \"Eject\"]] (but one after another)) - unlike `doGetOut`, `commandGetOut` (unless AI under player command)",
            "examples": [
                {
                    "text": "```sqf\n{ if (lifeState _x == \"UNCONSCIOUS\") then { moveOut _x } } forEach crew cursorTarget;\n```"
                },
                {
                    "text": "Move out player just before he dies:\n\n```sqf\n\nplayer addEventHandler [\n\t\"HandleDamage\", \n\tformat [\n\t\t'if (switch (_this select 1) do {\n\t\t\tcase \"\": { _this select 2 >= 1 };\n\t\t\tcase \"head\": {_this select 2 >= %1};\n\t\t\tcase \"body\": {_this select 2 >= %2};\n\t\t\tdefault {false};\n\t\t}) then {moveOut player}',\n\t\tgetNumber (configFile >> \"CfgFirstAid\" >> \"CriticalHeadHit\"),\n\t\tgetNumber (configFile >> \"CfgFirstAid\" >> \"CriticalBodyHit\")\n\t]\n];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "soldier",
                            "description": "`Object` - unit (only a living unit before **(Arma 3)**)"
                        }
                    ],
                    "outline": "`moveOut` soldier",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "soldier",
                            "description": "`Object` - unit"
                        },
                        {
                            "name": "vehicle",
                            "description": "`Object` - vehicle could be `objNull`, in this case the command is identical to the main syntax."
                        }
                    ],
                    "outline": "soldier `moveOut` vehicle",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/moveOut"
        },
        "configuration": {
            "label": "moveOut",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Change information about a target.",
            "examples": [
                {
                    "text": "```sqf\n_moved = _target moveTarget [position player, 1, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Target`"
                        },
                        {
                            "name": "position",
                            "description": "`Array`"
                        },
                        {
                            "name": "typeAccuracy",
                            "description": "`Number`"
                        },
                        {
                            "name": "posAccuracy",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "target `moveTarget` [position, typeAccuracy, posAccuracy]",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/moveTarget"
        },
        "configuration": {
            "label": "moveTarget",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the current time of the most important RTM animation currently being played on the soldier.",
            "examples": [
                {
                    "text": "```sqf\nmoveTime player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "soldier",
                            "description": " `Object`"
                        }
                    ],
                    "outline": "`moveTime` soldier",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/moveTime"
        },
        "configuration": {
            "label": "moveTime",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Low level command to person to move to given position.",
            "examples": [
                {
                    "text": "```sqf\n_myAgent moveTo getPosATL player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "position",
                            "description": "`Array` format [PositionATL](https://community.bistudio.com/wiki/Position%23PositionATL)"
                        }
                    ],
                    "outline": "unit `moveTo` position",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/moveTo"
        },
        "configuration": {
            "label": "moveTo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check if latest low level moveTo command is finished.",
            "examples": [
                {
                    "text": "```sqf\n_isCompleted = moveToCompleted _unit;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "person",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`moveToCompleted`  person",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/moveToCompleted"
        },
        "configuration": {
            "label": "moveToCompleted",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check if latest low level `moveTo` command failed.",
            "examples": [
                {
                    "text": "```sqf\nprivate _hasFailed = moveToFailed _unit;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`moveToFailed` unit",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/moveToFailed"
        },
        "configuration": {
            "label": "moveToFailed",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the current music volume (set by `fadeMusic`)",
            "examples": [
                {
                    "text": "```sqf\nhint str musicVolume;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**musicVolume**",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/musicVolume"
        },
        "configuration": {
            "label": "musicVolume",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "When argument is `Object`, the command returns the name given to a unit using the `setIdentity` instruction or selected randomly by the game engine if `setIdentity` has not been used on the unit.\nIf used on vehicle, name of first crew member (in order commander, driver, gunner). If used on an object, \"Error: No unit\" is being returned.",
            "examples": [
                {
                    "text": "```sqf\n_name = name player;\n```"
                },
                {
                    "text": "```sqf\n_locationName = name myLocation;\n```"
                },
                {
                    "text": "```sqf\n\nname nearestLocation [position player, \"Hill\"]; // \"\"\ntext nearestLocation [position player, \"Hill\"]; // \"Lesnoy Khrebet\"\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`name` object",
                    "returns": "`String`"
                },
                {
                    "parameters": [
                        {
                            "name": "location",
                            "description": "`Location`"
                        }
                    ],
                    "outline": "`name` location",
                    "returns": "`String` - the location's _name_. To get its textual value, use `text` (see _Example 3_)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/name"
        },
        "configuration": {
            "label": "name",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a list of named properties on Geometry LOD.",
            "examples": [
                {
                    "text": "```sqf\nprivate _properties = namedProperties _object; // [[\"sbsource\",\"shadowvolume\"],[\"prefershadowvolume\",\"1\"],[\"reversed\",\"1\"],[\"buoyancy\",\"1\"]]\n```"
                },
                {
                    "text": "```sqf\nprivate _namedProperties = cursorObject namedProperties [\"FireGeometry\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`namedProperties` object",
                    "returns": "`Array` of `Array`s of `String`s, in format: <nowiki>[</nowiki>[namedProperty1, propertyValue1], [namedProperty2, propertyValue2], ...]"
                },
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "LOD",
                            "description": "`String` or `Number` - can be one of:\n* `**\"Memory\"**`\n* `**\"Geometry\"**`\n* `**\"FireGeometry\"**`\n* `**\"LandContact\"**`\n* `**\"HitPoints\"**`\n* `**\"ViewGeometry\"**`\nWhen `Number` is used, command searches for a LOD with the similar [LOD resolution](https://community.bistudio.com/wiki/LOD%20resolutions)"
                        }
                    ],
                    "outline": "object `namedProperties` [LOD]",
                    "returns": "`HashMap`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/namedProperties"
        },
        "configuration": {
            "label": "namedProperties",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the nameSound of a person.",
            "examples": [
                {
                    "text": "```sqf\nnameSound player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "person",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`nameSound` person",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/nameSound"
        },
        "configuration": {
            "label": "nameSound",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "[[File:sphere_radius.jpg|right|200px]]\nFinds entities inside a sphere with the given radius. If the alternative syntax is used, only entities of given types or subtypes are listed. Entities returned are not sorted by distance. This command doesn't return dead entities or entities inside vehicles. If you need to return those, use `entities` command.**NOTE**: This command is much [ faster](https://community.bistudio.com/wiki/Code_Optimisation%23nearEntities_and_nearestObjects%20) than `nearestObjects` for on-foot soldier and vehicle detection.",
            "examples": [
                {
                    "text": "```sqf\n\n_list = player nearEntities 20;\n_list = ASLToAGL getPosASL player nearEntities 50;\n_list = player nearEntities [\"Man\", 1000];\n_list = ASLToAGL getPosASL player nearEntities [\"LaserTarget\", 3000];\n_list = player nearEntities [[\"Car\", \"Motorcycle\", \"Tank\"], 50];\n_list = ASLToAGL getPosASL player nearEntities [[\"Man\", \"Air\", \"Car\", \"Motorcycle\", \"Tank\"], 200];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Object` or `Array` in format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) or [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) - center of the sphere"
                        },
                        {
                            "name": "radius",
                            "description": "`Number` - radius of the sphere"
                        }
                    ],
                    "outline": "position `nearEntities` radius",
                    "returns": "`Array` of `Object`s - not sorted"
                },
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Object` or `Array` in format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) or [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) - center of the sphere"
                        },
                        {
                            "name": "type",
                            "description": "`String` or `Array` of `String`s - type(s) to search for. See `isKindOf`"
                        },
                        {
                            "name": "radius",
                            "description": "`Number` - radius of the sphere"
                        }
                    ],
                    "outline": "position `nearEntities` [type, radius]",
                    "returns": "`Array` of `Object`s - not sorted"
                },
                {
                    "parameters": [
                        {
                            "name": "area",
                            "description": "`String`, `Object` or `Array`:\n* `String` - marker name\n* `Object` - trigger\n* `Array` - format [center, a, b, angle, isRectangular, c] (see `inArea`)"
                        },
                        {
                            "name": "types",
                            "description": "`Array` of `String`s - type(s) to search for or [] empty array to return every type"
                        },
                        {
                            "name": "matchExactType",
                            "description": "`Boolean` - (Optional, default `false`) `true` for an exact type match, `false` for an `isKindOf` match"
                        },
                        {
                            "name": "aliveOnly",
                            "description": "`Boolean` - (Optional, default `true`) `true` to ignore dead entities, `false` to include them"
                        },
                        {
                            "name": "includeCrew",
                            "description": "`Boolean` - (Optional, default `false`) `true` to include crew of vehicles in search"
                        }
                    ],
                    "outline": "area `nearEntities` [types, matchExactType, aliveOnly, includeCrew]",
                    "returns": "`Array` of `Object`s - not sorted"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/nearEntities"
        },
        "configuration": {
            "label": "nearEntities",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Finds the nearest building to a given object or position. A \"building\" is defined as an object that is of class \"House\" and contains a path LOD.",
            "examples": [
                {
                    "text": "```sqf\n_nBuilding = nearestBuilding player;\n```"
                },
                {
                    "text": "```sqf\n_nBuilding = nearestBuilding position player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Object` or `Array` in format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL)"
                        }
                    ],
                    "outline": "`nearestBuilding` position",
                    "returns": "`Object`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/nearestBuilding"
        },
        "configuration": {
            "label": "nearestBuilding",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return the closest location of specified class to a given position. Checked range is unlimited (i.e. covers the whole map).\n\n**NOTE**: Although locations can be placed in 3D with `setPosition`, `nearestLocations` search is conducted in 2D.",
            "examples": [
                {
                    "text": "```sqf\n_nearestCity = nearestLocation [getPos player, \"nameCity\"];\n```"
                },
                {
                    "text": "```sqf\n_anyNearestLocation = nearestLocation [player, \"\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Object` or `Array` in format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) or [Position2D](https://community.bistudio.com/wiki/Position%23Introduction)"
                        },
                        {
                            "name": "locationType",
                            "description": "`String` of a location class name. If \"\" is supplied, any nearest location is returned. Since Arma 3 2.14 locationType could be an `Array` of location types. See [Location Types](https://community.bistudio.com/wiki/Location%23Location%20Types)"
                        },
                        {
                            "name": "maxDistance",
                            "description": "`Number` - (Optional) max search radius. Default - unlimited range."
                        }
                    ],
                    "outline": "`nearestLocation` [position, locationType, maxDistance]",
                    "returns": "`Location`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/nearestLocation"
        },
        "configuration": {
            "label": "nearestLocation",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array of locations of chosen type(s) within the given radius of the given position, sorted from nearest to farthest.\n**NOTE**: Although locations can be placed in 3D with `setPosition`, `nearestLocations`' search result is sorted in 2D.",
            "examples": [
                {
                    "text": "```sqf\n_nearbyLocations = nearestLocations [getPosATL player, [\"RockArea\", \"VegetationFir\"], 100];\n```"
                },
                {
                    "text": "Find any of nearest locations:\n\n```sqf\n\nprivate _allLocationTypes = [];\n\"_allLocationTypes pushBack configName _x\" configClasses (configFile >> \"CfgLocationTypes\");\n{\n\tsystemChat format [\n\t\t\"%1 (%2) - %3m\", \n\t\t_x, \n\t\ttext _x, \n\t\tgetPosATL player distance _x\n\t];\n} forEach nearestLocations [player, _allLocationTypes, 500];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "centre",
                            "description": "`Array` format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction), [Position3D](https://community.bistudio.com/wiki/Position%23Introduction) or `Object`"
                        },
                        {
                            "name": "locationTypes",
                            "description": "`Array` of `String`s - list of [location type](https://community.bistudio.com/wiki/Location%23Location%20Types) names, e.g \"NameCity\"; {{GVI|arma3|2.14"
                        },
                        {
                            "name": "radius",
                            "description": "`Number` - maximum distance from the given position that returned locations may be, in metres"
                        },
                        {
                            "name": "sortPosition",
                            "description": "`Array` format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction), [Position3D](https://community.bistudio.com/wiki/Position%23Introduction) or `Object` - (Optional) results will be sorted from the distance to given _sortPosition_ (nearest to farthest still)"
                        }
                    ],
                    "outline": "`nearestLocations` [centre, locationTypes, radius, sortPosition]",
                    "returns": "`Array` of `Location`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/nearestLocations"
        },
        "configuration": {
            "label": "nearestLocations",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Find the nearest location having a non-empty speech.\n**Arma 3**: No locations are dubbed in Arma 3.",
            "examples": [
                {
                    "text": "```sqf\n_location = nearestLocationWithDubbing player;\n```"
                },
                {
                    "text": "```sqf\n_location = nearestLocationWithDubbing getMarkerPos \"myMarker\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Object` or `Array` in format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) or [Position2D](https://community.bistudio.com/wiki/Position%23Introduction)"
                        }
                    ],
                    "outline": "`nearestLocationWithDubbing` position",
                    "returns": "`Location`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/nearestLocationWithDubbing"
        },
        "configuration": {
            "label": "nearestLocationWithDubbing",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a list of nearest mines of the given types to the given position or object, within the specified distance.\nIf more than one mine are found they will be ordered by proximity by default, the closest one will be first in the array. The sorting can be turned off.",
            "examples": [
                {
                    "text": "```sqf\nnearestMines [player, [\"MineBase\"], 20];\n```"
                },
                {
                    "text": "```sqf\nnearestMines [position player, [\"DirectionalBombBase\"], 500, true];\n```"
                },
                {
                    "text": "```sqf\nnearestMines [[2716,2949,0], [\"APERSTripMine_Wire_Ammo\", \"APERSMine_Range_Ammo\"], 100, false, true];\n```"
                },
                {
                    "text": "Return every mine in 50 metres radius around player sorted by distance:\n\n```sqf\nnearestMines [player, [], 50];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": " `Object` or `Array` in format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) or [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) - search position centre"
                        },
                        {
                            "name": "types",
                            "description": "`Array` - list of class name of the objects to search for (uses `isKindOf` comparison instead of direct class name == comparison). Use an empty array <sqf inline>[] to search for all classes"
                        },
                        {
                            "name": "radius",
                            "description": "`Number` - search range"
                        },
                        {
                            "name": "sort",
                            "description": "`Boolean` - (Optional, default `true`) `true` to sort the results closest first, `false` to turn off sorting"
                        },
                        {
                            "name": "2Dmode",
                            "description": "`Boolean` - (Optional, default `false`) `true` for 2D distance, `false` for 3D distance comparison"
                        }
                    ],
                    "outline": "`nearestMines` [position, types, radius, sort, 2Dmode]",
                    "returns": "`Array` - found mines as array of `Object`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/nearestMines"
        },
        "configuration": {
            "label": "nearestMines",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the nearest object of given type (or inherited classes) to given position within a sphere. Hardcoded radius is 50 meters.\nUnlike with `nearestObjects`, where distance is measured in 2D space, `nearestObject` will be closest object in 3D space.\n\n**NOTE**: \n* in Operation Flashpoint, only objects of the exact provided class are found.\n* if an object ID is used ({{Link|#Syntax 4}}, see _Example 2_) the search range is unlimited",
            "examples": [
                {
                    "text": "```sqf\n\n_nObject = nearestObject [2345, 6789];\n_nObject = nearestObject [player, \"StreetLamp\"];\n\n```"
                },
                {
                    "text": "Return the object with ID 123456:\n\n```sqf\n_nObject = [0,0,0] nearestObject 123456;\n```"
                },
                {
                    "text": "```sqf\n_nObject = getPos player nearestObject \"StreetLamp\";\n```"
                },
                {
                    "text": "Return the nearest object with (`typeOf` _nObject == \"#XXXX\") -> #mark, #slop, etc. Unlimited search range:\n\n```sqf\n_nObject = _position nearestObject -1;\n```\n\n\nReturn the nearest object with (`typeOf` _nObject != \"\"). Search range is 50m:\n\n```sqf\n_nObject = nearestObject _position;\n```"
                },
                {
                    "text": "(See also `allMissionObjects`):\n\n```sqf\n\n_blood\t= nearestObject [player, \"#slop\"];\n_step\t= nearestObject [player, \"#mark\"];\n_track\t= nearestObject [player, \"#track\"];\n_crater\t= nearestObject [player, \"#crater\"];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Object` or `Array` format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position3D](https://community.bistudio.com/wiki/Position%23Introduction) - position to start search at"
                        },
                        {
                            "name": "type",
                            "description": "`String` - type of object (see `typeOf`, [class type](https://community.bistudio.com/wiki/CfgVehicles))"
                        }
                    ],
                    "outline": "`nearestObject` [position, type]",
                    "returns": "`Object` - nearest object, `objNull` otherwise"
                },
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Array` format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position3D](https://community.bistudio.com/wiki/Position%23Introduction) - position to start search at"
                        }
                    ],
                    "outline": "`nearestObject` position",
                    "returns": "`Object` - nearest object, `objNull` otherwise"
                },
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "[Position3D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) - position to start search at"
                        },
                        {
                            "name": "typeOrId",
                            "description": "`String` - type of object (see `typeOf`, [class type](https://community.bistudio.com/wiki/CfgVehicles)) or {{GVI|arma3|2.10"
                        }
                    ],
                    "outline": "position `nearestObject` typeOrId",
                    "returns": "`Object` - nearest object, `objNull` otherwise"
                },
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Array` format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position3D](https://community.bistudio.com/wiki/Position%23Introduction) - position to start search at"
                        },
                        {
                            "name": "id",
                            "description": "`Number` - object Visitor id"
                        }
                    ],
                    "outline": "position `nearestObject` id",
                    "returns": "`Object` - nearest object, `objNull` otherwise"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/nearestObject"
        },
        "configuration": {
            "label": "nearestObject",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a list of nearest objects of the given types to the given position or object, within the specified distance. If more than one object is found they will be ordered by proximity, the closest one will be first in the array. If an object is given as the center and the filter criteria applies to it, it will be the first result in the list. Alternatively, you can use `nearObjects` command, which doesn't sort results.\n\n\n\nA list of ClassName types (e.g `**Tank**`) can be found in [CfgVehicles](https://community.bistudio.com/wiki/%3ACategory%3ACfgVehicles).\n**IMPORTANT**:  This command matches objects using `isKindOf` comparison instead of direct class name [[==]] comparison. As a result, if a class type is a parent, the search will return all objects that inherit from the parent as well as parent itself. This command also only finds objects that are **`entities`**. If you are looking for non-entity objects, see `nearObjects`, `nearestObject`.\n\n**WARNING**:  Because of map object streaming, using `nearestObjects` or similar object finding commands over long distance from player camera may not find what you are looking for, as some objects might not exist at the time of command execution. Use `nearestTerrainObjects` instead.",
            "examples": [
                {
                    "text": "```sqf\nnearestObjects [player, [\"Car\", \"Tank\"], 200];\n```"
                },
                {
                    "text": "```sqf\nnearestObjects [player, [\"house\"], 200];\n```"
                },
                {
                    "text": "```sqf\nnearestObjects [[2716,2949,0], [\"Car\", \"Truck\"], 100];\n```"
                },
                {
                    "text": "Return every object in 50 metres radius around player:\n\n```sqf\nnearestObjects [player, [], 50];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": " `Object` or `Array` in format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) or [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) - where to find objects, center position."
                        },
                        {
                            "name": "types",
                            "description": "`Array` - list of class name of the objects to search for. Use an empty array <sqf inline>[] to search for all classes."
                        },
                        {
                            "name": "radius",
                            "description": "`Number` - range from center position to search for objects."
                        },
                        {
                            "name": "2Dmode",
                            "description": "`Boolean` - (Optional, default `false`) `true` for 2D distance, `false` for 3D distance"
                        }
                    ],
                    "outline": "`nearestObjects` [position, types, radius, 2Dmode]",
                    "returns": "`Array` - array of objects"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/nearestObjects"
        },
        "configuration": {
            "label": "nearestObjects",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a list of nearest terrain objects of the given types to the given position or object, within the specified distance. If more than one object is found they will be ordered according to 3D distance to the object (i.e. the closest one will be first in the array). \nIn contrast to `nearestObjects` this command returns terrain placed objects like trees, rocks and buildings which don't necessarily need an associated config class.\n\n\nPossible type names:\n{{Columns|7|\n* `**\"BUILDING\"**`\n* `**\"BUNKER\"**`\n* `**\"BUSH\"**`\n* `**\"BUSSTOP\"**`\n* `**\"CHAPEL\"**`\n* `**\"CHURCH\"**`\n* `**\"CROSS\"**`\n* `**\"FENCE\"**`\n* `**\"FOREST BORDER\"**`\n* `**\"FOREST SQUARE\"**`\n* `**\"FOREST TRIANGLE\"**`\n* `**\"FOREST\"**`\n* `**\"FORTRESS\"**`\n* `**\"FOUNTAIN\"**`\n* `**\"FUELSTATION\"**`\n* `**\"HIDE\"**`\n* `**\"HOSPITAL\"**`\n* `**\"HOUSE\"**`\n* `**\"LIGHTHOUSE\"**`\n* `**\"MAIN ROAD\"**`\n* `**\"POWER LINES\"**`\n* `**\"POWERSOLAR\"**`\n* `**\"POWERWAVE\"**`\n* `**\"POWERWIND\"**`\n* `**\"QUAY\"**`\n* `**\"RAILWAY\"**`\n* `**\"ROAD\"**`\n* `**\"ROCK\"**`\n* `**\"ROCKS\"**`\n* `**\"RUIN\"**`\n* `**\"SHIPWRECK\"**`\n* `**\"SMALL TREE\"**`\n* `**\"STACK\"**`\n* `**\"TOURISM\"**`\n* `**\"TRACK\"**`\n* `**\"TRAIL\"**`\n* `**\"TRANSMITTER\"**`\n* `**\"TREE\"**`\n* `**\"VIEW-TOWER\"**`\n* `**\"WALL\"**`\n* `**\"WATERTOWER\"**`\n}}\n\n**IMPORTANT**: The names are / The filter is based on the named property [map](https://community.bistudio.com/wiki/Arma%203%3A%20Named_Properties%23map) - not on the named property _class_ or any config definition!}}\n\n<spoiler text=\"Terrain object counts\">\n**NOTE**: Types which are missing are not present in the given world. [Virtual Reality](https://community.bistudio.com/wiki/Virtual%20Reality) has no terrain objects. Last updated **(Arma 3)**}}\n<big>`Stratis`</big>\n{{Columns|5|\n* BUSH: 47974\n* CHAPEL: 2\n* CROSS: 1\n* FENCE: 1728\n* FUELSTATION: 3\n* HIDE: 70975\n* HOUSE: 684\n* LIGHTHOUSE: 3\n* ROAD: 143\n* ROCK: 820\n* SHIPWRECK: 11\n* TRACK: 2063\n* TRANSMITTER: 11\n* TREE: 40110\n* WALL: 1355\n* WATERTOWER: 1\n}}\n\n<big>`Altis`</big>\n{{Columns|5|\n* BUSH: 747193\n* CHAPEL: 165\n* CHURCH: 54\n* CROSS: 48\n* FENCE: 47940\n* FUELSTATION: 32\n* HIDE: 655958\n* HOSPITAL: 1\n* HOUSE: 17472\n* LIGHTHOUSE: 7\n* MAIN ROAD: 2061\n* POWER LINES: 2224\n* POWERSOLAR: 10\n* POWERWAVE: 51\n* POWERWIND: 128\n* ROAD: 4849\n* ROCK: 5483\n* RUIN: 3\n* SHIPWRECK: 43\n* TOURISM: 1\n* TRACK: 26823\n* TRANSMITTER: 23\n* TREE: 263630\n* WALL: 38943\n* WATERTOWER: 10\n}}\n\n<big>[Malden 2035](https://community.bistudio.com/wiki/Malden%202035)</big>\n{{Columns|5|\n* BUSH: 288461\n* BUSSTOP: 45\n* CHAPEL: 14\n* CHURCH: 14\n* CROSS: 16\n* FENCE: 11189\n* FUELSTATION: 24\n* HIDE: 192553\n* HOUSE: 4062\n* LIGHTHOUSE: 15\n* MAIN ROAD: 1050\n* POWER LINES: 3427\n* POWERSOLAR: 1\n* ROAD: 1442\n* ROCK: 3513\n* SHIPWRECK: 23\n* TRACK: 3489\n* TRANSMITTER: 7\n* TREE: 101960\n* WALL: 14189\n* WATERTOWER: 63\n}}\n\n<big>`Tanoa`</big>\n{{Columns|5|\n* BUSH: 754347\n* CHURCH: 21\n* FENCE: 2912\n* FUELSTATION: 85\n* HIDE: 356904\n* HOUSE: 13389\n* MAIN ROAD: 2921\n* POWER LINES: 3985\n* POWERSOLAR: 2\n* POWERWIND: 19\n* RAILWAY: 2138\n* ROAD: 1485\n* ROCK: 8909\n* SHIPWRECK: 58\n* TOURISM: 35\n* TRACK: 9419\n* TRAIL: 6936\n* TRANSMITTER: 16\n* TREE: 506993\n* WALL: 20526\n* WATERTOWER: 73\n}}\n\n<big>`Livonia`</big>\n{{Columns|5|\n* BUILDING: 1262\n* BUNKER: 40\n* BUSH: 473543\n* BUSSTOP: 73\n* CHAPEL: 8\n* CHURCH: 17\n* FENCE: 48426\n* FOUNTAIN: 36\n* FUELSTATION: 7\n* HIDE: 474123\n* HOUSE: 6762\n* MAIN ROAD: 2118\n* POWER LINES: 2671\n* POWERSOLAR: 2\n* POWERWIND: 1\n* RAILWAY: 843\n* ROAD: 5378\n* ROCK: 744\n* SHIPWRECK: 4\n* STACK: 11\n* TRACK: 12834\n* TRANSMITTER: 15\n* TREE: 1881630\n* VIEW-TOWER: 239\n* WALL: 4418\n* WATERTOWER: 7\n}}\n\n<big>`Weferlingen`</big>\n{{Columns|5|\n* BUILDING: 5072\n* BUSH: 731315\n* BUSSTOP: 106\n* CHAPEL: 13\n* CHURCH: 21\n* FENCE: 83908\n* FUELSTATION: 9\n* HIDE: 231818\n* HOUSE: 4562\n* MAIN ROAD: 1535\n* POWER LINES: 1958\n* RAILWAY: 2324\n* ROAD: 8740\n* STACK: 18\n* TRACK: 24372\n* TRANSMITTER: 1\n* TREE: 829449\n* VIEW-TOWER: 34\n}}\n\n<big>[[Weferlingen (Winter)]]</big>\n{{Columns|5|\n* BUILDING: 5072\n* BUSH: 519827\n* BUSSTOP: 106\n* CHAPEL: 13\n* CHURCH: 21\n* FENCE: 83908\n* FUELSTATION: 9\n* HIDE: 229792\n* HOUSE: 4562\n* MAIN ROAD: 1535\n* POWER LINES: 1958\n* RAILWAY: 2324\n* ROAD: 8740\n* STACK: 18\n* TRACK: 24372\n* TRANSMITTER: 1\n* TREE: 829449\n* VIEW-TOWER: 34\n}}\n\n<big>[Cam Lao Nam](https://community.bistudio.com/wiki/Cam%20Lao%20Nam)</big>\n{{Columns|5|\n* BUILDING: 390\n* BUNKER: 2622\n* BUSH: 1852844\n* CHURCH: 6\n* FENCE: 12346\n* FORTRESS: 2\n* FOUNTAIN: 3\n* FUELSTATION: 32\n* HIDE: 309385\n* HOUSE: 13319\n* LIGHTHOUSE: 3\n* MAIN ROAD: 4162\n* POWER LINES: 1591\n* POWERSOLAR: 5\n* POWERWIND: 5\n* RAILWAY: 1345\n* ROAD: 17621\n* ROCK: 60452\n* SHIPWRECK: 161\n* TOURISM: 18\n* TRACK: 6846\n* TRAIL: 7726\n* TRANSMITTER: 33\n* TREE: 1442842\n* VIEW-TOWER: 529\n* WALL: 19664\n* WATERTOWER: 32\n}}\n\n<big>[Khe Sanh](https://community.bistudio.com/wiki/Khe%20Sanh)</big>\n{{Columns|5|\n* BUILDING: 91\n* BUNKER: 4861\n* BUSH: 1299130\n* FENCE: 2196\n* FOUNTAIN: 2\n* FUELSTATION: 3\n* HIDE: 228731\n* HOUSE: 5754\n* POWER LINES: 801\n* ROAD: 7755\n* ROCK: 33853\n* TRACK: 8156\n* TRANSMITTER: 3\n* TREE: 1145377\n* VIEW-TOWER: 227\n* WALL: 9078\n* WATERTOWER: 13\n}}\n\n<big>[The Bra](https://community.bistudio.com/wiki/The%20Bra)</big>\n{{Columns|5|\n* BUILDING: 8\n* BUNKER: 265\n* BUSH: 179428\n* FENCE: 251\n* HIDE: 56960\n* HOUSE: 522\n* POWER LINES: 25\n* ROAD: 7\n* ROCK: 671\n* SHIPWRECK: 2\n* TRACK: 584\n* TRAIL: 2767\n* TRANSMITTER: 1\n* TREE: 203443\n* VIEW-TOWER: 48\n* WALL: 2076\n}}\n\n<big>`Gabreta`</big>\n{{Columns|5|\n* BUILDING: 222\n* BUSH: 383449\n* BUSSTOP: 18\n* CHAPEL: 10\n* CHURCH: 11\n* CROSS: 17\n* FENCE: 25616\n* FORTRESS: 149\n* FOUNTAIN: 2\n* FUELSTATION: 11\n* HIDE: 582635\n* HOSPITAL: 1\n* HOUSE: 6352\n* MAIN ROAD: 4427\n* POWER LINES: 502\n* POWERSOLAR: 2\n* RAILWAY: 1923\n* ROAD: 8693\n* ROCK: 918\n* RUIN: 5\n* SHIPWRECK: 1\n* STACK: 6\n* TRACK: 10066\n* TRAIL: 1170\n* TRANSMITTER: 2\n* TREE: 3473175\n* VIEW-TOWER: 39\n* WALL: 6218\n* WATERTOWER: 8\n}}\n\n<big>[[Sefrou-Ramal]]</big>\n{{Columns|5|\n* BUILDING: 2\n* BUSH: 13669\n* FENCE: 5199\n* FUELSTATION: 2\n* HIDE: 23243\n* HOUSE: 1963\n* MAIN ROAD: 403\n* POWER LINES: 565\n* POWERWIND: 19\n* RAILWAY: 135\n* ROAD: 199\n* ROCK: 1183\n* TRACK: 3286\n* TRANSMITTER: 9\n* TREE: 7592\n* WALL: 3560\n* WATERTOWER: 2\n}}\n\n<big>[Spearhead 1944 Normandy](https://community.bistudio.com/wiki/Spearhead%201944%20Normandy)</big>\n{{Columns|5|\n* BUILDING: 2918\n* BUNKER: 1703\n* BUSH: 608441\n* CHURCH: 45\n* CROSS: 16\n* FENCE: 288630\n* FORTRESS: 196\n* FOUNTAIN: 1286\n* HIDE: 330656\n* HOUSE: 12837\n* MAIN ROAD: 1981\n* RAILWAY: 776\n* ROAD: 20237\n* ROCK: 837\n* RUIN: 1\n* SMALL TREE: 20\n* TRACK: 29761\n* TRAIL: 6365\n* TREE: 581549\n* VIEW-TOWER: 95\n* WALL: 60793\n* WATERTOWER: 34\n\n\n{{Wiki|extractionScript",
            "examples": [
                {
                    "text": "```sqf\nnearestTerrainObjects [player, [\"Tree\", \"Bush\"], 200];\n```"
                },
                {
                    "text": "```sqf\nnearestTerrainObjects [player, [\"House\"], 200];\n```"
                },
                {
                    "text": "```sqf\nnearestTerrainObjects [[2716, 2949, 0], [\"Chapel\", \"Fuelstation\"], 100];\n```"
                },
                {
                    "text": "Return every terrain object in 50 metres radius around player sorted, closest first:\n\n```sqf\nnearestTerrainObjects [player, [], 50];\n```"
                },
                {
                    "text": "Return every terrain object in 50 metres radius around player unsorted:\n\n```sqf\nnearestTerrainObjects [player, [], 50, false];\n```"
                },
                {
                    "text": "Hide all terrain objects `nearestTerrainObjects` could find:\n\n```sqf\nif (isServer) then\n{\n\tprivate _allTerrainObjects = nearestTerrainObjects\n\t[\n\t\t[worldSize / 2, worldSize / 2],\n\t\t[],\n\t\tworldSize * sqrt 2 / 2,\n\t\tfalse\n\t];\n\n\t{ _x hideObjectGlobal true } forEach _allTerrainObjects;\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Object`, [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) or [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) - where to find objects, center position"
                        },
                        {
                            "name": "types",
                            "description": "`Array` - list of case-insensitive types of the objects to search for. `**[]**` to search without filters"
                        },
                        {
                            "name": "radius",
                            "description": "`Number` - range from center position to search for objects"
                        },
                        {
                            "name": "sort",
                            "description": "`Boolean` - (Optional, default `true`) sort objects by distance to the center or not - setting to `false` **greatly** improves performance"
                        },
                        {
                            "name": "2Dmode",
                            "description": "`Boolean` - (Optional, default `false`) the object search and sorting mode: `true` - 2D, `false` - 3D"
                        }
                    ],
                    "outline": "`nearestTerrainObjects` [position, types, radius, sort, 2Dmode]",
                    "returns": "`Array` - array of terrain objects. Before Arma 3 v2.00 this command did not return roads of type `**\"ROAD\", \"MAIN ROAD\", \"TRACK\", \"TRAIL\"**`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/nearestTerrainObjects"
        },
        "configuration": {
            "label": "nearestTerrainObjects",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Find objects (Units, Vehicles, Dead, Map Objects) in a sphere with given radius. The first object in the returned array is _not_ necessarily the closest one. If you need returned objects to be sorted by distance, use `nearestObjects`. If typeName is given, only objects of given type (or its subtype) are listed.",
            "examples": [
                {
                    "text": "```sqf\n_list = position player nearObjects 50;\n```"
                },
                {
                    "text": "```sqf\n_list = [_xpos,_ypos] nearObjects [\"House\", 20];\n```"
                },
                {
                    "text": "```sqf\n_list = player nearObjects 20;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Position`, [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or `Object`"
                        },
                        {
                            "name": "radius",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "position `nearObjects` radius",
                    "returns": "`Array`"
                },
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Array` format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL), [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or `Object`"
                        },
                        {
                            "name": "typeName",
                            "description": "`String`"
                        },
                        {
                            "name": "radius",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "position `nearObjects` [typeName, radius]",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/nearObjects"
        },
        "configuration": {
            "label": "nearObjects",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check whether all data are loaded to nearObjects will return in reasonable time.",
            "examples": [
                {
                    "text": "```sqf\n_twnpos nearObjectsReady 500; //from ALICE\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Object` or `Array` in format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) or [Position2D](https://community.bistudio.com/wiki/Position%23Introduction)"
                        },
                        {
                            "name": "radius",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "position `nearObjectsReady` radius",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/nearObjectsReady"
        },
        "configuration": {
            "label": "nearObjectsReady",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Find the road segments within the circle of given radius.",
            "examples": [
                {
                    "text": "```sqf\n_list = player nearRoads 50;\n```"
                },
                {
                    "text": "```sqf\n_list = (position _unit) nearRoads 50;\n```"
                },
                {
                    "text": "```sqf\n_list = [1800,5700] nearRoads 50;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "pos",
                            "description": "`Object` or `Array` in format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) or [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) - center of search radius"
                        },
                        {
                            "name": "radius",
                            "description": "`Number` - search radius in meters"
                        }
                    ],
                    "outline": "pos `nearRoads` radius",
                    "returns": "`Array` of `Object`s - road segments within radius"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/nearRoads"
        },
        "configuration": {
            "label": "nearRoads",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Find supplies (weapon holders, ammo crates, fuel feeds, other units) in the sphere with given radius.",
            "examples": [
                {
                    "text": "```sqf\n_list = player nearSupplies 50;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "origin",
                            "description": "`Object` or `Array` in format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) or [Position2D](https://community.bistudio.com/wiki/Position%23Introduction)"
                        },
                        {
                            "name": "radius",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "origin `nearSupplies` radius",
                    "returns": "`Array` of `Object`s"
                },
                {
                    "parameters": [
                        {
                            "name": "origin",
                            "description": "`Object` or `Array` in format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) or [Position2D](https://community.bistudio.com/wiki/Position%23Introduction)"
                        },
                        {
                            "name": "typeName",
                            "description": "`String`"
                        },
                        {
                            "name": "radius",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "origin `nearSupplies` [typeName, radius]",
                    "returns": "`Array` of `Object`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/nearSupplies"
        },
        "configuration": {
            "label": "nearSupplies",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a list of targets within the defined range. \"Targets\" are not restricted to enemy units.",
            "examples": [
                {
                    "text": "```sqf\n\nplayer nearTargets 100;\n// can return e.g\n/*\n\t[\n\t\t[[2555.33,2535.33,1.32708],\"SoldierEB\",EAST,214222,EAST 1-1-A:1],\n\t\t[[2550.39,2482.5,1.32696],\"SoldierWB\",WEST,0,WEST 1-1-A:2]\n\t]\n*/\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "range",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "unit `nearTargets` range",
                    "returns": "`Array` of `Array`s in format [position, type, side, subjectiveCost, object, positionAccuracy]:\n* position: `Array` format [Position3D](https://community.bistudio.com/wiki/Position%23Position3D) - perceived position including judgment and memory errors\n* type: `String` - perceived, gives only what was recognized\n* side: `Side` - perceived side\n* subjectiveCost: `Number` - positive for enemies, more positive for more important or more dangerous enemies\n* object: `Object` object type, can be used to get more information if needed\n* positionAccuracy: `Number` - assumed accuracy of the perceived position"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/nearTargets"
        },
        "configuration": {
            "label": "nearTargets",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns how much vehicle wants to reload its weapons.",
            "examples": [
                {
                    "text": "```sqf\n_seriousness = needReload _vehicle;\n```"
                },
                {
                    "text": "```sqf\nif (needReload player == 1) then { reload player };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`needReload` vehicle",
                    "returns": "`Number` - range: 0-1, 0: full mag, 1: empty mag"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/needReload"
        },
        "configuration": {
            "label": "needReload",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array with how much vehicle needs repairing, refueling and rearming.",
            "examples": [
                {
                    "text": "```sqf\nneedService tank params [\"_needRepair\", \"_needRefuel\", \"_needRearm\"];\n```"
                },
                {
                    "text": "```sqf\nonEachFrame { hintSilent str needService vehicle player };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`needService` vehicle",
                    "returns": "`Array` in format [repair, refuel, rearm]. Values are in range 0..1: 0: no need, 1: maximum need"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/needService"
        },
        "configuration": {
            "label": "needService",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Unique ID of object or group.  As this command is MP only, you can use `BIS_fnc_netId`, which extends the use to SP as well. See also: `BIS_fnc_objectVar`",
            "examples": [
                {
                    "text": "```sqf\n_playerNetId = netId player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "var",
                            "description": "`Object` or `Group`"
                        }
                    ],
                    "outline": "`netId`  var",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/netId"
        },
        "configuration": {
            "label": "netId",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "A non-existing network object. **NOTE**: **NetObject** data type was never implemented in Arma 3 - this command always returns `false`.",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`netObjNull`",
                    "returns": "`Boolean` - always returns `false`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/netObjNull"
        },
        "configuration": {
            "label": "netObjNull",
            "grammarType": "null-literal"
        }
    },
    {
        "documentation": {
            "description": "Creates the new overlay dialog for the specified type of overlay. \n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "config",
                            "description": "`Config`"
                        }
                    ],
                    "outline": "map `newOverlay` config",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/newOverlay"
        },
        "configuration": {
            "label": "newOverlay",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the next available menu item index.\n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`nextMenuItemIndex` map",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/nextMenuItemIndex"
        },
        "configuration": {
            "label": "nextMenuItemIndex",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return the remaining time (in seconds) over which the current weather change will occur.\n\n\nWhen a weather change finishes, the game engine will automatically generate a new random weather change over a realistic time period (minimum of 90 minutes).",
            "examples": [
                {
                    "text": "```sqf\n_seconds = nextWeatherChange;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**nextWeatherChange**",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/nextWeatherChange"
        },
        "configuration": {
            "label": "nextWeatherChange",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Nil value. This value can be used to undefine existing [variables](https://community.bistudio.com/wiki/Variables).",
            "examples": [
                {
                    "text": "```sqf\nvariableToDestroy = nil;\n```"
                },
                {
                    "text": "```sqf\n\nprivate _variable = 50;\n_variable = nil;\nhint format [\"Variable = %1\", _variable];\t// will display \"Variable = any\" in {{Link|Scheduler#Unscheduled Environment|unscheduled environment}}\n\t\t\t\t\t\t\t\t\t\t\t// will output \"Error Undefined variable in expression: _variable\" in {{Link|Scheduler#Scheduled Environment|scheduled environment}}\n// identical to\nhint format [\"Variable = %1\", _variableThatWasNeverDefined];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`nil`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/nil"
        },
        "configuration": {
            "label": "nil",
            "grammarType": "null-literal"
        }
    },
    {
        "documentation": {
            "description": "Returns the total number of user-added menu items belonging to the given menu. **NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "menuName",
                            "description": "`String` - \"file\" or \"view\""
                        }
                    ],
                    "outline": "map `nMenuItems` menuName",
                    "returns": "`Number`"
                },
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "map `nMenuItems`  index",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/nMenuItems"
        },
        "configuration": {
            "label": "nMenuItems",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "`not` a is exactly the same as [[! a]].",
            "examples": [
                {
                    "text": "```sqf\nnot false; // returns true\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "a",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "`not` a",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/not"
        },
        "configuration": {
            "label": "not",
            "grammarType": "condition-operator"
        }
    },
    {
        "documentation": {
            "description": "Returns the number of engines a helicopter has. {{Feature|afm}}",
            "examples": [
                {
                    "text": "```sqf\n_engineCount = numberOfEnginesRTD vehicle player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "helicopterRTD",
                            "description": "`ObjectRTD` - helicopter"
                        }
                    ],
                    "outline": "`numberOfEnginesRTD` helicopterRTD",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/numberOfEnginesRTD"
        },
        "configuration": {
            "label": "numberOfEnginesRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Convert float number to a date.",
            "examples": [
                {
                    "text": "```sqf\nsetDate numberToDate [2008, 0.5324]; // sets date to [2008,7,13,7,49]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "year",
                            "description": "`Number` - year value, e.g 2035"
                        },
                        {
                            "name": "time",
                            "description": "`Number` - year time in range 0..1, from beginning to end of the year (e.g `**0**` is January 1<sup>st</sup> and `**1**` is December 31<sup>st</sup>)"
                        }
                    ],
                    "outline": "`numberToDate` [year, time]",
                    "returns": "`Array` format `Date`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/numberToDate"
        },
        "configuration": {
            "label": "numberToDate",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array with all curators which can edit given object.",
            "examples": [
                {
                    "text": "```sqf\n_curatorsThatcanEdit = objectCurators BIS_Tank;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "obj",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`objectCurators` obj",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/objectCurators"
        },
        "configuration": {
            "label": "objectCurators",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get object with given unique ID. If object is a `group` use `groupFromNetId`. As this command is MP only, you can use `BIS_fnc_objectFromNetId`, which extends the use to SP as well.",
            "examples": [
                {
                    "text": "```sqf\nobjectFromNetId \"2:3\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "id",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`objectFromNetId` id",
                    "returns": "`Object`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/objectFromNetId"
        },
        "configuration": {
            "label": "objectFromNetId",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "[[File:objectParent.jpg|right|500px]]\nReturns the parent of an object if said object is a proxy.\n\n**IMPORTANT**: \nUse `objectParent` instead of `vehicle` to get a soldier's vehicle.\nApart from being faster it is also more reliable, as when used on dead `crew`, `vehicle` command may surprisingly return the unit itself.\n\n\n**NOTE**: \nSince Arma 3 v2.18 `objectParent` can return the creator of a weaponholder if the weaponholder was created through some user action.",
            "examples": [
                {
                    "text": "```sqf\n\n_isOnFoot = isNull objectParent player;\t\t\t\t\t\t\t// check if the player is on foot\n_isCommander = player isEqualTo commander objectParent player;\t// check if the player is in a vehicle and is its commander\n\n_holder = objectParent _myBackpack;\t\t\t\t\t\t\t\t// return:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// - the weapon holder of a dropped backpack\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// - the cargo space of a vehicle holding this backpack\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// - the dead unit holding the backpack\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// works for a backpack, a vest or a uniform\n\n_isDeployed = isNull objectParent _deployableStaticMG;\t\t\t// true if deployed, false if in a backpack\n\n_ropeParent = objectParent _ropeSegment;\t\t\t\t\t\t// since {{arma3}} v2.12\n_creatorUnit = objectParent _weaponholder;\t\t\t\t\t\t// since {{arma3}} v2.18\n\n```"
                },
                {
                    "text": "Create and place a created backpack in front of player:\n\n```sqf\n\n_backpackContainer = \"B_TacticalPack_rgr\" createVehicle [0, 0, 0];\n_weaponHolder = objectParent _backpackContainer;\n_weaponHolder setPosWorld (player modelToWorldWorld [0, 5, 0]);\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`objectParent` object",
                    "returns": "`Object`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/objectParent"
        },
        "configuration": {
            "label": "objectParent",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "A non-existent `Object`. To compare non-existent objects use `isNull` or `isEqualTo`:\n\n```sqf\n\nobjNull == objNull;\t\t\t// false\nisNull objNull;\t\t\t\t// true\nobjNull isEqualTo objNull;\t// true\n\n```",
            "examples": [
                {
                    "text": "```sqf\nplayer == player; // false if player is null\n```"
                },
                {
                    "text": "```sqf\nisNull player; // true if player is null\n```"
                },
                {
                    "text": "```sqf\nstr objNull // <NULL-object>\n```"
                },
                {
                    "text": "```sqf\nposition objNull // [0,0,0]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`objNull`",
                    "returns": "`Object`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/objNull"
        },
        "configuration": {
            "label": "objNull",
            "grammarType": "null-literal"
        }
    },
    {
        "documentation": {
            "description": "Sets the status of an objective that was defined in [[Briefing.html|briefing.html]].\n\nStatus may be one of:\n* \"ACTIVE\"\n* \"FAILED\"\n* \"DONE\"\n* \"HIDDEN\"\n\nTo refer to an objective that is named \"OBJ_1\", for example, use only the index number in this command (i.e. \"1\" objStatus \"HIDDEN\").",
            "examples": [
                {
                    "text": "```sqf\n\"1\" objStatus \"DONE\";\n```\n \nMarks the objective named \"OBJ_1\" as completed."
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "objectivenumber",
                            "description": "`String`"
                        },
                        {
                            "name": "status",
                            "description": "`String`"
                        }
                    ],
                    "outline": "objectivenumber `objStatus` status",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/objStatus"
        },
        "configuration": {
            "label": "objStatus",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Select a sound declared in the [[Description.ext#Sound|Description.ext]] of the mission to be played the first time the [[Briefing.html#Group|Group tab]] is selected in the [[Briefing.html|briefing]].",
            "examples": [
                {
                    "text": "```sqf\nonBriefingGroup \"GroupVoiceOver\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "soundName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`onBriefingGroup`  soundName",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/onBriefingGroup"
        },
        "configuration": {
            "label": "onBriefingGroup",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Select a sound declared in the [[Description.ext#Sound|Description.ext]] of the mission to be played the first time the [[Briefing.html#Notes|Notes tab]] is selected in the [[Briefing.html|briefing]].",
            "examples": [
                {
                    "text": "```sqf\nonBriefingNotes \"NotesVoiceOver\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "soundName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`onBriefingNotes`  soundName",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/onBriefingNotes"
        },
        "configuration": {
            "label": "onBriefingNotes",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Select a sound declared in the [[Description.ext#Sound|Description.ext]] of the mission to be played the first time the [[Briefing.html#Plan|Plan tab]] is selected in the [[Briefing.html|briefing]].",
            "examples": [
                {
                    "text": "```sqf\nonBriefingPlan \"PlanVoiceOver\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "soundName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`onBriefingPlan`  soundName",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/onBriefingPlan"
        },
        "configuration": {
            "label": "onBriefingPlan",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Select a sound defined in the [[Description.ext#CfgSounds|CfgSounds]] of the mission to be played the first time the TeamSwitch tab is selected in the [[Briefing.html|briefing]].",
            "examples": [
                {
                    "text": "```sqf\nonBriefingTeamSwitch \"TeamSwitchVoiceOver\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "soundName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`onBriefingTeamSwitch` soundName",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/onBriefingTeamSwitch"
        },
        "configuration": {
            "label": "onBriefingTeamSwitch",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Defines code performed when hc command mode changes either because of (Left Ctrl + Space) shortcut or `hcShowBar` scripting command. Groups hc mode must contain at least one group for this command to work (see [High Command](https://community.bistudio.com/wiki/High%20Command)). Attached code receives __isHighCommand_ boolean. \n**NOTE**: Since **Arma 3** _v1.57_ a stackable version of this EH is available: [CommandModeChanged](https://community.bistudio.com/wiki/Arma%203%3A%20Mission%20Event%20Handlers%23CommandModeChanged)",
            "examples": [
                {
                    "text": "```sqf\n//Examples in-use can be found in:\n\n//ca\\modules\\HC\\data\\scripts\\HC_GUI.sqf\n//A3\\modules_f\\HC\\data\\scripts\\HC_GUI.sqf\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "code",
                            "description": "`Code` or `String`"
                        }
                    ],
                    "outline": "`onCommandModeChanged` code",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/onCommandModeChanged"
        },
        "configuration": {
            "label": "onCommandModeChanged",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Defines an action performed when the user double clicks on the map. Command receives:,_pos array position,_units array selected units,_shift,_alt bool key state\n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "command",
                            "description": "`String`"
                        }
                    ],
                    "outline": "map `onDoubleClick` command",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/onDoubleClick"
        },
        "configuration": {
            "label": "onDoubleClick",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Runs given statement every frame in an [unscheduled environment](https://community.bistudio.com/wiki/Scheduler%23Unscheduled%20Environment).\n**Arma 3**: \nIn order to keep compatibility between official and community content:\n* Since Arma 3 v1.57 a stackable version of this EH is available: [EachFrame Mission Event Handler](https://community.bistudio.com/wiki/Arma%203%3A%20Mission%20Event%20Handlers%23EachFrame)\n* Before that, the scripted version of the event handler should be used instead (using `BIS_fnc_addStackedEventHandler` and `BIS_fnc_removeStackedEventHandler`).",
            "examples": [
                {
                    "text": "```sqf\nonEachFrame { hintSilent str getPosWorld player }; // hints position every frame\n```"
                },
                {
                    "text": "Private variables defined outside of the `onEachFrame` scope are not inherited:\n\n```sqf\n\n_myVar = \"bob\";\nMyVar = \"bill\";\nonEachFrame { hintSilent str [_myVar, MyVar]; };\n// Result: [any, \"bill\"]\n\n```"
                },
                {
                    "text": "Only one `onEachFrame` loop can exist at any time:\n\n```sqf\n\nonEachFrame { player sideChat \"first\"; };\nonEachFrame { player sideChat \"second\"; };\t// replaces the first one\nonEachFrame {};\t\t\t\t\t\t\t\t// reset to the initial state\n\n```"
                },
                {
                    "text": "Script suspension is not permitted within `onEachFrame` scope:\n\n```sqf\n\n// will throw an error\nonEachFrame { sleep 1; };\n\n```"
                },
                {
                    "text": "```sqf\n\nonEachFrame { if (diag_frameNo mod 60 isEqualTo 0) then { /* code */ } };\t// executes every 60 frames (every second @ 60 FPS, every two seconds @ 30 FPS, etc)\n\nonEachFrame {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// this version is the closest to a precise 1 second tick\n\tif (isNil \"TAG_LastHint\") then\n\t{\n\t\tTAG_LastHint = diag_tickTime;\n\t}\n\telse\n\t{\n\t\tif (diag_tickTime - TAG_LastHint >= 1) then // set the duration in seconds here\n\t\t{\n\t\t\thint format [\"a second has passed (%1s since game start)\", diag_tickTime];\n\t\t\tTAG_LastHint = diag_tickTime;\n\t\t};\n\t};\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "statement",
                            "description": "`String` or `Code`"
                        }
                    ],
                    "outline": "`onEachFrame` statement",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/onEachFrame"
        },
        "configuration": {
            "label": "onEachFrame",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Defines an action performed when player clicked on group marker (3D or in a map). The code executed once.\nThis EH, unlike `onGroupIconOverEnter` and `onGroupIconOverLeave`, has one more param which returns 1 if RMB was pressed, 0 otherwise.\n**Arma 3**: Since Arma 3 v1.58 a [Mission Event Handler](https://community.bistudio.com/wiki/Arma%203%3A%20Mission%20Event%20Handlers%23GroupIconClick) exists and should be used.",
            "examples": [
                {
                    "text": "```sqf\n\nonGroupIconClick\n{\n\t// passed values for _this are:\n\tparams [\"_is3D\", \"_group\", \"_wpID\", \"_posX\", \"_posY\", \"_shift\", \"_ctrl\", \"_alt\"];\n\n\t// before Arma 3\n\t_is3D = _this select 0;\n\t_group = _this select 1;\n\t_wpID = _this select 2;\n\t_RMB = _this select 3;\n\t_posx = _this select 4;\n\t_posy = _this select 5;\n\t_shift = _this select 6;\n\t_ctrl = _this select 7;\n\t_alt = _this select 8;\n\n\t_message = format [\"____ Info ____\"];\n\t{_message = _message + format [\"\\n %1\", _x]} forEach _this;\n\thint _message;\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "command",
                            "description": "`String` or `Code` - script"
                        }
                    ],
                    "outline": "`onGroupIconClick` command",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/onGroupIconClick"
        },
        "configuration": {
            "label": "onGroupIconClick",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Defines an action performed when player moves pointer over group marker (3D or in a map). The code will execute continuously while pointer is over icon.\n**Arma 3**: Since Arma 3 v1.58 a [Mission Event Handler](https://community.bistudio.com/wiki/Arma%203%3A%20Mission%20Event%20Handlers%23GroupIconOverEnter) exists and should be used.",
            "examples": [
                {
                    "text": "```sqf\nonGroupIconOverEnter\n{\n\t// passed values for _this are:\n\tparams [\"_is3D\", \"_group\", \"_wpID\", \"_posX\", \"_posY\", \"_shift\", \"_ctrl\", \"_alt\"];\n\n\t// before Arma 3\n\t_is3D = _this select 0;\n\t_group = _this select 1;\n\t_wpID = _this select 2;\n\t_posx = _this select 3;\n\t_posy = _this select 4;\n\t_shift = _this select 5;\n\t_ctrl = _this select 6;\n\t_alt = _this select 7;\n\n\t_message = format [\"____ Info ____\"];\n\t{_message = _message + format [\"\\n %1\",_x]} forEach _this;\n\thint _message;\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "command",
                            "description": " `String` or `Code`"
                        }
                    ],
                    "outline": "`onGroupIconOverEnter` command",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/onGroupIconOverEnter"
        },
        "configuration": {
            "label": "onGroupIconOverEnter",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Defines an action performed when pointer, previously positioned over icon, is moved away from it (3D or in a map). The code is executed once.\n**Arma 3**: Since Arma 3 v1.58 a [Mission Event Handler](https://community.bistudio.com/wiki/Arma%203%3A%20Mission%20Event%20Handlers%23GroupIconOverLeave) exists and should be used.",
            "examples": [
                {
                    "text": "```sqf\nonGroupIconOverLeave\n{\n\t// passed values for _this are:\n\tparams [\"_is3D\", \"_group\", \"_wpID\", \"_posX\", \"_posY\", \"_shift\", \"_ctrl\", \"_alt\"];\n\n\t// before Arma 3\n\t_is3D = _this select 0;\n\t_group = _this select 1;\n\t_wpID = _this select 2;\n\t_posx = _this select 3;\n\t_posy = _this select 4;\n\t_shift = _this select 5;\n\t_ctrl = _this select 6;\n\t_alt = _this select 7;\n\n\t_message = format [\"____ Info ____\"];\n\t{ _message = _message + format [\"\\n %1\",_x] } forEach _this;\n\thint _message;\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "command",
                            "description": "`String` or `Code`"
                        }
                    ],
                    "outline": "`onGroupIconOverLeave` command",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/onGroupIconOverLeave"
        },
        "configuration": {
            "label": "onGroupIconOverLeave",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Defines an action performed when [high command](https://community.bistudio.com/wiki/High%20Command) group selection has been changed.\n\nCommand receives 2 variables:\n* _group: `Group` - last selected/deselected group\n* _isSelected: `Boolean` - new selection state of the specific group\nThe code is executed on every [hc](https://community.bistudio.com/wiki/High%20Command) group selection change until it is replaced or removed (see _Example 3_).\n**IMPORTANT**: Using the command again will **overwrite** the previously set code.\n**NOTE**: Since Arma 3 v1.58 a stackable version of this EH is available: [HCGroupSelectionChanged](https://community.bistudio.com/wiki/Arma%203%3A%20Mission%20Event%20Handlers%23HCGroupSelectionChanged)",
            "examples": [
                {
                    "text": "```sqf\nonHCGroupSelectionChanged {\n\tif (_isSelected) then\n\t{\n\t\thint format [\"Group %1 has been selected.\", _group];\n\t}\n\telse\n\t{\n\t\thint format [\"Group %1 has been deselected.\", _group];\n\t};\n};\n```"
                },
                {
                    "text": "```sqf\nonHCGroupSelectionChanged \"player globalChat 'HC group selection has been changed.';\";\n```"
                },
                {
                    "text": "Remove event handler:\n\n```sqf\nonHCGroupSelectionChanged \"\";\n// or\nonHCGroupSelectionChanged {};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "code",
                            "description": "`String` or `Code`"
                        }
                    ],
                    "outline": "`onHCGroupSelectionChanged` code",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/onHCGroupSelectionChanged"
        },
        "configuration": {
            "label": "onHCGroupSelectionChanged",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Defines the action performed when user clicks in map by executing command string. The code is executed on every click, until the **command** is \n* removed via <sqf inline>onMapSingleClick \"\", or\n* replaced by <sqf inline>onMapSingleClick \"SomeOtherCommand(s)\"\n\nIn Arma 3 the code should return `true` only if you wish to override default engine handling of the mouse click on map (see _Example 4_).\n\nFor older games, when click is processed, code should ultimately return `true` back to the engine. If `false` is returned, default processing by the game engine is done.\nReturn value of any other type (including `Nothing`) is an error. In such case default processing by the game engine is done, and error message may be displayed.\n\n**Arma 3**: Since **(Arma 3)** the stackable [MapSingleClick](https://community.bistudio.com/wiki/Arma%203%3A%20Mission%20Event%20Handlers%23MapSingleClick) Mission Event Handler is available and should be used instead.",
            "examples": [
                {
                    "text": "**Armed Assault:** Creates a soldier unit at the position clicked:\n\n```sqf\nonMapSingleClick \"'SoldierWB' createUnit [_pos, group player]; true\";\n```"
                },
                {
                    "text": "**Armed Assault:** Orders \"grp1\" to move to position clicked. Disables further map-click actions:\n\n```sqf\nonMapSingleClick \"grp1 move _pos; onMapSingleClick ''; true\";\n```"
                },
                {
                    "text": "**Operation Flashpoint:** Single quotes cannot be used for string definition, so two double-quotes have to be used instead:\n\n```sqf\nonMapSingleClick \"'SoldierWB' createUnit [_pos, group player]; true\";\n```"
                },
                {
                    "text": "```sqf\n\n// The following code will disable Shift+click waypoint marker creation\nonMapSingleClick {_shift};\n\n```"
                },
                {
                    "text": "```sqf\n\n// Pass params to onMapSingleClick code\nplayer onMapSingleClick { hint (\"Hello \" + name _this) }; // Hello KK\n\n```"
                },
                {
                    "text": "```sqf\n\n// Pass params to onMapSingleClick code -and- disable Shift+click waypoint marker creation\n player onMapSingleClick \"hint (\"\"Hello \"\" + name _this); _shift\"; // Hello KK\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "command",
                            "description": "`String` or `Code` - code executed on click. The following variables are available:\n* _pos: `Array` - Clicked position\n* _units: `Array` - Units which were selected (via function keys) **before** opening the map (_may be non-functional in Arma_)\n* _shift: `Boolean` - Whether {{Controls|Shift}} was pressed when clicking on the map\n* _alt: `Boolean` - Whether {{Controls|Alt}} was pressed when clicking on the map"
                        }
                    ],
                    "outline": "`onMapSingleClick` command",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "params",
                            "description": "`Anything`"
                        },
                        {
                            "name": "command",
                            "description": "`String` or `Code` - code executed on click. The following variables are available:\n* _this: `Anything` - Params passed to onMapSingleClick\n* _pos: `Array` - Clicked position\n* _units: `Array` - Units which were selected (via function keys) **before** opening the map (_may be non-functional in Arma_)\n* _shift: `Boolean` - Whether {{Controls|Shift}} was pressed when clicking on the map\n* _alt: `Boolean` - Whether {{Controls|Alt}} was pressed when clicking on the map"
                        }
                    ],
                    "outline": "params `onMapSingleClick` command",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/onMapSingleClick"
        },
        "configuration": {
            "label": "onMapSingleClick",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "This command will execute the provided code on the server whenever a player connects to a multiplayer session.\n**Arma 3**:  Since Arma 3 v1.57 a stackable MissionEventHandler is available and should be used: [PlayerConnected](https://community.bistudio.com/wiki/Arma%203%3A%20Mission%20Event%20Handlers%23PlayerConnected).\nBefore that, the functions `BIS_fnc_addStackedEventHandler` and `BIS_fnc_removeStackedEventHandler` should be used instead in order to keep compatibility between official and community content.",
            "examples": [
                {
                    "text": "```sqf\nonPlayerConnected \"[_id, _name] execVM 'PlayerConnected.sqf';\";\n```"
                },
                {
                    "text": "```sqf\nonPlayerConnected { diag_log [_id, _uid, _name] };\n```"
                },
                {
                    "text": "From Arma 3 v1.49:\n\n```sqf\nonPlayerConnected {\n\tsomevar = random 123;\n\t_owner publicVariableClient \"somevar\";\n\t// this will define \"somevar\" to a random value on the joining machine\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "code",
                            "description": "`String` or `Code` - has access to the following variables:\n* **_id**: `Number` - is the unique DirectPlay ID. Quite useless as the number is too big for in-built string representation and gets rounded. It is also the same id used for user placed markers.\n* **_uid**: `String` - is `getPlayerUID` of the joining player. In Arma 3 it is also the same as Steam ID.\n* **_name**: `String` - is `profileName` of the joining player.\n* **(Arma 3)** **_jip**: `Boolean` - is a flag that indicates whether or not the player joined after the mission has started (**J**oined **I**n **P**rogress). `true` when the player is [JIP](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Join%20In%20Progress), otherwise `false`.\n* **(Arma 3)** **_owner**: `Number` - is `owner` id of the joining player. Can be used for kick or ban purposes or just for `publicVariableClient`.\n* **(Arma 3)** **_idstr**: `String` - same as `**_id**` but in string format, so could be exactly compared to [ user marker](https://community.bistudio.com/wiki/allMapMarkers%20) ids."
                        }
                    ],
                    "outline": "`onPlayerConnected` code",
                    "returns": "`Nothing`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/onPlayerConnected"
        },
        "configuration": {
            "label": "onPlayerConnected",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "This command will execute attached code whenever a player is leaving an MP session. The code will receive a number of special variables:",
            "examples": [
                {
                    "text": "```sqf\nonPlayerDisconnected {diag_log [_id, _uid, _name]};\n```"
                },
                {
                    "text": "```sqf\nonPlayerDisconnected {\n\tif (count allPlayers == 0) then {\n\t\tendMission \"END1\";\n\t};\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "code",
                            "description": "`String` or `Code` - code executed. The code will receive a number of special variables:\n* _id: `Number` - Is the unique DirectPlay ID. Quite useless as the number is too big for in-built string representation and gets rounded. It is also the same id used for user placed markers.\n* _uid: `String` - Is `getPlayerUID` of the leaving player. In Arma 3 it is also the same as Steam ID.\n* _name: `String` - Is `profileName` of the leaving player.\n* {{GVI|arma3|1.50"
                        }
                    ],
                    "outline": "`onPlayerDisconnected`  code",
                    "returns": "`Nothing`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/onPlayerDisconnected"
        },
        "configuration": {
            "label": "onPlayerDisconnected",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Defines an action performed after the preload screen finished. Preload event occurs after briefing screen on mission start.\n{{Feature | important | This event handler also fires on client after user closes the main map. }}\n**Arma 3**: \n* Since Arma 3 v1.57 a stackable version of this EH is available: [PreloadFinished](https://community.bistudio.com/wiki/Arma%203%3A%20Mission%20Event%20Handlers%23PreloadFinished)\n* Before that, the `BIS_fnc_addStackedEventHandler` and `BIS_fnc_removeStackedEventHandler` functions should be used instead.",
            "examples": [
                {
                    "text": "```sqf\nonPreloadFinished {TAG_ReceivingScreenDone = true};\n```"
                },
                {
                    "text": "```sqf\n// removes the event immediately after the first run again\nonPreloadFinished { TAG_ReceivingScreenDone = true; onPreloadFinished \"\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "command",
                            "description": "`String` or `Code`"
                        }
                    ],
                    "outline": "`onPreloadFinished` command",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/onPreloadFinished"
        },
        "configuration": {
            "label": "onPreloadFinished",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Defines an action performed just before the preload screen started. Preload event occurs after briefing screen on mission start.**IMPORTANT**:  This event handler also fires on client after user closes the main map. \n\n{{Feature|informative|Since **Arma 3** _v1.57_ a stackable version of this EH is available: [PreloadStarted](https://community.bistudio.com/wiki/Arma%203%3A%20Mission%20Event%20Handlers%23PreloadStarted)}}\n\n**Arma 3**: In order to keep compatibility between official and community content the functions `BIS_fnc_addStackedEventHandler` and `BIS_fnc_removeStackedEventHandler` should be used instead.",
            "examples": [
                {
                    "text": "```sqf\nonPreloadStarted {diag_log \"preload started\"};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "command",
                            "description": "`String` or `Code`"
                        }
                    ],
                    "outline": "`onPreloadStarted` command",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/onPreloadStarted"
        },
        "configuration": {
            "label": "onPreloadStarted",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Defines an action performed when the user right clicks on the map and,selects New Object. Set to empty for default behavior. Command receives:,_pos array position, \n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "command",
                            "description": "`String`"
                        }
                    ],
                    "outline": "map `onShowNewObject` command",
                    "returns": "`Anything`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/onShowNewObject"
        },
        "configuration": {
            "label": "onShowNewObject",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Defines an action performed when the team switch is finished.\nCommandset receives the following special variables: __from_ object previous unit, __to_ object current unit.\nConsecutive use of onTeamSwitch command will overwrite previously set commandset. \n**IMPORTANT**:  This command is deprecated. Since **Arma 3** _v1.57_ a stackable version of this EH is available: [TeamSwitch](https://community.bistudio.com/wiki/Arma%203%3A%20Mission%20Event%20Handlers%23TeamSwitch)\n\n\n**NOTE**: When player switches and leaves behind AI unit, you need to enable \"TeamSwitch\" AI on it (with&nbsp;<sqf inline>onTeamSwitch { _from enableAI \"TeamSwitch\" };) so that the unit continues with `waypoints`.",
            "examples": [
                {
                    "text": "```sqf\nonTeamSwitch { [_from, _to] execVM \"myTeamSwitchScript.sqf\"; };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "commandset",
                            "description": " `String` or `Code`"
                        }
                    ],
                    "outline": "`onTeamSwitch` commandset",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/onTeamSwitch"
        },
        "configuration": {
            "label": "onTeamSwitch",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Force opens curator interface.",
            "examples": [
                {
                    "text": "Open interface:\n\n```sqf\nopenCuratorInterface;\n```"
                },
                {
                    "text": "Close interface:\n\n```sqf\nfindDisplay 312 closeDisplay 2;\n```"
                },
                {
                    "text": "Detect if user used \"Zeus\" key to open curator interface in the absence of event handler for it:\n\n```sqf\n\nfindDisplay 46 displayAddEventHandler [\"KeyDown\", {\n\tif (inputAction \"CuratorInterface\" > 0) then\n\t{\n\t\thint \"Curator interface is open\";\n\t};\n\tfalse\n}];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`openCuratorInterface`",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/openCuratorInterface"
        },
        "configuration": {
            "label": "openCuratorInterface",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Opens a Steam page of the app with given appId. Only works for known appId (game + linked DLCs)",
            "examples": [
                {
                    "text": "`openDLCPage` 288520"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "dlcID",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`openDLCPage` dlcID",
                    "returns": "`Boolean` - result"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/openDLCPage"
        },
        "configuration": {
            "label": "openDLCPage",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Opens or closes minimap if player has `**\"ItemGPS\"**` linked in inventory and `**\"MinimapDisplayComponent\"**` is not disabled with `enableInfoPanelComponent`. Returns `true` on success. If more than one minimap is open (see `infoPanels`, `infoPanel`) each call to the command will close only 1 minimap. Visibility of minimap can be checked with `visibleGPS` command.",
            "examples": [
                {
                    "text": "```sqf\n\nplayer linkItem \"ItemGPS\";\nprivate _success = openGPS true;\n\n```"
                },
                {
                    "text": "To close all opened minimaps:\n\n```sqf\n\nwhile { openGPS false } do { };\n// or\nwhile { visibleGPS } do { openGPS false };\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "open",
                            "description": "`Boolean` - `true` to open, `false` to close"
                        }
                    ],
                    "outline": "`openGPS` open",
                    "returns": "`Boolean` - `true` on success"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/openGPS"
        },
        "configuration": {
            "label": "openGPS",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Opens or closes in-game map.\n**WARNING**: \nIf `**forced**` param is set to `true` and map is set to open, when the map is opened it cannot be closed manually and the user can get stuck requiring the game restart.\nMake sure you provide scripted mechanics to resolve this, should you need to force the map.\nUseful when you wish to keep user for example on respawn screen, where they could still interact with the map but cannot enter the game until the time is up.",
            "examples": [
                {
                    "text": "```sqf\n\nopenMap [true, false];\t// opens map normally\nopenMap [false, false];\t// closes an opened map normally\nopenMap [true, true];\t// force opens map and keeps it open (the user cannot close it on their own)\nopenMap [false, true];\t// since {{arma3}} 2.06: prevents map from opening, closes open map and forces it to stay close (the user cannot open it on their own)\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "show",
                            "description": "`Boolean` - if `true` opens map, if `false` closes map, provided it is not _forced_"
                        }
                    ],
                    "outline": "`openMap` show",
                    "returns": "`Boolean` - equivalent of `visibleMap`"
                },
                {
                    "parameters": [
                        {
                            "name": "show",
                            "description": "`Boolean` - if `true` opens map, if `false` closes map, provided it is not _forced_."
                        },
                        {
                            "name": "forced",
                            "description": "`Boolean` - if `true` keeps map from closing when map is open. {{GVI|arma3|2.06"
                        }
                    ],
                    "outline": "`openMap` [show, forced]",
                    "returns": "`Boolean` - equivalent of `visibleMap`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/openMap"
        },
        "configuration": {
            "label": "openMap",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Opens a Steam application, returns false if it was not possible to run the application.",
            "examples": [
                {
                    "text": "```sqf\nopenSteamApp 553228;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "appID",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`openSteamApp` appID",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/openSteamApp"
        },
        "configuration": {
            "label": "openSteamApp",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Opens Steam overlay with given YT video. Video URL is the end part of the YT URL, starting with **watch?v=...**. If the user has Steam overlay disabled, the command will display appropriate message to the user and return `false`.",
            "examples": [
                {
                    "text": "```sqf\n\n// open http://www.youtube.com/watch?v=UBIAbm7Rt78\n_isOpened = openYoutubeVideo \"watch?v=UBIAbm7Rt78\";\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "youTubeUrl",
                            "description": "`String` - for parameters see: https://developers.google.com/youtube/player_parameters"
                        }
                    ],
                    "outline": "`openYoutubeVideo` youTubeUrl",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/openYoutubeVideo"
        },
        "configuration": {
            "label": "openYoutubeVideo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Pre-defined variable for the opfor [side](https://community.bistudio.com/wiki/Side).",
            "examples": [
                {
                    "text": "```sqf\nif (side player == opfor) then\n{\n\thint \"OPFOR\";\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`opfor`",
                    "returns": "`Side`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/opfor"
        },
        "configuration": {
            "label": "opfor",
            "grammarType": "reserved-literal"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if one or both conditions are `true`. In case of the alternative syntax, {{Link|https://en.wikipedia.org/wiki/Lazy_evaluation#Control_structures|lazy evaluation}} is used. That means that if left operand is `true`, evaluation of the right side is skipped completely.",
            "examples": [
                {
                    "text": "```sqf\nif (_obj1 or (_enemycount == 0) or (not alive _enemyGeneral)) then { hint \"you win !\"; };\n```"
                },
                {
                    "text": "```sqf\n// without lazy evaluation, select would throw an error in the event of an empty array\nif ((count _array == 0) or { (_array select 0) != player }) then\n{\n\thint \"It works!\";\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "a",
                            "description": "`Boolean` - test condition or variable"
                        },
                        {
                            "name": "b",
                            "description": "`Boolean` - test condition or variable"
                        }
                    ],
                    "outline": "a `or` b",
                    "returns": "`Boolean`"
                },
                {
                    "parameters": [
                        {
                            "name": "a",
                            "description": "`Boolean` - test condition or variable"
                        },
                        {
                            "name": "b",
                            "description": "`Code` - code that returns `Boolean`. It is not evaluated if _a_ returns `true`"
                        }
                    ],
                    "outline": "a `or` b",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/or"
        },
        "configuration": {
            "label": "or",
            "grammarType": "condition-operator"
        }
    },
    {
        "documentation": {
            "description": "Force all units in the array to get in or out of their assigned vehicles. Units must be assigned to a vehicle before this command will do anything.\n**NOTE**: See [AI Group Vehicle Management](https://community.bistudio.com/wiki/AI%20Group%20Vehicle%20Management) for more information.",
            "examples": [
                {
                    "text": "```sqf\n[_unitOne, _unitTwo] orderGetIn true;\n```"
                },
                {
                    "text": "```sqf\n[_unitOne, _unitTwo] orderGetIn false;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitArray",
                            "description": "`Array`"
                        },
                        {
                            "name": "order",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "unitArray `orderGetIn` order",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/orderGetIn"
        },
        "configuration": {
            "label": "orderGetIn",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return the current overcast level. Zero is clear skies, one is maximum cloud cover.",
            "examples": [
                {
                    "text": "```sqf\n_cloudLevel = overcast;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`overcast`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/overcast"
        },
        "configuration": {
            "label": "overcast",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return the overcast forecast.",
            "examples": [
                {
                    "text": "```sqf\n_forecast = overcastForecast;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**overcastForecast**",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/overcastForecast"
        },
        "configuration": {
            "label": "overcastForecast",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "On server machine, returns the [ machine network ID](https://community.bistudio.com/wiki/Multiplayer_Scripting%23Machine_network_ID%20) of the client to which the object is [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality). Otherwise returns 0. For use on clients `clientOwner` command is available. To find out the owner of a `Group`, use `groupOwner`.",
            "examples": [
                {
                    "text": "```sqf\n_clientID = owner _someobject;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`owner` object",
                    "returns": "`Number`"
                }
            ],
            "argumentLocality": "Global Argument",
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/owner"
        },
        "configuration": {
            "label": "owner",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Extracts a single value with given index from input argument, similar to `BIS_fnc_param`.  When used without argument, as shown in main syntax, internal variable [_this](https://community.bistudio.com/wiki/Magic%20Variables%23this), which is usually available inside functions and event handlers, is used as argument. If input argument is not an array, it will be converted to 1 element array.\n\n\n\nIf extracted item of input with given index is undefined, of the wrong type or of the wrong length (if the item is an array), default value is used instead. Since Arma 3 v1.54, onscreen errors are displayed for when the input is of the wrong type or size.",
            "examples": [
                {
                    "text": "```sqf\n[1, 2, 3] call \n{\n\tprivate _one = param [0, 1];\n\tprivate _two = param [1, 2];\n\tprivate _three = param [2, 3];\n\t// ...\n};\n```"
                },
                {
                    "text": "```sqf\n[123] call \n{\n\tprivate _val = param [0];\n};\n\n// Below would produce the same result as above\n123 call \n{\n\tprivate _val = param [0];\n};\n```"
                },
                {
                    "text": "```sqf\n_z = position player param [2, 0];\nif (_z > 10) then \n{\n\thint \"YOU ARE FLYING!\";\n};\n```"
                },
                {
                    "text": "```sqf\n\nfnc = \n{\n\tprivate _pos = param [0, [0,0,0], [objNull, []], [2,3]];\n\tprivate _rad = param [1, 0, [0]];\n\t_pos nearObjects _rad;\n};\n\n[position player, 25] call fnc; // ok\n[player, 25] call fnc; // ok\n[25, player] call fnc; // default values are used\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "index",
                            "description": "`Number` - index of required item in the input array."
                        },
                        {
                            "name": "defaultValue",
                            "description": "`Anything` - (Optional) a default value to return if input is undefined, of the wrong type or of the wrong length (if the item is an array)."
                        },
                        {
                            "name": "expectedDataTypes",
                            "description": "`Array` of direct [ Data Types](https://community.bistudio.com/wiki/%3ACategory%3A%20Data%20Types) - (Optional) checks if passed value is one of listed [ Data Types](https://community.bistudio.com/wiki/%3ACategory%3A%20Data%20Types). If not, default value is used instead. Empty array [] means every data type is accepted."
                        },
                        {
                            "name": "expectedArrayCount",
                            "description": "`Number` or `Array` - (Optional) a single size or array of sizes. If passed input value is an array, checks that it has a certain number of elements. If not, default value is used instead. Empty array [] means any size is accepted."
                        }
                    ],
                    "outline": "`param` [index, defaultValue, expectedDataTypes, expectedArrayCount]",
                    "returns": "`Anything` - extracted value on success or default value otherwise. `Nothing` if syntax error occurred."
                },
                {
                    "parameters": [
                        {
                            "name": "argument",
                            "description": "`Anything` - a usual array of params is expected. If a non-array value is passed, it will be converted to 1 element array"
                        },
                        {
                            "name": "index",
                            "description": "`Number` - index of required item in the input array."
                        },
                        {
                            "name": "defaultValue",
                            "description": "`Anything` - (Optional) a default value to return if input is undefined, of the wrong type or of the wrong length (if the item is an array)."
                        },
                        {
                            "name": "expectedDataTypes",
                            "description": "`Array` of direct [ Data Types](https://community.bistudio.com/wiki/%3ACategory%3A%20Data%20Types) - (Optional) checks if passed value is one of listed [ Data Types](https://community.bistudio.com/wiki/%3ACategory%3A%20Data%20Types). If not, default value is used instead. Empty array [] means every data type is accepted."
                        },
                        {
                            "name": "expectedArrayCount",
                            "description": "`Number` or `Array` - (Optional) a single size or array of sizes. If passed input value is an array, checks that it has a certain number of elements. If not, default value is used instead. Empty array [] means any size is accepted."
                        }
                    ],
                    "outline": "argument `param` [index, defaultValue, expectedDataTypes, expectedArrayCount]",
                    "returns": "`Anything` - extracted value on success or default value otherwise. `Nothing` if syntax error occurred."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/param"
        },
        "configuration": {
            "label": "param",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Parses input argument into array of `private` variables. When used without argument, as shown in main syntax, internal variable [_this](https://community.bistudio.com/wiki/Magic%20Variables%23this), which is usually available inside functions and event handlers, is used as argument.\n\n\nIn addition to simple parsing directly into variables, input can be tested in case it is undefined, of the wrong type or of the wrong size (if array) and substituted if necessary with default values. Since Arma 3 v1.54, onscreen errors are displayed for when the input is of the wrong type or size.\n{{Feature|warning| All variables names must start with underscore and be enclosed in quotes: {{hl",
            "examples": [
                {
                    "text": "```sqf\n[1, 2, 3] call {\n\tprivate [\"_one\", \"_two\", \"_three\"];\n\t_one = _this select 0;\n\t_two = _this select 1;\n\t_three = _this select 2;\n\t// ...\n};\n\n// Same as above, only using params\n[1, 2, 3] call {\n\tparams [\"_one\", \"_two\", \"_three\"];\n\t// ...\n};\n```"
                },
                {
                    "text": "```sqf\n[123] call {\n\tparams [\"_myvar\"];\n};\n\n// Below would produce the same result as above\n123 call {\n\tparams [\"_myvar\"];\n};\n```"
                },
                {
                    "text": "```sqf\nposition player params [\"\", \"\", \"_z\"];\nif (_z > 10) then {\n\thint \"YOU ARE FLYING!\";\n};\n```"
                },
                {
                    "text": "```sqf\n[1, nil, 2] params [\"_var1\", \"_var2\", \"_var3\"];\n// All 3 variables are made private but only _var1 and _var3 are defined\n\n[1, nil, 2] params [\"_var1\", [\"_var2\", 23], \"_var3\"];\n// All 3 variables are private and defined\n```"
                },
                {
                    "text": "```sqf\n\n[1, 2] call {\n\tif (!params [\"_var1\", \"_var2\", [\"_var3\", true, [true]]]) exitWith {\n\t\thint str [_var1, _var2, _var3];\n\t};\n};\n// The hint shows [1,2,true]\n// Script exits, default value was used due to missing value\n\n[1, 2, 3] call {\n\tif (!params [\"_var1\", \"_var2\", [\"_var3\", true, [true]]]) exitWith {\n\t\thint str [_var1, _var2, _var3];\n\t};\n};\n// The hint shows [1,2,true]\n// Script exits, default value was used due incorrect value type\n\n```"
                },
                {
                    "text": "```sqf\n\n[1, \"ok\", [1, 2, 3]] call {\n\tif (!params [\n\t\t[\"_var1\", 0, [0]],\n\t\t[\"_var2\", \"\", [\"\"]],\n\t\t[\"_var3\", [0,0,0], [[], objNull, 0], [2,3]]\n\t]) exitWith {};\n\thint \"ok\";\n};\n// Passes validation\n\n[1, 2, [3, 4, 5]] call {\n\tif (!params [\"_var1\", \"_var2\", [\"_var3\", [], [[], objNull, 0], 0]]) exitWith {};\n\thint \"ok\";\n};\n// Fails, because passed array is expected to be of 0 length, i.e. empty\n\n```"
                },
                {
                    "text": "```sqf\n[1, 2, 3, [4, 5, 6]] call {\n\tparams [\"_one\", \"_two\", \"_three\"];\n\t_this select 3 params [\"_four\", \"_five\", \"_six\"];\n};\n```"
                },
                {
                    "text": "```sqf\n\n{\n\t_x params [\"_group\", \"_index\"];\n\t// ...\n} forEach waypoints group player;\n\nfn_someFnc = {\n\tparams [\"_position\", [\"_direction\", 0], [\"_name\", \"\"]];\n\t// Extract the x, y, and z from \"_position\" array:\n\t_position params [\"_x\", \"_y\", \"_z\"];\n\t// ...\n};\n\n[position player, direction player, name player] call fn_someFnc;\n\n```"
                },
                {
                    "text": "```sqf\n\nplayer addEventHandler [\"HitPart\", {\n\t_this select 0 params [\"_target\", \"_shooter\", \"_projectile\"];\n}];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "elementN",
                            "description": "`String` or `Array`\n* `String`:name of the `private` variable (must begin with underscore _, e.g. \"_myVar\")\n* `Array` format [variableName, defaultValue, expectedDataTypes, expectedArrayCount]:\n** variableName: `String` - name of a `private` variable (must begin with underscore _, e.g. \"_myVar\")\n** defaultValue: `Anything` - default value to return if input element is undefined, of the wrong type or of the wrong size (if array).\n** expectedDataTypes: `Array` of direct [Data Types](https://community.bistudio.com/wiki/%3ACategory%3A%20Data%20Types) - (Optional) checks if passed value is one of listed Data Types. If not, default value is used instead. Empty array [] means every data type is accepted.\n** expectedArrayCount: `Number` or `Array` - (Optional) a single size or array of sizes. If passed input value is an array, checks that it has a certain number of elements. If not, default value is used instead. Empty array [] means any size is accepted."
                        }
                    ],
                    "outline": "`params` [element1, element2, ...]",
                    "returns": "`Boolean` - `false` if error occurred or default value has been used, otherwise `true`"
                },
                {
                    "parameters": [
                        {
                            "name": "argument",
                            "description": "`Anything` - a usual array of params is expected. If a non-array argument is passed, it will be converted to 1 element array"
                        },
                        {
                            "name": "elementN",
                            "description": "`String` or `Array`\n* `String`:name of the `private` variable (must begin with underscore _, e.g. \"_myVar\")\n* `Array` format [variableName, defaultValue, expectedDataTypes, expectedArrayCount]:\n** variableName: `String` - name of a `private` variable (must begin with underscore _, e.g. \"_myVar\")\n** defaultValue: `Anything` - default value to return if input element is undefined, of the wrong type or of the wrong size (if array).\n** expectedDataTypes: `Array` of direct [Data Types](https://community.bistudio.com/wiki/%3ACategory%3A%20Data%20Types) - (Optional) checks if passed value is one of listed Data Types. If not, default value is used instead. Empty array [] means every data type is accepted.\n** expectedArrayCount: `Number` or `Array` - (Optional) a single size or array of sizes. If passed input value is an array, checks that it has a certain number of elements. If not, default value is used instead. Empty array [] means any size is accepted."
                        }
                    ],
                    "outline": "argument `params` [element1, element2, ...]",
                    "returns": "`Boolean` - `false` if error occurred or default value has been used, otherwise `true`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/params"
        },
        "configuration": {
            "label": "params",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Parses the string, interpreting its content as a floating point number.\n**IMPORTANT**: This command does **not** work with strings representing hexadecimal numbers (e.g `**\"0xCF\"**`).\n\n```sqf\n\nparseNumber \"512 + 0x2F\"; // 512, WRONG!\n\"512 + 0x2F\" call BIS_fnc_parseNumber // 559, CORRECT!\n\n```\n\n**NOTE**: Starting whitespaces are discarded, then as many valid characters are used to be interpreted as a number until an invalid character is found then the rest of the string is ignored.",
            "examples": [
                {
                    "text": "```sqf\n\n_number = parseNumber \"0.125\";\t\t\t// 0.125\n_number = parseNumber \"0050\";\t\t\t// 50\n_number = parseNumber \"\t\t42 yes\";\t// 42\n_number = parseNumber \"3 or 4\";\t\t\t// 3\n_number = parseNumber \"either 3 or 4\";\t// 0\n_number = parseNumber \"0xCF\";\t\t\t// 0\n\n```"
                },
                {
                    "text": "since Arma 3 v1.50:\n\n```sqf\n\n_result = parseNumber false;\t\t\t\t// 0\n_result = parseNumber true;\t\t\t\t\t// 1\n_zeroOneStatus = parseNumber alive player;\t// 0 if the player is dead, 1 if alive\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "value",
                            "description": "`String` or {{GVI|arma3|1.50"
                        }
                    ],
                    "outline": "`parseNumber` value",
                    "returns": "`Number` - the parsed number, `**0**` if no valid number was found; in the case of a passed `Boolean`, 0 if `false`, 1 if `true`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/parseNumber"
        },
        "configuration": {
            "label": "parseNumber",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Converts given, formatted as simple array, `String` into a valid `Array`. Simple array is array consisting of `Number`s, `String`s, `Boolean`s and `Array`s of all of the above.\nThis command is almost **4&times; faster** than similar uncached `call` `compile` method. And because `call` `compile` is not required, it is also **more secure** and primarily intended for use with `callExtension` to parse the `String` output into `Array`.\n\n**NOTE**: \nSince Arma 3 v1.96 the command tolerates extra spaces and supports single quotes. The only recognised keywords (case **in**sensitive) are:\n{{Columns|2|\n* `**true**` - translates into `true`\n* `**false**` - translates into `false`\n* `**nil**` - translates into `nil`\n* `**null**` - translates into `nil`\n* `**&lt;null&gt;**` - translates into `nil` (_not_ `objNull`)\n* `**any**` - translates into `nil`\n}}",
            "examples": [
                {
                    "text": "```sqf\nprivate _arr = parseSimpleArray \"[1,2,3]\";\n```"
                },
                {
                    "text": "```sqf\n\nprivate _array1 = [1, \"2\", true, [4, \"five\", false]];\nprivate _array2 = parseSimpleArray \"[1,\"\"2\"\",true,[4,\"\"five\"\",false]]\";\n_array1 isEqualTo _array2; // true\n\n```"
                },
                {
                    "text": "```sqf\n\n_bool = true;\n_num = 123.45;\n_str = \"ok\";\n_arr = [1, false, \"cool\"];\n_res = parseSimpleArray format [\"[%1,%2,%3,%4]\", _bool, _num, str _str, str _arr];\n// note how _bool and _num do not need str, however if used anyway, the result in this case would be identical\nhint str _res;  // returns [true,123.45,\"ok\",[1,false,\"cool\"]]\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "stringArray",
                            "description": "`String` - string formatted as simple array"
                        }
                    ],
                    "outline": "`parseSimpleArray` stringArray",
                    "returns": "`Array` - valid array"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/parseSimpleArray"
        },
        "configuration": {
            "label": "parseSimpleArray",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates a structured text by parsing the given XML description. Do not use `parseText` when displaying a localized text from [[Stringtable.xml]].\n\nA detailed explanation of all formatting possibilities can be found at [Structured Text](https://community.bistudio.com/wiki/Structured%20Text).",
            "examples": [
                {
                    "text": "```sqf\nprivate _Stxt = parseText \"First line<img image='data\\isniper.paa'/><br/>Second line\";\n```"
                },
                {
                    "text": "```sqf\nhintSilent parseText format[\"<t size='1.25' font='Zeppelin33' color='#ff0000'>%1 lives remaining.</t>\", 12];\n```"
                },
                {
                    "text": "```sqf\nprivate _clickableLink = parseText \"<a href='http://arma3.com'>A3</a>\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "text",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`parseText` text",
                    "returns": "[Structured Text](https://community.bistudio.com/wiki/Structured%20Text)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/parseText"
        },
        "configuration": {
            "label": "parseText",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the global namespace attached to config parser.",
            "examples": [
                {
                    "text": "```sqf\n\nparsingNamespace setVariable [\"var1\", 101.23124];\n_profVar1 = parsingNamespace getVariable \"var1\";\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`parsingNamespace`",
                    "returns": "`Namespace`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/parsingNamespace"
        },
        "configuration": {
            "label": "parsingNamespace",
            "grammarType": "namespace"
        }
    },
    {
        "documentation": {
            "description": "Returns current user settings for particles quality (configure->video->general->particles). 0-low, 1-normal, 2-high",
            "examples": [
                {
                    "text": "```sqf\n_currentQuality = particlesQuality;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**particlesQuality**",
                    "returns": "`Number`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/particlesQuality"
        },
        "configuration": {
            "label": "particlesQuality",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns current periscope elevation value, see also `elevatePeriscope`.",
            "examples": [
                {
                    "text": "```sqf\n_eddie periscopeElevation [0] params [\"_elevation\", \"_isLocked\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - vehicle with periscope tech"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` - turret path"
                        }
                    ],
                    "outline": "vehicle `periscopeElevation` turretPath",
                    "returns": "`Array` in format [elevation, isLocked], where:\n* elevation: `Number` - current periscope elevation value. -1 in case of an invalid turret\n* isLocked: `Boolean` - whether or not user override is blocked"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/periscopeElevation"
        },
        "configuration": {
            "label": "periscopeElevation",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "pi (180 degrees converted to [Radians](https://community.bistudio.com/wiki/Number%23Radians)).",
            "examples": [
                {
                    "text": "```sqf\n_radians = 2 * pi; // Result is 6.2830\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**pi**",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/pi"
        },
        "configuration": {
            "label": "pi",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Transfers weapons and magazines from cargo of object into the weapon pool. This is used in the campaign to transfer weapons into the next mission.",
            "examples": [
                {
                    "text": "```sqf\npickWeaponPool vehicle player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`pickWeaponPool` object",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/pickWeaponPool"
        },
        "configuration": {
            "label": "pickWeaponPool",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the pitch of a persons voice.",
            "examples": [
                {
                    "text": "```sqf\npitch player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "person",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`pitch` person",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/pitch"
        },
        "configuration": {
            "label": "pitch",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns grid size based on screen resolution, UI size and configs: uiScaleFactor, uiScaleMaxGrids.",
            "examples": [
                {
                    "text": "```sqf\n_gridHeight = pixelH * pixelGrid;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**pixelGrid**",
                    "returns": "`Number` - grid size, see [Arma 3: Pixel Grid System](https://community.bistudio.com/wiki/Arma%203%3A%20Pixel%20Grid%20System)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/pixelGrid"
        },
        "configuration": {
            "label": "pixelGrid",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns grid size based on screen resolution.",
            "examples": [
                {
                    "text": "```sqf\n_gridBaseHeight = pixelH * pixelGridBase;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**pixelGridBase**",
                    "returns": "`Number` - grid size, see [Arma 3: Pixel Grid System](https://community.bistudio.com/wiki/Arma%203%3A%20Pixel%20Grid%20System)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/pixelGridBase"
        },
        "configuration": {
            "label": "pixelGridBase",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns grid size based on screen resolution and configs: uiScaleFactor, uiScaleMaxGrids. As mentioned in the name of this command, the **user interface scale is ignored**.",
            "examples": [
                {
                    "text": "```sqf\n_gridHeightNoUIScale = pixelH * pixelGridNoUIScale;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**pixelGridNoUIScale**",
                    "returns": "`Number` - grid size, see [Arma 3: Pixel Grid System](https://community.bistudio.com/wiki/Arma%203%3A%20Pixel%20Grid%20System)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/pixelGridNoUIScale"
        },
        "configuration": {
            "label": "pixelGridNoUIScale",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the height of one pixel for current resolution.",
            "examples": [
                {
                    "text": "```sqf\n_pixelHeight = pixelH;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**pixelH**",
                    "returns": "`Number` - pixel height"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/pixelH"
        },
        "configuration": {
            "label": "pixelH",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns width of one pixel for current resolution.",
            "examples": [
                {
                    "text": "```sqf\n_pixelWidth = pixelW;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**pixelW**",
                    "returns": "`Number` - pixel width"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/pixelW"
        },
        "configuration": {
            "label": "pixelW",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the number of available slots in mission per [side](https://community.bistudio.com/wiki/Side) (both empty and taken). \nIn singleplayer mission, it returns number of playable units per side.",
            "examples": [
                {
                    "text": "```sqf\n_maxBluforPlayers = playableSlotsNumber blufor;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "side",
                            "description": "`Side`"
                        }
                    ],
                    "outline": "`playableSlotsNumber` side",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/playableSlotsNumber"
        },
        "configuration": {
            "label": "playableSlotsNumber",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a list of playable units in a multiplayer game (occupied by both AI or players), created on the following sides `east`/`opfor`, `west`/`blufor`, `resistance`/`independent` and `civilian` only.\nDoes not contain units of `sideLogic`.\n{{Feature|informative|This command returns an empty array in Singleplayer; use `switchableUnits` instead.}}\n**IMPORTANT**: This command does not include dead players awaiting for respawn.",
            "examples": [
                {
                    "text": "```sqf\n{ _x groupChat \"I'm a playable unit.\"; } forEach playableUnits;\n```"
                },
                {
                    "text": "```sqf\n_playableInGroup = units group player arrayIntersect playableUnits;\n```"
                },
                {
                    "text": "```sqf\n_nonPlayableInGroup = units group player - playableUnits;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`playableUnits`",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/playableUnits"
        },
        "configuration": {
            "label": "playableUnits",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "When used on a person, a smooth transition to the given action will be initiated.\n\nFor Arma 3 actions see: [playAction/actions](https://community.bistudio.com/wiki/playAction%2Factions).",
            "examples": [
                {
                    "text": "```sqf\nsoldierOne playAction \"SitDown\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "soldier",
                            "description": "`Object`"
                        },
                        {
                            "name": "action",
                            "description": "`String`"
                        }
                    ],
                    "outline": "soldier `playAction` action",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/playAction"
        },
        "configuration": {
            "label": "playAction",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "When used on a person, a smooth transition to the given action will be initiated, but all previous playAction are discarded.\n**Arma 3**: For Arma 3 actions, see [playAction/actions](https://community.bistudio.com/wiki/playAction%2Factions).",
            "examples": [
                {
                    "text": "```sqf\nsoldierOne playActionNow \"SitDown\";\n```"
                },
                {
                    "text": "```sqf\nrabbitTwo playActionNow \"WalkF\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "soldier",
                            "description": "`Object`"
                        },
                        {
                            "name": "action",
                            "description": "`String`"
                        }
                    ],
                    "outline": "soldier `playActionNow` action",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/playActionNow"
        },
        "configuration": {
            "label": "playActionNow",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "A person object controlled by user. In Intros and Outros this isn't set by default and must be assigned.",
            "examples": [
                {
                    "text": "```sqf\nplayer addRating 500;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`player`",
                    "returns": "`Object`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/player"
        },
        "configuration": {
            "label": "player",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return the player's remaining time before respawn, or -1 if it is not available (such as when the player is alive).",
            "examples": [
                {
                    "text": "```sqf\nwaitUntil { playerRespawnTime <= 0 };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**playerRespawnTime**",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/playerRespawnTime"
        },
        "configuration": {
            "label": "playerRespawnTime",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the player's [side](https://community.bistudio.com/wiki/Side). This is valid even when the player controlled person is dead (a difference from `side` `player`).\n**NOTE**: `playerSide` will not change automatically if `player` `join`s a `group` on different `side`. However, `selectPlayer` command can and does change `playerSide` - see _Example 3_ for information.",
            "examples": [
                {
                    "text": "```sqf\n\nif (side man1 == playerSide) then\n{\n\thint \"man1 is on your side!\";\n};\n\n```"
                },
                {
                    "text": "```sqf\n\nswitch (playerSide) do\n{\n\tcase west: { hint \"You are BLUFOR\"; };\n\tcase east: { hint \"You are OPFOR\"; };\n};\n\n```"
                },
                {
                    "text": "the following code will change the side of the player including `playerSide`:\n\n```sqf\n\nprivate _player = player;\n[player] join createGroup east;\nselectNoPlayer;\nselectPlayer _player;\nhint str playerSide; // EAST\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`playerSide`",
                    "returns": "`Side`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/playerSide"
        },
        "configuration": {
            "label": "playerSide",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns count of occupied role selection slots for given side. Players who claimed a slot in the lobby but did not start the mission are counted as well. If <syntaxhighlight lang=\"cpp\" inline>disabledAI = 0;</syntaxhighlight> in [[Description.ext#disabledAI|description.ext]] or _Enable AI_ option is checked in [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor), AI bots will be treated as valid players and will be counted too.",
            "examples": [
                {
                    "text": "```sqf\n_west = playersNumber west;\n_east = playersNumber east;\n_civ = playersNumber civilian;\nhint format [\"West:%1 East:%2, Civ:%3\", _west, _east, _civ];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "side",
                            "description": "`Side`"
                        }
                    ],
                    "outline": "`playersNumber` side",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/playersNumber"
        },
        "configuration": {
            "label": "playersNumber",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get the local player's current locked target (with weapons that can lock on).",
            "examples": [
                {
                    "text": "```sqf\n\nplayerTargetLock params [\"_target\", \"_lock\", \"_cfg\"];\nif (_lock == 1) then\n{\n\thint format [\"%1 locked %2\", getText (_cfg >> \"displayName\"), getText (configOf _target >> \"displayName\")];\n};\n\n```"
                },
                {
                    "text": "```sqf\nplayerTargetLock; // returns [objNull, 0, configNull] if no lock is being done\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`playerTargetLock`",
                    "returns": "`Array` format [target, lockValue, config]:\n* target: `Object` - the locked object\n* lockValue: `Number` - in range 0..1 where 1 is fully locked\n* config: `Config` - used weapon's `**CfgWeapons**` config"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/playerTargetLock"
        },
        "configuration": {
            "label": "playerTargetLock",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "When used on a person,a smooth transition to the given move will be initiated. **Command doesn't seem to be functional**",
            "examples": [
                {
                    "text": "```sqf\nsoldierOne playGesture \"Wave\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "soldier",
                            "description": "`Object`"
                        },
                        {
                            "name": "moveName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "soldier `playGesture` moveName",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/playGesture"
        },
        "configuration": {
            "label": "playGesture",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "The mission is launched (from the main menu).",
            "examples": [
                {
                    "text": "```sqf\nplayMission [\"XOutrage\",\"x05Negotiator.Noe\"];\n```"
                },
                {
                    "text": "```sqf\nplayMission [\"\", configFile >> \"CfgMissions\" >> \"Missions\" >> \"Armory1\"];\n```"
                },
                {
                    "text": "```sqf\nplayMission [\"\",\"\\A3\\Missions_F_Bootcamp\\Scenarios\\Arsenal.VR\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "campaign",
                            "description": "`String` - directory of Campaign, if empty a single mission is launched"
                        },
                        {
                            "name": "mission",
                            "description": "`String` or `Config` - directory if a string"
                        },
                        {
                            "name": "skipBriefing",
                            "description": "`Boolean` - (Optional) If true, the intro and briefing are skipped."
                        }
                    ],
                    "outline": "`playMission` [campaign, mission, skipBriefing]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/playMission"
        },
        "configuration": {
            "label": "playMission",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "When used on a person, smooth transition to given move will be done.\n\nThe difference between `playMove` and `playMoveNow` is that `playMove` adds another move to the move queue, while `playMoveNow` replaces the whole move queue with new move (see _Example 2_).\n{{Feature|informative|see [:Category:Moves](https://community.bistudio.com/wiki/%3ACategory%3AMoves) for respective games animations.}}\n**IMPORTANT**: A transition is only possible if the current and provided animations have the correct relationship configuration.",
            "examples": [
                {
                    "text": "```sqf\nsoldierOne playMove \"Stand\";\n```"
                },
                {
                    "text": "```sqf\nplayer switchMove \"AmovPercMstpSrasWrflDnon\";\n[] spawn \n{\n\tsleep 0.5;\n\tplayer playMove \"AmovPpneMstpSrasWrflDnon\";\t\t// player goes prone\n\tplayer playMove \"amovPknlMstpSrasWrflDnon\";\t\t// player gets up on one knee\n};\n```"
                },
                {
                    "text": "```sqf\nplayer switchMove \"AmovPercMstpSrasWrflDnon\";\n[] spawn\n{\n\tsleep 0.5;\n\tplayer playMove \"AmovPpneMstpSrasWrflDnon\";\t\t// player never goes prone\n\tplayer playMoveNow \"AmovPknlMstpSrasWrflDnon\";\t// player goes down on one knee straight away\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        },
                        {
                            "name": "moveName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unitName `playMove` moveName",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/playMove"
        },
        "configuration": {
            "label": "playMove",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "When used on a person,a smooth transition to the given move will be initiated, but all previous playMove are discarded. \n\nThe difference between `playMove` and `playMoveNow` is that `playMove` adds another move to the move queue, while `playMoveNow` replaces the whole move queue with new move (see _Example 2_).\n{{Feature|informative|see [:Category:Moves](https://community.bistudio.com/wiki/%3ACategory%3AMoves) for respective games animations.}}\n**IMPORTANT**: A transition is only possible if the current and provided animations have the correct relationship configuration.",
            "examples": [
                {
                    "text": "```sqf\nplayer playMoveNow \"AmovPercMevaSlowWrflDf\";\n```"
                },
                {
                    "text": "```sqf\nplayer switchMove \"AmovPercMstpSrasWrflDnon\";\n[] spawn \n{\n\tsleep 0.5;\n\tplayer playMove \"AmovPpneMstpSrasWrflDnon\"; // player goes prone\n\tplayer playMove \"amovPknlMstpSrasWrflDnon\"; // player gets up on one knee\n};\n```"
                },
                {
                    "text": "```sqf\nplayer switchMove \"amovpercmstpsraswrfldnon\";\n[] spawn\n{\n\tsleep 0.5;\n\tplayer playMove \"AmovPpneMstpSrasWrflDnon\"; // player never goes prone\n\tplayer playMoveNow \"AmovPknlMstpSrasWrflDnon\"; // player goes down on one knee straight away\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "soldier",
                            "description": "`Object`"
                        },
                        {
                            "name": "moveName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "soldier `playMoveNow` moveName",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/playMoveNow"
        },
        "configuration": {
            "label": "playMoveNow",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Plays music defined in [[Description.ext#CfgMusic|Description.ext's CfgMusic]] or config.cpp. If the _musicName_ could not be found a message is logged into the .rpt file: `**Music <_musicName_> not found**`.\n* [Arma 3: CfgMusic](https://community.bistudio.com/wiki/Arma%203%3A%20CfgMusic)\n* [Arma 2: CfgMusic](https://community.bistudio.com/wiki/Arma%202%3A%20CfgMusic)\n* [ArmA: Armed Assault: CfgMusic](https://community.bistudio.com/wiki/ArmA%3A%20Armed%20Assault%3A%20CfgMusic)\n* [Operation Flashpoint: CfgMusic](https://community.bistudio.com/wiki/Operation%20Flashpoint%3A%20CfgMusic)\n\n**NOTE**: To stop the music, use <sqf inline>playMusic \"\";.",
            "examples": [
                {
                    "text": "```sqf\nplayMusic \"RadioAmbient1\";\n```"
                },
                {
                    "text": "```sqf\nplayMusic [\"RadioAmbient3\", 3]; // start to play from 00:00:03\n```"
                },
                {
                    "text": "Play from 00:00:01 to 00:00:05:\n\n```sqf\n\n[] spawn {\n\tplayMusic [\"RadioAmbient5\", 1];\n\tsleep 4;\n\tplayMusic \"\";\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "musicName",
                            "description": "`String` - music classname"
                        }
                    ],
                    "outline": "`playMusic` musicName",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "musicName",
                            "description": "`String` - music classname"
                        },
                        {
                            "name": "start",
                            "description": "`Number` - start, in seconds. Can be negative."
                        }
                    ],
                    "outline": "`playMusic` [musicName, start]",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/playMusic"
        },
        "configuration": {
            "label": "playMusic",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Load the given world, launch an empty mission, and execute the given expression.\nIf provided, _config_ can reference to the config entry, replacing [[Description.ext]] for this mission.",
            "examples": [
                {
                    "text": "```sqf\nplayScriptedMission\n[\n\t\"desert_e\",\n\t{\n\t\texecVM \"\\ca\\missions_e\\data\\scenes\\credits1\\init.sqf\";\n\t},\n\tconfigFile / \"CfgMissions\" / \"Cutscenes\" / \"Credits\"\n];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "world",
                            "description": "`String`"
                        },
                        {
                            "name": "expression",
                            "description": "`Code`"
                        },
                        {
                            "name": "config",
                            "description": "`Config` - (Optional)"
                        },
                        {
                            "name": "ignoreChildWindow",
                            "description": "`Boolean` - (Optional)"
                        }
                    ],
                    "outline": "`playScriptedMission` [world, expression, config, ignoreChildWindow]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/playScriptedMission"
        },
        "configuration": {
            "label": "playScriptedMission",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Plays a sound from CfgSounds. Sound can be defined in `missionConfigFile`, `configFile` or `campaignConfigFile`.",
            "examples": [
                {
                    "text": "```sqf\nplaySound \"soundname\";\n```"
                },
                {
                    "text": "Start a sound and then stop it after 1.2 second:\n\n```sqf\n\nplaySound \"AlarmCar\";\n0 spawn\n{\n\t_sound = ASLToAGL [0,0,0] nearestObject \"#soundonvehicle\";\n\tsleep 1.2;\n\tdeleteVehicle _sound;\n};\n\n// since {{arma3}} v2.00\n_source = playSound \"AlarmCar\";\n_source spawn\n{\n\tsleep 1.2;\n\tdeleteVehicle _this;\n};\n\n```"
                },
                {
                    "text": "Start a sound and wait until it is finished:\n\n```sqf\n\nplaySound \"Alarm\";\nhint \"Started!\";\n0 spawn\n{\n\t_sound = ASLToAGL [0,0,0] nearestObject \"#soundonvehicle\";\n\twaitUntil {isNull _sound};\n\thint \"Finished!\";\n};\n\n// since {{arma3}} v2.00\nprivate _source = playSound \"Alarm\";\n_source spawn\n{\n\twaitUntil { isNull _this };\n\thint \"Finished!\";\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "soundName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`playSound` soundName",
                    "returns": "`Object` - the speaker object (`Nothing` before {{GVI|arma3|2.00"
                },
                {
                    "parameters": [
                        {
                            "name": "soundName",
                            "description": "`String`"
                        },
                        {
                            "name": "isSpeech",
                            "description": "`Boolean` or {{GVI|arma3|2.04"
                        },
                        {
                            "name": "offset",
                            "description": "`Number` - (Optional, default 0) offset in seconds. Same as `playMusic`"
                        }
                    ],
                    "outline": "`playSound` [soundName, isSpeech, offset]",
                    "returns": "`Object` - the speaker object (`Nothing` before {{GVI|arma3|2.00"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/playSound"
        },
        "configuration": {
            "label": "playSound",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Plays positional sound with given _filename_ on every computer on network.",
            "examples": [
                {
                    "text": "```sqf\nplaySound3D [\"A3\\Sounds_F\\sfx\\blip1.wss\", player];\n```"
                },
                {
                    "text": "```sqf\nplaySound3D [\"A3\\Sounds_F\\sfx\\blip1.wss\", player, false, getPosASL player, 1, 1, 0];\n```"
                },
                {
                    "text": "```sqf\nplaySound3D [getMissionPath \"mySound.ogg\", player]; // to play a mission directory sound\n```"
                },
                {
                    "text": "Sound file extension must be specified even if a config entry has none:\n\n```sqf\n\nplaySound3D [\"A3\\Sounds_F\\sfx\\alarm_independent\", player];\t\t// no sound\nplaySound3D [\"A3\\Sounds_F\\sfx\\alarm_independent.wss\", player];\t// alarm\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "filename",
                            "description": "`String` - see [Arma 3: Sound Files](https://community.bistudio.com/wiki/Arma%203%3A%20Sound%20Files) for available file names or _Example 3_ to use mission files\n\n{{Feature|important|\nSince {{GVI|arma3|2.10"
                        },
                        {
                            "name": "soundSource",
                            "description": "`Object` - the object emitting the sound. If _soundPosition_ below is specified this parameter is ignored"
                        },
                        {
                            "name": "isInside",
                            "description": "`Boolean` - (Optional, default `false`) - `true` to simulate a sound played inside a building or similar"
                        },
                        {
                            "name": "soundPosition",
                            "description": "`Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) - (Optional, default [0,0,0]) position for sound emitter, overrides _soundSource_\n{{Feature|informative|If a following parameter has to be used, simply use <sqf inline>getPosASL _soundSource for _soundPosition_ instead of <sqf inline>_soundSource for _soundSource_.}}\n**IMPORTANT**: This parameter also takes `Object` but their [AGL](https://community.bistudio.com/wiki/Position%23PositionAGL) position is used instead of [ASL](https://community.bistudio.com/wiki/Position%23PositionASL) resulting in sound source being underground if they're above ground, always use [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) instead."
                        },
                        {
                            "name": "volume",
                            "description": "`Number` - (Optional, default 1) sound volume. A value greater than 5 gets capped"
                        },
                        {
                            "name": "soundPitch",
                            "description": "`Number` - (Optional, default 1)\n* 1.0 &rarr; normal \n* 0.5 &rarr; Darth Vader\n* 2.0 &rarr; Chipmunks"
                        },
                        {
                            "name": "distance",
                            "description": "`Number` - (Optional, default 0) how far the sound is audible, in meters. `**0**` means no maximum distance"
                        },
                        {
                            "name": "offset",
                            "description": "`Number` - (Optional, default 0) offset in seconds. Same as with `playMusic`"
                        },
                        {
                            "name": "local",
                            "description": "`Boolean` - (Optional, default `false`) if `true` the sound will not be broadcast over network"
                        }
                    ],
                    "outline": "`playSound3D` [filename, soundSource, isInside, soundPosition, volume, soundPitch, distance, offset, local]",
                    "returns": "`Number` - id of the sound (0..65535) (was `Nothing` before {{GVI|arma3|2.12"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/playSound3D"
        },
        "configuration": {
            "label": "playSound3D",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Plays given `CfgSounds` sound or a [ sound file](https://community.bistudio.com/wiki/Arma%203%3A%20Sound%20Files) given by file path through a dedicated UI sound channel unaffected by the global mixer volumes. If the file path is given, the leading slash will be ignored.",
            "examples": [
                {
                    "text": "```sqf\nplaySoundUI [\"Alarm\", 0.5, 0.5];\n```"
                },
                {
                    "text": "```sqf\nplaySoundUI [\"A3\\Sounds_F\\sfx\\blip1.wss\"];\n```"
                },
                {
                    "text": "Sound file extension must be specified even if a config entry has none:\n\n```sqf\n\nplaySoundUI [\"A3\\Sounds_F\\sfx\\alarm_independent\", 5, 1];\t\t// no sound\nplaySoundUI [\"A3\\Sounds_F\\sfx\\alarm_independent.wss\", 5, 1];\t// alarm\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "sound",
                            "description": "`String` - `CfgSounds` class or file as used in `playSound3D` (see [Arma 3: Sound Files](https://community.bistudio.com/wiki/Arma%203%3A%20Sound%20Files) for available file names)"
                        },
                        {
                            "name": "volume",
                            "description": "`Number` - (Optional, default 1) sound volume clamped in range 0..5"
                        },
                        {
                            "name": "soundPitch",
                            "description": "`Number` - (Optional, default 1)\n* 1.0 &rarr; normal \n* 0.5 &rarr; Darth Vader\n* 2.0 &rarr; Chipmunks"
                        },
                        {
                            "name": "isEffect",
                            "description": "`Boolean` - (Optional, default `false`) if `true`, diverts sound through effects channel (see `fadeSound`, `soundVolume`)"
                        },
                        {
                            "name": "offset",
                            "description": "`Number` - (Optional, default 0) offset in seconds. Same as with `playSound3D`"
                        }
                    ],
                    "outline": "`playSoundUI` [sound, volume, soundPitch, isEffect, offset]",
                    "returns": "`Number` - id of the sound (0..65535) since {{GVI|arma3|2.12"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/playSoundUI"
        },
        "configuration": {
            "label": "playSoundUI",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the pose of the given unit.",
            "examples": [
                {
                    "text": "```sqf\nif (pose player == \"SurfaceSwimming\") then { hint \"How's water?\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`pose` unit",
                    "returns": "`String` - can be one of:\n{{Columns|3|\n* `**\"Dead\"**`\n* `**\"Weapon\"**` (special weapon - AT)\n* `**\"BinocLying\"**`\n* `**\"LyingNoWeapon\"**`\n* `**\"Lying\"**`\n* `**\"HandGunLying\"**`\n* `**\"Crouch\"**`\n* `**\"HandGunCrouch\"**`\n* `**\"Combat\"**`\n* `**\"HandGunStand\"**`\n* `**\"Stand\"**`\n* `**\"Swimming\"**`\n* `**\"BottomSwimming\"**`\n* `**\"SurfaceSwimming\"**`\n* `**\"Diving\"**`\n* `**\"BottomDiving\"**`\n* `**\"SurfaceDiving\"**`\n* `**\"NoWeapon\"**` (civilian moves)\n* `**\"Binoc\"**` (binocular pose)\n* `**\"BinocStand\"**` (binocular pose (weapon on back))\n* `**\"Healing\"**`\n* `**\"Dragged\"**`\n* `**\"Carrying\"**`\n* `**\"Freefall\"**`\n}}"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/pose"
        },
        "configuration": {
            "label": "pose",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns position of an object (alias of `getPos`) or location (alias of `locationPosition`).\n**IMPORTANT**: Do **not** use this command to get an object's position in 3D. See `getPos` for an explanation and alternatives.",
            "examples": [
                {
                    "text": "```sqf\nprivate _pos = position player;\n```"
                },
                {
                    "text": "```sqf\n_myLocationHomePos = position myLocation;\n```"
                },
                {
                    "text": "```sqf\n\nprivate _location = createLocation [\"b_inf\", [1000, 1000], 1, 1];\n_location attachObject player;\nlocationPosition _location;\t// [1916.03,5711.98,12.208]\ngetPos _location;\t\t\t// [1916.03,5711.98,12.208]\nposition _location;\t\t\t// [1000,1000,0]\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`position` object",
                    "returns": "`Array` format [PositionAGLS](https://community.bistudio.com/wiki/Position%23PositionAGLS)"
                },
                {
                    "parameters": [
                        {
                            "name": "location",
                            "description": "`Location`"
                        }
                    ],
                    "outline": "`position` location",
                    "returns": "`Array` format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) - see `locationPosition`\n**IMPORTANT**: This position is the location's position **regardless of `attachObject` usage** - see _Example 3_."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/position"
        },
        "configuration": {
            "label": "position",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "[[File:PositionCameraToWorld.jpg|right|200px]]Get the world coordinate space ([Position - PositionAGL|AGL](https://community.bistudio.com/wiki/Position#PositionAGL|AGL)) from a camera-relative position.",
            "examples": [
                {
                    "text": "```sqf\n_worldPos = positionCameraToWorld _cameraPos;\n```"
                },
                {
                    "text": "Example demonstrating reversed Y and Z:\n\n```sqf\n\nplayer setDir 0; // assuming player is looking forward\nhint str [positionCameraToWorld [0,0,0], positionCameraToWorld [0,0,1]];\n/*\n[\n\t[2481.35, 5671.21, 1.51395],\n\t[2481.35, 5672.21, 1.46955]\n]\n*/\n\n```"
                },
                {
                    "text": "```sqf\n_cameraAGLPosition = positionCameraToWorld [0,0,0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "cameraPos",
                            "description": "[PositionRelative](https://community.bistudio.com/wiki/Position%23PositionRelative) - relative camera position, format **[x, z, y]** (X = left-right, Z = below-above, Y = back-front)\n**IMPORTANT**: This command has Y and Z axes swapped around, which is different from the usual model space coordinates format ({{Link|Position|[x, y, z]}})."
                        }
                    ],
                    "outline": "`positionCameraToWorld` cameraPos",
                    "returns": "`Array` - camera world position, format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/positionCameraToWorld"
        },
        "configuration": {
            "label": "positionCameraToWorld",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Converts map screen coordinates into world coordinates. Unlike `ctrlMapScreenToWorld`, this command returns world position is format [x, y, 0], otherwise it is identical to it.",
            "examples": [
                {
                    "text": "```sqf\n_worldCoord = _control posScreenToWorld _ScreenCoord;\n```"
                },
                {
                    "text": "```sqf\n_worldCoord = _control posScreenToWorld [_x, _y];\n```"
                },
                {
                    "text": "```sqf\n_worldCoord = _control posScreenToWorld [0.5, 0.5];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control` - map control"
                        },
                        {
                            "name": "x",
                            "description": "`Number` - screen X"
                        },
                        {
                            "name": "y",
                            "description": "`Number` - screen Y"
                        }
                    ],
                    "outline": "map `posScreenToWorld` [x, y]",
                    "returns": "`Array` - world position in format [x,y,0]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/posScreenToWorld"
        },
        "configuration": {
            "label": "posScreenToWorld",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Converts world coordinates into map screen coordinates. This command is identical to `ctrlMapWorldToScreen`.",
            "examples": [
                {
                    "text": "```sqf\n_screenCoord = _control posWorldToScreen _worldCoord;\n```"
                },
                {
                    "text": "```sqf\n_screenCoord = _control posWorldToScreen position player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map ",
                            "description": "`Control` - map control"
                        },
                        {
                            "name": "position ",
                            "description": "`Array` - world position in format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position3D](https://community.bistudio.com/wiki/Position%23Introduction)"
                        }
                    ],
                    "outline": "map `posWorldToScreen` position",
                    "returns": "`Array` - screen coordinates in format [x, y]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/posWorldToScreen"
        },
        "configuration": {
            "label": "posWorldToScreen",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set [post process effect](https://community.bistudio.com/wiki/Post%20Process%20Effects) parameters.\n\n**NOTE**: The two syntaxes differ in what format of the params they accept. The syntax with PP name expects colors to be packed into arrays within main array, while the syntax with PP handle can handle both flat and packed array. Therefore it is recommended to use the universal packed format, such as shown in the examples.",
            "examples": [
                {
                    "text": "```sqf\n\"colorCorrections\" ppEffectAdjust [1, 1, -0.01, [0, 0, 0, 0], [1.5, 1, 1.2, 0.6], [0.199, 0.587, 0.114, 0]];\n```"
                },
                {
                    "text": "Black&White:\n\n```sqf\n_colorCorrectionsEffHandle ppEffectAdjust [1, 0.4, 0, [0, 0, 0, 0], [1, 1, 1, 0], [1, 1, 1, 0]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "effect",
                            "description": "`String` or `Number`\n* `String` - effect name\n* `Number` - effect handle"
                        },
                        {
                            "name": "settings",
                            "description": "`Array` - array of effect params"
                        }
                    ],
                    "outline": "effect `ppEffectAdjust` settings",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/ppEffectAdjust"
        },
        "configuration": {
            "label": "ppEffectAdjust",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Commit [post process effect](https://community.bistudio.com/wiki/Post%20Process%20Effects) in given time.",
            "examples": [
                {
                    "text": "```sqf\n\"colorCorrection\" ppEffectCommit 3;\n```"
                },
                {
                    "text": "```sqf\n_hndl ppEffectCommit 3;\n```"
                },
                {
                    "text": "```sqf\n[_hndl1, _hndl2] ppEffectCommit 3;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "effect",
                            "description": "`String` - name of the effect"
                        },
                        {
                            "name": "commit",
                            "description": "`Number` - duration"
                        }
                    ],
                    "outline": "effect `ppEffectCommit` commit",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "handle",
                            "description": "`Number` - handle of the effect"
                        },
                        {
                            "name": "commit",
                            "description": "`Number` - duration"
                        }
                    ],
                    "outline": "handle `ppEffectCommit` commit",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "handles",
                            "description": "`Array` of `Number`s - list of handles"
                        },
                        {
                            "name": "commit",
                            "description": "`Number` - duration"
                        }
                    ],
                    "outline": "handles `ppEffectCommit` commit",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ppEffectCommit"
        },
        "configuration": {
            "label": "ppEffectCommit",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check whether given [post process effect](https://community.bistudio.com/wiki/Post%20Process%20Effects) is committed.",
            "examples": [
                {
                    "text": "```sqf\nppEffectCommitted \"colorCorrection\";\n```"
                },
                {
                    "text": "```sqf\nppEffectCommitted _hndl;\n```"
                },
                {
                    "text": "```sqf\nif (ppEffectCommitted \"colorCorrection\") then { hint \"alteration done !\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "effect",
                            "description": "`String` - effect name"
                        }
                    ],
                    "outline": "`ppEffectCommitted` effect",
                    "returns": "`Boolean`"
                },
                {
                    "parameters": [
                        {
                            "name": "handle",
                            "description": "`Number` - effect handle"
                        }
                    ],
                    "outline": "`ppEffectCommitted` handle",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ppEffectCommitted"
        },
        "configuration": {
            "label": "ppEffectCommitted",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates [Post Process Effects](https://community.bistudio.com/wiki/Post%20Process%20Effects) specified by effect name and priority.\n\nSupported effects:\n{{Columns|4|\n* [[Post Process Effects#RadialBlur|\"RadialBlur\"]]\n* [[Post Process Effects#ChromAberration|\"ChromAberration\"]]\n* [[Post Process Effects#WetDistortion|\"WetDistortion\"]]\n* [[Post Process Effects#ColorCorrections|\"ColorCorrections\"]]\n* [[Post Process Effects#DynamicBlur|\"DynamicBlur\"]]\n* [[Post Process Effects#FilmGrain|\"FilmGrain\"]]\n* [[Post Process Effects#ColorInversion|\"ColorInversion\"]]\n* [[Post Process Effects#SSAO|\"SSAO\"]]\n* [[Post Process Effects#Resolution|\"Resolution\"]]\n}}",
            "examples": [
                {
                    "text": "```sqf\n_ppGrain = ppEffectCreate [\"filmGrain\", 2005];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "name",
                            "description": "`String` - name of effect type"
                        },
                        {
                            "name": "priority",
                            "description": "`Number` - unique priority, defines order of applying effect to the scene. If there is another effect using the same priority, creation will fail"
                        }
                    ],
                    "outline": "`ppEffectCreate` [name, priority]",
                    "returns": "`Number` - handle or -1 if failed"
                },
                {
                    "parameters": [
                        {
                            "name": "nameN",
                            "description": "`String` - name of effect type"
                        },
                        {
                            "name": "priorityN",
                            "description": "`Number` - unique priority, defines order of applying effect to the scene. If there is another effect using the same priority, creation will fail"
                        }
                    ],
                    "outline": "`ppEffectCreate` [<nowiki/>[name1, priority1], ...]",
                    "returns": "`Array` of `Number`s [handle1, ...] or `Nothing` if failed"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ppEffectCreate"
        },
        "configuration": {
            "label": "ppEffectCreate",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Destroy [Post Process Effects](https://community.bistudio.com/wiki/Post%20Process%20Effects) given by handle or array of handles.",
            "examples": [
                {
                    "text": "```sqf\nppEffectDestroy _hndl;\n```"
                },
                {
                    "text": "```sqf\nppEffectDestroy [_hndl0, _hndl1, _hndl2];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "effect",
                            "description": "`Number` - effect handle"
                        }
                    ],
                    "outline": "`ppEffectDestroy` effect",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "effects",
                            "description": "`Array` of `Number`s - array of effect handles"
                        }
                    ],
                    "outline": "`ppEffectDestroy` effects",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ppEffectDestroy"
        },
        "configuration": {
            "label": "ppEffectDestroy",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enable / disable [Post Process Effects](https://community.bistudio.com/wiki/Post%20Process%20Effects)\n**IMPORTANT**:  If effect fails to get enabled (can check it with `ppEffectEnabled`) try adding a little `sleep` in front of it.",
            "examples": [
                {
                    "text": "```sqf\n\"colorCorrections\" ppEffectEnable true;\n```"
                },
                {
                    "text": "```sqf\n_hndl ppEffectEnable true;\n```"
                },
                {
                    "text": "```sqf\n[_hndl1, _hndl2] ppEffectEnable true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "effect",
                            "description": "`String` - name of the effect"
                        },
                        {
                            "name": "enable",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "effect `ppEffectEnable` enable",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "effect",
                            "description": "`Number` - handle of the effect"
                        },
                        {
                            "name": "enable",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "effect `ppEffectEnable` enable",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "effectArray",
                            "description": "`Array` of `Number`s - array of effect handles"
                        },
                        {
                            "name": "enable",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "effectArray `ppEffectEnable` enable",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ppEffectEnable"
        },
        "configuration": {
            "label": "ppEffectEnable",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks whether given post process effect is enabled",
            "examples": [
                {
                    "text": "```sqf\n_enabled = ppEffectEnabled _hndl;\n```"
                },
                {
                    "text": "```sqf\n_enabled = ppEffectEnabled \"DynamicBlur\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "effect",
                            "description": "`Number` - effect handle"
                        }
                    ],
                    "outline": "`ppEffectEnabled` effect",
                    "returns": "`Boolean`"
                },
                {
                    "parameters": [
                        {
                            "name": "effect",
                            "description": "`String` - effect name"
                        }
                    ],
                    "outline": "`ppEffectEnabled` effect",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ppEffectEnabled"
        },
        "configuration": {
            "label": "ppEffectEnabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Forces use of [Post Process Effects](https://community.bistudio.com/wiki/Post%20Process%20Effects) in NVG.",
            "examples": [
                {
                    "text": "```sqf\n_ppGrain ppEffectForceInNVG true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "ppHandle",
                            "description": "`Number` - handle of the post processing returned by `ppEffectCreate`"
                        },
                        {
                            "name": "force",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "ppHandle `ppEffectForceInNVG` force",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/ppEffectForceInNVG"
        },
        "configuration": {
            "label": "ppEffectForceInNVG",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return the movement precision of the given entity, how is the entity able to be precise when moving to given target.\n**NOTE**: See {{Link|CfgVehicles Config Reference#precision}}.",
            "examples": [
                {
                    "text": "```sqf\n// used in formationCDanger.fsm\nif (getPosATL _this distance _dangerPos <= precision _this) then { /* ... */ };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`precision` entity",
                    "returns": "`Number` - accuracy in metres"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/precision"
        },
        "configuration": {
            "label": "precision",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Preload all textures and models around given `Position` to avoid visual artifacts after camera is moved.\n\nShould be used before any abrupt camera change/cut.\n\nReturns true once all data is ready. See `camPreload` for alternative, more flexible camera preloading.",
            "examples": [
                {
                    "text": "```sqf\nwaitUntil { preloadCamera markerPos \"cam_location_2\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Array` format `Position`"
                        }
                    ],
                    "outline": "`preloadCamera` position",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/preloadCamera"
        },
        "configuration": {
            "label": "preloadCamera",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Preloads all textures, materials and proxies needed to render given object. Works with objects and classnames - note that classnames require an object instance in the mission.",
            "examples": [
                {
                    "text": "```sqf\n[] spawn \n{\n\twaitUntil { 10 preloadObject \"SoldierW\" };\n\thint \"Preload finished\";\n};\n```"
                },
                {
                    "text": "```sqf\n[] spawn \n{\n\twaitUntil { 10 preloadObject leader player };\n\thint \"Preload finished\";\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "distance",
                            "description": "`Number` -  distance at which preload the object"
                        },
                        {
                            "name": "object",
                            "description": "`Object` or `String`\n* `Object` - existing object\n* `String` - object classname - an object of that type **must** exist in the mission for it to have effect"
                        }
                    ],
                    "outline": "distance `preloadObject` object",
                    "returns": "`Boolean` - `true` when preload is finished"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/preloadObject"
        },
        "configuration": {
            "label": "preloadObject",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Makes sure that a sound can start playing without any delay once it is needed. Command works in Arma 3, but might not be implemented in earlier Arma installments.",
            "examples": [
                {
                    "text": "```sqf\n{\n\twaitUntil {preloadSound _x};\n} forEach getArray (missionConfigFile >> \"CfgSounds\" >> \"sounds\");\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "soundName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`preloadSound` soundName",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/preloadSound"
        },
        "configuration": {
            "label": "preloadSound",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Preloads data for the given resource object.",
            "examples": [
                {
                    "text": "```sqf\n_ok = preloadTitleObj [\"BISLogo\", \"PLAIN\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "name",
                            "description": "`String` - defined in <sqf inline>configFile >> \"CfgTitles\" >> name"
                        },
                        {
                            "name": "type",
                            "description": "`String` - see [Title Effect Type](https://community.bistudio.com/wiki/Title%20Effect%20Type)s"
                        },
                        {
                            "name": "speed",
                            "description": "`Number` - (Optional, default -1)"
                        },
                        {
                            "name": "showInMap",
                            "description": "`Boolean` - (Optional, default `true`)"
                        }
                    ],
                    "outline": "`preloadTitleObj` [name, type, speed, showInMap]",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/preloadTitleObj"
        },
        "configuration": {
            "label": "preloadTitleObj",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Resource title - preload data. The resource can be defined in the [[Description.ext]] file.",
            "examples": [
                {
                    "text": "```sqf\n_ok = preloadTitleRsc [\"BIS\", \"PLAIN\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "name",
                            "description": "`String` - defined in [[Description.ext]] for the mission"
                        },
                        {
                            "name": "type",
                            "description": "`String` - e.g \"PLAIN\""
                        },
                        {
                            "name": "speed",
                            "description": "`Number` - (Optional) ignored"
                        },
                        {
                            "name": "showInMap",
                            "description": "`Boolean` - (Optional)"
                        }
                    ],
                    "outline": "`preloadTitleRsc` [name, type, speed, showInMap]",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/preloadTitleRsc"
        },
        "configuration": {
            "label": "preloadTitleRsc",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Reads and processes the content of the specified file. Preprocessor is C-like, supports comments using `**//**` or `**/***` and `***/**` and [PreProcessor Commands](https://community.bistudio.com/wiki/PreProcessor%20Commands).\nDue to the hard-drive access this command executes and the lack of caching this command should not be used in time-critical script loops.\n**WARNING**: If the file you are loading is not prepared using UTF-8 encoding and contains some characters [ with codes](https://community.bistudio.com/wiki/toArray%20) > 127, they might convert incorrectly.",
            "examples": [
                {
                    "text": "```sqf\n_content = preprocessFile \"myFunction.sqf\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "fileName",
                            "description": "`String` - path to the file and name of the file"
                        }
                    ],
                    "outline": "`preprocessFile` fileName",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/preprocessFile"
        },
        "configuration": {
            "label": "preprocessFile",
            "grammarType": "file-compiler"
        }
    },
    {
        "documentation": {
            "description": "Returns the preprocessed content of the given file. The preprocessor is C-like, it supports comments using /* */ and [PreProcessor Commands](https://community.bistudio.com/wiki/PreProcessor%20Commands). The preprocessor also adds a default debug entrypoint for compiler at the begining of script: `**#line 1 \"aFilename\"**`\n\n\n\nThe **#line** keyword can be used in any script that are not preprocess, or with preprocess script with extra macro to protect reserverd sharp character. The format is:\n\n`****#line** <number> \"<name>\"**`\n\nfollowed by new line. <number> could be only positive integer and <name> could be any name. This will be used only if an error occurs in the script. The error will contain the line:\n`**File <filename>, line <linenumber>**`\n\nwhere <filename> will be the <name> you set and <linenumber> will be <number> + how many lines it is from the **#line** line. If the error happened on the line right under **#line** it will add 0 to <number>, if on second line, it will add 1 etc.\n\n\nIt is possible to use more than one **#line** keywords, but it seems having just one at the top for little script is enough to pinpoint position of the error easily. \n**WARNING**: If the file you are loading is not prepared using UTF-8 encoding and contains some characters [ with codes](https://community.bistudio.com/wiki/toArray%20) > 127, they might convert incorrectly",
            "examples": [
                {
                    "text": "```sqf\n_string = preprocessFileLineNumbers \"A3\\ui_f\\scripts\\IGUI\\RscUnitInfo.sqf\"\n```\n\n\nResult is: \n\n #line 1 \"A3\\ui_f\\scripts\\IGUI\\RscUnitInfo.sqf\"\n\n disableserialization;\n\n ........"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "fileName",
                            "description": "`String` - path to the file"
                        }
                    ],
                    "outline": "`preprocessFileLineNumbers` fileName",
                    "returns": "`String` - file content containing `**#line 1 \"aFilename\"**`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/preprocessFileLineNumbers"
        },
        "configuration": {
            "label": "preprocessFileLineNumbers",
            "grammarType": "file-compiler"
        }
    },
    {
        "documentation": {
            "description": "Returns name of unit's primary weapon. This command will also return a weapon class name if the weapon is not used by the player, for example, it is on the unit's back. Use `currentWeapon` to get the weapon the unit is using.",
            "examples": [
                {
                    "text": "```sqf\n_pWeap = primaryWeapon player;\n```"
                },
                {
                    "text": "```sqf\nhint primaryWeapon player; // \"arifle_MX_ACO_pointer_F\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`primaryWeapon` unit",
                    "returns": "`String` - weapon class name or \"\" if no primary weapon"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/primaryWeapon"
        },
        "configuration": {
            "label": "primaryWeapon",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array with all items assigned to the `primaryWeapon` except magazines. Use `primaryWeaponMagazine` command for the latter. This command is used for infantry weapons only.",
            "examples": [
                {
                    "text": "```sqf\n\nprimaryWeaponItems player;\n/*\n[\n\t\"muzzle_snds_H\",\t// silencer\n\t\"acc_pointer_IR\",\t// laser\n\t\"optic_Aco\",\t\t// optics\n\t\"bipod_01_F_blk\"\t// bipod\n]\n*/\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`primaryWeaponItems` unit",
                    "returns": "`Array` -  [silencer, laserpointer/flashlight, optics, bipod]"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/primaryWeaponItems"
        },
        "configuration": {
            "label": "primaryWeaponItems",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Collects all loaded `magazines` from all `primaryWeapon` muzzles and returns them in `Array`, otherwise it returns []. This command is used for infantry weapons only.",
            "examples": [
                {
                    "text": "```sqf\nhint str primaryWeaponMagazine player; //[\"30Rnd_65x39_caseless_mag\"]\n```"
                },
                {
                    "text": "```sqf\n\n_array = primaryWeaponMagazine player;\nif (count _array > 0) then {\n\thint (\"Primary weapon is loaded with \" + (_array select 0) + \"!\");\n} else {\n\tif (primaryWeapon player != \"\") then {\n\t\thint \"Primary weapon is not loaded!\";\n\t} else {\n\t\thint \"Player doesn't have a primary weapon!\";\n\t};\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`primaryWeaponMagazine` unit",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/primaryWeaponMagazine"
        },
        "configuration": {
            "label": "primaryWeaponMagazine",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return the priority of the task.",
            "examples": [
                {
                    "text": "```sqf\n_prioTsk01 = priority task01;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "task",
                            "description": "`Task`"
                        }
                    ],
                    "outline": "`priority` task",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/priority"
        },
        "configuration": {
            "label": "priority",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets a variable to the innermost scope (see _Example 3_). See also `param` and `params`.\n{{Feature|informative|`private` variables **must** start with an underscore: {{hl",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _varname = \"this is my new variable\"; // since {{arma3}} v1.54\n\n// identical, but less performant\nprivate \"_varname\";\n_varname = \"this is my new variable\";\n\n```"
                },
                {
                    "text": "```sqf\n\nprivate [\"_varname1\", \"_varname2\"];\n_varname1 = \"variable 1\";\n_varname2 = \"variable 2\";\n\n```"
                },
                {
                    "text": "```sqf\n\n_lol = 123; call { hint str [_lol] }; // [123]\n_lol = 123; call { private \"_lol\"; hint str [_lol] }; // [any]\n\n```"
                },
                {
                    "text": "```sqf\n\n_myvar = 123;\nsystemChat str [_myvar];\t\t// [123]\ncall {\n\tsystemChat str [_myvar];\t// [123]\n\tprivate \"_myvar\";\n\tsystemChat str [_myvar];\t// [any]\n\t_myvar = 345;\n\tsystemChat str [_myvar];\t// [345]\n};\nsystemChat str [_myvar];\t\t// [123]\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "variableName",
                            "description": "`String` - e.g <sqf inline>\"_myVar\""
                        }
                    ],
                    "outline": "`private` variableName",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "variableNameList",
                            "description": "`Array` of `String`s - e.g <sqf inline>[\"_target\", \"_damage\"]"
                        }
                    ],
                    "outline": "`private` variableNameList",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "_identifier",
                            "description": "underscored [variable name](https://community.bistudio.com/wiki/Identifier), for example <sqf inline>_myVar"
                        },
                        {
                            "name": "value",
                            "description": "`Anything`: value to assign to the variable"
                        }
                    ],
                    "outline": "`private` _identifier = value",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/private"
        },
        "configuration": {
            "label": "private",
            "grammarType": "access-modifier"
        }
    },
    {
        "documentation": {
            "description": "Disables the implicit inheritance of local variables, as defined in the parent scope.\n\nBy default, any local variables defined in a parent scope are available to the lower scope code.\n\nAfter using `privateAll`, parent scope variables can no longer be accessed implicitly. However, it is still possible to explicitly access parent scope variables using the `import` command.",
            "examples": [
                {
                    "text": "```sqf\n_a = 1;\n_b = 2;\n_c = 3;\n4 call {\n\t// _a, _b and _c from the parent scope are accessible at this point\n\tsystemChat str [_a, _b, _c]; \t\t\t// prints [1, 2, 3]\n\tprivateAll; \t\t\t\t\t\t\t// _a, _b and _c from the parent scope can no longer be accessed\n\tsystemChat str [_a, _b, _c]; \t\t\t// prints [Any, Any, Any]\n\timport [\"_a\", \"_b\"]; \t\t\t\t\t// _a and _b are now defined as private variables in the current scope; _c is still not defined\n\tsystemChat str [_a, _b, _c, _this]; \t// prints [1, 2, Any, 4]\n\t_a = _a + 1; \t\t\t\t\t\t\t// changes the private _a variable in the current scope, but doesn't change the parent scope _a\n};\nsystemChat str _a; // _a is still 1\n```"
                },
                {
                    "text": "```sqf\n\nprivate _a = /* ... */;\nprivate _b = /* ... */;\nprivate _c = /* ... */;\n\n{\n\t_x call {\n\t\tprivateAll;\n\t\timport [\"_a\", \"_b\"];\n\t\tcall _this;\n\t};\n} forEach CustomEventHandlers;\n\n```\n\n\n# Because of the `import`-statement, code from <var>CustomEventHandlers</var> can use <var>_a</var> and <var>_b</var> without using `params` (even if <var>_a</var> and <var>_b</var> were provided via <sqf inline>_this, which is not the case here).\n# Code from <var>CustomEventHandlers</var> can only see <var>_a</var> and <var>_b</var>, but no other variables such as <var>_c</var>, <sqf inline>_x or <sqf inline>_forEachIndex.\n# Code from <var>CustomEventHandlers</var> can modify <var>_a</var> and <var>_b</var> (e.g. <sqf inline>_a = _b / 2), but only within its own scope (i.e. <sqf inline>CustomEventHandlers # (n + 1) will not see any changes that <sqf inline>CustomEventHandlers # n may have made to <var>_a</var> and <var>_b</var>).\n# The values of <var>_a</var>, <var>_b</var> and <var>_c</var> after the `forEach`-loop are guaranteed to be the same as before the `forEach`-loop.\n\n**IMPORTANT**: There is one important exception to points 3 and 4: Modifications by reference (e.g. <sqf inline>_a pushBack 123 where <var>_a</var> is an `Array`) are applied in all scopes. This can be avoided by copying <var>_a</var> before calling the <var>CustomEventHandlers</var> code:\n<spoiler text=\"Show Code\">\n\n```sqf\n\nprivate _a = [/* ... */]; // Note that _a is an array.\nprivate _b = /* ... */;\nprivate _c = /* ... */;\n\n{\n\t_x call {\n\t\tprivateAll;\n\t\timport [\"_a\", \"_b\"];\n\t\t_a = +_a; // Copy the array so that the code from CustomEventHandlers can no longer modify the original array.\n\t\tcall _this;\n\t};\n} forEach CustomEventHandlers;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`privateAll`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/privateAll"
        },
        "configuration": {
            "label": "privateAll",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Opens the `Diary` screen on the subject/record specified by link. To get a valid link format, use `createDiaryLink`.",
            "examples": [
                {
                    "text": "```sqf\nprocessDiaryLink createDiaryLink [\"Tasks\", (simpleTasks player) select 0, \"\"]; // Select a task in the Task menu\n```"
                },
                {
                    "text": "```sqf\n\n// To select various tabs in the map screen:\nprocessDiaryLink createDiaryLink [\"selected_tab\", player, \"\"];\n// ... where \"selected_tab\" can be \"Tasks\", \"Diary\", \"Units\", \"Players\", \"Statistics\", other user created subjects\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "link",
                            "description": " `String`"
                        }
                    ],
                    "outline": "`processDiaryLink` link",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/processDiaryLink"
        },
        "configuration": {
            "label": "processDiaryLink",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the product's friendly name, identifier, version and build number.\n**Arma 3**: The command has been upgraded to also returns branch identifier, whether or not the game was launched using mods, the platform and the architecture.",
            "examples": [
                {
                    "text": "```sqf\nhint str productVersion; // would return [\"Arma 2 OA\", \"arma2oa\", 162, 95208] on Arma 2 OA 1.62.95208\n```"
                },
                {
                    "text": "```sqf\nhint str productVersion; // [\"Arma 3\", \"Arma3\", 137, 128764, \"Development\", false, \"Windows\"]\n```"
                },
                {
                    "text": "```sqf\n format [\"%1.%2\", (productVersion select 2) * 0.01 toFixed 2, productVersion select 3]; // returns version e.g.: \"2.00.146773\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`productVersion`",
                    "returns": "`Array` in format [name, nameShort, version, build, branch, isModded, platform, architecture]:\n* name: `String` - product name\n* nameShort: `String` - product short name\n* version: `Number` - product version number\n* build: `Number` - product build number\n* {{GVI|arma3|1.00"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/productVersion"
        },
        "configuration": {
            "label": "productVersion",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns currently chosen user profile name. For Steam profile name see `profileNameSteam`.",
            "examples": [
                {
                    "text": "```sqf\n_myInGameProfileName = profileName;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**profileName**",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/profileName"
        },
        "configuration": {
            "label": "profileName",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the global namespace attached to the active user profile. Use `setVariable` and `getVariable` to save and load data to and from this `Namespace`. A variable can be deleted by setting its value to `nil`. By default the variables set in this namespace will exist while the game is running, and variables are saved persistently when the game is closed. Saving can also be forced by using `saveProfileNamespace` to prevent data loss on e.g game crash.\n\nThe variables are stored next to the user profile in a file named `**myUsername.vars.GAMENAME**`.",
            "examples": [
                {
                    "text": "```sqf\nprofileNamespace setVariable [\"TAG_kills\", 10000];\n// somewhere else in the code\n_kills = profileNamespace getVariable [\"TAG_kills\", 0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`profileNamespace`",
                    "returns": "`Namespace`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/profileNamespace"
        },
        "configuration": {
            "label": "profileNamespace",
            "grammarType": "namespace"
        }
    },
    {
        "documentation": {
            "description": "Returns name of the current Steam profile. For currently chosen user profile name see `profileName`",
            "examples": [
                {
                    "text": "```sqf\n_mySteamProfileName = profileNameSteam;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**profileNameSteam**",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/profileNameSteam"
        },
        "configuration": {
            "label": "profileNameSteam",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "If loading screen is shown, sets progress bar to the given value (interval is from 0 to 1])",
            "examples": [
                {
                    "text": "```sqf\nstartLoadingScreen [\"Loading My Mission\"];\n// \n// batch of code\n// \nprogressLoadingScreen 0.25;\n// \n// batch of code\n// \nprogressLoadingScreen 0.50;\n// \n// batch of code\n// \nprogressLoadingScreen 0.95;\n// \n// batch of code\n// \nendLoadingScreen;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "progress",
                            "description": "`Number` - in range 0..1"
                        }
                    ],
                    "outline": "`progressLoadingScreen` progress",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/progressLoadingScreen"
        },
        "configuration": {
            "label": "progressLoadingScreen",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the current position in the [progress bar](https://community.bistudio.com/wiki/CT_PROGRESS).",
            "examples": [
                {
                    "text": "```sqf\n_progress = progressPosition _control;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": " `Control` - progress bar"
                        }
                    ],
                    "outline": "`progressPosition` control",
                    "returns": "`Number` - progress from 0 to 1"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/progressPosition"
        },
        "configuration": {
            "label": "progressPosition",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets progress position of a [progress bar](https://community.bistudio.com/wiki/CT_PROGRESS).",
            "examples": [
                {
                    "text": "```sqf\n_control progressSetPosition 0.5;\n```"
                },
                {
                    "text": "```sqf\nwith uiNamespace do {\n\tbar = findDisplay 46 ctrlCreate [\"RscProgress\", -1];\n\tbar ctrlSetPosition [0,0,1,0.01];\n\tbar ctrlCommit 0;\n\tbar progressSetPosition 0.75;\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control` - progress bar control"
                        },
                        {
                            "name": "progress",
                            "description": "`Number` - 0: no progress; 1: full progress"
                        }
                    ],
                    "outline": "control `progressSetPosition` progress",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/progressSetPosition"
        },
        "configuration": {
            "label": "progressSetPosition",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Reliably broadcasts `missionNamespace` variable and its **current** value to all computers (server/client).\n\nVariables broadcast with `publicVariable` during a mission will be available to [JIP](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Join%20In%20Progress) clients with the value they held at the time.\n\nSuch variables are persistent and sent to the JIP client before the first batch of client-side [Event Scripts](https://community.bistudio.com/wiki/Event%20Scripts) (such as [[init.sqf]]) is run.\n**IMPORTANT**: Using `publicVariable` too frequently and/or with a lot of data can cause other aspects of the game to experience bandwidth problems.}}\n\n\nThe following [ Data Types](https://community.bistudio.com/wiki/%3ACategory%3A%20Data%20Types) are supported:\n{{{!}} class=\"wikitable align-center\"\n! Type\n{{!}} `Number`\n{{!}} `Boolean`\n{{!}} `Object`\n{{!}} `Group`\n{{!}} `String`\n{{!}} [Text](https://community.bistudio.com/wiki/Structured%20Text)\n{{!}} `Array`\n{{!}} `Code`\n{{!}} `Nothing` (`nil`)\n{{!}} `HashMap`\n{{!}}-\n! Since\n{{!}} colspan=\"4\" {{!}} **(Operation Flashpoint)**\n{{!}} colspan=\"2\" {{!}} **(Armed Assault)**\n{{!}} colspan=\"2\" {{!}} **(Armed Assault)**\n{{!}} **(Arma 3)**\n{{!}} **(Arma 3)**\n{{!}\n\n**IMPORTANT**: \nIt is not possible (and illogical) to transfer a local entity reference, such as [scripts](https://community.bistudio.com/wiki/Script%20Handle), [displays](https://community.bistudio.com/wiki/Display) or [local objects](https://community.bistudio.com/wiki/createVehicleLocal).\n\nAlso, note that [Team Member](https://community.bistudio.com/wiki/Team%20Member) is not supported.",
            "examples": [
                {
                    "text": "```sqf\n\nTAG_MyPublicVariable = 0;\nTAG_MyPublicVariable = 1;\npublicVariable \"TAG_MyPublicVariable\";\t// other clients will receive the \"TAG_MyPublicVariable\" variable with a 1 value\n\nTAG_MyPublicVariable = 2;\t\t\t\t// needs to be broadcast again - synchronisation is not automatic\n\n```"
                },
                {
                    "text": "JIP example:\n\n```sqf\n\nif (isNil \"TAG_CurrentTarget\") then\t// has the variable already been set and broadcast?\n{\n\tTAG_CurrentTarget = objNull;\t// if not, set it on the local machine\n};\n\nplayer doTarget TAG_CurrentTarget;\n\n```"
                },
                {
                    "text": "```sqf\n\nTAG_BossName = \"EvilBigBoss\";\n\npublicVariable TAG_BossName;\t// wrong - will try to publicVariable \"EvilBigBoss\" variable, that does not exist\npublicVariable \"TAG_BossName\";\t// correct - important, do not forget the QUOTES\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "varName",
                            "description": "`String` - the [global variable](https://community.bistudio.com/wiki/Variables%23Global%20Scope)'s `Identifier`"
                        }
                    ],
                    "outline": "`publicVariable` varName",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/publicVariable"
        },
        "configuration": {
            "label": "publicVariable",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Send the variable value to the client computer - same limitations regarding variable type as [publicVariable](https://community.bistudio.com/wiki/publicVariable%23Description).\n\nThe Client ID is the temporary ID given to a connected client for that session. You can find out this ID with the `owner` command (using it on a player's character, for example, will give you that players client ID).\n\n\n\n**Arma 3**: In Arma 3 it is possible to broadcast `nil` value",
            "examples": [
                {
                    "text": "```sqf\n3 publicVariableClient \"CTFscoreOne\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "clientID",
                            "description": "`Number`"
                        },
                        {
                            "name": "varName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "clientID `publicVariableClient` varName",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/publicVariableClient"
        },
        "configuration": {
            "label": "publicVariableClient",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Send the variable value to the server - same limitations regarding variable type as [publicVariable](https://community.bistudio.com/wiki/publicVariable%23Description).\n**Arma 3**: In Arma 3 it is possible to broadcast the `nil` value.",
            "examples": [
                {
                    "text": "```sqf\npublicVariableServer \"CTFscoreOne\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "varName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`publicVariableServer` varName",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/publicVariableServer"
        },
        "configuration": {
            "label": "publicVariableServer",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Insert an element to the back of the given array. This command modifies the original array. (see also: `pushBackUnique`)",
            "examples": [
                {
                    "text": "```sqf\n_arr = [1,2,3];\n_arr pushBack 4;\nhint str _arr; //[1,2,3,4]\n```"
                },
                {
                    "text": "```sqf\n_arr = [1,[2,4],3];\n(_arr select 1) pushBack [5,6];\nhint str _arr //[1,[2,4,[5,6]],3]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array`"
                        },
                        {
                            "name": "element",
                            "description": "`Anything`"
                        }
                    ],
                    "outline": "array `pushBack` element",
                    "returns": "`Number` - index of inserted element"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/pushBack"
        },
        "configuration": {
            "label": "pushBack",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds element to the back of the given array but only if it is unique to the array. The index of the added element is returned upon success, otherwise -1. This command modifies the original array.\n**NOTE**: Adding string elements is **case sensitive**.",
            "examples": [
                {
                    "text": "```sqf\n_arr = [1,2,3];\n_index = _arr pushBackUnique 3;\nhint str [_index, _arr]; // [-1,[1,2,3]]\n```"
                },
                {
                    "text": "```sqf\n_arr = [1,2,3];\n_index = _arr pushBackUnique 4;\nhint str [_index, _arr]; // [3,[1,2,3,4]]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array`"
                        },
                        {
                            "name": "element",
                            "description": "`Anything`"
                        }
                    ],
                    "outline": "array `pushBackUnique` element",
                    "returns": "`Number` - index of inserted element or -1"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/pushBackUnique"
        },
        "configuration": {
            "label": "pushBackUnique",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Transfers weapons and magazines from weapon pool into cargo of given object. Used in campaign to transfer weapons into next mission.",
            "examples": [
                {
                    "text": "```sqf\nputWeaponPool player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`putWeaponPool` object",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/putWeaponPool"
        },
        "configuration": {
            "label": "putWeaponPool",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the number of items of type in the weapon pool (used in campaigns to transfer weapons to the next mission).",
            "examples": [
                {
                    "text": "```sqf\nprivate _amountOfFAKgiven = queryItemsPool \"FirstAidKit\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "name",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`queryItemsPool` name",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/queryItemsPool"
        },
        "configuration": {
            "label": "queryItemsPool",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return number of magazines of type name in magazine pool (used in campaign to transfer magazines into next mission).",
            "examples": [
                {
                    "text": "```sqf\n_num = queryMagazinePool \"M16\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "name",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`queryMagazinePool` name",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/queryMagazinePool"
        },
        "configuration": {
            "label": "queryMagazinePool",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return number of weapons of type name in weapon pool (used in campaign to transfer weapons into next mission).",
            "examples": [
                {
                    "text": "```sqf\n_num = queryWeaponPool \"M16\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "name",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`queryWeaponPool` name",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/queryWeaponPool"
        },
        "configuration": {
            "label": "queryWeaponPool",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Converts given value in degrees to radians. 1 radian equals 180 degrees divided by `pi`.",
            "examples": [
                {
                    "text": "```sqf\n_radians = rad 180; // returns 3.1415 (pi)\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "value",
                            "description": "`Number` - degrees"
                        }
                    ],
                    "outline": "`rad` value",
                    "returns": "`Number` - radians"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/rad"
        },
        "configuration": {
            "label": "rad",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Add the units to the custom channel.",
            "examples": [
                {
                    "text": "```sqf\n2 radioChannelAdd [player, unit1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "customChannelID",
                            "description": "`Number` - [custom channel ID](https://community.bistudio.com/wiki/Channel%20IDs) returned by `radioChannelCreate` command"
                        },
                        {
                            "name": "units",
                            "description": "`Array` - list of units"
                        }
                    ],
                    "outline": "customChannelID `radioChannelAdd` units",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/radioChannelAdd"
        },
        "configuration": {
            "label": "radioChannelAdd",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Create a custom radio channel with the given color, label, call sign and registered characters.\nThe **[custom channel ID](https://community.bistudio.com/wiki/Channel%20IDs)** returned can be used to manipulate the created channel later.\nThere are 10 slots for custom radio channels which would correspond to channels 6-15 (see `getPlayerChannel`).\nThe command will find an unused index in this range and create it when found.",
            "examples": [
                {
                    "text": "```sqf\n_channelID = radioChannelCreate [[0.96, 0.34, 0.13, 0.8], \"Q-dance Radio\", \"%UNIT_NAME\", [player1, player2]];\n```"
                },
                {
                    "text": "```sqf\n\n_channelID = radioChannelCreate [[0.96, 0.34, 0.13, 0.8], \"Q-dance Radio\", \"%UNIT_NAME\", [player1, player2], true];\n// using true also disables automatic quotes for chat in channel (Arma 3)\n\n```"
                },
                {
                    "text": "Create custom channel and add all players to it, present and JIP:\n\n```sqf\nif (isServer) then\n{\n\tprivate _channelName = \"Q-dance Radio\";\n\tprivate _channelID = radioChannelCreate [[0.96, 0.34, 0.13, 0.8], _channelName, \"%UNIT_NAME\", []];\n\tif (_channelID == 0) exitWith {diag_log format [\"Custom channel '%1' creation failed!\", _channelName]};\n\t[_channelID, {_this radioChannelAdd [player]}] remoteExec [\"call\", [0, -2] select isDedicated, _channelName];\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "color",
                            "description": "`Array` - [RGBA color](https://community.bistudio.com/wiki/Color) values"
                        },
                        {
                            "name": "label",
                            "description": "`String` - label"
                        },
                        {
                            "name": "callSign",
                            "description": "`String` - call sign - see `radioChannelSetCallSign`"
                        },
                        {
                            "name": "units",
                            "description": "`Array` - list of units in the channel"
                        },
                        {
                            "name": "sentenceType",
                            "description": "`Boolean` - (Optional, default `true`)\n* `true` - use _Protocol_ message color from <sqf inline>getArray (configFile >> \"RscChatListDefault\" >> \"colorMessageProtocol\")\n* `false` - use _Normal_ message color from <sqf inline>getArray (configFile >> \"RscChatListDefault\" >> \"colorMessage\")"
                        }
                    ],
                    "outline": "`radioChannelCreate` [color, label, callSign, units, sentenceType]",
                    "returns": "`Number` - created **[custom channel ID](https://community.bistudio.com/wiki/Channel%20IDs)** (used in `customChat` command), 0 if failed"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/radioChannelCreate"
        },
        "configuration": {
            "label": "radioChannelCreate",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Obtains custom radio channel's details, set by `radioChannelCreate`.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _channelID = radioChannelCreate [[1, 0, 0.5, 0.8], \"Q-dance Radio\", \"%UNIT_NAME\", [u1, u2], false];\nradioChannelInfo _channelID; // returns [[1,0,0.5,0.8], \"Q-dance Radio\", \"%UNIT_NAME\", [u1, u2], false, true]\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "customChannelID",
                            "description": "`Number` - [custom channel ID](https://community.bistudio.com/wiki/Channel%20IDs) returned by `radioChannelCreate`"
                        }
                    ],
                    "outline": "`radioChannelInfo` customChannelID",
                    "returns": "`Array` in format [colour, label, callSign, units, sentenceType, exists] (see `radioChannelCreate`)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/radioChannelInfo"
        },
        "configuration": {
            "label": "radioChannelInfo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Remove the units from the custom radio channel.",
            "examples": [
                {
                    "text": "```sqf\n3 radioChannelRemove [blufor_unit_1, blufor_unit_2];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "customChannelID",
                            "description": "`Number` - [custom channel ID](https://community.bistudio.com/wiki/Channel%20IDs) returned by `radioChannelCreate` command"
                        },
                        {
                            "name": "units",
                            "description": "`Array` - list of units"
                        }
                    ],
                    "outline": "customChannelID `radioChannelRemove` units",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/radioChannelRemove"
        },
        "configuration": {
            "label": "radioChannelRemove",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set the custom radio channel's call sign.",
            "examples": [
                {
                    "text": "```sqf\n4 radioChannelSetCallSign \"%UNIT_NAME\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "customChannelID",
                            "description": "`Number` - [custom channel ID](https://community.bistudio.com/wiki/Channel%20IDs) returned by `radioChannelCreate` command"
                        },
                        {
                            "name": "callSign",
                            "description": "`String` - custom call sign - available special parameters:\n{{Columns|3|\n* `**$KEY**` (reference to a localised text)\n* `**%CHANNEL_LABEL**`\n* `**%UNIT_SIDE**`\n* `**%UNIT_NAME**`\n* `**%UNIT_RANK**`\n* `**%UNIT_ID**`\n* `**%UNIT_REF**`\n* `**%UNIT_GRP_NAME**`\n* `**%UNIT_GRP_LEADER**`\n* `**%UNIT_VEH_NAME**`\n* `**%UNIT_VEH_POSITION**`\n}}"
                        }
                    ],
                    "outline": "customChannelID `radioChannelSetCallSign` callSign",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/radioChannelSetCallSign"
        },
        "configuration": {
            "label": "radioChannelSetCallSign",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set the custom radio channel's label.",
            "examples": [
                {
                    "text": "```sqf\n5 radioChannelSetLabel \"Q-dance Radio\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "customChannelID",
                            "description": "`Number` - [custom channel ID](https://community.bistudio.com/wiki/Channel%20IDs) returned by `radioChannelCreate` command"
                        },
                        {
                            "name": "label",
                            "description": "`String` - label"
                        }
                    ],
                    "outline": "customChannelID `radioChannelSetLabel` label",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/radioChannelSetLabel"
        },
        "configuration": {
            "label": "radioChannelSetLabel",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "A getter for `enableRadio`.",
            "examples": [
                {
                    "text": "```sqf\nif (radioEnabled) then { enableRadio false };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`radioEnabled`",
                    "returns": "`Boolean` - returns `true` if radio is enabled"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/radioEnabled"
        },
        "configuration": {
            "label": "radioEnabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the current radio volume (set by `fadeRadio`).",
            "examples": [
                {
                    "text": "```sqf\nhint str radioVolume;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`radioVolume`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/radioVolume"
        },
        "configuration": {
            "label": "radioVolume",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the current value of rain density.",
            "examples": [
                {
                    "text": "```sqf\n_rainLevel = rain;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`rain`",
                    "returns": "`Number` in range 0..1"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/rain"
        },
        "configuration": {
            "label": "rain",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the current rainbow intensity.",
            "examples": [
                {
                    "text": "```sqf\nprivate _intensity = rainbow;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`rainbow`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/rainbow"
        },
        "configuration": {
            "label": "rainbow",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns currently set [ RainParticles](https://community.bistudio.com/wiki/Arma_3%3A_CfgWorlds_Config_Reference%23class_RainParticles%20) params, custom or default.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _rainParams = rainParams;\n// or\nrainParams params [\n\t\"_rainDropTexture\",\n\t\"_texDropCount\",\n\t\"_minRainDensity\",\n\t\"_effectRadius\",\n\t\"_windCoef\",\n\t\"_dropSpeed\",\n\t\"_rndSpeed\",\n\t\"_rndDir\",\n\t\"_dropWidth\",\n\t\"_dropHeight\",\n\t\"_dropColor\",\n\t\"_lumSunFront\",\n\t\"_lumSunBack\",\n\t\"_refractCoef\",\n\t\"_refractSaturation\",\n\t\"_snow\",\n\t\"_dropColorStrong\"\n];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`rainParams`",
                    "returns": "`Array` - [rainDropTexture, texDropCount, minRainDensity, effectRadius, windCoef, dropSpeed, rndSpeed, rndDir, dropWidth, dropHeight, dropColor, lumSunFront, lumSunBack, refractCoef, refractSaturation, snow, dropColorStrong] where:\n{{Columns|4|\n* rainDropTexture: `String`\n* texDropCount: `Number`\n* minRainDensity: `Number`\n* effectRadius: `Number`\n* windCoef: `Number`\n* dropSpeed: `Number`\n* rndSpeed: `Number`\n* rndDir: `Number`\n* dropWidth: `Number`\n* dropHeight: `Number`\n* dropColor: `Array`\n* lumSunFront: `Number`\n* lumSunBack: `Number`\n* refractCoef: `Number`\n* refractSaturation: `Number`\n* snow: `Boolean`\n* dropColorStrong: `Boolean`\n}}\n\n**NOTE**: See [RainParticles](https://community.bistudio.com/wiki/Arma%203%3A%20CfgWorlds%20Config%20Reference%23class%20RainParticles) for more information."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/rainParams"
        },
        "configuration": {
            "label": "rainParams",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "[[File:bellcurve.jpg|thumb|120px|[[#Syntax 2|Syntax&nbsp;2]]'s distribution]]\n{{{!}} class=\"valign-top\"\n! style=\"padding-right: 1em; white-space: nowrap\" {{!}} {{Link|#Syntax 1}}\n{{!}} generates a random floating point value\n{{!}}-\n! style=\"padding-right: 1em; white-space: nowrap\" {{!}} {{Link|#Syntax 2}}\n{{!}} generates a {{Link|https://en.wikipedia.org/wiki/Normal_distribution|Gaussian Distribution}}<ref>Technically, it is a rescaled {{Link|https://en.wikipedia.org/wiki/Bates_distribution}} with n = 4.\nThe distribution is split in two at its midpoint and scaled linearly such that its maximum lies at the specified midpoint.</ref>.<!--\n--> It uses the same method as `setTriggerTimeout` command and is quite useful for e.g spawning loot, making more valuable items more rare\n{{!}}-\n! style=\"padding-right: 1em; white-space: nowrap\" {{!}} {{Link|#Syntax 3}}\n{{!}} generates a {{Link|https://en.wikipedia.org/wiki/Random_seed|seed-based}} random number\n{{!}}-\n! style=\"padding-right: 1em; white-space: nowrap\" {{!}} {{Link|#Syntax 4}}\n{{!}} generates a {{Link|https://en.wikipedia.org/wiki/Random_seed|seed-based}} random noise (**not** Perlin) texture based on provided seed and returning the value at supplied coordinates\n{{!}}}",
            "examples": [
                {
                    "text": "```sqf\n_rNumber = random 1;\n```"
                },
                {
                    "text": "```sqf\n_rNumber = random -10;\n```"
                },
                {
                    "text": "Generate a random position inside a circle (see also [Example Code: Random Area Distribution](https://community.bistudio.com/wiki/Example%20Code%3A%20Random%20Area%20Distribution))\n\n```sqf\n_center getPos [_radius * sqrt random 1, random 360];\n```"
                },
                {
                    "text": "Select a random value from an array:\n\n```sqf\n\n_array = [\"apples\", \"pears\", \"bananas\", \"M16\"];\n\n_random = _array select floor random count _array;\t// before {{arma2}}\n_random = _array call BIS_fnc_selectRandom;\t\t\t// since {{arma2}}\n_random = selectRandom _array;\t\t\t\t\t\t// since {{arma3}} v1.56\n\n```"
                },
                {
                    "text": "Visualisation of {{Link|#Syntax 4}} (warning, it takes a bit to execute and draw):\n\n[[File:A3 random syntax4.png|thumb|right|Result]]\n\n```sqf\n\nprivate _parent = call BIS_fnc_displayMission;\nif (is3DEN) then { _parent = findDisplay 313 };\nprivate _display = _parent createDisplay \"RscDisplayEmpty\";\nprivate _background = _disp ctrlCreate [\"RscBackground\", -1];\n\nprivate _coef = 0.1;\n\nfor \"_x\" from 1 to 100 do\n{\n\tfor \"_y\" from 1 to 100 do\n\t{\n\t\tprivate _random = 0 random [_x * _coef, _y * _coef];\n\t\tprivate _dot = _display ctrlCreate [\"RscBackground\", -1];\n\n\t\t_dot ctrlSetPosition [0.5 + pixelW * _x, 0.5 + pixelH * _y, pixelW, pixelH];\n\t\t_dot ctrlSetBackgroundColor [_random, _random, _random, 1];\n\t\t_dot ctrlCommit 0;\n\t};\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "x",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`random` x",
                    "returns": "`Number` from 0 (included) to _x_, **ex**cluded\n{{Feature|important|_x_ was accidentally **in**cluded due to a bug introduced in {{GVI|arma2|1.00"
                },
                {
                    "parameters": [
                        {
                            "name": "min",
                            "description": "`Number`"
                        },
                        {
                            "name": "mid",
                            "description": "`Number`"
                        },
                        {
                            "name": "max",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`random` [min, mid, max]",
                    "returns": "`Number` in range from _min_ to _max_, weighted by _mid_ - **can** be higher than max (maximum value is `**min + max - mid**`)"
                },
                {
                    "parameters": [
                        {
                            "name": "seed",
                            "description": "`Number` - an **integer**. Any float value will be truncated (e.g -0.9, -0.1, 0.1 or 0.9 will be read as **0**)"
                        },
                        {
                            "name": "x",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "seed `random` x",
                    "returns": "`Number` from 0 (included) to _x_ (**in**cluded)"
                },
                {
                    "parameters": [
                        {
                            "name": "seed",
                            "description": "`Number`"
                        },
                        {
                            "name": "x",
                            "description": "`Number` - x texture position"
                        },
                        {
                            "name": "y",
                            "description": "`Number` - y texture position"
                        }
                    ],
                    "outline": "seed `random` [x, y]",
                    "returns": "`Number` from 0 (included) to 1 (**ex**cluded)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/random"
        },
        "configuration": {
            "label": "random",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the rank of the given unit. Rank can be one of the following:\n* `**\"PRIVATE\"**`\n* `**\"CORPORAL\"**`\n* `**\"SERGEANT\"**`\n* `**\"LIEUTENANT\"**`\n* `**\"CAPTAIN\"**`\n* `**\"MAJOR\"**`\n* `**\"COLONEL\"**`",
            "examples": [
                {
                    "text": "```sqf\n_rank = rank player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`rank` unit",
                    "returns": "`String`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/rank"
        },
        "configuration": {
            "label": "rank",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return the rank of the given unit for comparison.\n\nValue may be:\n* **0** - Private\n* **1** - Corporal\n* **2** - Sergeant\n* **3** - Lieutenant\n* **4** - Captain\n* **5** - Major\n* **6** - Colonel",
            "examples": [
                {
                    "text": "```sqf\n_myIdRank = rankId player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`rankId` unit",
                    "returns": "`Number`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/rankId"
        },
        "configuration": {
            "label": "rankId",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check unit rating. Rating is increased for killing enemies, decreased for killing friendlies (see [Rating Values](https://community.bistudio.com/wiki/ArmA%3A_Rating%20Values)). Can be changed via `addRating` by the mission designer. \n\nThe rating of the player is displayed as the \"score\" at the end of the mission. Via [[Description.ext]] one can define how many points it takes to get a perfect score, as well as the number of stars.",
            "examples": [
                {
                    "text": "```sqf\n_score = rating player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`rating` unitName",
                    "returns": "`Number`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/rating"
        },
        "configuration": {
            "label": "rating",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks if a location is rectangular (returns true) or elliptical (returns false).",
            "examples": [
                {
                    "text": "```sqf\n_isRect = rectangular myLocation;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "location",
                            "description": "`Location`"
                        }
                    ],
                    "outline": "`rectangular` location",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/rectangular"
        },
        "configuration": {
            "label": "rectangular",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Searches in a string with a regular expression.\n**NOTE**: See [Arma 3: Regular Expressions](https://community.bistudio.com/wiki/Arma%203%3A%20Regular%20Expressions).",
            "examples": [
                {
                    "text": "```sqf\n\"wooKie boOkie cookie\" regexFind [\".ookie/gio\"]; // [[[\"wooKie\", 0]], [<nowiki/>[\"boOkie\", 7]], [<nowiki/>[\"cookie\", 14]]]\n```"
                },
                {
                    "text": "```sqf\n\"wooKie boOkie cookie\" regexFind [\".ookie/i\"]; // [[[\"wooKie\",0]]]\n```"
                },
                {
                    "text": "```sqf\n\"wooKie boOkie cookie\" regexFind [\".ookie/\"]; // [[[\"cookie\", 14]]]\n```"
                },
                {
                    "text": "Multiline example:\n\n```sqf\n\n\"co1kie2\nco2kie\" regexFind [\"^co.kie$\"]; // [[[\"co2kie\",9]]]\n```"
                },
                {
                    "text": "```sqf\n\"I'm a cookie clicker\" regexFind [\"c(.*?)k(.*?)e/i\"]; // [[[\"cookie\",6], [\"oo\", 7], [\"i\", 10]]]\n\n```"
                },
                {
                    "text": "```sqf\n\"I'm a cookie clicker\" regexFind [\"c(.*?)k(.*?)e\"]; // [[[\"cookie\", 6], [\"oo\", 7], [\"i\", 10]], [[\"clicke\", 13], [\"lic\", 14], [\"\", 18]]]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "haystack",
                            "description": "`String`"
                        },
                        {
                            "name": "pattern",
                            "description": "`String` - format [regex pattern](https://community.bistudio.com/wiki/Arma%203%3A%20Regular%20Expressions)"
                        },
                        {
                            "name": "startOffset",
                            "description": "`Number` - (Optional, default 0) has to be in range from 0 to <sqf inline>count haystack (_haystack_<nowiki/>'s length)"
                        }
                    ],
                    "outline": "haystack `regexFind` [pattern, startOffset]",
                    "returns": "`Array` of nested arrays. Each lowest level array in format:\n* 0: `String` - match\n* 1: `Number`  - offset of given match relative to _haystack_ beginning (the provided _offset_ is ignored)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/regexFind"
        },
        "configuration": {
            "label": "regexFind",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns whether the _haystack_ matches the _pattern_.",
            "examples": [
                {
                    "text": "```sqf\n\"I'm a coOkIe clicker\" regexMatch \".*cookie.*\"; // true\n```"
                },
                {
                    "text": "```sqf\n\"I'm a coOkIe clicker\" regexMatch \".*cookie.*/\"; // false, empty flags == case sensitive\n```"
                },
                {
                    "text": "```sqf\nforceUnicode 1;\n\"I'm a coÖkIe clicker\" regexMatch \".*coökie.*\";\n```"
                },
                {
                    "text": "```sqf\n\"Cookie clicker\" regexMatch \"cookie/i\"; // false, pattern does not fully match the haystack\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "haystack",
                            "description": "`String`"
                        },
                        {
                            "name": "pattern",
                            "description": "`String` - in format [regex pattern](https://community.bistudio.com/wiki/Arma%203%3A%20Regular%20Expressions)"
                        }
                    ],
                    "outline": "haystack `regexMatch` pattern",
                    "returns": "`Boolean` - returns `true` if match was found, otherwise `false`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/regexMatch"
        },
        "configuration": {
            "label": "regexMatch",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Searches given _haystack_ with given _pattern_ and replaces all matches with given _replaceString_.",
            "examples": [
                {
                    "text": "```sqf\n\"wookie boOkie cookie\" regexReplace [\".oo/gio\", \"[]\"];\t\t\t\t\t\t// \"[kie boOkie cookie]kie [kie cookie]kie [kie]kie\"\n```"
                },
                {
                    "text": "```sqf\n\"wookie boOkie cookie\" regexReplace [\".oo/gio\", \"[<SQFCodeToReplace>]\"];\t\t\t\t\t\t// \"[woo]kie [boO]kie [coo]kie\"\n```"
                },
                {
                    "text": "```sqf\n\"wook1e boOk2e cook3e\" regexReplace [\".oo/gio\", \"[]\"];\t\t\t\t\t\t// \"[]kie [k1e ]k2e [k2e ]k3e\"\n```"
                },
                {
                    "text": "```sqf\n\"wook1e boOk2e cook3e\" regexReplace [\".(oo)(.*?)e\", \"[$2]\"];\t\t\t\t\t// \"[k1] [k2] [k3]\"\n```"
                },
                {
                    "text": "```sqf\n\"wOokie boOkie cookie\" regexReplace [\".(?<test>oo)kie/gio\", \"[$+{test}]\"];\t// \"[oo] [oO] [oo]\"\n```"
                },
                {
                    "text": "```sqf\n\n// Make captured group all lower case '\\L' (lower case) or '\\U' (upper case)\n\"ArmA 3 is so awesome!\" regexReplace [\"(rmA 3)\", \"\\L$1\"]; // \"Arma 3 is so awesome!\"\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "haystack",
                            "description": "`String`"
                        },
                        {
                            "name": "pattern",
                            "description": "`String` - format [regex pattern](https://community.bistudio.com/wiki/Arma%203%3A%20Regular%20Expressions)"
                        },
                        {
                            "name": "replaceString",
                            "description": "`String` - {{Link|https://www.boost.org/doc/libs/1_76_0/libs/regex/doc/html/boost_regex/format/perl_format.html|Reference}}"
                        }
                    ],
                    "outline": "haystack `regexReplace` [pattern, replaceString]",
                    "returns": "`String` - modified text"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/regexReplace"
        },
        "configuration": {
            "label": "regexReplace",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array with all registered task types for the given agent. The values are the names set in `**CfgTasks**` classes `**name**` property. The same names are used for `unregisterTask`",
            "examples": [
                {
                    "text": "```sqf\ntasklist = registeredTasks teamMember _agent;\n```"
                },
                {
                    "text": "```sqf\n_rabbit = createAgent [\"Rabbit_F\", position player,[], 0, \"None\"];\nhint str registeredTasks teamMember _rabbit; // shows [\"Animal Main Task\"] in Arma 3\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "teamMember",
                            "description": "[Team Member](https://community.bistudio.com/wiki/Team%20Member) - `teamMember` `agent`"
                        }
                    ],
                    "outline": "`registeredTasks` teamMember",
                    "returns": "`Array` of `String`s - names of tasks"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/registeredTasks"
        },
        "configuration": {
            "label": "registeredTasks",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Registers a new task type. Parameters are defined in the given config class (subclass of `**CfgTasks**`)",
            "examples": [
                {
                    "text": "```sqf\nteamMember _agent registerTask \"MyTask\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "teamMember",
                            "description": "[Team Member](https://community.bistudio.com/wiki/Team%20Member) - `teamMember` `agent`"
                        },
                        {
                            "name": "entryName",
                            "description": "`String` - `**CfgTasks**` classname"
                        }
                    ],
                    "outline": "teamMember `registerTask` entryName",
                    "returns": "`Boolean` - `true` on success"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/registerTask"
        },
        "configuration": {
            "label": "registerTask",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Main syntax: Reload first found muzzle that needs reloading (with some inconsistencies).\n\nAlternative syntax: this syntax allows to reload given muzzle with given magazine while playing proper animation.\nIf _param_ is omitted or is empty string, default value is used. The default behaviour is to find the best matching magazine for the provided muzzle from the pool of available magazines.\nIf specific magazine is requested, the reload will fail if unit has run out of this type of magazines. If an empty array <sqf inline>[] is given, the behaviour is similar to pressing the \"Reload\" key.\nThe command reloads the given muzzle but does not select it. In case of [throwable](https://community.bistudio.com/wiki/currentThrowable) muzzles, each throwable has its own muzzle, they are autoreloaded after throw.\nUsing `reload` on the throwable muzzle will just swap throwable for another one of the same type from inventory.",
            "examples": [
                {
                    "text": "```sqf\nif (needReload player == 1) then { reload player };\n```"
                },
                {
                    "text": "```sqf\nplayer reload [\"GL_3GL_F\", \"1Rnd_HE_Grenade_shell\"];\n```"
                },
                {
                    "text": "Reload current muzzle:\n\n```sqf\nplayer reload [];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`reload` unitName",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - person"
                        },
                        {
                            "name": "muzzle",
                            "description": "`String` - (Optional, default `currentMuzzle`) muzzle name or \"\" for the current muzzle."
                        },
                        {
                            "name": "magazine",
                            "description": "`String` - (Optional, default given muzzle magazine) magazine name or \"\" for given muzzle's magazine. If given muzzle is `currentMuzzle` then `currentMagazine`"
                        }
                    ],
                    "outline": "unit `reload` [muzzle, magazine]",
                    "returns": "`Boolean` - `true` on success"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/reload"
        },
        "configuration": {
            "label": "reload",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check whether magazine is reloaded whenever emptied.",
            "examples": [
                {
                    "text": "```sqf\nprivate _canReload = reloadEnabled _unit1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`reloadEnabled` unitName",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/reloadEnabled"
        },
        "configuration": {
            "label": "reloadEnabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Switches on remote control of the unit. The command was {{Icon|globalArgument|32}} prior to **(Arma 3)**). For more info see [Remote Control Tutorial](https://community.bistudio.com/wiki/Remote%20Control%20Tutorial).\n\nIf the drone is remote it will get transferred to the player's PC.\n**NOTE**: See also `remoteControlled`, `isRemoteControlling`, and _Example 4_ for a getter workaround for earlier game versions.\n**WARNING**: Always use `switchCamera` first (when needed) before using `remoteControl` as doing it after may lead to unpredictable results.",
            "examples": [
                {
                    "text": "Set player remote control of driver:\n\n```sqf\n\ndriver UAV switchCamera \"Internal\"; // switchCamera required\nplayer remoteControl driver UAV;\n// sometimes switchCamera is not needed\nplayer remoteControl driver UAV;\n\n```"
                },
                {
                    "text": "Return control to player: \n```sqf\nobjNull remoteControl driver UAV;\n```"
                },
                {
                    "text": "{{GVI|arma3|2.14"
                },
                {
                    "text": "A dirty hack to return controlling unit because of the absence of dedicated getter:\n\n```sqf\n\nSQF_fnc_remoteControlledBy =\n{\n\tparams [\"_obj\"];\n\tif (!isNull objectParent _obj) exitWith { UAVControl _obj select 0 };\n\tprivate _res = [objNull];\n\tisNil\n\t{\n\t\tprivate _pos = getPosWorld _obj;\n\t\tprivate _dirUp = [vectorDirVisual _obj, vectorUpVisual _obj];\n\t\tprivate _anim = animationState _obj;\n\t\tprivate _dummy = \"PaperCar\" createVehicleLocal [0,0,0];\n\t\t_obj moveInAny _dummy;\n\t\t_res = uavControl _dummy;\n\t\t_obj setPosWorld _pos;\n\t\t_obj setVectorDirAndUp _dirUp;\n\t\t_obj switchMove _anim;\n\t\tdeleteVehicle _dummy;\n\t};\n\t_res select 0\n};\n\n```\n\nUsage (could be scheduled or unscheduled):\n\n```sqf\n\n[] spawn\n{\n\tplayer remoteControl bob;\n\tsystemChat str (bob call SQF_fnc_remoteControlledBy); // B Alpha 1-1:1 (KK)\n\tobjNull remoteControl bob;\n\tsystemChat str (bob call SQF_fnc_remoteControlledBy); // <NULL-object>\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "who",
                            "description": "`Object` - controlling unit"
                        },
                        {
                            "name": "whom",
                            "description": "`Object` - controlled unit"
                        }
                    ],
                    "outline": "who `remoteControl` whom",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/remoteControl"
        },
        "configuration": {
            "label": "remoteControl",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the player controlling the given unit if the argument is the unit, or the unit controlled by the player if the argument is the player.\n**IMPORTANT**: See also [Remote Control Tutorial](https://community.bistudio.com/wiki/Remote%20Control%20Tutorial).",
            "examples": [
                {
                    "text": "```sqf\nprivate _controllingPlayer = remoteControlled _dronePilot;\n```"
                },
                {
                    "text": "```sqf\nprivate _dronePilot = remoteControlled _controllingPlayer;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitOrPlayer",
                            "description": "`Object` - unit under remote control or the player controlling a unit"
                        }
                    ],
                    "outline": "`remoteControlled` unitOrPlayer",
                    "returns": "`Object` - the person controlling the unit or the unit controlled by the player; `objNull` if not applicable"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/remoteControlled"
        },
        "configuration": {
            "label": "remoteControlled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Asks the server to execute the given function or script command on the given target machine(s).\n* Functions are executed in the [scheduled environment](https://community.bistudio.com/wiki/Scheduler%23Scheduled%20Environment); suspension is allowed.\n* Script commands are executed in the [unscheduled environment](https://community.bistudio.com/wiki/Scheduler%23Unscheduled%20Environment); suspension is not allowed (see _Example 7_).\n\nRead [Arma 3: Remote Execution](https://community.bistudio.com/wiki/Arma%203%3A%20Remote%20Execution) for more information about remote execution, security features and JIP techniques.\n\n{{Feature|informative|`remoteExec`/`remoteExecCall` can be used in single player as well, as it is considered as player-hosted multiplayer.}}\n\n**IMPORTANT**: The direct execution of `call` or `spawn` via `remoteExec` (or `remoteExecCall`) should be avoided to prevent issues in cases where the remote execution of `call` or `spawn` is blocked by [CfgRemoteExec](https://community.bistudio.com/wiki/Arma%203%3A%20CfgRemoteExec). It is instead recommended to create a function to be itself remote-executed.",
            "examples": [
                {
                    "text": "How to write `remoteExec`/`remoteExecCall`:\n<code style=\"display: block\">{{Color|darkorange|hint}} {{Color|teal|\"Hello\"}};\n{{cc|becomes}}\n[{{Color|teal|\"Hello\"}}] remoteExec [\"{{Color|darkorange|hint}}\"];\n{{Color|teal|\"Hello\"}} remoteExec [\"{{Color|darkorange|hint}}\"]; {{cc|alternatively}}</code>\n\n<code style=\"display: block\">{{Color|green|unit1}} {{Color|darkorange|setFace}} {{Color|teal|\"Miller\"}};\n{{cc|becomes}}\n[{{Color|green|unit1}}, {{Color|teal|\"Miller\"}}] remoteExec [\"{{Color|darkorange|setFace}}\"];</code>\n\n<code style=\"display: block\">{{Color|darkorange|cutRsc}} {{Color|darkred|[\"\", \"BLACK OUT\"]}};\n{{cc|becomes}}\n[{{Color|darkred|[\"\", \"BLACK OUT\"]}}] remoteExec [\"{{Color|darkorange|cutRsc}}\"]; {{cc|double brackets are needed as the unary command takes an array}}</code>\n\n<code style=\"display: block\">\n{{cc|functions, however, do not need double squared brackets}}\n{{Color|teal|[\"line 1\", \"line 2\"]}} spawn {{Color|darkorange|BIS_fnc_infoText}};\n{{cc|becomes}}\n{{Color|teal|[\"line 1\", \"line 2\"]}} remoteExec [\"{{Color|darkorange|BIS_fnc_infoText}}\"];\n</code>"
                },
                {
                    "text": "send an order to specific machines:\n\n```sqf\n\n\"message\" remoteExec [\"hint\", 0];\t\t\t\t// sends a hint message to everyone, identical to \"message\" remoteExec [\"hint\"]\n\"message\" remoteExec [\"hint\", -2];\t\t\t\t// sends a hint message to everybody but the server (also not hosted server)\n\"message\" remoteExec [\"hint\", myCar];\t\t\t// sends a hint message where myCar is local\n\"message\" remoteExec [\"hint\", -clientOwner];\t// sends a hint message to everybody but the current machine\n\n```"
                },
                {
                    "text": "<!-- This example is referenced in the Syntax section. -->\nAdd statements to the JIP queue:\n\n```sqf\n\nprivate _jipId = [\"mission state: the car is broken\"] remoteExec [\"systemChat\", 0, true]; // adds the hint to the JIP queue and returns the JIP queue order id\nwaitUntil { canMove _car };\nremoteExec [\"\", _jipId]; // the systemChat order is removed from the JIP queue\n\n```\n\n\n\n```sqf\n\n[\"mission state: the car is broken\"] remoteExec [\"systemChat\", 0, _queueObject];\n// ...\nremoteExec [\"\", _queueObject]; // the order attached to _queueObject is removed\n\n```\n\n\n\n```sqf\n\nprivate _jipId = [\"mission state: the car is broken\"] remoteExec [\"systemChat\", 0, \"MY_JIP_ID\"]; // _jipId is actually \"MY_JIP_ID\" now\nwaitUntil { canMove _car };\n[\"mission state: the car is repaired\"] remoteExec [\"systemChat\", 0, \"MY_JIP_ID\"]; // this order replaces the previous one\n// ...\nremoteExec [\"\", \"MY_JIP_ID\"]; // the \"MY_JIP_ID\" order is removed from the JIP queue\n\n```"
                },
                {
                    "text": "Some more complex examples:\n\n```sqf\n\n[\"Open\", true] remoteExec [\"BIS_fnc_arsenal\", MyTargetPlayer];\n[MyCurator, [[MyObject1, MyObject2], false]] remoteExec [\"addCuratorEditableObjects\", 2];\n\n```"
                },
                {
                    "text": "A tricky example: executing <sqf inline>player setAmmo [primaryWeapon player, 1]; (on machines where the player is in MyGroup):\n\n```sqf\n\n[player, [primaryWeapon player, 1]] remoteExec [\"setAmmo\", MyGroup];\t\t\t// WRONG: the local player object is used here!\n[{ player setAmmo [primaryWeapon player, 1]; }] remoteExec [\"call\", MyGroup];\t// CORRECT: the remote player object is used here\n\n```"
                },
                {
                    "text": "**[Multiplayer Scripting](https://community.bistudio.com/wiki/Multiplayer%20Scripting) \"performance trick\"**\n\nThis <sqf inline>[0, -2] select isDedicated check is worth it to avoid **function** server-side calculations only. See also _Example 9_ for an advanced solution.\n\n```sqf\n\n[\"message\"] remoteExec [\"BIS_fnc_infoText\"];\t\t\t\t\t\t\t\t// not ideal - the function will still run on the dedicated server for nothing\n[\"message\"] remoteExec [\"BIS_fnc_infoText\", [0, -2] select isDedicated];\t// ideal - the dedicated server will not run the code, a player-hosted server will\n\n[\"message\"] remoteExec [\"hint\", [0, -2] select isDedicated];\t// the check is too expensive to be worthy - it becomes worthy if the server logs an RPT warning\n[\"message\"] remoteExec [\"hint\"];\t\t\t\t\t\t\t\t// the (dedicated) server will automatically ditch hint usage due to it not having an interface\n\nprivate _allPlayersTarget = [0, -2] select isDedicated;\t\t\t// caching the result for multiple usages makes it worthy - think of {{Link|Arma 3: Headless_Client|headless clients}} as well\n[\"message 1\"] remoteExec [\"hint\", _allPlayersTarget];\n[\"message 2\"] remoteExec [\"hint\", _allPlayersTarget];\n\n```\n\n**NOTE**: See _Example 9_ below for an advanced example."
                },
                {
                    "text": "<!-- This example is referenced in the Description section. -->\nAs said in the description: **commands** will be executed in an [unscheduled environment](https://community.bistudio.com/wiki/Scheduler%23Unscheduled%20Environment)\n\n```sqf\n[{ sleep 1 }] remoteExec [\"call\"]; // will throw an error: it is forbidden to use sleep (or waitUntil, etc) in unscheduled environment\n```"
                },
                {
                    "text": "<!-- This example is referenced in the Description section. -->\n\n```sqf\n\n\"Message 1\" remoteExec [\"systemChat\"];\n\"Message 2\" remoteExec [\"systemChat\"];\n// will result in\n// \"Message 1\"\n// \"Message 2\"\n// in this exact order on clients\n\n```"
                },
                {
                    "text": "<!-- This example is referenced in the Syntax section. -->\nIt is possible to create a \"to all players\" remote exec target variable:\n\n```sqf\n\nif (isServer) then\n{\n\tTO_ALL_PLAYERS = [0, -2] select isDedicated;\n\tpublicVariable \"TO_ALL_PLAYERS\";\n};\n\n```\n\n<spoiler text=\"Show HC-compatible version\">\nIf {{Link|Arma 3: Headless Client|Headless Clients}} are involved:\n\n```sqf\n\nif (isServer) then\n{\n\tTO_ALL_PLAYERS = [0, -2] select isDedicated;\n\n\tprivate _allNegativeHCs = allPlayers apply { getPlayerID _x } select { _x != \"-1\" }\t// all valid playerIDs\n\t\tapply { getUserInfo _x } select { _x select 7 }\t\t\t\t\t\t\t\t\t// filter by HC\n\t\tapply { -(_x select 1) };\t\t\t\t\t\t\t\t\t\t\t\t\t\t// get negative network ID\n\n\tif (_allNegativeHCs isNotEqualTo []) then\n\t{\n\t\tTO_ALL_PLAYERS = [TO_ALL_PLAYERS] + _allNegativeHCs;\n\t};\n\n\tpublicVariable \"TO_ALL_PLAYERS\";\n\n\taddMissionEventHandler [\"OnUserConnected\", {\n\t\tparams [\"_networkId\"];\n\t\tprivate _userInfo = getUserInfo _networkId;\n\t\tif !(_userInfo select 7) exitWith {}; // not a HC\n\n\t\tif (TO_ALL_PLAYERS isEqualType 0) then\t// number to array conversion\n\t\t{\n\t\t\tif (TO_ALL_PLAYERS == 0) then\t\t// player-hosted\n\t\t\t{\n\t\t\t\tTO_ALL_PLAYERS = [-(_userInfo select 1)];\n\t\t\t}\n\t\t\telse\t\t\t\t\t\t\t\t// -2, dedicated server\n\t\t\t{\n\t\t\t\tTO_ALL_PLAYERS = [TO_ALL_PLAYERS, -(_userInfo select 1)];\n\t\t\t};\n\t\t}\n\t\telse\t\t\t\t\t\t\t\t\t// already an array\n\t\t{\n\t\t\tTO_ALL_PLAYERS pushBackUnique -(_userInfo select 1);\n\t\t};\n\n\t\tpublicVariable \"TO_ALL_PLAYERS\";\n\t}];\n};\n\n```\n\n```sqf\n\n// client or server will always target the good machines\n[\"Yay!\"] remoteExec [\"hint\", TO_ALL_PLAYERS];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "**params**",
                            "description": "`Anything` **but** [Structured Text](https://community.bistudio.com/wiki/Structured%20Text) - _order_<nowiki/>'s parameter **IMPORTANT**: [Structured Text](https://community.bistudio.com/wiki/Structured%20Text) is **not** meant to be sent over network."
                        },
                        {
                            "name": "**order**",
                            "description": "`String` - function or command name; while any function or command can be used here, only those allowed by [CfgRemoteExec](https://community.bistudio.com/wiki/Arma%203%3A%20CfgRemoteExec) will actually be executed"
                        },
                        {
                            "name": "**targets**",
                            "description": "(Optional, default 0):\n* `Number` (See also [Machine network ID](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Machine%20network%20ID)):\n** **0:** the order will be executed globally, i.e. on the server and every connected client, including the machine where `remoteExec` originated\n** **2:** the order will only be executed on the server - is both dedicated and hosted server. See [for more info](https://community.bistudio.com/wiki/Multiplayer_Scripting%23Different_machines_and_how_to_target_them)\n** **Other number:** the order will be executed on the machine where `clientOwner` matches the given number\n** **Negative number:** the effect is inverted: **-2** means every client but not the server, **-12** means the server and every client, except for the client where `clientOwner` returns 12\n* `Object` - the order will be executed where the given object is [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality)\n* `String` - interpreted as an `Identifier` (variable name); the function / command will be executed where the object or group identified by the variable with the provided name is [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality)\n* `Side` - the order will be executed on machines where the player is on the specified side\n* `Group` - the order will be executed on machines **where the player is in the specified group** (**not** where said group is local!)\n* `Array` - array of any combination of the types listed above"
                        },
                        {
                            "name": "**JIP**",
                            "description": "(Optional, default `false`):\n* `Boolean` - if `true`, a unique JIP ID is generated and the `remoteExec` statement is added to the JIP queue from which it will be executed for every JIP\n* `String`:\n** if the string is empty, it is interpreted as `false`\n** if the string is in format \"`Number`:`Number`\" (e.g. \"0:0\"), it is interpreted as a `netId` (see below)\n** else the string is treated as a custom JIP ID and the `remoteExec` statement is added to the JIP queue, replacing statements that have the same JIP ID\n* `Object`, `Group` or `netId` - the persistent execution of the `remoteExec` statement is attached to the given object or group, replacing any previous statement that has the same JIP ID.\nWhen the object / group is deleted, the `remoteExec` statement is automatically removed from the JIP queue\n\nThe **JIP** parameter can only be used if the **targets** parameter is 0 or a negative number.\n\nSee also [Example 3](https://community.bistudio.com/wiki/%23Example%203) on how to remove statements from the JIP queue."
                        }
                    ],
                    "outline": "params `remoteExec` [order, targets, JIP]",
                    "returns": "* `nil` - In case of error.\n* `String` - In case of success.\n** If the **JIP** parameter was `false` or an empty string, the return value is \"\".\n** If the **JIP** parameter was `true` or a custom JIP ID, the JIP ID is returned.\n** If the **JIP** parameter was an `Object`, a `Group` or a `netId`, the (corresponding) `netId` is returned."
                },
                {
                    "parameters": [
                        {
                            "name": "**functionName**",
                            "description": "`String` - see the main syntax above for more details."
                        },
                        {
                            "name": "**targets**",
                            "description": "`Number`, `Object`, `String`, `Side`, `Group` or `Array` - (Optional, default 0) see the main syntax above for more details."
                        },
                        {
                            "name": "**JIP**",
                            "description": "`Boolean`, `String`, `Object`, `Group` or `netId` - (Optional, default `false`) see the main syntax above for more details."
                        }
                    ],
                    "outline": "`remoteExec` [functionName, targets, JIP]",
                    "returns": "`nil` or `String` - see the main syntax above for more details.\n\n\n<!-- Don't place links within strings in these examples. -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/remoteExec"
        },
        "configuration": {
            "label": "remoteExec",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "[Unscheduled](https://community.bistudio.com/wiki/Scheduler) version of `remoteExec`. The only difference between `remoteExec` and `remoteExecCall` is that `remoteExecCall` will run **functions** in [unscheduled environment](https://community.bistudio.com/wiki/Scheduler%23Unscheduled%20Environment).\n**IMPORTANT**: \nThe \"Call\" in `remoteExecCall` only means that the remote execution will take place in [unscheduled environment](https://community.bistudio.com/wiki/Scheduler%23Unscheduled%20Environment) and does **not** mean it will happen right away (see _Example 3_).",
            "examples": [
                {
                    "text": "```sqf\n[\"hello\"] remoteExec [\"hint\"];\t\t// runs unscheduled\n[\"hello\"] remoteExecCall [\"hint\"];\t// no difference at all\n```"
                },
                {
                    "text": "```sqf\n[\"my message\"] remoteExec [\"BIS_fnc_infoText\"];\t\t// correct\n[\"my message\"] remoteExecCall [\"BIS_fnc_infoText\"];\t// wrong - BIS_fnc_infoText needs a scheduled environment, see its spawn need\n```"
                },
                {
                    "text": "```sqf\nremoteExecCall [\"fnc1\"];\ncall fnc2;\t// fnc1 may or may not be executed after fnc2\n\ncall fnc1;\ncall fnc2;\t// fnc2 will be executed after fnc1\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "see `remoteExec`",
                    "returns": "see `remoteExec`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/remoteExecCall"
        },
        "configuration": {
            "label": "remoteExecCall",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the [ machine network ID](https://community.bistudio.com/wiki/Multiplayer_Scripting%23Machine_network_ID%20) of the client that initiated [Remote Execution](https://community.bistudio.com/wiki/Remote%20Execution).\n**IMPORTANT**: \nRunning this command\n* in a Single Player environment\n* outside of a remote-executed context\n* in a remote-executed context received from a [Headless Client](https://community.bistudio.com/wiki/Arma%203%3A%20Headless%20Client)\nwill return **0** by design. To check if the context is remote executed, use `isRemoteExecuted` or `isRemoteExecutedJIP`.",
            "examples": [
                {
                    "text": "```sqf\nprivate _callerRE = remoteExecutedOwner;\n```"
                },
                {
                    "text": "Send request to the server and get immediate response:\n\n```sqf\n\n{\n\t// in this scope, the remoteExecutedOwner equals clientOwner of the sender\n\t// so using it as target in remoteExec will send response right back at him\n\t[\n\t\ttime, // mission time value on the server\n\t\t{\n\t\t\thint format\n\t\t\t[\n\t\t\t\t\"Request received!\\nMission time value on the server is: %1\",\n\t\t\t\t_this\n\t\t\t];\n\t\t}\n\t]\n\tremoteExec [\"call\", remoteExecutedOwner]; // server response to the sender\n} \nremoteExec [\"call\", 2]; // send request to server\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`remoteExecutedOwner`",
                    "returns": "`Number` - returns zero in the specific cases listed in the {{Link|#Description}}"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/remoteExecutedOwner"
        },
        "configuration": {
            "label": "remoteExecutedOwner",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes [connection](https://community.bistudio.com/wiki/Eden%20Editor%3A%20Connecting) between entities.",
            "examples": [
                {
                    "text": "```sqf\nremove3DENConnection [\"RandomStart\", get3DENSelected \"Object\", \"marker_0\"];// Remove random start on marker \"marker_0\" from all selected objects.\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`String` - connection class from _Cfg3DEN >> Connections_"
                        },
                        {
                            "name": "from",
                            "description": "`Array` of [Eden Entities](https://community.bistudio.com/wiki/Eden%20Entity) - entities which has a connection"
                        },
                        {
                            "name": "to",
                            "description": "[Eden Entity](https://community.bistudio.com/wiki/Eden%20Entity) - connection target"
                        }
                    ],
                    "outline": "`remove3DENConnection` [type, from, to]",
                    "returns": "`Boolean` - `true` If the connection was removed"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/remove3DENConnection"
        },
        "configuration": {
            "label": "remove3DENConnection",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes Eden Editor event handler of given type and ID.\n\n\n\nSee the list of all [Eden Editor Event Handlers](https://community.bistudio.com/wiki/Arma_3%3A_Event_Handlers%3A_Eden_Editor).",
            "examples": [
                {
                    "text": "```sqf\neh = add3DENEventHandler [\"onUndo\",{systemChat \"Zip...\"}];\nremove3DENEventHandler [\"onUndo\",eh];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`String` - name of event handler"
                        },
                        {
                            "name": "id",
                            "description": "`Number` - ID of event handler, returned by `add3DENEventHandler`"
                        }
                    ],
                    "outline": "`remove3DENEventHandler` [type,id]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/remove3DENEventHandler"
        },
        "configuration": {
            "label": "remove3DENEventHandler",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Remove [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor) editing layer.\n**NOTE**: `delete3DENEntities` seems to be more reliable.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _myLayer = -1 add3DENLayer \"Enemy Base\";\nremove3DENLayer _myLayer;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "layerID ",
                            "description": "`Number` - layer ID as returned by `add3DENLayer` command"
                        }
                    ],
                    "outline": "`remove3DENLayer` layerID",
                    "returns": "`Boolean` - `true` if the layer was removed successfully (i.e., correct layer ID was used)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/remove3DENLayer"
        },
        "configuration": {
            "label": "remove3DENLayer",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes user added action with given ID. This only removes actions added with the `addAction` command. You cannot remove default game actions, such as reload.",
            "examples": [
                {
                    "text": "```sqf\nplayer removeAction 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit, vehicle or static object"
                        },
                        {
                            "name": "actionID",
                            "description": "`Number` - action ID returned by `addAction`"
                        }
                    ],
                    "outline": "unit `removeAction` actionID",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeAction"
        },
        "configuration": {
            "label": "removeAction",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes all [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor) event handlers of given type. \n\n\n\nSee the list of all [Eden Editor Event Handlers](https://community.bistudio.com/wiki/Arma_3%3A_Event_Handlers%3A_Eden_Editor).",
            "examples": [
                {
                    "text": "```sqf\nremoveAll3DENEventHandlers \"onUndo\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`String` - name of event handler"
                        }
                    ],
                    "outline": "`removeAll3DENEventHandlers` type",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/removeAll3DENEventHandlers"
        },
        "configuration": {
            "label": "removeAll3DENEventHandlers",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes all unit's user added actions.\n{{Feature|informative|This command's syntax was <sqf inline>unit removeAllActions number from Arma 3 v0.50 to v1.06.}}\n**IMPORTANT**: Usage of this command is usually a bad practice unless justified by the situation; removing all actions in order to remove all actions that _one_ added is not a good method as a mod or another script could have added its own actions as well and see them removed. Instead, store the action id returned by `addAction` either in a script variable or using `setVariable`.",
            "examples": [
                {
                    "text": "```sqf\nremoveAllActions player;\n```"
                },
                {
                    "text": "Do\n\n```sqf\n\nprivate _actionId = player addAction [\"Heal self\", { player setDamage 0; }];\n// ...\nplayer removeAction _actionId;\n\n```\n\nDon't\n\n```sqf\n\nplayer addAction [\"Heal self\", { player setDamage 0; }];\n// ...\nremoveAllActions player;\n\n```"
                },
                {
                    "text": "Do\n\n```sqf\n\nplayer addAction [\"Heal self (once)\", {\n\tparams [\"_target\", \"\", \"_actionId\"];\n\t_target setDamage 0;\n\t_target removeAction _actionId;\n}];\n\n```\n\nDon't\n\n```sqf\n\nplayer addAction [\"Heal self (once)\", {\n\tplayer setDamage 0;\n\tremoveAllActions player;\n}];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "obj",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`removeAllActions` obj",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeAllActions"
        },
        "configuration": {
            "label": "removeAllActions",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Unassigns and deletes all linked items from inventory.\nThe commands operates on `assignedItems` array, which does not include goggles or headgear but includes binoculars, which is a weapon.\n\nUse `removeGoggles` and `removeHeadgear` for those.",
            "examples": [
                {
                    "text": "```sqf\nremoveAllAssignedItems player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`removeAllAssignedItems` unit",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - soldier"
                        },
                        {
                            "name": "allItems",
                            "description": "`Boolean` - `true` to include all slot items, `false` exclude goggles and headgear"
                        },
                        {
                            "name": "includeBinocs",
                            "description": "`Boolean` - `true` to include binoculars (which is a weapon), `false` to exclude it"
                        }
                    ],
                    "outline": "`removeAllAssignedItems` [unit, allItems, includeBinocs]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeAllAssignedItems"
        },
        "configuration": {
            "label": "removeAllAssignedItems",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes all items from `binocular` weapon, except magazine.",
            "examples": [
                {
                    "text": "```sqf\nremoveAllBinocularItems player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`removeAllBinocularItems` unit",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeAllBinocularItems"
        },
        "configuration": {
            "label": "removeAllBinocularItems",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes all containers (vest, uniform, backpack) from the provided unit.",
            "examples": [
                {
                    "text": "```sqf\nremoveAllContainers player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`removeAllContainers` unit",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/removeAllContainers"
        },
        "configuration": {
            "label": "removeAllContainers",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Restrict access to all addons for given curator.",
            "examples": [
                {
                    "text": "```sqf\nremoveAllCuratorAddons myCurator;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curatorObj",
                            "description": "`Object` - curator module"
                        }
                    ],
                    "outline": "`removeAllCuratorAddons` curatorObj",
                    "returns": "`Nothing`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/removeAllCuratorAddons"
        },
        "configuration": {
            "label": "removeAllCuratorAddons",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Delete all curator camera areas.",
            "examples": [
                {
                    "text": "```sqf\nremoveAllCuratorCameraAreas myCurator;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curatorObj",
                            "description": "`Object` - curator module."
                        }
                    ],
                    "outline": "`removeAllCuratorCameraAreas` curatorObj",
                    "returns": "`Nothing`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/removeAllCuratorCameraAreas"
        },
        "configuration": {
            "label": "removeAllCuratorCameraAreas",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Delete all curator edit areas.",
            "examples": [
                {
                    "text": "```sqf\nremoveAllCuratorEditingAreas myCurator;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curatorObj",
                            "description": "`Object` - curator module."
                        }
                    ],
                    "outline": "`removeAllCuratorEditingAreas` curatorObj",
                    "returns": "`Nothing`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/removeAllCuratorEditingAreas"
        },
        "configuration": {
            "label": "removeAllCuratorEditingAreas",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes all event handlers of given type that were added by `addEventHandler` **and** resets event handler's creation index to 0.",
            "examples": [
                {
                    "text": "```sqf\nplayer removeAllEventHandlers \"Killed\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Object` or **(Arma 3)** `Group`"
                        },
                        {
                            "name": "handlerType",
                            "description": "`String` - see [Event Handlers](https://community.bistudio.com/wiki/%3ACategory%3AEvent%20Handlers)"
                        }
                    ],
                    "outline": "target `removeAllEventHandlers` handlerType",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeAllEventHandlers"
        },
        "configuration": {
            "label": "removeAllEventHandlers",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes all items from `handgunWeapon`, except magazine.",
            "examples": [
                {
                    "text": "```sqf\nremoveAllHandgunItems player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`removeAllHandgunItems` unit",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeAllHandgunItems"
        },
        "configuration": {
            "label": "removeAllHandgunItems",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes all special items from the unit.",
            "examples": [
                {
                    "text": "```sqf\nremoveAllItems unitName;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`removeAllItems` unit",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeAllItems"
        },
        "configuration": {
            "label": "removeAllItems",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes all `itemsWithMagazines` from the uniform, vest and backpack. Command essentially clears all unit's containers.",
            "examples": [
                {
                    "text": "```sqf\nremoveAllItemsWithMagazines player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`removeAllItemsWithMagazines` unit",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/removeAllItemsWithMagazines"
        },
        "configuration": {
            "label": "removeAllItemsWithMagazines",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes all mission event handlers of the given type which were added by `addMissionEventHandler`.\n\n**IMPORTANT**:  Prior to **(Arma 3)** this command would also reset the Event Handler creation index to 0.",
            "examples": [
                {
                    "text": "```sqf\nremoveAllMissionEventHandlers \"Loaded\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`removeAllMissionEventHandlers` type",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeAllMissionEventHandlers"
        },
        "configuration": {
            "label": "removeAllMissionEventHandlers",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes all MP event handlers of the given type which were added by `addMPEventHandler`. Command needs to be executed only on one PC for MP event handler to be removed globally.",
            "examples": [
                {
                    "text": "```sqf\nplayer removeAllMPEventHandlers \"MPKilled\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "objectName",
                            "description": "`Object`"
                        },
                        {
                            "name": "event",
                            "description": "`String`"
                        }
                    ],
                    "outline": "objectName `removeAllMPEventHandlers` event",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeAllMPEventHandlers"
        },
        "configuration": {
            "label": "removeAllMPEventHandlers",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes all music track event handlers of given type.",
            "examples": [
                {
                    "text": "```sqf\nremoveAllMusicEventHandlers \"MusicStart\";\n```"
                },
                {
                    "text": "```sqf\nremoveAllMusicEventHandlers \"MusicStop\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`String` - \"MusicStart\" or \"MusicStop\""
                        }
                    ],
                    "outline": "`removeAllMusicEventHandlers` type",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/removeAllMusicEventHandlers"
        },
        "configuration": {
            "label": "removeAllMusicEventHandlers",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes ownership of all owned mines/explosive devices of the given unit",
            "examples": [
                {
                    "text": "```sqf\nremoveAllOwnedMines player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`removeAllOwnedMines` unit",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/removeAllOwnedMines"
        },
        "configuration": {
            "label": "removeAllOwnedMines",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes all items from `primaryWeapon`, except magazine.",
            "examples": [
                {
                    "text": "```sqf\nremoveAllPrimaryWeaponItems player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`removeAllPrimaryWeaponItems` unit",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeAllPrimaryWeaponItems"
        },
        "configuration": {
            "label": "removeAllPrimaryWeaponItems",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes all items from `secondaryWeapon`, except magazine.",
            "examples": [
                {
                    "text": "```sqf\nremoveAllSecondaryWeaponItems player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`removeAllSecondaryWeaponItems` unit",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeAllSecondaryWeaponItems"
        },
        "configuration": {
            "label": "removeAllSecondaryWeaponItems",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes all UserAction event handlers of the given type which were added by `addUserActionEventHandler`.\n\n**IMPORTANT**: This command also resets the Event Handler creation index to 0.",
            "examples": [
                {
                    "text": "```sqf\nremoveAllUserActionEventHandlers [\"Reload\", \"Activate\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "keyName",
                            "description": "`String` - see [inputAction/actions](https://community.bistudio.com/wiki/inputAction%2Factions)"
                        },
                        {
                            "name": "eventType",
                            "description": "`String` - event name; see [UserAction Event Handlers](https://community.bistudio.com/wiki/Arma%203%3A%20Event%20Handlers%23UserAction%20Event%20Handlers). Can be one of:\n* \"Activate\"\n* \"Deactivate\"\n* \"Analog\""
                        }
                    ],
                    "outline": "`removeAllUserActionEventHandlers` [keyName, eventType]",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeAllUserActionEventHandlers"
        },
        "configuration": {
            "label": "removeAllUserActionEventHandlers",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes all weapons and magazines from the given unit. Does not remove items like map, compass, radio (see `removeWeapon` for this).\n**NOTE**: Does not quite work with vehicles. If you need to remove all weapons from a vehicle, remove each weapon individually (see `removeWeapon`).",
            "examples": [
                {
                    "text": "```sqf\nremoveAllWeapons player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`removeAllWeapons` unit",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeAllWeapons"
        },
        "configuration": {
            "label": "removeAllWeapons",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes unit's backpack",
            "examples": [
                {
                    "text": "```sqf\nremoveBackpack this;\n```"
                },
                {
                    "text": "```sqf\nremoveBackpack mySoldierDude;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`removeBackpack` unit",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeBackpack"
        },
        "configuration": {
            "label": "removeBackpack",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes backpack from a unit. (even non-local)",
            "examples": [
                {
                    "text": "```sqf\nremoveBackpackGlobal player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - soldier"
                        }
                    ],
                    "outline": "`removeBackpackGlobal` unit",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeBackpackGlobal"
        },
        "configuration": {
            "label": "removeBackpackGlobal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes given weapon item, including magazine, from the `binocular` weapon.",
            "examples": [
                {
                    "text": "```sqf\nplayer removeBinocularItem \"Laserbatteries\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "item",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `removeBinocularItem` item",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeBinocularItem"
        },
        "configuration": {
            "label": "removeBinocularItem",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Restrict curator use of given addons.",
            "examples": [
                {
                    "text": "```sqf\ncuratorModule removeCuratorAddons [addon1, addon2];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curatorObj",
                            "description": "`Object` - curator module."
                        },
                        {
                            "name": "addons",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "curatorObj `removeCuratorAddons` addons",
                    "returns": "`Nothing`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/removeCuratorAddons"
        },
        "configuration": {
            "label": "removeCuratorAddons",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes curator camera area.",
            "examples": [
                {
                    "text": "```sqf\nmyCurator removeCuratorCameraArea 3;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curatorObj",
                            "description": "`Object` - curator module."
                        },
                        {
                            "name": "cameraAreaID",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "curatorObj `removeCuratorCameraArea` cameraAreaID",
                    "returns": "`Nothing`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/removeCuratorCameraArea"
        },
        "configuration": {
            "label": "removeCuratorCameraArea",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Unregister objects which can be edited by a curator.",
            "examples": [
                {
                    "text": "```sqf\ncuratorModule removeCuratorEditableObjects [[cursorTarget], true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curatorObj",
                            "description": "`Object` - curator module"
                        },
                        {
                            "name": "objects",
                            "description": "`Array`"
                        },
                        {
                            "name": "removeCrew",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "curatorObj `removeCuratorEditableObjects` <nowiki>[[</nowiki>objects], removeCrew]",
                    "returns": "`Nothing`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/removeCuratorEditableObjects"
        },
        "configuration": {
            "label": "removeCuratorEditableObjects",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes editing area for given curator.",
            "examples": [
                {
                    "text": "```sqf\nmyCurator removeCuratorEditingArea 3;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curatorObj",
                            "description": "`Object` - curator module."
                        },
                        {
                            "name": "editAreaID",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "curatorObj `removeCuratorEditingArea` editAreaID",
                    "returns": "`Nothing`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/removeCuratorEditingArea"
        },
        "configuration": {
            "label": "removeCuratorEditingArea",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Remove a log record.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _diaryRecord = player createDiaryRecord [\"Diary\", [\"Subject\", \"Text\"]];\n// ...\nplayer removeDiaryRecord [\"Diary\", _diaryRecord];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "subject",
                            "description": "`String`"
                        },
                        {
                            "name": "diaryRecord",
                            "description": "[Diary Record](https://community.bistudio.com/wiki/Diary%20Record)"
                        }
                    ],
                    "outline": "unit `removeDiaryRecord` [subject, diaryRecord]",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeDiaryRecord"
        },
        "configuration": {
            "label": "removeDiaryRecord",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes a page and all its subjects from the `Diary`.",
            "examples": [
                {
                    "text": "```sqf\nplayer removeDiarySubject \"myPage\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "player",
                            "description": "`Object`"
                        },
                        {
                            "name": "diaryPage",
                            "description": "`String`"
                        }
                    ],
                    "outline": "player `removeDiarySubject` diaryPage",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeDiarySubject"
        },
        "configuration": {
            "label": "removeDiarySubject",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes an icon for an editor object. \n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "string identifier",
                            "description": "`String`"
                        }
                    ],
                    "outline": "map `removeDrawIcon` [object, string identifier]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/removeDrawIcon"
        },
        "configuration": {
            "label": "removeDrawIcon",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Remove all drawn links for the given editor object for the given editor,object type. Pass an empty string as param type to remove all draw,links for an object.  \n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "[from,param type]",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "map `removeDrawLinks` [from,param type]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/removeDrawLinks"
        },
        "configuration": {
            "label": "removeDrawLinks",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes a given Event Handler that was added with `addEventHandler`.",
            "examples": [
                {
                    "text": "```sqf\nplayer removeEventHandler [\"Killed\", 0];\n```"
                },
                {
                    "text": "The [Magic Variables](https://community.bistudio.com/wiki/Magic%20Variables) <var>_thisEvent</var> and <var>_thisEventHandler</var> can be used to easily remove an Event Handler:\n\n```sqf\nplayer addEventHandler [\"FiredNear\", {\n\tsystemChat \"This Event Handler is now removing itself!\";\n\tplayer removeEventHandler [_thisEvent, _thisEventHandler];\n}];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Object` or **(Arma 3)** `Group`"
                        },
                        {
                            "name": "type",
                            "description": "`String` - see [Event Handlers](https://community.bistudio.com/wiki/%3ACategory%3AEvent%20Handlers) for the full list of available options"
                        },
                        {
                            "name": "index",
                            "description": "`Number` - the value originally returned by `addEventHandler`"
                        }
                    ],
                    "outline": "target `removeEventHandler` [type, index]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/removeEventHandler"
        },
        "configuration": {
            "label": "removeEventHandler",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes vehicles/units from the garbage collector, so they do not get deleted automatically; added earlier with `addToRemainsCollector`.",
            "examples": [
                {
                    "text": "```sqf\nremoveFromRemainsCollector [unit1, unit2, vehicle1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "remains",
                            "description": "`Array` - array of vehicles/units"
                        }
                    ],
                    "outline": "`removeFromRemainsCollector` remains",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeFromRemainsCollector"
        },
        "configuration": {
            "label": "removeFromRemainsCollector",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes goggles from unit (diver goggles for example). This command does not remove NVGoggles. Use `unassignItem` and `removeItem` or just `unlinkItem` for latter.",
            "examples": [
                {
                    "text": "```sqf\nremoveGoggles assaultDiver;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`removeGoggles` unit",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeGoggles"
        },
        "configuration": {
            "label": "removeGoggles",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Remove icon with given ID from group.",
            "examples": [
                {
                    "text": "```sqf\n_target removeGroupIcon (_target getVariable \"hc_attackicon\");\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group`"
                        },
                        {
                            "name": "iconID",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "group `removeGroupIcon` iconID",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/removeGroupIcon"
        },
        "configuration": {
            "label": "removeGroupIcon",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes given weapon item, including magazine, from the `handgunWeapon`",
            "examples": [
                {
                    "text": "```sqf\nplayer removeHandgunItem \"muzzle_snds_L\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "item",
                            "description": "`String` - config class"
                        }
                    ],
                    "outline": "unit `removeHandgunItem` item",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeHandgunItem"
        },
        "configuration": {
            "label": "removeHandgunItem",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes headgear from a unit. If unit has no headgear command quietly fails.",
            "examples": [
                {
                    "text": "```sqf\nremoveHeadgear player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`removeHeadgear` unit",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeHeadgear"
        },
        "configuration": {
            "label": "removeHeadgear",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes item from the inventory. The removal order by containers is `uniform` &rarr; `vest` &rarr; `backpack`.",
            "examples": [
                {
                    "text": "```sqf\n\nbluforUnit unassignItem \"NVGoggles\";\nbluforUnit removeItem \"NVGoggles\";\nopforUnit unassignItem \"NVGoggles_OPFOR\";\nopforUnit removeItem \"NVGoggles_OPFOR\";\nindependentUnit unassignItem \"NVGoggles_INDEP\";\nindependentUnit removeItem \"NVGoggles_INDEP\";\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "item",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `removeItem` item",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeItem"
        },
        "configuration": {
            "label": "removeItem",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes item from soldier's backpack.",
            "examples": [
                {
                    "text": "```sqf\nplayer removeItemFromBackpack \"itemGPS\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "item",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `removeItemFromBackpack` item",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeItemFromBackpack"
        },
        "configuration": {
            "label": "removeItemFromBackpack",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes item from soldier's uniform. Can be used with magazines and weapons too.",
            "examples": [
                {
                    "text": "```sqf\nplayer removeItemFromUniform \"FirstAidKit\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "item",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `removeItemFromUniform` item",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeItemFromUniform"
        },
        "configuration": {
            "label": "removeItemFromUniform",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes item from soldier's vest.",
            "examples": [
                {
                    "text": "```sqf\nplayer removeItemFromVest \"itemWatch\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "item",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `removeItemFromVest` item",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeItemFromVest"
        },
        "configuration": {
            "label": "removeItemFromVest",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes all items with given class name from the inventory.",
            "examples": [
                {
                    "text": "```sqf\nplayer removeItems \"FirstAidKit\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "item",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `removeItems` item",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeItems"
        },
        "configuration": {
            "label": "removeItems",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Remove magazine from the unit.**WARNING**: You may create invalid combinations with this function. When doing so, application behaviour is undefined.",
            "examples": [
                {
                    "text": "```sqf\nplayer removeMagazine \"M16\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        },
                        {
                            "name": "magazineName",
                            "description": "`String` - see [weapons](https://community.bistudio.com/wiki/%3ACategory%3AWeapons)"
                        }
                    ],
                    "outline": "unitName `removeMagazine` magazineName",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/removeMagazine"
        },
        "configuration": {
            "label": "removeMagazine",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes the magazine from the unit.",
            "examples": [
                {
                    "text": "```sqf\nplayer removeMagazineGlobal \"30Rnd_65x39_caseless_mag\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "magazineName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `removeMagazineGlobal` magazineName",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeMagazineGlobal"
        },
        "configuration": {
            "label": "removeMagazineGlobal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes all magazines of given type from the unit. If magazine class does not exist, nothing happens, not even .rpt message, unlike with `addMagazine` command.",
            "examples": [
                {
                    "text": "```sqf\nplayer removeMagazines \"30Rnd_556x45_Stanag\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        },
                        {
                            "name": "magazineName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unitName `removeMagazines` magazineName",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/removeMagazines"
        },
        "configuration": {
            "label": "removeMagazines",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes all magazines of the given type from given vehicle. Use turret path [-1] for driver's turret.",
            "examples": [
                {
                    "text": "```sqf\nvehicle player removeMagazinesTurret [\"60rnd_cmflaremagazine\",[-1]];\n```"
                },
                {
                    "text": "```sqf\n_tank removeMagazinesTurret [\"20Rnd_120mmSABOT_M1A2\",[0]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "magazineName",
                            "description": "`String`"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` format [Turret Path](https://community.bistudio.com/wiki/Turret%20Path)"
                        }
                    ],
                    "outline": "vehicle `removeMagazinesTurret` [magazineName, turretPath]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeMagazinesTurret"
        },
        "configuration": {
            "label": "removeMagazinesTurret",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes the magazine from the turret. Use turret path [-1] for driver's turret.\n\nNote: you may create invalid combinations by using this function. When doing so, application behaviour is undefined.",
            "examples": [
                {
                    "text": "```sqf\nvehicle player removeMagazineTurret [\"60rnd_cmflaremagazine\",[-1]];\n```"
                },
                {
                    "text": "```sqf\n_tank removeMagazineTurret [\"20Rnd_120mmSABOT_M1A2\",[0]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "magazineName",
                            "description": "`String`"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` format [Turret Path](https://community.bistudio.com/wiki/Turret%20Path)"
                        }
                    ],
                    "outline": "vehicle `removeMagazineTurret` [magazineName, turretPath]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeMagazineTurret"
        },
        "configuration": {
            "label": "removeMagazineTurret",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes a previously added menu item. \n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "index",
                            "description": "`Number` - index of menu item to delete"
                        }
                    ],
                    "outline": "map `removeMenuItem` index",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/removeMenuItem"
        },
        "configuration": {
            "label": "removeMenuItem",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes mission event handler added by `addMissionEventHandler`.",
            "examples": [
                {
                    "text": "```sqf\nprivate _eventHandlerId = addMissionEventHandler [\"Ended\", { diag_log \"mission complete\"; }];\n// ...\nremoveMissionEventHandler [\"Ended\", _eventHandlerId];\n```"
                },
                {
                    "text": "```sqf\nfor \"_i\" from 0 to 4 do {\n\tmissionNamespace setVariable [format [\"handler%1\",_i], addMissionEventHandler [\"Loaded\",\"hint \"\"_i\"\";\"]];\n};\nremoveMissionEventHandler [\"Loaded\", handler2]; // Remove the third index under type \"Loaded\"\n```"
                },
                {
                    "text": "```sqf\naddMissionEventHandler [\"entityKilled\",{hint \"First kill!\"; removeMissionEventHandler [\"entityKilled\", _thisEventHandler]; }];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`String`"
                        },
                        {
                            "name": "index",
                            "description": "`Number` - index is returned by addMissionEventHandler."
                        }
                    ],
                    "outline": "`removeMissionEventHandler` [type, index]",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeMissionEventHandler"
        },
        "configuration": {
            "label": "removeMissionEventHandler",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes MP event handler added by `addMPEventHandler`.",
            "examples": [
                {
                    "text": "```sqf\nplayer removeMPEventHandler [\"MPKilled\", 0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        },
                        {
                            "name": "event",
                            "description": "`String`"
                        },
                        {
                            "name": "index",
                            "description": "`Number` - index returned by `addMPEventHandler`"
                        }
                    ],
                    "outline": "unitName `removeMPEventHandler` [event, index]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeMPEventHandler"
        },
        "configuration": {
            "label": "removeMPEventHandler",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes specified music track event handler. See {{Link|Arma 3: Event Handlers#Music Event Handlers}}.",
            "examples": [
                {
                    "text": "```sqf\nremoveMusicEventHandler [\"MusicStart\", 12];\n```"
                },
                {
                    "text": "```sqf\nremoveMusicEventHandler [\"MusicStop\", 12];\n```"
                },
                {
                    "text": "```sqf\nprivate _stopMusicEH = addMusicEventHandler [\"MusicStop\", {}];\n// ...\nremoveMusicEventHandler [\"MusicStop\", _stopMusicEH];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`String` - \"MusicStart\" or \"MusicStop\""
                        },
                        {
                            "name": "id",
                            "description": "`Number` - event handler id"
                        }
                    ],
                    "outline": "`removeMusicEventHandler` [type, id]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/removeMusicEventHandler"
        },
        "configuration": {
            "label": "removeMusicEventHandler",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes ownership over a remotely detonatable mine from the unit.",
            "examples": [
                {
                    "text": "```sqf\nplayer removeOwnedMine SuperMine;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "mine",
                            "description": "`Object` - the mine object"
                        }
                    ],
                    "outline": "unit `removeOwnedMine` mine",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/removeOwnedMine"
        },
        "configuration": {
            "label": "removeOwnedMine",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes given weapon item, including magazine, from the `primaryWeapon`.",
            "examples": [
                {
                    "text": "```sqf\nplayer removePrimaryWeaponItem \"acc_flashlight\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "item",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `removePrimaryWeaponItem` item",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removePrimaryWeaponItem"
        },
        "configuration": {
            "label": "removePrimaryWeaponItem",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes given weapon item, including magazine, from the `secondaryWeapon`.",
            "examples": [
                {
                    "text": "```sqf\nplayer removeSecondaryWeaponItem (secondaryWeaponItems player select 0);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "item",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `removeSecondaryWeaponItem` item",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeSecondaryWeaponItem"
        },
        "configuration": {
            "label": "removeSecondaryWeaponItem",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Remove a simple task from the list of simple tasks.\n**NOTE**: If the `Task` to be removed is a child to some parent task and at the same time the parent to some child task, the child of this task gets orphaned and is listed in the root of Tasks tree (Tasks menu), retaining tree structure of its children.",
            "examples": [
                {
                    "text": "```sqf\nplayer removeSimpleTask _tskKillSpongebob;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "person",
                            "description": "`Object`"
                        },
                        {
                            "name": "task",
                            "description": "`Task`"
                        }
                    ],
                    "outline": "person `removeSimpleTask` task",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/removeSimpleTask"
        },
        "configuration": {
            "label": "removeSimpleTask",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Remove a unit from the list of units available for [Team Switch](https://community.bistudio.com/wiki/Team%20Switch).",
            "examples": [
                {
                    "text": "```sqf\nremoveSwitchableUnit _unit1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`removeSwitchableUnit`  unitName",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/removeSwitchableUnit"
        },
        "configuration": {
            "label": "removeSwitchableUnit",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Remove given member from given team. Effect is local, unless both member and team are local to PC on which command is executed, then effect is global.",
            "examples": [
                {
                    "text": "```sqf\n_team removeTeamMember _teamMember;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "team",
                            "description": "[Team Member](https://community.bistudio.com/wiki/Team%20Member)"
                        },
                        {
                            "name": "member",
                            "description": "[Team Member](https://community.bistudio.com/wiki/Team%20Member)"
                        }
                    ],
                    "outline": "team `removeTeamMember` member",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeTeamMember"
        },
        "configuration": {
            "label": "removeTeamMember",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes uniform from unit.",
            "examples": [
                {
                    "text": "```sqf\nremoveUniform player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`removeUniform` unit",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeUniform"
        },
        "configuration": {
            "label": "removeUniform",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes a UserAction event handler. For a list of available UserAction event handlers, see: [Arma 3: Mission Event Handlers](https://community.bistudio.com/wiki/Arma%203%3A%20Mission%20Event%20Handlers).",
            "examples": [
                {
                    "text": "```sqf\nremoveUserActionEventHandler [\"Reload\", \"Activate\", _reloadUAEH];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "keyName",
                            "description": "`String` - action key name; see [inputAction/actions](https://community.bistudio.com/wiki/inputAction%2Factions)"
                        },
                        {
                            "name": "event",
                            "description": "`String` - event name - see [UserAction Event Handlers](https://community.bistudio.com/wiki/Arma%203%3A%20Event%20Handlers%23UserAction%20Event%20Handlers). Can be one of:\n* \"Activate\"\n* \"Deactivate\"\n* \"Analog\""
                        },
                        {
                            "name": "index",
                            "description": "`Number` - index returned by `addUserActionEventHandler`"
                        }
                    ],
                    "outline": "`removeUserActionEventHandler` [keyName, event, index]",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeUserActionEventHandler"
        },
        "configuration": {
            "label": "removeUserActionEventHandler",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes vest from unit.",
            "examples": [
                {
                    "text": "```sqf\nremoveVest player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`removeVest` unit",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeVest"
        },
        "configuration": {
            "label": "removeVest",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Remove weapon from a unit. The unit must be [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality) to the computer where command is executed. For a global version of this command see `removeWeaponGlobal`.\n\n**Note**: It is possible to create invalid combinations with this command (ie, attempting to remove a weapon that a unit does not possess). When doing so, application behaviour is undefined.",
            "examples": [
                {
                    "text": "```sqf\nplayer removeWeapon \"BAF_L85A2_RIS_SUSAT\";\n```"
                },
                {
                    "text": "```sqf\nAn_2 removeWeapon \"M240_veh\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit or vehicle"
                        },
                        {
                            "name": "weapon",
                            "description": "`String` - weapon class name"
                        }
                    ],
                    "outline": "unit `removeWeapon` weapon",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeWeapon"
        },
        "configuration": {
            "label": "removeWeapon",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Remove attachment linked to a weapon from the vehicle cargo space. \n**WARNING**: This is unofficial documentation. All Information here is as it exists in the Engine. It might not reflect the reality.",
            "examples": [
                {
                    "text": "```sqf\nrearmTruckOne removeWeaponAttachmentCargo [weaponID, creatorID, \"attachment\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - vehicle or ammo box"
                        },
                        {
                            "name": "weaponID",
                            "description": "`Number`"
                        },
                        {
                            "name": "creatorID",
                            "description": "`Number`"
                        },
                        {
                            "name": "attachment",
                            "description": "`String`"
                        }
                    ],
                    "outline": "object `removeWeaponAttachmentCargo` [weaponID,creatorID,attachment]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/removeWeaponAttachmentCargo"
        },
        "configuration": {
            "label": "removeWeaponAttachmentCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Remove weapon from the vehicle cargo space.\n**WARNING**: This is unofficial documentation. All Information here is as it exists in the Engine. It might not reflect the reality.",
            "examples": [
                {
                    "text": "```sqf\nrearmTruckOne removeWeaponCargo [19, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - vehicle or ammo box"
                        },
                        {
                            "name": "weaponID",
                            "description": "`Number`"
                        },
                        {
                            "name": "creatorID",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "object `removeWeaponCargo` [weaponID,creatorID]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/removeWeaponCargo"
        },
        "configuration": {
            "label": "removeWeaponCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Remove a weapon from a unit. An attempt to remove a weapon, which is not in unit's possession, is simply ignored.",
            "examples": [
                {
                    "text": "```sqf\n{\n\t_x removeWeaponGlobal \"Laserdesignator\";\n} forEach allUnits;\n```"
                },
                {
                    "text": "```sqf\n{\n\tif (typeOf _x == \"O_Heli_Attack_02_black_F\") then {\n\t\t_x removeWeaponGlobal \"rockets_Skyfire\";\n\t};\n} forEach vehicles;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit or vehicle"
                        },
                        {
                            "name": "weapon",
                            "description": "`String` - weapon class name"
                        }
                    ],
                    "outline": "unit `removeWeaponGlobal` weapon",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeWeaponGlobal"
        },
        "configuration": {
            "label": "removeWeaponGlobal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes weapon from the turret. Use turret path [-1] for driver's turret.",
            "examples": [
                {
                    "text": "```sqf\n_tank removeWeaponTurret [\"LMG_M200\", [0,0]];\n```"
                },
                {
                    "text": "```sqf\nvehicle player removeWeaponTurret [\"SportCarHorn\", [-1]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "weaponName",
                            "description": "`String`"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` format [Turret Path](https://community.bistudio.com/wiki/Turret%20Path)"
                        }
                    ],
                    "outline": "vehicle `removeWeaponTurret` [weaponName, turretPath]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/removeWeaponTurret"
        },
        "configuration": {
            "label": "removeWeaponTurret",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Shares the target vehicle via datalink to the `Side` center for a given time.",
            "examples": [
                {
                    "text": "```sqf\nblufor reportRemoteTarget [vehicle player, 60];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "side",
                            "description": "`Side`"
                        },
                        {
                            "name": "target",
                            "description": "`Object`"
                        },
                        {
                            "name": "time",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "side `reportRemoteTarget` [target, time]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/reportRemoteTarget"
        },
        "configuration": {
            "label": "reportRemoteTarget",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check if version of application is available. If the current version is older than the required one, a warning message is shown and `false` is returned. \n\n\nVersion of format **Major.Minor**, e.g. **1.30**",
            "examples": [
                {
                    "text": "```sqf\nif !(requiredVersion \"1.09\") exitWith {};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "version",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`requiredVersion` version",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/requiredVersion"
        },
        "configuration": {
            "label": "requiredVersion",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Stops any ongoing camera shake effects. Does not prevent new effects from being created. To disallow new effects altogether, `enableCamShake` should be used.",
            "examples": [
                {
                    "text": "```sqf\nresetCamShake;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`resetCamShake`",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/resetCamShake"
        },
        "configuration": {
            "label": "resetCamShake",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets [ formation direction](https://community.bistudio.com/wiki/formationDirection%20) of a group relative to current direction of the group leader. The group units will change their positions to form new formation if new formation direction is different (approx +/- 15 degrees). Does the same as:\n\n\n```sqf\n_grp setFormDir getDir leader _grp;\n```",
            "examples": [
                {
                    "text": "```sqf\nresetSubgroupDirection myUnit;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - any member of the `Group`"
                        }
                    ],
                    "outline": "`resetSubgroupDirection` unit",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/resetSubgroupDirection"
        },
        "configuration": {
            "label": "resetSubgroupDirection",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Pre-defined variable for the resistance [side](https://community.bistudio.com/wiki/Side).",
            "examples": [
                {
                    "text": "```sqf\n\nif (side _unit == resistance) then\n{\n\thint \"This is a resistance unit!\";\n};\n\n```"
                },
                {
                    "text": "```sqf\nhint format [\"%1\", resistance]; // Returns \"GUER\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`resistance`",
                    "returns": "`Side`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/resistance"
        },
        "configuration": {
            "label": "resistance",
            "grammarType": "reserved-literal"
        }
    },
    {
        "documentation": {
            "description": "Changes the size of the given array. The command does not return new array, it resizes the source array to the desired number of elements.\nIf the new size is bigger than the current size, the new places are filled with `nil`. The {{Link|#Syntax 2|alternative syntax}} allows to fill resized positions with a given value. `Array` and `HashMap` values are copied.",
            "examples": [
                {
                    "text": "```sqf\n\n_arrayNum = [0,1,2,3,4];\n_arrayNum resize 2; // _arrayNum is now [0, 1]\n_arrayNum resize 5; // _arrayNum is now [0, 1, nil, nil, nil]\n\n```"
                },
                {
                    "text": "```sqf\n\nprivate _array = [0, 1, 2];\n_array resize [5, -1]; // _array is now [0, 1, 2, -1, -1]\n\nprivate _array = [0, 1, 2];\n_array resize [1, -1]; // _array is now [0]\n\nprivate _array = [0, 1, 2];\n_array resize [4, \"something\"]; // _array is now [0, 1, 2, \"something\"]\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array`"
                        },
                        {
                            "name": "count",
                            "description": "`Number` - the new array size"
                        }
                    ],
                    "outline": "array `resize` count",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array`"
                        },
                        {
                            "name": "count",
                            "description": "`Number` - the new array size"
                        },
                        {
                            "name": "fill",
                            "description": "`Anything` - value to fill added positions"
                        }
                    ],
                    "outline": "array `resize` [count, fill]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/resize"
        },
        "configuration": {
            "label": "resize",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the resources of a team member. Results are local to the PC on which command was executed.",
            "examples": [
                {
                    "text": "```sqf\nresources teamMember _unit;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "member",
                            "description": "[Team Member](https://community.bistudio.com/wiki/Team%20Member)"
                        }
                    ],
                    "outline": "`resources` member",
                    "returns": "`Array`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/resources"
        },
        "configuration": {
            "label": "resources",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets vehicle as respawnable in MP game. The vehicle will be spawned at the locality and coordinates it was prior to destruction.\nIf respawn type is set to base respawn (type 3) and vehicle respawn marker is provided (respawn_vehicle_SIDEXXX), vehicle will spawn on the marker. The command must be executed where vehicle is `local`. If the vehicle is in respawn queue, as long as the vehicle is `local` it should be possible to update params of the respawning vehicle, i.e change delay, disable respawn, etc.",
            "examples": [
                {
                    "text": "```sqf\ncar respawnVehicle [5, 3]; // 'car' will respawn at the predefined marker for the side after 5 seconds. The unit will respawn 3 times.\n```"
                },
                {
                    "text": "```sqf\ncar respawnVehicle [30]; // 'car' will respawn at the predefined marker for the side after 30 seconds. The unit will respawn an unlimited number of times.\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - transport"
                        },
                        {
                            "name": "respawnDelay",
                            "description": "`Number` - (Optional since 2.18, default -1) delay in seconds between respawns. (-1 to use 3DEN vehicle respawn delay or _respawnVehicleDelay_ from [[Description.ext|description.ext]])"
                        },
                        {
                            "name": "respawnCount",
                            "description": "`Number` - (Optional, default unlimited respawns) how many times to respawn vehicle in total. (since 2.18 -1 unlimited respawns, 0 stop respawning)"
                        },
                        {
                            "name": "deleteOldWreck",
                            "description": "`Boolean` - (Optional, default `false`) - deletes old wreck automatically after vehicle respawns"
                        },
                        {
                            "name": "respawnOnServer",
                            "description": "`Boolean` - (Optional, default `false`) - wreck is always transferred to the server and the new vehicle always respawns on server"
                        },
                        {
                            "name": "respawnFlying",
                            "description": "`Boolean` - (Optional, default `false`) - by default all vehicles placed on the ground, `true` overrides this"
                        },
                        {
                            "name": "respawnUnit",
                            "description": "`Object` - (Optional, default `objNull`) - unit that would be put in the driver seat after vehicle respawns"
                        },
                        {
                            "name": "respawnMode",
                            "description": "`Number` or `String` - (Optional, default -1) - overrides vehicle respawn mode. Available modes are: 2 or \"INSTANT\" and 3 or \"BASE\". -1 use [[Description.ext|description.ext]] value."
                        },
                        {
                            "name": "respawnSide",
                            "description": "`Side` - (Optional, default typical vehicle `side`) - sets respawn side for the purpouse of selecting respawn marker"
                        },
                        {
                            "name": "useRespawnMarkerDir",
                            "description": "`Boolean` - (Optional, default `false`) - respawn vehicle matches respawn marker direction or the old wreck direction. `false` - random direction."
                        }
                    ],
                    "outline": "vehicle `respawnVehicle` [respawnDelay, respawnCount, deleteOldWreck, respawnOnServer, respawnFlying, respawnUnit, respawnMode, respawnSide, useRespawnMarkerDir]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/respawnVehicle"
        },
        "configuration": {
            "label": "respawnVehicle",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Restarts the mission editor camera (if it was deleted by a script,for example).\n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`restartEditorCamera` map",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/restartEditorCamera"
        },
        "configuration": {
            "label": "restartEditorCamera",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Reveals a target to a `group`. If _toWhom_ is a unit, unit's group is considered. If _toWhom_ is a vehicle, vehicle commander's group is considered.  The [knowledge value](https://community.bistudio.com/wiki/knowsAbout) will be set to the highest level any unit of the revealing side has about the revealed target. If the revealing side has _no_ knowledge about the revealed target, the value will be set to 1.\n\n**NOTE**:  The knowledge level can only be increased by this command, not decreased. Use `forgetTarget` first if you need to decrease value.",
            "examples": [
                {
                    "text": "```sqf\n_soldierOne reveal _soldierTwo; // soldierOne knowsAbout information about soldierTwo is updated\n```"
                },
                {
                    "text": "```sqf\nplayer reveal cursorObject; // player knowsAbout information about object under cursor is updated\n```"
                },
                {
                    "text": "```sqf\n_soldierOne reveal [_soldierTwo, 1.5];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "toWhom",
                            "description": "`Object` or `Group` - which receives revealing information"
                        },
                        {
                            "name": "target",
                            "description": "`Object` - which is revealed"
                        }
                    ],
                    "outline": "toWhom `reveal` target",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "toWhom",
                            "description": "`Object` or `Group` - which receives revealing information"
                        },
                        {
                            "name": "target",
                            "description": "`Object` - which is revealed"
                        },
                        {
                            "name": "accuracy",
                            "description": "`Number` - knowledge value, clamped to 0..4 range"
                        }
                    ],
                    "outline": "toWhom `reveal` [target, accuracy]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/reveal"
        },
        "configuration": {
            "label": "reveal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets given mine as known to the side. (Knowledge about a mine is always shared across all units in a side.)",
            "examples": [
                {
                    "text": "```sqf\nwest revealMine _mine;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "side",
                            "description": "`Side`"
                        },
                        {
                            "name": "mine",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "side `revealMine` mine",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/revealMine"
        },
        "configuration": {
            "label": "revealMine",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Reverses given array by reference (modifies the original array, just like `resize`). The alternative syntax can be used to reverse a ANSI [string](https://community.bistudio.com/wiki/String). If Unicode support is desired, see `forceUnicode`.",
            "examples": [
                {
                    "text": "```sqf\n_arr = [1,2,3];\nreverse _arr;\nhint str _arr; // [3,2,1]\n```"
                },
                {
                    "text": "```sqf\n_wordArr = toArray \"gateman\";\nreverse _wordArr;\nhint toString _wordArr; // nametag\n```"
                },
                {
                    "text": "```sqf\nreverse \"treboR\"; // Returns \"Robert\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "`reverse` array",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "string",
                            "description": "`String` - string to be reversed"
                        }
                    ],
                    "outline": "`reverse` string",
                    "returns": "`String` - reversed string"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/reverse"
        },
        "configuration": {
            "label": "reverse",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if mouse vertical axe is inverted.",
            "examples": [
                {
                    "text": "```sqf\nif (reversedMouseY) then { hint \"Dude!\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**reversedMouseY**",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/reversedMouseY"
        },
        "configuration": {
            "label": "reversedMouseY",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a road segment containing given position, `objNull` otherwise. Same as `isOnRoad` only returns the actual road object instead of boolean.",
            "examples": [
                {
                    "text": "```sqf\n_road = roadAt ASLToAGL getPosASL player;\n```"
                },
                {
                    "text": "```sqf\n_isOnRoad = !isNull roadAt player;\n```"
                },
                {
                    "text": "For detecting bridges, for example:\n\n```sqf\ngetModelInfo (roadAt ASLToAGL getPosASL player); // [\"bridgesea_01_f.p3d\", \"a3\\structures_f_exp\\infrastructure\\bridges\\bridgesea_01_f.p3d\", true]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Object` or `Array` - array in format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) (especially on bridges) or {{GVI|arma3|2.00"
                        }
                    ],
                    "outline": "`roadAt` position",
                    "returns": "`Object` - road segment or `objNull`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/roadAt"
        },
        "configuration": {
            "label": "roadAt",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Find the road segments connected to the given road segment.\n**IMPORTANT**: \n* Pedestrian roads such as `**\"TRAIL\"**`s are missing connection information by design, therefore the primary syntax will return empty array for those - use the alternative syntax to return pedestrian roads.\n* Road connection is not bidirectional; e.g road segment Y can be connected to road segment Z, but road segment Z can lack a connection with road segment Y.",
            "examples": [
                {
                    "text": "```sqf\n_road = (player nearRoads 50) select 0;\n_connectedRoads = roadsConnectedTo _road;\n```"
                },
                {
                    "text": "```sqf\n_road = (player nearRoads 50) select 0;\n_connectedRoadsIncPedestrian = roadsConnectedTo [_road, true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "roadSegment",
                            "description": "`Object` - road segment"
                        }
                    ],
                    "outline": "`roadsConnectedTo` roadSegment",
                    "returns": "`Array` of `Object`s - connected road segments"
                },
                {
                    "parameters": [
                        {
                            "name": "roadSegment",
                            "description": "`Object` - road segment"
                        },
                        {
                            "name": "extended",
                            "description": "`Boolean` - (Optional, default `false`) when `true`, performs a more thorough search on top of base behaviour, slower but returns pedestrian and other missing road segments"
                        }
                    ],
                    "outline": "`roadsConnectedTo` [roadSegment, extended]",
                    "returns": "`Array` of `Object`s - connected road segments"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/roadsConnectedTo"
        },
        "configuration": {
            "label": "roadsConnectedTo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns unit description set in the editor and visible on role selection screen in multiplayer.",
            "examples": [
                {
                    "text": "```sqf\n_playerRole = roleDescription player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`roleDescription` unit",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/roleDescription"
        },
        "configuration": {
            "label": "roleDescription",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array of all entities that are attached to the transport with `ropes`. This command is the opposite of `ropeAttachedTo`.\n\n\n[[File:ropeAttachedObjects.jpg|400px]]",
            "examples": [
                {
                    "text": "```sqf\n_cargoArray = ropeAttachedObjects heli1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "ropesOwner",
                            "description": "`Object` - transport from which a single or multiple ropes are originating"
                        }
                    ],
                    "outline": "`ropeAttachedObjects` ropesOwner",
                    "returns": "`Array` - array of attached entities on ropes"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ropeAttachedObjects"
        },
        "configuration": {
            "label": "ropeAttachedObjects",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the owner of the first rope - the transport to which other entities are attached with `ropes`. This command is the opposite of `ropeAttachedObjects`. To return all owners see `ropesAttachedTo`.\n\n\n[[File:ropeAttachedTo.jpg|400px]]",
            "examples": [
                {
                    "text": "```sqf\n_heli = ropeAttachedTo veh1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "cargo",
                            "description": "`Object` - entity attached to the end of the first rope"
                        }
                    ],
                    "outline": "`ropeAttachedTo` cargo",
                    "returns": "`Object` - a transport from which the first rope originates, the rope owner"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ropeAttachedTo"
        },
        "configuration": {
            "label": "ropeAttachedTo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if entity can be attached to a rope end.",
            "examples": [
                {
                    "text": "```sqf\nropeAttachEnabled veh1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "`Object` - entity to check"
                        }
                    ],
                    "outline": "`ropeAttachEnabled` entity",
                    "returns": "`Boolean` - `true` if allowed"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ropeAttachEnabled"
        },
        "configuration": {
            "label": "ropeAttachEnabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Attaches entity to the rope end with optional offset. For detach operation use `ropeDetach`.",
            "examples": [
                {
                    "text": "```sqf\n[veh1, [0,0,0], [0,0,-1]] ropeAttachTo (ropes heli1 select 0);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "`Object` - entity to be attached to the end of rope"
                        },
                        {
                            "name": "toPoint",
                            "description": "`String` or `Array` - (Optional) position for the rope end, either a memory point `String` or relative offset `Array`"
                        },
                        {
                            "name": "ropeEndDownVector",
                            "description": "`String` or `Array` - (Optional, default [0,0,-1]) either a memory point `String` or relative vector `Array`. If `String` is given, then `**ropeEndDownVector**` is calculated from `**toPoint**` towards `**ropeEndDownVector**` memory point"
                        },
                        {
                            "name": "rope",
                            "description": "`Object` - the rope to which entity will be attached to"
                        }
                    ],
                    "outline": "[entity, toPoint, ropeEndDownVector] `ropeAttachTo` rope",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "`Object` - entity to be attached to the end of rope"
                        },
                        {
                            "name": "rope",
                            "description": "`Object` - the rope to which entity will be attached to"
                        }
                    ],
                    "outline": "entity `ropeAttachTo` rope",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ropeAttachTo"
        },
        "configuration": {
            "label": "ropeAttachTo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Cuts the given rope to the specified length. If some entity was attached to the end of the rope, it will be detached. The rope remains attached to its parent transport and if the length is set to 0 or even negative does not get destroyed. Use `ropeDestroy` to remove it completely.**NOTE**: The rope could only be shortened. If the cut length is greater than current rope length, nothing happens",
            "examples": [
                {
                    "text": "```sqf\nropeCut [ropes heli1 select 0, 5];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "rope",
                            "description": "`Object` - rope object obtained from `ropeCreate`"
                        },
                        {
                            "name": "length",
                            "description": "`Number` - length of the rope in meters after the cut"
                        }
                    ],
                    "outline": "`ropeCut` [rope, length]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ropeCut"
        },
        "configuration": {
            "label": "ropeCut",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Destroys the given rope. If the rope is attached to a vehicle, it will be detached and then destroyed.",
            "examples": [
                {
                    "text": "```sqf\nropeDestroy myRope;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "rope",
                            "description": "`Object` - rope object returned by `ropeCreate` command"
                        }
                    ],
                    "outline": "`ropeDestroy` rope",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ropeDestroy"
        },
        "configuration": {
            "label": "ropeDestroy",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Detaches attached object from rope (i.e. detaches rope end from attached to it entity). See `ropeAttachTo` for attach operation.",
            "examples": [
                {
                    "text": "```sqf\nvehicle player ropeDetach myRope;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "attachedObject",
                            "description": "`Object` - entity attached to the end of rope"
                        },
                        {
                            "name": "rope",
                            "description": "`Object` - rope object to which entity is attached"
                        }
                    ],
                    "outline": "attachedObject `ropeDetach` rope",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ropeDetach"
        },
        "configuration": {
            "label": "ropeDetach",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns start and end positions for the given [ rope](https://community.bistudio.com/wiki/ropeCreate%20). If command fails, empty array `**[]**` is returned.",
            "examples": [
                {
                    "text": "```sqf\n_ends = ropeEndPosition (ropes heli1 select 0);\n_start = _ends select 0;\n_end = _ends select 1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "rope",
                            "description": "`Object` - rope object"
                        }
                    ],
                    "outline": "`ropeEndPosition` rope",
                    "returns": "`Array` - array in format [startPos, endPos], where:\n* startPos: `Array` - rope start position in format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL)\n* endPos: `Array` - rope end position in format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ropeEndPosition"
        },
        "configuration": {
            "label": "ropeEndPosition",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return rope length in meters (set by `ropeCreate`, `ropeCut`, `ropeUnwind`).\n**NOTE**: Returned rope length will remain the same, even if the rope is stretched.",
            "examples": [
                {
                    "text": "```sqf\n_length = ropeLength (ropes heli1 select 0);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "rope",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`ropeLength` rope",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ropeLength"
        },
        "configuration": {
            "label": "ropeLength",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns all ropes attached to a ropes owner transport vehicle.",
            "examples": [
                {
                    "text": "```sqf\nhint str (ropes vehicle player);\n```"
                },
                {
                    "text": "```sqf\n_rope1 = (ropes heli1) select 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "ropesOwner",
                            "description": "`Object` - a transport from which the ropes originate"
                        }
                    ],
                    "outline": "`ropes` ropesOwner",
                    "returns": "`Array` of `Object`s - array of the actual rope objects"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ropes"
        },
        "configuration": {
            "label": "ropes",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the owners of all ropes attached to the cargo - the transports to which other entities are attached with `ropes`.",
            "examples": [
                {
                    "text": "```sqf\n\nr1 = ropeCreate [car1, [0,0,0], car3, [0,0,0], 10];\nr2 = ropeCreate [car2, [0,0,0], car3, [0,0,0], 10];\nropesAttachedTo car3; // [car1,car2]\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "cargo",
                            "description": "`Object` - entity attached to the ends of the ropes"
                        }
                    ],
                    "outline": "`ropesAttachedTo` cargo",
                    "returns": "`Array` of `Object`s which are transports from which the ropes originate, the ropes owners"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ropesAttachedTo"
        },
        "configuration": {
            "label": "ropesAttachedTo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns provided rope's segments. To return the rope parent from a rope segment, use `objectParent` (Since Arma 3 2.12)",
            "examples": [
                {
                    "text": "```sqf\nprivate _segments = ropeSegments _myRope;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "rope",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`ropeSegments` rope",
                    "returns": "`Array` of `Object`s - the rope's segments"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ropeSegments"
        },
        "configuration": {
            "label": "ropeSegments",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Increases or decreases the rope length by the given amount. Use relative parameter for changing rope length +/- from current length.\n**NOTE**: Rope length can be in range 0.5..100 metres.",
            "examples": [
                {
                    "text": "```sqf\nropeUnwind [ropes heli1 select 0, 3, 10]; // set rope length to 10m at 3m/s\n```"
                },
                {
                    "text": "```sqf\nropeUnwind [ropes heli1 select 0, 3, -5, true]; // decrease rope length by 5m at 3m/s\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "rope",
                            "description": "`Object` - rope object"
                        },
                        {
                            "name": "speed",
                            "description": "`Number` - animation speed in m/s with which to lengthen or shorten the rope, in range 0.01..20"
                        },
                        {
                            "name": "length",
                            "description": "`Number` - the amount of length change in meters, in range: 0.1..100"
                        },
                        {
                            "name": "relative",
                            "description": "`Boolean` - (Optional) `true` will add or subtract given length from current rope length, `false` will resize the rope to the given length"
                        }
                    ],
                    "outline": "`ropeUnwind` [rope, speed, length, relative]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/ropeUnwind"
        },
        "configuration": {
            "label": "ropeUnwind",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `false` if rope length changing animation is in progress. Returns `true` if animation is done.",
            "examples": [
                {
                    "text": "```sqf\nwaitUntil { ropeUnwound (ropes heli1 select 0) };\nhint \"Unwinding Complete\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "rope",
                            "description": "`Object` - given rope object"
                        }
                    ],
                    "outline": "`ropeUnwound` rope",
                    "returns": "`Boolean` - `true` if unwinding is complete"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/ropeUnwound"
        },
        "configuration": {
            "label": "ropeUnwound",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns force produced by rotors.\n{{Feature|afm}}",
            "examples": [
                {
                    "text": "```sqf\n_rotorForces = rotorsForcesRTD _taru; // Returns [[-465.981,351.941,45960.5],[-469.079,397.451,46933.3]]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "helicopter",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`rotorsForcesRTD` helicopter",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/rotorsForcesRTD"
        },
        "configuration": {
            "label": "rotorsForcesRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns rotors RPM. {{Feature|afm}}",
            "examples": [
                {
                    "text": "```sqf\n_mh9_main = (rotorsRpmRTD _MH9) select 0;//main rotor\n_mh9_tail = (rotorsRpmRTD _MH9) select 1;//tail rotor\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "RTD_helicopter",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`rotorsRpmRTD` RTD_helicopter",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/rotorsRpmRTD"
        },
        "configuration": {
            "label": "rotorsRpmRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Rounds the provided value to the closest integer.",
            "examples": [
                {
                    "text": "```sqf\nround 5.25; // returns 5\n```"
                },
                {
                    "text": "```sqf\nround -5.25; // returns -5\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "value",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`round` value",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/round"
        },
        "configuration": {
            "label": "round",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Fades in mission screen and re-executes [[Event Scripts#init.sqf|init.sqf]] and [[Event Scripts#init.sqs|init.sqs]] scripts. In [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor) the code inside the \"Init\" mission attribute is executed.",
            "examples": [
                {
                    "text": "```sqf\nrunInitScript;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`runInitScript`",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/runInitScript"
        },
        "configuration": {
            "label": "runInitScript",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "[[File:safezone.jpg|right|600px]]\nReturns the height of the screen in screen measurement units.\nTaken from top left corner of the default viewport (0,0) of the screen and going in the same direction as the Y axis, the value will be positive but resulting Y will end up beyond the bottom border.\nTherefore in order to calculate Y of the bottom screen border, the length of `safeZoneY` must be subtracted from `safeZoneH`, but because it is negative, it must be added instead.\n<sqf inline>_screenBottomBorderY = safeZoneH + safeZoneY. The measurement units depend on the current screen resolution `getResolution`. See also `SafeZone`.",
            "examples": [
                {
                    "text": "```sqf\n_screenHeight = safeZoneH;\n```"
                },
                {
                    "text": "```sqf\n_screenTopBorderY = safeZoneY;\n_screenBottomBorderY = safeZoneH + safeZoneY;\n```"
                },
                {
                    "text": "Create control 50% wide, 30% tall, centered on screen:\n\n```sqf\n\nprivate _ctrl = findDisplay 46 createDisplay \"RscDisplayEmpty\" ctrlCreate [\"RscText\", -1];\n_ctrl ctrlSetBackgroundColor [1,0,0,0.5];\nprivate _ctrlWidth = 0.5 * safeZoneW; // 50% of screen width\nprivate _ctrlHeight = 0.3 * safeZoneH; // 30% of screen height\n_ctrl ctrlSetPositionW _ctrlWidth;\n_ctrl ctrlSetPositionH _ctrlHeight;\n_ctrl ctrlSetPositionX ((safeZoneW - _ctrlWidth) / 2 + safeZoneX); // center it horizontally\n_ctrl ctrlSetPositionY ((safeZoneH - _ctrlHeight) / 2 + safeZoneY); // center it vertically\n_ctrl ctrlCommit 0;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`safeZoneH`",
                    "returns": "`Number` - height of the screen in screen measurement units"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/safeZoneH"
        },
        "configuration": {
            "label": "safeZoneH",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "[[File:safezone.jpg|right|600px]]\nReturns the width of the screen in screen measurement units.\nTaken from top left corner of the default viewport (0,0) of the screen and going in the same direction as the X axis, the value will be positive but resulting X will end up beyond the right border.\nTherefore in order to calculate X of the right screen border, the length of `safeZoneX` must be subtracted from `safeZoneW`, but because it is negative, it must be added instead.\n<sqf inline>_screenRightBorderX = safeZoneW + safeZoneX. The measurement units depend on the current screen resolution `getResolution`. See also `SafeZone`.",
            "examples": [
                {
                    "text": "```sqf\n_screenWidth = safeZoneW;\n```"
                },
                {
                    "text": "```sqf\n\n_screenLeftBorderX = safeZoneX;\n_screenRightBorderX = safeZoneW + safeZoneX;\n\n```"
                },
                {
                    "text": "Create control 50% wide, 30% tall, centered on screen:\n\n```sqf\n\nprivate _ctrl = findDisplay 46 createDisplay \"RscDisplayEmpty\" ctrlCreate [\"RscText\", -1];\n_ctrl ctrlSetBackgroundColor [1,0,0,0.5];\nprivate _ctrlWidth = 0.5 * safeZoneW; // 50% of screen width\nprivate _ctrlHeight = 0.3 * safeZoneH; // 30% of screen height\n_ctrl ctrlSetPositionW _ctrlWidth;\n_ctrl ctrlSetPositionH _ctrlHeight;\n_ctrl ctrlSetPositionX ((safeZoneW - _ctrlWidth) / 2 + safeZoneX); // center it horizontally\n_ctrl ctrlSetPositionY ((safeZoneH - _ctrlHeight) / 2 + safeZoneY); // center it vertically\n_ctrl ctrlCommit 0;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`safeZoneW`",
                    "returns": "`Number` - screen width in screen measurement units"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/safeZoneW"
        },
        "configuration": {
            "label": "safeZoneW",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns absolute `safeZoneW` including all monitors.\n\n[[File:UI_12-3.jpg|600px]]",
            "examples": [
                {
                    "text": "```sqf\n_szW = safeZoneWAbs;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`safeZoneWAbs`",
                    "returns": "`Number` - screen width including multiple monitors in screen measurement units"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/safeZoneWAbs"
        },
        "configuration": {
            "label": "safeZoneWAbs",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "[[File:safezone.jpg|right|600px]] Returns the X of the left border of the screen, which is also a distance in screen measurement units from top left corner of the default viewport (0,0) of the screen to the left border of the screen.\nSince it is going in opposite way of the X axis, <u>the value is negative</u>. The measurement units depend on the current screen resolution `getResolution`. See also `SafeZone`.",
            "examples": [
                {
                    "text": "```sqf\n_screenLeftBorderX = safeZoneX; // returns a float value < 0\n```"
                },
                {
                    "text": "Create control 50% wide, 30% tall, centered on screen:\n\n```sqf\n\nprivate _ctrl = findDisplay 46 createDisplay \"RscDisplayEmpty\" ctrlCreate [\"RscText\", -1];\n_ctrl ctrlSetBackgroundColor [1,0,0,0.5];\nprivate _ctrlWidth = 0.5 * safeZoneW; // 50% of screen width\nprivate _ctrlHeight = 0.3 * safeZoneH; // 30% of screen height\n_ctrl ctrlSetPositionW _ctrlWidth;\n_ctrl ctrlSetPositionH _ctrlHeight;\n_ctrl ctrlSetPositionX ((safeZoneW - _ctrlWidth) / 2 + safeZoneX); // center it horizontally\n_ctrl ctrlSetPositionY ((safeZoneH - _ctrlHeight) / 2 + safeZoneY); // center it vertically\n_ctrl ctrlCommit 0;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`safeZoneX`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/safeZoneX"
        },
        "configuration": {
            "label": "safeZoneX",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns absolute `safeZoneX` including all monitors. \n\n[[File:UI_12-3.jpg|600px]]",
            "examples": [
                {
                    "text": "```sqf\n_szX = safeZoneXAbs;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`safeZoneXAbs`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/safeZoneXAbs"
        },
        "configuration": {
            "label": "safeZoneXAbs",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "[[File:safezone.jpg|right|600px]] Returns the Y of the top border of the screen, which is also a distance in screen measurement units from top left corner of the default viewport (0,0) of the screen to the top border of the screen.\nSince it is going in opposite way of the Y axis, <u>the value is negative</u>. The measurement units depend on the current screen resolution `getResolution`. See also `SafeZone`.",
            "examples": [
                {
                    "text": "```sqf\n_screenTopBorderY = safeZoneY; // returns a float value < 0\n```"
                },
                {
                    "text": "Create control 50% wide, 30% tall, centered on screen:\n\n```sqf\n\nprivate _ctrl = findDisplay 46 createDisplay \"RscDisplayEmpty\" ctrlCreate [\"RscText\", -1];\n_ctrl ctrlSetBackgroundColor [1,0,0,0.5];\nprivate _ctrlWidth = 0.5 * safeZoneW; // 50% of screen width\nprivate _ctrlHeight = 0.3 * safeZoneH; // 30% of screen height\n_ctrl ctrlSetPositionW _ctrlWidth;\n_ctrl ctrlSetPositionH _ctrlHeight;\n_ctrl ctrlSetPositionX ((safeZoneW - _ctrlWidth) / 2 + safeZoneX); // center it horizontally\n_ctrl ctrlSetPositionY ((safeZoneH - _ctrlHeight) / 2 + safeZoneY); // center it vertically\n_ctrl ctrlCommit 0;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`safeZoneY`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/safeZoneY"
        },
        "configuration": {
            "label": "safeZoneY",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Saves the current state of entities' inventory to the [[Mission.sqm]].",
            "examples": [
                {
                    "text": "```sqf\nsave3DENInventory [_soldier1, _soldier2];\n```"
                },
                {
                    "text": "```sqf\nsave3DENInventory [11234, 21251];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entities",
                            "description": "`Array` of [Eden Entity](https://community.bistudio.com/wiki/Eden%20Entity) or [Eden ID](https://community.bistudio.com/wiki/Eden%20ID)"
                        }
                    ],
                    "outline": "`save3DENInventory` entities",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/save3DENInventory"
        },
        "configuration": {
            "label": "save3DENInventory",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Saves current 3DEN preferences into .3den.Arma3Profile file.",
            "examples": [
                {
                    "text": "```sqf\n\"Preferences\" set3DENMissionAttribute [\"SaveBinarized\", true];\nsave3DENPreferences;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`save3DENPreferences`",
                    "returns": "`Boolean` - `true` on success"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/save3DENPreferences"
        },
        "configuration": {
            "label": "save3DENPreferences",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Autosaves the game (used for Retry). The saving is not started immediately, the request for autosave is made instead. To check the status of the request, use `isSaving`. The game can then be loaded from the last autosave with `loadGame`. Will not save if the player is [ null](https://community.bistudio.com/wiki/objNull%20) or dead.\n**Arma 3**: Since **(Arma 3)** a `**[[Arma 3: Scripted Event Handlers#Events | \"OnSaveGame\"]]**` [ scripted event handler](https://community.bistudio.com/wiki/BIS_fnc_addScriptedEventHandler%20) is available.",
            "examples": [
                {
                    "text": "```sqf\nsaveGame;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`saveGame`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/saveGame"
        },
        "configuration": {
            "label": "saveGame",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Saves units's identity to [[Objects.sav]] file in campaign directory as entry name.",
            "examples": [
                {
                    "text": "```sqf\n_successful = player saveIdentity \"playerid\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "name",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `saveIdentity` name",
                    "returns": "`Boolean` - `true` if successful, otherwise `false`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/saveIdentity"
        },
        "configuration": {
            "label": "saveIdentity",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Saves joysticks key mappings into the joysticks.cfg file. Engine add these joysticks to the Joystick Scheme mapping dialog in options controls section.",
            "examples": [
                {
                    "text": "```sqf\nsaveJoysticks;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`saveJoysticks`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/saveJoysticks"
        },
        "configuration": {
            "label": "saveJoysticks",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "`missionProfileNamespace` provides long-term storage solution for mission variables.\nWhen this namespace has variables set with `setVariable` and is saved, the variables are saved into `**_`missionName`_.vars**` file into the current player's `profileName` folder.\nNext time when the same mission is loaded by the client with the same player profile, the saved variables can be read normally with `getVariable` command.\nThis way each mission maker can create persistent data that is both mission and player profile specific. The file is only created when the save operation is invoked with this command.\n\n\nIt is also possible to share the same mission profile variables between several missions.\nTo override the default behaviour, create a `**missionGroup**` entry in [[Description.ext#missionGroup|Description.ext]], for example <syntaxhighlight lang=\"cpp\" inline>missionGroup = \"TAG_MyMissionCollectionName\";</syntaxhighlight>.\nThis will create `**TAG_MyMissionCollectionName.vars**` file instead of the default-named one, which would be loaded into every mission with a matching `**missionGroup**` entry.",
            "examples": [
                {
                    "text": "```sqf\nsaveMissionProfileNamespace;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`saveMissionProfileNamespace`",
                    "returns": "`Boolean` - `true` in case of success, `false` otherwise (e.g trying to save in [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor) or trying to save into existing save file but the file wasn't loaded yet)"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/saveMissionProfileNamespace"
        },
        "configuration": {
            "label": "saveMissionProfileNamespace",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Save the current overlay.\n**NOTE**: Some Old Editor Command",
            "examples": [
                {
                    "text": "```sqf\nsaveOverlay _map;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`saveOverlay` map",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/saveOverlay"
        },
        "configuration": {
            "label": "saveOverlay",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Saves all variables stored in `profileNamespace` to the active `Profile`.\n**NOTE**: This command should be used when it is likely that the game will not be closed the usual way (e.g. via {{Controls|Alt|F4}}) or when the data is important and must not be lost due to a game crash.\n**WARNING**: \n* This command triggers a file operation. As file operations are slow (even on SSDs), it is not recommended to use this command too frequently (i.e. several times per second).\n* Do not save large amounts of data to the profile; the larger the profile file gets, the slower it loads!\n* The `profileNamespace` is saved automatically when the game is closed.\n\n{{Feature|tkoh|Heliport status, used in the Career mode for example, is stored in the file that is modified by this command, so be mindful of this to avoid losing data and progress.}}",
            "examples": [
                {
                    "text": "```sqf\nprofileNamespace setVariable [\"TAG_lastPlayerLocation\", getPosASL player];\nsaveProfileNamespace; // Optional since namespace is saved when game is closed\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`saveProfileNamespace`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/saveProfileNamespace"
        },
        "configuration": {
            "label": "saveProfileNamespace",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Saves object's properties to [[Objects.sav]] file in campaign directory as entry name.",
            "examples": [
                {
                    "text": "```sqf\nplayer saveStatus \"playerstate\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "name",
                            "description": "`String`"
                        }
                    ],
                    "outline": "object `saveStatus` name",
                    "returns": "`Boolean` - `true` if successful, otherwise `false`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/saveStatus"
        },
        "configuration": {
            "label": "saveStatus",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Save variable value into the campaign space.\nThis variable is available to all following missions in the campaign.",
            "examples": [
                {
                    "text": "```sqf\nsaveVar \"varOne\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "varname",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`saveVar` varname",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/saveVar"
        },
        "configuration": {
            "label": "saveVar",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check if saving the game is enabled.\n**Arma 3**: If saving is disabled by [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor) mission attribute, this command will still return `true`.",
            "examples": [
                {
                    "text": "```sqf\n\nif (savingEnabled) then\n{\n\thint \"Saving is enabled!\";\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`savingEnabled`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/savingEnabled"
        },
        "configuration": {
            "label": "savingEnabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Make unit say given sound. The sound is defined in [[Description.ext#CfgSounds|CfgSounds]].\nIf the [unit](https://community.bistudio.com/wiki/Object%23Unit) is a [person](https://community.bistudio.com/wiki/Object%23Person), it will also perform the corresponding lipsync effect provided an appropriate [[Lip File Format|.lip file]] has been [created](https://community.bistudio.com/wiki/WaveToLip) for this sound.\n\n* A dead or non-existent unit obviously cannot say anything.\n* If the camera is not within given range, title is not shown and the sound will not be heard.\n* See also `playSound` in order to play a sound wherever the [[cameraOn|camera/player]] is.\n\n**NOTE**: `say` will mimic either `say2D` or `say3D` depending on whether it is executed in a cutscene or in a game scene.",
            "examples": [
                {
                    "text": "```sqf\n(units player select 1) say [\"whisper1\", 5];\n```"
                },
                {
                    "text": "```sqf\nplayer say \"scuba_breath\"; // Arma 3 vanilla sound\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "from",
                            "description": "`Object` or `Array` of `Object`s\n* `Object` - the sound source\n* `Array` - format [from, to]:\n** from: `Object` - sound source\n** to: `Object` - target"
                        },
                        {
                            "name": "sound",
                            "description": "`String` or `Array`\n* `String` - class name of the sound to be played. Defined in CfgSounds including [[Description.ext]]\n* `Array` - format [sound, maxTitlesDistance, speed]:\n** sound: `String` - class name of the sound to be played. Defined in CfgSounds including [[Description.ext]]\n** maxTitlesDistance: `Number` (Optional, default 100) - max. distance in meters at which the sound can be heard\n** speed: `Number` (Optional, default 1) - pitch of the sound"
                        }
                    ],
                    "outline": "from `say` sound",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/say"
        },
        "configuration": {
            "label": "say",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Plays given sound in 2D.",
            "examples": [
                {
                    "text": "```sqf\nplayer say2D \"HelloThere\";\n```"
                },
                {
                    "text": "```sqf\n[player, _officer] say2D [\"HelloThere\", 50, 0.9];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "from",
                            "description": "`Object` or `Array` of `Object`s\n* `Object` - the sound source\n* `Array` - format [from, to]:\n** from: `Object` - sound source\n** to: `Object` - target"
                        },
                        {
                            "name": "sound",
                            "description": "`String` or `Array`\n* `String` - class name of the sound to be played. Defined in CfgSounds including [[Description.ext]]\n* `Array` - format [sound, maxTitlesDistance, speed]:\n** sound: `String` - class name of the sound to be played. Defined in CfgSounds including [[Description.ext]]\n** maxTitlesDistance: `Number` (Optional, default 100) - max. distance in meters at which the sound can be heard\n** speed: `Number` (Optional, default 1) - pitch of the sound"
                        }
                    ],
                    "outline": "from `say2D` sound",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/say2D"
        },
        "configuration": {
            "label": "say2D",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Lets an object say given sound in 3D space.\nThis allows broadcasting of positional music or sound from a source, without having to script a fade sound or music command.\nCompare this with `say2D` which will always play a sound at the location of the player after he has been in the vicinity of a broadcasting sound.\nSound is defined in {{Link|Description.ext#CfgSounds|\"CfgSounds\"}} of the [[Description.ext]] or main config.\n\n**NOTE**: \n* an object can only \"say\" **one** sound at a time\n* in order to stop a `say3D` sound:\n** delete the returned **sound source** with `deleteVehicle`, or\n** kill the **sound source** with e.g `setDamage`.\n* prior to **(Arma 3)**, the **sound source** object was not returned by the command, so the **from** object had to be deleted instead (see Examples [2](https://community.bistudio.com/wiki/%23Example%202) and [3](https://community.bistudio.com/wiki/%23Example%203)).\n* forcing the speed of sound simulation:\n** may delay the queued sound to play right after the previous sound, even if the second sound does not simulate sound delay (e.g sound 1 plays with a 5s delay, ends, _then_ sound 2 plays)\n** if the queued sound uses speed of sound simulation, it will be delayed from the end of the first sound (they will not follow \"as expected\")\n** makes the _offset_ parameter ignored.",
            "examples": [
                {
                    "text": "All possible combinations:\n\n```sqf\n\nhelicopter1 say3D \"FortunateSon\";\nhelicopter1 say3D [\"FortunateSon\", 500, 1, 0, 0, true];\n[helicopter1, player] say3D \"FortunateSon\";\n[helicopter1, player] say3D [\"FortunateSon\", 500, 1, 0, 0, true];\n\n```"
                },
                {
                    "text": "Workaround for dead bodies:\n\n```sqf\n\nprivate _dummy = \"#particlesource\" createVehicleLocal ASLToAGL getPosWorld _corpse;\n_dummy say3D \"whatever\";\n_dummy spawn {\n\tsleep 5; // at least the length of your sound\n\tdeleteVehicle _this;\n};\n\n```"
                },
                {
                    "text": "```sqf\n\n// Since {{arma3}} v2.00, the sound source is returned and can be deleted directly\n_soundSrc = helicopter1 say3D \"Fortunateson\";\nsleep 5;\ndeleteVehicle _soundSrc; // stop the sound after ~5 seconds\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "from",
                            "description": "`Object` or `Array` of `Object`s\n* `Object` - origin of the sound\n* `Array` - format is [from, to] where:\n** from: `Object` - origin of the sound\n** to: `Object` - target"
                        },
                        {
                            "name": "sound",
                            "description": "`String` or `Array`\n* `String` - classname of the sound to be played. Defined in `CfgSounds` including [[Description.ext]]\n* `Array` format [sound, maxDistance, pitch, isSpeech, offset, simulateSpeedOfSound] where:\n** sound: `String` - classname of the sound to be played. Defined in [[Description.ext#CfgSounds|CfgSounds]] including [[Description.ext]]\n** maxDistance: `Number` - (Optional, default 100) maximum distance in meters at which the sound can be heard\n** pitch: `Number` - (Optional, default 1) pitch of the sound\n** {{GVI|arma3|1.92"
                        }
                    ],
                    "outline": "from `say3D` sound",
                    "returns": "`Object` - the sound source (was `Nothing` before {{GVI|arma3|2.00"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/say3D"
        },
        "configuration": {
            "label": "say3D",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Defines name of current scope. Name is visible in debugger, and name is also used as reference in some commands like `breakOut` and `breakTo`.\nScope name should be defined only once per scope. Trying to set a different name on the scope that has already defined scope name will result in error.",
            "examples": [
                {
                    "text": "```sqf\n\nscopeName \"main\";\nwhile { sleep 0.1; true } do\n{\n\tscopeName \"loop1\";\n\n\twhile { sleep 0.1; true } do\n\t{\n\t\tscopeName \"loop2\";\n\n\t\t// ...\n\t};\n};\n\n```"
                },
                {
                    "text": "```sqf\n\nif (true) then\n{\n\tscopeName \"mainScope\";\n\tscopeName \"main_scope\"; // error\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "name",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`scopeName` name",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/scopeName"
        },
        "configuration": {
            "label": "scopeName",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the person's score in MP.",
            "examples": [
                {
                    "text": "```sqf\n_pScore = score player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`score` unit",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/score"
        },
        "configuration": {
            "label": "score",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns score for the given [side](https://community.bistudio.com/wiki/Side). MP Only.",
            "examples": [
                {
                    "text": "```sqf\n_number = scoreSide west;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "side",
                            "description": "`Side`"
                        }
                    ],
                    "outline": "`scoreSide` side",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/scoreSide"
        },
        "configuration": {
            "label": "scoreSide",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Captures a screenshot and stores it to given filename. <u>PNG is the only available format</u> and the file must have .png extension.\n\n\nThe file is saved into _Screenshots_ folder in the `Profile` directory. The folder is by default limited to 250 MB to prevent abuse.\n\nTo increase the limit, add the following line at the end of the profile file:\n```cpp\nmaxScreenShotFolderSizeMB = 2000; // 2 GB\n```",
            "examples": [
                {
                    "text": "```sqf\nscreenshot \"\";\n```"
                },
                {
                    "text": "```sqf\nscreenshot \"testFile.png\";\n```"
                },
                {
                    "text": "The following code will result in the screenshot being placed in `**\\Documents\\Arma 3\\Screenshots\\**any\\where\\you\\want.png****`\n\n```sqf\nscreenshot \"any\\where\\you\\want.png\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "filename",
                            "description": "`String` - desired path and name relative to `**&lt;PROFILEDIR&gt;\\Screenshots\\**` (see `Profile`).\n\nIf empty string \"\" used, the filename will be autogenerated in format: `**YYYY_MM_DD_hh_mm_ss.png**`"
                        }
                    ],
                    "outline": "`screenshot` filename",
                    "returns": "`Boolean` - `true` if success"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/screenshot"
        },
        "configuration": {
            "label": "screenshot",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the position on landscape ([PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL)) corresponding to the given point on screen (in UI coordinates). \n**NOTE**:  This command performs an intersection with the ground/water surface, from the camera position along the `screenToWorldDirection` vector up to `**viewDistance**` for terrain intersection and `**2 * viewDistance**` for water intersection. In other words, it's similar to doing: \n\n```sqf\n\nprivate _p1 = AGLtoASL positionCameraToWorld [0,0,0];                  // camera position ASL\nprivate _vector = screenToWorldDirection_screenPos;                      // \"aim\" vector\nprivate _p2 = _p1 vectorAdd (_vector vectorMultiply viewDistance * 2); // the ray doesn't go beyond 2 * view distance\nASLtoAGL terrainIntersectAtASL [_p1, _p2]\n\n```",
            "examples": [
                {
                    "text": "```sqf\n_wPos = screenToWorld [0.5, 0.5];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "screen",
                            "description": "`Array` - screen position [x,y] (see `SafeZone` for more info)"
                        }
                    ],
                    "outline": "`screenToWorld` screen",
                    "returns": "`Array` - [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL), world position on surface [x,y,0]"
                },
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object` - camera object"
                        },
                        {
                            "name": "position",
                            "description": "`Array` - screen position [x,y] (see `SafeZone` for more info)"
                        }
                    ],
                    "outline": "camera `screenToWorld` position",
                    "returns": "`Array` - [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL), world position on surface [x,y,0]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/screenToWorld"
        },
        "configuration": {
            "label": "screenToWorld",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the 3D vector in world corresponding to the given point on the screen (in UI coordinates), as if the vector was aiming from the camera to the screen position.",
            "examples": [
                {
                    "text": "```sqf\nprivate _vec = screenToWorldDirection [0.5, 0.5]; // a vector pointing to the front of the camera\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "screen",
                            "description": "`Array` - screen position [x,y] (see `SafeZone` for more info)"
                        }
                    ],
                    "outline": "`screenToWorldDirection` screen",
                    "returns": "`Array` - `Vector3D` world vector"
                },
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object` - camera object"
                        },
                        {
                            "name": "position",
                            "description": "`Array` - screen position [x,y] (see `SafeZone` for more info)"
                        }
                    ],
                    "outline": "camera `screenToWorldDirection` position",
                    "returns": "`Array` - `Vector3D` world vector"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/screenToWorldDirection"
        },
        "configuration": {
            "label": "screenToWorldDirection",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check if a script is finished running using the [Script Handle](https://community.bistudio.com/wiki/Script%20Handle) returned by `execVM` or `spawn`.",
            "examples": [
                {
                    "text": "```sqf\n\n_scriptHandle = [\"arguments\"] execVM \"scriptname.sqf\";\nwaitUntil { scriptDone _scriptHandle };\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "handle",
                            "description": "[Script Handle](https://community.bistudio.com/wiki/Script%20Handle) - handle returned by `spawn` or `execVM`"
                        }
                    ],
                    "outline": "`scriptDone` handle",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/scriptDone"
        },
        "configuration": {
            "label": "scriptDone",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Assign a user friendly name to the [VM script](https://community.bistudio.com/wiki/Script%20Handle) this command is executed from.\n**IMPORTANT**: Once a name is assigned, it cannot be changed.",
            "examples": [
                {
                    "text": "```sqf\nscriptName \"leetScript.sqf\";\n```"
                },
                {
                    "text": "```sqf\nscriptName format [\"%1ARTY\\data\\scripts\\ARTY_sadarmDeploy.sqf (_this: %1)\", _this];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "name",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`scriptName` name",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/scriptName"
        },
        "configuration": {
            "label": "scriptName",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "A non-existing or [completed](https://community.bistudio.com/wiki/scriptDone) [Script Handle](https://community.bistudio.com/wiki/Script%20Handle). To compare non-existent scripts use `isNull` or `isEqualTo`:\n\n```sqf\n\nscriptNull == scriptNull;\t\t\t// ERROR! == cannot be used with script object\nisNull scriptNull;\t\t\t\t\t// true\nscriptNull isEqualTo scriptNull;\t// true\n\n```",
            "examples": [
                {
                    "text": "Wait until previous script is finished before starting a new one:\n\n```sqf\n\n0 spawn\n{\n\t_script = scriptNull;\n\tfor \"_i\" from 1 to 10 do\n\t{\n\t\twaitUntil { isNull _script };\n\t\t_script = _i spawn\n\t\t{\n\t\t\thint format [\"script %1 started\", _this];\n\t\t\tsleep 1;\n\t\t\thint format [\"script %1 finished\", _this];\n\t\t\tsleep 0.2;\n\t\t};\n\t};\n};\n\n```"
                },
                {
                    "text": "```sqf\n\nif (scriptDone (_obj getVariable [\"TAG_objScript\", scriptNull])) then\n{\n\t_scriptHandle = _obj spawn { waitUntil { damage _this > 0.9 }; hint \"Critical Damage!\"; };\n\t_obj setVariable [\"TAG_objScript\", _scriptHandle];\n};\n\n```"
                },
                {
                    "text": "```sqf\nstr scriptNull; // <NULL-script>\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`scriptNull`",
                    "returns": "[Script Handle](https://community.bistudio.com/wiki/Script%20Handle) - NULL script"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/scriptNull"
        },
        "configuration": {
            "label": "scriptNull",
            "grammarType": "null-literal"
        }
    },
    {
        "documentation": {
            "description": "Return the current state of given Scud launcher.",
            "examples": [
                {
                    "text": "```sqf\nwaitUntil { sleep 1; scudState _scud > 2 };\nguba say \"MasterPlanCompletion\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "scudName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`scudState` scudName",
                    "returns": "`Number` - can be one of:\n* 0 - No activity\n* 1 - Launch preparation\n* 2 - Launch prepared\n* 3 - Ignition\n* 4 - Launched"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/scudState"
        },
        "configuration": {
            "label": "scudState",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the name of a unit's secondary weapon (launcher). To detect the weapon which is **currently** being used by the unit use `currentWeapon`.",
            "examples": [
                {
                    "text": "```sqf\nprivate _secondaryWeapon = secondaryWeapon player;\n```"
                },
                {
                    "text": "```sqf\nhint secondaryWeapon player; // \"launch_NLAW_F\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`secondaryWeapon` unit",
                    "returns": "`String` - class name of the secondary weapon or <sqf inline>\"\" if none available"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/secondaryWeapon"
        },
        "configuration": {
            "label": "secondaryWeapon",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array with all items assigned to the `secondaryWeapon` except magazines. Use `secondaryWeaponMagazine` command for the latter. This command is used for infantry weapons only.",
            "examples": [
                {
                    "text": "```sqf\nsecondaryWeaponItems player; //[\"\",\"\",\"\",\"\"]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`secondaryWeaponItems` unit",
                    "returns": "`Array` -  [silencer, laserpointer/flashlight, optics, bipod]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/secondaryWeaponItems"
        },
        "configuration": {
            "label": "secondaryWeaponItems",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Collects all loaded `magazines` from all `secondaryWeapon` muzzles and returns them in `Array`, otherwise it returns []. This command is used for infantry weapons only.",
            "examples": [
                {
                    "text": "```sqf\nhint str secondaryWeaponMagazine player; //[\"NLAW_F\"]\n```"
                },
                {
                    "text": "```sqf\n\n_array = secondaryWeaponMagazine player;\nif (count _array > 0) then {\n\thint (\"Secondary weapon is loaded with \" + (_array select 0) + \"!\");\n} else {\n\tif (secondaryWeapon player != \"\") then {\n\t\thint \"Secondary weapon is not loaded!\";\n\t} else {\n\t\thint \"Player doesn't have a secondary weapon!\";\n\t};\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`secondaryWeaponMagazine` unit",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/secondaryWeaponMagazine"
        },
        "configuration": {
            "label": "secondaryWeaponMagazine",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Selects an element from an array, config entry from `Config` or substring from a string or a range from an array.",
            "examples": [
                {
                    "text": "```sqf\n\n[\"a\", \"b\", \"c\", \"d\"] select 2;\t// result is \"c\"\nposition player select 2;\t\t// result is Z coordinate of player position\n\n```"
                },
                {
                    "text": "```sqf\n[\"\", currentWeapon player] select alive player; // if player is dead, \"\" is selected\n```"
                },
                {
                    "text": "```sqf\n(configFile >> \"cfgVehicles\" >> typeOf vehicle player >> \"Turrets\") select 0 >> \"gunnerAction\";\n```"
                },
                {
                    "text": "```sqf\n\nhint str (\"japa is the man!\" select [8]);\t\t// the man!\nhint str (\"japa is the man!\" select [0, 7]);\t// japa is\n\n```"
                },
                {
                    "text": "```sqf\nhint str ([1,2,3,4,5,6] select [1, 4]); // [2,3,4,5]\n```"
                },
                {
                    "text": "```sqf\n_even = [1,2,3,4,5,6,7,8,9,0] select { _x % 2 == 0 }; // returns [2, 4, 6, 8, 0]\n```"
                },
                {
                    "text": "JavaScript endsWith() alternative:\n\n```sqf\n\nprivate _fnc_endsWith = \n{\n\tparams [\"_string\", \"_endswith\"];\n\t_string select [count _string - count _endswith] isEqualTo _endswith\n};\n\n[\"Arma 3\", \"3\"] call _fnc_endsWith; // true\n[\"Arma 3\", \"4\"] call _fnc_endsWith; // false\n\n```\n\n\n<!-- referenced in r1 -->"
                },
                {
                    "text": "`select` index traps:\n\n```sqf\n\nprivate _array = [\"a\", \"b\", \"c\", \"d\"];\n_array select 0; // \"a\"\n_array select 3; // \"d\"\n_array select 4; // nil - no error shown\n_array select 5; // error\n\n// can sometimes be useful\nprivate _firstEnemyNearMe = allUnits opfor select { player distance _x < 10 } select 0; // nil if no enemies nearby\nif (isNil _firstEnemyNearMe) exitWith { systemChat \"no enemy found\" };\nsystemChat format [\"enemy found: %1\", name _firstEnemyNearMe];\n\n// get the last element properly\n_array select (count _array);\t\t// wrong - nil is returned\n_array select (count _array - 1);\t// correct - \"d\" is returned\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array`"
                        },
                        {
                            "name": "index",
                            "description": "`Number` - index 0 denotes the first element, 1 the second, etc. If index has decimal places it gets rounded down for fractions less than or equal .5, otherwise it gets rounded up.\n\n{{GVI|arma3|2.12"
                        }
                    ],
                    "outline": "array `select` index",
                    "returns": "`Anything` - a <u>reference</u> to the array element given by its index\n**IMPORTANT**: When the index equals the size of the array, there is no error for out of range selection and `nil` is returned - see _Example 8_."
                },
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array`"
                        },
                        {
                            "name": "boolean",
                            "description": "`Boolean` - `false` selects the **first** element of the `Array`, `true` the **second** one"
                        }
                    ],
                    "outline": "array `select` boolean",
                    "returns": "`Anything` - a <u>reference</u> to the array element"
                },
                {
                    "parameters": [
                        {
                            "name": "config",
                            "description": "`Config`"
                        },
                        {
                            "name": "index",
                            "description": "`Number` - index 0 denotes the first element, 1 the second, etc. If index has decimal places it gets rounded down for fractions less than or equal .5, otherwise it gets rounded up"
                        }
                    ],
                    "outline": "config `select` index",
                    "returns": "`Config`"
                },
                {
                    "parameters": [
                        {
                            "name": "string",
                            "description": "`String`"
                        },
                        {
                            "name": "start",
                            "description": "`Number` - string position to start selection from. 0 denotes the first character of the string, 1 the second, etc. If passed number has decimal places it gets rounded down for fractions less than or equal .5, otherwise it gets rounded up"
                        },
                        {
                            "name": "length",
                            "description": "`Number` - (Optional, default _string_<nowiki/>'s length) number of characters to select"
                        }
                    ],
                    "outline": "string `select` [start, length]",
                    "returns": "`String`\n**NOTE**: Substring version of `select` operates with the ANSI charset; if Unicode support is desired, see `forceUnicode`."
                },
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array`"
                        },
                        {
                            "name": "start",
                            "description": "`Number` - array index to start selection from"
                        },
                        {
                            "name": "count",
                            "description": "`Number` - ({{GVI|arma3|2.14"
                        }
                    ],
                    "outline": "array `select` [start, count]",
                    "returns": "`Array` - a <u>new array</u> from selection"
                },
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array`"
                        },
                        {
                            "name": "expression",
                            "description": "`Code` - expression that is expected to return `Boolean` or `Nothing`.\nIf `true` is returned, the original array value of currently tested element [_x](https://community.bistudio.com/wiki/Magic%20Variables%23x) will be added to the output array"
                        }
                    ],
                    "outline": "array `select` expression",
                    "returns": "`Array` - a <u>new array</u> of all elements from the original array that satisfied expression condition"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/select"
        },
        "configuration": {
            "label": "select",
            "grammarType": "property-accessor"
        }
    },
    {
        "documentation": {
            "description": "Find the places with the maximum value of _expression_ in the given area. Places can be on water. Results are sorted by value. Search pattern is randomised every command execution.",
            "examples": [
                {
                    "text": "```sqf\nmyPlaces = selectBestPlaces [position player, 50, \"meadow + 2*hills\", 1, 5];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Object`, [Position3D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position2D](https://community.bistudio.com/wiki/Position%23Introduction)"
                        },
                        {
                            "name": "radius",
                            "description": "`Number`"
                        },
                        {
                            "name": "expression",
                            "description": "`String` - arithmetic expression. [Simple expression](https://community.bistudio.com/wiki/Simple_Expression) var names containing values from 0 to 1 depending on location (see also [Ambient Parameters](https://community.bistudio.com/wiki/Ambient%20Parameters)):\n{{Columns|5|\n* forest\n* trees\n* meadow\n* hills\n* houses\n* sea\n* coast\n* night\n* rain\n* windy\n* deadBody\n* waterDepth\n* camDepth\n}}"
                        },
                        {
                            "name": "precision",
                            "description": "`Number`"
                        },
                        {
                            "name": "sourcesCount",
                            "description": "`Number` - max results to return. The maximum possible is the number of random samples, which is **n = (2 * radius / precision)^2**"
                        }
                    ],
                    "outline": "`selectBestPlaces` [position, radius, expression, precision, sourcesCount]",
                    "returns": "`Array` in format [<nowiki/>[position: [Position2D](https://community.bistudio.com/wiki/Position%23Introduction), expressionResult: `Number`], ...]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/selectBestPlaces"
        },
        "configuration": {
            "label": "selectBestPlaces",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Selects a subject page in the [diary](https://community.bistudio.com/wiki/Diary). The subject page is selected but the command does not open the map by default, which could be opened with `openMap` if necessary.",
            "examples": [
                {
                    "text": "```sqf\n\nopenMap true;\nplayer selectDiarySubject \"Diary\";\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "player",
                            "description": "`Object` - player"
                        },
                        {
                            "name": "subject",
                            "description": "`String` - subject name, for example \"Diary\" (see also `Diary`). \n**NOTE**: \nIn order to open a specific record inside a subject one can append `**:Record#**` to the subject name. \n\n```sqf\n\nplayer selectDiarySubject \"Diary:Record0\"; // selects the first record in the diary subject (from bottom to top)\nplayer selectDiarySubject \"Diary:Record1\"; // selects the second record\n\n```"
                        }
                    ],
                    "outline": "player `selectDiarySubject` subject",
                    "returns": "`Boolean` - `true` if subject was successfully selected"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/selectDiarySubject"
        },
        "configuration": {
            "label": "selectDiarySubject",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a list of currently selected editor objects. \n**NOTE**: Some Old Editor Command",
            "examples": [
                {
                    "text": "```sqf\n_selObjects = selectedEditorObjects _map; // result can be: [\"_vehicle_0\",\"_vehicle_9\",\"_vehicle_11\"]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`selectedEditorObjects` map",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/selectedEditorObjects"
        },
        "configuration": {
            "label": "selectedEditorObjects",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Select an editor object. Does not un-select previously selected objects. \n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "object",
                            "description": "`String`"
                        }
                    ],
                    "outline": "map `selectEditorObject` object",
                    "returns": "`Anything`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/selectEditorObject"
        },
        "configuration": {
            "label": "selectEditorObject",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the list of model selections. When using default syntax, the named selections are returned from the first `LOD` only (LOD index 0).\n\nAlternative syntax allows to select LOD by name or by [LOD resolution](https://community.bistudio.com/wiki/LOD_resolutions).\n\n**IMPORTANT**: \nSometimes internally \"ViewGeometry\" can be equal to \"Geometry\", and \"FireGeometry\" could be equal to \"ViewGeometry\".\nIn order to pinpoint the actual LOD, use `allLODs` and [LOD resolution](https://community.bistudio.com/wiki/LOD%20resolutions) as argument for selecting the LOD.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _result = \"Land_i_House_Small_02_V3_F\" createVehicle _pos;\nselectionNames _house;\n/*\n[\n\t\"door_1\",\"door_2\",\"damt_1\",\"door_handle_1\",\"door_handle_2\",\"glass_1_hide\",\"glass_2_hide\",\"glass_3_hide\",\n\t\"glass_1_unhide\",\"glass_2_unhide\",\"glass_3_unhide\",\"glass_4_hide\",\"glass_4_unhide\"\n]\n*/\n\n```"
                },
                {
                    "text": "```sqf\n\nselectionNames player;\n/*\n[\n\t\"spine\",\"spine1\",\"spine2\",\"spine3\",\"head\",\n\t\"leftshoulder\",\"leftarm\",\"leftarmroll\",\"leftforearm\",\"leftforearmroll\",\"lefthand\",\"rightshoulder\",\"rightarm\",\"rightarmroll\",\"rightforearm\",\"rightforearmroll\",\"righthand\",\n\t\"pelvis\",\"leftupleg\",\"leftuplegroll\",\"leftleg\",\"leftlegroll\",\"leftfoot\",\"lefttoebase\",\"rightupleg\",\"rightuplegroll\",\"rightleg\",\"rightlegroll\",\"rightfoot\",\"righttoebase\",\"weapon\",\n\t\"proxy:\\a3\\characters_f\\proxies\\weapon.001\",\"proxy:\\a3\\characters_f\\proxies\\pistol.001\",\n\t\"proxy:\\a3\\characters_f\\proxies\\binoculars.001\",\n\t\"proxy:\\a3\\characters_f\\proxies\\launcher.001\",\n\t\"launcher\",\"nvg\",\"proxy:\\a3\\characters_f\\proxies\\nvg.001\",\n\t\"proxy:\\a3\\characters_f\\proxies\\flag.001\",\n\t\"proxy:\\a3\\characters_f\\proxies\\equipment.001\",\n\t\"proxy:\\a3\\characters_f\\proxies\\backpack.001\",\n\t\"proxy:\\a3\\characters_f\\proxies\\pistol_holstered.001\",\n\t\"proxy:\\a3\\characters_f\\proxies\\head_male.001\",\n\t\"proxy:\\a3\\characters_f\\proxies\\glasses.001\",\n\t\"proxy:\\a3\\characters_f\\proxies\\headgear.001\",\n\t\"proxy:\\a3\\characters_f\\proxies\\hair.001\",\n\t\"proxy:\\a3\\characters_f\\proxies\\backpack2.001\",\n\t\"proxy:\\a3\\characters_f\\proxies\\radio.001\",\n\t\"body_proxy\",\"head_proxy\",\n\t\"lefthandindex1\",\"lefthandindex2\",\"lefthandindex3\",\"lefthandmiddle1\",\"lefthandmiddle2\",\"lefthandmiddle3\",\"lefthandring\",\"lefthandpinky1\",\"lefthandpinky2\",\"lefthandpinky3\",\n\t\"lefthandring1\",\"lefthandring2\",\"lefthandring3\",\"lefthandthumb1\",\"lefthandthumb2\",\"lefthandthumb3\",\n\t\"righthandindex1\",\"righthandindex2\",\"righthandindex3\",\"righthandmiddle1\",\"righthandmiddle2\",\"righthandmiddle3\",\"righthandring\",\"righthandpinky1\",\"righthandpinky2\",\"righthandpinky3\",\n\t\"righthandring1\",\"righthandring2\",\"righthandring3\",\"righthandthumb1\",\"righthandthumb2\",\"righthandthumb3\",\n\t\"injury_hands\",\n\t\"camo\",\n\t\"proxy:\\a3\\characters_f\\heads\\bysta.001\",\n\t\"injury_legs\",\n\t\"proxy:\\a3\\characters_f\\proxies\\hmd.001\",\n\t\"hl\",\"insignia\",\"injury_body\",\"clan\"\n]\n*/\n\n```"
                },
                {
                    "text": "[HitPart](https://community.bistudio.com/wiki/Arma%203%3A%20Event%20Handlers%23HitPart) hit selections only:\n\n```sqf\n\nselectionNames player select { !(player selectionPosition _x, \"HitPoints\"] isEqualTo [0,0,0]) };\n/*\n[\n\t\"spine1\",\"spine2\",\"spine3\",\"head\",\"leftarm\",\"leftarmroll\",\"leftforearm\",\"rightarm\",\"rightarmroll\",\"rightforearm\",\n\t\"pelvis\",\"leftupleg\",\"leftuplegroll\",\"leftlegroll\",\"leftfoot\",\"rightupleg\",\"rightuplegroll\",\"rightleg\",\"rightlegroll\",\"rightfoot\"\n]\n*/\n\n```"
                },
                {
                    "text": "Copy 5 LODs' selections:\n\n```sqf\n\nprivate _car = \"B_MRAP_01_F\" createVehicle getPos player;\nprivate _return = [];\n{\n\t_return pushBack (_x + \": \" + str (_car selectionNames _x));\n} forEach [\"Memory\", \"Geometry\", \"FireGeometry\", \"LandContact\", \"HitPoints\"];\ncopyToClipboard (_return joinString endl);\n/*\n\tMemory: [\"light_r_end\",\"drivewheel_axis\",\"posun wheel_1_1\",\"posun wheel_1_2\",\"posun wheel_2_1\",\"posun wheel_2_2\",\"wheel_1_1_steering_axis\",\"wheel_2_1_steering_axis\",\"wheel_2_1_axis\",\"wheel_2_2_axis\",\"wheel_1_2_axis\",\"wheel_1_1_axis\",\"basic_damper_destruct_axis\",\"pos cargo\",\"pos cargo dir\",\"pos driver\",\"pos driver dir\",\"circulumreference\",\"zamerny\",\"doplnovani\",\"light_l_end\",\"light_r\",\"light_l\",\"stopa pll\",\"stopa plp\",\"stopa ppl\",\"stopa ppp\",\"stopa zll\",\"stopa zlp\",\"stopa zpl\",\"stopa zpp\",\"exhaust_dir\",\"exhaust_pos\",\"osaveze\",\"mph_axis\",\"rpm_axis\",\"fuel_axis\",\"temp2_axis\",\"temp_axis\",\"pip1_pos\",\"pip1_dir\",\"pip4_dir\",\"pip6_dir\",\"pip5_dir\",\"pip7_dir\",\"pip4_pos\",\"pip6_pos\",\"pip7_pos\",\"pip5_pos\",\"dustfrontright\",\"dustfrontleft\",\"dustbackleft\",\"dustbackright\",\"light_r_flare\",\"light_l_flare\",\"light_r_flare2\",\"light_l_flare2\",\"wheel_1_1_bound\",\"wheel_1_2_bound\",\"wheel_2_1_bound\",\"wheel_2_2_bound\",\"door_1_axis\",\"door_2_axis\",\"door_3_axis\",\"door_4_axis\",\"pedal_thrust_axis\",\"pedal_brake_axis\",\"slingloadcargo1\",\"slingloadcargo2\",\"slingloadcargo3\",\"slingloadcargo4\",\"tow_front_l\",\"tow_rear_r\",\"tow_front_r\",\"tow_rear_l\",\"taskmarker_1_pos\",\"bbox_1_2_pos\",\"bbox_1_1_pos\",\"bbox_2_1_pos\",\"bbox_2_2_pos\",\"pip_1_tl\",\"pip_1_tr\",\"pip_1_bl\",\"pip_1_br\",\"pip_4_tl\",\"pip_4_tr\",\"pip_4_bl\",\"pip_4_br\",\"pip_5_tl\",\"pip_5_tr\",\"pip_5_br\",\"pip_5_bl\"]\n\tGeometry: [\"proxy:\\a3\\data_f\\proxies\\damagewheel\\damagewheel_1.001\",\"wheel_1_1_unhide\",\"proxy:\\a3\\data_f\\proxies\\damagewheel\\damagewheel_1.002\",\"wheel_1_2_unhide\",\"wheel_2_1_unhide\",\"proxy:\\a3\\data_f\\proxies\\damagewheel\\damagewheel_1.003\",\"proxy:\\a3\\data_f\\proxies\\damagewheel\\damagewheel_1.004\",\"wheel_2_2_unhide\",\"damagehide\",\"wheel_1_2_damper\",\"wheel_1_1_damper\",\"wheel_2_2_damper\",\"wheel_2_1_damper\"]\n\tFireGeometry: [\"wheel_2_2_hide\",\"wheel_1_2_hide\",\"wheel_1_1_hide\",\"wheel_2_1_hide\",\"damagehide\",\"glass2\",\"glass3\",\"glass1\",\"proxy:\\a3\\data_f\\proxies\\damagewheel\\damagewheel_1.001\",\"wheel_1_1_unhide\",\"proxy:\\a3\\data_f\\proxies\\damagewheel\\damagewheel_1.002\",\"wheel_1_2_unhide\",\"wheel_2_1_unhide\",\"proxy:\\a3\\data_f\\proxies\\damagewheel\\damagewheel_1.003\",\"proxy:\\a3\\data_f\\proxies\\damagewheel\\damagewheel_1.004\",\"wheel_2_2_unhide\",\"proxy:\\a3\\data_f\\proxies\\passenger_mrap_01_back\\cargo.002\",\"proxy:\\a3\\data_f\\proxies\\passenger_generic01_foldhands\\cargo.003\",\"proxy:\\a3\\data_f\\proxies\\passenger_mrap_01_front\\cargo.001\",\"proxy:\\a3\\data_f\\proxies\\driver_offroad\\driver.001\",\"reserve_wheel\",\"zbytek\",\"glass4\",\"glass5\",\"glass6\",\"hit_engine\",\"hit_fuel\",\"hit_hull\",\"door_1_hide\",\"door_3_hide\"]\n\tLandContact: [\"wheel_2_1_damper_land\",\"wheel_1_2_damper_land\",\"wheel_2_2_damper_land\",\"wheel_1_1_damper_land\"]\n\tHitPoints: [\"wheel_2_1_steering\",\"wheel_2_2_steering\",\"wheel_1_2_steering\",\"wheel_1_1_steering\",\"motor\",\"karoserie\",\"light_r\",\"light_l\",\"glass2\",\"palivo\",\"glass3\",\"glass1\",\"wheel_reserve_hit\",\"light_r2\",\"light_l2\",\"zbytek\",\"door_1\",\"door_2\",\"door_3\",\"door_4\",\"glass4\",\"glass5\",\"glass6\",\"hit_engine_point\",\"hit_fuel_point\",\"hit_hull_point\"]\n*/\n\n```"
                },
                {
                    "text": "Select \"Memory\" LOD by its [resolution](https://community.bistudio.com/wiki/LOD%20resolutions):\n\n```sqf\nprivate _memoryLODNamedSelections = player selectionNames 1e15;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`selectionNames` object",
                    "returns": "`Array` of `String`s - selection names"
                },
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "LOD",
                            "description": "`String` or `Number`\n* `String` - LOD name; can be one of:\n** \"Memory\"\n** \"Geometry\"\n** \"FireGeometry\"\n** \"LandContact\"\n** \"HitPoints\"\n** {{GVI|arma3|2.06"
                        }
                    ],
                    "outline": "object `selectionNames` LOD",
                    "returns": "`Array` of `String`s - selection names"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/selectionNames"
        },
        "configuration": {
            "label": "selectionNames",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns selection position in model space pertaining to the current animation in [render time scope](https://community.bistudio.com/wiki/Simulation%20vs%20Render%20Time%20Scope).\nWhen the default syntax is used, command searches first in Memory `LOD`, then in Geometry LOD, FireGeometry LOD, LandContact LOD, HitPoints LOD and finally in ViewGeometry LOD and returns the first matching find.\nThe second syntax allows to specify which one of these LODs to search in instead.\n**IMPORTANT**: \nSometimes internally \"ViewGeometry\" could be equal to \"Geometry\", and \"FireGeometry\" could be equal to \"ViewGeometry\".\nIn order to pinpoint the actual LOD, use `allLODs` and [LOD resolution](https://community.bistudio.com/wiki/LOD_resolutions) as argument for selecting the LOD.",
            "examples": [
                {
                    "text": "```sqf\n_inModelPosition = player selectionPosition \"head_hit\";\n```"
                },
                {
                    "text": "```sqf\n_inModelPosition = player selectionPosition \"pelvis\";\n```"
                },
                {
                    "text": "```sqf\n_inModelPosition = player selectionPosition \"head\";\n```"
                },
                {
                    "text": "```sqf\n_inModelPosition = player selectionPosition \"camera\";\n```"
                },
                {
                    "text": "```sqf\n\nstomper selectionPosition [\"wheel_1_1\", \"HitPoints\", \"FirstPoint\"];\t// [-0.774058,0.860854,-1.40365]\nstomper selectionPosition [\"wheel_1_1\", \"HitPoints\", \"AveragePoint\"];\t// [-0.597142,1.35486,-1.58345]\nstomper selectionPosition [\"wheel_1_1\", \"HitPoints\", \"BoundingBox\"];\t// [[-0.774058,0.860854,-2.07746],[-0.420225,1.84887,-1.08944]]\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "selectionName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "object `selectionPosition` selectionName",
                    "returns": "`Array` - [relative position](https://community.bistudio.com/wiki/Position%23PositionRelative) in model space. If selection does not exist, [0, 0, 0] is returned."
                },
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "selectionName",
                            "description": "`String`"
                        },
                        {
                            "name": "LOD",
                            "description": "`String` or `Number` - can be one of:\n* `**\"Memory\"**`\n* `**\"Geometry\"**`\n* `**\"FireGeometry\"**`\n* `**\"LandContact\"**`\n* `**\"HitPoints\"**`\n* {{GVI|arma3|2.06"
                        },
                        {
                            "name": "returnMode",
                            "description": "`String` - (Optional, default `**\"FirstPoint\"**`) can be one of:\n* `**\"FirstPoint\"**`\n* `**\"AveragePoint\"**`\n* `**\"BoundingBox\"**`"
                        }
                    ],
                    "outline": "object `selectionPosition` [selectionName, LOD, returnMode]",
                    "returns": "`Array` - [relative position](https://community.bistudio.com/wiki/Position%23PositionRelative) in model space. If selection does not exist, [0, 0, 0] is returned. If returnMode is `**\"BoundingBox\"**`, `Array` of `Array`s"
                },
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "selectionName",
                            "description": "`String`"
                        },
                        {
                            "name": "LODIndex",
                            "description": "`Number` - the index of the target LOD (see `allLODs`)"
                        },
                        {
                            "name": "isVisual",
                            "description": "`Boolean` - (Optional, default `true`) `true` for Render, `false` for Simulation [time scope](https://community.bistudio.com/wiki/Simulation_vs_Render_Time_Scope)"
                        },
                        {
                            "name": "returnMode",
                            "description": "`String` - (Optional, default `**\"FirstPoint\"**`) can be one of:\n* `**\"FirstPoint\"**`\n* `**\"AveragePoint\"**`\n* `**\"BoundingBox\"**`"
                        }
                    ],
                    "outline": "`selectionPosition` [object, selectionName, LODIndex, isVisual, returnMode]",
                    "returns": "`Array` - [relative position](https://community.bistudio.com/wiki/Position%23PositionRelative) in model space. If selection does not exist, [0, 0, 0] is returned. If returnMode is `**\"BoundingBox\"**`, `Array` of `Array`s"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/selectionPosition"
        },
        "configuration": {
            "label": "selectionPosition",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Searches for selection in the object model's LOD level, and returns the Direction and Up vectors in model space.",
            "examples": [
                {
                    "text": "```sqf\nvehicle player selectionVectorDirAndUp [\"drivewheel_axis\", \"FireGeometry\"] params [\"_axisVectorDir\", \"_axisVectorUp\"];\n```"
                },
                {
                    "text": "Get the player's barrel end (`**_p1**` being muzzle end's ASL position):\n```sqf\n\nonEachFrame {\n\tprivate _weapon = currentWeapon player;\n\tif (_weapon == \"\") exitWith {};\n\n\t// update weapon info upon weapon switch\n\tif (_weapon != player getVariable [\"last_weapon\", \"?\"]) then\n\t{\n\t\tprivate _cfg = configFile >> \"CfgWeapons\" >> _weapon;\n\t\tprivate _model = getText(_cfg >> \"model\");\n\t\tprivate _simpleObject = createSimpleObject [_model, [0,0,0], true];\n\t\tprivate _offset = _simpleObject selectionPosition [getText (_cfg >> \"muzzlePos\"), \"memory\"];\n\t\t_offset = _offset apply { [_x] };\n\t\tdeleteVehicle _simpleObject;\n\t\tplayer setVariable [\"offset\", _offset];\n\t\tplayer setVariable [\"last_weapon\", _weapon];\n\t\tplayer setVariable [\"proxy\",\n\t\t\t[\n\t\t\t\t\"proxy:\\a3\\characters_f\\proxies\\pistol.001\",\n\t\t\t\t\"proxy:\\a3\\characters_f\\proxies\\weapon.001\",\n\t\t\t\t\"proxy:\\a3\\characters_f\\proxies\\launcher.001\",\n\t\t\t\t\"proxy:\\a3\\characters_f\\proxies\\binoculars.001\"\n\t\t\t] select (([1, 4, 4096] find getNumber (_cfg >> \"type\")) + 1)\n\t\t];\n\t};\n\n\t_offset = player getVariable [\"offset\", []];\n\tprivate _proxy = player getVariable [\"proxy\", \"\"];\n\t// using LOD resolution 1 (and lod index 0) - this is not always reliable\n\t// you should manually check allLODs and find the most suitable LOD (smallest res LOD usually has the best accuracy, but it might be slow too)\n\tplayer selectionVectorDirAndUp [_proxy, 1] params [\"_vy\", \"_vz\"];\n\tprivate _pos = selectionPosition [player, _proxy, 0];\n\tprivate _vx = _vy vectorCrossProduct _vz;\n\n\tprivate _mat = matrixTranspose [_vx, _vy, _vz];\n\t_pos = _pos vectorAdd flatten (_mat matrixMultiply _offset);\n\n\tprivate _p1 = player modelToWorldVisualWorld _pos;\n\tprivate _p2 = _p1 vectorAdd (player vectorModelToWorldVisual (_vx vectorMultiply -1000));\n\tdrawLine3D [ASLToAGL _p1, ASLToAGL _p2, [1,0,0,1]];\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "selectionName",
                            "description": "`String` - selection name (see `selectionNames`)"
                        },
                        {
                            "name": "LOD",
                            "description": "`String` or `Number` - the LOD that contains the selection:\n* `String` - can be one of:\n** \"Memory\"\n** \"Geometry\"\n** \"FireGeometry\"\n** \"LandContact\"\n** \"HitPoints\"\n** \"ViewGeometry\"\n* `Number` - command searches for a LOD with the similar [resolution](https://community.bistudio.com/wiki/LOD%20resolutions) (see `allLODs`)."
                        }
                    ],
                    "outline": "object `selectionVectorDirAndUp` [selectionName, LOD]",
                    "returns": "`Array` - in format [<nowiki/>`vectorDir`, `vectorUp`], where the vectors are in model space"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/selectionVectorDirAndUp"
        },
        "configuration": {
            "label": "selectionVectorDirAndUp",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Select the group's leader. Group locality can be checked with `local` command and group ownership with `groupOwner` command.\n\n**IMPORTANT**:  An invalid combination can be provided to this command, e.g _unitName_ **not** being part of _group_. In that case:\n* _unitName_ will be `leader` of _group_, but will not be able to command them\n* if _unitName_ is deleted or killed, `leader` of _group_ will be `objNull` and will not automatically be reassigned.",
            "examples": [
                {
                    "text": "```sqf\ngroup player selectLeader player;\n```"
                },
                {
                    "text": "Make unit a leader from server:\n\n```sqf\n[group _unit, _unit] remoteExec [\"selectLeader\", groupOwner group _unit];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group`"
                        },
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "group `selectLeader` unitName",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/selectLeader"
        },
        "configuration": {
            "label": "selectLeader",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the array element with `max`imum numerical value. Engine solution to `BIS_fnc_greatestNum` and `BIS_fnc_findExtreme`. Therefore it is expected that supplied array consists of `Number`s only. `Boolean`s however are also supported and will be evaluated as `Number`s: `true` - 1, `false` - 0.  `nil` value treated as 0. \n**WARNING**: Other non `Number` elements (not recommended) will be evaluated as 0 and **Bad conversion: scalar** message will be logged into .`rpt`.",
            "examples": [
                {
                    "text": "```sqf\n_max = selectMax [1,2,3,4,5]; //5\n```"
                },
                {
                    "text": "```sqf\n// Same as, for example: \n_max = _a max _b max _c max _d;\n// Only faster:\n_max = selectMax [_a,_b,_c,_d];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array` - array of `Number`s"
                        }
                    ],
                    "outline": "`selectMax` array",
                    "returns": "`Anything` - element with `max`imum numerical value"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/selectMax"
        },
        "configuration": {
            "label": "selectMax",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the array element with `min`imum numerical value. Engine solution to `BIS_fnc_lowestNum` and `BIS_fnc_findExtreme`. Therefore it is expected that supplied array consists of `Number`s only.  `Boolean`s however are also supported and will be evaluated as `Number`s: `true` - 1, `false` - 0. `nil` value treated as 0. \n**WARNING**: Other non `Number` elements (not recommended) will be evaluated as 0 and **Bad conversion: scalar** message will be logged into .`rpt`.",
            "examples": [
                {
                    "text": "```sqf\n_min = selectMin [1,2,3,4,5]; //1\n```"
                },
                {
                    "text": "```sqf\n// Same as, for example: \n_min = _a min _b min _c min _d;\n// Only faster:\n_min = selectMin [_a,_b,_c,_d];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array` - array of `Number`s"
                        }
                    ],
                    "outline": "`selectMin` array",
                    "returns": "`Anything` - element with `min`imum numerical value"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/selectMin"
        },
        "configuration": {
            "label": "selectMin",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Switches player to no unit, makes `player` return `objNull`.",
            "examples": [
                {
                    "text": "Single player:\n\n```sqf\nselectNoPlayer;\nhint str player; // <NULL-object>\n```\n\nRough multiplayer emulation:\n\n```sqf\n_noPlayer = createGroup sideLogic createUnit [\n\t\"Logic\",\n\t[0,0,1000],\n\t[],\n\t0,\n\t\"NONE\"\n];\nselectPlayer _noPlayer;\nhint str player; // L Charlie 4-3:1 (KK)\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`selectNoPlayer`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/selectNoPlayer"
        },
        "configuration": {
            "label": "selectNoPlayer",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Move player into given unit. Some usage advices:\n* Avoid using `selectPlayer` on editor-placed units in multiplayer, as it may, on occasion, lead to some undefined behaviour.\n* If you need to `selectPlayer` into another unit, consider [creating a unit](https://community.bistudio.com/wiki/createUnit) dynamically.**NOTE**: Before Arma 3 it was possible to `selectPlayer` another player-controlled unit, leading to control issues. \n**WARNING**: \nCreating and immediately selecting player into newly created unit could cause all sort of problems due to possible delay in unit initialisation.\nGive the unit some time to propagate properly on the network before using this command on it.",
            "examples": [
                {
                    "text": "```sqf\nselectPlayer bob;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`selectPlayer` unitName",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/selectPlayer"
        },
        "configuration": {
            "label": "selectPlayer",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a random element from the given array. Engine solution to `BIS_fnc_selectRandom`",
            "examples": [
                {
                    "text": "```sqf\n_randomElement = selectRandom [1,2,3,4,5];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array` - array of anything"
                        }
                    ],
                    "outline": "`selectRandom` array",
                    "returns": "`Anything` - random selected value or `Nothing` if array is empty"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/selectRandom"
        },
        "configuration": {
            "label": "selectRandom",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a random element from the given array according to assigned weights. Engine solution to `BIS_fnc_selectRandomWeighted`. A few notes:\n* Negative weights are not supported\n* If an item's weight is 0, the item is ignored\n* The weights don't have to total to 1 \n* If numbers of items and weights do not match, the shortest array is used\n* A single array Syntax is slightly faster than Alt Syntax",
            "examples": [
                {
                    "text": "```sqf\nprivate _randomWeightedElement = selectRandomWeighted [1,0.1,2,0.2,3,1.3,4,2.4,5,7.5];\n```"
                },
                {
                    "text": "```sqf\nprivate _randomWeightedElement = [1,2,3,4,5] selectRandomWeighted [0.1,0.2,1.3,2.4,7.5];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "valuesAndWeights",
                            "description": "`Array` - array in format [value1, weight1, value2, weight2, ...], where:\n* value: `Anything` - weighted value\n* weight: `Number` - values relative weight"
                        }
                    ],
                    "outline": "`selectRandomWeighted` valuesAndWeights",
                    "returns": "`Anything` - random weighted value or `Nothing` if array is empty or all weights are 0"
                },
                {
                    "parameters": [
                        {
                            "name": "values",
                            "description": "`Array` of `Anything`"
                        },
                        {
                            "name": "weights",
                            "description": "`Array` of `Number`s"
                        }
                    ],
                    "outline": "values `selectRandomWeighted` weights",
                    "returns": "`Anything` - random weighted value or `Nothing` if any of arrays is empty or all weights are 0"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/selectRandomWeighted"
        },
        "configuration": {
            "label": "selectRandomWeighted",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Selects [ current throwable](https://community.bistudio.com/wiki/currentThrowable%20), which will be launched if the user presses {{Controls|G}}.",
            "examples": [
                {
                    "text": "```sqf\nplayer selectThrowable \"SmokeShellGreen\";\n```"
                },
                {
                    "text": "```sqf\nplayer selectThrowable \"SmokeShellGreenMuzzle\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "throwable",
                            "description": "`String` - either the name of the throwable magazine or the name of the throwable muzzle"
                        }
                    ],
                    "outline": "unit `selectThrowable` throwable",
                    "returns": "`Boolean` - `true` on success"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/selectThrowable"
        },
        "configuration": {
            "label": "selectThrowable",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Selects the given weapon.",
            "examples": [
                {
                    "text": "```sqf\n_soldier1 selectWeapon \"LAWLauncher\";\n```"
                },
                {
                    "text": "```sqf\nplayer selectWeapon \"M203Muzzle\";\n```"
                },
                {
                    "text": "```sqf\nplayer selectWeapon [\"arifle_MX_GL_ACO_F\", \"arifle_MX_GL_ACO_F\", \"FullAuto\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        },
                        {
                            "name": "muzzleName",
                            "description": "`String` - name of the weapon or muzzle\n**IMPORTANT**: For weapons that have **more than one muzzle**, you have to input the **muzzleName** and not the **weaponName**.\n* In Operation Flashpoint, in most cases, both names are the same. But check.\n* In Armed Assault the weaponNames and muzzleNames are different.\n* For muzzle names see [CfgWeapons](https://community.bistudio.com/wiki/%3ACategory%3AWeapons)."
                        }
                    ],
                    "outline": "unitName `selectWeapon` muzzleName",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - person. This argument has to be `local`, or it can be remote when executed on the [server](https://community.bistudio.com/wiki/isServer)"
                        },
                        {
                            "name": "weapon",
                            "description": "`String` - name of the weapon, personal or vehicle's weapon (see `weaponState`)"
                        },
                        {
                            "name": "muzzle",
                            "description": "`String` - name of the selected muzzle (see `weaponState`)"
                        },
                        {
                            "name": "firemode",
                            "description": "`String` - name of the firemode (see `weaponState`)"
                        }
                    ],
                    "outline": "unit `selectWeapon` [weapon, muzzle, firemode]",
                    "returns": "`Boolean` or `Nothing` - `true` on success, `false` on failure, `Nothing` when the call to the command is dispatched over network"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/selectWeapon"
        },
        "configuration": {
            "label": "selectWeapon",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Selects the given weapon on the specified turret. Use turret path [-1] for the driver's turret.",
            "examples": [
                {
                    "text": "```sqf\nMBT_Kuma selectWeaponTurret [\"LMG_coax\",[0]];\n```"
                },
                {
                    "text": "```sqf\nKamysh selectWeaponTurret [\"missiles_titan\", [0], \"missiles_titan\", \"topdown\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "weapon",
                            "description": "`String` - weapon class name or (since {{GVI|arma3|1.64"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` format [Turret Path](https://community.bistudio.com/wiki/Turret%20Path)"
                        },
                        {
                            "name": "muzzle",
                            "description": "`String` - (Optional) muzzle name"
                        },
                        {
                            "name": "firemode",
                            "description": "`String` - (Optional) firemode name"
                        }
                    ],
                    "outline": "vehicle `selectWeaponTurret` [weapon, turretPath, muzzle, firemode]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/selectWeaponTurret"
        },
        "configuration": {
            "label": "selectWeaponTurret",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Send the command to the list of clients.",
            "examples": [
                {
                    "text": "```sqf\nsendAUMessage [[dpnid1, dpnid2], \"ConnectTo: 192.168.1.66\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "clientList",
                            "description": "`Array`"
                        },
                        {
                            "name": "command",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`sendAUMessage` [clientList, command]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/sendAUMessage"
        },
        "configuration": {
            "label": "sendAUMessage",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sends a simple command to the vehicle's driver / gunner (air vehicles ignore it). See also `vehicleMoveInfo`.{{Feature | important | Doesn't seem to work if AI driver is alone, needs another unit in the vehicle (could be another AI or player) that is set as `setEffectiveCommander`. If driver is `effectiveCommander` it will refuse any drive commands.}}\n**Arma 3**: Due to some sort of a bug when vehicle is ordered turning (\"LEFT\" or \"RIGHT\"), it locks the vehicle ability to respond to any other commands properly. Always use \"STOPTURNING\" to cancel turning before issuing other move commands\n{{{!}} class=\"valign-top\"\n! style=\"width: 33%\" {{!}} Gunner commands\n! style=\"width: 33%\" {{!}} Driver Move commands\n! Driver Turn commands\n{{!}}-\n{{!}}\n* `**\"FIRE\"**`\n* `**\"CEASE FIRE\"**`\n* `**\"MANUAL FIRE\"**`\n* `**\"CANCEL MANUAL FIRE\"**`\n* `**\"KEY FIRE\"**`\n{{!}}\n* `**\"FORWARD\"**` - move forward\n* `**\"FAST\"**` - move forward, fast\n* `**\"SLOW\"**` - move forward, slow\n* `**\"STOP\"**` - stop moving forward or backward\n* `**\"BACK\"**` - move backward\n* `**\"KEY UP\"**`\n* `**\"KEY DOWN\"**`\n* `**\"KEY FAST\"**`\n* `**\"KEY SLOW\"**`\n{{!}}\n* `**\"LEFT\"**` - turn left, while moving or not\n* `**\"RIGHT\"**` - turn right, while moving or not\n* {{GVI|arma3|1.78",
            "examples": [
                {
                    "text": "```sqf\nvehicle player sendSimpleCommand \"STOP\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicleName",
                            "description": "`Object`"
                        },
                        {
                            "name": "command",
                            "description": "`String`"
                        }
                    ],
                    "outline": "vehicleName `sendSimpleCommand` command",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/sendSimpleCommand"
        },
        "configuration": {
            "label": "sendSimpleCommand",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Create a new AI task (subtask of parentTask). Type is name of registered task type.",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "sender",
                            "description": " [Team Member](https://community.bistudio.com/wiki/Team%20Member)"
                        },
                        {
                            "name": "[receiver,[type] or [type,parentTask],priority,name1,value1,name2,value2,...]",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "sender `sendTask` [receiver,[type] or [type,parentTask],priority,name1,value1,name2,value2,...]",
                    "returns": "`Task`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/sendTask"
        },
        "configuration": {
            "label": "sendTask",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Send a result of the task to the task sender.",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "task",
                            "description": "`Task`"
                        },
                        {
                            "name": "[state,result,sentence]",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "task `sendTaskResult` [state,result,sentence]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/sendTaskResult"
        },
        "configuration": {
            "label": "sendTaskResult",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Send message to given address using UDP protocol. Returns false if the message has not been delivered \n\n**WARNING**: Disabled in retail version (see the [talk page](https://community.bistudio.com/wiki/Talk%3AsendUDPMessage) for more info).",
            "examples": [
                {
                    "text": "```sqf\n_bool = sendUDPMessage [\"192.168.0.1\", 2302, \"Here goes you message...\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "ip",
                            "description": "`String`"
                        },
                        {
                            "name": "port",
                            "description": "`Number`"
                        },
                        {
                            "name": "message",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`sendUDPMessage` [ip, port, message]",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/sendUDPMessage"
        },
        "configuration": {
            "label": "sendUDPMessage",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "A getter for `enableSentences`.",
            "examples": [
                {
                    "text": "```sqf\n\nif (sentencesEnabled) then\n{\n\thint \"sentences are enabled; changing that now\";\n\tenableSentences false;\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`sentencesEnabled`",
                    "returns": "`Boolean` - returns `true` if sentences are enabled"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/sentencesEnabled"
        },
        "configuration": {
            "label": "sentencesEnabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Executes the given [server command](https://community.bistudio.com/wiki/Multiplayer_Server_Commands).\n{{Feature|informative|\n* Available commands for execution can be found with `serverCommandAvailable`\n* Commands that can be executed can be found with `serverCommandExecutable`\n}}\n\n**IMPORTANT**: If `serverCommand` is executed on a client, it must be executed from [UI context](https://community.bistudio.com/wiki/isUIContext), such as [[User Interface Event Handlers#onButtonDown|\"onButtonDown\"]] or similar events (see [User Interface Event Handlers](https://community.bistudio.com/wiki/User%20Interface%20Event%20Handlers)).",
            "examples": [
                {
                    "text": "```sqf\nserverCommand \"#logout\";\n```"
                },
                {
                    "text": "Create button on the main map which will show userlist to anyone who clicks on it:\n\n```sqf\nwith uiNamespace do \n{\n\tprivate _ctrl = findDisplay 12 ctrlCreate [\"RscButton\", -1];\n\t_ctrl ctrlSetPosition [0,0,0.5,0.1];\n\t_ctrl ctrlSetText \"USERLIST\";\n\t_ctrl ctrlCommit 0;\n\t_ctrl ctrlAddEventHandler [\"ButtonDown\", \n\t{\n\t\tserverCommand \"#userlist\";\n\t}];\n};\n```"
                },
                {
                    "text": "```sqf\nserverCommand format [\"#kick %1\",_name];\n```"
                },
                {
                    "text": "```sqf\nprivate _passwordWasOK = \"MyServerCommandPassword\" serverCommand \"#lock\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "command ",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`serverCommand` command",
                    "returns": "`Boolean` - `false` if a non valid command is used (\"#blah\"), false otherwise (was always `true` before {{GVI|arma3|1.40"
                },
                {
                    "parameters": [
                        {
                            "name": "password ",
                            "description": "`String` - case-sensitive password defined in [server config](https://community.bistudio.com/wiki/Arma%203%3A%20Server%20Config%20File) with `**serverCommandPassword**` param"
                        },
                        {
                            "name": "command ",
                            "description": "`String` - server command"
                        }
                    ],
                    "outline": "password `serverCommand` command",
                    "returns": "`Boolean` - `false` if command failed at some stage. `true` doesn't mean that command succeeded."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/serverCommand"
        },
        "configuration": {
            "label": "serverCommand",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if given `serverCommand` is available on current machine, `false` if not.\n\n{{{!}} class=\"wikitable align-center\"\n! rowspan=\"2\" {{!}} Arma 3 [Multiplayer Server Commands](https://community.bistudio.com/wiki/Multiplayer%20Server%20Commands)\n! colspan=\"4\" {{!}} Available to\n{{!}}-\n! Client\n! Voted [Admin](https://community.bistudio.com/wiki/admin)\n! Logged [Admin](https://community.bistudio.com/wiki/admin)\n! [Server Host](https://community.bistudio.com/wiki/isServer)\n{{!}}-\n{{!}} `**#login**`, `**#userlist**`, `** #beclient**`, `** #vote**`\n{{!}} {{Icon|checked}}\n{{!}} {{Icon|checked}}\n{{!}} {{Icon|checked}}\n{{!}} {{Icon|checked}}\n{{!}}-\n{{!}} `**#kick**`, `**#debug**`\n{{!}} {{Icon|unchecked}}\n{{!}} {{Icon|checked}}\n{{!}} {{Icon|checked}}\n{{!}} {{Icon|checked}}\n{{!}}-\n{{!}} `**#lock**`, `**#unlock**`, `**#maxping**`, `**#maxdesync**`, `**#maxpacketloss**`\n{{!}} {{Icon|unchecked}}\n{{!}} {{Icon|unchecked}}\n{{!}} {{Icon|checked}}\n{{!}} {{Icon|checked}}\n{{!}}-\n{{!}} `**#logout**`, `**#restart**`, `**#mission**`, `**#missions**`, `**#reassign**`, `**#monitor**`, `**#init**`\n{{!}} {{Icon|unchecked}}\n{{!}} {{Icon|checked}}\n{{!}} {{Icon|checked}}\n{{!}} {{Icon|unchecked}}\n{{!}}-\n{{!}} `**#shutdown**`, `**#restartserver**`, `**#exec**`, `**#beserver**`, `**#monitords**`, `**#logentities**`, `**#exportjipqueue**`\n{{!}} {{Icon|unchecked}}\n{{!}} {{Icon|unchecked}}\n{{!}} {{Icon|checked}}\n{{!}} {{Icon|unchecked}}\n{{!}}-\n{{!}} Specific builds only: `**#captureframe**`, `**#enabletest**`, `**#disabletest**`\n{{!}} {{Icon|unchecked}}\n{{!}} {{Icon|unchecked}}\n{{!}} {{Icon|checked}}\n{{!}} {{Icon|unchecked}}\n{{!}}}\n\nTo check if a [server command](https://community.bistudio.com/wiki/Multiplayer%20Server%20Commands) can be executed in the current environment, use `serverCommandExecutable`.\n\n**NOTE**: The table above does not apply to the command's password variant on a dedicated server as everything is available to it.",
            "examples": [
                {
                    "text": "```sqf\n_can = serverCommandAvailable \"#kick\";\n```"
                },
                {
                    "text": "```sqf\nif (serverCommandAvailable \"#logout\") then \n{\n\thint \"You are a some sort of admin\";\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "command",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`serverCommandAvailable` command",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/serverCommandAvailable"
        },
        "configuration": {
            "label": "serverCommandAvailable",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if the `serverCommand` can be performed on the machine and in this exact environment, otherwise `false`. serverCommand can be executed only from [User Interface Event Handlers](https://community.bistudio.com/wiki/User%20Interface%20Event%20Handlers), and this command also checks if that's the case.",
            "examples": [
                {
                    "text": "```sqf\n_canKick = serverCommandAvailable \"#kick\";\n```"
                },
                {
                    "text": "Add button to the main map to lock server, which could only be activated by admin:\n\n```sqf\nwith uiNamespace do {\n\tctrl = findDisplay 12 ctrlCreate [\"RscButton\", -1];\n\tctrl ctrlSetPosition [0, 0, 0.5, 0.1];\n\tctrl ctrlCommit 0;\n\tctrl ctrlSetText \"LOCK SERVER\";\n\tctrl ctrlAddEventHandler [\"ButtonDown\",\n\t{\t\n\t\tif (serverCommandExecutable \"#lock\") then {\n\t\t\tserverCommand \"#lock\";\n\t\t} else {\n\t\t\thint \"You need to be logged in as admin to do this\";\n\t\t};\n\t}];\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "command",
                            "description": "`String` - see [Multiplayer Server Commands](https://community.bistudio.com/wiki/Multiplayer_Server_Commands%23Commands) for all available commands"
                        }
                    ],
                    "outline": "`serverCommandExecutable` command",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/serverCommandExecutable"
        },
        "configuration": {
            "label": "serverCommandExecutable",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns name of the hosting server in MP, \"\" in SP.",
            "examples": [
                {
                    "text": "```sqf\nhint format [\"Welcome to the %1 server!\", serverName];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`serverName`",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/serverName"
        },
        "configuration": {
            "label": "serverName",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns server's [namespace](https://community.bistudio.com/wiki/Namespace).\nThis namespace is only available on the server for the server's uptime duration (same as `uiNamespace`).\n\nAll [server event handlers](https://community.bistudio.com/wiki/Arma%203%3A%20Server%20Side%20Scripting), which are available in [server config](https://community.bistudio.com/wiki/Arma%203%3A%20Server%20Config%20File), use this namespace.",
            "examples": [
                {
                    "text": "```sqf\n\nif (isServer) then\n{\n\thint str allVariables serverNamespace;\n}\nelse\n{\n\thint \"you do not have permission!\";\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`serverNamespace`",
                    "returns": "`Namespace` on the server, `Nothing` on clients or in single-player."
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/serverNamespace"
        },
        "configuration": {
            "label": "serverNamespace",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the time since latest server (re)start in seconds. It is synced to all clients in MP - both at mission start and when a new client connects to it. Beyond that the server is syncing to clients every 5 minutes. You can force the next sync earlier by executing `estimatedTimeLeft` command.**IMPORTANT**: The time returned is different to the time returned by `time` and `diag_tickTime` commands on server. Returns 0 in SP.\n\n**NOTE**: **Known issues before Arma 3 v1.86**:  Both server and clients showed the same value when synced. The only time it was not synced was on the server, right after server restart and only for the first 300 seconds. Client side was synced from the start",
            "examples": [
                {
                    "text": "```sqf\nhint format [\"Synced server time : %1\", serverTime];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**serverTime**",
                    "returns": "`Number`"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/serverTime"
        },
        "configuration": {
            "label": "serverTime",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Changes the element at the given zero-based index of the [array](https://community.bistudio.com/wiki/Array). \n\n**NOTE**: If the index is out of bounds, the array will `resize` to incorporate the index as its last value, padding with `nil` as necessary (see _Example 4_).",
            "examples": [
                {
                    "text": "```sqf\n_arrayOne set [0, \"Hello\"];\n```"
                },
                {
                    "text": "Append \"Bye\" as last element to `**_arrayTwo**`:\n\n```sqf\n_arrayTwo set [count _arrayTwo, \"Bye\"];\n```"
                },
                {
                    "text": "Replace the last element of `**_arrayThree**` with 23:\n\n```sqf\n_arrayThree set [(count _arrayThree) - 1, 23];\n```"
                },
                {
                    "text": "Using `set` with an index that is out of bounds:\n\n```sqf\n\nprivate _array = [\"A\"];\n_array set [2, \"C\"]; // _array is now [\"A\", nil, \"C\"]\n_array set [1, \"B\"]; // _array is now [\"A\", \"B\", \"C\"]\n\n```"
                },
                {
                    "text": "```sqf\n\nprivate _myHashMap = createHashMap;\n_myHashMap set [\"key\", \"value1\", true]; // \"key\" value is set to \"value1\"\n_myHashMap set [\"key\", \"value2\", true]; // \"key\" value is still \"value1\" as \"key\" already exists in the hashmap\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array`"
                        },
                        {
                            "name": "index",
                            "description": "`Number` - 0-based array index. {{GVI|arma3|2.12"
                        },
                        {
                            "name": "value",
                            "description": "`Anything`"
                        }
                    ],
                    "outline": "array `set` [index, value]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "hashMap",
                            "description": "`HashMap`"
                        },
                        {
                            "name": "key",
                            "description": "`HashMapKey`"
                        },
                        {
                            "name": "value",
                            "description": "`Anything`"
                        },
                        {
                            "name": "insertOnly",
                            "description": "`Boolean` - (Optional, default `false`) if set to `true`, set the value only if the key does not exist already"
                        }
                    ],
                    "outline": "hashMap `set` [key, value, insertOnly]",
                    "returns": "`Boolean` - `false` if the key is new to the hashmap, `true` if a value got overwritten"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/set"
        },
        "configuration": {
            "label": "set",
            "grammarType": "property-accessor"
        }
    },
    {
        "documentation": {
            "description": "Sets one of entity [attributes](https://community.bistudio.com/wiki/Eden%20Editor%3A%20Entity%20Attributes). For the list of all attributes with their properties see [Setting Attributes](https://community.bistudio.com/wiki/Eden_Editor%3A_Setting_Attributes%23Attributes).\n**IMPORTANT**: Attributes are available only within the [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor) workspace. You cannot access them in scenario preview or exported scenario!",
            "examples": [
                {
                    "text": "```sqf\nplayer set3DENAttribute [\"allowDamage\", false]; // Mark player as invincible\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "[Eden Entity](https://community.bistudio.com/wiki/Eden%20Entity) or [Eden ID](https://community.bistudio.com/wiki/Eden%20ID)"
                        },
                        {
                            "name": "class",
                            "description": "`String` - attribute name"
                        },
                        {
                            "name": "value",
                            "description": "`Anything` - new attribute value"
                        }
                    ],
                    "outline": "entity `set3DENAttribute` [class, value]",
                    "returns": "`Boolean` - `true` If the value was set"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/set3DENAttribute"
        },
        "configuration": {
            "label": "set3DENAttribute",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set entity [attributes](https://community.bistudio.com/wiki/Eden%20Editor%3A%20Entity%20Attributes).\nAn attribute is identified by its `**property**` (`**data**` when it is engine-drive attribute) value in config.\nFor the list of all attributes with their properties, see [Setting Attributes](https://community.bistudio.com/wiki/Eden_Editor%3A_Setting_Attributes%23Attributes).\n\n**IMPORTANT**: Attributes are available only within the Eden Editor workspace and cannot be accessed in scenario preview or exported scenario!",
            "examples": [
                {
                    "text": "```sqf\n\n// Set all selected objects as playable\nset3DENAttributes [[get3DENSelected \"Object\", \"ControlMP\", true]];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entitiesN",
                            "description": "`Array` of [Eden Entity](https://community.bistudio.com/wiki/Eden%20Entity) or [Eden ID](https://community.bistudio.com/wiki/Eden%20ID)"
                        },
                        {
                            "name": "classN",
                            "description": "`String` - attribute name"
                        },
                        {
                            "name": "valueN",
                            "description": "`Anything` - new attribute value"
                        }
                    ],
                    "outline": "`set3DENAttributes` [<nowiki/>[entities1, class1, value1], [entities2, class2, value2], ...]",
                    "returns": "`Boolean` - `true` if the value was set"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/set3DENAttributes"
        },
        "configuration": {
            "label": "set3DENAttributes",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the grid increment for the given transformation type.",
            "examples": [
                {
                    "text": "```sqf\nset3DENGrid [\"t\", 100]; // 100m movement increment\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`String` - name of transformation type. Can be:\n* `**\"r\"**` - Rotation\n* `**\"t\"**` - Translation\n* `**\"s\"**` - Scale"
                        },
                        {
                            "name": "value",
                            "description": "`Number` - transformation increment"
                        }
                    ],
                    "outline": "`set3DENGrid` [type, value]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/set3DENGrid"
        },
        "configuration": {
            "label": "set3DENGrid",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Toggle visibility of [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor) icons.",
            "examples": [
                {
                    "text": "```sqf\nset3DENIconsVisible [false, false]; // Hide all icons\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "showScene",
                            "description": "`Boolean` - visibility in the scene"
                        },
                        {
                            "name": "showMap ",
                            "description": "`Boolean` - visibility in the map"
                        }
                    ],
                    "outline": "`set3DENIconsVisible` [showMap, showScene]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/set3DENIconsVisible"
        },
        "configuration": {
            "label": "set3DENIconsVisible",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set layer for [Eden Entity](https://community.bistudio.com/wiki/Eden%20Entity).",
            "examples": [
                {
                    "text": "```sqf\n_myLayer = -1 add3DENLayer \"CTRG\";\nplayer set3DENLayer _myLayer;\n```"
                },
                {
                    "text": "```sqf\nplayer set3DENLayer -1; // Move to root\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "[Eden Entity](https://community.bistudio.com/wiki/Eden%20Entity)"
                        },
                        {
                            "name": "layerID",
                            "description": "`Number` - layer ID as returned by `add3DENLayer` command"
                        }
                    ],
                    "outline": "entity `set3DENLayer` layerID",
                    "returns": "`Boolean` - `true` if the entity was moved succesfully"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/set3DENLayer"
        },
        "configuration": {
            "label": "set3DENLayer",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Toggle visibility of [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor) lines.",
            "examples": [
                {
                    "text": "```sqf\nset3DENLinesVisible [false, false];// Hide all lines\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "showScene",
                            "description": "`Boolean` - visibility in the scene"
                        },
                        {
                            "name": "showMap ",
                            "description": "`Boolean` - visibility in the map"
                        }
                    ],
                    "outline": "`set3DENLinesVisible` [showMap, showScene]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/set3DENLinesVisible"
        },
        "configuration": {
            "label": "set3DENLinesVisible",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the new type of Logic object(s). For other objects use `set3DENObjectType`.",
            "examples": [
                {
                    "text": "```sqf\n[get3DENSelected \"logic\" select 0] set3DENLogicType \"MiscOR_F\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "objects",
                            "description": "`Array` of `Object`s"
                        },
                        {
                            "name": "classname",
                            "description": "`String` - name of the cfgVehicles class"
                        }
                    ],
                    "outline": "objects `set3DENLogicType` classname",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/set3DENLogicType"
        },
        "configuration": {
            "label": "set3DENLogicType",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set [scenario attribute](https://community.bistudio.com/wiki/Eden_Editor%3A_Scenario_Atttributes).\nAn attribute is identified by its `**property**` (`**data**` when it is engine-drive attribute) value in config. For the list of all attributes with their properties, see [Setting Attributes](https://community.bistudio.com/wiki/Eden_Editor%3A_Setting_Attributes%23Attributes).\n\n**IMPORTANT**: Attributes are available only within the Eden Editor workspace. They cannot be accessed in scenario preview or exported scenario!\n\n**IMPORTANT**: Changing the value of an attribute will also execute the expression defined in its config.",
            "examples": [
                {
                    "text": "```sqf\n\"Multiplayer\" set3DENMissionAttribute [\"respawn\", 3]; // Set respawn type to 3\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "section",
                            "description": "`String` - attribute section. See [[Eden_Editor:_Setting_Attributes#Sections_.26_Properties|Sections & Properties]]"
                        },
                        {
                            "name": "class",
                            "description": "`String` - attribute name"
                        },
                        {
                            "name": "value",
                            "description": "`Anything` - new attribute value"
                        }
                    ],
                    "outline": "section `set3DENMissionAttribute` [class, value]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/set3DENMissionAttribute"
        },
        "configuration": {
            "label": "set3DENMissionAttribute",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set [scenario attributes](https://community.bistudio.com/wiki/Eden_Editor%3A_Scenario_Atttributes).\nAn attribute is identified by its `**property**` (`**data**` when it is an engine-driven attribute) value in config.\nFor the list of all attributes with their properties, see [Mission Attributes](https://community.bistudio.com/wiki/Eden_Editor%3A_Setting_Attributes%23Scenario).\n\n**IMPORTANT**: Attributes are available only within the Eden Editor workspace. You cannot access them in scenario preview or exported scenario!",
            "examples": [
                {
                    "text": "```sqf\n\n// set respawn type to 3 and respawn delay to 10 seconds\nset3DENMissionAttributes [[\"Multiplayer\", \"respawn\", 3], [\"Multiplayer\", \"respawnDelay\", 10]];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "sectionN",
                            "description": "`String` - attribute section. See [[Eden_Editor:_Setting_Attributes#Sections_.26_Properties|Sections & Properties]]"
                        },
                        {
                            "name": "classN",
                            "description": "`String` - attribute name"
                        },
                        {
                            "name": "valueN",
                            "description": "`Anything` - new attribute value"
                        }
                    ],
                    "outline": "`set3DENMissionAttributes` [<nowiki/>[section1, class1, value1], ...]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/set3DENMissionAttributes"
        },
        "configuration": {
            "label": "set3DENMissionAttributes",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enables or disables trigger area visibility.",
            "examples": [
                {
                    "text": "```sqf\nset3DENModelsVisible [true, true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Boolean`"
                        },
                        {
                            "name": "scene",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "`set3DENModelsVisible` [map, scene]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/set3DENModelsVisible"
        },
        "configuration": {
            "label": "set3DENModelsVisible",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the classname of one or more given Eden Editor [objects](https://community.bistudio.com/wiki/Eden%20Editor%3A%20Object). For Logic objects use `set3DENLogicType`.",
            "examples": [
                {
                    "text": "```sqf\n[get3DENMouseOver select 1] set3DENObjectType \"B_crew_F\"; // turns object under cursor into a blufor crewman\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "objects",
                            "description": "`Array` of `Object`s"
                        },
                        {
                            "name": "classname",
                            "description": "`String` - name of the cfgVehicles class"
                        }
                    ],
                    "outline": "objects `set3DENObjectType` classname",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/set3DENObjectType"
        },
        "configuration": {
            "label": "set3DENObjectType",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Changes selection in [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor) to what is inside entities array. **WARNING**: This command will trigger the 3DEN event handler **\"OnSelectionChange\"**. Do not use it inside this event handler!",
            "examples": [
                {
                    "text": "```sqf\nset3DENSelected [0,5,3,6,7,12];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entities",
                            "description": "`Array` of [Eden Entity](https://community.bistudio.com/wiki/Eden%20Entity) or [Eden ID](https://community.bistudio.com/wiki/Eden%20ID)"
                        }
                    ],
                    "outline": "`set3DENSelected` entities",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/set3DENSelected"
        },
        "configuration": {
            "label": "set3DENSelected",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set simulation acceleration coefficient. May also be used to slow time in cutscenes.",
            "examples": [
                {
                    "text": "```sqf\nsetAccTime 0.1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "accFactor",
                            "description": "`Number` - time factor; 2 will make time go twice as fast, 0.5 half of it, etc"
                        }
                    ],
                    "outline": "`setAccTime` accFactor",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setAccTime"
        },
        "configuration": {
            "label": "setAccTime",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the collective pitch control to a specific position, regardless of input devices (until those are changed).\n* 0: collective fully down\n* ~0.7: approximate stable hover position\n* 1: collective fully up \n{{Feature|afm}}",
            "examples": [
                {
                    "text": "```sqf\nmyHelicopterRTD setActualCollectiveRTD 0.7;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "helicopterRTD ",
                            "description": "`ObjectRTD` - helicopter"
                        },
                        {
                            "name": "value",
                            "description": "`Number` - collective position"
                        }
                    ],
                    "outline": "helicopterRTD `setActualCollectiveRTD` value",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setActualCollectiveRTD"
        },
        "configuration": {
            "label": "setActualCollectiveRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets a wanted throttle position - works only on `player`'s vehicle.",
            "examples": [
                {
                    "text": "```sqf\nvehicle player setAirplaneThrottle 0.5;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "airplane",
                            "description": "`Object`"
                        },
                        {
                            "name": "value",
                            "description": "`Number` - wanted throttle"
                        }
                    ],
                    "outline": "airplane `setAirplaneThrottle` value",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/setAirplaneThrottle"
        },
        "configuration": {
            "label": "setAirplaneThrottle",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set owning side of the airport. [ID](https://community.bistudio.com/wiki/Arma%3A%20Airport%20IDs) is the number to identify which airport on the island you want to check.",
            "examples": [
                {
                    "text": "```sqf\n0 setAirportSide east;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "id",
                            "description": "`Number`"
                        },
                        {
                            "name": "side",
                            "description": "`Side`"
                        }
                    ],
                    "outline": "id `setAirportSide` side",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Object`"
                        },
                        {
                            "name": "side",
                            "description": "`Side`"
                        }
                    ],
                    "outline": "target `setAirportSide` side",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setAirportSide"
        },
        "configuration": {
            "label": "setAirportSide",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets custom ammo count in the currently loaded magazine of the specified weapon or muzzle.",
            "examples": [
                {
                    "text": "Set player's handgun magazine ammo count to 10 rounds:\n\n```sqf\nplayer setAmmo [handgunWeapon player, 10];\n```"
                },
                {
                    "text": "Set player's current weapon magazine ammo count to 1 round:\n\n```sqf\nplayer setAmmo [currentWeapon player, 1];\n```"
                },
                {
                    "text": "If player is a gunner in a vehicle, set current weapon magazine ammo count to 5 rounds:\n\n```sqf\nif (local vehicle player) then {\n\tvehicle player setAmmo [currentWeapon vehicle player, 5];\n} else {\n\thint \"Vehicle must be local to this machine for 'setAmmo' to work\";\n};\n```"
                },
                {
                    "text": "If you try to set more ammo than the magazine can hold, it will be clipped at default magazine capacity:\n\n```sqf\nplayer setAmmo [primaryWeapon player, 1000000]; // full mag with default ammo count\n```"
                },
                {
                    "text": "Some weapons has more than one muzzles:\n\n```sqf\n_marshall setAmmo [\"autocannon_40mm_CTWS\", 0];// won't work\n_marshall setAmmo [\"HE\", 0];// works\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - gunner or vehicle."
                        },
                        {
                            "name": "weaponOrMuzzle",
                            "description": "`String` - weapon name. Muzzle name in case the weapon has more than one muzzle, e.g. weapon with grenade launcher. See [CfgWeapons](https://community.bistudio.com/wiki/%3ACategory%3AWeapons) for muzzle names"
                        },
                        {
                            "name": "count",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "unit `setAmmo` [weaponOrMuzzle, count]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setAmmo"
        },
        "configuration": {
            "label": "setAmmo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set amount of ammo resources in cargo space of a rearm vehicle. Ammo resource is used to resupply vehicles that take ammo. Soldiers use individual magazines instead. Amount: 1 is full cargo.\n\nThe <u>actual</u> **quantity** to work with is determined by the model's class in `CfgVehicles`",
            "examples": [
                {
                    "text": "```sqf\n_ammoTruck1 setAmmoCargo 0.5;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicleName",
                            "description": "`Object`"
                        },
                        {
                            "name": "ammoCargo",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "vehicleName `setAmmoCargo` ammoCargo",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setAmmoCargo"
        },
        "configuration": {
            "label": "setAmmoCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set count of ammo in magazine on pylon (supports pylon name since Arma 3 v1.94)",
            "examples": [
                {
                    "text": "```sqf\nvehicle player setAmmoOnPylon [1, 12];\n```"
                },
                {
                    "text": "```sqf\nvehicle player setAmmoOnPylon [\"pylon1\", 12];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "pylon",
                            "description": "`Number` or `String` - pylon index (index starts from 1) or pylon name (see `getCompatiblePylonMagazines` Example 4)"
                        },
                        {
                            "name": "ammocount",
                            "description": "`Number` - ammo count"
                        }
                    ],
                    "outline": "vehicle `setAmmoOnPylon` [pylon, ammocount]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setAmmoOnPylon"
        },
        "configuration": {
            "label": "setAmmoOnPylon",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the angular velocity of the object in world space as a 3D vector. The units are in Rad/s and rotations are clockwise.\n**IMPORTANT**: Angular velocity is limited to a range of +-1000 Rad/s.",
            "examples": [
                {
                    "text": "```sqf\nmyHeli setAngularVelocity [0,0,1]; // will cause the helicopter to spin around a vertical line passing through its center\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "obj",
                            "description": "`Object`"
                        },
                        {
                            "name": "vector",
                            "description": "`Array` in format `Vector3D` - angular velocity of the object in world space."
                        }
                    ],
                    "outline": "obj `setAngularVelocity` vector",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setAngularVelocity"
        },
        "configuration": {
            "label": "setAngularVelocity",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the angular velocity of the object in model space as a 3D vector. The units are in Rad/s and rotations are clockwise.\n**IMPORTANT**: Angular velocity is limited to a range of +-1000 Rad/s.",
            "examples": [
                {
                    "text": "```sqf\nmyHeli setAngularVelocityModelSpace [0,0,1]; // will cause the helicopter to spin around its main rotor shaft\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "obj",
                            "description": "`Object`"
                        },
                        {
                            "name": "vector",
                            "description": "`Array` in format `Vector3D` - angular velocity of the object in model space"
                        }
                    ],
                    "outline": "obj `setAngularVelocityModelSpace` vector",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setAngularVelocityModelSpace"
        },
        "configuration": {
            "label": "setAngularVelocityModelSpace",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets a coefficient for animation speed (0.5 will play animations half the speed, 2 twice the speed).\n\nDoesn't affect upper body animations (reloading, etc.)",
            "examples": [
                {
                    "text": "```sqf\nplayer setAnimSpeedCoef 0.75;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "coef",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "unit `setAnimSpeedCoef` coef",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setAnimSpeedCoef"
        },
        "configuration": {
            "label": "setAnimSpeedCoef",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets custom eye accommodation camera aperture.\n\n{{Feature|informative|\nIf HDR is enabled, when `setAperture` `**value**` is used it also forces `setApertureNew` to the following values: [`**value**`, `**value**`, `**value**`, 1].\nExecute `setApertureNew` after `setAperture` to override this default mechanic.\n}}  \n**IMPORTANT**: \nThe aperture is set to default by the engine at the mission start. If you set it before the mission started it will reset like it never happened.\nMake sure you set it at the right time (see _Example 2_).",
            "examples": [
                {
                    "text": "```sqf\nsetAperture 0.3;\n```"
                },
                {
                    "text": "```sqf\n0 spawn { sleep 0.1; setAperture 100 };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "aperture",
                            "description": "`Number` - aperture value; a value {{hl"
                        }
                    ],
                    "outline": "`setAperture` aperture",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setAperture"
        },
        "configuration": {
            "label": "setAperture",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets custom camera aperture when HDR is enabled. Provided values should be set such as _minimum_ &lte; _standard_ &lte; _maximum_.\n**NOTE**: \n* This command has to be executed after mission start: be sure to use e.g <sqf inline>sleep 0.1; for it to take effect.\n* If HDR is enabled (it is by default), when `setAperture` `**value**` is used it also forces `setApertureNew` to the following values: [`**value**`, `**value**`, `**value**`, 1]. Execute `setApertureNew` _after_ `setAperture` to override this default mechanic.",
            "examples": [
                {
                    "text": "```sqf\n\nsetApertureNew [0.1, 0.2, 0.3, 1];\nsetApertureNew [-1];\t\t\t\t// reset to default\n\n```"
                },
                {
                    "text": "Simulate eye adjustment at night:\n\n```sqf\n\nsetDate [2016, 8, 10, 4, 0];\nsetApertureNew [2, 8, 14, 0.9];\n\n```"
                },
                {
                    "text": "Narrower range for a subtler effect:\n\n```sqf\n\nsetDate [2016, 8, 10, 4, 0];\nsetApertureNew [2, 5, 9, 0.8];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "minimum",
                            "description": "`Number` - minimum aperture"
                        },
                        {
                            "name": "standard",
                            "description": "`Number` - standard aperture"
                        },
                        {
                            "name": "maximum",
                            "description": "`Number` - maximum aperture"
                        },
                        {
                            "name": "luminance",
                            "description": "`Number` - standard luminance"
                        }
                    ],
                    "outline": "`setApertureNew` [minimum, standard, maximum, luminance]",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setApertureNew"
        },
        "configuration": {
            "label": "setApertureNew",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Stores passed number into [USERNAME].ArmaXProfile file, where it assigns it as a value to _armoryPoints_ entry. If entry doesn't exist, it is created.",
            "examples": [
                {
                    "text": "```sqf\nsetArmoryPoints (armoryPoints + 20);\n```"
                },
                {
                    "text": "```sqf\nsetArmoryPoints 3.14;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "points",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`setArmoryPoints` points",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setArmoryPoints"
        },
        "configuration": {
            "label": "setArmoryPoints",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a [Structured Text](https://community.bistudio.com/wiki/Structured%20Text) created from the given [structured](https://community.bistudio.com/wiki/Structured%20Text) text and sets [ attributes](https://community.bistudio.com/wiki/Structured_Text%23Attributes%20) to the given values.\n**IMPORTANT**: Even though command accepts plain `String` too, the argument should be [Structured Text](https://community.bistudio.com/wiki/Structured%20Text) in order for the set attributes to have an effect.\nAdditionally the result of the command should be fed to `composeText` (See _Example 1_) or `formatText`.",
            "examples": [
                {
                    "text": "```sqf\n\n_txt = text \"Red text, right align\";\n_txt setAttributes [\"color\", \"#FF0000\", \"align\", \"right\"];\nhint composeText [_txt];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "text",
                            "description": "`String` or [Structured Text](https://community.bistudio.com/wiki/Structured%20Text) - only passing [Structured Text](https://community.bistudio.com/wiki/Structured%20Text) has any effect"
                        },
                        {
                            "name": "nameN",
                            "description": "`String` - name of the attribute"
                        },
                        {
                            "name": "valueN",
                            "description": "`String` - value of the attribute"
                        }
                    ],
                    "outline": "text `setAttributes` [name1, value1, name2, value2, ...]",
                    "returns": "[Structured Text](https://community.bistudio.com/wiki/Structured%20Text)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setAttributes"
        },
        "configuration": {
            "label": "setAttributes",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets UAV autonomous mode.",
            "examples": [
                {
                    "text": "```sqf\nuav setAutonomous true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "uav",
                            "description": "`Object`"
                        },
                        {
                            "name": "bool",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "uav `setAutonomous` bool",
                    "returns": "`Boolean` - whether the operation was successful. Returns `false` when the object is not a uav."
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setAutonomous"
        },
        "configuration": {
            "label": "setAutonomous",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets individual unit behaviour **on every unit in a group**.\n**IMPORTANT**: This command doesn't set AI `Group` behaviour, see `setCombatBehaviour` or `setBehaviourStrong` for this.\n{{Feature|informative|See [AI Behaviour](https://community.bistudio.com/wiki/AI%20Behaviour) for details of the effect of this command on AI units.}}\n<spoiler text=\"Comparison of Behaviour commands\">\n{",
            "examples": [
                {
                    "text": "```sqf\n_group1 setBehaviour \"SAFE\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "groupOrUnit ",
                            "description": "`Group` or `Object` - unit or a `group`"
                        },
                        {
                            "name": "behaviour",
                            "description": "`String` - can be one of:\n* \"CARELESS\"\n* \"SAFE\"\n* \"AWARE\"\n* \"COMBAT\"\n* \"STEALTH\""
                        }
                    ],
                    "outline": "groupOrUnit `setBehaviour` behaviour",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setBehaviour"
        },
        "configuration": {
            "label": "setBehaviour",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets individual unit behaviour on every unit in a group and additionally tries to force this behaviour to the unit's group. Alternatively see `setCombatBehaviour`.\n{{Feature|informative|See [AI Behaviour](https://community.bistudio.com/wiki/AI%20Behaviour) for details of the effect of this command on AI units.}}\n<spoiler text=\"Comparison of Behaviour commands\">\n{",
            "examples": [
                {
                    "text": "```sqf\n_group1 setBehaviourStrong \"SAFE\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "groupName",
                            "description": "`Group` or `Object` - unit from the group"
                        },
                        {
                            "name": "behaviour",
                            "description": "`String` - can be one of:\n* \"CARELESS\"\n* \"SAFE\"\n* \"AWARE\"\n* \"COMBAT\"\n* \"STEALTH\""
                        }
                    ],
                    "outline": "groupName `setBehaviourStrong` behaviour",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setBehaviourStrong"
        },
        "configuration": {
            "label": "setBehaviourStrong",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets for how many seconds injured unit leaves blood trail.\nThe unit damage must be >= 0.1 for this command to have an effect, otherwise, the `getBleedingRemaining` will return 0 and no blood trail is left behind.",
            "examples": [
                {
                    "text": "```sqf\n_unit setBleedingRemaining 60;\n```"
                },
                {
                    "text": "```sqf\n\nplayer setDamage 0.25;\nplayer setBleedingRemaining 120;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "time",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "unit `setBleedingRemaining` time",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setBleedingRemaining"
        },
        "configuration": {
            "label": "setBleedingRemaining",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enable landing gear wheel brakes for a helicopter.\n* value 0: brakes off\n* value 1: brakes on\n\n* index 1: left wheels\n* index 2: right wheels\n* index 3: both sides\n{{Feature|afm}}\n**NOTE**: This command is implemented, but not fully supported.",
            "examples": [
                {
                    "text": "```sqf\nmyHelicopterRTD setBrakesRTD [1, 3];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "helicopterRTD",
                            "description": "`ObjectRTD` - helicopter"
                        },
                        {
                            "name": "value",
                            "description": "`Number` - value of the brakes"
                        },
                        {
                            "name": "wheelIndex",
                            "description": "`Number` - wheel index"
                        }
                    ],
                    "outline": "helicopterRTD `setBrakesRTD` [value, wheelIndex]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setBrakesRTD"
        },
        "configuration": {
            "label": "setBrakesRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set camera interest for given entity. Camera interest is by default 0. Any unit which is speaking has its camera interest raised to 50. Camera interest is used to focus camera to control depth of field in cutscenes. Combination of camera interest, unit position of the screen, unit movement, unit type, and some other properties is used to determine which unit to focus at. Higher camera interest increases the chance of the unit being focused.",
            "examples": [
                {
                    "text": "```sqf\n_soldier setCameraInterest 50;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "`Object`"
                        },
                        {
                            "name": "interest",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "entity `setCameraInterest` interest",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setCameraInterest"
        },
        "configuration": {
            "label": "setCameraInterest",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets camera shake default parameters.",
            "examples": [
                {
                    "text": "```sqf\nsetCamShakeDefParams [1, 2, 3, 4, 5, .5, .5];\n```"
                },
                {
                    "text": "```sqf\nsetCamShakeDefParams [100, 10, 10, 4, 5, 1, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "power",
                            "description": "`Number`"
                        },
                        {
                            "name": "duration",
                            "description": "`Number`"
                        },
                        {
                            "name": "frequency",
                            "description": "`Number`"
                        },
                        {
                            "name": "minSpeed",
                            "description": "`Number`"
                        },
                        {
                            "name": "minMass",
                            "description": "`Number`"
                        },
                        {
                            "name": "caliberCoefHit",
                            "description": "`Number`"
                        },
                        {
                            "name": "vehicleCoef",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`setCamShakeDefParams` [power, duration, frequency, minSpeed, minMass, caliberCoefHit, vehicleCoef]",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setCamShakeDefParams"
        },
        "configuration": {
            "label": "setCamShakeDefParams",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets camera shake parameters. Will not have any effect until shake is started via `addCamShake`.",
            "examples": [
                {
                    "text": "```sqf\nsetCamShakeParams [0.1, 1, 1, 1, true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "posCoef",
                            "description": "`Number` - strength of positional movement (how far the whole position can change in X,Y&Z). Should not be bigger than **0.1** to prevent the camera from moving into or behind the player"
                        },
                        {
                            "name": "vertCoef",
                            "description": "`Number` - strength of vertical camera pan (up/down), practical range: 0..10"
                        },
                        {
                            "name": "horzCoef",
                            "description": "`Number` - strength of horizontal camera pan (left/right), practical range: 0..10"
                        },
                        {
                            "name": "bankCoef",
                            "description": "`Number` - strength of camera tilt/bank, practical range: 0..20"
                        },
                        {
                            "name": "interpolation",
                            "description": "`Boolean` - if `true`, then transitions in the different shaking directions will be smoother"
                        }
                    ],
                    "outline": "`setCamShakeParams` [posCoef, vertCoef, horzCoef, bankCoef, interpolation]",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setCamShakeParams"
        },
        "configuration": {
            "label": "setCamShakeParams",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets thermal vision mode for currently used camera. This command only works with `camCreate` created camera that is currently the main camera for the player (see Example 2).",
            "examples": [
                {
                    "text": "```sqf\ntrue setCamUseTI 1;\n```"
                },
                {
                    "text": "_Predator_ vision:\n\n```sqf\n_cam = \"camera\" camCreate [0, 0, 0];\n_cam camSetTarget player;\n_cam camSetRelPos [0, 1, 1.5];\n_cam cameraEffect [\"Internal\", \"Back\"];\n_cam camCommit 0;\ntrue setCamUseTI 7;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "state",
                            "description": "`Boolean` - `true` to enable, `false` to disable the effect"
                        },
                        {
                            "name": "modeIndex",
                            "description": "`Number` - TI mode. Can be:\n* 0 - White Hot\n* 1 - Black Hot\n* 2 - Light Green Hot / Darker Green cold\n* 3 - Black Hot / Darker Green cold\n* 4 - Light Red Hot /Darker Red Cold\n* 5 - Black Hot / Darker Red Cold\n* 6 - White Hot . Darker Red Cold\n* 7 - Thermal (Shade of Red and Green, Bodies are white)"
                        }
                    ],
                    "outline": "state `setCamUseTI` modeIndex",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setCamUseTI"
        },
        "configuration": {
            "label": "setCamUseTI",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Mark a unit as captive. If unit is a vehicle, commander is marked. A captive unit:\n* is seen as belonging to the `civilian` `Side`\n* will not be fired upon\n* will still shoot at its real side's enemies\n* will make its killer earn/lose `score`/`rating` as usual\n* will not get its weapons removed (see `removeAllWeapons`)\n* will not trigger \"detected by\" conditions for its original `Side`.\n**NOTE**: The number used as status can be retrieved by `captiveNum` to keep track of the captivity status at a finer resolution (e.g. handcuffed, grouped, etc).",
            "examples": [
                {
                    "text": "```sqf\n\n_soldier1 setCaptive true;\nside _soldier1;\t\t\t// returns civilian\nside group _soldier1;\t// returns e.g blufor\n\n```"
                },
                {
                    "text": "```sqf\n\n_soldier1 setCaptive 1;\ncaptive _soldier1;\t\t// returns true\n\n_soldier1 setCaptive 42;\ncaptive _soldier1;\t\t// returns true\n\n_soldier1 setCaptive 0;\ncaptive _soldier1;\t\t// returns false\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        },
                        {
                            "name": "status",
                            "description": "`Boolean` - `true` means `captive`"
                        }
                    ],
                    "outline": "unitName `setCaptive` status",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        },
                        {
                            "name": "statusNumber",
                            "description": " `Number` - zero means non-captive, a non-zero value means `captive`; see `captiveNum`"
                        }
                    ],
                    "outline": "unitName `setCaptive` statusNumber",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setCaptive"
        },
        "configuration": {
            "label": "setCaptive",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Changes the center of mass of an object smoothly during the given time (in seconds). A time of zero (or using the alternative syntax) means an immediate change.",
            "examples": [
                {
                    "text": "```sqf\nmyObject setCenterOfMass [[0,-1,0], 0.5];\n```"
                },
                {
                    "text": "```sqf\nmyObject setCenterOfMass [0,-1,0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "myObject",
                            "description": "`Object`"
                        },
                        {
                            "name": "centerOfMass",
                            "description": "`Array` - [x,y,z] offset relative to the model centre"
                        },
                        {
                            "name": "time",
                            "description": "`Number` - transition time, 0 for instant center of mass transfer"
                        }
                    ],
                    "outline": "myObject `setCenterOfMass` [centerOfMass, time]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "myObject",
                            "description": "`Object`"
                        },
                        {
                            "name": "centerOfMass",
                            "description": "`Array` - [x,y,z] offset relative to the model centre"
                        }
                    ],
                    "outline": "myObject `setCenterOfMass` centerOfMass",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setCenterOfMass"
        },
        "configuration": {
            "label": "setCenterOfMass",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Switches collision lights of a vehicle on/off.",
            "examples": [
                {
                    "text": "```sqf\nheli setCollisionLight true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "set",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "vehicle `setCollisionLight` set",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setCollisionLight"
        },
        "configuration": {
            "label": "setCollisionLight",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets an individual unit entity behaviour (main syntax) or a group entity behaviour (alternative syntax). The group in this case is a `Group` entity and not a simple collection of units. To retrieve unit or group behaviour see `combatBehaviour`. The behaviour is one of: \n* \"CARELESS\"\n* \"SAFE\"\n* \"AWARE\"\n* \"COMBAT\"\n* \"STEALTH\"\n{{Feature|informative|See [AI Behaviour](https://community.bistudio.com/wiki/AI%20Behaviour) for details of the effect of this command on AI units. Group behaviour usually is \"CARELESS\" or \"SAFE\"}}\n\n<spoiler text=\"Comparison of Behaviour commands\">\n{",
            "examples": [
                {
                    "text": "```sqf\nunit1 setCombatBehaviour \"SAFE\";\n```"
                },
                {
                    "text": "```sqf\ngroup1 setCombatBehaviour \"CARELESS\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - AI unit"
                        },
                        {
                            "name": "behaviour",
                            "description": "`String` - see description"
                        }
                    ],
                    "outline": "unit `setCombatBehaviour` behaviour",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group` - AI group"
                        },
                        {
                            "name": "behaviour",
                            "description": "`String` - see description"
                        }
                    ],
                    "outline": "group `setCombatBehaviour` behaviour",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setCombatBehaviour"
        },
        "configuration": {
            "label": "setCombatBehaviour",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets AI [ group](https://community.bistudio.com/wiki/Group%20) combat mode (engagement rules). For individual unit's combat mode see `setUnitCombatMode`. Mode may be one of the following: \n* `**\"BLUE\"**` : Never fire, keep formation\n* `**\"GREEN\"**` : Hold fire, keep formation\n* `**\"WHITE\"**` : Hold fire, engage at will/loose formation\n* `**\"YELLOW\"**` : Fire at will, keep formation\n* `**\"RED\"**` : Fire at will, engage at will/loose formation\nSee [Combat Modes](https://community.bistudio.com/wiki/Combat%20Modes) for more information on combat modes.",
            "examples": [
                {
                    "text": "```sqf\n_group1 setCombatMode \"BLUE\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group` or `Object` - if the argument is unit `Object`, unit's current group is used."
                        },
                        {
                            "name": "mode",
                            "description": "`String` - see description"
                        }
                    ],
                    "outline": "group `setCombatMode` mode",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setCombatMode"
        },
        "configuration": {
            "label": "setCombatMode",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the {{Link|https://en.wikipedia.org/wiki/Magnetic_declination|declination angle}} of player's compass, which is the difference between magnetic north and true north.",
            "examples": [
                {
                    "text": "```sqf\nsetCompassDeclination rad 10; // declination angle is 10 degrees\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "angleRad",
                            "description": "`Scalar` - Declination angle in radians. Use 0 to reset it to default."
                        }
                    ],
                    "outline": "`setCompassDeclination` angleRad",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setCompassDeclination"
        },
        "configuration": {
            "label": "setCompassDeclination",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "This command sets random heading on the player's compass (both in map and in 3D view) with given frequency, which is also randomised.",
            "examples": [
                {
                    "text": "Set compass to oscillate every second within -90/+90 degrees:\n\n```sqf\nsetCompassOscillation [rad 90, 1, 1];\n```"
                },
                {
                    "text": "Change heading every 60 to 90 seconds:\n\n```sqf\nsetCompassOscillation [rad 180, 60, 90];\n```"
                },
                {
                    "text": "Make compass go crazy:\n\n```sqf\nsetCompassOscillation [rad 360, 0.1, 0.2];\n```"
                },
                {
                    "text": "Reset to default behaviour:\n\n```sqf\nsetCompassOscillation [-1, 0, 0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "angle",
                            "description": "`Number` - heading deviation angle in `rad`ians; the random angle will be picked up from `**[-angle...+angle]**` range"
                        },
                        {
                            "name": "frequencyMin",
                            "description": "`Number` - lower bound of heading change in seconds"
                        },
                        {
                            "name": "frequencyMax",
                            "description": "`Number` - higher bound of heading change in seconds"
                        }
                    ],
                    "outline": "`setCompassOscillation` [angle, frequencyMin, frequencyMax]",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setCompassOscillation"
        },
        "configuration": {
            "label": "setCompassOscillation",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the distance to keep to the vehicle which is **in front**.\n\n*This command has to be applied to all vehicles in a convoy in order to have a separation of, for example, 50 m. \n*Vehicles in a convoy can also have different distances.\n*It's recommended that small values (<10m) should only be used for slowly moving convoys, otherwise AI driven vehicles will leave the road frequently to avoid collisions",
            "examples": [
                {
                    "text": "```sqf\nvehicle setConvoySeparation 20;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "distance",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "vehicle `setConvoySeparation` distance",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setConvoySeparation"
        },
        "configuration": {
            "label": "setConvoySeparation",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Limits or sets **`local` `player`-controlled** vehicle's speed through cruise control.\n\n**NOTE**: \n* this command only works on CarX, TankX, ShipX simulation vehicles\n* this command is implemented using a PID controller overwriting the vehicle's thrust/brakes input\n\n\n{{{!}} class=\"wikitable\"\n! Speed Limiter\n! Cruise Control\n{{!}}- style=\"vertical-align: top\"\n{{!}}\n* the vehicle does not accelerate by itself\n* manually accelerating is required to move forward\n* accelerating beyond set speed limit is restricted by the PID controller\n* applying brakes does not disable Speed Limiter\n* behaviour:\n** if the speed is over 120% the set limit, the vehicle will apply 100% of braking and limit acceleration to 0%\n** if the speed is below 80% the set limit, the acceleration and braking are untouched\n** between 80 and 120%, the PID controller limits the acceleration and applies brakes if required\n{{!}}\n* the vehicle accelerates by itself\n* manually accelerating is possible\n* accelerating above set speed limit is possible\n* applying brakes disables Cruise Control\n* behaviour:\n** if the speed is over 120% the set limit, the vehicle will apply 100% of braking\n** if the speed is below 80% the set limit, the vehicle will apply 100% of acceleration\n** between 80 and 120%, the PID controller manages the speed\n{{!}}}\n\n**IMPORTANT**: This command should only be called to _change_ values and **not** be called every frame, as it resets the PID controller.",
            "examples": [
                {
                    "text": "```sqf\nvehicle player setCruiseControl [50, true]; // sets cruise control to 50 km/h\n```"
                },
                {
                    "text": "```sqf\nvehicle player setCruiseControl [5, false]; // limits player's vehicle speed to 5 km/h\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - the vehicle to limit; `local` `player`'s vehicle (<sqf inline>vehicle player)"
                        },
                        {
                            "name": "speed",
                            "description": "`Number` - desired/top speed in km/h. 0 to disable any setting. Only positives values are valid, negative values will make the vehicle unable to move forward"
                        },
                        {
                            "name": "autoThrust",
                            "description": "`Boolean`\n* `true` - cruise Control: the vehicle will maintain this speed until brakes is applied or driver dies or leaves the vehicle\n* `false` - Speed Limiter: the vehicle will not accelerate above set speed"
                        }
                    ],
                    "outline": "vehicle `setCruiseControl` [speed, autoThrust]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setCruiseControl"
        },
        "configuration": {
            "label": "setCruiseControl",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets maximal ([ATL](https://community.bistudio.com/wiki/Position%23PositionATL)) height to which curator camera can move.",
            "examples": [
                {
                    "text": "```sqf\nmyCurator setCuratorCameraAreaCeiling 50;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curatorObj",
                            "description": "`Object` - [Curator](https://community.bistudio.com/wiki/Arma%203%20Curator) module"
                        },
                        {
                            "name": "height",
                            "description": "`Number` - [ATL](https://community.bistudio.com/wiki/Position%23PositionATL), in metres"
                        }
                    ],
                    "outline": "curatorObj `setCuratorCameraAreaCeiling` height",
                    "returns": "`Nothing`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/setCuratorCameraAreaCeiling"
        },
        "configuration": {
            "label": "setCuratorCameraAreaCeiling",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets coef for some action (coef have to be bigger than -1 000 000, anything lower is considered as disabled action).",
            "examples": [
                {
                    "text": "```sqf\ncuratorModule setCuratorCoef [\"Place\", 1];\n```"
                },
                {
                    "text": "```sqf\ncuratorModule setCuratorCoef [\"Delete\", -1e10];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curatorObj",
                            "description": "`Object` - curator module"
                        },
                        {
                            "name": "action",
                            "description": "`String` - can be one of:\n* \"Place\"\n* \"Edit\"\n* \"Delete\"\n* \"Destroy\"\n* \"Group\"\n* \"Synchronize\""
                        },
                        {
                            "name": "coef",
                            "description": "`Number` or `Boolean`"
                        }
                    ],
                    "outline": "curatorObj `setCuratorCoef` [action, coef]",
                    "returns": "`Nothing`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/setCuratorCoef"
        },
        "configuration": {
            "label": "setCuratorCoef",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set whether curator can edit in all editing areas (true) or outside of them (false).",
            "examples": [
                {
                    "text": "```sqf\ncuratorModule setCuratorEditingAreaType true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curatorObj",
                            "description": "`Object` - curator module."
                        },
                        {
                            "name": "bool",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "curatorObj `setCuratorEditingAreaType` bool",
                    "returns": "`Nothing`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/setCuratorEditingAreaType"
        },
        "configuration": {
            "label": "setCuratorEditingAreaType",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Clear and set the curator selected items. Leave the items array empty to clear curator selection.",
            "examples": [
                {
                    "text": "```sqf\nsetCuratorSelected [unit1, group1, [group1, waypointIndex], markerName1];\n```"
                },
                {
                    "text": "```sqf\nsetCuratorSelected [vehicle1, unit1, unit2, unit3, unit4, group1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "items",
                            "description": "`Array` - flat array of items to set; items can be an `Object`, `Group`, `Array` format `Waypoint`, or `String` (marker)"
                        }
                    ],
                    "outline": "`setCuratorSelected` items",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setCuratorSelected"
        },
        "configuration": {
            "label": "setCuratorSelected",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set the list of objects in the given selection preset. Only `Object` is supported in selection presets, unlike `curatorSelected` which also returns the selected `Group`, `Waypoint`, and Marker `String`",
            "examples": [
                {
                    "text": "```sqf\n1 setCuratorSelectionPreset [object1, object2];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "numkey",
                            "description": "`Number` - number key under which the selection preset is saved"
                        },
                        {
                            "name": "objects",
                            "description": "`Array` - objects to save to the selection preset"
                        }
                    ],
                    "outline": "numkey `setCuratorSelectionPreset` objects",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setCuratorSelectionPreset"
        },
        "configuration": {
            "label": "setCuratorSelectionPreset",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets cost of waypoints (used for placing, editing and deleting).",
            "examples": [
                {
                    "text": "```sqf\nmyCurator setCuratorWaypointCost 0.1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curatorObj",
                            "description": "`Object` - curator module"
                        },
                        {
                            "name": "cost",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "curatorObj `setCuratorWaypointCost` cost",
                    "returns": "`Nothing`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/setCuratorWaypointCost"
        },
        "configuration": {
            "label": "setCuratorWaypointCost",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets given channel as current chat channel. Scripted way of selecting desired channel on the UI.\nThe given channel may be disabled (see `enableChannel`), this is why this command returns boolean, `true` on success or `false` on failure. \n{{{!}} class=\"wikitable align-center\"\n! colspan=\"16\" {{!}} [Channel ID](https://community.bistudio.com/wiki/Channel%20IDs) number correspondence\n{{!}}-\n{{!}} colspan=\"6\" {{!}} Default Channels\n{{!}} colspan=\"10\" {{!}} Custom Channels\n{{!}}- style=\"font-size: .9em\"\n{{!}} Global\n{{!}} Side\n{{!}} Command\n{{!}} Group\n{{!}} Vehicle\n{{!}} Direct\n{{!}} CC&nbsp;1\n{{!}} CC&nbsp;2\n{{!}} CC&nbsp;3\n{{!}} CC&nbsp;4\n{{!}} CC&nbsp;5\n{{!}} CC&nbsp;6\n{{!}} CC&nbsp;7\n{{!}} CC&nbsp;8\n{{!}} CC&nbsp;9\n{{!}} CC&nbsp;10\n{{!}}-\n{{!}} 0\n{{!}} 1\n{{!}} 2\n{{!}} 3\n{{!}} 4\n{{!}} 5\n{{!}} 6\n{{!}} 7\n{{!}} 8\n{{!}} 9\n{{!}} 10\n{{!}} 11\n{{!}} 12\n{{!}} 13\n{{!}} 14\n{{!}} 15\n{{!}}}\nFor Custom Radio (see `radioChannelCreate`)",
            "examples": [
                {
                    "text": "```sqf\n_isDirectSelected = setCurrentChannel 5; // sets Direct channel as current active\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "channelID",
                            "description": "`Number` - [channel ID](https://community.bistudio.com/wiki/Channel%20IDs)"
                        }
                    ],
                    "outline": "`setCurrentChannel` channelID",
                    "returns": "`Boolean` - `true` on success"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setCurrentChannel"
        },
        "configuration": {
            "label": "setCurrentChannel",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set the task as a current task of the person.",
            "examples": [
                {
                    "text": "```sqf\nplayer setCurrentTask tskKillSpongebob;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - the unit having the task"
                        },
                        {
                            "name": "task",
                            "description": "`Task` - the task you want to select"
                        }
                    ],
                    "outline": "object `setCurrentTask` task",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setCurrentTask"
        },
        "configuration": {
            "label": "setCurrentTask",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the currently active waypoint for a group.",
            "examples": [
                {
                    "text": "```sqf\n_grp setCurrentWaypoint [_grp, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "groupName",
                            "description": "`Object` or `Group`"
                        },
                        {
                            "name": "waypoint",
                            "description": "`Array` - format `Waypoint`"
                        }
                    ],
                    "outline": "groupName `setCurrentWaypoint` waypoint",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/setCurrentWaypoint"
        },
        "configuration": {
            "label": "setCurrentWaypoint",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set custom aim precision coefficient for weapon sway",
            "examples": [
                {
                    "text": "```sqf\nplayer setCustomAimCoef 3;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "coef",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "unit `setCustomAimCoef` coef",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setCustomAimCoef"
        },
        "configuration": {
            "label": "setCustomAimCoef",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Defines custom mission text that is sent to [Arma 3: Analytics](https://community.bistudio.com/wiki/Arma%203%3A%20Analytics).",
            "examples": [
                {
                    "text": "```sqf\nsetCustomMissionData [\"someData\", \"someMoreData\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "data",
                            "description": "`Array` - array of strings. A maximum of five strings is allowed, each string with a maximum length of 16 characters"
                        }
                    ],
                    "outline": "`setCustomMissionData` data",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setCustomMissionData"
        },
        "configuration": {
            "label": "setCustomMissionData",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets value of the specified custom sound controller to be used in [simple expression](https://community.bistudio.com/wiki/simple%20expression)s in config. Returns `true` if value was set to the controller, `false` if command fails, for example if vehicle is not a transport or controller name is not recognised.\n**IMPORTANT**:  Custom sound controller name is <u>case sensitive</u> and of the following format:\n\n```sqf\nformat [\"CustomSoundController%1\", _number];\n```\n\nWhere `**_number**` is a number from 1 to `getCustomSoundControllerCount` (currently 32)",
            "examples": [
                {
                    "text": "Change value of CustomSoundController1 to 12\n\n```sqf\nsetCustomSoundController [vehicle player, \"CustomSoundController1\", 12];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - a transport type vehicle. Does not work on characters or buildings"
                        },
                        {
                            "name": "controller",
                            "description": "`String` - name of the custom sound controller - needs to be full string e.g \"CustomSoundController1\". It goes from \"CustomSoundController1\" to \"CustomSoundController32\""
                        },
                        {
                            "name": "value",
                            "description": "`Number` - desired value"
                        }
                    ],
                    "outline": "`setCustomSoundController` [vehicle, controller, value]",
                    "returns": "`Boolean` - `true` on success"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setCustomSoundController"
        },
        "configuration": {
            "label": "setCustomSoundController",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Add virtual custom weight to a helicopter's center of gravity. This can be used to simulate added internal payload for specific scenarios, and affects the flight model.\n{{Feature|afm}}",
            "examples": [
                {
                    "text": "```sqf\nmyHelicopterRTD setCustomWeightRTD 120;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "helicopterRTD ",
                            "description": "`ObjectRTD` - helicopter"
                        },
                        {
                            "name": "weight",
                            "description": "`Number` - weight (kilograms)"
                        }
                    ],
                    "outline": "helicopterRTD `setCustomWeightRTD` weight",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setCustomWeightRTD"
        },
        "configuration": {
            "label": "setCustomWeightRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "{{{!}} class=\"wikitable float-right align-center-col-2\"\n{{!}}+ \n! {{Link|:Category: Event Handlers|Event Handler}}\n! Triggered\n{{!}}-\n{{!}} `**Hit**`\n{{!}} {{Icon|unchecked}}\n{{!}}-\n{{!}} `**HandleDamage**`\n{{!}} {{Icon|unchecked}}\n{{!}}-\n{{!}} `**Killed**`\n{{!}} {{Icon|checked}}\n{{!}}-\n{{!}} `**MPKilled**`\n{{!}} {{Icon|checked}}\n{{!}}}\n\nSets the damage (or lack thereof) of an object/unit. The alternative syntax allows to skip destruction effects for vehicles and buildings.\n**Arma 3**: \nSince Arma 3 v2.12 it is possible to influence trees, poles and walls fall direction by supplying the _killer_ entity param - the fall direction will then be away from _killer_<nowiki/>'s position.\nIn multiplayer, the _killer_ argument is ignored if the command is not executed on the server unless it targets trees, walls or poles - see {{Link|#Syntax 2}} and _Example 3_.",
            "examples": [
                {
                    "text": "```sqf\n_soldier1 setDamage 1;\n```"
                },
                {
                    "text": "```sqf\n_house1 setDamage [1, false];\n```"
                },
                {
                    "text": "```sqf\n\n// executed on a client\n_remoteVehicle setDamage [1, true, player];\t// killer is not considered if the command is not called on the server - the vehicle still gets destroyed\n_tree setDamage [1, true, player];\t\t\t// the tree is destroyed and falls away from the player\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "damage",
                            "description": "`Number` - range 0..1, 0 = pristine/healthy condition, 1 = entirely destroyed/killed"
                        }
                    ],
                    "outline": "object `setDamage` damage",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "damage",
                            "description": "`Number` - range 0..1, 0 = pristine/healthy condition, 1 = entirely destroyed/killed"
                        },
                        {
                            "name": "useEffects",
                            "description": "`Boolean` (Optional, default `true`) - `false` to skip destruction effects"
                        },
                        {
                            "name": "{{Icon|serverExec|28}} killer",
                            "description": "`Object` - (Optional, default `objNull`) the entity that caused the damage. If the damage leads to the death of the unit, the killer will be used as the object that caused the kill.\n* it can be used to show \"killed by player\" in debriefing statistics and kill messages in the chat (if death messages are enabled).\n* it will alter the killer's `rating` as if the killer directly killed the unit\n* it will be listed as <sqf inline>_killer parameter in the [Killed](https://community.bistudio.com/wiki/Arma%203%3A%20Event%20Handlers%23Killed) event handler\n* MP restricted similar to `setShotParents`, will be ignored unless executed on the server or headless client in MP"
                        },
                        {
                            "name": "{{Icon|serverExec|28}} instigator",
                            "description": "`Object` - (Optional, default `objNull`) the person that instigated the damage.\n* if a tank is a killer, the tank gunner that pulled the trigger is instigator\n* it will be listed as <sqf inline>_instigator parameter in the [Killed](https://community.bistudio.com/wiki/Arma%203%3A%20Event%20Handlers%23Killed) event handler\n* MP restricted similar to `setShotParents`, will be ignored unless executed on the server or headless client in MP\n** the above MP restriction does not apply to trees, poles and walls"
                        }
                    ],
                    "outline": "object `setDamage` [damage, useEffects, killer, instigator]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setDamage"
        },
        "configuration": {
            "label": "setDamage",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Entirely identical to `setDamage` that was introduced to fix a typographical error in the command's name.\n**NOTE**: See `setDamage` for this command's documentation.",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setDammage"
        },
        "configuration": {
            "label": "setDammage",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets mission date and time. Players joining after mission start will get the current server `date` including the year.\n**IMPORTANT**: \nWhile the game creates February 29th in a leap year, it removes December 31st.\n\nFor example, <sqf inline>setDate [1980,12,31,12,0] will result in the game jumping to [1981,1,1,12,0] as 1980 is a leap year.",
            "examples": [
                {
                    "text": "```sqf\nsetDate [1986, 2, 25, 16, 0]; // 4:00pm February 25, 1986\n```"
                },
                {
                    "text": "```sqf\n\n// Set the real date:\nif (isServer) then\n{\n\twaitUntil { time > 0 };\n\t[systemTime select [0, 5]] remoteExec [\"setDate\"];\n};\n\n```"
                },
                {
                    "text": "Using `setDate` with an incorrect (like negative or exceeding) value will still work properly:\n\n```sqf\n\nprivate _date = date;\n_date set [3, 25];\t// set hour to 25\nsetDate _date;\t\t// date = next day 1am\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "date",
                            "description": "`Array` format `Date`"
                        }
                    ],
                    "outline": "`setDate` date",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setDate"
        },
        "configuration": {
            "label": "setDate",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets debriefing title, text, subtitle, picture and background for a mission ending.\nThe end type could be the engine-defined (\"CONTINUE\", \"KILLED\", \"LOSER\", \"END1\", \"END2\", \"END3\", \"END4\", \"END5\", \"END6\"), config-defined (see [CfgDebriefing](https://community.bistudio.com/wiki/Debriefing%23Configuration)) or, with an alternative syntax of this command, any `String`.\nGiven texts will be used to replace the corresponding texts on the debriefing screen.\n\n{{Feature|important|In order to benefit from alternative syntax functionality, there will have to be at least **three** arguments passed to the command; **two** arguments will trigger the old behaviour.}}\n[[File:endMission.jpg|400px]] [[File:failMission.jpg|400px]]",
            "examples": [
                {
                    "text": "```sqf\n\n_currentObjective = (taskDescription currentTask player) select 2;\n\"endDeath\" setDebriefingText [\"You Lose\", \"All of your men were killed while assaulting the \" + _currentObjective];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "endType",
                            "description": "`String` - engine type"
                        },
                        {
                            "name": "title",
                            "description": "`String` - title text on the debriefing screen"
                        },
                        {
                            "name": "description",
                            "description": "`String` - description text on the debriefing screen"
                        }
                    ],
                    "outline": "endType `setDebriefingText` [title, description]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "endType",
                            "description": "`String` - any name"
                        },
                        {
                            "name": "title",
                            "description": "`String` - title text on the debriefing screen"
                        },
                        {
                            "name": "description",
                            "description": "`String` - description text on the debriefing screen"
                        },
                        {
                            "name": "subtitle",
                            "description": "`String` - subtitle text on the debriefing screen (**must** be defined in order to trigger this syntax of the command)"
                        },
                        {
                            "name": "picture",
                            "description": "`String` - (Optional) title picture"
                        },
                        {
                            "name": "background",
                            "description": "`String` - (Optional) background picture"
                        }
                    ],
                    "outline": "endType `setDebriefingText` [title, description, subtitle, picture, background]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setDebriefingText"
        },
        "configuration": {
            "label": "setDebriefingText",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the position and direction for the camera used after camera is set on no object (log out view when leaving MP game for example)",
            "examples": [
                {
                    "text": "```sqf\nsetDefaultCamera [[5000, 5000, 200], [1, 1, -1]];\n```"
                },
                {
                    "text": "Lift camera 100m up above current player position and point downwards:\n\n```sqf\nsetDefaultCamera [ATLToASL (player modelToWorld [0, 0, 100]), [0, 0, -1]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) - position of the camera"
                        },
                        {
                            "name": "direction",
                            "description": "`Array` - format `Vector3D` - direction of the camera"
                        }
                    ],
                    "outline": "`setDefaultCamera` [position, direction]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setDefaultCamera"
        },
        "configuration": {
            "label": "setDefaultCamera",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set the destination for path planning of the pilot.\n\nPossible values for planningMode are:\n\n* \"DoNotPlan\" - used when not moving\n* \"DoNotPlanFormation\" - used in formation when simple path testing is used\n* \"LEADER PLANNED\" - used for formation leader (full path finding used)\n* \"LEADER DIRECT\" - used for DirectGo (like getin, supply)\n* \"FORMATION PLANNED\" - used in formation when full path finding is used\n* \"VEHICLE PLANNED\" - used for vehicle driver\n\nWorks best when used on `agents`. Using \"LEADER PLANNED\" will trigger `**\"PathCalculated\"**` [ Event Handler](https://community.bistudio.com/wiki/Arma_3%3A_Event_Handlers%23PathCalculated%20)",
            "examples": [
                {
                    "text": "```sqf\nbob setDestination [screenToWorld [0.5,0.5], \"LEADER PLANNED\", true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "position",
                            "description": "`Array` format `Position`"
                        },
                        {
                            "name": "planningMode",
                            "description": "`String`"
                        },
                        {
                            "name": "forceReplan",
                            "description": "`Boolean` - specifies if replanning of the path should be forced."
                        }
                    ],
                    "outline": "object `setDestination` [position, planningMode, forceReplan]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setDestination"
        },
        "configuration": {
            "label": "setDestination",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the detail texture map blend pars. Allows for smooth transition between detailed and undetailed terrain texture at distance.\n* If _noDetail_ &gt; _fullDetail_, the texture detail will incur smooth transition in the area between the thresholds.\n* If _noDetail_ &lt;= _fullDetail_, there will be obvious visible edge between texture detail changes at _fullDetail_ distance.",
            "examples": [
                {
                    "text": "```sqf\nsetDetailMapBlendPars [20, 50];\n```"
                },
                {
                    "text": "```sqf\nsetDetailMapBlendPars ([[20, 50], [300, 600]] select (currentWeapon player in [\"Binocular\", \"Rangefinder\", \"Laserdesignator\"]));\n```"
                },
                {
                    "text": "Reset to default:\n\n```sqf\nsetDetailMapBlendPars [-1, -1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "fullDetail",
                            "description": "`Number` - threshold distance in metres up to which the terrain will have full texture detail"
                        },
                        {
                            "name": "noDetail",
                            "description": "`Number` - threshold distance in metres after which the texture detail will be switched off"
                        }
                    ],
                    "outline": "`setDetailMapBlendPars` [fullDetail, noDetail]",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setDetailMapBlendPars"
        },
        "configuration": {
            "label": "setDetailMapBlendPars",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set text of a log record.",
            "examples": [
                {
                    "text": "```sqf\nplayer setDiaryRecordText [[\"diary\", _diaryRec], [\"Kill all enemies.\", \"The enemies are the bad guys. Kill them because you are the good guy.\"]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "subject",
                            "description": "`String`"
                        },
                        {
                            "name": "diaryRecord",
                            "description": "[Diary Record](https://community.bistudio.com/wiki/Diary%20Record)"
                        },
                        {
                            "name": "title",
                            "description": "`String`"
                        },
                        {
                            "name": "text",
                            "description": "`String`"
                        },
                        {
                            "name": "icon",
                            "description": "`String` - (Optional) icon to show next to the title. \"\" to remove."
                        }
                    ],
                    "outline": "unit `setDiaryRecordText` [[subject, diaryRecord], [title, text, icon]]",
                    "returns": "Nothing"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setDiaryRecordText"
        },
        "configuration": {
            "label": "setDiaryRecordText",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets a picture to be displayed on the right of the `Diary` subject. The picture can also be set during custom `Diary` subject [ creation](https://community.bistudio.com/wiki/createDiarySubject%20), but this command also allows to change icon for the fixed subjects, like \"Tasks\", \"Diary\", \"Units\", \"Players\" and \"Statistics\".",
            "examples": [
                {
                    "text": "```sqf\nplayer setDiarySubjectPicture [\"Diary\", \"\\A3\\ui_f\\data\\map\\markers\\nato\\o_mech_inf.paa\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit"
                        },
                        {
                            "name": "subject",
                            "description": "`String` - diary subject (see `Diary`)"
                        },
                        {
                            "name": "picture",
                            "description": "`String` - icon path"
                        }
                    ],
                    "outline": "unit `setDiarySubjectPicture` [subject, picture]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setDiarySubjectPicture"
        },
        "configuration": {
            "label": "setDiarySubjectPicture",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets object heading. Angles are measured in degrees clockwise from north; the regular range goes from 0 to 360 (0° = N, 90° = E, 180° = S, 270° = W). Negative angles represent counter-clockwise angles.\n**IMPORTANT**: This command resets the object's `velocity` and `vectorUp`!\n**NOTE**: In _some_ earlier titles (Operation Flashpoint?), this command was {{Icon|localEffect|32}}.",
            "examples": [
                {
                    "text": "```sqf\nmyUnit setDir 45; // will set myUnit to face North-East\n```"
                },
                {
                    "text": "```sqf\nmyUnit setDir -675; // will also set myUnit to face North-East (= 45-360-360)\n```"
                },
                {
                    "text": "```sqf\n\nMyUnit setDir 30;\nMyUnit setFormDir 30; // needed for AI to keep the given direction\n\n```"
                },
                {
                    "text": "```sqf\n\n// provided _myMine is local\n_myMine setDir 45;\n_myMine setPosWorld getPosWorld _myMine;\n\n// or\n[_myMine, 45] remoteExec [\"setDir\"];\n\n```"
                },
                {
                    "text": "```sqf\n\n// Sets the direction of an object relative to a parent object's direction\n_child setDir (_parentDir + (_childDir - _parentDir))\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "heading",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "object `setDir` heading",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setDir"
        },
        "configuration": {
            "label": "setDir",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the orientation of a location. The location's area and map icon (if its type uses an icon) will be rotated to this orientation.",
            "examples": [
                {
                    "text": "```sqf\n_location = createLocation [\"VegetationPalm\", getPos player, 200, 200];\n_location setText \"Benargee's Palm Tree\";\n_location setDirection 45;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "location",
                            "description": "`Location`"
                        },
                        {
                            "name": "direction",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "location `setDirection` direction",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setDirection"
        },
        "configuration": {
            "label": "setDirection",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set the icon to be shown in 2D editor for the specified editor object. If maintain size is false,icon will not scale depending on the scale,of the map. If maintain size is a number,the icon will maintain size,if map scale is below that number. is3D,show line and priority are,optional.\n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "[object,texture,color,offset,width,height,maintain size?,angle,string identifier,shadow,is3D,draw line?,priority]",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "map `setDrawIcon` [object,texture,color,offset,width,height,maintain size?,angle,string identifier,shadow,is3D,draw line?,priority]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setDrawIcon"
        },
        "configuration": {
            "label": "setDrawIcon",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the path to follow for AI driver. Note that `unitReady` will return `true` even if AI is still driving through the points.\n\nUsing any other _move_ command (e.g <sqf inline>_vehicle move getPosATL _vehicle) or `doStop` will stop the effect of this command.\n**IMPORTANT**: This command does **not** work if the vehicle doesn't have an [AI steering component](https://community.bistudio.com/wiki/useAISteeringComponent) defined in its config, or if the component is disabled. Thus, it never works on air vehicles and boats which don't use steering components. Only land vehicles may be compatible. (cars, tanks, APCs, etc.)\n**NOTE**: For the command to work properly, the unit must either be an [agent](https://community.bistudio.com/wiki/createAgent), or in the case of normal AI, have been stopped using `doStop`.",
            "examples": [
                {
                    "text": "```sqf\nmyVehicle setDriveOnPath [getMarkerPos \"wp1\", getMarkerPos \"wp2\"];\n```"
                },
                {
                    "text": "```sqf\n\nprivate _points = allMapMarkers apply { getMarkerPos _x; }; // getting all marker positions\n{ _x pushBack 15; } forEach _points; // setting speed\nmyVehicle setDriveOnPath _points;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicleName",
                            "description": "`Object`"
                        },
                        {
                            "name": "points",
                            "description": "`Array` - list of `Position`s to format [x,y,z] OR to format [x,y,z, speed], speed being **in m/s**."
                        }
                    ],
                    "outline": "vehicleName `setDriveOnPath` points",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setDriveOnPath"
        },
        "configuration": {
            "label": "setDriveOnPath",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set interval of emitting particles from particle source. In Arma 3 hardcoded limit of how many particles can exist at the same time is {{Link",
            "examples": [
                {
                    "text": "```sqf\n_source setDropInterval 0.05;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "particleSource",
                            "description": "`Object`"
                        },
                        {
                            "name": "interval",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "particleSource `setDropInterval` interval",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setDropInterval"
        },
        "configuration": {
            "label": "setDropInterval",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets activation distance of [Arma 3: Dynamic Simulation](https://community.bistudio.com/wiki/Arma%203%3A%20Dynamic%20Simulation) for given category.",
            "examples": [
                {
                    "text": "```sqf\n\"Group\" setDynamicSimulationDistance 1000;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "category",
                            "description": "`String` - can be one of:\n* `**\"Group\"**` - infantry units. Set to a reasonable distance, player should not see disabled infantry units. Default value 500m\n* `**\"Vehicle\"**` - vehicles with crew. Set to a reasonable distance, player should not see disabled vehicles. Default value 350m\n* `**\"EmptyVehicle\"**` - all vehicles without crew. Separated from Props as Empty Vehicles have often more complex damage states and selective destruction. Their activation distance should be larger than the one used for Props. Default value 250m\n* `**\"Prop\"**` - static objects. Anything from a small tin can to a building. Default value 50m"
                        },
                        {
                            "name": "distance",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "category `setDynamicSimulationDistance` distance",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setDynamicSimulationDistance"
        },
        "configuration": {
            "label": "setDynamicSimulationDistance",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets activation distance multiplier of [Arma 3: Dynamic Simulation](https://community.bistudio.com/wiki/Arma%203%3A%20Dynamic%20Simulation) for the given class",
            "examples": [
                {
                    "text": "```sqf\n\"IsMoving\" setDynamicSimulationDistanceCoef 3;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "class",
                            "description": "`String` - multiplier class, currently only:\n* `**\"IsMoving\"**` - Multiplies the entity activation distance by set value if the entity is moving. Default: 2"
                        },
                        {
                            "name": "multiplier",
                            "description": "`Number` - distance multiplier"
                        }
                    ],
                    "outline": "class `setDynamicSimulationDistanceCoef` multiplier",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setDynamicSimulationDistanceCoef"
        },
        "configuration": {
            "label": "setDynamicSimulationDistanceCoef",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets map mode to MAP,3D or PREVIEW. \n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "mode",
                            "description": "`String`"
                        }
                    ],
                    "outline": "map `setEditorMode` mode",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setEditorMode"
        },
        "configuration": {
            "label": "setEditorMode",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "This command defines the level of access a user has to editor objects.\n\n\"objects\" is an array of either [Editor Objects](https://community.bistudio.com/wiki/Editor%20Object) (eg [\"_unit_0\"]) or actual [Game Objects](https://community.bistudio.com/wiki/Object) (eg [player]). If the array is empty then the command will automatically parse all editor objects.\n\n\"editorType\" is the editor type to effect (eg \"unit\", \"vehicle\", \"center\") or \"\" for all types.\n\n\"condition\" is an executable string that must evaluate to true or false. If true, the scope of the evaluated editor object will be modified. \"_x\" can be used in the string as reference to the ingame representation of the currently processed array member.\n\n\"scope\" is one of \"HIDE\", \"VIEW\", \"SELECT\", \"LINKTO\", \"LINKFROM\", \"ALLNODRAG\", \"ALLNOTREE\", \"ALLNOCOPY\", \"ALLNOSELECT\" or \"ALL\".\n\n\"subordinatesAlso\" is a boolean value. If true then subordinates in the editor will be assigned the same scope as the parent.\n**NOTE**: Some Old Editor Command",
            "examples": [
                {
                    "text": "```sqf\n_map setEditorObjectScope [[],\"vehicle\", \"side effectiveCommander _x != side player\", \"HIDE\", false];\n```"
                },
                {
                    "text": "```sqf\n((findDisplay 128) displayCtrl 51) setEditorObjectScope [[\"_unit_0\"], \"\", \"true\", \"ALLNODRAG\", false];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "[objects, editorType, condition, scope, subordinatesAlso]",
                            "description": "`Array`"
                        },
                        {
                            "name": "objects",
                            "description": "`Array` of `Object`s and/or [Editor Objects](https://community.bistudio.com/wiki/Editor%20Object)"
                        },
                        {
                            "name": "editorType",
                            "description": "`String`"
                        },
                        {
                            "name": "condition",
                            "description": "`String`"
                        },
                        {
                            "name": "scope",
                            "description": "`String`"
                        },
                        {
                            "name": "subordinatesAlso",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "map `setEditorObjectScope` [objects, editorType, condition, scope, subordinatesAlso]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setEditorObjectScope"
        },
        "configuration": {
            "label": "setEditorObjectScope",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "The statement is executed when the trigger or waypoint is activated and the effects are launched depending on the result.\n\n*If the result is a [boolean](https://community.bistudio.com/wiki/Boolean) and `true`, the effect is launched.\n*If the result is an `object`, the effect is launched if the result is the player or the player vehicle.\n*If the result is an [array](https://community.bistudio.com/wiki/Array), the effect is launched if the result contains the player or the player vehicle.",
            "examples": [
                {
                    "text": "```sqf\n_triggerObj setEffectCondition \"thisList\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "trigger",
                            "description": "`Object`"
                        },
                        {
                            "name": "statement",
                            "description": "`String`"
                        }
                    ],
                    "outline": "trigger `setEffectCondition` statement",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Waypoint` - `Array` format `Waypoint`"
                        },
                        {
                            "name": "statement",
                            "description": "`String`"
                        }
                    ],
                    "outline": "waypoint `setEffectCondition` statement",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setEffectCondition"
        },
        "configuration": {
            "label": "setEffectCondition",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets `effectiveCommander` of the given vehicle. Effective commander is the person who commands the vehicle, i.e. gives commands to the driver.\nEvery time a person gets in or out of a vehicle, effective commander eligibility is recalculated by the engine based on the current `crew`.\nUse this command to force desired effective commander.",
            "examples": [
                {
                    "text": "```sqf\nvehicle player setEffectiveCommander player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "person",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "vehicle `setEffectiveCommander` person",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setEffectiveCommander"
        },
        "configuration": {
            "label": "setEffectiveCommander",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the RPM of given engines. {{Feature|afm}}",
            "examples": [
                {
                    "text": "```sqf\nmyHelicopter setEngineRpmRTD [1337, -1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "helicopter",
                            "description": "`Object`"
                        },
                        {
                            "name": "rpm",
                            "description": "`Number` - wanted RPM"
                        },
                        {
                            "name": "engineIndex",
                            "description": "`Number` - index of the engine\n* engine index 0: engine #1\n* engine index 1: engine #2\n* engine index 2: engine #3\n* engine index -1: all engines"
                        }
                    ],
                    "outline": "helicopter `setEngineRpmRTD` [rpm, engineIndex]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setEngineRpmRTD"
        },
        "configuration": {
            "label": "setEngineRpmRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set person's face. For a list of available faces, check [:Category:CfgIdentities](https://community.bistudio.com/wiki/%3ACategory%3ACfgIdentities).\n{{Columns|3|\n* [[Operation Flashpoint: CfgIdentities#Faces|Operation Flashpoint faces]]\n* [[ArmA: Armed Assault: CfgIdentities#Faces|Armed Assault faces]]\n* [[Arma 2: CfgIdentities#Faces|Arma 2 faces]]\n* [[Arma 3: CfgIdentities#Faces|Arma 3 faces]]\n* [[Take On Helicopters: CfgIdentities#Faces|{{tkoh}} faces]]\n}}",
            "examples": [
                {
                    "text": "```sqf\nsoldier1 setFace \"WhiteHead_02\";\n```"
                },
                {
                    "text": "Set persistent face for a unit in multiplayer:\n\n```sqf\nthis setFace \"AsianHead_A3_02\"; // in the init field if the unit already exists in Eden Editor\n```\n\n\n```sqf\nif (isServer) then { [_unit, \"AsianHead_A3_02\"] remoteExec [\"setFace\", 0, _unit] }; // if the unit is created later in the game\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "person",
                            "description": "`Object`"
                        },
                        {
                            "name": "face",
                            "description": "`String`"
                        }
                    ],
                    "outline": "person `setFace` face",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setFace"
        },
        "configuration": {
            "label": "setFace",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets facial animation phase (eye blinking).\n**Arma 3**: This command is not functional in Arma 3.",
            "examples": [
                {
                    "text": "```sqf\n_soldier1 setFaceAnimation 0.5;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "blink",
                            "description": "`Number` - range 0..1"
                        }
                    ],
                    "outline": "unit `setFaceAnimation` blink",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setFaceAnimation"
        },
        "configuration": {
            "label": "setFaceAnimation",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the person's fatigue, from 0 to 1.",
            "examples": [
                {
                    "text": "```sqf\nplayer setFatigue 1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "value",
                            "description": "`Number` - in 0..1 _available_ fatigue range: 0 is fully energised, 1 is fully exhausted"
                        }
                    ],
                    "outline": "unit `setFatigue` value",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setFatigue"
        },
        "configuration": {
            "label": "setFatigue",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enable/disable object as a feature/landmark. Possible feature types:\n* 0 - Feature disabled\n* 1 - Object is always visible within object view distance\n* 2 - Object is always visible within terrain view distance\nThe limit is 500 map/static objects and 200 dynamic objects including config features and auto features (flying helicopters, airplanes). When limit is reached, function returns false.",
            "examples": [
                {
                    "text": "Set a building to be always rendered:\n\n```sqf\nbuilding setFeatureType 2;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "type",
                            "description": "`Number` - the desired feature type"
                        }
                    ],
                    "outline": "object `setFeatureType` type",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setFeatureType"
        },
        "configuration": {
            "label": "setFeatureType",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets flag position on the flag pole. To animate flag use `BIS_fnc_animateFlag`.",
            "examples": [
                {
                    "text": "```sqf\n_flag1 setFlagAnimationPhase 0.5;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "flag",
                            "description": "`Object` - flag pole of the type `**\"FlagCarrier\"**`"
                        },
                        {
                            "name": "phase",
                            "description": "`Number` - flag position on the flag pole according to the given animation phase, where 0 is the bottom of the flag pole, 1 is the top of the flag pole."
                        }
                    ],
                    "outline": "flag `setFlagAnimationPhase` phase",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setFlagAnimationPhase"
        },
        "configuration": {
            "label": "setFlagAnimationPhase",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets flag owner. When owner is set to `objNull` or any object other than a unit of class [[Models_%26_Classnames:_CfgVehicles_-_Class_Man|man]] or [logic](https://community.bistudio.com/wiki/Game_Logic), flag is returned to the flagpole. A flag owned by a logic has no visual representation.",
            "examples": [
                {
                    "text": "```sqf\n_flag1 setFlagOwner _soldier1;\n```"
                },
                {
                    "text": "To return the flag back to the flag pole:\n\n```sqf\n//Method 1: (set owner null)\nflag _flagCarrier setFlagOwner objNull;\n//Method 2: (set the flag mast as the owner)\nflag _flagCarrier setFlagOwner flag _flagCarrier;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "flag",
                            "description": "`Object`"
                        },
                        {
                            "name": "owner",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "flag `setFlagOwner` owner",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setFlagOwner"
        },
        "configuration": {
            "label": "setFlagOwner",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets flag `Side`. A flag may be taken by any unit that is enemy to the side that owns the flag. Just like with `setFlagTexture`, if the command executed where unit is [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality) effect of the command will be global and [JIP](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Join%20In%20Progress) compatible.",
            "examples": [
                {
                    "text": "```sqf\n_flag1 setFlagSide east;\n```"
                },
                {
                    "text": "Capturable OPFOR flag:\n\n```sqf\nprivate _flag = \"FlagPole_F\" createVehicle position player;\n_flag setFlagTexture \"\\A3\\Data_F\\Flags\\Flag_CSAT_CO.paa\";\n_flag setFlagSide east;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "flag",
                            "description": "`Object`"
                        },
                        {
                            "name": "side",
                            "description": "`Side`"
                        }
                    ],
                    "outline": "flag `setFlagSide` side",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setFlagSide"
        },
        "configuration": {
            "label": "setFlagSide",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets flag texture.",
            "examples": [
                {
                    "text": "```sqf\n_flagE setFlagTexture \"\\ca\\misc\\data\\sever_vlajka.paa\";\n```"
                },
                {
                    "text": "```sqf\n_flagW setFlagTexture \"\\ca\\misc\\data\\usa_vlajka.paa\";\n```"
                },
                {
                    "text": "```sqf\nflag1 setFlagTexture \"\\A3\\Data_F\\Flags\\Flag_red_CO.paa\";\n```"
                },
                {
                    "text": "```sqf\n_customFlag setFlagTexture \"myMissionFlag.paa\";\n```"
                },
                {
                    "text": "```sqf\n_flag_Arma_3 setFlagTexture \"\\a3\\ui_f\\data\\Logos\\arma3_expansion_ca.paa\";\n```"
                },
                {
                    "text": "Capturable OPFOR flag:\n\n```sqf\n\nprivate _flag = \"FlagPole_F\" createVehicle position player;\n_flag setFlagTexture \"\\A3\\Data_F\\Flags\\Flag_CSAT_CO.paa\";\n_flag setFlagSide east;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "flag",
                            "description": "`Object` - a flag pole"
                        },
                        {
                            "name": "texture",
                            "description": "`String` - flag texture. If texture is `**\"\"**`, flag is not drawn. Custom texture can be used:\n* Prior Arma 3: Dimension 200x200, file extension .jpg\n* Since Arma 3: Dimension 512×256, file extension .paa"
                        }
                    ],
                    "outline": "flag `setFlagTexture` texture",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setFlagTexture"
        },
        "configuration": {
            "label": "setFlagTexture",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Smoothly change the fog over given time (in seconds). See also `fogParams`.\n**Arma 3**: This command is MP synchronised, if executed on server, the changes will propagate globally. If executed on client effect is temporary as it will soon change to the server setting.",
            "examples": [
                {
                    "text": "```sqf\n15 setFog 0.5;\n```"
                },
                {
                    "text": "Force no fog:\n\n```sqf\n\n0 setFog 0;\n// forceWeatherChange; // change is immediate\n999999 setFog 0;\n\n```"
                },
                {
                    "text": "```sqf\n\n// Arma 3 examples:\n0 setFog [1, 0.01, 0];\n0 setFog [1, -1, 70];\t// mountain fog, starts from 70m ASL and thickens the higher you climb\n0 setFog [1, 1, 60];\t// valley fog, starts from 60m ASL and thickens the lower you descend\n0 setFog [1, 1, 0];\t\t// fooooog on the waaaater\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "time",
                            "description": "`Number` - transition time to the new value"
                        },
                        {
                            "name": "fog",
                            "description": "`Number` - fog density in range 0..1"
                        }
                    ],
                    "outline": "time `setFog` fog",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "time",
                            "description": "`Number` - transition time to the new value"
                        },
                        {
                            "name": "fogValue",
                            "description": "`Number` - normal `fog` value that represents fog density at _fogBase_ level, in range 0..1"
                        },
                        {
                            "name": "fogDecay",
                            "description": "`Number` - decay of fog density with altitude, in range -1..1; a negative value means a \"ceiling\" fog"
                        },
                        {
                            "name": "fogBase",
                            "description": "`Number` - base altitude ([ASL](https://community.bistudio.com/wiki/Position%23PositionASL)) of fog (in meters), in range -5000..5000"
                        }
                    ],
                    "outline": "time `setFog` [fogValue, fogDecay, fogBase]",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Global Effect",
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/setFog"
        },
        "configuration": {
            "label": "setFog",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "{{Wiki|stub}} {{Feature|afm}}",
            "examples": [
                {
                    "text": "```sqf\nsomething1 setForceGeneratorRTD something2;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "value",
                            "description": "`Number`"
                        },
                        {
                            "name": "arr",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "value `setForceGeneratorRTD` arr",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setForceGeneratorRTD"
        },
        "configuration": {
            "label": "setForceGeneratorRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set group formation.",
            "examples": [
                {
                    "text": "```sqf\n_groupOne setFormation \"LINE\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Object` or `Group`"
                        },
                        {
                            "name": "formation",
                            "description": "`String` - can be one of:\n{{Columns|2|\n* \"COLUMN\"\n* \"STAG COLUMN\"\n* \"WEDGE\"\n* \"ECH LEFT\"\n* \"ECH RIGHT\"\n* \"VEE\"\n* \"LINE\"\n* {{GVI|arma1|1.00"
                        }
                    ],
                    "outline": "group `setFormation` formation",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setFormation"
        },
        "configuration": {
            "label": "setFormation",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set the current task of the formation member. **Arma 2**: This command is not available in Arma 2.",
            "examples": [
                {
                    "text": "```sqf\n_unit setFormationTask \"MOVE\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "task",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `setFormationTask` task",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setFormationTask"
        },
        "configuration": {
            "label": "setFormationTask",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets group formation heading. Accepted heading range is 0 to 360. Formation is facing this direction unless enemy is seen. When group is moving, this value is overridden by movement direction. If the new direction is noticeably different from the old direction (approx +/- 15 degrees), units will change positions changing `formationDirection`.",
            "examples": [
                {
                    "text": "```sqf\n_group1 setFormDir 180;\n```"
                },
                {
                    "text": "```sqf\n_unit1 setFormDir random 360;\n```"
                },
                {
                    "text": "```sqf\n//center the main turret\n(group BIS_Crew1) setFormDir (getDir BIS_Armor);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Object` or `Group`"
                        },
                        {
                            "name": "heading",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "group `setFormDir` heading",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setFormDir"
        },
        "configuration": {
            "label": "setFormDir",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets how friendly a side is with another. The friendliness is set for one side, not for the other.  See also [Side Relations](https://community.bistudio.com/wiki/Side%20Relations).\n\n**Arma 3**: Since Arma 3 this command can be used mid-mission. Before that it was intended to be used on mission start only, as changing value during mission could cause unexpected errors in AI behaviour (especially for groups already knowing about \"switched to enemy\" groups).",
            "examples": [
                {
                    "text": "```sqf\nwest setFriend [resistance, 0]; // west will not like resistance from now on\n```"
                },
                {
                    "text": "```sqf\n\nresistance setFriend [east, 0];\neast setFriend [resistance, 0]; // both are enemies\n\nresistance setFriend [east, 1];\neast setFriend [resistance, 0]; // resistance likes east, but east does not like resistance\n\n```"
                },
                {
                    "text": "```sqf\nwest setFriend [west, 0]; // free for all deathmatch! works with west/blufor, east/opfor, independent/resistance and civilian\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "side1",
                            "description": "`Side`"
                        },
                        {
                            "name": "side2",
                            "description": "`Side`"
                        },
                        {
                            "name": "value",
                            "description": "`Number` - a value smaller than 0.6 results in being enemy, otherwise _side1_ is friendly to _side2_"
                        }
                    ],
                    "outline": "side1 `setFriend` [side2, value]",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Global Effect",
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/setFriend"
        },
        "configuration": {
            "label": "setFriend",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set if given team member was inserted directly from editor.",
            "examples": [
                {
                    "text": "```sqf\n_teamMember setFromEditor true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "teamMember",
                            "description": "[Team Member](https://community.bistudio.com/wiki/Team%20Member)"
                        },
                        {
                            "name": "fromEditor",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "teamMember `setFromEditor` fromEditor",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setFromEditor"
        },
        "configuration": {
            "label": "setFromEditor",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set variable to given value in the variable space of given FSM.\n\nThe FSM handle is the number returned by the `execFSM` command.",
            "examples": [
                {
                    "text": "```sqf\n\n_handle = execFSM \"test.fsm\";\n_handle setFSMVariable [\"_foo\", 23]; // sets variable _foo in the FSM to 23\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "handle",
                            "description": "`Number` - FSM handle"
                        },
                        {
                            "name": "name",
                            "description": "`String` - name of the FSM variable"
                        },
                        {
                            "name": "value",
                            "description": "`Anything` - new value of the FSM variable"
                        }
                    ],
                    "outline": "handle `setFSMVariable` [name, value]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setFSMVariable"
        },
        "configuration": {
            "label": "setFSMVariable",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets fuel level.",
            "examples": [
                {
                    "text": "```sqf\n_jeepOne setFuel 0.5;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "amount",
                            "description": "`Number` - value 0 (empty) to 1 (full)"
                        }
                    ],
                    "outline": "vehicle `setFuel` amount",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setFuel"
        },
        "configuration": {
            "label": "setFuel",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets fuel amount in cargo space of refuel vehicles. Note that the carrying capacity of each side's refuel trucks differ.",
            "examples": [
                {
                    "text": "```sqf\n_refuelTruck setFuelCargo 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle ",
                            "description": "`Object`"
                        },
                        {
                            "name": "amount ",
                            "description": "`Number` - from 0 (empty) to 1 (full)"
                        }
                    ],
                    "outline": "vehicle `setFuelCargo` amount",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setFuelCargo"
        },
        "configuration": {
            "label": "setFuelCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the fuel consumption coefficient, which is a multiplier of the [fuel consumption rate](https://community.bistudio.com/wiki/CfgVehicles_Config_Reference%23fuelConsumptionRate) in config. It doesn't affect fuel leakage or refueling.",
            "examples": [
                {
                    "text": "```sqf\nmyTank setFuelConsumptionCoef 10; // consume 10x more fuel than default\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle ",
                            "description": "`Object`"
                        },
                        {
                            "name": "coef",
                            "description": "`Number` - consumption coefficient (between 0 and 1000). Values larger than 1 increase fuel consumption, and values between 0 and 1 decrease fuel consumption. 0 disables fuel consumption"
                        }
                    ],
                    "outline": "vehicle `setFuelConsumptionCoef` coef",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setFuelConsumptionCoef"
        },
        "configuration": {
            "label": "setFuelConsumptionCoef",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets group icon properties.",
            "examples": [
                {
                    "text": "```sqf\n\n_target setGroupIcon [_icon, \"hc_selectedEnemy\"];\n_target setGroupIcon [_icon, \"flag\"];\n\n_group setGroupIcon [_icon, _iconsClass, _offset];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group`"
                        },
                        {
                            "name": "id",
                            "description": "`Number` - the icon ID returned by `addGroupIcon`"
                        },
                        {
                            "name": "icon",
                            "description": "`String` - class name of desired icon from CfgGroupIcons"
                        },
                        {
                            "name": "offset",
                            "description": "`Array` - (Optional, default [0,0]) X and Y offsets of the icon in form [offsetX, offsetY]"
                        }
                    ],
                    "outline": "group `setGroupIcon` [id, icon, offset]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setGroupIcon"
        },
        "configuration": {
            "label": "setGroupIcon",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set group icons parameters.",
            "examples": [
                {
                    "text": "```sqf\n_grp setGroupIconParams [[0.9,0,0,1], \"The Group\", 1.25, false];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group`"
                        },
                        {
                            "name": "properties",
                            "description": "`Array` in format [color, text, scale, visibility, WPvisibility WPcolor], where:\n* color: `Array` - icon color in format [r,g,b,a]\n* text: `String` - icon text\n* scale: `Number` - icon scale\n* visibility: `Boolean` - icon visibility\n* WPvisibility: `Boolean` - waypoint visibility\n* WPcolor: `Array` - waypoint color in format [r,g,b,a]"
                        }
                    ],
                    "outline": "group `setGroupIconParams` properties",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setGroupIconParams"
        },
        "configuration": {
            "label": "setGroupIconParams",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets if group icons raise `onGroupIconClick`, `onGroupIconOverEnter` and `onGroupIconOverLeave` events.",
            "examples": [
                {
                    "text": "```sqf\nsetGroupIconsSelectable true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "selectable",
                            "description": "`Boolean` - setting to `true` makes the icon selectable"
                        }
                    ],
                    "outline": "`setGroupIconsSelectable` selectable",
                    "returns": "`Nothing` (`objNull` prior to Arma 3 v1.92)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setGroupIconsSelectable"
        },
        "configuration": {
            "label": "setGroupIconsSelectable",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets if group icons added with `addGroupIcon` are visible on map and in the HUD.",
            "examples": [
                {
                    "text": "```sqf\nsetGroupIconsVisible [true, true];\n(group player) addGroupIcon [\"b_inf\", [0, 0]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "showOnMap",
                            "description": "`Boolean` - `true` to show on map. Default is `false`"
                        },
                        {
                            "name": "showOnHUD",
                            "description": "`Boolean` - `true` to show on HUD. Default is `false`"
                        }
                    ],
                    "outline": "`setGroupIconsVisible` [showOnMap, showOnHUD]",
                    "returns": "`Nothing` (prior to Arma 3 v1.94 this command returned `Object` of [null](https://community.bistudio.com/wiki/objNull) value)"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setGroupIconsVisible"
        },
        "configuration": {
            "label": "setGroupIconsVisible",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the group radio callsign, how it will be displayed in radio chat. Two groups on the same side **cannot** have the same callsign (possible on different sides) - see _Example 4_.\n\nThe identity setup can consist of format keywords (marked with **%**) and param keywords taken from **CfgWorlds** config.\nFormatting is almost like using the `format` command but with some special group keywords (see _Example 2_).\n\n\n<spoiler text=\"Show Arma 3 values table\">\n{{{!}} class=\"wikitable\"\n! %GroupSquad\n! %GroupPlatoon\n! %GroupCompany\n! %GroupNames\n! %GroupColors\n{{!}}- style=\"vertical-align: top\"\n{{!}}\n* \"Squad1\" &rarr; 1\n* \"Squad2\" &rarr; 2\n* \"Squad3\" &rarr; 3\n* \"Squad4\" &rarr; 4\n{{!}}\n* \"Platoon1\" &rarr; 1\n* \"Platoon2\" &rarr; 2\n* \"Platoon3\" &rarr; 3\n* \"Platoon4\" &rarr; 4\n{{!}}\n{{Columns|2|\n* \"CompanyAlpha\" &rarr; Alpha\n* \"CompanyBravo\" &rarr; Bravo\n* \"CompanyCharlie\" &rarr; etc.\n* \"CompanyDelta\"\n* \"CompanyEcho\"\n* \"CompanyFoxtrot\"\n* \"CompanyGolf\"\n* \"CompanyHotel\"\n* \"CompanyIndia\"\n* \"CompanyKilo\"\n* \"CompanyLima\"\n* \"CompanyMike\"\n* \"CompanyNovember\"\n* \"CompanyOscar\"\n* \"CompanyPapa\"\n* \"CompanyQuebec\"\n* \"CompanyRomeo\"\n* \"CompanySierra\"\n* \"CompanyTango\"\n* \"CompanyUniform\"\n* \"CompanyVictor\"\n* \"CompanyWhiskey\"\n* \"CompanyXray\" &rarr; X-Ray\n* \"CompanyYankee\"\n* \"CompanyZulu\"\n}}\n{{!}}\n{{Columns|2|\n* \"Alpha\"\n* \"Bravo\"\n* \"Charlie\"\n* \"Delta\"\n* \"Echo\"\n* \"Foxtrot\"\n* \"Golf\"\n* \"Hotel\"\n* \"November\"\n* \"Kilo\"\n* \"Yankee\"\n* \"Zulu\"\n* \"Convoy\"\n* \"Buffalo\"\n* \"Guardian\"\n* \"Two\"\n* \"Three\"\n* \"Fox\"\n}}\n{{!}}\n* \"GroupColor0\" &rarr; (nothing)\n* \"GroupColor1\" &rarr; Black\n* \"GroupColor2\" &rarr; Red\n* \"GroupColor3\" &rarr; Green\n* \"GroupColor4\" &rarr; Blue\n* \"GroupColor5\" &rarr; Yellow\n* \"GroupColor6\" &rarr; Orange\n* \"GroupColor7\" &rarr; Pink\n* \"Six\" &rarr; Six\n{{!}}}<spoiler text=\"Show OFP values table\">\n{{{!}} class=\"wikitable\"\n! Letter\n! Colour\n{{!}}- style=\"vertical-align: top\"\n{{!}}\n{{Columns|2|\n* \"Alpha\"\n* \"Bravo\"\n* \"Charlie\"\n* \"Delta\"\n* \"Echo\"\n* \"Foxtrot\"\n* \"Golf\"\n* \"Hotel\"\n* \"Kilo\"\n* \"Yankee\"\n* \"Zulu\"\n* \"Buffalo\"\n* \"Convoy\"\n* \"Guardian\"\n* \"November\"\n* \"Two\"\n* \"Three\"\n* \"Fox\"\n}}\n{{!}}\n* \"GroupColor0\" &rarr; (nothing)\n* \"GroupColor1\" &rarr; Black\n* \"GroupColor2\" &rarr; Red\n* \"GroupColor3\" &rarr; Green\n* \"GroupColor4\" &rarr; Blue\n* \"GroupColor5\" &rarr; Yellow\n* \"GroupColor6\" &rarr; Orange\n* \"GroupColor7\" &rarr; Pink\n* \"Six\" &rarr; Six\n{{!}}}**Operation Flashpoint**: \n* In **Operation Flashpoint**, the group ID cannot be freely decided and format must be [letter, colour, picture] or [letter, colour] - _nameFormat_ **cannot** be a custom text - see _Example 3_.\n* The radio callsign strings can be overwritten in a mission by writing [[Stringtable.csv|Stringtable]] entries of the same name. Some entry names:* STR_CFG__GRPNAMES__**ALPHA**\n* STR_CFG__GRPNAMES__**FOX**\n* STR_CFG__GRPCOL__**BLACK**\n* STR_CFG__GRPNAMES__**SIX** (unlike its name suggests, this is a \"group colour\")\n* STR_CFG_FIREFLYBASE\n* STR_CFG_PAPABEAR\n* STR_CFG_HQ_BASE",
            "examples": [
                {
                    "text": "**Arma 3**:\n\n```sqf\ngroup player setGroupId [\"Some name for the group\"];\nhint groupId group player;\t// \"Some name for the group\"\nplayer sideChat \"lalala\";\t// Some name for the group (KK): \"lalala\"\n```"
                },
                {
                    "text": "**Arma 3**:\n\n```sqf\ngroup player setGroupId [\"%GroupNames :=: %GroupColors\", \"Alpha\", \"GroupColor2\"];\nhint groupId group player;\t// \"Alpha :=: Red\"\nplayer sideChat \"lalala\";\t// Alpha :=: Red (KK): \"lalala\"\n```"
                },
                {
                    "text": "**Armed Assault / Arma 2 / Arma 3**:\n\n```sqf\ngroup player setGroupId [\"First Assault Recon Team\"];\n```\n\n**Operation Flashpoint**:\n\n```sqf\n_group1 setGroupId [\"Delta\", \"GroupColor4\"]\n```"
                },
                {
                    "text": "When trying to apply the same callsign to two groups of the same side, the callsigns will simply be swapped, e.g:\n\n```sqf\ngroup1 setGroupId [\"Active Group\"];\ngroup2 setGroupId [\"Inactive Group\"];\ngroup2 setGroupId [\"Active Group\"]; // group1 is \"Inactive Group\" now\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Object` or `Group`"
                        },
                        {
                            "name": "nameFormat",
                            "description": "`String` - format template (%keyword1 - %keyword2...etc)"
                        },
                        {
                            "name": "nameParamN",
                            "description": "`String` - param keyword"
                        }
                    ],
                    "outline": "group `setGroupId` [nameFormat, nameParam1, nameParam2, ...]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setGroupId"
        },
        "configuration": {
            "label": "setGroupId",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "A [global](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality) equivalent of  `setGroupId`.",
            "examples": [
                {
                    "text": "```sqf\ngroup player setGroupIdGlobal [\"PAPA BEAR\"];\nhint groupId group player; // \"PAPA BEAR\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Object` or `Group`"
                        },
                        {
                            "name": "format",
                            "description": "`String` - format template (e.g \"%keyword1 - %keyword2 / %keyword4 (%keyword3)\")"
                        },
                        {
                            "name": "keywordN",
                            "description": "`String` - keyword value"
                        }
                    ],
                    "outline": "group `setGroupIdGlobal` [format, keyword1, keyword2, ...]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setGroupIdGlobal"
        },
        "configuration": {
            "label": "setGroupIdGlobal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Changes the ownership of a group (and all its units) to a given client. The group leader must not be a player. This command only works when called from the server. Returns true if locality was changed. For `agents` use `setOwner` command.",
            "examples": [
                {
                    "text": "```sqf\n_localityChanged = _someGroup setGroupOwner (owner _playerObject);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group`"
                        },
                        {
                            "name": "clientID",
                            "description": "`Number` - the [ machine network ID](https://community.bistudio.com/wiki/Multiplayer_Scripting%23Machine_network_ID%20) of the new `owner`."
                        }
                    ],
                    "outline": "group `setGroupOwner` clientID",
                    "returns": "`Boolean`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/setGroupOwner"
        },
        "configuration": {
            "label": "setGroupOwner",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Changes the gusts value smoothly during the given time (in seconds). A time of zero means there will be an immediate change. Value is 0 to 1.",
            "examples": [
                {
                    "text": "```sqf\n60 setGusts 0.75;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "time",
                            "description": "`Number`"
                        },
                        {
                            "name": "value",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "time `setGusts` value",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setGusts"
        },
        "configuration": {
            "label": "setGusts",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the data for hiding. objectWhereHide can be taken using `findCover`. hidePosition can be taken using `getHideFrom`. Command is not functional in Arma 2.\n**WARNING**:  This command is not implemented!",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "objectWhereHide",
                            "description": "`Object`"
                        },
                        {
                            "name": "hidePosition",
                            "description": "`Array` - format `getHideFrom`"
                        }
                    ],
                    "outline": "object `setHideBehind` [objectWhereHide, hidePosition]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setHideBehind"
        },
        "configuration": {
            "label": "setHideBehind",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "{{{!}} class=\"wikitable float-right align-center-col-2\"\n{{!}}+ \n! {{Link|:Category: Event Handlers|Event Handler}}\n! Triggered\n{{!}}-\n{{!}} `**Hit**`\n{{!}} {{Icon|unchecked}}\n{{!}}-\n{{!}} `**HandleDamage**`\n{{!}} {{Icon|unchecked}}\n{{!}}-\n{{!}} `**Killed**`\n{{!}} {{Icon|checked}}\n{{!}}-\n{{!}} `**MPKilled**`\n{{!}} {{Icon|checked}}\n{{!}}}\n\nSet damage on a part of an object.\n**NOTE**: Some part names are in Czech; see the [translation table](https://community.bistudio.com/wiki/ArmA%3A%20Armed%20Assault%3A%20Selection%20Translations).",
            "examples": [
                {
                    "text": "```sqf\nvehicle player setHit [\"motor\", 1];\n```"
                },
                {
                    "text": "```sqf\nvehicle player setHit [\"mala vrtule\", 0.95];\n```"
                },
                {
                    "text": "```sqf\n\nif (local _heli) then\n{\n\t_heli setHit [\"velka vrtule\", 0];\n}\nelse\n{\n\thint (\"Vehicle \" + str _heli + \" must be local to this machine to do that!\");\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - `local` object"
                        },
                        {
                            "name": "part",
                            "description": "`String` - name of the part ([selection](https://community.bistudio.com/wiki/Named_Selection) name)"
                        },
                        {
                            "name": "damage",
                            "description": "`Number` - damage value ranging 0..1, 0 being fully functional, 1 being destroyed"
                        },
                        {
                            "name": "useEffects",
                            "description": "`Boolean` - (Optional, default `true`) `false` to skip destruction effects"
                        },
                        {
                            "name": "killer",
                            "description": "`Object` - (Optional, default `objNull`) the entity that caused the damage. If the damage leads to the death of the unit, the killer will be used as the object that caused the kill.\n* it can be used to show \"killed by player\" in debriefing statistics and kill messages in the chat (if death messages are enabled).\n* it will alter the killer's `rating` as if the killer directly killed the unit.\n* it will be listed as <sqf inline>_killer parameter in the [Killed](https://community.bistudio.com/wiki/Arma%203%3A%20Event%20Handlers%23Killed) event handler."
                        },
                        {
                            "name": "instigator",
                            "description": "`Object` - (Optional, default `objNull`) the person that instigated the damage.\n* if a tank is a killer, the tank gunner that pulled the trigger is instigator\n* it will be listed as <sqf inline>_instigator parameter in the [Killed](https://community.bistudio.com/wiki/Arma%203%3A%20Event%20Handlers%23Killed) event handler."
                        },
                        {
                            "name": "breakRotor",
                            "description": "`Boolean` - (Optional, default `false`) if the hitpoint is rotor on a helicopter, `true` will break the rotor as well as play corresponding sound if 'useEffects' is also `true`."
                        }
                    ],
                    "outline": "object `setHit` [part, damage, useEffects, killer, instigator, breakRotor]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setHit"
        },
        "configuration": {
            "label": "setHit",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the current level of damage for a specific Hit Point. All hit points can be obtained with `getAllHitPointsDamage` command.",
            "examples": [
                {
                    "text": "```sqf\nvehicle player setHitIndex [1, 1];\n```"
                },
                {
                    "text": "```sqf\nplayer setHitIndex [7, 0.5];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle ",
                            "description": "`Object` - vehicle to be damaged"
                        },
                        {
                            "name": "hitPartIndex",
                            "description": "`Number` - hit part index of the Hit Point"
                        },
                        {
                            "name": "damage",
                            "description": "`Number` - level of damage\n* 0: no damage\n* 1: full damage"
                        },
                        {
                            "name": "useEffects",
                            "description": "`Boolean` - (Optional, default `true`) `false` to skip destruction effects"
                        },
                        {
                            "name": "killer",
                            "description": "`Object` - (Optional, default `objNull`) the entity that caused the damage. If the damage leads to the death of the unit, the killer will be used as the object that caused the kill. \n\n* It can be used to show \"killed by player\" in debriefing statistics and kill messages in the chat (if death messages are enabled). \n\n* It will alter the killer's `rating` as if the killer directly killed the unit. \n\n* It will be listed as <sqf inline>_killer parameter in the [Killed](https://community.bistudio.com/wiki/Arma_3%3A_Event_Handlers%23Killed) event handler."
                        },
                        {
                            "name": "instigator",
                            "description": "`Object` - (Optional, default `objNull`) the person that instigated the damage.\n* if a tank is a killer, the tank gunner that pulled the trigger is instigator\n* it will be listed as <sqf inline>_instigator parameter in the [Killed](https://community.bistudio.com/wiki/Arma%203%3A%20Event%20Handlers%23Killed) event handler."
                        },
                        {
                            "name": "breakRotor",
                            "description": "`Boolean` - (Optional, default `false`) if the hitpoint is rotor on a helicopter, `true` will break the rotor as well as play corresponding sound if 'useEffects' is also `true`."
                        }
                    ],
                    "outline": "vehicle `setHitIndex` [hitPartIndex, damage, useEffects, killer, instigator, breakRotor]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setHitIndex"
        },
        "configuration": {
            "label": "setHitIndex",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "{{{!}} class=\"wikitable float-right align-center-col-2\"\n{{!}}+ \n! {{Link|:Category: Event Handlers|Event Handler}}\n! Triggered\n{{!}}-\n{{!}} `**Hit**`\n{{!}} {{Icon|unchecked}}\n{{!}}-\n{{!}} `**HandleDamage**`\n{{!}} {{Icon|unchecked}}\n{{!}}-\n{{!}} `**Killed**`\n{{!}} {{Icon|checked}}\n{{!}}-\n{{!}} `**MPKilled**`\n{{!}} {{Icon|checked}}\n{{!}}}\n\nSet the current level of damage for a specific Hit Point (specified by its config class). This command has no effect when `allowDamage` is set to `false`.\n**NOTE**: See also `BIS_fnc_setHitPointDamage` for setting hit with dependency.",
            "examples": [
                {
                    "text": "```sqf\nvehicle player setHitPointDamage [\"hitEngine2\", 1.0];\n```"
                },
                {
                    "text": "```sqf\n\nplayer setHitPointDamage [\"hitHead\", 0.5];\nplayer setHitPointDamage [\"hitBody\", 0.5];\nplayer setHitPointDamage [\"hitHands\", 0.5];\nplayer setHitPointDamage [\"hitLegs\", 0.5];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle ",
                            "description": "`Object` - vehicle to be damaged"
                        },
                        {
                            "name": "hitPointName",
                            "description": "`String` - name of the Hit Point class"
                        },
                        {
                            "name": "damage",
                            "description": "`Number` - level of damage, in range 0..1"
                        },
                        {
                            "name": "useEffects",
                            "description": "`Boolean` - (Optional, default `true`) `false` to skip destruction effects"
                        },
                        {
                            "name": "{{Icon|serverExec|28}} killer",
                            "description": "`Object` - (Optional, default `objNull`) the entity that caused the damage. If the damage leads to the death of the unit, the killer will be used as the object that caused the kill. \n\n* It can be used to show \"killed by player\" in debriefing statistics and kill messages in the chat (if death messages are enabled). \n\n* It will alter the killer's `rating` as if the killer directly killed the unit. \n\n* It will be listed as <sqf inline>_killer parameter in the [Killed](https://community.bistudio.com/wiki/Arma_3%3A_Event_Handlers%23Killed) event handler."
                        },
                        {
                            "name": "{{Icon|serverExec|28}} instigator",
                            "description": "`Object` - (Optional, default `objNull`) the person that instigated the damage.\n* if a tank is a killer, the tank gunner that pulled the trigger is instigator\n* it will be listed as <sqf inline>_instigator parameter in the [Killed](https://community.bistudio.com/wiki/Arma%203%3A%20Event%20Handlers%23Killed) event handler."
                        },
                        {
                            "name": "breakRotor",
                            "description": "`Boolean` - (Optional, default `false`) if the hitpoint is rotor on a helicopter, `true` will break the rotor as well as play corresponding sound if 'useEffects' is also `true`."
                        }
                    ],
                    "outline": "vehicle `setHitPointDamage` [hitPointName, damage, useEffects, killer, instigator, breakRotor]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setHitPointDamage"
        },
        "configuration": {
            "label": "setHitPointDamage",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets coef used to shift horizon position based on camera height (use 0 to disable shifting).",
            "examples": [
                {
                    "text": "```sqf\nsetHorizonParallaxCoef 1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "coef",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`setHorizonParallaxCoef` coef",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setHorizonParallaxCoef"
        },
        "configuration": {
            "label": "setHorizonParallaxCoef",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set min/max movement borders displayed in HUD gauges. Use -1 to skip some value.",
            "examples": [
                {
                    "text": "```sqf\nsetHUDMovementLevels [20, 30, -1, -1, 0.23, 2.1, [0,0,0]];\n```"
                },
                {
                    "text": "```sqf\nsetHUDMovementLevels [20, 30, -1, -1, 0.23, 2.1, player];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "minSpeed",
                            "description": "`Number` - in m/s"
                        },
                        {
                            "name": "maxSpeed",
                            "description": "`Number` - in m/s"
                        },
                        {
                            "name": "minAlt",
                            "description": "`Number` - in meters"
                        },
                        {
                            "name": "maxAlt",
                            "description": "`Number` - in meters"
                        },
                        {
                            "name": "minDir",
                            "description": "`Number` - in degrees"
                        },
                        {
                            "name": "maxDir",
                            "description": "`Number` - in degrees"
                        },
                        {
                            "name": "targetOrPosition",
                            "description": "`Object` or `Position`"
                        }
                    ],
                    "outline": "`setHUDMovementLevels` [minSpeed, maxSpeed, minAlt, maxAlt, minDir, maxDir, targetOrPosition]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setHUDMovementLevels"
        },
        "configuration": {
            "label": "setHUDMovementLevels",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets surface humidity. Affects how footsteps sound (dry / wet). `humidity` is increasing when raining and decreasing when not raining. Exception is if the rain is set with 'snow' flag, then `humidity` is not updated.",
            "examples": [
                {
                    "text": "```sqf\nsetHumidity 1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "humidity",
                            "description": "`Number` - surface humidity in the range 0..1"
                        }
                    ],
                    "outline": "`setHumidity` humidity",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setHumidity"
        },
        "configuration": {
            "label": "setHumidity",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets identity of a person. The identities could be defined in a custom config in [[Description.ext#CfgIdentities|Description.ext]] or in the main config. For a list of available main config values see `CfgIdentities`.\n\n\n \nThis command is an aggregate of the following commands: `setName`, `setFace`, `setSpeaker`, `setNameSound`, `setPitch`, only the values are loaded from the given config. It also includes value for glasses for which currently there is no direct command, instead there is an inventory command `addGoggles`.",
            "examples": [
                {
                    "text": "```sqf\n_soldier1 setIdentity \"MyLittleSoldier\";\n```"
                },
                {
                    "text": "Clone factory in MP:\n\n```sqf\nfor \"_i\" from 1 to 10 do\n{\n\t_bob = group player createUnit [typeOf player, position player, [], 0, \"none\"];\n\t[_bob, \"MyLittleSoldier\"] remoteExec [\"setIdentity\", 0, _bob];\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "person",
                            "description": "`Object` - unit to which the identity will be applied"
                        },
                        {
                            "name": "identity",
                            "description": "`String` - name of the subclass in `CfgIdentities`"
                        }
                    ],
                    "outline": "person `setIdentity` identity",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setIdentity"
        },
        "configuration": {
            "label": "setIdentity",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the importance value of location.",
            "examples": [
                {
                    "text": "```sqf\nmyLocation setImportance 2;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "location",
                            "description": "`Location`"
                        },
                        {
                            "name": "value",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "location `setImportance` value",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setImportance"
        },
        "configuration": {
            "label": "setImportance",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Opens given component or first component of given component type on specified info panel.",
            "examples": [
                {
                    "text": "```sqf\n\n// opens slingload assistant on right panel\nprivate _result = setInfoPanel [\"VehicleSystemsDisplayManagerComponentRight\", \"SlingLoadDisplayComponent\"];\nif (!_result) then { hint \"could not open the slingload assistant, sorry\" };\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "infoPanelId",
                            "description": "`String` - info panel classname, or \"left\" or \"right\""
                        },
                        {
                            "name": "componentClassOrType",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`setInfoPanel` [infoPanelId, componentClassOrType]",
                    "returns": "`Boolean` - `true` if panel was successfully opened, `false` otherwise (e.g. opening GPS on player without GPS item or setting panel to vehicle that doesn't have such capability configured)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setInfoPanel"
        },
        "configuration": {
            "label": "setInfoPanel",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "{{Feature|important|To set a `Group` leader, see `selectLeader`.}}\nSet the leader of the given `Team`. Effect is local, unless both leader unit and team are local to PC on which command is executed, then effect is global.",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "team",
                            "description": "[Team Member](https://community.bistudio.com/wiki/Team%20Member)"
                        },
                        {
                            "name": "leader",
                            "description": "[Team Member](https://community.bistudio.com/wiki/Team%20Member)"
                        }
                    ],
                    "outline": "team `setLeader` leader",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setLeader"
        },
        "configuration": {
            "label": "setLeader",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set ambient color of light. This includes surfaces that **face away** from the light, unlike `setLightColor`.",
            "examples": [
                {
                    "text": "```sqf\nmyLight setLightAmbient [0.5,0,0]; // produces red light around the origin source\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "light",
                            "description": "`Object`"
                        },
                        {
                            "name": "color",
                            "description": "`Array` format [[Color|Color (RGB)]]"
                        }
                    ],
                    "outline": "light `setLightAmbient` color",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setLightAmbient"
        },
        "configuration": {
            "label": "setLightAmbient",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets attenuation of light. Standard method of attenuation (1 / (constant + linear*dist + quadratic*dist*dist)).\n_start_ param represents distance where the attenuation starts to take effects (dist = distance - start).",
            "examples": [
                {
                    "text": "```sqf\nmyLight setLightAttenuation [2, 4, 4, 0, 9, 10];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "light",
                            "description": "`Object`"
                        },
                        {
                            "name": "start",
                            "description": "`Number` - distance with 100% intensity, falloff starts here"
                        },
                        {
                            "name": "constant",
                            "description": "`Number` - constant attenuation coef"
                        },
                        {
                            "name": "linear",
                            "description": "`Number` - linear attenuation coef"
                        },
                        {
                            "name": "quadratic",
                            "description": "`Number` - quadratic attenuation coef"
                        },
                        {
                            "name": "hardlimitstart",
                            "description": "`Number` - (Optional) max distance hard limit start (start of fading of intensity to 0) in m"
                        },
                        {
                            "name": "hardlimitend",
                            "description": "`Number` - (Optional) max distance hard limit end (end of fading of intensity to 0) in m"
                        }
                    ],
                    "outline": "light `setLightAttenuation` [start, constant, linear, quadratic, hardlimitstart, hardlimitend]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setLightAttenuation"
        },
        "configuration": {
            "label": "setLightAttenuation",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set brightness of light.\n**Arma 3**: This command is outdated. Use `setLightIntensity` instead.",
            "examples": [
                {
                    "text": "```sqf\nmyLight setLightBrightness 2;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "light",
                            "description": "`Object`"
                        },
                        {
                            "name": "brightness",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "light `setLightBrightness` brightness",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setLightBrightness"
        },
        "configuration": {
            "label": "setLightBrightness",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set diffuse color of light. Illuminates surfaces that are facing the light.",
            "examples": [
                {
                    "text": "```sqf\nmyLight setLightColor [0.5,0,0]; // produces red\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "light",
                            "description": "`Object`"
                        },
                        {
                            "name": "r",
                            "description": "`Number` - red value in range 0..1"
                        },
                        {
                            "name": "g",
                            "description": "`Number` - green value in range 0..1"
                        },
                        {
                            "name": "b",
                            "description": "`Number` - blue value in range 0..1"
                        }
                    ],
                    "outline": "light `setLightColor` [r, g, b]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setLightColor"
        },
        "configuration": {
            "label": "setLightColor",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the lightpoint (directional light `**#lightreflector**`)'s cone params.",
            "examples": [
                {
                    "text": "```sqf\n_light setLightConePars [90, 45, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "lightReflector",
                            "description": "`Object` - object of class `**#lightreflector**`)"
                        },
                        {
                            "name": "outerAngle",
                            "description": "`Number`"
                        },
                        {
                            "name": "innerAngle",
                            "description": "`Number`"
                        },
                        {
                            "name": "fadeCoef",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "lightReflector `setLightConePars` [outerAngle, innerAngle, fadeCoef]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setLightConePars"
        },
        "configuration": {
            "label": "setLightConePars",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets if light can be used during the day.",
            "examples": [
                {
                    "text": "```sqf\nmyLight setLightDayLight true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "light",
                            "description": "`Object`"
                        },
                        {
                            "name": "bool",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "light `setLightDayLight` bool",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setLightDayLight"
        },
        "configuration": {
            "label": "setLightDayLight",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets max distance where the flare is visible.",
            "examples": [
                {
                    "text": "```sqf\nmyLight setLightFlareMaxDistance 500;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "light",
                            "description": "`Object`"
                        },
                        {
                            "name": "distance",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "light `setLightFlareMaxDistance` distance",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setLightFlareMaxDistance"
        },
        "configuration": {
            "label": "setLightFlareMaxDistance",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets relative size of the flare for the light.",
            "examples": [
                {
                    "text": "```sqf\nmyLight setLightFlareSize 5;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "light",
                            "description": "`Object`"
                        },
                        {
                            "name": "size",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "light `setLightFlareSize` size",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setLightFlareSize"
        },
        "configuration": {
            "label": "setLightFlareSize",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets intensity of light.\n**NOTE**: Intensity formula is as follows: \n```sqf\nIntensity = Brightness ^ 2 * 2500;\n```\n\n<spoiler text=\"Test code\">\n\n```sqf\n\n[4096, 4096, 10] spawn {\n\tprivate _brightness = 1;\n\tprivate _intensity = _brightness ^ 2 * 2500;\n\n\tprivate _obj = \"Sign_Sphere10cm_F\" createVehicleLocal _this;\n\tprivate _light = \"#lightpoint\" createVehicleLocal _this;\n\t_light setLightDayLight true;\n\t_light setLightAmbient [1, 1, 1];\n\t_light setLightColor [1, 1, 1];\n\n\t_light setLightBrightness _brightness;\n\tsleep 0.2;\n\t_brightness = getLightingAt _obj select 3;\n\n\t_light setLightIntensity _intensity;\n\tsleep 0.2;\n\t_intensity = getLightingAt _obj select 3;\n\n\tsystemChat format [\"%1 (%2, %3)\", _brightness == _intensity, _brightness, _intensity];\n\n\tdeleteVehicle _light;\n\tdeleteVehicle _obj;\n};\n\n```",
            "examples": [
                {
                    "text": "```sqf\nmyLight setLightIntensity 4;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "light",
                            "description": "`Object`"
                        },
                        {
                            "name": "value",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "light `setLightIntensity` value",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setLightIntensity"
        },
        "configuration": {
            "label": "setLightIntensity",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets lightpoint in infrared range.",
            "examples": [
                {
                    "text": "```sqf\nmyLight setLightIR true; // visible with NVG only!\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "light",
                            "description": "`Object` - object of class `**\"#lightpoint\"**` or similar"
                        },
                        {
                            "name": "value",
                            "description": "`Boolean` - `true` to make it visible _only_ with night vision goggles, `false` to make it a normal light"
                        }
                    ],
                    "outline": "light `setLightIR` value",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setLightIR"
        },
        "configuration": {
            "label": "setLightIR",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Changes the lightnings value smoothly during the given time (in seconds). A time of zero means there will be an immediate change.\n\n\n**NOTE**: This command will have no effect (even though the value of `lightnings` changes) unless `**Manual Override**` option is selected in the editor in the Intel, which is normally off.\n\n\n[[File:setLightnings.jpg|left|600px]]",
            "examples": [
                {
                    "text": "```sqf\n1800 setLightnings 0.7;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "time",
                            "description": "`Number`"
                        },
                        {
                            "name": "value",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "time `setLightnings` value",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setLightnings"
        },
        "configuration": {
            "label": "setLightnings",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets if light has flare.",
            "examples": [
                {
                    "text": "```sqf\nmyLight setLightUseFlare true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "light",
                            "description": "`Object`"
                        },
                        {
                            "name": "bool",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "light `setLightUseFlare` bool",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setLightUseFlare"
        },
        "configuration": {
            "label": "setLightUseFlare",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the lightpoint (directional light `**#lightreflector**`)'s volume shape.",
            "examples": [
                {
                    "text": "```sqf\n_light setLightVolumeShape [\"a3\\data_f\\VolumeLightFlashlight.p3d\", [1, 1, 1]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "lightReflector ",
                            "description": "`Object` - object of class `**#lightreflector**`)"
                        },
                        {
                            "name": "shapePath",
                            "description": "`String`"
                        },
                        {
                            "name": "scale",
                            "description": "`Array` - [sizeX, sizeY, sizeZ]"
                        }
                    ],
                    "outline": "lightReflector `setLightVolumeShape` [shapePath, scale]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setLightVolumeShape"
        },
        "configuration": {
            "label": "setLightVolumeShape",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets parameters for helicopter rotor wash.\nIt affects the visual effect of a rotor's downwash, such as blown particles, vegetation wind effect and area size.",
            "examples": [
                {
                    "text": "```sqf\nsetLocalWindParams [10, 5];\n```"
                },
                {
                    "text": "\"Disables\" the effects:\n\n```sqf\nsetLocalWindParams [0.0001, 0.0001]; // 0 values are ignored by the command\n```"
                },
                {
                    "text": "Reset to default:\n```sqf\nsetLocalWindParams [1, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "strength",
                            "description": "`Number` - down-force wind strength"
                        },
                        {
                            "name": "diameter",
                            "description": "`Number` - area affected"
                        }
                    ],
                    "outline": "`setLocalWindParams` [strength, diameter]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setLocalWindParams"
        },
        "configuration": {
            "label": "setLocalWindParams",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets ammo count to given amount for given turret magazine.\n{{Feature|informative|\nSince Arma 3 v2.18 the magazine is first checked if it is loaded into the turret weapon, if not, the command falls back to old behaviour of selecting the first magazine from the list of available magazines.\nIn most cases this will be the loaded magazine anyway.\n}}\n**IMPORTANT**: The turret itself **must** be local (see `turretLocal`, `turretOwner`).",
            "examples": [
                {
                    "text": "```sqf\nmyMRAP setMagazineTurretAmmo [\"200Rnd_127x99_mag_Tracer_Red\", 30, [0]];\n```"
                },
                {
                    "text": "Set ammo count on commander turret from server:\n\n```sqf\n\n_tank = tank;\n_turret = [0,0];\n_magazine = \"200Rnd_127x99_mag_Tracer_Red\";\n_ammo = 10;\n[_tank, [_magazine, _ammo, _turret]] remoteExec [\"setMagazineTurretAmmo\", _tank turretOwner _turret];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "magazineClass",
                            "description": "`String`"
                        },
                        {
                            "name": "ammoCount",
                            "description": "`Number`"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` format [Turret Path](https://community.bistudio.com/wiki/Turret%20Path) - [-1] for driver turret is supported"
                        }
                    ],
                    "outline": "vehicle `setMagazineTurretAmmo` [magazineClass, ammoCount, turretPath]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setMagazineTurretAmmo"
        },
        "configuration": {
            "label": "setMagazineTurretAmmo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the marker alpha. The marker is modified on all computers in a network session.\n\n\nWhen alpha equals `**1**`, the marker is visible, but if alpha equals `**0**`, then the marker is invisible.\n\n\nAlpha can be numbers and fractions.\n**NOTE**: **Multiplayer optimisation:** Global marker commands always broadcast the _entire_ marker state over the network. As such, the number of network messages exchanged when creating or editing a marker can be reduced by performing all but the last operation using local marker commands, then using a global marker command for the last change (and subsequent global broadcast of all changes applied to the marker).",
            "examples": [
                {
                    "text": "```sqf\n\"my_marker\" setMarkerAlpha 0.5;\n```"
                },
                {
                    "text": "```sqf\n\"enemy_convoy_marker\" setMarkerAlpha 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "marker",
                            "description": "`String`"
                        },
                        {
                            "name": "alpha",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "marker `setMarkerAlpha` alpha",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setMarkerAlpha"
        },
        "configuration": {
            "label": "setMarkerAlpha",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the marker alpha.",
            "examples": [
                {
                    "text": "```sqf\n\"my_marker\" setMarkerAlphaLocal 0.5;\n```"
                },
                {
                    "text": "```sqf\n\"enemy_convoy_marker\" setMarkerAlphaLocal 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "marker",
                            "description": "`String`"
                        },
                        {
                            "name": "alpha",
                            "description": "`Number` - alpha value from 0 (invisible) to 1 (fully visible)"
                        }
                    ],
                    "outline": "marker `setMarkerAlphaLocal` alpha",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setMarkerAlphaLocal"
        },
        "configuration": {
            "label": "setMarkerAlphaLocal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Selects the fill texture for the marker (\"RECTANGLE\" or \"ELLIPSE\"). Brush is the name of the subclass in `**CfgMarkerBrushes**`.\n**NOTE**: **Multiplayer optimisation:** Global marker commands always broadcast the _entire_ marker state over the network. As such, the number of network messages exchanged when creating or editing a marker can be reduced by performing all but the last operation using local marker commands, then using a global marker command for the last change (and subsequent global broadcast of all changes applied to the marker).",
            "examples": [
                {
                    "text": "```sqf\n\"Marker1\" setMarkerBrush \"DIAGGRID\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String`"
                        },
                        {
                            "name": "brush",
                            "description": "`String` - (case-insensitive) can be one of:\n{{Columns|4|\n* \"Solid\"\n* {{GVI|arma3|0.50"
                        }
                    ],
                    "outline": "markerName `setMarkerBrush` brush",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setMarkerBrush"
        },
        "configuration": {
            "label": "setMarkerBrush",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Selects the fill texture for the marker (\"RECTANGLE\" or \"ELLIPSE\"). Brush is the name of the subclass in CfgMarkerBrushes.\n\n\n\n\n_brush_ can be:\n* \"Solid\"\n* \"SolidFull\" (A3 only)\n* \"Horizontal\"\n* \"Vertical\"\n* \"Grid\"\n* \"FDiagonal\"\n* \"BDiagonal\"\n* \"DiagGrid\"\n* \"Cross\"\n* \"Border\" (A2/A3 only)\n* \"SolidBorder\" (OA/A3 only)",
            "examples": [
                {
                    "text": "```sqf\n\"Marker1\" setMarkerBrushLocal \"DiagGrid\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String`"
                        },
                        {
                            "name": "brush",
                            "description": "`String`"
                        }
                    ],
                    "outline": "markerName `setMarkerBrushLocal` brush",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setMarkerBrushLocal"
        },
        "configuration": {
            "label": "setMarkerBrushLocal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets marker color. Marker color names and their corresponding RGBA values for Arma 3 could be found here: [Arma 3: CfgMarkerColors](https://community.bistudio.com/wiki/Arma%203%3A%20CfgMarkerColors)\n**NOTE**: **Multiplayer optimisation:** Global marker commands always broadcast the _entire_ marker state over the network. As such, the number of network messages exchanged when creating or editing a marker can be reduced by performing all but the last operation using local marker commands, then using a global marker command for the last change (and subsequent global broadcast of all changes applied to the marker).",
            "examples": [
                {
                    "text": "```sqf\n\"MarkerOne\" setMarkerColor \"ColorBlack\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String`"
                        },
                        {
                            "name": "color",
                            "description": "`String`"
                        }
                    ],
                    "outline": "markerName `setMarkerColor` color",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setMarkerColor"
        },
        "configuration": {
            "label": "setMarkerColor",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets marker color for the given marker locally. Marker color names and their corresponding RGBA values for Arma 3 could be found in here: [Arma 3: CfgMarkerColors](https://community.bistudio.com/wiki/Arma%203%3A%20CfgMarkerColors)",
            "examples": [
                {
                    "text": "```sqf\n\"MarkerOne\" setMarkerColorLocal \"ColorBlack\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String`"
                        },
                        {
                            "name": "color",
                            "description": "`String`"
                        }
                    ],
                    "outline": "markerName `setMarkerColorLocal` color",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setMarkerColorLocal"
        },
        "configuration": {
            "label": "setMarkerColorLocal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the orientation of the marker. Angle is in degrees.\n**NOTE**: **Multiplayer optimisation:** Global marker commands always broadcast the _entire_ marker state over the network. As such, the number of network messages exchanged when creating or editing a marker can be reduced by performing all but the last operation using local marker commands, then using a global marker command for the last change (and subsequent global broadcast of all changes applied to the marker).",
            "examples": [
                {
                    "text": "```sqf\n\"Marker1\" setMarkerDir 90;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String`"
                        },
                        {
                            "name": "angle",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "markerName `setMarkerDir` angle",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setMarkerDir"
        },
        "configuration": {
            "label": "setMarkerDir",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the orientation of the marker.",
            "examples": [
                {
                    "text": "```sqf\n\"Marker1\" setMarkerDirLocal 90;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String`"
                        },
                        {
                            "name": "angle",
                            "description": "`Number` - angle of the marker in degree"
                        }
                    ],
                    "outline": "markerName `setMarkerDirLocal` angle",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setMarkerDirLocal"
        },
        "configuration": {
            "label": "setMarkerDirLocal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets marker draw priority. Higher priority markers are drawn on top. Default priority is 0.\n**IMPORTANT**: Be aware that this command has **local** effect despite the command name missing the world **local**!",
            "examples": [
                {
                    "text": "```sqf\n\"MarkerOne\" setMarkerDrawPriority 0.5;\n```"
                },
                {
                    "text": "```sqf\n\"MarkerTwo\" setMarkerDrawPriority -2.1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String`"
                        },
                        {
                            "name": "priority",
                            "description": "`Number` - draw priority"
                        }
                    ],
                    "outline": "markerName `setMarkerDrawPriority` priority",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setMarkerDrawPriority"
        },
        "configuration": {
            "label": "setMarkerDrawPriority",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets a polyline marker's path.\n**NOTE**: **Multiplayer optimisation:** Global marker commands always broadcast the _entire_ marker state over the network. As such, the number of network messages exchanged when creating or editing a marker can be reduced by performing all but the last operation using local marker commands, then using a global marker command for the last change (and subsequent global broadcast of all changes applied to the marker).",
            "examples": [
                {
                    "text": "Changes `**\"marker_1\"**` into a polyline and draws a sine curve on `player`'s position:\n\n```sqf\n\n// createMarker [\"marker_1\", [0,0,0]];\n\"marker_1\" setMarkerShape \"polyline\";\nprivate _return = [] ;\n\nfor \"_i\" from 0 to 100 step 0.1 do\n{\n\t_return pushBack (_i + getPosASL player # 0);\n\t_return pushBack ((sin (_i * 10)) * 10 + getPosASL player # 1);\n} ;\n\n\"marker_1\" setMarkerPolyline _return;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "marker",
                            "description": "`String`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - `**[x1, y1, x2, y2, ... xn, yn]**`\n**IMPORTANT**: \nBe aware that this command expects an array with a minimum array size of 4 and that the array count always needs to be dividable by 2 and return a whole number. Code:\n\n```sqf\ncount path >= 4 && count path mod 2 == 0; // true → valid path\n```"
                        }
                    ],
                    "outline": "marker `setMarkerPolyline` path",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setMarkerPolyline"
        },
        "configuration": {
            "label": "setMarkerPolyline",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets a polyline marker's path. Works only on the computer that executes this command.",
            "examples": [
                {
                    "text": "Changes `**\"marker_1\"**` into a polyline and draws a sine curve on your position:\n\n```sqf\n\n\"marker_1\" setMarkerShape \"polyline\";\nprivate _return = [] ;\n\nfor \"_i\" from 0 to 100 step 0.1 do\n{\n\t_return pushBack (_i + getPos player#0);\n\t_return pushBack ((sin (_i*10))*10 + getPos player#1);\n} ;\n\n\"marker_1\" setMarkerPolylineLocal _return;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "marker",
                            "description": "`String`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - `**[x1, y1, x2, y2, ... xn, yn]**`"
                        }
                    ],
                    "outline": "marker `setMarkerPolylineLocal` path",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setMarkerPolylineLocal"
        },
        "configuration": {
            "label": "setMarkerPolylineLocal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Moves the marker. If position is given in 3D format, `**z**` coordinate is stored with the marker and will be used when marker is passed to commands like `createVehicle`, `createUnit`, `createAgent`, `createMine`, `setVehiclePosition` for example. When `Object` is used for position, its `getPosWorld` is used.\n**NOTE**: **Multiplayer optimisation:** Global marker commands always broadcast the _entire_ marker state over the network. As such, the number of network messages exchanged when creating or editing a marker can be reduced by performing all but the last operation using local marker commands, then using a global marker command for the last change (and subsequent global broadcast of all changes applied to the marker).",
            "examples": [
                {
                    "text": "```sqf\n\"MarkerOne\" setMarkerPos getMarkerPos \"MarkerTwo\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String`"
                        },
                        {
                            "name": "pos",
                            "description": "`Array` format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) or {{GVI|arma3|1.94"
                        }
                    ],
                    "outline": "markerName `setMarkerPos` pos",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setMarkerPos"
        },
        "configuration": {
            "label": "setMarkerPos",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Moves the marker. If position is given in 3D format, `**z**` coordinate is stored with the marker and will be used when marker is passed to commands like `createVehicle`, `createUnit`, `createAgent`, `createMine`, `setVehiclePosition` for example. When `Object` is used for position, its `getPosWorld` is used.",
            "examples": [
                {
                    "text": "```sqf\n\"MarkerOne\" setMarkerPosLocal getMarkerPos \"MarkerTwo\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String`"
                        },
                        {
                            "name": "pos",
                            "description": "`Array` format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction), [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) or {{GVI|arma3|1.94"
                        }
                    ],
                    "outline": "markerName `setMarkerPosLocal` pos",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setMarkerPosLocal"
        },
        "configuration": {
            "label": "setMarkerPosLocal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the shadow property of given marker.",
            "examples": [
                {
                    "text": "```sqf\n_myMarker setMarkerShadow true; // enable shadow\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "marker",
                            "description": "`String` - the marker"
                        },
                        {
                            "name": "shadowState",
                            "description": "`Boolean` - `true` to enable the shadow, `false` to disable it"
                        }
                    ],
                    "outline": "marker `setMarkerShadow` shadowState",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setMarkerShadow"
        },
        "configuration": {
            "label": "setMarkerShadow",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the shadow property of given marker.",
            "examples": [
                {
                    "text": "```sqf\n_myMarker setMarkerShadowLocal true; // enable shadow\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "marker",
                            "description": "`String` - the marker"
                        },
                        {
                            "name": "shadowState",
                            "description": "`Boolean` - `true` to enable the shadow, `false` to disable it"
                        }
                    ],
                    "outline": "marker `setMarkerShadowLocal` shadowState",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setMarkerShadowLocal"
        },
        "configuration": {
            "label": "setMarkerShadowLocal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Selects shape (actual type) of the marker.",
            "examples": [
                {
                    "text": "```sqf\n\"Marker1\" setMarkerShape \"RECTANGLE\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String`"
                        },
                        {
                            "name": "shape",
                            "description": "`String` - the shape, can be one of:\n* `**\"ICON\"**`\n* `**\"RECTANGLE\"**`\n* `**\"ELLIPSE\"**`\n* `**\"POLYLINE\"**`"
                        }
                    ],
                    "outline": "markerName `setMarkerShape` shape",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setMarkerShape"
        },
        "configuration": {
            "label": "setMarkerShape",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Selects shape (actual type) of the local marker.",
            "examples": [
                {
                    "text": "```sqf\n\"Marker1\" setMarkerShapeLocal \"RECTANGLE\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String`"
                        },
                        {
                            "name": "shape",
                            "description": "`String` - the shape, can be one of:\n* `**\"ICON\"**`\n* `**\"RECTANGLE\"**`\n* `**\"ELLIPSE\"**`\n* `**\"POLYLINE\"**`"
                        }
                    ],
                    "outline": "markerName `setMarkerShapeLocal` shape",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setMarkerShapeLocal"
        },
        "configuration": {
            "label": "setMarkerShapeLocal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the marker's size.\n**NOTE**: **Multiplayer optimisation:** Global marker commands always broadcast the _entire_ marker state over the network. As such, the number of network messages exchanged when creating or editing a marker can be reduced by performing all but the last operation using local marker commands, then using a global marker command for the last change (and subsequent global broadcast of all changes applied to the marker).",
            "examples": [
                {
                    "text": "```sqf\n\"MarkerOne\" setMarkerSize [100, 200];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String`"
                        },
                        {
                            "name": "a-axis",
                            "description": "`Number` - 1/2 width of marker"
                        },
                        {
                            "name": "b-axis",
                            "description": "`Number` - 1/2 height of marker"
                        }
                    ],
                    "outline": "markerName `setMarkerSize` [a-axis, b-axis]",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setMarkerSize"
        },
        "configuration": {
            "label": "setMarkerSize",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set marker size.",
            "examples": [
                {
                    "text": "```sqf\n\"MarkerOne\" setMarkerSizeLocal [100, 200];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String`"
                        },
                        {
                            "name": "axisA",
                            "description": "`Number` - 1/2 width of marker"
                        },
                        {
                            "name": "axisB",
                            "description": "`Number` - 1/2 height of marker"
                        }
                    ],
                    "outline": "markerName `setMarkerSizeLocal` [axisA, axisB]",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setMarkerSizeLocal"
        },
        "configuration": {
            "label": "setMarkerSizeLocal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the text label of an existing marker.\n**NOTE**: **Multiplayer optimisation:** Global marker commands always broadcast the _entire_ marker state over the network. As such, the number of network messages exchanged when creating or editing a marker can be reduced by performing all but the last operation using local marker commands, then using a global marker command for the last change (and subsequent global broadcast of all changes applied to the marker).",
            "examples": [
                {
                    "text": "```sqf\n\"Marker1\" setMarkerText \"You are here.\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String`"
                        },
                        {
                            "name": "text",
                            "description": "`String`"
                        }
                    ],
                    "outline": "markerName `setMarkerText` text",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setMarkerText"
        },
        "configuration": {
            "label": "setMarkerText",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the text label of an existing marker.",
            "examples": [
                {
                    "text": "```sqf\n\"Marker1\" setMarkerTextLocal \"You are here.\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String`"
                        },
                        {
                            "name": "text",
                            "description": "`String`"
                        }
                    ],
                    "outline": "markerName `setMarkerTextLocal` text",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setMarkerTextLocal"
        },
        "configuration": {
            "label": "setMarkerTextLocal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets marker type. Marker type is a class name from `CfgMarkers`.\n**NOTE**: **Multiplayer optimisation:** Global marker commands always broadcast the _entire_ marker state over the network. As such, the number of network messages exchanged when creating or editing a marker can be reduced by performing all but the last operation using local marker commands, then using a global marker command for the last change (and subsequent global broadcast of all changes applied to the marker).",
            "examples": [
                {
                    "text": "```sqf\n\"MarkerOne\" setMarkerType \"Warning\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String`"
                        },
                        {
                            "name": "type",
                            "description": "`String` - see `CfgMarkers`"
                        }
                    ],
                    "outline": "markerName `setMarkerType` type",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setMarkerType"
        },
        "configuration": {
            "label": "setMarkerType",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets marker type locally. Marker type is a class name in `CfgMarkers`.",
            "examples": [
                {
                    "text": "```sqf\n\"MarkerOne\" setMarkerTypeLocal \"Warning\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String`"
                        },
                        {
                            "name": "type",
                            "description": "`String` - see `CfgMarkers`."
                        }
                    ],
                    "outline": "markerName `setMarkerTypeLocal` type",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setMarkerTypeLocal"
        },
        "configuration": {
            "label": "setMarkerTypeLocal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Changes the mass of a PhysX object. When using the alternative syntax the mass change is gradual during the given time. A time of zero means immediate change.**IMPORTANT**:  When main syntax is used on [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality) vehicle, the change is global. When alternative syntax is used with time transition on [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality) vehicle, the gradual mass change doesn't happen on remote clients, only final mass is applied after the given time. If you need gradual change on remote clients too, [ remote execute](https://community.bistudio.com/wiki/remoteExec%20) `setMass` globally.",
            "examples": [
                {
                    "text": "```sqf\nmyObject setMass [10, 0.5];\n```"
                },
                {
                    "text": "```sqf\nmyObject setMass 10;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "myObject",
                            "description": "`Object`"
                        },
                        {
                            "name": "mass",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "myObject `setMass` mass",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "myObject",
                            "description": "`Object`"
                        },
                        {
                            "name": "mass",
                            "description": "`Number`"
                        },
                        {
                            "name": "time",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "myObject `setMass` [mass, time]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setMass"
        },
        "configuration": {
            "label": "setMass",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets maximum load limit for a uniform/vest/backpack containers, vehicle cargo, supply boxes and weapon holders. In MP this command should be executed on the server and will persist on given container for JIP.\n**NOTE**: Cannot be set on a unit, as unit max load value is static config type",
            "examples": [
                {
                    "text": "```sqf\n_yaMum setMaxLoad _maxLoad;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "container",
                            "description": "`Object` - uniform/vest/backpack container, vehicle cargo, supply box, weapon holder"
                        },
                        {
                            "name": "maxLoadValue",
                            "description": "`Number` - max load limit"
                        }
                    ],
                    "outline": "container `setMaxLoad` maxLoadValue",
                    "returns": "`Nothing`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/setMaxLoad"
        },
        "configuration": {
            "label": "setMaxLoad",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets person's facial expression. To set it back to default, use \"\".\n**Arma 3**: Prior to Arma 3 v2.01.146630 Mimics must be written in all lower case letters.",
            "examples": [
                {
                    "text": "```sqf\n_soldier1 setMimic \"hurt\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "person",
                            "description": "`Object`"
                        },
                        {
                            "name": "mimic",
                            "description": "`String` - can be one of:\n{{{!}} class=\"valign-top\"\n! style=\"padding-right: 2em\" {{!}} Before Arma 2 OA v1.6x !! Since Arma 2 OA v1.6x\n{{!}}-\n{{!}}\n* \"Default\"\n* \"Normal\"\n* \"Smile\"\n* \"Hurt\"\n* \"Ironic\"\n* \"Sad\"\n* \"Cynic\"\n* \"Surprised\"\n* {{sic|\"Agresive\"}}\n* \"Angry\"\n{{!}}\n* \"neutral\"\n* \"dead\"\n* \"danger\"\n* \"hurt\"\n* \"aware\"\n* \"safe\"\n* \"combat\"\n* \"unconscious\"\n{{!}}}"
                        }
                    ],
                    "outline": "person `setMimic` mimic",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setMimic"
        },
        "configuration": {
            "label": "setMimic",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets a guided missile target. Does not work for all types of missiles. If the target is dead, it is ignored. The target has to be inside the missile's configured targeting cone for the command to work.",
            "examples": [
                {
                    "text": "```sqf\nmissile1 setMissileTarget tank1;\n```"
                },
                {
                    "text": "```sqf\n\n_missile = createVehicle [\"Missile_AGM_01_F\", player modelToWorld [0,0,50], [], 0, \"CAN_COLLIDE\"];\n_missile setDir getDir player;\n_tgt = createVehicle [\"O_APC_Wheeled_02_rcws_v2_F\", player modelToWorld [0,300,0], [], 0, \"CAN_COLLIDE\"];\n_tgt setVehicleTiPars [1, 1, 1];\n[_missile, _tgt] spawn {\n\tparams [\"_missile\", \"_tgt\"];\n\tsleep 0.1;\n\t_missile setMissileTarget _tgt;\n};\n\n```"
                },
                {
                    "text": "```sqf\n_missile setMissileTarget objNull; // cancels targeting\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "munition",
                            "description": "`Object`"
                        },
                        {
                            "name": "target",
                            "description": "`Object` - `objNull` to cancel targeting"
                        }
                    ],
                    "outline": "munition `setMissileTarget` target",
                    "returns": "`Boolean` - `true` if successful"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setMissileTarget"
        },
        "configuration": {
            "label": "setMissileTarget",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets a guided munition target position.\nThe munition must have `**manualControl**` config entry to use this command.\nThe target position has to be inside the missile's configured targeting cone for the command to work.",
            "examples": [
                {
                    "text": "```sqf\nmissile1 setMissileTargetPos unitAimPosition tank1;\n```"
                },
                {
                    "text": "```sqf\n\nprivate _missile = createVehicle [\"M_Scalpel_AT\", player modelToWorld [0,0,100], [], 0, \"CAN_COLLIDE\"];\n_missile setMissileTargetPos (player modelToWorld [0,100,0]);\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "munition",
                            "description": "`Object`"
                        },
                        {
                            "name": "position",
                            "description": "`Array` format [PositionATL](https://community.bistudio.com/wiki/Position%23PositionATL)"
                        }
                    ],
                    "outline": "munition `setMissileTargetPos` position",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setMissileTargetPos"
        },
        "configuration": {
            "label": "setMissileTargetPos",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets various mission options. The options are automatically reset between missions and are saved/restored with the save system.\n\nAvailable Options:\n\n* IgnoreNoDamage: `Boolean` - (default `false`) `true` to filter out no change in damage from {{Link|Arma 3: Event Handlers#HandleDamage|HandleDamage}} calls\n* IgnoreFakeHeadHit: `Boolean` - (default `false`) `true` to filter out FakeHeadHit context from {{Link|Arma 3: Event Handlers#HandleDamage|HandleDamage}} calls\n\nProviding a empty HashMap will reset all options to defaults.",
            "examples": [
                {
                    "text": "```sqf\nsetMissionOptions createHashMapFromArray [[\"IgnoreNoDamage\", true], [\"IgnoreFakeHeadHit\", true]];\n```"
                },
                {
                    "text": "```sqf\nsetMissionOptions createHashMap; // reset options to default\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "options",
                            "description": "`HashMap` - a HashMap containing all the options to be changed"
                        }
                    ],
                    "outline": "`setMissionOptions` options",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setMissionOptions"
        },
        "configuration": {
            "label": "setMissionOptions",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Moves mouse pointer to specified position on the screen. **x** and **y** could be any number, but will be clipped so mouse never leaves the screen area.",
            "examples": [
                {
                    "text": "```sqf\nsetMousePosition [0.5, 0.5];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "x",
                            "description": "`Number` - x in screen coordinates"
                        },
                        {
                            "name": "y",
                            "description": "`Number` - y in screen coordinates"
                        }
                    ],
                    "outline": "`setMousePosition` [x, y]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setMousePosition"
        },
        "configuration": {
            "label": "setMousePosition",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Defines a music track played on activation. If another track is playing already, this will stop it and start the new track.\n\nTrack is a subclass name of CfgMusic. In addition, \"$STOP$\" (stops the current music track) or use <sqf inline>playMusic \"\".\nWhen used in a trigger, the track starts on activation but does not automatically stop on deactivation.",
            "examples": [
                {
                    "text": "```sqf\n_trigger setMusicEffect \"Track1\";\n```"
                },
                {
                    "text": "```sqf\n[_group1,1] setMusicEffect \"$STOP$\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "trigger",
                            "description": "`Object`"
                        },
                        {
                            "name": "track",
                            "description": "`String`"
                        }
                    ],
                    "outline": "trigger `setMusicEffect` track",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Array` - format `Waypoint`"
                        },
                        {
                            "name": "track",
                            "description": "`String`"
                        }
                    ],
                    "outline": "waypoint `setMusicEffect` track",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setMusicEffect"
        },
        "configuration": {
            "label": "setMusicEffect",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets given music track event handler. Will overwrite other music event handlers.\n{{Feature|obsolete|Use `addMusicEventHandler` instead as it can stack music event handlers.}}",
            "examples": [
                {
                    "text": "```sqf\n_ehID = setMusicEventHandler [\"MusicStart\", \"hint str _this\"];\n```"
                },
                {
                    "text": "```sqf\n_ehID = setMusicEventHandler [\"MusicStop\", \"hint str _this\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`String` - \"MusicStart\" or \"MusicStop\""
                        },
                        {
                            "name": "function",
                            "description": "`String` - script to be executed. Passes params array 0: class name of the sound in [[Description.ext#Music|CfgMusic]], 1: event handler id"
                        }
                    ],
                    "outline": "`setMusicEventHandler` [type, function]",
                    "returns": "`Number` - id of the event handler"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setMusicEventHandler"
        },
        "configuration": {
            "label": "setMusicEventHandler",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the name of a location or a person (person only in single player).",
            "examples": [
                {
                    "text": "```sqf\nmyLocation setName \"My Location Name\";\n```"
                },
                {
                    "text": "```sqf\nplayer setName \"New Name\";\n```"
                },
                {
                    "text": "```sqf\nplayer setName [\"Ben Kerry\",\"Ben\",\"Kerry\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "thing",
                            "description": "`Location` or {{GVI|arma3|1.02"
                        },
                        {
                            "name": "name",
                            "description": "`String`"
                        }
                    ],
                    "outline": "thing `setName` name",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "name",
                            "description": "`String`"
                        },
                        {
                            "name": "firstName",
                            "description": "`String`"
                        },
                        {
                            "name": "lastName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `setName` [name, firstName, lastName]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setName"
        },
        "configuration": {
            "label": "setName",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the `nameSound` of a person. By default, when giving orders, the units are addressed by their number.\nWhen nameSound is set, it will be used instead to address the unit. For example instead of \"Two, hold fire!\", one can have \"Miller, hold fire!\".\n\n**NOTE**: \nSee {{Link|Arma 3: CfgIdentities#NameSounds}} for common values.\n\nNote that any word from <sqf inline>configFile >> \"RadioProtocolENG\" >> \"Words\" is accepted (e.g `**\"veh_infantry_Sniper_s\"**`).",
            "examples": [
                {
                    "text": "```sqf\nunit1 setNameSound \"dixon\";\n```"
                },
                {
                    "text": "```sqf\nunit1 setNameSound \"\"; // will reset to default behaviour\n```"
                },
                {
                    "text": "```sqf\n\n_name = \"Masood\";\nunit1 setNameSound _name;\nunit1 setName _name;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "person",
                            "description": "`Object`"
                        },
                        {
                            "name": "name",
                            "description": "`String`"
                        }
                    ],
                    "outline": "person `setNameSound` name",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setNameSound"
        },
        "configuration": {
            "label": "setNameSound",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set object arguments in mission editor.\n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "[object,[name1,value1,...]]",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "map `setObjectArguments` [object,[name1,value1,...]]",
                    "returns": "`Anything`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setObjectArguments"
        },
        "configuration": {
            "label": "setObjectArguments",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets material of object selection. The selection number is defined through the [hiddenselection](https://community.bistudio.com/wiki/CfgVehicles%20Config%20Reference%23hiddenSelections)[] = {} array in the vehicle's config (starting with 0).",
            "examples": [
                {
                    "text": "```sqf\n\ncar setObjectMaterial [0,\"A3\\Structures_F\\Data\\Windows\\window_set.rvmat\"];\ncar setObjectMaterial [1,\"A3\\Structures_F\\Data\\Windows\\window_set.rvmat\"];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "obj",
                            "description": "`Object`"
                        },
                        {
                            "name": "selectionNumber",
                            "description": "`Number` or `String` (since **(Arma 3)**)"
                        },
                        {
                            "name": "material",
                            "description": "`String`"
                        }
                    ],
                    "outline": "obj `setObjectMaterial` [selectionNumber, material]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setObjectMaterial"
        },
        "configuration": {
            "label": "setObjectMaterial",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set the material of the given selection on all computers in a network session.",
            "examples": [
                {
                    "text": "```sqf\nplayer setObjectMaterialGlobal [0, \"A3\\Structures_F\\Data\\Windows\\window_set.rvmat\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "obj",
                            "description": "`Object`"
                        },
                        {
                            "name": "selection",
                            "description": "`Number` or {{GVI|arma3|2.10"
                        },
                        {
                            "name": "material",
                            "description": "`String`"
                        }
                    ],
                    "outline": "obj `setObjectMaterialGlobal` [selection, material]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setObjectMaterialGlobal"
        },
        "configuration": {
            "label": "setObjectMaterialGlobal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set the proxy object associated with the given editor object.\n**NOTE**: Some Old Editor Command",
            "examples": [
                {
                    "text": "```sqf\n_map setObjectProxy [\"_group_0\", vehicle (leader _group)];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "object",
                            "description": "`String`"
                        },
                        {
                            "name": "proxy",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "map `setObjectProxy` [object, proxy]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setObjectProxy"
        },
        "configuration": {
            "label": "setObjectProxy",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Scales an [attached object](https://community.bistudio.com/wiki/attachTo) or a [Simple Object](https://community.bistudio.com/wiki/Arma%203%3A%20Simple%20Objects)'s model - see _Example 3_ for various configurations' examples.",
            "examples": [
                {
                    "text": "```sqf\n\n_vehicle attachTo [player, [0,0,0]];\n_vehicle setObjectScale 0.1;\n\n```"
                },
                {
                    "text": "```sqf\n\n// select an object in Eden Editor and execute the following code in the Debug Console. When moving the object, the effect is reset!\nprivate _object = get3DENSelected \"Object\" select 0;\n_object setObjectScale 0.1;\n\n```"
                },
                {
                    "text": "```sqf\n\n// multiple MP-compatible options\n\n// global simple object\nprivate _globalSimpleObject = createSimpleObject [\"C_Offroad_01_F\", getPosASL player, false];\n_globalSimpleObject setObjectScale 0.1; // once is enough as long as it is not moved\n\n// local normal object\nprivate _localNormalObject = \"C_Offroad_01_F\" createVehicleLocal getPosATL player;\n_localNormalObject attachTo [player, [0, 2, 1.5]]; // normal object must be attached\n_localNormalObject setObjectScale 0.1; // once is enough as long as it is not moved\n\n// local simple object\nprivate _localSimpleObject = createSimpleObject [\"C_Offroad_01_F\", getPosASL player, true];\n_localSimpleObject setObjectScale 0.1; // once is enough as long as it is not moved\n\n```"
                },
                {
                    "text": "```sqf\n\n// a not-so-great EachFrame workaround for a non-attached object\n\n// a normal object that is not attached must be scaled each frame\n// make sure the object is LOCAL in order to not saturate the network!\nprivate _localNormalObject = \"C_Offroad_01_F\" createVehicleLocal getPosATL player;\n// the object is not attached to anything\naddMissionEventHandler [\n\t\"EachFrame\",\n\t{ _thisArgs params [\"_obj\", \"_scale\"]; _obj setObjectScale _scale; },\n\t[_localNormalObject, 0.1]\n];\n\n```"
                },
                {
                    "text": "```sqf\n\n// only do the following in single player;\n// NEVER do such EachFrame in multiplayer!!\n// the performance will be terrible, the network will be saturated, the scaling may desync and not be perfect\nprivate _globalNormalObject = \"C_Offroad_01_F\" createVehicle getPosATL player;\naddMissionEventHandler [\n\t\"EachFrame\",\n\t{ _thisArgs params [\"_obj\", \"_scale\"]; _obj setObjectScale _scale; },\n\t[_globalNormalObject, 0.1]\n];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - must be either an [attached object](https://community.bistudio.com/wiki/attachTo) or [Simple Object](https://community.bistudio.com/wiki/Arma%203%3A%20Simple%20Objects) - see _Example 3_"
                        },
                        {
                            "name": "scale",
                            "description": "`Number` - in range 0.0001..65504, relative to the object model's normal scale"
                        }
                    ],
                    "outline": "object `setObjectScale` scale",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setObjectScale"
        },
        "configuration": {
            "label": "setObjectScale",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Applies given texture to object's selection. See also [Procedural Textures](https://community.bistudio.com/wiki/Procedural%20Textures) and [Retexturing with setObjectTexture](https://community.bistudio.com/wiki/Retexturing%20with%20setObjectTexture).\n**NOTE**: \n* Not all objects can be textured this way. To find out, run `getObjectTextures` command on an object. Empty array <sqf inline>[] usually indicates it cannot be textured.\n* All textures must have a resolution of 2<sup>a</sup> &times; 2<sup>b</sup> (e.g. 16&times;16, 16&times;32, 64&times;256, 512&times;512, ...). The largest texture size supported by the RV engine is 4096&times;4096.\n* Supported formats: .pac, .paa, .jpg, .jpeg, .ogg, .ogv",
            "examples": [
                {
                    "text": "```sqf\n_objectname setObjectTexture [0, \"\\pboname\\texture.paa\"];\n_objectname setObjectTexture [1, \"\\pboname\\texture2.paa\"];\n```"
                },
                {
                    "text": "```sqf\n_obj setObjectTexture [0, \"#(rgb,8,8,3)color(1,0,0,1)\"];\n```"
                },
                {
                    "text": "```sqf\n_obj setObjectTexture [0, \"#(argb,512,512,1)r2t(rendersurface,1.333)\"];\n```"
                },
                {
                    "text": "Disable randomization before applying a texture to a vehicle in the Editor (if it is a vehicle that supports randomization):\n\n```sqf\nthis setVariable [\"BIS_enableRandomization\", false];\nthis setObjectTexture [0,\"#(rgb,8,8,3)color(1,0,0,1)\"];\n```"
                },
                {
                    "text": "The `**\"clan\"**` selection can be used to apply a texture to the areas that usually display the [[squad.xml]] logo:\n\n```sqf\nMyVehicle setObjectTexture [\"clan\", \"\\a3\\missions_f_epa\\data\\img\\orbat\\b_111_texture_ca.paa\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "selection",
                            "description": "`Number` or {{GVI|arma3|2.10"
                        },
                        {
                            "name": "texture",
                            "description": "`String` - path to texture"
                        }
                    ],
                    "outline": "object `setObjectTexture` [selection, texture]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setObjectTexture"
        },
        "configuration": {
            "label": "setObjectTexture",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set the texture of the given selection on all computers in a network session.\n**NOTE**: \n* Not all objects can be textured this way. To find out, run `getObjectTextures` command on an object. Empty array <sqf inline>[] usually indicates it cannot be textured.\n* All textures must have a resolution of 2<sup>a</sup> &times; 2<sup>b</sup> (e.g. 16&times;16, 16&times;32, 64&times;256, 512&times;512, ...). The largest texture size supported by the RV engine is 4096&times;4096.\n* Supported formats: .pac, .paa, .jpg, .jpeg, .ogg, .ogv",
            "examples": [
                {
                    "text": "```sqf\nplayer setObjectTextureGlobal [0, \"\\MyAddon\\blue.paa\"];\n```"
                },
                {
                    "text": "```sqf\n\n// Set up a persistent texture keeper\nplayer addEventHandler [\"Take\", {\n\t(getObjectTextures player + [uniformContainer player getVariable \"texture\"])\n\tparams [\"_texUniform\", \"_texInsignia\", \"_texCustom\"];\n\tif (isNil \"_texCustom\") exitWith {};\n\tif (_texUniform == _texCustom) exitWith {};\n\tplayer setObjectTextureGlobal [0, _texCustom];\n\tfalse\n}];\n\n// Example: make current uniform persistently blue\n\nprivate _texture = \"#(rgb,8,8,3)color(0,0,1,1)\"; // blue texture\nplayer setObjectTextureGlobal [0, _texture]; // set it on player\nuniformContainer player setVariable [\"texture\", _texture, true]; // store it on uniform\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "selection",
                            "description": "`Number` or {{GVI|arma3|2.10"
                        },
                        {
                            "name": "texture",
                            "description": "`String` - path to texture"
                        }
                    ],
                    "outline": "object `setObjectTextureGlobal` [selection, texture]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setObjectTextureGlobal"
        },
        "configuration": {
            "label": "setObjectTextureGlobal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the rendering distance of objects and shadows.",
            "examples": [
                {
                    "text": "```sqf\nsetObjectViewDistance 2000;\n```"
                },
                {
                    "text": "```sqf\nsetObjectViewDistance [2000, 800];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "objectDistance",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`setObjectViewDistance` objectDistance",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "objectDistance",
                            "description": "`Number`"
                        },
                        {
                            "name": "shadowDistance",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`setObjectViewDistance` [objectDistance, shadowDistance]",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setObjectViewDistance"
        },
        "configuration": {
            "label": "setObjectViewDistance",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the optic mode of the current weapon to the given class name or the index.",
            "examples": [
                {
                    "text": "```sqf\nplayer setOpticsMode \"Hamr2Scope\"; // Default optic mode for optic_Hamr\n```"
                },
                {
                    "text": "```sqf\nplayer setOpticsMode 0;\n```"
                },
                {
                    "text": "```sqf\nplayer setOpticsMode [1, 0]; // reset the optics mode of the player's primary weapon to the default\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "mode",
                            "description": "`String`, `Number` or `Array`:\n* `String` - class name defined in the optic's `**OpticsModes**` config class\n* `Number` - 0-based index of the optic mode with 0 being the default optic mode\n* `Array` - in format [slotIndex, opticsModeIndexOrClassName] where:\n** slotIndex: `Number`, can be one of:\n*** 0 - Current weapon\n*** 1 - Primary weapon\n*** 2 - Secondary weapon\n*** 3 - Handgun\n** opticsModeIndexOrClassName: `String` or `Number` as above"
                        }
                    ],
                    "outline": "unit `setOpticsMode` mode",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setOpticsMode"
        },
        "configuration": {
            "label": "setOpticsMode",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set overcast to given value smoothly during given time (in seconds). Zero time means immediate change.\nAn overcast setting of zero means clear (sunny) weather, and one means storms and rain are very likely. Higher overcast values also result in higher `wind` speeds.",
            "examples": [
                {
                    "text": "```sqf\n60 setOvercast 0.5;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "time",
                            "description": "`Number` - in seconds"
                        },
                        {
                            "name": "overcast",
                            "description": "`Number` - in range 0..1"
                        }
                    ],
                    "outline": "time `setOvercast` overcast",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setOvercast"
        },
        "configuration": {
            "label": "setOvercast",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "From server machine, change the ownership of an object to a given client. Using command in an unintended way will log a message to .rpt file. To transfer ownership of all AI units in a group properly, use `setGroupOwner` instead.",
            "examples": [
                {
                    "text": "```sqf\n_someObject setOwner 12;\n```"
                },
                {
                    "text": "```sqf\n_someObject setOwner (owner _playerObject);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - object to transfer"
                        },
                        {
                            "name": "clientID",
                            "description": "`Number` - the [ machine network ID](https://community.bistudio.com/wiki/Multiplayer_Scripting%23Machine_network_ID%20) of the new `owner`."
                        }
                    ],
                    "outline": "object `setOwner` clientID",
                    "returns": "`Boolean` - returns `true` if ownership was successfully transferred, otherwise `false`"
                }
            ],
            "argumentLocality": "Global Argument",
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/setOwner"
        },
        "configuration": {
            "label": "setOwner",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets oxygen remaining. It has no effect when soldier is not diving. Oxygen remaining is a number between 0 and 1.",
            "examples": [
                {
                    "text": "```sqf\nplayer setOxygenRemaining 0; // drowns player\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "value",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "unit `setOxygenRemaining` value",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setOxygenRemaining"
        },
        "configuration": {
            "label": "setOxygenRemaining",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Updates particle source, creates particles in circle with given radius. Velocity is transformed and added to total velocity.",
            "examples": [
                {
                    "text": "```sqf\n_myParticleSource setParticleCircle [3, [0,0,5]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "particleSource",
                            "description": "`Object`"
                        },
                        {
                            "name": "circleRadius",
                            "description": "`Number`"
                        },
                        {
                            "name": "circleVelocity",
                            "description": "`Array` of `Number`s in format [X, Y, Z]"
                        }
                    ],
                    "outline": "particleSource `setParticleCircle` [circleRadius, circleVelocity]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setParticleCircle"
        },
        "configuration": {
            "label": "setParticleCircle",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets particle source parameters using existing particle config from `**CfgCloudlets**` class. Use `setParticleParams` subsequently if you need to overwrite some values.\n**IMPORTANT**:  If `**CfgCloudlets**` class contains [ simple expressions](https://community.bistudio.com/wiki/Simple_Expression%20), they will not be evaluated by this command, which might make the whole class unusable in script.",
            "examples": [
                {
                    "text": "```sqf\n_source01 = \"#particlesource\" createVehicleLocal _pos01;\n_source01 setParticleClass \"ObjectDestructionFire1Smallx\";\n_source01 attachTo [_object,[0,0,0]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "source",
                            "description": "`Object` - particle source"
                        },
                        {
                            "name": "className",
                            "description": "`String` - CfgCloudlets class"
                        }
                    ],
                    "outline": "source `setParticleClass` className",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setParticleClass"
        },
        "configuration": {
            "label": "setParticleClass",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set fire parameters to particle effect.\n\nNote: You need to create emitter at first. Basic parameters of particle effect must be defined too. You can use script commands `setParticleClass` or `setParticleParams` to do so (see example). Correspondence between CfgCloudlets class param names and command array of params:\n\n```sqf\n\nparticleSource setParticleFire\n[\n\tcoreIntensity,\n\tcoreDistance,\n\tdamageTime\n];\n\n```",
            "examples": [
                {
                    "text": "```sqf\n\n_emitter = \"#particlesource\" createVehicleLocal (getPos player);\n_emitter setParticleClass \"MediumSmoke\";\n_emitter setParticleFire [0.3,1.0,0.1];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "source",
                            "description": "`Object`"
                        },
                        {
                            "name": "coreIntensity",
                            "description": "`Number` - damage in the center of fire"
                        },
                        {
                            "name": "coreDistance",
                            "description": "`Number` - how far can unit get damage"
                        },
                        {
                            "name": "damageTime",
                            "description": "`Number` - how often is unit getting damage"
                        }
                    ],
                    "outline": "source `setParticleFire` [coreIntensity, coreDistance, damageTime]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setParticleFire"
        },
        "configuration": {
            "label": "setParticleFire",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set parameters to particle source. Array is in format `ParticleArray`. \n\n\nSince Arma 3 version 1.11.114706 you can use this command to overwrite many values set by `setParticleClass`, particularity those defined in `ParticleArray`. Correspondence between CfgCloudlets class param names and command array of params:\n\n```sqf\nparticleSource setParticleParams\n[\n\t/*\n\t\tString or Array - If string then the name of the particleShape. And following default values are used:\n\t\t\tparticleFSNtieth = 1\n\t\t\tparticleFSIndex = 0\n\t\t\tparticleFSFrameCount = 1\n\t\t\tparticleFSLoop = 1\n\t*/\n\t[\n\t\tparticleShape,\t\t\t/* String */\n\t\tparticleFSNtieth,\t\t/* Number */\n\t\tparticleFSIndex,\t\t/* Number */\n\t\tparticleFSFrameCount,\t/* Number */\n\t\tparticleFSLoop\t\t\t/* Optional - Number. Default: 1 */\n\t],\n\tanimationName,\t\t\t\t/* String */\n\tparticleType,\t\t\t\t/* String - Enum: Billboard, SpaceObject */\n\ttimerPeriod,\t\t\t\t/* Number */\n\tlifeTime,\t\t\t\t\t/* Number */\n\tpos3D,\t\t\t\t\t\t/* 3D Array of numbers as relative position to particleSource or (if object at index 18 is set) object. \n\t\t\t\t\t\t\t\t\tOr (if object at index 18 is set) String as memoryPoint of object. */\n\tmoveVelocity,\t\t\t\t/* 3D Array of numbers. */\n\trotationVelocity,\t\t\t/* Number */\n\tweight,\t\t\t\t\t\t/* Number */\n\tvolume,\t\t\t\t\t\t/* Number */\n\trubbing,\t\t\t\t\t/* Number */\n\tsizeOverLifetime,\t\t\t/* Array of Numbers */\n\tcolor,\t\t\t\t\t\t/* Array of Array of RGBA Numbers */\n\tanimationSpeed,\t\t\t\t/* Array of Number */\n\trandomDirectionPeriod,\t\t/* Number */\n\trandomDirectionIntensity,\t/* Number */\n\tonTimerScript,\t\t\t\t/* String */\n\tbeforeDestroyScript,\t\t/* String */\n\tobj,\t\t\t\t\t\t/* Object */\n\tangle,\t\t\t\t\t\t/* Optional Number - Default: 0 */\n\tonSurface,\t\t\t\t\t/* Optional Boolean */\n\tbounceOnSurface,\t\t\t/* Optional Number */\n\temissiveColor,\t\t\t\t/* Optional Array of Array of RGBA Numbers */\n\tvectorDirOrVectorDirAndUp\t/* Optional vector dir or [vectorDir, vectorUp]\n\t\tSince Arma 3 v1.92 it is possible to set the initial direction of the SpaceObject\n\t\tSince Arma 3 v2.12 it is possible to use a [vectorDir, vectorUp] array */\n];\n```",
            "examples": [
                {
                    "text": "see `ParticleArray`"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "particleSource",
                            "description": "`Object`"
                        },
                        {
                            "name": "array",
                            "description": "`Array` - format `ParticleArray`"
                        }
                    ],
                    "outline": "particleSource `setParticleParams` array",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setParticleParams"
        },
        "configuration": {
            "label": "setParticleParams",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets randomization of particle source parameters. Correspondence between CfgCloudlets class param names and command array of params:\n\n```sqf\nparticleSource setParticleRandom\n[\n\tlifeTimeVar,\n\tpositionVar,\n\tmoveVelocityVar,\n\trotationVelocityVar,\n\tsizeVar,\n\tcolorVar,\n\trandomDirectionPeriodVar,\n\trandomDirectionIntensityVar,\n\tangleVar,\n\tbounceOnSurfaceVar\n];\n```",
            "examples": [
                {
                    "text": "```sqf\n_particleSource setParticleRandom [0, [0.1, 0.1, 0.1], [0, 0, 0.5], 0, 0.1, [0, 0, 0, 0], 0, 0, 45, 0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "particleSource",
                            "description": "`Object`"
                        },
                        {
                            "name": "lifeTime",
                            "description": "`Number`"
                        },
                        {
                            "name": "position",
                            "description": "`Array` of `Number` - in format [randomX, randomY, randomZ]"
                        },
                        {
                            "name": "moveVelocity",
                            "description": "`Array` of `Number` - in format [randomX, randomY, randomZ]"
                        },
                        {
                            "name": "rotationVelocity",
                            "description": "`Number`"
                        },
                        {
                            "name": "size",
                            "description": "`Number`"
                        },
                        {
                            "name": "color",
                            "description": "[[Color|Color (RGBA)]]"
                        },
                        {
                            "name": "directionPeriod",
                            "description": "`Number`"
                        },
                        {
                            "name": "directionIntensity",
                            "description": "`Number`"
                        },
                        {
                            "name": "angle",
                            "description": "`Number` - (Optional)"
                        },
                        {
                            "name": "bounceOnSurface",
                            "description": "`Number` - (Optional)"
                        }
                    ],
                    "outline": "particleSource `setParticleRandom` [lifeTime, position, moveVelocity, rotationVelocity, size, color, directionPeriod, directionIntensity, angle, bounceOnSurface]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setParticleRandom"
        },
        "configuration": {
            "label": "setParticleRandom",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the direction of airplane's or helicopter's {{Link|Arma 3: Targeting config reference#class pilotCamera|pilotCamera}}.",
            "examples": [
                {
                    "text": "```sqf\nvehicle player setPilotCameraDirection [0,1,0] // re-centers the camera\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - a vehicle equipped with pilot camera"
                        },
                        {
                            "name": "vector3D",
                            "description": "`Array` in format `Vector3D` - in model space, relative to the model centre (In a similar fashion to [PositionRelative](https://community.bistudio.com/wiki/Position%23PositionRelative))"
                        }
                    ],
                    "outline": "object `setPilotCameraDirection` vector3D",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/setPilotCameraDirection"
        },
        "configuration": {
            "label": "setPilotCameraDirection",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the optics mode index (zoom) for the [pilotCamera](https://community.bistudio.com/wiki/Arma%203%3A%20Targeting%20config%20reference%23class%20pilotCamera)",
            "examples": [
                {
                    "text": "```sqf\nvehicle player setPilotCameraOpticsMode 0\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "object `setPilotCameraOpticsMode` index",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/setPilotCameraOpticsMode"
        },
        "configuration": {
            "label": "setPilotCameraOpticsMode",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets rotation (relative to the centered camera position) of the object airplane or helicopter [pilotCamera](https://community.bistudio.com/wiki/A3_Targeting_config_reference%23class_pilotCamera) .",
            "examples": [
                {
                    "text": "```sqf\nvehicle player setPilotCameraRotation [rad 90, rad 45];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "rotation",
                            "description": "`Array` - [x,y] - format [yaw (turn), pitch (elevation)]. Values are in radians, positive values are left yaw and down pitch from the center."
                        }
                    ],
                    "outline": "object `setPilotCameraRotation` rotation",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/setPilotCameraRotation"
        },
        "configuration": {
            "label": "setPilotCameraRotation",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets an area or target to be tracked by the object airplane or helicopter [pilotCamera](https://community.bistudio.com/wiki/A3_Targeting_config_reference%23class_pilotCamera). \nTo track an object the vehicle has to have appropriate sensors ([scanners](https://community.bistudio.com/wiki/A3_Targeting_config_reference%23CfgVehicles)) that can detect the given target type.\nUsing `objNull` will unlock the camera",
            "examples": [
                {
                    "text": "```sqf\n_pilotCamTrack = vehicle player setPilotCameraTarget [2100,4200,4.2];\n```"
                },
                {
                    "text": "```sqf\n_pilotCamTrack = vehicle player setPilotCameraTarget BIS_Edita;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "target",
                            "description": "`Object` or `Array` - format PositionASL"
                        }
                    ],
                    "outline": "object `setPilotCameraTarget` target",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/setPilotCameraTarget"
        },
        "configuration": {
            "label": "setPilotCameraTarget",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Switches headlights of a vehicle on/off. Note that the vehicle has to be [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality), for global variant use [Arma 3: Actions](https://community.bistudio.com/wiki/Arma%203%3A%20Actions) \"[LightOn](https://community.bistudio.com/wiki/Arma_3_Actions%23LightOn)\"/\"[LightOff](https://community.bistudio.com/wiki/Arma_3_Actions%23LightOff)\"",
            "examples": [
                {
                    "text": "```sqf\ncar setPilotLight true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "set",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "vehicle `setPilotLight` set",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setPilotLight"
        },
        "configuration": {
            "label": "setPilotLight",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets Render Target's visual effect (Picture-in-Picture).\n{{{!}} class=\"wikitable align-center-col-1\" style=\"font-size: .95em\"\n! Mode\n! Description\n! Parameters\n{{!}}-\n{{!}} 0\n{{!}} Normal\n{{!}} [0]\n{{!}}-\n{{!}} 1\n{{!}} Night Vision\n{{!}} [1]\n{{!}}-\n{{!}} 2\n{{!}} Thermal Imaging\n{{!}} [2]\n{{!}}-\n{{!}} 3\n{{!}} [Color Correction](https://community.bistudio.com/wiki/Post%20Process%20Effects%23ColorCorrections)\n{{!}} [3, enabled, brightness, contrast, offset, blend [r,g,b,a], lerp [r,g,b,a], rgb [r,g,b,a]]\n{{!}}-\n<!--\n{{!}} 4\n{{!}} Mirror - **non-functional**\n{{!}} [4]\n{{!}}-\n{{!}} 5\n{{!}} [Chromatic Aberration](https://community.bistudio.com/wiki/Post%20Process%20Effects%23ChromAberration) - **non-functional**\n{{!}} [5, enabled, powerx, powery, (bool) aspectCorrection]\n{{!}}-\n{{!}} 6\n{{!}} [ Film Grain](https://community.bistudio.com/wiki/Post%20Process%20Effects%23FilmGrain) - **non-functional**\n{{!}} <small>[6, enabled, intensity, sharpness, grainsize, intensityx1, intensityx2, (bool) monochromatic]</small>\n{{!}}-\n-->\n{{!}} 7\n{{!}} Alt. Thermal Imaging 1 (Inverted)\n{{!}} [7]\n{{!}}-\n{{!}} 8\n{{!}} Alt. Thermal Imaging 2 (Green)\n{{!}} [8]\n{{!}}-\n{{!}} 9..70\n{{!}} {{GVI|arma3|2.10",
            "examples": [
                {
                    "text": "```sqf\n\"rendersurface\" setPiPEffect [0];\n```"
                },
                {
                    "text": "```sqf\n\"rendertarget0\" setPiPEffect [3, 1, 1.0, 1.0, 0.0, [0.0, 1.0, 0.0, 0.25], [1.0, 0.0, 1.0, 1.0],  [0.199, 0.587, 0.114, 0.0]];\n```"
                },
                {
                    "text": "```sqf\n\nprivate _cam = \"camera\" camCreate (player modelToWorld [0,-5,2]);\n_cam cameraEffect [\"internal\", \"back\", \"rtt\"];\n\"rtt\" setPiPEffect [2];\nwith uiNamespace do {\n\tprivate _pic = findDisplay 46 ctrlCreate [\"RscPicture\", -1];\n\t_pic ctrlSetPosition [0,0,1,1];\n\t_pic ctrlCommit 0;\n\t_pic ctrlSetText \"#(argb,512,512,1)r2t(rtt,1.0)\";\n};\n\n```"
                },
                {
                    "text": "Black & White:\n\n```sqf\n\"rtt\" setPiPEffect [3, 1, 1.0, 0.4, 0, [0,0,0,0], [1,1,1,0], [1,1,1,1]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "name ",
                            "description": "`String` - render surface reference from [Render To Texture](https://community.bistudio.com/wiki/Procedural%20Textures%23Render%20To%20Texture)"
                        },
                        {
                            "name": "effect ",
                            "description": "`Number` - effect type"
                        },
                        {
                            "name": "optionalParamN",
                            "description": "`Number` - (Optional) parameters based on selected effect"
                        }
                    ],
                    "outline": "name `setPiPEffect` [effect, optionalParam1, optionalParam2, ...]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setPiPEffect"
        },
        "configuration": {
            "label": "setPiPEffect",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set the PiP (Picture-in-Picture) view distance. This has no impact if PiP is disabled (see `isPiPEnabled`).",
            "examples": [
                {
                    "text": "```sqf\nsetPiPViewDistance 100;\n```"
                },
                {
                    "text": "```sqf\nsetPiPViewDistance viewDistance;\n```"
                },
                {
                    "text": "```sqf\nsetPiPViewDistance getObjectViewDistance;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "distance",
                            "description": "`Number` - distance in meters, minimum value is 100, maximum is [current view distance](https://community.bistudio.com/wiki/viewDistance)"
                        }
                    ],
                    "outline": "`setPiPViewDistance` distance",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setPiPViewDistance"
        },
        "configuration": {
            "label": "setPiPViewDistance",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the pitch of a persons voice.",
            "examples": [
                {
                    "text": "```sqf\nunit1 setPitch 0.5;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "person",
                            "description": "`Object`"
                        },
                        {
                            "name": "pitch",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "person `setPitch` pitch",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setPitch"
        },
        "configuration": {
            "label": "setPitch",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Change the license plates on any vehicle which has plates configured. Max 15 characters are allowed!",
            "examples": [
                {
                    "text": "```sqf\nvehicle player setPlateNumber \"K2000\";\n```"
                },
                {
                    "text": "Reset plate to the world's randomised template:\n\n```sqf\n\nprivate _return = \"\";\nprivate _cfg = (configFile >> \"CfgWorlds\" >> worldName);\n\n{\n\t_return = _return + (call {\n\t\tif (_x == \"$\") exitWith {\n\t\t\tselectRandom (getText (_cfg >> \"plateLetters\") splitString \"\")\n\t\t};\n\t\tif (_x == \"#\") exitWith {\n\t\t\tselectRandom [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"]\n\t\t};\n\t\t_x\n\t});\n} forEach (getText (_cfg >> \"plateFormat\") splitString \"\");\n\n_car setPlateNumber _return;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "string",
                            "description": "`String`"
                        }
                    ],
                    "outline": "vehicle `setPlateNumber` string",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setPlateNumber"
        },
        "configuration": {
            "label": "setPlateNumber",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Create a multiplayer role for the unit. The roles created this way are used for [Join In Progress](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Join%20In%20Progress) and [Team Switch](https://community.bistudio.com/wiki/Team%20Switch).",
            "examples": [
                {
                    "text": "```sqf\nsetPlayable _aPerson;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`setPlayable` unitName",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setPlayable"
        },
        "configuration": {
            "label": "setPlayable",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the time interval (in seconds) that the player must wait before respawn. It resets to mission default on mission start. In Single Player or when respawn type is GROUP or SIDE in Multiplayer, setting player respawn time has no effect, and `playerRespawnTime` will always return -1.",
            "examples": [
                {
                    "text": "```sqf\nsetPlayerRespawnTime 5;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "interval",
                            "description": "`Number` - respawn time in seconds"
                        }
                    ],
                    "outline": "`setPlayerRespawnTime` interval",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setPlayerRespawnTime"
        },
        "configuration": {
            "label": "setPlayerRespawnTime",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets provided player's Voice over Network (VoN) volume.",
            "examples": [
                {
                    "text": "```sqf\n_loudPlayer setPlayerVoNVolume 0.5;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - the other player's unit"
                        },
                        {
                            "name": "volume",
                            "description": "`Number` - the wanted volume"
                        }
                    ],
                    "outline": "unit `setPlayerVoNVolume` volume",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setPlayerVoNVolume"
        },
        "configuration": {
            "label": "setPlayerVoNVolume",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets object position to format [PositionAGLS](https://community.bistudio.com/wiki/Position%23PositionAGLS) (over surface). The Z value is used to calculate the nearest surface below the provided position. If the surface is close, it uses the Z position of the surface. Otherwise, Z value becomes the offset from that surface.\n**IMPORTANT**:  It is recommended to **avoid** this command when placing objects above other objects, due to the unpredictable behavior described above.",
            "examples": [
                {
                    "text": "```sqf\n\nplayer setPos [getPos player select 0, getPos player select 1, (getPos player select 2) +10];\n\n// the same as above using set (OFP:R v1.75)\n_pos = getPos player;\n_pos set [2, _pos select 2 + 10];\nplayer setPos _pos;\n\n// the same as above using modelToWorld (ArmA v1.00)\nplayer setPos (player modelToWorld [0,0,10]);\n\n// the same as above using vectorAdd (Arma 3 v1.22)\nplayer setPos (getPos player vectorAdd [0,0,10]);\n\n```"
                },
                {
                    "text": "```sqf\n_obj setPos [getPos _obj select 0, getPos _obj select 1, -5];\n```"
                },
                {
                    "text": "```sqf\nplayer setPos (getPos _obj);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "pos",
                            "description": "`Array` - position in format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) or [Position2D](https://community.bistudio.com/wiki/Position%23Introduction), in which case Z will be set to 0"
                        }
                    ],
                    "outline": "object `setPos` pos",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setPos"
        },
        "configuration": {
            "label": "setPos",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the object position above sea level. Given position must be in [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) format.",
            "examples": [
                {
                    "text": "```sqf\nplayer setPosASL [getPosASL player select 0, (getPosASL player select 1) + 10, getPosASL player select 2];\n```"
                },
                {
                    "text": "```sqf\n\n_position = getPosASL _object;\n_position set [2, 10]; // 10m above sea level\n_object setPosASL _position;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "pos",
                            "description": "`Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL)"
                        }
                    ],
                    "outline": "object `setPosASL` pos",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setPosASL"
        },
        "configuration": {
            "label": "setPosASL",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the object position. The pos array uses the [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) format. The version of the command does not offset based on object center. \n**WARNING**: This command was deactivated and has no effect. Use `setPosWorld` instead.",
            "examples": [
                {
                    "text": "```sqf\nprivate _aslPos = getPosASL player;\n_aslPos set [1, _aslPos select 1 + 10];\nplayer setPosASL2 _aslPos;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "obj",
                            "description": "`Object`"
                        },
                        {
                            "name": "pos",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "obj `setPosASL2` pos",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setPosASL2"
        },
        "configuration": {
            "label": "setPosASL2",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the object position above sea surface. The pos array uses the [PositionASLW](https://community.bistudio.com/wiki/Position%23PositionASLW) format.",
            "examples": [
                {
                    "text": "```sqf\n_diver setPosASLW [(position _diver) select 0, (position _diver) select 1, -10];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "obj",
                            "description": "`Object`"
                        },
                        {
                            "name": "pos",
                            "description": "`Array` format [PositionASLW](https://community.bistudio.com/wiki/Position%23PositionASLW)"
                        }
                    ],
                    "outline": "obj `setPosASLW` pos",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setPosASLW"
        },
        "configuration": {
            "label": "setPosASLW",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the position of an object relative to the terrain.",
            "examples": [
                {
                    "text": "```sqf\nplayer setPosATL [getPosATL player select 0, (getPosATL player select 1) - 10, getPosATL player select 2];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "pos",
                            "description": "`Array` format [PositionATL](https://community.bistudio.com/wiki/Position%23PositionATL)"
                        }
                    ],
                    "outline": "object `setPosATL` pos",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setPosATL"
        },
        "configuration": {
            "label": "setPosATL",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the position of a location.",
            "examples": [
                {
                    "text": "```sqf\nmyLocation setPosition getPosATL player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "location",
                            "description": "`Location`"
                        },
                        {
                            "name": "pos",
                            "description": "`Array` format `Position`"
                        }
                    ],
                    "outline": "location `setPosition` pos",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setPosition"
        },
        "configuration": {
            "label": "setPosition",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets position of an object based on the model's centre position (see `getPosWorld`).",
            "examples": [
                {
                    "text": "```sqf\n_obj setPosWorld getPosWorld _obj;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "position",
                            "description": "`Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL)"
                        }
                    ],
                    "outline": "object `setPosWorld` position",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setPosWorld"
        },
        "configuration": {
            "label": "setPosWorld",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds/overrides loadout to a vehicle pylon. `**TransportPylonsComponent**` in vehicle config and `**pylonWeapon**` in the magazine config are required to run.\n**NOTE**: This command also adds the corresponding weapon if the vehicle does not have one, but will not remove one that is no longer used.",
            "examples": [
                {
                    "text": "```sqf\nvehicle player setPylonLoadout [\"pylon1\", \"\"];\n```"
                },
                {
                    "text": "Make all of your pylon weapons Twin Cannon 30 mm:\n\n```sqf\n\nprivate _vehicle = vehicle player;\nprivate _pylonsIndices = getAllPylonsInfo _vehicle select { _x select 0 };\n{\n\t_vehicle setPylonLoadout [_x, \"PylonWeapon_300Rnd_20mm_shells\", true];\n} forEach _pylonsIndices;\n\n```"
                },
                {
                    "text": "Showcase all possible magazines:\n\n```sqf\n\n[] spawn {\n\tprivate _allPylonMagazines = \"getText (_x >> 'pylonWeapon') != ''\" configClasses (configFile >> \"CfgMagazines\");\n\tprivate _vehicle = vehicle player;\n\tprivate _pylonsIndices = getAllPylonsInfo _vehicle select { _x select 0 };\n\n\t{\n\t\tprivate _configName = configName _x;\n\t\t{\n\t\t\t_vehicle setPylonLoadout [_x, _configName, true];\n\t\t} forEach _pylonsIndices;\n\n\t\thint _configName;\n\t\tsleep 1.5;\n\t} forEach _allPylonMagazines;\n};\n\n```"
                },
                {
                    "text": "MP compatible usage:\n\n```sqf\n[myPlane, [1, \"PylonWeapon_300Rnd_20mm_shells\", true]] remoteExec [\"setPylonLoadout\", myPlane];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "pylon",
                            "description": "`Number` or `String` - pylon index (index starts from 1) or pylon name (see _Example 1_)"
                        },
                        {
                            "name": "magazine",
                            "description": "`String` - magazine name"
                        },
                        {
                            "name": "forced",
                            "description": "`Boolean` - (Optional, default `false`) `true` to force an incompatible magazine"
                        },
                        {
                            "name": "turret",
                            "description": "`Array` - (Optional, default <sqf inline>[]) turret path"
                        }
                    ],
                    "outline": "vehicle `setPylonLoadout` [pylon, magazine, forced, turret]",
                    "returns": "`Boolean` - `true` on success"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setPylonLoadout"
        },
        "configuration": {
            "label": "setPylonLoadout",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Overrides default pylons priorities.",
            "examples": [
                {
                    "text": "```sqf\n(vehicle player) setPylonsPriority [0,1,2,3,4,5,5,4,3,2,1,0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "priorities",
                            "description": "`Array` of `Number`s"
                        }
                    ],
                    "outline": "vehicle `setPylonsPriority` priorities",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setPylonsPriority"
        },
        "configuration": {
            "label": "setPylonsPriority",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets radio trigger menu title text (0 -> 0 -> map radio). Use \"NULL\" to disable radio slot. Use \"\" to restore default title",
            "examples": [
                {
                    "text": "```sqf\n1 setRadioMsg \"Click meeeeeeeeee\"; //changes title of radio Alpha\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "index",
                            "description": "`Number` - from 1 to 10\n\n* 1 - Alpha (key 1)\n* 2 - Bravo (key 2)\n* 3 - Charlie (key 3)\n* 4 - Delta (key 4)\n* 5 - Echo (key 5)\n* 6 - Foxtrot (key 6)\n* 7 - Golf (key 7)\n* 8 - Hotel (key 8)\n* 9 - India (key 9)\n* 10 - Juliet (key 0)"
                        },
                        {
                            "name": "text",
                            "description": "`String`"
                        }
                    ],
                    "outline": "index `setRadioMsg` text",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setRadioMsg"
        },
        "configuration": {
            "label": "setRadioMsg",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets rain density smoothly over the given transition time. A transition time of zero means an immediate change.\nA rain density of zero is no rain, one is maximum rain. Rain is not possible when `overcast` is less than 0.7.\n\n**Arma 3**: \nSince Arma 3 this command is multiplayer-synchronised:\n* if executed on the server, the changes will propagate globally.\n* if executed on a client, the effect is local, temporary and will soon change to the server setting.\nMinimum `overcast` needed for rain in Arma 3 is **0.5**.\n\n\n**IMPORTANT**: \nAlternative syntaxes ({{Link|#Syntax 2}} and {{Link|#Syntax 3}}):\n* set rain particle params. Rain particles params are client-side params and are ignored on dedicated server. Use helper function `BIS_fnc_setRain` if sync is needed in Multiplayer\n* have a **[local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality)** {{Icon|localeffect|32}} effect",
            "examples": [
                {
                    "text": "```sqf\n60 setRain 1;\n```"
                },
                {
                    "text": "Force no rain:\n\n```sqf\n\n0 setRain 0;\nforceWeatherChange;\n999999 setRain 0;\n\n```"
                },
                {
                    "text": "Snow-like effect (Since Arma 3 v2.08):\n\n```sqf\n\n0 setOvercast 1;\n0 setRain 1;\n0 setFog 0.1;\t\t// snow affects visibility at distance\nsetHumidity 0.9;\t// don't want to see dust clouds\nenableEnvironment [false, true];\t// don't want to see snakes and butterflies either\nforceWeatherChange;\nsetRain [\n\t\"a3\\data_f\\rainnormal_ca.paa\",\t// rainDropTexture\n\t1,\t\t\t\t// texDropCount\n\t0.01,\t\t\t// minRainDensity\n\t15,\t\t\t\t// effectRadius\n\t0.1,\t\t\t// windCoef\n\t2,\t\t\t\t// dropSpeed\n\t0.5,\t\t\t// rndSpeed\n\t0.5,\t\t\t// rndDir\n\t0.02,\t\t\t// dropWidth\n\t0.02,\t\t\t// dropHeight\n\t[0.1, 0.1, 0.1, 1],\t// dropColor\n\t0.1,\t\t\t// lumSunFront\n\t0.1,\t\t\t// lumSunBack\n\t5.5,\t\t\t// refractCoef\n\t0.3,\t\t\t// refractSaturation\n\ttrue,\t\t\t// snow\n\tfalse\t\t\t// dropColorStrong\n];\n\n```\n\n\nSee also `BIS_fnc_setRain` since Arma 3 v2.10:\n\n```sqf\n\n0 setOvercast 1;\n0 setRain 1;\n0 setFog 0.1;\t\t// snow affects visibility at distance\nsetHumidity 0.9;\t// don't want to see dust clouds\nenableEnvironment [false, true];\t// don't want to see snakes and butterflies either\nforceWeatherChange;\n[\n\t\"a3\\data_f\\snowflake4_ca.paa\",\t// rainDropTexture\n\t4,\t\t\t\t// texDropCount\n\t0.01,\t\t\t// minRainDensity\n\t25,\t\t\t\t// effectRadius\n\t0.05,\t\t\t// windCoef\n\t2.5,\t\t\t// dropSpeed\n\t0.5,\t\t\t// rndSpeed\n\t0.5,\t\t\t// rndDir\n\t0.07,\t\t\t// dropWidth\n\t0.07,\t\t\t// dropHeight\n\t[1, 1, 1, 0.5],\t// dropColor\n\t0.0,\t\t\t// lumSunFront\n\t0.2,\t\t\t// lumSunBack\n\t0.5,\t\t\t// refractCoef\n\t0.5,\t\t\t// refractSaturation\n\ttrue,\t\t\t// snow\n\tfalse\t\t\t// dropColorStrong\n]\ncall BIS_fnc_setRain;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "time",
                            "description": "`Number` - transition time in seconds to the new value"
                        },
                        {
                            "name": "rain",
                            "description": "`Number` - new rain value in range 0..1."
                        }
                    ],
                    "outline": "time `setRain` rain",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "rainParams",
                            "description": "`Array` - array of custom [[Arma 3: CfgWorlds Config Reference#class RainParticles | `**RainParticles**`]] params - see `rainParams`. Use empty array [] to reset to default config values"
                        }
                    ],
                    "outline": "`setRain` rainParams",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "config",
                            "description": "`Config` - config path to a custom class, which contains [[Arma 3: CfgWorlds Config Reference#class RainParticles | `**RainParticles**`]] class. Use `configNull` to reset to default config values"
                        }
                    ],
                    "outline": "`setRain` config",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Global Effect",
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/setRain"
        },
        "configuration": {
            "label": "setRain",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Changes the rainbow value smoothly during the given time (in seconds). A time of zero means there will be an immediate change.",
            "examples": [
                {
                    "text": "```sqf\n360 setRainbow 1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "time",
                            "description": "`Number`"
                        },
                        {
                            "name": "value",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "time `setRainbow` value",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setRainbow"
        },
        "configuration": {
            "label": "setRainbow",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enables/Disables random lip. When enabled, the unit continuously moves its lips as if it is talking.",
            "examples": [
                {
                    "text": "```sqf\nplayer setRandomLip true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "bool",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "unit `setRandomLip` bool",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setRandomLip"
        },
        "configuration": {
            "label": "setRandomLip",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets rank of given unit.\n\n**Arma 3**: Before Arma 3 v1.68 and in previous titles, this command was {{Icon|globalArgument|32 {{Icon|localEffect|32}}.}}",
            "examples": [
                {
                    "text": "```sqf\nplayer setRank \"COLONEL\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        },
                        {
                            "name": "rank",
                            "description": "`String` - one of:\n{{Columns|4|\n* `**\"PRIVATE\"**`\n* `**\"CORPORAL\"**`\n* `**\"SERGEANT\"**`\n* `**\"LIEUTENANT\"**`\n* `**\"CAPTAIN\"**`\n* `**\"MAJOR\"**`\n* `**\"COLONEL\"**`\n}}"
                        }
                    ],
                    "outline": "unitName `setRank` rank",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setRank"
        },
        "configuration": {
            "label": "setRank",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set the shape of a location to be either rectangular or elliptical. Locations default shape is elliptical.",
            "examples": [
                {
                    "text": "```sqf\nmyLocation setRectangular true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "location",
                            "description": "`Location`"
                        },
                        {
                            "name": "set",
                            "description": "`Boolean` - `true` set rectangular, `false` set elliptical"
                        }
                    ],
                    "outline": "location `setRectangular` set",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setRectangular"
        },
        "configuration": {
            "label": "setRectangular",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set amount of repair resources in cargo space of repair vehicle.\nAmount 1 is full cargo.",
            "examples": [
                {
                    "text": "```sqf\n_repairTruck1 setRepairCargo 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicleName",
                            "description": "`Object`"
                        },
                        {
                            "name": "amount",
                            "description": "`Number` - in range 0 to 1"
                        }
                    ],
                    "outline": "vehicleName `setRepairCargo` amount",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setRepairCargo"
        },
        "configuration": {
            "label": "setRepairCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Toggles a helicopter's rotor brake. {{Feature|afm}}",
            "examples": [
                {
                    "text": "```sqf\nmyHelicopterRTD setRotorBrakeRTD 1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "helicopterRTD ",
                            "description": "`Object` - helicopter"
                        },
                        {
                            "name": "enable",
                            "description": "`Number` - can be:\n* 0: off\n* 1: on"
                        }
                    ],
                    "outline": "helicopterRTD `setRotorBrakeRTD` enable",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setRotorBrakeRTD"
        },
        "configuration": {
            "label": "setRotorBrakeRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the shadows rendering distance.",
            "examples": [
                {
                    "text": "```sqf\nsetShadowDistance 200;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "value",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`setShadowDistance` value",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setShadowDistance"
        },
        "configuration": {
            "label": "setShadowDistance",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets vehicle and instigator pair for the given projectile.",
            "examples": [
                {
                    "text": "```sqf\nmyProjectile setShotParents [vehicle bob, bob];\n```"
                },
                {
                    "text": "```sqf\ntank addEventHandler [\"Fired\", {_this select 6 setShotParents [tank, commander tank]}];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "projectile",
                            "description": "`Object` - the actual projectile shot"
                        },
                        {
                            "name": "vehicle",
                            "description": "`Object` - vehicle shooting projectile (appears as the 'killer' in \"Killed\" EH)"
                        },
                        {
                            "name": "instigator",
                            "description": "`Object` - person pulling the trigger (appears as the 'instigator' in \"Killed\" EH)"
                        }
                    ],
                    "outline": "projectile `setShotParents` [vehicle, instigator]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/setShotParents"
        },
        "configuration": {
            "label": "setShotParents",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets a location's [side](https://community.bistudio.com/wiki/Side). The default side is Unknown.\n**IMPORTANT**: To change a _unit_<nowiki/>'s side, see {{Link|#Notes}}.",
            "examples": [
                {
                    "text": "```sqf\n_myLocation setSide resistance;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "location",
                            "description": "`Location`"
                        },
                        {
                            "name": "side",
                            "description": "`Side`"
                        }
                    ],
                    "outline": "location `setSide` side",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setSide"
        },
        "configuration": {
            "label": "setSide",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets task's visibility.",
            "examples": [
                {
                    "text": "`currentTask` `player` `setSimpleTaskAlwaysVisible` `true`;"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "taskID",
                            "description": "`Task`"
                        },
                        {
                            "name": "state",
                            "description": "`Boolean` - `true` for always visible, `false` for fade out"
                        }
                    ],
                    "outline": "taskID `setSimpleTaskAlwaysVisible` state",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setSimpleTaskAlwaysVisible"
        },
        "configuration": {
            "label": "setSimpleTaskAlwaysVisible",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set custom data for the task. Tooltip will be drawn in task list on the right side. Description will be drawn in task description panel on the bottom.",
            "examples": [
                {
                    "text": "```sqf\n_task setSimpleTaskCustomData [\"\\A3\\Ui_f\\data\\IGUI\\Cfg\\simpleTasks\\letters\\h_ca.paa\", \"This is the tooltip\", \"This is the description\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "task",
                            "description": "`Task` - task the custom data are being added to"
                        },
                        {
                            "name": "iconPath",
                            "description": "`String` - icon path"
                        },
                        {
                            "name": "tooltip",
                            "description": "`String` - text displayed next to the icon; max. 3 charactersc"
                        },
                        {
                            "name": "description",
                            "description": "`String` - text displayed on the task description panel; html format"
                        }
                    ],
                    "outline": "task `setSimpleTaskCustomData` [iconPath, tooltip, description]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setSimpleTaskCustomData"
        },
        "configuration": {
            "label": "setSimpleTaskCustomData",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Attach descriptions to the simple task.",
            "examples": [
                {
                    "text": "```sqf\nmyTask setSimpleTaskDescription [\"Today you have to kill Spongebob\", \"Kill Spongebob\", \"There he is!\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "task",
                            "description": "`Task`"
                        },
                        {
                            "name": "description",
                            "description": "`String` - task description"
                        },
                        {
                            "name": "descriptionShort",
                            "description": "`String` - task title"
                        },
                        {
                            "name": "descriptionHUD",
                            "description": "`String` - task waypoint description"
                        }
                    ],
                    "outline": "task `setSimpleTaskDescription` [description, descriptionShort, descriptionHUD]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setSimpleTaskDescription"
        },
        "configuration": {
            "label": "setSimpleTaskDescription",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Attach a destination to the simple task.\nOverrides `setSimpleTaskTarget`",
            "examples": [
                {
                    "text": "```sqf\n_tskGoHere setSimpleTaskDestination (getMarkerPos \"obj1\");\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "task",
                            "description": "`Task`"
                        },
                        {
                            "name": "pos",
                            "description": "`Array` format `Position`"
                        }
                    ],
                    "outline": "task `setSimpleTaskDestination` pos",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setSimpleTaskDestination"
        },
        "configuration": {
            "label": "setSimpleTaskDestination",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Attach a target to the simple task.\nOverrides `setSimpleTaskDestination`.",
            "examples": [
                {
                    "text": "```sqf\ntask setSimpleTaskTarget [targetVehicle, true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "task",
                            "description": "`Task`"
                        },
                        {
                            "name": "target",
                            "description": "`Object`"
                        },
                        {
                            "name": "precisePosition",
                            "description": "`Boolean` - use exact position of the target for map marker / HUD indicator instead of the position known to the owner of the task (depending on the knowledge about the target)"
                        }
                    ],
                    "outline": "task `setSimpleTaskTarget` [target, precisePosition]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setSimpleTaskTarget"
        },
        "configuration": {
            "label": "setSimpleTaskTarget",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Attach type to the simple task. See [Default Task Types](https://community.bistudio.com/wiki/Arma_3_Tasks_Overhaul%23Default_Task_Types%3A_Actions).",
            "examples": [
                {
                    "text": "```sqf\n(currentTask player) setSimpleTaskType \"attack\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "task",
                            "description": "`Task`"
                        },
                        {
                            "name": "taskType",
                            "description": "`String` - type of task"
                        }
                    ],
                    "outline": "task `setSimpleTaskType` taskType",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setSimpleTaskType"
        },
        "configuration": {
            "label": "setSimpleTaskType",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets number of simul weather layers, affects quality of simul weather clouds.",
            "examples": [
                {
                    "text": "```sqf\nsetSimulWeatherLayers 0; // Very flat clouds\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "layers",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`setSimulWeatherLayers` layers",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setSimulWeatherLayers"
        },
        "configuration": {
            "label": "setSimulWeatherLayers",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the size (radius)  of a location.\n\nThe width  is 2 * x, the height is 2 * y.",
            "examples": [
                {
                    "text": "```sqf\nmyLocation setSize [10,30];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "location",
                            "description": "`Location`"
                        },
                        {
                            "name": "size",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "location `setSize` size",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setSize"
        },
        "configuration": {
            "label": "setSize",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the skill level of given unit. The value of a [[AI Sub-skills|sub-skill]] is interpolated into a range defined in `CfgAISkill`.",
            "examples": [
                {
                    "text": "```sqf\n_hero setSkill 1;\n```"
                },
                {
                    "text": "```sqf\n\n_finalBoss setSkill [\"reloadSpeed\", 0.8];\n_finalBoss setSkill [\"aimingSpeed\", 0.33];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "skill",
                            "description": "`Number` - general skill in range 0..1"
                        }
                    ],
                    "outline": "unit `setSkill` skill",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "skillName",
                            "description": "`String` - available sub-skills are:\n{{Columns|6|\n* `**\"general\"**`\n* `**\"courage\"**`\n* `**\"aimingAccuracy\"**`\n* `**\"aimingShake\"**`\n* `**\"aimingSpeed\"**`\n* `**\"commanding\"**`\n* `**\"endurance\"**`\n* `**\"spotDistance\"**`\n* `**\"spotTime\"**`\n* `**\"reloadSpeed\"**`\n}}"
                        },
                        {
                            "name": "value",
                            "description": "`Number` - value in range 0..1"
                        }
                    ],
                    "outline": "unit `setSkill` [skillName, value]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setSkill"
        },
        "configuration": {
            "label": "setSkill",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates a sling loading from a helicopter to an entity if possible. To unload cargo, pass `objNull` as second param. **NOTE**: FROM object has to be a helicoper, alive with [ rope attachment](https://community.bistudio.com/wiki/enableRopeAttach%20) enabled, TO object has to be an entity, alive with [ rope attachment](https://community.bistudio.com/wiki/enableRopeAttach%20) enabled.",
            "examples": [
                {
                    "text": "```sqf\n_success = heli1 setSlingLoad veh1;\n```"
                },
                {
                    "text": "To unload cargo:\n\n```sqf\n_success = heli setSlingLoad objNull;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "heli",
                            "description": "`Object` - the helicopter slinging the load"
                        },
                        {
                            "name": "cargo",
                            "description": "`Object` - the cargo load entity"
                        }
                    ],
                    "outline": "heli `setSlingLoad` cargo",
                    "returns": "`Boolean` - `true` on success"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setSlingLoad"
        },
        "configuration": {
            "label": "setSlingLoad",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Defines the different sound effects for a trigger or a waypoint. To stop any sound, deactivate the trigger (might take up to 0.5 seconds to stop) or delete the trigger/waypoint (immediate).",
            "examples": [
                {
                    "text": "```sqf\n_trigger setSoundEffect [\"Alarm\", \"\", \"\", \"\"];\n```"
                },
                {
                    "text": "```sqf\n[_group1, 2] setSoundEffect [\"Alarm\", \"\"];\n```"
                },
                {
                    "text": "```sqf\n_trigger setSoundEffect [\"$NONE$\", \"Alarm\", \"\", \"\"];\n```"
                },
                {
                    "text": "```sqf\n_trigger setSoundEffect [\"$NONE$\", \"\", \"BattlefieldExplosions3\", \"\"];\n```"
                },
                {
                    "text": "```sqf\n_trigger setSoundEffect [\"$NONE$\", \"\", \"\", \"Owl\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "trigger",
                            "description": "`Object`"
                        },
                        {
                            "name": "sound",
                            "description": "`String` - plays a 2D sound as if `playSound` was used from CfgSounds (mission or main config). Use `**\"$NONE$\"**` for an empty sound"
                        },
                        {
                            "name": "voice",
                            "description": "`String` - attaches a 3D sound from CfgSounds (mission or main config) to the object that activated the trigger and plays it as if `say3D` was used"
                        },
                        {
                            "name": "soundEnv",
                            "description": "`String` - plays an environmental sound from CfgEnvSounds (mission or main config)"
                        },
                        {
                            "name": "soundDet",
                            "description": "`String` - creates a dynamic sound object attached to a trigger defined in `CfgSFX` (mission or main config)"
                        }
                    ],
                    "outline": "trigger `setSoundEffect` [sound, voice, soundEnv, soundDet]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Array` - format `Waypoint`"
                        },
                        {
                            "name": "sound",
                            "description": "`String` - plays a 2D sound as if `playSound` was used from CfgSounds (mission or main config)"
                        },
                        {
                            "name": "voice",
                            "description": "`String` - attaches a 3D sound from CfgSounds (mission or main config) to the object that activated the trigger and plays it as if `say3D` was used"
                        }
                    ],
                    "outline": "waypoint `setSoundEffect` [sound, voice]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setSoundEffect"
        },
        "configuration": {
            "label": "setSoundEffect",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the speaker of a person.",
            "examples": [
                {
                    "text": "```sqf\nunit1 setSpeaker \"Male02GRE\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "person",
                            "description": "`Object`"
                        },
                        {
                            "name": "speaker",
                            "description": "`String` - the used voice type, see [[Arma 3: CfgIdentities#Speakers|Arma 3 Speakers]]"
                        }
                    ],
                    "outline": "person `setSpeaker` speaker",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setSpeaker"
        },
        "configuration": {
            "label": "setSpeaker",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Add speech to location.",
            "examples": [
                {
                    "text": "```sqf\n_location setSpeech \"SomeSpeech\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "location",
                            "description": "`Location`"
                        },
                        {
                            "name": "speech",
                            "description": "`String`"
                        }
                    ],
                    "outline": "location `setSpeech` speech",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setSpeech"
        },
        "configuration": {
            "label": "setSpeech",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets group speed mode. If unit is passed as param, unit's group is used. Mode may be one of: \n* **\"UNCHANGED\"** (unchanged)\n* **\"LIMITED\"** (half speed)\n* **\"NORMAL\"** (full speed, maintain formation)\n* **\"FULL\"** (do not wait for any other units in formation)",
            "examples": [
                {
                    "text": "```sqf\n_groupOne setSpeedMode \"LIMITED\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "groupName",
                            "description": "`Object` or `Group`"
                        },
                        {
                            "name": "mode",
                            "description": "`String`"
                        }
                    ],
                    "outline": "groupName `setSpeedMode` mode",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setSpeedMode"
        },
        "configuration": {
            "label": "setSpeedMode",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set units' stamina (seconds until depletion)",
            "examples": [
                {
                    "text": "```sqf\nplayer setStamina 42;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "stamina",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "unit `setStamina` stamina",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setStamina"
        },
        "configuration": {
            "label": "setStamina",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the scheme used for the Stamina system.",
            "examples": [
                {
                    "text": "```sqf\nsetStaminaScheme \"Default\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "scheme",
                            "description": "`String` - can be one of:\n* \"Normal\"\n* \"FastDrain\"\n* \"Exhausted\"\n* \"Default\""
                        }
                    ],
                    "outline": "`setStaminaScheme` scheme",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setStaminaScheme"
        },
        "configuration": {
            "label": "setStaminaScheme",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets a value to a given stat. \n\nA list of possible StatNames can be found here: [Arma 3: Stat Names](https://community.bistudio.com/wiki/Arma%203%3A%20Stat%20Names)\n\nIts important to note that most Stats are restricted to scripts and missions in certain paths.\n\nFor example \"ExpWarlockDown\" is restricted to scripts in any subdirectory of `**\"a3\\Missions_F_Exp\\Campaign\\Missions\\\"**`",
            "examples": [
                {
                    "text": "```sqf\nsetStatValue [\"ExpWarlockDown\", 1]; // Unlocks the \"Warlock Down\" Steam achivement\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "name",
                            "description": "`String`"
                        },
                        {
                            "name": "value",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`setStatValue` [name, value]",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setStatValue"
        },
        "configuration": {
            "label": "setStatValue",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the given suppression value for the given unit.",
            "examples": [
                {
                    "text": "```sqf\nunit_1 setSuppression 1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "value",
                            "description": "`Number` - suppression value from 0 to 1"
                        }
                    ],
                    "outline": "unit `setSuppression` value",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/setSuppression"
        },
        "configuration": {
            "label": "setSuppression",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set system of units. This will only impact gauges from advanced flight model.\n**IMPORTANT**: This command is buggy: any value other than 0 (metric) will display both units at the same time.",
            "examples": [
                {
                    "text": "```sqf\nif (player in _myHelicopter) then { setSystemOfUnits 2; };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "value",
                            "description": "`Number` - possible values are:\n* 0 - metric\n* 1 - mixed\n* 2 - imperial"
                        }
                    ],
                    "outline": "`setSystemOfUnits` value",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setSystemOfUnits"
        },
        "configuration": {
            "label": "setSystemOfUnits",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets how the target is known to the other centers. They behave like the target was seen age seconds ago.",
            "examples": [
                {
                    "text": "```sqf\nplayer setTargetAge \"10 MIN\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "age",
                            "description": "`String` - can be:\n* \"ACTUAL\"\n* \"5 MIN\"\n* \"10 MIN\"\n* \"15 MIN\"\n* \"30 MIN\"\n* \"60 MIN\"\n* \"120 MIN\"\n* \"UNKNOWN\""
                        }
                    ],
                    "outline": "object `setTargetAge` age",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setTargetAge"
        },
        "configuration": {
            "label": "setTargetAge",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the task marker position in model space.",
            "examples": [
                {
                    "text": "```sqf\nplayer setTaskMarkerOffset [0,0.5,1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "obj",
                            "description": "`Object`"
                        },
                        {
                            "name": "position",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "obj `setTaskState` position",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setTaskMarkerOffset"
        },
        "configuration": {
            "label": "setTaskMarkerOffset",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set a result of the task.",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "task",
                            "description": "`Task`"
                        },
                        {
                            "name": "state",
                            "description": "`String`"
                        },
                        {
                            "name": "result",
                            "description": "`Unknown`"
                        }
                    ],
                    "outline": "task `setTaskResult` [state,result]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setTaskResult"
        },
        "configuration": {
            "label": "setTaskResult",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set the state of a given task.",
            "examples": [
                {
                    "text": "```sqf\n_tskKillSpongebob setTaskState \"Succeeded\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "task",
                            "description": "`Task`"
                        },
                        {
                            "name": "state",
                            "description": "`String` - state value may be one of:\n*\"None\"\n*\"Created\"\n*\"Assigned\"\n*\"Succeeded\"\n*\"Failed\"\n*\"Canceled\""
                        }
                    ],
                    "outline": "task `setTaskState` state",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setTaskState"
        },
        "configuration": {
            "label": "setTaskState",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the desired [ terrain resolution](https://community.bistudio.com/wiki/getTerrainGrid%20) in meters.",
            "examples": [
                {
                    "text": "```sqf\nsetTerrainGrid 12.5;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "grid",
                            "description": "`Number` - for default landscapes the supported resolutions are: \n\n* **50** - smoothest, less lag\n* **25** - default in multiplayer\n* **12.5** - default in single player\n* **6.25**\n* **3.125** - bumpiest, higher lag\n**NOTE**: If unsupported resolution is selected, the nearest supported resolution is used instead. Higher number means less vertices are used for terrain rendering, making distant hills less smooth. Value 12.5 corresponds to selecting Terrain Detail Normal in Video options, 50 to Very Low, 3.125 to Very High. In older games like [[:Category:ArmA: Armed Assault|Armed Assault]] terrain resolution is fixed, determined by the world created."
                        }
                    ],
                    "outline": "`setTerrainGrid` grid",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setTerrainGrid"
        },
        "configuration": {
            "label": "setTerrainGrid",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set the current terrain's altitude on provided location(s).\n**IMPORTANT**: \n* Heightmap changes:\n** are internally converted (rounded) to heightmap coordinates\n** are stored in the JIP queue\n** are **not** removed from the JIP queue if the values are set back to terrain's default value\n** are updated in the JIP queue for updated positions **if** the same group of positions are edited (order does not matter, but amount does);\nediting positions by terrain _sections_ is good for multiplayer optimisation (see _Example 2_)\n** are **not** updated and sent twice (old one then new one) if position edits are not exactly the same (see point above and _Example 2_).\n* Edited terrain heights are **not** saved inside savegames, they need to be restored manually on savegame load.\n* Known issues:\n** Terrain sections can become invisible if the change is too extreme\n** Walking on the edge of extreme height changes can catapult the player away",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _fnc_flattenTerrain =\n{\n\tparams [\"_start\", \"_a\", \"_b\", \"_h\"];\n\tprivate _newPositions = [];\n\n\tfor \"_xStep\" from 0 to _a do\n\t{\n\t\tfor \"_yStep\" from 0 to _b do\n\t\t{\n\t\t\tprivate _newHeight = _start vectorAdd [_xStep, _yStep, 0];\n\t\t\t_newHeight set [2, _h];\n\t\t\t_newPositions pushBack _newHeight;\n\t\t};\n\t};\n\n\t_newPositions;\n};\n\nprivate _desiredTerrainHeight = 150;\nprivate _positionsAndHeights = [getPosWorld player, 50, 50, _desiredTerrainHeight] call _fnc_flattenTerrain;\nsetTerrainHeight [_positionsAndHeights, true];\n\n```"
                },
                {
                    "text": "Bad example:\n\n```sqf\n\n// first update\nsetTerrainHeight [[[1000, 1000, 25], [1005, 1000, 25], [1000, 1005, 25], [1005, 1005, 25]]];\n\n// second update - this will make the JIP queue keep both messages\nsetTerrainHeight [[[1005, 1000, 50]]];\n\n```\n\n\nGood example:\n\n```sqf\n\n// first update\nsetTerrainHeight [[[1000, 1000, 25], [1005, 1000, 25], [1000, 1005, 25], [1005, 1005, 25]]];\n\n// second update - this will update the JIP queue properly\nsetTerrainHeight [[[1000, 1000, 25], [1005, 1000, 50], [1000, 1005, 25], [1005, 1005, 25]]];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "positionAndAltitudeArray",
                            "description": "`Array` of `Array` in format `PositionASL` - [<nowiki/>[x1, y1, newASLHeight1], [x2, y2, newASLHeight2], ...]"
                        },
                        {
                            "name": "adjustObjects",
                            "description": "`Boolean` - (Optional, default `true`) if true then objects on modified points are moved up/down to keep the same ATL height\n**IMPORTANT**: **All** objects above modified terrain will be adjusted, even flying ones."
                        }
                    ],
                    "outline": "`setTerrainHeight` [positionAndAltitudeArray, adjustObjects]",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Global Effect",
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/setTerrainHeight"
        },
        "configuration": {
            "label": "setTerrainHeight",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the text associated with a location. This text will be displayed on the game map at the location's position.",
            "examples": [
                {
                    "text": "```sqf\nmyLocation setText \"Rahmadi Village\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "location",
                            "description": "`Location`"
                        },
                        {
                            "name": "text",
                            "description": "`String`"
                        }
                    ],
                    "outline": "location `setText` text",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setText"
        },
        "configuration": {
            "label": "setText",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets a time multiplier for in-game time. The command range is capped at 0.1 - 120 to avoid performance problems.",
            "examples": [
                {
                    "text": "```sqf\nsetTimeMultiplier 60;\n```"
                },
                {
                    "text": "```sqf\nsetTimeMultiplier 0.5;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "value",
                            "description": "`Number` - has to be in range from 0.1 to 120"
                        }
                    ],
                    "outline": "`setTimeMultiplier` value",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Global Effect",
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/setTimeMultiplier"
        },
        "configuration": {
            "label": "setTimeMultiplier",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the provided Thermal Imaging parameter's value.\n**IMPORTANT**: The settings are **not** saved in savegame and must be reapplied after loading.",
            "examples": [
                {
                    "text": "```sqf\n\nsetTIParameter [\"OutputRangeStart\", 0];\nsetTIParameter [\"OutputRangeWidth\", 1];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "paramName",
                            "description": "`String` - the parameter name. See `getTIParameters` for a list of possible values"
                        },
                        {
                            "name": "newValue",
                            "description": "`Number`<!-- technically anything --> - the set number"
                        }
                    ],
                    "outline": "`setTIParameter` [paramName, newValue]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setTIParameter"
        },
        "configuration": {
            "label": "setTIParameter",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Defines the title effect to show on activation via [Type, Effect, Text] where\n\n'Type' \n\nThe title effect does not disappear on deactivation, this should be done manually if required.",
            "examples": [
                {
                    "text": "```sqf\n_trigger setTitleEffect [\"TEXT\", \"PLAIN DOWN\", \"Hello world.\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "triggerOrWaypoint",
                            "description": "`Object` or `Array` format `Waypoint`"
                        },
                        {
                            "name": "type",
                            "description": "`String` - can be one of:\n* \"NONE\"\n* \"OBJECT\"\n** _text_ defines the shown object , a subclass of `**CfgTitles**` (see `cutObj`)\n** _effect_ defines [Title Effect Type](https://community.bistudio.com/wiki/Title%20Effect%20Type)\n* \"RES\"\n** _text_ defines a resource class, a subclass of RscTitles (see `cutRsc`)\n** _effect_ defines [Title Effect Type](https://community.bistudio.com/wiki/Title%20Effect%20Type)\n* \"TEXT\"\n** _text_ defines text string to show (see `cutText`)\n** _effect_ defines [Title Effect Type](https://community.bistudio.com/wiki/Title%20Effect%20Type)"
                        },
                        {
                            "name": "effect",
                            "description": "`String`"
                        },
                        {
                            "name": "text",
                            "description": "`String`"
                        }
                    ],
                    "outline": "triggerOrWaypoint `setTitleEffect` [type, effect, text]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setTitleEffect"
        },
        "configuration": {
            "label": "setTitleEffect",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "{{{!}} class=\"wikitable float-right align-center-col-2 align-center-col-3\"\n! Simulation\n! Towable\n! Can Tow\n{{!}}-\n{{!}} CarX\n{{!}} {{Icon|checked}}\n{{!}} {{Icon|checked}}\n{{!}}-\n{{!}} TankX\n{{!}} {{Icon|unchecked}}\n{{!}} {{Icon|checked}}\n{{!}}-\n{{!}} AirplaneX\n{{!}} {{Icon|unchecked}}\n{{!}} {{Icon|unchecked}}\n{{!}}-\n{{!}} BoatX\n{{!}} {{Icon|unchecked}}\n{{!}} {{Icon|unchecked}}\n{{!}}}\n\nAllows a vehicle to be towed by another. This loosens the towed vehicle's brakes and turns its steering wheels toward the towing vehicle.\nSupposed to be used together with a rope connecting both vehicles.",
            "examples": [
                {
                    "text": "```sqf\n\n{ moveOut _x } forEach crew _towedVehicle;\t// make sure nobody is in the towed vehicle\n_towedVehicle lock true;\t\t\t\t\t// make sure everybody stays out of it\nropeCreate [_bobcat, [0,-5,0], _towedVehicle, [0,2,0]];\n_towedVehicle setTowParent _bobcat;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "towedVehicle",
                            "description": "`Object` - vehicle of type CarX (no tanks, no aircrafts, no boats)"
                        },
                        {
                            "name": "towingVehicle",
                            "description": "`Object` - vehicle of type CarX or TankX (no aircrafts, no boats)"
                        }
                    ],
                    "outline": "towedVehicle `setTowParent` towingVehicle",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setTowParent"
        },
        "configuration": {
            "label": "setTowParent",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set the density of ambient cars in a rectangle (in cars per kilometer). **Arma 3**: This command does nothing in Arma 3.",
            "examples": [
                {
                    "text": "```sqf\nsetTrafficDensity [40, 31000, 32000, 30000, 32000];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "density",
                            "description": "`Number` - density (in cars per kilometer)"
                        },
                        {
                            "name": "xMin",
                            "description": "`Number` - western border of the affected rectangle"
                        },
                        {
                            "name": "xMax",
                            "description": "`Number` - eastern border of the affected rectangle"
                        },
                        {
                            "name": "zMin",
                            "description": "`Number` - southern border of the affected rectangle"
                        },
                        {
                            "name": "zMax",
                            "description": "`Number` - northern border of the affected rectangle"
                        }
                    ],
                    "outline": "`setTrafficDensity` [density, xMin, xMax, zMin, zMax]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setTrafficDensity"
        },
        "configuration": {
            "label": "setTrafficDensity",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set maximum ambient traffic draw distance (in 2D). **Arma 3**: This command does nothing in Arma 3.",
            "examples": [
                {
                    "text": "```sqf\nsetTrafficDistance 1000;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "distance",
                            "description": "`Number` - draw distance (in meter)"
                        }
                    ],
                    "outline": "`setTrafficDistance` distance",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setTrafficDistance"
        },
        "configuration": {
            "label": "setTrafficDistance",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set the average gap between ambient cars in a rectangle (in meters). **Arma 3**: This command does nothing in Arma 3.",
            "examples": [
                {
                    "text": "```sqf\nsetTrafficGap [50, 31000, 32500, 28000, 32000];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "gap",
                            "description": "`Number` - average gap between ambient cars (in meters)"
                        },
                        {
                            "name": "xMin",
                            "description": "`Number` - western border of the affected rectangle"
                        },
                        {
                            "name": "xMax",
                            "description": "`Number` - eastern border of the affected rectangle"
                        },
                        {
                            "name": "zMin",
                            "description": "`Number` - southern border of the affected rectangle"
                        },
                        {
                            "name": "zMax",
                            "description": "`Number` - northern border of the affected rectangle"
                        }
                    ],
                    "outline": "`setTrafficGap` [gap, xMin, xMax, zMin, zMax]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setTrafficGap"
        },
        "configuration": {
            "label": "setTrafficGap",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set ambient traffic speed in a rectangle (in kilometers per hour). **Arma 3**: This command does nothing in Arma 3.",
            "examples": [
                {
                    "text": "```sqf\nsetTrafficSpeed [50, _xMin, _xMax, _zMin, _zMax];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "speed",
                            "description": "`Number` - traffic speed (in kilometers per hour)"
                        },
                        {
                            "name": "xMin",
                            "description": "`Number` - western border of the affected rectangle"
                        },
                        {
                            "name": "xMax",
                            "description": "`Number` - eastern border of the affected rectangle"
                        },
                        {
                            "name": "zMin",
                            "description": "`Number` - southern border of the affected rectangle"
                        },
                        {
                            "name": "zMax",
                            "description": "`Number` - northern border of the affected rectangle"
                        }
                    ],
                    "outline": "`setTrafficSpeed` [speed, xMin, xMax, zMin, zMax]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setTrafficSpeed"
        },
        "configuration": {
            "label": "setTrafficSpeed",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Defines the trigger activation type.\n\nSee [[ArmA:_Mission_Editor#Triggers_Mode_.28F3.29|ArmA:Mission Editor - Triggers]] for a thorough overview of triggers and its fields for activation, effects, etc.",
            "examples": [
                {
                    "text": "```sqf\n_trigger setTriggerActivation [\"WEST\", \"EAST D\", true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "trigger",
                            "description": "`Object` - trigger object"
                        },
                        {
                            "name": "by",
                            "description": "`String` - who activates trigger. Can be `**\"NONE\"**`, or:\n{{{!}} class=\"wikitable valign-top\"\n! Side\n! Radio\n! Object\n! Status\n{{!}}-\n{{!}}\n{{Columns|2|\n* `**\"EAST\"**`\n* `**\"WEST\"**`\n* `**\"GUER\"**`\n* `**\"CIV\"**`\n* `**\"LOGIC\"**`\n* `**\"ANY\"**`\n* {{GVI|arma3|1.68"
                        },
                        {
                            "name": "type",
                            "description": "`String` - how trigger is it activated. Can be:\n{{{!}} class=\"wikitable valign-top\"\n! Presence\n! Detection\n{{!}}-\n{{!}}\n* `**\"PRESENT\"**`\n* `**\"NOT PRESENT\"**`\n{{!}}\n* `**\"WEST D\"**`\n* `**\"EAST D\"**`\n* `**\"GUER D\"**`\n* `**\"CIV D\"**`\n{{!}}}"
                        },
                        {
                            "name": "repeating",
                            "description": "`Boolean` - activation can happen repeatedly"
                        }
                    ],
                    "outline": "trigger `setTriggerActivation` [by, type, repeating]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setTriggerActivation"
        },
        "configuration": {
            "label": "setTriggerActivation",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "[[File:setTriggerArea.jpg|thumb|300px|Trigger axis a, b and c (_half_ of their x, y and z dimensions)]] Defines the area monitored by the given trigger. The area could be either rectangular or elliptical.\n**NOTE**: \nJust like with a and b dimensions, c dimension will alter area in opposite directions from the trigger position along z axis. Therefore if the trigger position is on the surface, half of the trigger area will be above the surface and half below. To place the whole area above the surface, adjust trigger position (move it up c meters). If c is not specified or &lt;{{=}} 0, the trigger's height is considered infinite like 2D triggers.",
            "examples": [
                {
                    "text": "```sqf\n_trigger setTriggerArea [100, 50, 45, false];\n```"
                },
                {
                    "text": "```sqf\n_trigger setTriggerArea [100, 50, 45, false, 100];\n```"
                },
                {
                    "text": "```sqf\n\n_trg = createTrigger [\"EmptyDetector\", getPos player, false];\n_trg setTriggerArea [5, 5, 0, false];\n_trg setTriggerActivation [\"CIV\", \"PRESENT\", true];\n_trg setTriggerStatements [\"this\", \"hint 'Civilian near player'\", \"hint 'no civilian near'\"];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "trigger",
                            "description": "`Object` - object of the type \"EmptyDetector\""
                        },
                        {
                            "name": "a",
                            "description": "`Number` - trigger area X size / 2, in meters"
                        },
                        {
                            "name": "b",
                            "description": "`Number` - trigger area Y size / 2, in meters"
                        },
                        {
                            "name": "angle",
                            "description": "`Number` - trigger area rotation in degrees"
                        },
                        {
                            "name": "isRectangle",
                            "description": "`Boolean` - `true` if rectangle"
                        },
                        {
                            "name": "c",
                            "description": "`Number` - (Optional, default -1) trigger area Z size / 2, in meters. -1 for infinite height"
                        }
                    ],
                    "outline": "trigger `setTriggerArea` [a, b, angle, isRectangle, c]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setTriggerArea"
        },
        "configuration": {
            "label": "setTriggerArea",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the interval in seconds for trigger condition check.\n\n\n\n**NOTE**: Triggers are configured to check condition approx. every 0.5 second by default. This command allows either to slow down or to speed up default check interval per trigger. Setting interval to 0 will make the trigger check its condition every frame. However, when trigger is attached to some object, the trigger will inherit the simulation frequency of the object it is [ attached to](https://community.bistudio.com/wiki/attachedTo%20). This command cannot change the interval of the attached trigger. The trigger can also be \"frozen\" with `enableSimulation` command.",
            "examples": [
                {
                    "text": "```sqf\n_trigger setTriggerInterval 5;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "trigger",
                            "description": "`Object` - trigger object"
                        },
                        {
                            "name": "interval",
                            "description": "`Number` - interval in seconds with which trigger condition is checked"
                        }
                    ],
                    "outline": "trigger `setTriggerInterval` interval",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setTriggerInterval"
        },
        "configuration": {
            "label": "setTriggerInterval",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Defines trigger condition, activation and deactivation statements. Trigger condition has to return `Boolean`. `true` will activate the trigger, `false` will deactivate it (only if activation is set to repeat). `thisList` returns the same result as `list` command, which includes all entities in the trigger area that are capable of activating the trigger. Dead entities are excluded as well as crew in vehicles, vehicles themselves are included.",
            "examples": [
                {
                    "text": "```sqf\n_trg setTriggerStatements [\"this\", \"hint 'trigger on'\", \"hint 'trigger off'\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "trigger",
                            "description": "`Object` - trigger object"
                        },
                        {
                            "name": "condition",
                            "description": "`String` - code containing trigger condition. Special variables available here:\n* [this](https://community.bistudio.com/wiki/Magic%20Variables%23this_2) (`Boolean`) - detection event\n* `thisTrigger` (`Object`) - trigger instance\n* `thisList` (`Array`) - array of all detected entities"
                        },
                        {
                            "name": "activation",
                            "description": "`String` - code that is executed when the trigger is activated. Special variables available here:\n* `thisTrigger` (`Object`) - trigger instance\n* `thisList` (`Array`) - array of all detected entities"
                        },
                        {
                            "name": "deactivation",
                            "description": "`String` - code that is executed when the trigger is deactivated. Special variable available here:\n* `thisTrigger` (`Object`) - trigger instance"
                        }
                    ],
                    "outline": "trigger `setTriggerStatements` [condition, activation, deactivation]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setTriggerStatements"
        },
        "configuration": {
            "label": "setTriggerStatements",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the text label attached to the trigger object. This is used for example as a radio slot label for radio activated triggers.",
            "examples": [
                {
                    "text": "```sqf\ntrigger setTriggerText \"Call for support\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "trigger",
                            "description": "`Object`"
                        },
                        {
                            "name": "text",
                            "description": "`String`"
                        }
                    ],
                    "outline": "trigger `setTriggerText` text",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setTriggerText"
        },
        "configuration": {
            "label": "setTriggerText",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Defines the time between condition satisfaction and trigger activation (randomly from min to max, with an average value mid). If the last argument is true, the condition must be fullfilled all the time. \n\n\nFor a normal trigger, _min_, _mid_ and _max_ are used to generate random duration according to {{Link|https://en.wikipedia.org/wiki/Normal_distribution|Gaussian Distribution}}<ref>Technically, it is a rescaled {{Link|https://en.wikipedia.org/wiki/Bates_distribution|Bates distribution}} with n = 4. The distribution is split in two at its midpoint and scaled linearly such that its maximum lies at the specified midpoint.</ref>. For a \"Seized\" type of trigger, the duration value is generated using side ruling power",
            "examples": [
                {
                    "text": "```sqf\n_trigger setTriggerTimeout [5, 10, 7, false];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "trigger",
                            "description": "`Object`"
                        },
                        {
                            "name": "min",
                            "description": "`Number`"
                        },
                        {
                            "name": "mid",
                            "description": "`Number`"
                        },
                        {
                            "name": "max",
                            "description": "`Number`"
                        },
                        {
                            "name": "interruptable",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "trigger `setTriggerTimeout` [min, mid, max, interruptable]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setTriggerTimeout"
        },
        "configuration": {
            "label": "setTriggerTimeout",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the type of action processed by the trigger after activation (no action, a waypoints switch or an end of mission):\n\n* `**\"NONE\"**`\n* `**\"EAST G\"**` - Guarded by OPFOR - (It is better to use `createGuardedPoint` instead)\n* `**\"WEST G\"**` - Guarded by BLUFOR - (It is better to use `createGuardedPoint` instead)\n* `**\"GUER G\"**` - Guarded by Independent - (It is better to use `createGuardedPoint` instead)\n* `**\"SWITCH\"**` - Switch waypoints/break loop (see [[ArmA:_Mission_Editor#Triggers_Mode_.28F3.29|Triggers]])\n* `**\"END1\"**` - End #1\n* `**\"END2\"**` - End #2\n* `**\"END3\"**` - End #3\n* `**\"END4\"**` - End #4\n* `**\"END5\"**` - End #5\n* `**\"END6\"**` - End #6\n* `**\"LOOSE\"**` - (Meant to say LOSE but is misspelt in the game engine).\n* `**\"WIN\"**` - (Not in editor. Valid enum name but when set, defaults to `**\"END1\"**`)",
            "examples": [
                {
                    "text": "```sqf\n_trigger setTriggerType \"END1\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "trigger",
                            "description": "`Object`"
                        },
                        {
                            "name": "action",
                            "description": "`String`"
                        }
                    ],
                    "outline": "trigger `setTriggerType` action",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setTriggerType"
        },
        "configuration": {
            "label": "setTriggerType",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the rotation and elevation limits for the given turret. The limits can only be set within the limits defined in config and cannot exceed them. To reset to config defaults pass the turret argument only (Example 2).",
            "examples": [
                {
                    "text": "```sqf\nm2 setTurretLimits [[0], -45, 45, -10, 10];\n```"
                },
                {
                    "text": "```sqf\nm2 setTurretLimits [[0]]; //reset\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - vehicle the turret belongs to"
                        },
                        {
                            "name": "turret",
                            "description": "`Array` - turret path"
                        },
                        {
                            "name": "minTurn",
                            "description": "`Number` - from 0 to -angle in degrees (left)"
                        },
                        {
                            "name": "maxTurn",
                            "description": "`Number` - from 0 to +angle in degrees (right)"
                        },
                        {
                            "name": "minElev",
                            "description": "`Number` - from 0 to -angle in degrees (down)"
                        },
                        {
                            "name": "maxElev",
                            "description": "`Number` - from 0 to +angle in degrees (up)"
                        }
                    ],
                    "outline": "vehicle `setTurretLimits` [turret, minTurn, maxTurn, minElev, maxElev]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setTurretLimits"
        },
        "configuration": {
            "label": "setTurretLimits",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set the current optics mode of the optics in the turret occupied by the specified unit. Alternatively, you can specify a vehicle and turret path instead of a unit. Optic modes refer to the different fields of view (FOV) or zoom levels of an optic.",
            "examples": [
                {
                    "text": "```sqf\nplayer setTurretOpticsMode 0;\n```"
                },
                {
                    "text": "```sqf\nmyTank setTurretOpticsMode [[-1], 1];\n```"
                },
                {
                    "text": "```sqf\nmyAircraft setTurretOpticsMode [[0, 0], 0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "obj",
                            "description": "`Object`"
                        },
                        {
                            "name": "mode",
                            "description": "`Number` - optic mode index"
                        }
                    ],
                    "outline": "obj `setTurretOpticsMode` mode",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "obj",
                            "description": "`Object`"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` format [Turret Path](https://community.bistudio.com/wiki/Turret%20Path)"
                        },
                        {
                            "name": "opticModeIndex",
                            "description": "`Number` - optic mode index"
                        }
                    ],
                    "outline": "obj `setTurretOpticsMode` [turretPath, opticModeIndex]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setTurretOpticsMode"
        },
        "configuration": {
            "label": "setTurretOpticsMode",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Changes a location to the specified class. Location classes are defined in CfgLocationTypes.",
            "examples": [
                {
                    "text": "```sqf\nmyLocation setType \"RockArea\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "location",
                            "description": "`Location`"
                        },
                        {
                            "name": "name",
                            "description": "`String`"
                        }
                    ],
                    "outline": "location `setType` name",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setType"
        },
        "configuration": {
            "label": "setType",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "In Arma 2 and since Arma 3 v1.64, this command sets unit into incapacitated state.\n\n`lifeState` results:\n* Arma 2: \"UNCONSCIOUS\"\n* Arma 3: \"INCAPACITATED\"\n\n**Arma 3**: The unit goes in ragdoll mode and animation played while incapacitated depends on the injuries received.",
            "examples": [
                {
                    "text": "```sqf\n_unit setUnconscious true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "set",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "unit `setUnconscious` set",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setUnconscious"
        },
        "configuration": {
            "label": "setUnconscious",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets skill of given unit. Unlike `setSkill`, `setUnitAbility` can set values > 1. Even though the `skill` command will correctly return set value, the actual unit ability will be capped to max available.",
            "examples": [
                {
                    "text": "```sqf\n_unit setUnitAbility 1;\n```"
                },
                {
                    "text": "```sqf\nbob setUnitAbility -log 0;\nhint str skill bob; //1.#INF\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "value",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "unit `setUnitAbility` value",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setUnitAbility"
        },
        "configuration": {
            "label": "setUnitAbility",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets **unit's** combat mode (engagement rules). For AI group combat mode see `setCombatMode`. Mode may be one of the following: \n* `**\"BLUE\"**` : Never fire, keep formation\n* `**\"GREEN\"**` : Hold fire, keep formation\n* `**\"WHITE\"**` : Hold fire, engage at will/loose formation\n* `**\"YELLOW\"**` : Fire at will, keep formation\n* `**\"RED\"**` : Fire at will, engage at will/loose formation\nSee [Combat Modes](https://community.bistudio.com/wiki/Combat%20Modes) for more information on combat modes.",
            "examples": [
                {
                    "text": "```sqf\n_unit setUnitCombatMode \"YELLOW\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "mode",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `setUnitCombatMode` mode",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setUnitCombatMode"
        },
        "configuration": {
            "label": "setUnitCombatMode",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets minimum freefall height AGL per unit, at which the unit assumes HALO pose. Engine default is 100m. Use -1 to reset the height to default.",
            "examples": [
                {
                    "text": "```sqf\nplayer setUnitFreefallHeight 1000;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit"
                        },
                        {
                            "name": "minHeight",
                            "description": "`Number` - min freefall height, -1 to set default"
                        }
                    ],
                    "outline": "unit `setUnitFreefallHeight` minHeight",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setUnitFreefallHeight"
        },
        "configuration": {
            "label": "setUnitFreefallHeight",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates a loadout from given inventory structure and applies it to a unit. When `String` for class name is supplied, the command will search `**CfgVehicles**` for the given class in order to extract the loadout from config. If `Config` is given, it will search given config (including [ mission config](https://community.bistudio.com/wiki/missionConfigFile%20)) for the loadout information. In either case, the config should contain the following entries, which is standard for any unit class, for example:\n```cpp\nclass MyLoadout\n{\n\tuniformClass = \"U_B_CombatUniform_mcam\";\n\tbackpack = \"B_AssaultPack_mcamo\";\n\tlinkedItems[] = {\"V_PlateCarrier1_rgr\",\"H_HelmetB\",\"ItemCompass\",\"ItemWatch\",\"ItemRadio\",\"NVGoggles\"};\n\tweapons[] = {\"arifle_MX_ACO_pointer_F\",\"hgun_P07_F\"};\n\titems[] = {\"FirstAidKit\",\"FirstAidKit\",\"FirstAidKit\"};\n\tmagazines[] = {\"30Rnd_65x39_caseless_mag\",\"16Rnd_9x21_Mag\",\"SmokeShell\",\"HandGrenade\",\"HandGrenade\",\"HandGrenade\",\"HandGrenade\",\"HandGrenade\",\"HandGrenade\",\"HandGrenade\",\"HandGrenade\",\"HandGrenade\",\"HandGrenade\",\"HandGrenade\",\"HandGrenade\",\"HandGrenade\",\"HandGrenade\",\"HandGrenade\",\"HandGrenade\",\"HandGrenade\",\"HandGrenade\",\"HandGrenade\",\"HandGrenade\",\"HandGrenade\",\"HandGrenade\",\"HandGrenade\",\"HandGrenade\"};\n};\n```",
            "examples": [
                {
                    "text": "```sqf\nplayer_2 setUnitLoadout (getUnitLoadout player_1); // Copies loadout from player_1 and applies it to player_2\n```"
                },
                {
                    "text": "```sqf\nplayer_2 setUnitLoadout [getUnitLoadout player_1, true]; // Copies loadout from player_1 and applies it to player_2 while topping up all magazines\n```"
                },
                {
                    "text": "```sqf\n_unit setUnitLoadout \"B_Soldier_F\";\n```"
                },
                {
                    "text": "```sqf\n_unit setUnitLoadout (configFile >> \"CfgVehicles\" >> \"B_Soldier_F\");\n```"
                },
                {
                    "text": "```sqf\n_unit setUnitLoadout (missionConfigFile >> \"MyLoadout\");\n```"
                },
                {
                    "text": "Strip unit of everything:\n\n```sqf\n_unit setUnitLoadout (configFile >> \"EmptyLoadout\");\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "loadout",
                            "description": "`Array` - [Unit Loadout Array](https://community.bistudio.com/wiki/Unit%20Loadout%20Array)"
                        }
                    ],
                    "outline": "unit `setUnitLoadout` loadout",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "loadout",
                            "description": "`Array` - [Unit Loadout Array](https://community.bistudio.com/wiki/Unit%20Loadout%20Array)"
                        },
                        {
                            "name": "fullMagazines",
                            "description": "`Boolean` - partially emptied magazines will be refilled when the loadout is applied"
                        }
                    ],
                    "outline": "unit `setUnitLoadout` [loadout, fullMagazines]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "name",
                            "description": "`String` - class name (see description)"
                        }
                    ],
                    "outline": "unit `setUnitLoadout` name",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "config",
                            "description": "`Config` - config class (see description)"
                        }
                    ],
                    "outline": "unit `setUnitLoadout` config",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setUnitLoadout"
        },
        "configuration": {
            "label": "setUnitLoadout",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set unit position rules. This command will not change the stance of the human player, even though it will change the output of `unitPos` command. To change player stance use `playAction` or `playActionNow`:\n\n```sqf\nplayer playAction \"PlayerProne\"; // DOWN\nplayer playAction \"PlayerStand\"; // UP\nplayer playAction \"PlayerCrouch\"; // MIDDLE\n```",
            "examples": [
                {
                    "text": "```sqf\n_soldier setUnitPos \"UP\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "mode",
                            "description": "`String` - can be:\n* \"DOWN\" - Unit goes prone and stays prone.\n* \"UP\" - Unit stands and stays standing.\n* \"MIDDLE\" - Kneel Position. **(Armed Assault)** - Unit will not kneel if it is unarmed\n* \"AUTO\" - Unit chooses mode according to circumstances."
                        }
                    ],
                    "outline": "unit `setUnitPos` mode",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setUnitPos"
        },
        "configuration": {
            "label": "setUnitPos",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set unit position rules. This command is the lowest level of priority for setting unit position and to be used in scripted\t\nFSM's. Priorities are:\n# Unit pos commanded (from the commanding menu, higher priority).\n# Unit pos scripted (from `setUnitPos` scripting command, medium priority).\n# Unit pos FSM / **setUnitPosWeak** (used in the formation FSM, lowest priority).",
            "examples": [
                {
                    "text": "```sqf\n_soldier disableAI \"FSM\";\n_soldier setUnitPosWeak \"DOWN\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "mode",
                            "description": "`String` - can be:\n* \"DOWN\" - Unit goes prone and stays prone.\n* \"UP\" - Unit stands and stays standing.\n* \"MIDDLE\" - Kneel Position. **(Armed Assault)** - Unit will not kneel if it is unarmed\n* \"AUTO\" - Unit chooses mode according to circumstances."
                        }
                    ],
                    "outline": "unit `setUnitPosWeak` mode",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setUnitPosWeak"
        },
        "configuration": {
            "label": "setUnitPosWeak",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets rank of given unit.\n\nPossible rank values, and the associated `rating` that is **set** (not added, the value replaces previous rating) with it:\n\n{{{!}} class=\"wikitable\" style=\"text-align: center\"\n! colspan=\"2\" {{!}} Ranks\n! PRIVATE\n! CORPORAL\n! SERGEANT\n! LIEUTENANT\n! CAPTAIN\n! MAJOR\n! COLONEL\n{{!}}-\n! rowspan=\"3\" {{!}} Ratings\n!\n{{Name|arma1|short}}\n\n{{Name|arma2|short}}\n\n{{Name|arma2oa|short}}\n\n{{Name|tkoh|short}}\n{{!}} 0\n{{!}} 500\n{{!}} 1500\n{{!}} 2500\n{{!}} 3500\n{{!}} 5000\n{{!}} 7500\n{{!}}-\n! {{Name|arma3|short}} (ca 2015)\n{{!}} 0\n{{!}} 50\n{{!}} 150\n{{!}} 250\n{{!}} 350\n{{!}} 500\n{{!}} 750\n{{!}}-\n! {{Name|arma3|short}}\n{{!}} 0\n{{!}} 0\n{{!}} 0\n{{!}} 0\n{{!}} 0\n{{!}} 0\n{{!}} 0\n{{!}}}\n\n**Arma 3**: Before Arma 3 v1.68 and in previous titles, this command was {{Icon|globalArgument|32 {{Icon|localEffect|32}}.}}",
            "examples": [
                {
                    "text": "```sqf\nplayer setUnitRank \"COLONEL\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        },
                        {
                            "name": "rank",
                            "description": "`String` - see above. If a wrong string is provided, the command errors and reverts to using \"PRIVATE\""
                        }
                    ],
                    "outline": "unitName `setUnitRank` rank",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setUnitRank"
        },
        "configuration": {
            "label": "setUnitRank",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Proportionaly increase/decrease unit's recoil. Drives muzzle up with every shot when supplied positive number and down when negative. 0 cancels recoil.",
            "examples": [
                {
                    "text": "```sqf\nplayer setUnitRecoilCoefficient 10;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        },
                        {
                            "name": "coefficient",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "unitName `setUnitRecoilCoefficient` coefficient",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setUnitRecoilCoefficient"
        },
        "configuration": {
            "label": "setUnitRecoilCoefficient",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enables or disables a trait or alters a trait of the given unit. Unit traits consist of unit abilities, which are `Boolean`s and modifiers, which are `Number`s. Custom trait can only be a [bool](https://community.bistudio.com/wiki/Boolean).\n\n\nAbilities:\n* `Boolean` **engineer** - Ability to partially repair vehicles with toolkit, equivalent to {{hl",
            "examples": [
                {
                    "text": "```sqf\nplayer setUnitTrait [\"Medic\", true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - the unit whose trait should be set"
                        },
                        {
                            "name": "skillName",
                            "description": "`String` - name of the skill"
                        },
                        {
                            "name": "value",
                            "description": "`Boolean` or `Number` - value (see above)"
                        },
                        {
                            "name": "isCustom",
                            "description": "`Boolean` - (Optional) Must be set to `true` in case of custom"
                        }
                    ],
                    "outline": "unit `setUnitTrait` [skillName, value, isCustom]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setUnitTrait"
        },
        "configuration": {
            "label": "setUnitTrait",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets whether or not cargo or turret units _should_ get out of vehicle when in combat. If **true**, vehicle will stop and units will dismount. Vehicle must be local. The command resets last time unit had reacted to an enemy as well as forcing `orderGetIn` `false` if `canUnloadInCombat` is permitted by config",
            "examples": [
                {
                    "text": "```sqf\n_veh setUnloadInCombat [true, false];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "allowCargo",
                            "description": "`Boolean`"
                        },
                        {
                            "name": "allowTurrets",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "vehicle `setUnloadInCombat` [allowCargo, allowTurrets]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setUnloadInCombat"
        },
        "configuration": {
            "label": "setUnloadInCombat",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "[[File:setUserActionText.jpg|right|350px]] Changes user added action (see `addAction`) menu item text.",
            "examples": [
                {
                    "text": "```sqf\n_id = player addAction [\"Hello\", \"\"];\nplayer setUserActionText [_id, \"Good Bye\"];\n```"
                },
                {
                    "text": "```sqf\n\n_id = billboard addAction [\"Some Action\", {}];\nbillboard setUserActionText [\n\t_id, \n\t\"Some Action\", \n\t\"<t color='#ff0000'>Background-----------------</t><br>Multiline<br>Multiline<br>Multiline<br>. . .\", \n\t\"<t color='#00ff00'>-----------------Foreground</t>\"\n];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - object the action is added to"
                        },
                        {
                            "name": "actionIndex",
                            "description": "`Number` - action id returned by `addAction`"
                        },
                        {
                            "name": "textMenu",
                            "description": "`String` or [Structured Text](https://community.bistudio.com/wiki/Structured%20Text) - text title shown in scroll action menu"
                        },
                        {
                            "name": "textWindowBackground",
                            "description": "`String` or [Structured Text](https://community.bistudio.com/wiki/Structured%20Text) - (Optional, default \"\") background text"
                        },
                        {
                            "name": "textWindowForeground",
                            "description": "`String` or [Structured Text](https://community.bistudio.com/wiki/Structured%20Text) - (Optional, default \"\") foreground text"
                        }
                    ],
                    "outline": "object `setUserActionText` [actionIndex, textMenu, textWindowBackground, textWindowForeground]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setUserActionText"
        },
        "configuration": {
            "label": "setUserActionText",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Stored user text value in MFD, limit is 50, user0...user49",
            "examples": [
                {
                    "text": "```sqf\n_vehicle setUserMFDText [0, \"some text\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - vehicle with MFD"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        },
                        {
                            "name": "value",
                            "description": "`String`"
                        }
                    ],
                    "outline": "vehicle `setUserMFDText` [index, value]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setUserMFDText"
        },
        "configuration": {
            "label": "setUserMFDText",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "When MFD is using user controllers, this command can set values on them. For example, MFD config for Blackfoot has an entry\n```cpp\n// ...\nclass Draw\n{\n\talpha = \"user3\";\n\tcolor[] = {\"user0\",\"user1\",\"user2\"};\n// ...\n```\nwhich could control color of the MFD. See Example 2-3-4 on how to set different colors of the Blackfoot MFD",
            "examples": [
                {
                    "text": "```sqf\nBIS_Plane setUserMFDValue [0,1]; // user0 in MFD will return 1\n```"
                },
                {
                    "text": "Set MFD Red:\n\n```sqf\n\nBlackfoot setUserMFDValue [0, 1];\t// \"user0\" - 1\nBlackfoot setUserMFDValue [1, 0];\t// \"user1\" - 0\nBlackfoot setUserMFDValue [2, 0];\t// \"user2\" - 0\nBlackfoot setUserMFDValue [3, 1];\t// \"user3\" - 1\n\n```"
                },
                {
                    "text": "Set MFD pale Blue:\n\n```sqf\n\nBlackfoot setUserMFDValue [0, 0];\t// \"user0\" - 0\nBlackfoot setUserMFDValue [1, 0];\t// \"user1\" - 0\nBlackfoot setUserMFDValue [2, 1];\t// \"user2\" - 1\nBlackfoot setUserMFDValue [3, 0.1];\t// \"user3\" - 0.1\n\n```"
                },
                {
                    "text": "Hide MFD:\n\n```sqf\nBlackfoot setUserMFDValue [3, 0];\t// \"user3\" - 0\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - an vehicle with MFD"
                        },
                        {
                            "name": "index",
                            "description": "`Number` - index of custom MFD user actions"
                        },
                        {
                            "name": "value",
                            "description": "`Number` - value which should custom source return in MFD"
                        }
                    ],
                    "outline": "vehicle `setUserMFDValue` [index, value]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setUserMFDValue"
        },
        "configuration": {
            "label": "setUserMFDValue",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set variable to given value in the variable space of given element. Can be used to broadcast variables over the network.\n\nTo remove a variable, set it to `nil` (see _Example 5_) - note that this does not work on `Object` and [scripted](https://community.bistudio.com/wiki/createLocation) `Location` namespaces (the variable will be set to `nil` but will remain listed by `allVariables`).\n\n**WARNING**: \n`missionNamespace`, `uiNamespace`, `parsingNamespace` and `profileNamespace` variables **cannot** be named as commands - e.g <sqf inline>missionNamespace setVariable [\"west\", 123]; conflicts with the `west` command and will result in a `**Reserved variable in expression**` error, `west` being a scripting command (other namespaces do not have such limitation).\nSee also [all available script commands](https://community.bistudio.com/wiki/%3ACategory%3AScripting%20Commands).",
            "examples": [
                {
                    "text": "```sqf\n_myTruck setVariable [\"TAG_myPublicVariable\", 123, true];\n```"
                },
                {
                    "text": "```sqf\n_myTruck setVariable [\"TAG_myLocalVariable\", [\"321\", _var], owner driver _myTruck];\n```"
                },
                {
                    "text": "```sqf\nmissionNamespace setVariable [\"TAG_myName\", \"Brian\"];\nhint TAG_myName; // hints \"Brian\"\n```"
                },
                {
                    "text": "Get the current value of a variable or, if it is undefined, define it and then get the value:\n\n```sqf\n\nprivate _var = missionNamespace getVariable \"VarName\";\nif (isNil \"_var\") then\n{\n\t_var = 123;\n\tmissionNamespace setVariable [\"VarName\", _var];\n};\n// _var now contains the current value of the missionNamespace's variable varName\n\n```"
                },
                {
                    "text": "Remove `**TAG_myPublicVariable**` from `missionNamespace` (globally):\n\n```sqf\nmissionNamespace setVariable [\"TAG_myPublicVariable\", nil, true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "varspace",
                            "description": "variable space in which variable can be set. Can be one of:\n{{Columns|2|\n* `Namespace`\n* `Object`\n** {{Icon|checked}} {{GVI|arma3|2.10"
                        },
                        {
                            "name": "name",
                            "description": "`String` - variable name (`Identifier`)"
                        },
                        {
                            "name": "value",
                            "description": "`Anything` - variable value"
                        },
                        {
                            "name": "public",
                            "description": "(Optional, default `false`) can be one of:\n* `Boolean` - if set to `true`, the variable is broadcast globally and is persistent ([JIP](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Join%20In%20Progress) compatible) {{Icon|globalEffect|32}}\n* `Number` - the variable is only set on the client with the given [Machine network ID](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Machine%20network%20ID). If the number is negative, the variable is set on every client except for the one with the given ID.\n* `Array` of `Number`s - array of [Machine network IDs](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Machine%20network%20ID)\n\nThis parameter is only available if the **varspace** parameter is a `Namespace`, `Object` or `Group`. Furthermore, only the following [Data Types](https://community.bistudio.com/wiki/%3ACategory%3A%20Data%20Types) can be broadcast:\n{{{!}} class=\"wikitable align-center\"\n! Type\n{{!}} `Number`\n{{!}} `Boolean`\n{{!}} `Object`\n{{!}} `Group`\n{{!}} `String`\n{{!}} [Text](https://community.bistudio.com/wiki/Structured%20Text)\n{{!}} `Array`\n{{!}} `Code`\n{{!}} `Nothing` (`nil`)\n{{!}} `HashMap`\n{{!}}-\n! Since\n{{!}} colspan=\"6\" {{!}} **(Armed Assault)**\n{{!}} colspan=\"2\" {{!}} **(Armed Assault)**\n{{!}} **(Arma 3)**\n{{!}} **(Arma 3)**\n{{!}}}"
                        }
                    ],
                    "outline": "varspace `setVariable` [name, value, public]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setVariable"
        },
        "configuration": {
            "label": "setVariable",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set object's direction vector. Up vector will remain unchanged.",
            "examples": [
                {
                    "text": "```sqf\nplayer setVectorDir [5,6,1];\n```"
                },
                {
                    "text": "```sqf\n\n// provided _myMine is local\n_myMine setVectorDir [0.3, 1, 0];\n_myMine setPosWorld getPosWorld _myMine; // synchronises the mine's direction over the network (special case)\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "vectorDir",
                            "description": "`Array` format `Vector3D`"
                        }
                    ],
                    "outline": "object `setVectorDir` vectorDir",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setVectorDir"
        },
        "configuration": {
            "label": "setVectorDir",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "[[File:Vectordirandup.jpg|right|300px]] Sets orientation of an object.\nThe command takes 2 vector arrays, one for `vectorDir` and one for `vectorUp`.\nDefault object orientation will always have `vectorDir` pointing forward (North) along Y axis and `vectorUp` pointing up along Z axis - [[0,1,0],[0,0,1]], as shown on the diagram below (see also `BIS_fnc_transformVectorDirAndUp`).\n\n\nWhen attaching object to an object the axes are relative to the object that gets the attachment.\nIf it is player object for example, then X goes from left to right, Y goes from back to front, and Z goes from down up.\n\n\nThe `setDir` command is incompatible with `setVectorDirAndUp` and should not be used together on the same object.\nUsing `setVectorDirAndUp` alone should be sufficient for any orientation.",
            "examples": [
                {
                    "text": "```sqf\n\n// set exact yaw, pitch, and roll\n_yaw = 45; _pitch = -80; _roll = 0;\n_myObject setVectorDirAndUp [\n\t[sin _yaw * cos _pitch, cos _yaw * cos _pitch, sin _pitch],\n\t[[sin _roll, -sin _pitch, cos _roll * cos _pitch], -_yaw] call BIS_fnc_rotateVector2D\n];\n\n```"
                },
                {
                    "text": "To rotate _myObject on Z axis 90 degrees clockwise, change its `vectorDir` but leave `vectorUp` unchanged.\n\n```sqf\n_myObject setVectorDirAndUp [[1,0,0], [0,0,1]];\n```"
                },
                {
                    "text": "To rotate _myObject on Y axis 90 degrees clockwise, change its `vectorUp` but leave `vectorDir` unchanged.\n\n```sqf\n_myObject setVectorDirAndUp [[0,1,0], [1,0,0]];\n```"
                },
                {
                    "text": "To rotate _myObject on X axis 90 degrees (tilt forward), change both `vectorDir` and `vectorUp` accordingly.\n\n```sqf\n_myObject setVectorDirAndUp [[0,0,-1], [0,1,0]];\n```"
                },
                {
                    "text": "More complex orientations\n\n```sqf\n\n// tilt forward 90 + rotate left 90\n_myObject setVectorDirAndUp [[1,0,0], [0,1,0]];\n// tilt backward 45 degrees\n_myObject setVectorDirAndUp [[0,0.5,0.5], [0,-0.5,0.5]];\n// tilt forward 30 degrees\n_myObject setVectorDirAndUp [[0,0.66,-0.33], [0,0.33,0.66]];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "vectorDir",
                            "description": "`Array` format `Vector3D` - `vectorDir`"
                        },
                        {
                            "name": "vectorUp",
                            "description": "`Array` format `Vector3D` - `vectorUp`"
                        }
                    ],
                    "outline": "vehicle `setVectorDirAndUp` [vectorDir, vectorUp]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setVectorDirAndUp"
        },
        "configuration": {
            "label": "setVectorDirAndUp",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set object's up vector. Direction of the object remain unchanged. Default object's `vectorUp` is [0,0,1].",
            "examples": [
                {
                    "text": "Turn object upside down:\n\n```sqf\n_obj setVectorUp [0,0,-1];\n```"
                },
                {
                    "text": "Align object with the terrain underneath:\n\n```sqf\n_obj setVectorUp surfaceNormal getPosASL _obj;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "vectorUp",
                            "description": "`Array` format [Vector](https://community.bistudio.com/wiki/Vector3D) (normalised)"
                        }
                    ],
                    "outline": "object `setVectorUp` vectorUp",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setVectorUp"
        },
        "configuration": {
            "label": "setVectorUp",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets how much ammunition (compared to a full state defined by the vehicle type) the vehicle has. Note that the ammo will be added only to [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality) turrets. To check locality of turret use `turretLocal`.\n\nThe value ranges from 0 to 1.",
            "examples": [
                {
                    "text": "```sqf\nplayer setVehicleAmmo 0;\n```"
                },
                {
                    "text": "```sqf\n_vehicle setVehicleAmmo 1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicleName",
                            "description": "`Object`"
                        },
                        {
                            "name": "value",
                            "description": "`Number` - 0: empty, 1: full"
                        }
                    ],
                    "outline": "vehicleName `setVehicleAmmo` value",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setVehicleAmmo"
        },
        "configuration": {
            "label": "setVehicleAmmo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets how much ammunition (compared to the configuration of magazines defined in the vehicle's class) the vehicle has. Note that the ammo will only be added to [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality) turrets. To check the locality of turret use `turretLocal`.",
            "examples": [
                {
                    "text": "```sqf\nplayer setVehicleAmmoDef 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit or vehicle."
                        },
                        {
                            "name": "value",
                            "description": "`Number` - from 0 (no ammo) to 1 (fully loaded)."
                        }
                    ],
                    "outline": "unit `setVehicleAmmoDef` value",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setVehicleAmmoDef"
        },
        "configuration": {
            "label": "setVehicleAmmoDef",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the armor (or health for men) state of the vehicle (a value from 0 to 1). \n\nWorks like `setDamage`, but the other way around: 1 is full health - see _Example 2_.",
            "examples": [
                {
                    "text": "```sqf\nplayer setVehicleArmor 0.5;\n```"
                },
                {
                    "text": "```sqf\nplayer setVehicleArmor 1;\n// is the same as\nplayer setDamage 0;\n\nplayer setVehicleArmor 0;\n// is the same as\nplayer setDamage 0.97;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicleName",
                            "description": "`Object`"
                        },
                        {
                            "name": "value",
                            "description": "`Number` - in range 0..1"
                        }
                    ],
                    "outline": "vehicleName `setVehicleArmor` value",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setVehicleArmor"
        },
        "configuration": {
            "label": "setVehicleArmor",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Load cargo vehicle inside vehicle if possible, returns bool based on whether the vehicle was able to be loaded.  Can also be used to unload a specific loaded vehicle or all loaded vehicles.",
            "examples": [
                {
                    "text": "Blackfish with no vehicle cargo loaded\n\n```sqf\nprivate _success = blackfish setVehicleCargo offroad; // true\n```"
                },
                {
                    "text": "Blackfish with full cargo already loaded\n\n```sqf\nprivate _success = blackfish setVehicleCargo offroad; // false\n```"
                },
                {
                    "text": "Unload specific loaded vehicle (will paradrop if dropped from high altitude)\n\n```sqf\nprivate _success = objNull setVehicleCargo offroad;\n```"
                },
                {
                    "text": "Unload all vehicles (will paradrop if dropped from high altitude)\n\n```sqf\nprivate _success = blackfish setVehicleCargo objNull;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - vehicle for carrying cargo, `objNull` to unload specific loaded cargo"
                        },
                        {
                            "name": "cargo",
                            "description": "`Object` - cargo to put/loaded in vehicle, `objNull` to unload all loaded cargo"
                        }
                    ],
                    "outline": "vehicle `setVehicleCargo` cargo",
                    "returns": "`Boolean` - whether or not operation was a success"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setVehicleCargo"
        },
        "configuration": {
            "label": "setVehicleCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets ID to vehicle. By this ID vehicle is referenced by triggers and waypoints.\n\n**WARNING**: This command is **not** to be used.",
            "examples": [
                {
                    "text": "```sqf\nplayer setVehicleId 1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicleName",
                            "description": "`Object`"
                        },
                        {
                            "name": "id",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "vehicleName `setVehicleId` id",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setVehicleId"
        },
        "configuration": {
            "label": "setVehicleId",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets vehicle lock. Possible values:\n\n \n* \"UNLOCKED\" \n* \"DEFAULT\"\n* \"LOCKED\"\n* \"LOCKEDPLAYER\"",
            "examples": [
                {
                    "text": "```sqf\n_veh1 setVehicleLock \"LOCKED\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicleName",
                            "description": "`Object`"
                        },
                        {
                            "name": "lockState",
                            "description": "`String`"
                        }
                    ],
                    "outline": "vehicleName `setVehicleLock` lockState",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setVehicleLock"
        },
        "configuration": {
            "label": "setVehicleLock",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Moves the object to a given position (same as `createVehicle` placement algorithm). Uses either the position that's defined by the _position_ param, or one of the marker positions from the markers array. The object is placed inside a circle with _position_ as its center and _placement_ as its radius. The type of placement could also be controlled with _special_.\n\n\nIf position is in water and the vehicle can float, it is placed on water surface, otherwise it is placed on the ground, even if the ground is under water. If roof surfaces support walking, units will be placed on roofs if such position is given.",
            "examples": [
                {
                    "text": "```sqf\n\n// place the player at either [1000,2000], or one of the three markers positions\nplayer setVehiclePosition [[1000,2000], [\"Pos1\",\"Pos2\",\"Pos3\"], 0, \"CAN_COLLIDE\"];\n\n```"
                },
                {
                    "text": "```sqf\nheli setVehiclePosition [player, [], 0, \"FLY\"];\n```"
                },
                {
                    "text": "```sqf\n_cam = \"camera\" camCreate [0,0,0];\n_cam setDir random 360;\n_cam setVehiclePosition [[5000,5000], [], 1000, \"NONE\"];\n_cam setPosWorld (getPosWorld _cam vectorAdd [0,0,1.8]);\n_cam cameraEffect [\"Internal\", \"Back\"];\n```"
                },
                {
                    "text": "```sqf\nprivate _tablePos = player getRelPos [3, 0];\nprivate _table = \"Land_CampingTable_F\" createVehicle [0,0,0];\nprivate _laptop = \"Land_Laptop_unfolded_F\" createVehicle [0,0,0];\n_table setPos _tablePos;\n_laptop setVehiclePosition [_tablePos vectorAdd [0.5, 0.2, 10], [], 0, \"CAN_COLLIDE\"];\n_laptop attachTo [_table];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "position",
                            "description": "`Array` format [PositionATL](https://community.bistudio.com/wiki/Position%23PositionATL) ([PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) if boat or amphibious), [Position2D](https://community.bistudio.com/wiki/Position%23Introduction), or `Object` - desired placement position.\nIf object is given, object position is used for _position_. Normally only _x_ and _y_ are considered, unless \"CAN_COLLIDE\" is used for special placement"
                        },
                        {
                            "name": "markers",
                            "description": "`Array` of `String`s - if the markers array contains one or more marker names, the position is chosen randomly and could be one of the marker positions or just the supplied main position.\nIf marker had z coordinate set with `setMarkerPos`, the vehicle will be placed on the nearest surface below this z coordinate"
                        },
                        {
                            "name": "placement",
                            "description": "`Number` - the vehicle is randomly placed inside a circle with given position as center and placement as its radius"
                        },
                        {
                            "name": "special",
                            "description": "`String` - (Optional, default \"NONE\") can be one of the following: \n* `**\"NONE\"**` - will look for suitable empty position near given position (subject to other placement params) before placing vehicle there. \n* `**\"CAN_COLLIDE\"**` - places vehicle at given position (subject to other placement params), without checking if others objects can cross its 3D model. \n* `**\"FLY\"**` - if vehicle is capable of flying and has crew, it will be made airborne at default height. \nIf _special_ is \"\" or not specified, default `**\"NONE\"**` is used."
                        }
                    ],
                    "outline": "object `setVehiclePosition` [position, markers, placement, special]",
                    "returns": "`Boolean` - `true` on success, `false` on failure"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setVehiclePosition"
        },
        "configuration": {
            "label": "setVehiclePosition",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the AI rule of Radar usage (Emission Control). Automatic means Radar switched on only when in Combat. The command doesn't affect player-controlled vehicles.",
            "examples": [
                {
                    "text": "```sqf\n_vehicle setVehicleRadar 1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - an AI-controlled vehicle"
                        },
                        {
                            "name": "rule",
                            "description": "`Number` - can be one of the following:\n* 0 - automatic\n* 1 - forced on\n* 2 - forced off"
                        }
                    ],
                    "outline": "vehicle `setVehicleRadar` rule",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setVehicleRadar"
        },
        "configuration": {
            "label": "setVehicleRadar",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets that the vehicle will be able to receive targets acquired by someone else via datalink from the `Side` center.",
            "examples": [
                {
                    "text": "```sqf\nvehicle player setVehicleReceiveRemoteTargets true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "bool",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "vehicle `setVehicleReceiveRemoteTargets` bool",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setVehicleReceiveRemoteTargets"
        },
        "configuration": {
            "label": "setVehicleReceiveRemoteTargets",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets that the vehicle will share its own position via datalink to the `Side` center.",
            "examples": [
                {
                    "text": "```sqf\nvehicle player setVehicleReportOwnPosition true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "report",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "vehicle `setVehicleReportOwnPosition` report",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setVehicleReportOwnPosition"
        },
        "configuration": {
            "label": "setVehicleReportOwnPosition",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets that the vehicle will share targets that were acquired by its own sensors via datalink to the `Side` center.",
            "examples": [
                {
                    "text": "```sqf\nvehicle player setVehicleReportRemoteTargets true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "bool",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "vehicle `setVehicleReportRemoteTargets` bool",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setVehicleReportRemoteTargets"
        },
        "configuration": {
            "label": "setVehicleReportRemoteTargets",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the \"heat\" state of different vehicle parts for Thermal Imaging detection.\nThis allows simulation of heated up parts of a vehicle without it actually having to utilize them - on a 0..1 range - 0 being cold, 1 being hot.\n**NOTE**: This command does not work on infantry weapons.",
            "examples": [
                {
                    "text": "```sqf\n\nvehicle player setVehicleTIPars [1, 1, 1];\t\t\t// set all parts hot\nvehicle player setVehicleTIPars [0, 0, 0];\t\t\t// set all parts cold\nvehicle player setVehicleTIPars [0.5, 0.5, 0.5];\t// set all parts warm\n\n```"
                },
                {
                    "text": "```sqf\nvehicle player setVehicleTIPars [1, 0, 0]; // set the engine warm, perfect for winter\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - vehicle whose components are manipulated"
                        },
                        {
                            "name": "engine",
                            "description": "`Number` - engine and body's heat"
                        },
                        {
                            "name": "wheels",
                            "description": "`Number` - tracks/wheels' heat"
                        },
                        {
                            "name": "weapon",
                            "description": "`Number` - main weapon's heat"
                        }
                    ],
                    "outline": "vehicle `setVehicleTIPars` [engine, wheels, weapon]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setVehicleTIPars"
        },
        "configuration": {
            "label": "setVehicleTIPars",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets string representation of an object to a custom string.\n\nWhen a vehicle is created and named in the editor, the name becomes both the variable containing the vehicle object and the string representation of the vehicle object.\nIn scripts an extra step is needed to achieve the same effect - see _Example 1_.\n\n**Arma 3**: This does not work with [Simple Objects](https://community.bistudio.com/wiki/Arma%203%3A%20Simple%20Objects).",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _playersCar = vehicle player;\nsystemChat str _playersCar; // displays e.g \"ce06b00# 164274: offroad_01_unarmed_f.p3d\"\n\n_playersCar setVehicleVarName \"MyOffroad\";\nsystemChat str _playersCar;\t// displays \"MyOffroad\"\n\nisNil \"MyOffroad\";\t\t\t// true - the MyOffroad variable is not set\nMyOffroad = _playersCar;\t// now it is\npublicVariable \"MyOffroad\";\t// broadcasts it over the network\n\n```"
                },
                {
                    "text": "```sqf\n_offroad setVehicleVarName \"\"; // Reset string representation to the default value\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "name",
                            "description": "`String`"
                        }
                    ],
                    "outline": "object `setVehicleVarName` name",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setVehicleVarName"
        },
        "configuration": {
            "label": "setVehicleVarName",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets `velocity` vector of an object in m/s.\n\n{{Feature|important|Since {{GVI|arma3|2.06",
            "examples": [
                {
                    "text": "```sqf\n_truck1 setVelocity [20, 0, 0];\n```"
                },
                {
                    "text": "Advanced method used for relative acceleration:\n\n```sqf\n\n_vel = velocity _vehicle;\n_dir = getDir _vehicle;\n_additionalSpeed = 10; // in m/s\n_vehicle setVelocity [\n\t(_vel select 0) + (sin _dir * _additionalSpeed), \n\t(_vel select 1) + (cos _dir * _additionalSpeed), \n\t(_vel select 2) // horizontal only\n];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "vector",
                            "description": "`Array` format `Vector3D`"
                        }
                    ],
                    "outline": "object `setVelocity` vector",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setVelocity"
        },
        "configuration": {
            "label": "setVelocity",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the velocity (i.e. speed) vector of the given vehicle relative to its model.\n\n**IMPORTANT**: Since **(Arma 3)**, each velocity component is limited to ±5000 m/s.",
            "examples": [
                {
                    "text": "```sqf\nMyCar setVelocityModelSpace [0, 10, 0]; // Pushes MyCar forward.\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "velocity",
                            "description": "`Array` format `Vector3D` - relative velocity vector"
                        }
                    ],
                    "outline": "vehicle `setVelocityModelSpace` velocity",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setVelocityModelSpace"
        },
        "configuration": {
            "label": "setVelocityModelSpace",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "[[File:setVelocityTransformation.jpg|thumb|right]]\nInterpolates and applies [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL), `velocity`, `vectorDir` and `vectorUp` to the given object based on the interval value.\n\n\nWhen interval is 0 the \"fromXXX\" values are used for the beginning of the interpolation. When interval is 1, the \"toXXX\" values are used for the end of interpolation.\nWhen interval value is in between, interpolated values are used (see diagram below). The interpolation is linear and along straight line between \"from\" and \"to\" positions.\nIf curve is needed, then it should be constructed from multiple straight sections or by dynamically changing value of position params during the interpolation cycle, similar to {{Link|https://en.wikipedia.org/wiki/B%C3%A9zier_curve#Quadratic_curves|Quadratic Curve animation}} (see _Example 3_).\n\n\nThe `velocity` param does not do much in SP, but in MP, provided the velocity component is set correctly, it helps the engine to figure out what the next position of the moving object should be on other clients.\n\n\nThe actual approximate interpolation formula for this command is:\n\n```sqf\n_vecCurrent = _vecFrom vectorAdd (_vecTo vectorDiff _vecFrom vectorMultiply _interval);\n```\n\n\n**NOTE**: \nFor continuous movement this command should be executed each frame while changing the interval value.\nFor example to apply interpolation for 10 seconds one could use the following command to translate 10 seconds into 0..1 interval:\n\n```sqf\n\nt1 = time;\nt2 = time + 10;\n\n```\n\nLater inside some on frame event...\n\n```sqf\n_interval = linearConversion [t1, t2, time, 0, 1];\n```",
            "examples": [
                {
                    "text": "```sqf\n\n_tracker setVelocityTransformation\n[\n\t_currentPos,\n\t_nextPos,\n\t_currentVelocity,\n\t_nextVelocity,\n\t_currentVectorDir,\n\t_nextVectorDir,\n\t_currentVectorUp,\n\t_nextVectorUp,\n\t_interval\n];\n\n```"
                },
                {
                    "text": "Bob on imaginary stairway to heaven:\n\n```sqf\n\nbob = createAgent [\"C_man_1\", player getRelPos [5, 0], [], 0, \"CAN_COLLIDE\"];\nbob switchMove \"ladderCivilUpLoop\";\npos1 = getPosASL bob;\npos2 = pos1 vectorAdd [0,0,0.75];\nbob addEventHandler [\"AnimDone\",\n{\n\tpos1 = pos2;\n\tpos2 = pos2 vectorAdd [0,0,0.75]\n}];\n\nonEachFrame\n{\n\tif (!alive bob) then\n\t{\n\t\tonEachFrame {};\n\t\tbob switchMove \"\";\n\t\tbob removeAllEventHandlers \"AnimDone\";\n\t};\n\tbob setVelocityTransformation [\n\t\tpos1,\n\t\tpos2,\n\t\t[0,0,0],\n\t\t[0,0,0],\n\t\t[0,1,0],\n\t\t[0,1,0],\n\t\t[0,0,1],\n\t\t[0,0,1],\n\t\tmoveTime bob\n\t];\n};\n\n```"
                },
                {
                    "text": "Advanced trickery with curved movement. The curve is controlled with one control point (controlPointASL), just like quadratic Bézier curve:\n\n```sqf\n\ndisableSerialization;\nplayer setDir 0;\ninterval = 0;\n_disp = findDisplay 46 createDisplay \"RscDisplayEmpty\";\n_ctrl = _disp ctrlCreate [\"RscSlider\", -1];\n_ctrl ctrlSetPosition [safeZoneX + 0.1, 1, safeZoneW - 0.2, 0.1];\n_ctrl ctrlSetActiveColor [1,0,0,1];\n_ctrl ctrlCommit 0;\n_ctrl sliderSetPosition 0;\n_ctrl sliderSetRange [0,1];\n_ctrl sliderSetSpeed [0.1,0.5];\n_ctrl ctrlAddEventHandler [\"SliderPosChanged\", {interval = _this select 1}];\nctrlSetFocus _ctrl;\nbox = \"Land_VR_Shape_01_cube_1m_F\" createVehicle [0,0,0];\ncontrolPointASL = AGLToASL (player getRelPos [70, -30]) vectorAdd [0, 0, 30];\nfromPosASL = AGLToASL (player getRelPos [10, -45]);\ntoPosASL = AGLToASL (player getRelPos [10, 45]);\nfromControlPointOffset = controlPointASL vectorDiff fromPosASL;\ntoControlPointOffset = toPosASL vectorDiff controlPointASL;\nonEachFrame\n{\n\thintSilent format [\"Interval: %1\", interval];\n\tbox setVelocityTransformation\n\t[\n\t\tfromPosASL vectorAdd (fromControlPointOffset vectorMultiply interval),\n\t\tcontrolPointASL vectorAdd (toControlPointOffset vectorMultiply interval),\n\t\t[0,0,0],\n\t\t[0,0,0],\n\t\t[0,1,0],\n\t\t[1,0,0],\n\t\t[0,0,1],\n\t\t[0,1,0],\n\t\tinterval\n\t];\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - object to be interpolated"
                        },
                        {
                            "name": "fromPosASL",
                            "description": "`Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) - starting `getPosASL` of the object"
                        },
                        {
                            "name": "toPosASL",
                            "description": "`Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) - ending `getPosASL` of the object"
                        },
                        {
                            "name": "fromVelocity",
                            "description": "`Array` - starting `velocity` of the object"
                        },
                        {
                            "name": "toVelocity",
                            "description": "`Array` - ending `velocity` of the object"
                        },
                        {
                            "name": "fromVectorDir",
                            "description": "`Array` - starting `vectorDir` of the object"
                        },
                        {
                            "name": "toVectorDir",
                            "description": "`Array` - ending `vectorDir` of the object"
                        },
                        {
                            "name": "fromVectorUp",
                            "description": "`Array` - starting `vectorUp` of the object"
                        },
                        {
                            "name": "toVectorUp",
                            "description": "`Array` - ending `vectorUp` of the object"
                        },
                        {
                            "name": "interval",
                            "description": "`Number` - interpolation interval (variable value, normally between 0 and 1)"
                        },
                        {
                            "name": "customCenter",
                            "description": "`Array` - (Optional, default placing point of the model (see `getModelInfo`)) custom center [x, y, z] to which transformation would be applied in model coordinates"
                        }
                    ],
                    "outline": "object `setVelocityTransformation` [fromPosASL, toPosASL, fromVelocity, toVelocity, fromVectorDir, toVectorDir, fromVectorUp, toVectorUp, interval, customCenter]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setVelocityTransformation"
        },
        "configuration": {
            "label": "setVelocityTransformation",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set rendering distance. Setting view distance to <= 0 resets the value to the client's options (set in `**Options → Video → General → Visibility → Overall**`).\n**NOTE**: In previous versions, client's max view distance was limited by the server's view distance.}}\n**IMPORTANT**: \nView distance also defines the maximum distance between a unit and any other unit they can [know about](https://community.bistudio.com/wiki/knowsAbout).\nHigher view distance will involve more AI simulation cycles for every unit, which causes low performance. See [Arma 3: Performance Optimisation](https://community.bistudio.com/wiki/Arma%203%3A%20Performance%20Optimisation).\n\n\n{{{!}} class=\"wikitable\"\n! Game\n! min. scripted\n! min. UI\n! default\n! max. UI\n! max. scripted\n{{!}}-\n{{!}} Arma 3\n{{!}} 200\n{{!}} 500\n{{!}} **1600**\n{{!}} 12000\n{{!}} 40000\n{{!}}-\n{{!}} Arma 2: Operation Arrowhead\n{{!}} 200\n{{!}} 500\n{{!}} **2500**\n{{!}} 10000\n{{!}} 15000\n{{!}}-\n{{!}} Arma 2\n{{!}} 200\n{{!}} 500\n{{!}} **3000**\n{{!}} 10000\n{{!}} 15000\n{{!}}-\n{{!}} Armed Assault\n{{!}} 200\n{{!}} 500\n{{!}} **1200**\n{{!}} 10000\n{{!}} 15000\n{{!}}-\n{{!}} Operation Flashpoint\n{{!}} 500\n{{!}} 500\n{{!}} **900**\n{{!}} 5000\n{{!}} 5000\n{{!}",
            "examples": [
                {
                    "text": "```sqf\nsetViewDistance 2250;\n```"
                },
                {
                    "text": "```sqf\nsetViewDistance -1; // reset view distance in Arma 3\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "distance",
                            "description": "`Number` - distance in metres; {{GVI|arma3|1.00"
                        }
                    ],
                    "outline": "`setViewDistance` distance",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setViewDistance"
        },
        "configuration": {
            "label": "setViewDistance",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets whether or not the object is visible even if the tree is collapsed.\n**NOTE**: Some Old Editor Command",
            "examples": [
                {
                    "text": "```sqf\n_map setVisibleIfTreeCollapsed [\"_unit_0\", true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "[object, visible]",
                            "description": "`Array`"
                        },
                        {
                            "name": "object",
                            "description": "[ EditorObject](https://community.bistudio.com/wiki/Editor%20Object%20)"
                        },
                        {
                            "name": "visible",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "map `setVisibleIfTreeCollapsed` [object, visible]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setVisibleIfTreeCollapsed"
        },
        "configuration": {
            "label": "setVisibleIfTreeCollapsed",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Tell the helicopter engine RPMs to reach the given value within a period of time. The simulation will try to reach the RPMs, but it does not guarantee it will reach the precise value!\n* engine index 0: engine #1\n* engine index 1: engine #2\n* engine index 2: engine #3\n* engine index -1: all engines \n{{Feature|afm}}",
            "examples": [
                {
                    "text": "```sqf\nvehicle player setWantedRPMRTD [2500, 30, 0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "helicopterRTD ",
                            "description": "`ObjectRTD` - helicopter"
                        },
                        {
                            "name": "value ",
                            "description": "`Number` - engine RPMs"
                        },
                        {
                            "name": "time ",
                            "description": "`Number` - time to reach desired RPMs (seconds)"
                        },
                        {
                            "name": "engineIndex ",
                            "description": "`Number` - engine index"
                        }
                    ],
                    "outline": "helicopterRTD `setWantedRPMRTD` [value, time, engineIndex]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setWantedRPMRTD"
        },
        "configuration": {
            "label": "setWantedRPMRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set an object's water filling.",
            "examples": [
                {
                    "text": "```sqf\n\nif (getWaterLeakiness _myCar > 0 && surfaceIsWater getPosASL _myCar) then\n{\n\t_myCar setWaterFillPercentage 1;\n\thint \"I told you not to go in the water!\";\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "obj",
                            "description": "`Object` - object to manipulate"
                        },
                        {
                            "name": "level",
                            "description": "`Number` - water level in range 0..1 (empty to full)"
                        }
                    ],
                    "outline": "obj `setWaterFillPercentage` level",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setWaterFillPercentage"
        },
        "configuration": {
            "label": "setWaterFillPercentage",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set an object's water intake ratio when immersed.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _veh = vehicle player;\nif (surfaceIsWater getPosASL _veh) then\n{\n\t_veh setWaterLeakiness 1;\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "obj",
                            "description": "`Object` - object to manipulate"
                        },
                        {
                            "name": "leakiness",
                            "description": "`Number` - in range 0..1 where 0 is waterproof and 1 is full leak"
                        }
                    ],
                    "outline": "obj `setWaterLeakiness` leakiness",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setWaterLeakiness"
        },
        "configuration": {
            "label": "setWaterLeakiness",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Changes the waves value smoothly during the given time (in seconds). A time of zero means there will be an immediate change.\n\n\n**NOTE**: This command will have no effect (even though the value of `waves` changes) unless `**Manual Override**` option is selected in the editor in the Intel, which is normally off.\n\n\n[[File:setWaves.jpg|left|600px]]",
            "examples": [
                {
                    "text": "```sqf\n180 setWaves .5;\n```"
                },
                {
                    "text": "```sqf\n0 setWaves 1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "time",
                            "description": "`Number`"
                        },
                        {
                            "name": "value",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "time `setWaves` value",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setWaves"
        },
        "configuration": {
            "label": "setWaves",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Switches the unit behaviour when the waypoint becomes active.\n\n\n\n\nPossible values are:\n* \"UNCHANGED\"\n* \"CARELESS\"\n* \"SAFE\"\n* \"AWARE\"\n* \"COMBAT\"\n* \"STEALTH\"\n\nSee the `AIBehaviour` page for details of the effect of this command on AI units.",
            "examples": [
                {
                    "text": "```sqf\n[_grp, 2] setWaypointBehaviour \"AWARE\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Waypoint`"
                        },
                        {
                            "name": "mode",
                            "description": "`String`"
                        }
                    ],
                    "outline": "waypoint `setWaypointBehaviour` mode",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Global Effect",
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/setWaypointBehaviour"
        },
        "configuration": {
            "label": "setWaypointBehaviour",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Changes a group's combat mode when the waypoint becomes active.",
            "examples": [
                {
                    "text": "```sqf\n[_grp, 2] setWaypointCombatMode \"RED\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Array` - format `Waypoint`"
                        },
                        {
                            "name": "mode",
                            "description": "`String` - can be:\n* \"NO CHANGE\"\n* \"BLUE\"\n* \"GREEN\"\n* \"WHITE\"\n* \"YELLOW\"\n* \"RED\""
                        }
                    ],
                    "outline": "waypoint `setWaypointCombatMode` mode",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setWaypointCombatMode"
        },
        "configuration": {
            "label": "setWaypointCombatMode",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "The completion radius allows units to call the waypoint completed once they are inside of the given circle. If the given radius is less than unit’s or vehicle’s configured 'precision' then the latter is used. For example tank precision is 10m, if the given radius is 5m, the final radius will be 10m. For units in `player`’s group there is an additional multiplier x5 to the configured precision. Units that are `fleeing` and are not in `player`'s `Group` will ignore the completion radius and would not be able to complete by proximity until they stop fleeing.",
            "examples": [
                {
                    "text": "```sqf\n[grp, 2] setWaypointCompletionRadius 30;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": " `Array` - format `Waypoint`"
                        },
                        {
                            "name": "radius",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "waypoint `setWaypointCompletionRadius` radius",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setWaypointCompletionRadius"
        },
        "configuration": {
            "label": "setWaypointCompletionRadius",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the description shown in the HUD while the waypoint is active.",
            "examples": [
                {
                    "text": "```sqf\n[_grp, 2] setWaypointDescription \"Move here.\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Array` - format `Waypoint`"
                        },
                        {
                            "name": "text",
                            "description": "`String`"
                        }
                    ],
                    "outline": "waypoint `setWaypointDescription` text",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setWaypointDescription"
        },
        "configuration": {
            "label": "setWaypointDescription",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Forces the behavior of waypoint, disables AUTOCOMBAT.",
            "examples": [
                {
                    "text": "```sqf\n[grp, 2] setWaypointForceBehaviour true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Waypoint` - format [group, index]:\n* group: `Group`\n* index: `Number`"
                        },
                        {
                            "name": "state",
                            "description": "`Boolean` - force or not"
                        }
                    ],
                    "outline": "waypoint `setWaypointForceBehaviour` state",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setWaypointForceBehaviour"
        },
        "configuration": {
            "label": "setWaypointForceBehaviour",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Switches the group formation when the waypoint becomes active.\n\n\n\n\nPossible values are: \n* \"NO CHANGE\"\n* \"COLUMN\"\n* \"STAG COLUMN\"\n* \"WEDGE\"\n* \"ECH LEFT\"\n* \"ECH RIGHT\"\n* \"VEE\"\n* \"LINE\"\n* \"FILE\"\n* \"DIAMOND\"",
            "examples": [
                {
                    "text": "```sqf\n[_grp, 2] setWaypointFormation \"LINE\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Array` - format `Waypoint`"
                        },
                        {
                            "name": "formation",
                            "description": "`String`"
                        }
                    ],
                    "outline": "waypoint `setWaypointFormation` formation",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Global Effect",
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/setWaypointFormation"
        },
        "configuration": {
            "label": "setWaypointFormation",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "For waypoints attached to a house, this defines the target `buildingPos` index.",
            "examples": [
                {
                    "text": "```sqf\n[_grp, 2] setWaypointHousePosition 1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Array` - format `Waypoint`"
                        },
                        {
                            "name": "pos",
                            "description": "`Number` - `buildingPos` index"
                        }
                    ],
                    "outline": "waypoint `setWaypointHousePosition` pos",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setWaypointHousePosition"
        },
        "configuration": {
            "label": "setWaypointHousePosition",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Assigns loiter altitude to the provided waypoint.",
            "examples": [
                {
                    "text": "```sqf\n[_grp, 2] setWaypointLoiterAltitude 100;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Array`"
                        },
                        {
                            "name": "loiterAltitude",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "waypoint `setWaypointLoiterAltitude` loiterAltitude",
                    "returns": "Nothing"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setWaypointLoiterAltitude"
        },
        "configuration": {
            "label": "setWaypointLoiterAltitude",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Assignes loiter radius to waypoint",
            "examples": [
                {
                    "text": "```sqf\n[_grp, 2] setWaypointLoiterRadius 200;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Waypoint`"
                        },
                        {
                            "name": "radius",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "waypoint `setWaypointLoiterRadius` radius",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setWaypointLoiterRadius"
        },
        "configuration": {
            "label": "setWaypointLoiterRadius",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the waypoint loiter type.",
            "examples": [
                {
                    "text": "```sqf\n[_grp, 2] setWaypointLoiterType \"CIRCLE\";\n```"
                },
                {
                    "text": "```sqf\n[_grp, 2] setWaypointLoiterType \"CIRCLE_L\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Waypoint`"
                        },
                        {
                            "name": "type",
                            "description": "`String`"
                        }
                    ],
                    "outline": "waypoint `setWaypointLoiterType` type",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setWaypointLoiterType"
        },
        "configuration": {
            "label": "setWaypointLoiterType",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Changes the waypoint name.",
            "examples": [
                {
                    "text": "```sqf\n[_grp,2] setWaypointName \"myName\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Waypoint`"
                        },
                        {
                            "name": "name",
                            "description": "`String`"
                        }
                    ],
                    "outline": "waypoint `setWaypointName` name",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setWaypointName"
        },
        "configuration": {
            "label": "setWaypointName",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Attempts to move given waypoint to a random position inside a circle with the given center and radius. \nThe waypoint will be placed similar to `**\"NONE\"**` attribute in `setVehiclePosition`, even if the radius is 0, which means it could still be off center. In order to force waypoint to the exact position, similar to `**\"CAN_COLLIDE\"**` attribute, use a negative radius (see _Example 2_).",
            "examples": [
                {
                    "text": "```sqf\n[_grp, 2] setWaypointPosition [position player, 0];\n```"
                },
                {
                    "text": "Exact placement using a negative _radius_ and [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL):\n\n```sqf\n_wp setWaypointPosition [getPosASL player, -1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Array` - format `Waypoint`"
                        },
                        {
                            "name": "center",
                            "description": "`Object` or `Array` format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) or `Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) if _radius_ is negative"
                        },
                        {
                            "name": "radius",
                            "description": "`Number` - random placement radius in meters. Set it to -1 and convert center to [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) for the exact center placement"
                        }
                    ],
                    "outline": "waypoint `setWaypointPosition` [center, radius]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setWaypointPosition"
        },
        "configuration": {
            "label": "setWaypointPosition",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Attaches a script to a scripted waypoint. In early versions of Arma, command consisted of a script name and additional script arguments and the script had to use [SQS Syntax](https://community.bistudio.com/wiki/SQS%20Syntax). The script receives the following arguments in [_this](https://community.bistudio.com/wiki/Magic%20Variables%23this) variable: [group, position, target] + [the optional passed arguments]. The optional arguments are `append`ed to the end of the arguments array.\n**Arma 3**: In Arma 3, _command_ argument can be a reference to .sqf script (it will have to explicitly end with **`**.sqf**`**) or a reference to `**.sqs**` script.",
            "examples": [
                {
                    "text": "```sqf\n[_grp, 2] setWaypointScript \"find.sqs player\";\n```"
                },
                {
                    "text": "```sqf\n[_grp, 2] setWaypointScript \"somescript.sqf [1,2,3,4,5,6,7,8]\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Array` - format `Waypoint`"
                        },
                        {
                            "name": "command",
                            "description": "`String`"
                        }
                    ],
                    "outline": "waypoint `setWaypointScript` command",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setWaypointScript"
        },
        "configuration": {
            "label": "setWaypointScript",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Switches the group speed mode when the waypoint becomes active.\n\n\n\n\nPossible values are:\n* \"UNCHANGED\"\n* \"LIMITED\"\n* \"NORMAL\"\n* \"FULL\"",
            "examples": [
                {
                    "text": "```sqf\n[_grp, 2] setWaypointSpeed \"FULL\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Array` - format `Waypoint`"
                        },
                        {
                            "name": "mode",
                            "description": "`String`"
                        }
                    ],
                    "outline": "waypoint `setWaypointSpeed` mode",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Global Effect",
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/setWaypointSpeed"
        },
        "configuration": {
            "label": "setWaypointSpeed",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "The waypoint is done only when the condition is fulfilled. When the waypoint is done, the statement expression is executed.\n\nWithin the Condition & Statement code string:\n* [this](https://community.bistudio.com/wiki/Magic%20Variables%23this_2) refers to the group leader\n* [thisList](https://community.bistudio.com/wiki/Magic%20Variables%23thisList) refers to the group's units\n**IMPORTANT**:  The **Condition** code is evaluated on the [group owner](https://community.bistudio.com/wiki/groupOwner)'s machine. When condition returns `true`, for some strange reason, the condition is evaluated one more time. The **OnActivation** code is executed **[globally](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality)**, a.k.a on every client! See `Waypoints`.",
            "examples": [
                {
                    "text": "```sqf\n_waypoint setWaypointStatements [\"true\", \"hint 'hello'; hint 'goodbye'\"];\n```"
                },
                {
                    "text": "```sqf\n_waypoint setWaypointStatements [\"true\", \"diag_log ['GroupLeader: ', this]; diag_log ['Units: ', thislist]\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Array` - format `Waypoint`"
                        },
                        {
                            "name": "condition",
                            "description": "`String`"
                        },
                        {
                            "name": "statement",
                            "description": "`String`"
                        }
                    ],
                    "outline": "waypoint `setWaypointStatements` [condition, statement]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setWaypointStatements"
        },
        "configuration": {
            "label": "setWaypointStatements",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Defines the time between condition satisfaction and waypoint finish (randomly from min to max, with an average value mid).",
            "examples": [
                {
                    "text": "```sqf\n[_grp, 2] setWaypointTimeout [5, 10, 6];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Array` - format `Waypoint`"
                        },
                        {
                            "name": "min",
                            "description": "`Number`"
                        },
                        {
                            "name": "mid",
                            "description": "`Number`"
                        },
                        {
                            "name": "max",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "waypoint `setWaypointTimeout` [min, mid, max]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setWaypointTimeout"
        },
        "configuration": {
            "label": "setWaypointTimeout",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the waypoint type of given waypoint. \n\nMore details at `Waypoints`.",
            "examples": [
                {
                    "text": "```sqf\n_myWaypoint setWaypointType \"HOLD\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Array` - format `Waypoint`"
                        },
                        {
                            "name": "type",
                            "description": "`String` - waypoint type. Can be:\n{{Columns|4|\n* `**\"MOVE\"**`\n* `**\"DESTROY\"**`\n* `**\"GETIN\"**`\n* `**\"SAD\"**` _(Seek And Destroy)_\n* `**\"JOIN\"**`\n* `**\"LEADER\"**`\n* `**\"GETOUT\"**`\n* `**\"CYCLE\"**`\n* `**\"LOAD\"**`\n* `**\"UNLOAD\"**`\n* `**\"TR UNLOAD\"**`\n* `**\"HOLD\"**`\n* `**\"SENTRY\"**`\n* `**\"GUARD\"**` <small>(used with GUARDED BY trigger or `createGuardedPoint`)</small>\n* `**\"TALK\"**`\n* `**\"SCRIPTED\"**`\n* `**\"SUPPORT\"**`\n* `**\"GETIN NEAREST\"**`\n* `**\"DISMISS\"**`\n* `**\"LOITER\"**` <small>(Arma 3)</small>\n* {{GVI|arma3|1.34"
                        }
                    ],
                    "outline": "waypoint `setWaypointType` type",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setWaypointType"
        },
        "configuration": {
            "label": "setWaypointType",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the visibility of the given waypoint in 3D HUD view (for map visibility see `showWaypoint`).",
            "examples": [
                {
                    "text": "```sqf\n[grp, 2] setWaypointVisible false;\n```"
                },
                {
                    "text": "```sqf\n[group player, currentWaypoint group player] setWaypointVisible false;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Array` - format `Waypoint`"
                        },
                        {
                            "name": "visible",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "waypoint `setWaypointVisible` visible",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setWaypointVisible"
        },
        "configuration": {
            "label": "setWaypointVisible",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets reloading **phase** on the given weapon's current ammo round.\n**IMPORTANT**: This command does **not** change a weapon's (e.g soldier's rifle) _magazine_ reloading time but changes **the ammo reloading state** before the next round is shot.",
            "examples": [
                {
                    "text": "```sqf\n_success = _vehicle setWeaponReloadingTime [gunner vehicle player, currentMuzzle gunner vehicle player, 0.5];\n```"
                },
                {
                    "text": "Boost RPM:\n\n```sqf\n\nunit addEventHandler [\"Fired\", {\n\t_this # 0 setWeaponReloadingTime [_this # 0, _this # 2, 1/3];\n}];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "gunner",
                            "description": "`Object` - alive and able gunner operating the targeted turret"
                        },
                        {
                            "name": "muzzleName",
                            "description": "`String` - turret's muzzle"
                        },
                        {
                            "name": "reloadTime",
                            "description": "`Number` - in range 0..1 where 0: reload complete, 1: reload started"
                        }
                    ],
                    "outline": "vehicle `setWeaponReloadingTime` [gunner, muzzleName, reloadTime]",
                    "returns": "`Boolean` - `true` if given weapon is found"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setWeaponReloadingTime"
        },
        "configuration": {
            "label": "setWeaponReloadingTime",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets zeroing of given weapon and muzzle for given unit or vehicle.",
            "examples": [
                {
                    "text": "```sqf\nplayer setWeaponZeroing [\"arifle_MX_GL_F\", \"GL_3GL_F\", 8]; // Set zeroing for underbarrel grenade launcher to 400m\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - unit or vehicle"
                        },
                        {
                            "name": "weaponClass",
                            "description": "`String` - class name of weapon"
                        },
                        {
                            "name": "muzzleClass",
                            "description": "`String` - class name of the muzzle"
                        },
                        {
                            "name": "zeroingIndex",
                            "description": "`Number` - zeroing index. See `currentZeroing`"
                        }
                    ],
                    "outline": "object `setWeaponZeroing` [weaponClass, muzzleClass, zeroingIndex]",
                    "returns": "`Boolean` - `true` if successful, otherwise `false` is returned (e.g. weapon, muzzle, or zeroing index is invalid)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setWeaponZeroing"
        },
        "configuration": {
            "label": "setWeaponZeroing",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set current or permanent wind vector.\n**IMPORTANT**:  The effect is global only if it is executed on the server. Wind set locally will sync back to server value in a while.",
            "examples": [
                {
                    "text": "```sqf\nsetWind [10, 10, true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "x",
                            "description": "`Number` - easterly component (in m/s, positive = to the east)"
                        },
                        {
                            "name": "y",
                            "description": "`Number` - northerly component (in m/s, positive = to the north)"
                        },
                        {
                            "name": "forced",
                            "description": "`Boolean` - (Optional, default `false`) set to `true` to lock the wind to constantly blows in set direction"
                        }
                    ],
                    "outline": "`setWind` [x, y, forced]",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/setWind"
        },
        "configuration": {
            "label": "setWind",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Changes the wind direction smoothly.",
            "examples": [
                {
                    "text": "```sqf\n60 setWindDir 180;\n```"
                },
                {
                    "text": "```sqf\nsetWindDir [1, -15];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "time",
                            "description": "`Number` - transition time in seconds. `**0**` will cause the change to be immediate"
                        },
                        {
                            "name": "value",
                            "description": "`Number` - azimuth"
                        }
                    ],
                    "outline": "time `setWindDir` value",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "direction",
                            "description": "`Array` - flat wind direction and strength in format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction)"
                        }
                    ],
                    "outline": "`setWindDir` direction",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Global Effect",
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/setWindDir"
        },
        "configuration": {
            "label": "setWindDir",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set max. wind overall wind changes in time. A time of zero means there will be an immediate change. A wind level of zero is minimal changes and a wind level of one means that wind can change rapidly.",
            "examples": [
                {
                    "text": "```sqf\n1800 setWindForce 0.5;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "time",
                            "description": "`Number`"
                        },
                        {
                            "name": "wind",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "time `setWindForce` wind",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setWindForce"
        },
        "configuration": {
            "label": "setWindForce",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Changes the wind strength smoothly during the given time (in seconds). A time of zero means there will be an immediate change.",
            "examples": [
                {
                    "text": "```sqf\n60 setWindStr 0.8; // set the wind strength to 0.8 gradually over the next 60 seconds\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "time",
                            "description": "`Number`"
                        },
                        {
                            "name": "value",
                            "description": "`Number` - new value in range 0..1"
                        }
                    ],
                    "outline": "time `setWindStr` value",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setWindStr"
        },
        "configuration": {
            "label": "setWindStr",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Set effectivity of wings. {{Feature|afm}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "helicopterRTD",
                            "description": "`ObjectRTD` - helicopter"
                        },
                        {
                            "name": "leftHorizontal",
                            "description": "`Number`"
                        },
                        {
                            "name": "rightHorizontal",
                            "description": "`Number`"
                        },
                        {
                            "name": "vertical",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "helicopterRTD `setWingForceScaleRTD` [leftHorizontal, rightHorizontal, vertical]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setWingForceScaleRTD"
        },
        "configuration": {
            "label": "setWingForceScaleRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets waypoint position.\n**NOTE**: This command is identical to <sqf inline>setWaypointPosition [pos, -1] (see `setWaypointPosition` description for more information).",
            "examples": [
                {
                    "text": "```sqf\n[_groupOne, 1] setWPPos markerPos \"MarkerOne\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Array` format `Waypoint`"
                        },
                        {
                            "name": "pos",
                            "description": "`Array` format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL)"
                        }
                    ],
                    "outline": "waypoint `setWPPos` pos",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/setWPPos"
        },
        "configuration": {
            "label": "setWPPos",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Toggle the drawing of 3D icons.\n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "bool",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "map `show3DIcons` bool",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/show3DIcons"
        },
        "configuration": {
            "label": "show3DIcons",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Shows/hides the whole chat window.",
            "examples": [
                {
                    "text": "```sqf\nshowChat false;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "bool",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "`showChat` bool",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/showChat"
        },
        "configuration": {
            "label": "showChat",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Forces drawing of cinema borders when using custom camera `camCreate`. This is normally used in cutscenes to indicate player has no control.",
            "examples": [
                {
                    "text": "```sqf\nshowCinemaBorder false;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "show",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "`showCinemaBorder` show",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/showCinemaBorder"
        },
        "configuration": {
            "label": "showCinemaBorder",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Create the commanding menu described by the given config class or menu name. When the name is empty, the current menu is hidden.\n\n\nIf commanding menu has \"expression\" set up, the expression will receive the following arguments when user activated the menu item:\n* Local variable `**_target**`: `Object` - Target under the cursor. This works in both 3D and 2D (when cursor is over the unit icon on the map).\n* Local variable `**_pos**`: `Array` - Cursor position.\n* Local variable `**_is3D**`: `Boolean` - `false` if cursor is over the map, otherwise `true`.",
            "examples": [
                {
                    "text": "```sqf\nshowCommandingMenu \"\";\n```"
                },
                {
                    "text": "```sqf\nshowCommandingMenu \"MyClassName\";\n```"
                },
                {
                    "text": "```sqf\nshowCommandingMenu \"#USER:Tag_Menu_myMenu_0\";\n```"
                },
                {
                    "text": "```sqf\nshowCommandingMenu \"RscMainMenu\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "name",
                            "description": "`String` - class name or user menu name (with \"#USER:\" prefix and \"_#\" page number suffix, where # is the page number starting with 0)."
                        }
                    ],
                    "outline": "`showCommandingMenu` name",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/showCommandingMenu"
        },
        "configuration": {
            "label": "showCommandingMenu",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Shows or hides the compass on the map screen, if enabled for the mission and you possess the item. (default `true`)",
            "examples": [
                {
                    "text": "```sqf\nshowCompass false;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "show",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "`showCompass` show",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/showCompass"
        },
        "configuration": {
            "label": "showCompass",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Hides or shows compass in curator interface.",
            "examples": [
                {
                    "text": "```sqf\nshowCuratorCompass true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "bool",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "`showCuratorCompass` bool",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/showCuratorCompass"
        },
        "configuration": {
            "label": "showCuratorCompass",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Shows or hides the GPS receiver on the map screen, if enabled for the mission and you possess the item. (default `false`). **Arma 3**: This command does nothing in Arma 3. Use the command `openGPS` that is available since v2.04.",
            "examples": [
                {
                    "text": "```sqf\nshowGPS true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "show",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "`showGPS` show",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/showGPS"
        },
        "configuration": {
            "label": "showGPS",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enable / disable showing of HUD. Defines visibility of weapon crosshair and any informational tags that appear when pointing the weapon at an object as well as availability of the default action menu. Unfortunately, it also hides icons drawn with `drawIcon3D`.\n**Arma 3**: \n**Since Arma 3 v1.50** there is a Description.ext's [[Description.ext#showHUD|showHUD[]<nowiki/>]] array param that is identical in format to the extended `showHUD` command.\nWhen present, it will disable `showHUD` command entirely, allowing mission makers to permanently alter visibility of some HUD elements.\n\n**Since Arma 3 v2.04** it is possible to force drawing of `drawIcon3D` icons when HUD is hidden.\nThe icons will also show when custom camera is [created](https://community.bistudio.com/wiki/camCreate) and the view is switched to it via `switchCamera` or `cameraEffect` provided `cameraEffectEnableHUD` is enabled.\nFor more information see `drawIcon3D`.",
            "examples": [
                {
                    "text": "```sqf\nshowHUD false;\n```"
                },
                {
                    "text": "Hide vehicle radar and compass:\n\n```sqf\n\nshowHUD [\n\ttrue, // scriptedHUD\n\ttrue, // info\n\ttrue, // radar\n\ttrue, // compass\n\ttrue, // direction\n\ttrue, // menu\n\ttrue, // group\n\ttrue, // cursors\n\ttrue, // panels\n\ttrue, // kills\n\ttrue  // showIcon3D\n];\n\n```"
                },
                {
                    "text": "Check if HUD visibility is hardcoded in mission config and `showHUD` command is overridden:\n\n```sqf\nprivate _disabledShowHUD = isArray (missionConfigFile >> \"showHUD\");\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "enable",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "`showHUD` enable",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "scriptedHUD",
                            "description": "`Boolean` - show scripted HUD such as weapon crosshair, action menu and overlays created with `cutRsc` and `titleRsc`. Same as `showHUD`'s first syntax"
                        },
                        {
                            "name": "info",
                            "description": "`Boolean` - (Optional, default `true`) show vehicle, soldier and weapon info"
                        },
                        {
                            "name": "radar",
                            "description": "`Boolean` - (Optional, default `true`) show vehicle radar"
                        },
                        {
                            "name": "compass",
                            "description": "`Boolean` - (Optional, default `true`) show vehicle compass"
                        },
                        {
                            "name": "direction",
                            "description": "`Boolean` - (Optional, default `true`) show tank direction indicator. Not present in vanilla Arma 3"
                        },
                        {
                            "name": "menu",
                            "description": "`Boolean` - (Optional, default `true`) show commanding menu (HC related menus)"
                        },
                        {
                            "name": "group",
                            "description": "`Boolean` - (Optional, default `true`) show group info bar (Squad leader info bar)"
                        },
                        {
                            "name": "cursors",
                            "description": "`Boolean` - (Optional, default `true`) show HUD weapon cursors (connected with scripted HUD)"
                        },
                        {
                            "name": "panels",
                            "description": "`Boolean` - (Optional, default `true`) show [Arma 3: Custom Info](https://community.bistudio.com/wiki/Arma%203%3A%20Custom%20Info)"
                        },
                        {
                            "name": "kills",
                            "description": "`Boolean` - (Optional, default `true`) show \"x killed by y\" `systemChat` messages\n<!--"
                        },
                        {
                            "name": "showIcon3D",
                            "description": "`Boolean` (Optional, default `false`) - show icons drawn with `drawIcon3D` even when the HUD is hidden"
                        }
                    ],
                    "outline": "`showHUD` [scriptedHUD, info, radar, compass, direction, menu, group, cursors, panels, kills, showIcon3D]",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/showHUD"
        },
        "configuration": {
            "label": "showHUD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Show/hide map legend. \n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "bool",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "map `showLegend` bool",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/showLegend"
        },
        "configuration": {
            "label": "showLegend",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enable Map (default `true`)",
            "examples": [
                {
                    "text": "```sqf\nshowMap false;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "show",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "`showMap` show",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/showMap"
        },
        "configuration": {
            "label": "showMap",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks whether the player has the artillery computer currently open.",
            "examples": [
                {
                    "text": "```sqf\nif (shownArtilleryComputer) then { hint \"Artillery Computer shown on screen\"; };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**shownArtilleryComputer**",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/shownArtilleryComputer"
        },
        "configuration": {
            "label": "shownArtilleryComputer",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if chat window is enabled. Chat window can be disabled with `showChat` command.",
            "examples": [
                {
                    "text": "```sqf\n_bool = shownChat;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**shownChat**",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/shownChat"
        },
        "configuration": {
            "label": "shownChat",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks if client has Compass enabled in [[Description.ext|description.ext]] (_showCompass_ param) or force enabled with `showCompass` command.",
            "examples": [
                {
                    "text": "```sqf\nif (shownCompass) then {hint \"You have Compass enabled\"};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**shownCompass**",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/shownCompass"
        },
        "configuration": {
            "label": "shownCompass",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns true if compass is shown.",
            "examples": [
                {
                    "text": "```sqf\n_isShown = shownCuratorCompass;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`shownCuratorCompass`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/shownCuratorCompass"
        },
        "configuration": {
            "label": "shownCuratorCompass",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Show the add editor object dialog,type is editor object type,class is,class definition to automatically select,side filters by a certain,side,pos is position to create the object.  \n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "[type,class,side,position]",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "map `showNewEditorObject` [type,class,side,position]",
                    "returns": "`Anything`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/showNewEditorObject"
        },
        "configuration": {
            "label": "showNewEditorObject",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks if client has GPS receiver enabled in [[Description.ext|description.ext]] (_showGPS_ param) or force enabled with `showGPS` command.",
            "examples": [
                {
                    "text": "```sqf\nif (shownGPS) then { hint \"You have the GPS receiver enabled\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`shownGPS`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/shownGPS"
        },
        "configuration": {
            "label": "shownGPS",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array of `Boolean`s corresponding to the visibility of various HUD elements (see extended `showHUD`).",
            "examples": [
                {
                    "text": "```sqf\n_hudStatus = shownHUD;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**shownHUD**",
                    "returns": "`Array` of `Boolean`s in format [hud, info, radar, compass, direction, menu, group, cursors, panels, kills, icon3d]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/shownHUD"
        },
        "configuration": {
            "label": "shownHUD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks if client has Map enabled in [[Description.ext|description.ext]] (_showMap_ param) or force enabled with `showMap` command.",
            "examples": [
                {
                    "text": "```sqf\nif (shownMap) then {hint \"You have Map enabled\"};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**shownMap**",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/shownMap"
        },
        "configuration": {
            "label": "shownMap",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks if client has Notepad enabled.",
            "examples": [
                {
                    "text": "```sqf\nif (shownPad) then {hint \"You have Notepad enabled.\"};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**shownPad**",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/shownPad"
        },
        "configuration": {
            "label": "shownPad",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check if player has Radio enabled.\n**NOTE**: This command exists in Arma 3 but doesn't do much",
            "examples": [
                {
                    "text": "```sqf\nif (shownRadio) then {hint \"You have Radio enabled.\"};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**shownRadio**",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/shownRadio"
        },
        "configuration": {
            "label": "shownRadio",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the state of the score table set with `showScoretable` command.",
            "examples": [
                {
                    "text": "```sqf\n_state = shownScoretable;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`shownScoretable`",
                    "returns": "`Number` - 0: Force hidden, 1: Force shown, -1: Default"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/shownScoretable"
        },
        "configuration": {
            "label": "shownScoretable",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "A getter for `showSubtitles`.",
            "examples": [
                {
                    "text": "```sqf\nprivate _setToShow = shownSubtitles;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`shownSubtitles`",
                    "returns": "`Boolean` - returns `true` if subtitles are set to show"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/shownSubtitles"
        },
        "configuration": {
            "label": "shownSubtitles",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if video feed transmitted from UAV is shown. A getter for `showUAVFeed`.",
            "examples": [
                {
                    "text": "```sqf\n_bool = shownUAVFeed;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`shownUAVFeed`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/shownUAVFeed"
        },
        "configuration": {
            "label": "shownUAVFeed",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check if player has ID card enabled. Obsolete command.",
            "examples": [
                {
                    "text": "```sqf\nhint format [\"Your ID is %1\", [\"off\", \"on\"] select shownWarrant];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`shownWarrant`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/shownWarrant"
        },
        "configuration": {
            "label": "shownWarrant",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks if client has Watch enabled in [[Description.ext|description.ext]] (_showWatch_ param) or force enabled with `showWatch` command.",
            "examples": [
                {
                    "text": "```sqf\nif (shownWatch) then {hint \"You have Watch enabled\"};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**shownWatch**",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/shownWatch"
        },
        "configuration": {
            "label": "shownWatch",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Shows or hides the notebook on the map screen, if enabled for the mission. (default `true`). It is no longer relevant to Arma 2.",
            "examples": [
                {
                    "text": "```sqf\nshowPad false;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "show",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "`showPad` show",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/showPad"
        },
        "configuration": {
            "label": "showPad",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Shows or hides the radio on the map screen, if enabled for the mission and you possess the item. (default `true`).\n**Arma 3**: This command does nothing in Arma 3.",
            "examples": [
                {
                    "text": "```sqf\nshowRadio false;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "show",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "`showRadio` show",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/showRadio"
        },
        "configuration": {
            "label": "showRadio",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Forces the score table to be shown, hidden or reset to default functionality. Forcing score table will make it show even in SP. When score table is forced opened it cannot be  closed manually, when it is force closed, it cannot be opened manually.",
            "examples": [
                {
                    "text": "```sqf\nshowScoretable 1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "force",
                            "description": "`Number` - 1 to force visible, 0 to force invisible, -1 default"
                        }
                    ],
                    "outline": "`showScoretable` force",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/showScoretable"
        },
        "configuration": {
            "label": "showScoretable",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enables / disables showing of subtitles in a chat. Only scripted/engine chatter is affected, player manual chat is unaffected. Returns the previous state.",
            "examples": [
                {
                    "text": "```sqf\nshowSubtitles false;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "enable",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "`showSubtitles` enable",
                    "returns": "`Boolean`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/showSubtitles"
        },
        "configuration": {
            "label": "showSubtitles",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Shows/hides video feed transmitted from UAV in [its custom info panel](https://community.bistudio.com/wiki/Arma%203%3A%20Custom%20Info).",
            "examples": [
                {
                    "text": "```sqf\nshowUAVFeed true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "show",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "`showUAVFeed` show",
                    "returns": "`Boolean` - always `true` unless error"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/showUAVFeed"
        },
        "configuration": {
            "label": "showUAVFeed",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enable ID card. **WARNING**: Obsolete command.",
            "examples": [
                {
                    "text": "```sqf\nshowWarrant true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "show",
                            "description": "`Boolean` - (default `false`)"
                        }
                    ],
                    "outline": "`showWarrant` show",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/showWarrant"
        },
        "configuration": {
            "label": "showWarrant",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Shows or hides the watch on the map screen, if enabled for the mission and you possess the item. (default `true`)",
            "examples": [
                {
                    "text": "```sqf\nshowWatch false;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "show",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "`showWatch` show",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/showWatch"
        },
        "configuration": {
            "label": "showWatch",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Defines how waypoints are shown to the player in map view. For 3D HUD visibility see `setWaypointVisible`.",
            "examples": [
                {
                    "text": "```sqf\n[_grp, 2] showWaypoint \"ALWAYS\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Waypoint`"
                        },
                        {
                            "name": "show",
                            "description": "`String` - possible values are:\n* \"NEVER\" - Never show\n* \"EASY\" - Show only if `**showCadetWP**` is enabled in global [difficulty](https://community.bistudio.com/wiki/Arma%203%3A%20Difficulty%20Settings).\n* \"ALWAYS\" - Always show"
                        }
                    ],
                    "outline": "waypoint `showWaypoint` show",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/showWaypoint"
        },
        "configuration": {
            "label": "showWaypoint",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Shows/Hides task HUD markers and waypoints that will fade out in time. Dependable on difficulty settings.",
            "examples": [
                {
                    "text": "```sqf\nshowWaypoints true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "enabled",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "`showWaypoints` enabled",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/showWaypoints"
        },
        "configuration": {
            "label": "showWaypoints",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the side of a unit, vehicle, object or location.\n* side of a renegade soldier is `sideEnemy`\n* side of an empty vehicle is `civilian`\n* side of a crewed vehicle is, if present, commander's > gunner's > driver's or > cargo's side, in this order\n* side of a captive or dead unit is `civilian`. Use <sqf inline>side group _unit to get the underlying side (see _Example 2_)\n* you can use `playerSide` to know the real player's side\n\n**NOTE**: \nConverting a side to string will **not** always return the side command text: e.g <sqf inline>str resistance; // returns \"GUER\".\n\nSee `Side` page to see the return value of all side commands.",
            "examples": [
                {
                    "text": "```sqf\nif (side player == west) then { hint \"Player is on the West side\" };\n```"
                },
                {
                    "text": "```sqf\n_sideAlsoWorkingForDead = side group _deadUnit;\n```"
                },
                {
                    "text": "```sqf\n_sideLocation = side myLocation;\n```"
                },
                {
                    "text": "```sqf\nif (side player != playerSide) then { hint \"player is renegade or dead\"; };\n```"
                },
                {
                    "text": "Check the `side` of the vehicle:\n\n```sqf\n_vehicleSide = side group _vehicle; // sideUnknown (CIV for Arma 3) if empty or dead crew, otherwise the appropriate side\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Object`, `Group` or `Location`"
                        }
                    ],
                    "outline": "`side` target",
                    "returns": "`Side`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/side"
        },
        "configuration": {
            "label": "side",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns side of ambient life, for example ambient life placed in [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor).",
            "examples": [
                {
                    "text": "```sqf\n_sideAmbientLife = sideAmbientLife;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`sideAmbientLife`",
                    "returns": "`Side`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/sideAmbientLife"
        },
        "configuration": {
            "label": "sideAmbientLife",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Types text to the side radio channel by the specified unit. \n**IMPORTANT**: The unit must have an [assigned](https://community.bistudio.com/wiki/assignItem) radio item (such as **\"ItemRadio\"**) to see or transmit the messages. A radio item must have the property ```cpp\" inline\nsimulation = \"ItemRadio\";\n``` in its [[CfgWeapons_Config_Reference#simulation.3D.22Weapon.22|CfgWeapons config]].",
            "examples": [
                {
                    "text": "```sqf\n_soldierOne sideChat \"Show this text\";\n```"
                },
                {
                    "text": "```sqf\n[west, \"HQ\"] sideChat \"Hi there\";\n```"
                },
                {
                    "text": "[[File:xChat.jpg|right]]\n\n```sqf\n\ndriver vehicle player sideChat \"sideChat\";\ndriver vehicle player globalChat \"globalChat\";\ndriver vehicle player groupChat \"groupChat\";\nvehicle player vehicleChat \"vehicleChat\";\ndriver vehicle player commandChat \"commandChat\";\ndriver vehicle player customChat [1, \"customChat\"];\nsystemChat \"systemChat\";\n\n```"
                },
                {
                    "text": "```sqf\n[[blufor, \"BLU\"], \"message\"] remoteExec [\"sideChat\"]; // shows the message to all players\n```"
                },
                {
                    "text": "```sqf\n\nunit setGroupId [\"Cpt. Miller\"]; // changes the group's callsign\nunit sideChat \"Hello ladies!\";\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit transmitting message"
                        },
                        {
                            "name": "chatText",
                            "description": "`String` - message to transmit"
                        }
                    ],
                    "outline": "unit `sideChat` chatText",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "side",
                            "description": "`Side` - side to which the message will be seen"
                        },
                        {
                            "name": "identity",
                            "description": "`String` - class name of one of the identities in CfgHQIdentities. Possible identities in Arma 3 are:\n{{Columns|4|\n* \"Base\"\n* \"HQ\"\n* \"PAPA_BEAR\"\n* \"AirBase\"\n* \"BLU\"\n* \"OPF\"\n* \"IND\"\n* \"IND_G\"\n}}"
                        },
                        {
                            "name": "chatText",
                            "description": "`String` - message to transmit"
                        }
                    ],
                    "outline": "[side, identity] `sideChat` chatText",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/sideChat"
        },
        "configuration": {
            "label": "sideChat",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns empty side, for example static buildings in [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor).",
            "examples": [
                {
                    "text": "```sqf\n_sideEmpty = sideEmpty;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**sideEmpty**",
                    "returns": "`Side`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/sideEmpty"
        },
        "configuration": {
            "label": "sideEmpty",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "The enemy [side](https://community.bistudio.com/wiki/Side) which is used for renegades. Units of this side are hostile to everyone.\n* To join `sideEnemy`, you can attack members of your own side or use `addRating`.\n* When below a `rating` of -2000 units switch automatically to this side.",
            "examples": [
                {
                    "text": "```sqf\nif (side player == sideEnemy) then\n{\n\thint \"We've got a renegade!\";\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`sideEnemy`",
                    "returns": "`Side`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/sideEnemy"
        },
        "configuration": {
            "label": "sideEnemy",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "The Friendly side - friendly to all, see [Side Relations](https://community.bistudio.com/wiki/Side%20Relations).",
            "examples": [
                {
                    "text": "```sqf\nif (side player == sideFriendly) then { hint \"I feel friendly today!\"; };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`sideFriendly`",
                    "returns": "`Side`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/sideFriendly"
        },
        "configuration": {
            "label": "sideFriendly",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "The Logic [side](https://community.bistudio.com/wiki/Side). Side of [Game Logic](https://community.bistudio.com/wiki/Game%20Logic)s and `Modules`.",
            "examples": [
                {
                    "text": "```sqf\n\nif (side _obj == sideLogic) then\n{\n\thint \"It is a logic!\";\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`sideLogic`",
                    "returns": "`Side`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/sideLogic"
        },
        "configuration": {
            "label": "sideLogic",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sends the audio message to the side radio channel. The message is defined in CfgRadio in the [[Description.ext|description.ext]] file or config radio protocol. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see `remoteExec`).\n**IMPORTANT**: The unit must have an [assigned](https://community.bistudio.com/wiki/assignItem) radio item (such as **\"ItemRadio\"**) to see or transmit the messages. A radio item must have the property <syntaxhighlight lang=\"cpp\" inline>simulation = \"ItemRadio\";</syntaxhighlight> in its [[CfgWeapons_Config_Reference#simulation.3D.22Weapon.22|CfgWeapons config]].\n**NOTE**: When transmitting unit gets killed, transmission will be interrupted. However when receiving unit gets killed, the transmission continues to play.",
            "examples": [
                {
                    "text": "```sqf\n_soldierOne sideRadio \"messageOne\";\n```"
                },
                {
                    "text": "```sqf\nplayer sideRadio configName selectRandom (\"true\" configClasses (configFile >> \"CfgRadio\"));\n```"
                },
                {
                    "text": "```sqf\n[west, \"Base\"] sideRadio configName selectRandom (\"true\" configClasses (configFile >> \"CfgRadio\"));\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit to transmit"
                        },
                        {
                            "name": "radioName",
                            "description": "`String` - class name from `**CfgRadio**`"
                        }
                    ],
                    "outline": "unit `sideRadio` radioName",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "side",
                            "description": "`Side` - side to which the transmission will be played"
                        },
                        {
                            "name": "identity",
                            "description": "`String` - class name of one of the identities in CfgHQIdentities. Possible identities in Arma 3 are:\n{{Columns|4|\n* \"Base\"\n* \"HQ\"\n* \"PAPA_BEAR\"\n* \"AirBase\"\n* \"BLU\"\n* \"OPF\"\n* \"IND\"\n* \"IND_G\"\n}}"
                        },
                        {
                            "name": "radioName",
                            "description": "`String` - class name from `**CfgRadio**`"
                        }
                    ],
                    "outline": "[side, identity] `sideRadio` radioName",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/sideRadio"
        },
        "configuration": {
            "label": "sideRadio",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "The unknown [side](https://community.bistudio.com/wiki/Side).\n\nUsed when the side of a unit is unknown, e.g. for spotted targets with insufficient information.",
            "examples": [
                {
                    "text": "```sqf\n//soldier1 and soldier2 of different sides and out of sight\nsoldier1 reveal soldier2;\nhint str (soldier1 nearTargets 1000);\n//returns: [[[1557.96,5047.4,1.32402],\"SoldierWB\",UNKNOWN,0.0155183,soldier2,5]]\nsoldier1 reveal [soldier2,1.5];\n//returns: [[[1556.52,5050.08,1.32402],\"SoldierWB\",WEST,0.0211193,soldier2,5]]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**sideUnknown**",
                    "returns": "`Side`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/sideUnknown"
        },
        "configuration": {
            "label": "sideUnknown",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return all simple tasks assigned to given unit.",
            "examples": [
                {
                    "text": "```sqf\n_tasks = simpleTasks player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`simpleTasks` unit",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/simpleTasks"
        },
        "configuration": {
            "label": "simpleTasks",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check if the entity has enabled simulation. \n\n**IMPORTANT**:  The entity could be [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality) or remote but the result returned by this command will be for the entity simulation set up locally on the client that executed the command.\nSee `enableSimulation` for more info.",
            "examples": [
                {
                    "text": "```sqf\nsimulationEnabled player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`simulationEnabled` entity",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/simulationEnabled"
        },
        "configuration": {
            "label": "simulationEnabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns density of clouds at given position.",
            "examples": [
                {
                    "text": "```sqf\nsimulCloudDensity getPos player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "pos",
                            "description": "`Position`"
                        }
                    ],
                    "outline": "`simulCloudDensity` pos",
                    "returns": "* `Number` - density (0-1)\n* `Nothing` - If arguments are incorrect\n* `Boolean` - Returns `false` if simulWeather is disabled"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/simulCloudDensity"
        },
        "configuration": {
            "label": "simulCloudDensity",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns clouds occlusion between two given points.",
            "examples": [
                {
                    "text": "```sqf\nprivate _posPlayer = getPos player;\nprivate _posAbovePlayer = +_posPlayer; _posAbovePlayer set [2,200];\nsimulCloudOcclusion [_posPlayer, _posAbovePlayer];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "pos1",
                            "description": "`Position`"
                        },
                        {
                            "name": "pos2",
                            "description": "`Position`"
                        }
                    ],
                    "outline": "`simulCloudOcclusion` [pos1, pos2]",
                    "returns": "* `Number` - (0 - no clouds, 1 - full clouds)\n* `Nothing` - If arguments are incorrect\n* `Boolean` - Returns `false` if simulWeather is disabled"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/simulCloudOcclusion"
        },
        "configuration": {
            "label": "simulCloudOcclusion",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns if given position is in clouds.",
            "examples": [
                {
                    "text": "```sqf\nsimulInClouds getPos player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "pos",
                            "description": "`Position`"
                        }
                    ],
                    "outline": "`simulInClouds` pos",
                    "returns": "* `Boolean` -  `true` if given position is in clouds\n* `Nothing` - If given arguments are incorrect"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/simulInClouds"
        },
        "configuration": {
            "label": "simulInClouds",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets simul cloud cover. This command does not affect overcast value. **WARNING**: This command is no longer available.",
            "examples": [
                {
                    "text": "```sqf\nsimulSetHumidity 1;\n```"
                },
                {
                    "text": "When combined with `setOvercast` 1 this command will also start random strength rain.\n```sqf\nskipTime -24;\n86400 setOvercast 1;\nskipTime 24;\nsimulSetHumidity 1;\n```\nCreates rainy looking weather, followed by thunder in about 10 seconds and rain in about 20."
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "humidity",
                            "description": "`Number` - 0 (min): clear sky, 1 (max): heavy cloud cover"
                        }
                    ],
                    "outline": "`simulSetHumidity` humidity",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/simulSetHumidity"
        },
        "configuration": {
            "label": "simulSetHumidity",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Synchronizes Simul Weather with Arma weather, generates all keyframes.",
            "examples": [
                {
                    "text": "```sqf\nsimulWeatherSync;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`simulWeatherSync`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/simulWeatherSync"
        },
        "configuration": {
            "label": "simulWeatherSync",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sine of x.",
            "examples": [
                {
                    "text": "```sqf\n_sine = sin 30; // result is 0.5\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "x",
                            "description": "`Number` - value in degree"
                        }
                    ],
                    "outline": "`sin` x",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/sin"
        },
        "configuration": {
            "label": "sin",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a location's size.",
            "examples": [
                {
                    "text": "```sqf\n_locSize = size myLocation;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "location",
                            "description": "`Location`"
                        }
                    ],
                    "outline": "`size` location",
                    "returns": "`Array` of `Number`s in format [x,y] - meters"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/size"
        },
        "configuration": {
            "label": "size",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the diameter of bounding sphere of the object of given classname in meters. If you need to estimate the size of the object more precisely, use `boundingBox` or `boundingBoxReal`.\n**IMPORTANT**:  At least one object of the given classname has to be present in the current mission otherwise zero will be returned.",
            "examples": [
                {
                    "text": "```sqf\n_dimension = sizeOf \"M1Abrams\"; // Returns 10.7833\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "classname",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`sizeOf` classname",
                    "returns": "`Number` - size returned is usually bigger than the biggest size of the object along any of the axes. For example if object is 10 x 4 x 5 the `sizeOf` value returned expected to be around 10."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/sizeOf"
        },
        "configuration": {
            "label": "sizeOf",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns current skill of a unit, in range between 0 to 1, 1 being the highest level of skill.\n\n**NOTE**: \n* Skill of AI units set via the slider in unit placement screen varies from 0.2 to 1.0.\n* If the **superAI** difficulty settings is enabled, all units have skill of 1.0 regardless of the skill slider.",
            "examples": [
                {
                    "text": "```sqf\n_skill = skill unit1;\n```"
                },
                {
                    "text": "```sqf\n_myCourage = player skill \"courage\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`skill` unit",
                    "returns": "`Number`"
                },
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "skillName",
                            "description": "`String` - possible values are:\n{{Columns|5|\n* \"aimingAccuracy\"\n* \"aimingShake\"\n* \"aimingSpeed\"\n* \"endurance\"\n* \"spotDistance\"\n* \"spotTime\"\n* \"courage\"\n* \"reloadSpeed\"\n* \"commanding\"\n* \"general\"\n}}"
                        }
                    ],
                    "outline": "unit `skill` skillName",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/skill"
        },
        "configuration": {
            "label": "skill",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns final, recalculated sub skill value of given unit. (with regard to AI Level coefficient (Difficulty settings)).",
            "examples": [
                {
                    "text": "```sqf\n_unitTrueCourage = unit1 skillFinal \"courage\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "skillName",
                            "description": "`String` - see [[AI Sub-skills|sub-skill]]. Possible values are:\n* \"aimingAccuracy\"\n* \"aimingShake\"\n* \"aimingSpeed\"\n* \"endurance\" (Has no effect in Arma 3)\n* \"spotDistance\"\n* \"spotTime\"\n* \"courage\"\n* \"reloadSpeed\"\n* \"commanding\"\n* \"general\""
                        }
                    ],
                    "outline": "unit `skillFinal` skillName",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/skillFinal"
        },
        "configuration": {
            "label": "skillFinal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Jumps the specified number of hours forward or backward.\nThe time of day and tides are adjusted, but no changes are made to any units. If present, the lower level of clouds instantly jump to the position they would be in if time had passed normally.",
            "examples": [
                {
                    "text": "```sqf\nskipTime 5;\n```"
                },
                {
                    "text": "```sqf\nskipTime (5/60); // be sure to use parentheses, otherwise here (skipTime 5)/60 will happen\n```"
                },
                {
                    "text": "```sqf\n\nwhile {true} do \n{\n\tskipTime 0.00333;\n\tsleep 0.1; // smooth time transition\n};\n\n```"
                },
                {
                    "text": "```sqf\nskipTime ((_timeToSkipTo - dayTime + 24) % 24); // skip forward to a specific time, irrespective of the current mission time\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "duration",
                            "description": "`Number` - hours to skip. A positive value will create a forward time jump, a negative value will jump backwards."
                        }
                    ],
                    "outline": "`skipTime` duration",
                    "returns": "`Nothing`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/skipTime"
        },
        "configuration": {
            "label": "skipTime",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Suspends code execution for given time in seconds. The sleep precision is given by a framerate, the delay given is the minimal delay expected. Must be called inside of a context which is interruptible, i.e. a [script](https://community.bistudio.com/wiki/Script%20Handle) executed by `execVM` or `spawn`.\n**NOTE**: \n* this command will suspend the code for **at least** the given amount of time, and can be way more if the [script scheduler](https://community.bistudio.com/wiki/Scheduler) is busy.\n* this command will suspend the script as the game gets paused in single player (and will resume with it). To avoid this, use `uiSleep`.",
            "examples": [
                {
                    "text": "```sqf\n\n0 spawn {\n\tsleep 5;\n\thint \"after (at least) 5 seconds...\";\n};\n\n```"
                },
                {
                    "text": "```sqf\n\nsleep 5 + random 10;\t// incorrect - will only sleep for 5 seconds, as it will be interpreted as (sleep 5) (+(random 10))\nsleep (5 + random 10);\t// correct\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "delay",
                            "description": "`Number` - in seconds. Negative values will not be considered."
                        }
                    ],
                    "outline": "`sleep` delay",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/sleep"
        },
        "configuration": {
            "label": "sleep",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "Returns current thumb position of `CT_SLIDER` or `CT_XSLIDER` with given idc of topmost user `dialog`.",
            "examples": [
                {
                    "text": "```sqf\n_slidepos1 = sliderPosition 105;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`sliderPosition` idc",
                    "returns": "`Number`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`sliderPosition` control",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/sliderPosition"
        },
        "configuration": {
            "label": "sliderPosition",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns limits of `CT_SLIDER` or `CT_XSLIDER`.",
            "examples": [
                {
                    "text": "```sqf\nsliderRange _ctrlSlider params [\"_minValue\", \"_maxValue\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - idc of the control"
                        }
                    ],
                    "outline": "`sliderRange` idc",
                    "returns": "`Array` in format  [minValue, maxValue]"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`sliderRange` control",
                    "returns": "`Array` in format  [minValue, maxValue]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/sliderRange"
        },
        "configuration": {
            "label": "sliderRange",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets current thumb position of `CT_SLIDER` or `CT_XSLIDER`.",
            "examples": [
                {
                    "text": "```sqf\n_ctrlSlider sliderSetPosition 50;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - idc of the control"
                        },
                        {
                            "name": "pos",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`sliderSetPosition` [idc, pos]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "pos",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "control `sliderSetPosition` pos",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/sliderSetPosition"
        },
        "configuration": {
            "label": "sliderSetPosition",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets limits of `CT_SLIDER` or `CT_XSLIDER`.",
            "examples": [
                {
                    "text": "```sqf\nsliderSetRange [101, 0, 100];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - idc of the control"
                        },
                        {
                            "name": "min",
                            "description": "`Number` - minimal value"
                        },
                        {
                            "name": "max",
                            "description": "`Number` - maximum value"
                        }
                    ],
                    "outline": "`sliderSetRange` [idc, min, max]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "min",
                            "description": "`Number` - minimal value"
                        },
                        {
                            "name": "max",
                            "description": "`Number` - maximum value"
                        }
                    ],
                    "outline": "control `sliderSetRange` [min, max]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/sliderSetRange"
        },
        "configuration": {
            "label": "sliderSetRange",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets slider line step and page step delta amount as well as optional step amount of `CT_SLIDER` or `CT_XSLIDER` with given idc of topmost user `dialog`. \n* Click to arrow - move by line\n* Click to scale outside thumb - move by page.\n\n**NOTE**: `CT_XSLIDER` does not use `page` param, it acts as scrollbar when clicked on the bar. It also can only be horizontal.",
            "examples": [
                {
                    "text": "```sqf\nsliderSetSpeed [101, 0.5, 2];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - control's idc"
                        },
                        {
                            "name": "line",
                            "description": "`Number` - value delta to move the slider when clicking on the outer arrows"
                        },
                        {
                            "name": "page",
                            "description": "`Number` - value delta to move the slider when clicking inside the slider bar"
                        },
                        {
                            "name": "step",
                            "description": "`Number` - (Optional, default 0) slider step"
                        }
                    ],
                    "outline": "`sliderSetSpeed` [idc, line, page, step]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "line",
                            "description": "`Number` - value delta to move the slider when clicking on the outer arrows"
                        },
                        {
                            "name": "page",
                            "description": "`Number` - value delta to move the slider when clicking inside the slider bar"
                        },
                        {
                            "name": "step",
                            "description": "`Number` - (Optional, default 0) slider step"
                        }
                    ],
                    "outline": "control `sliderSetSpeed` [line, page, step]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/sliderSetSpeed"
        },
        "configuration": {
            "label": "sliderSetSpeed",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns slider step value for line and page movement of `CT_SLIDER` or `CT_XSLIDER`.",
            "examples": [
                {
                    "text": "```sqf\nsliderSpeed _ctrlSlider params [\"_min\", \"_max\"];\n```"
                },
                {
                    "text": "Since Arma 3 v2.07.148151:\n\n```sqf\nsliderSpeed _ctrlSlider params [\"_min\", \"_max\", \"_step\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`: Idc of the control"
                        }
                    ],
                    "outline": "`sliderSpeed` idc",
                    "returns": "`Array` in format [minSpeed, maxSpeed, step] (command returns optional param 'step' since Arma 3 v2.07.148151)"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`sliderSpeed` control",
                    "returns": "`Array` in format [minSpeed, maxSpeed, step] (command returns optional param 'step' since Arma 3 v2.07.148151)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/sliderSpeed"
        },
        "configuration": {
            "label": "sliderSpeed",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if Sling Load Assistant is open.",
            "examples": [
                {
                    "text": "```sqf\nwaitUntil { slingLoadAssistantShown };\nhint \"You lack rudimentary motor skills and basic eye-hand coordination.\"; // scold user for unethical practices\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`slingLoadAssistantShown`",
                    "returns": "`Boolean` - `true` if sling load assistant is shown, `false` otherwise"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/slingLoadAssistantShown"
        },
        "configuration": {
            "label": "slingLoadAssistantShown",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get array with all magazines of the given unit.",
            "examples": [
                {
                    "text": "```sqf\nsoldierMagazines player;\n// returns:\n[\n\t\"6.5mm 30Rnd STANAG Mag(30/30)[id/cr:1/0](5x)\",\n\t\"9mm 16Rnd Mag(16/16)[id/cr:7/0](2x)\",\n\t\"RGO Frag Grenade(1/1)[id/cr:10/0](2x)\",\n\t\"Smoke Grenade (White)(1/1)[id/cr:12/0](1x)\",\n\t\"Smoke Grenade (Green)(1/1)[id/cr:13/0](1x)\",\n\t\"Chemlight (Green)(1/1)[id/cr:14/0](2x)\",\n\t\"Titan AT Missile(1/1)[id/cr:16/0](2x)\"\n]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`soldierMagazines` unit",
                    "returns": "`Array` of `String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/soldierMagazines"
        },
        "configuration": {
            "label": "soldierMagazines",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check if unit has some ammo.",
            "examples": [
                {
                    "text": "<sqs>? not (someAmmo _loon1) : hint \"Loon1 is out of ammo!\"</sqs>"
                },
                {
                    "text": "```sqf\nif (not someAmmo _loon1) then { hint \"Loon1 is out of ammo!\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`someAmmo` unitName",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/someAmmo"
        },
        "configuration": {
            "label": "someAmmo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Attempts to sort given array either in ascending (`true`) or descending (`false`) order. **IMPORTANT**: This will **modify** the original array!",
            "examples": [
                {
                    "text": "```sqf\n_arr = [5.21725,1.30859,4,5.03028,1];\n_arr sort true;\nhint str _arr; //[1,1.30859,4,5.03028,5.21725]\n```"
                },
                {
                    "text": "```sqf\n_dev = [\"ja\",\"pa\",\"pa\",\"tram\",\"tara\"];\n_dev sort false;\nhint str _dev; //[\"tram\",\"tara\",\"pa\",\"pa\",\"ja\"]\n```"
                },
                {
                    "text": "```sqf\n\n#define ASC true\n#define DESC false\n_scores = [[123,\"bob\",15],[123,\"bill\",20],[200,\"dave\",21],[200,\"steve\",11]];\n_scores sort DESC;\nhint str _scores; //[[200,\"steve\",11],[200,\"dave\",21],[123,\"bob\",15],[123,\"bill\",20]]\n\n```"
                },
                {
                    "text": "Sort buildings by distance and return position of the most distant building:\n\n```sqf\n\n_buildings = player nearObjects [\"Land_Cargo_Patrol_V1_F\", 500];\n_buildings = _buildings apply { [_x distance player, _x] };\n_buildings sort false;\nhint format [\n\t\"Most distant building is at %1, distance %2 m\", \n\tgetPos (_buildings select 0 select 1),\n\tround (_buildings select 0 select 0)\n];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array` - array to be sorted, can also be a nested array.\n\n\nAll array elements should be one of the following types:\n* `String` - Array of strings `**[\"a\",\"b\",\"c\"...]**`\n* `Number` - Array of numbers `**[1,2,3...]**`\n* `Array` - Array of subarrays `**[<nowiki/>[\"a\",1,2],[\"b\",3,4],[\"c\",5,6]...]**`. Subarrays should be of the same structure. Subarray elements other than `String` or `Number` will be ignored during sorting.\nMixed arrays `**[\"a\",1,[true], ...]**` are not supported and results are undefined."
                        },
                        {
                            "name": "order",
                            "description": "`Boolean` - sorting order. \n* `true`: ascending\n* `false`: descending"
                        }
                    ],
                    "outline": "array `sort` order",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/sort"
        },
        "configuration": {
            "label": "sort",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns various params for the given sound",
            "examples": [
                {
                    "text": "```sqf\n_params = soundParams 10;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "id",
                            "description": "`Number` - id returned by `playSoundUI` and `playSound3D` commands"
                        }
                    ],
                    "outline": "`soundParams` id",
                    "returns": "`Array` in format [path, curPos, length, time, volume], where:\n* path: `String` - the path to the played sound file\n* curPos: `Number` - current play position in 0...1 range\n* length: `Number` - total sound duration in seconds\n* time: `Number` - time passed since the start of playback\n* volume: `Number` - playback volume"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/soundParams"
        },
        "configuration": {
            "label": "soundParams",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the current sound volume (set by `fadeSound`).",
            "examples": [
                {
                    "text": "```sqf\nhint str soundVolume;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**soundVolume**",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/soundVolume"
        },
        "configuration": {
            "label": "soundVolume",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds given set of compiled instructions to the [scheduler](https://community.bistudio.com/wiki/Scheduler).\nExactly when the code will be executed is unknown, it depends on how busy is the engine and how filled up is the [scheduler](https://community.bistudio.com/wiki/Scheduler).\nTherefore `spawn` does not wait for the supplied code to finish, instead, `spawn` returns a [Script](https://community.bistudio.com/wiki/Script%20Handle) handle to the [scheduler](https://community.bistudio.com/wiki/Scheduler) task.\n`scriptDone` command can be used to check the code completion. Additional arguments are passed to the code in local variable [_this](https://community.bistudio.com/wiki/Magic%20Variables%23this).\nSince {{GVI|arma3|1.56",
            "examples": [
                {
                    "text": "```sqf\n_handle = 0 spawn { player globalChat \"Hello world!\" };\n```"
                },
                {
                    "text": "There is no guarantee that spawned scripts will be executed in the same order they spawned: \n\n```sqf\n\nfor \"_i\" from 0 to 100 do\n{\n\t_i spawn\n\t{\n\t\tdiag_log _this;\n\t};\n}; // Result: 51,1,2...49,50,0,52,53...100\n\n```"
                },
                {
                    "text": "Local variables declared in the main scope are not available in the spawned code. You have to pass them as parameters:\n\n```sqf\n\nprivate _localVariable = 1234;\n[_localVariable] spawn \n{\n\tsystemChat format [\"_localVariable does not exist: %1\", isNil \"_localVariable\"]; // _localVariable does not exist: true\n\tparams [\"_localVariable\"];\n\tsystemChat format [\"_localVariable is now: %1\", _localVariable]; // _localVariable is now: 1234\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "arguments",
                            "description": "`Anything` - arguments passed to the script, which later available in `**_this**` variable inside the script."
                        },
                        {
                            "name": "code",
                            "description": "`Code`"
                        }
                    ],
                    "outline": "arguments `spawn` code",
                    "returns": "[Script Handle](https://community.bistudio.com/wiki/Script%20Handle) - can be used to determine (_via_ `scriptDone` (also _via_ `isNull` in Arma 3)) when the spawned script has finished. In Arma 3, the handle is also available inside the spawned script in `**_thisScript**` variable"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/spawn"
        },
        "configuration": {
            "label": "spawn",
            "grammarType": "code-executor"
        }
    },
    {
        "documentation": {
            "description": "Returns the speaker class name of a unit.",
            "examples": [
                {
                    "text": "```sqf\nspeaker player; // Can return \"male09eng\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`speaker` unit",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/speaker"
        },
        "configuration": {
            "label": "speaker",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the current speech volume (set by `fadeSpeech`)",
            "examples": [
                {
                    "text": "```sqf\nhint str speechVolume;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**speechVolume**",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/speechVolume"
        },
        "configuration": {
            "label": "speechVolume",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Object speed (in km/h). Returns relative speed of given object along Y axis. An equivalent to: <sqf inline>3.6 * (velocityModelSpace _obj select 1)",
            "examples": [
                {
                    "text": "```sqf\nif (speed _truck1 >= 100) then { hint \"You're going too fast!\" };\n```"
                },
                {
                    "text": "```sqf\nif (speed objectParent player) < 0) then { hint \"You're going reverse!\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`speed` object",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/speed"
        },
        "configuration": {
            "label": "speed",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns speed mode of the group, which can be any of the following: \n* **\"LIMITED\"**\n* **\"NORMAL\"**\n* **\"FULL\"**",
            "examples": [
                {
                    "text": "```sqf\n_speed = speedMode group player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "groupName",
                            "description": "`Object` or `Group`"
                        }
                    ],
                    "outline": "`speedMode` groupName",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/speedMode"
        },
        "configuration": {
            "label": "speedMode",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Splits the provided **ANSI** string into an array of tokens according to given delimiters.\n**NOTE**: For Unicode support, see `forceUnicode`.",
            "examples": [
                {
                    "text": "```sqf\n\n_str = \"- This, is a sample string.\" splitString \"-,. \"; // [\"This\",\"is\",\"a\",\"sample\",\"string\"]\n_str joinString \"#\"; // \"This#is#a#sample#string\"\n\n```"
                },
                {
                    "text": "```sqf\n\n\"\\A3\\ui_f\\data\\map\\vehicleicons\\iconLogic_ca.paa\" splitString \"\\.\"; // [\"A3\",\"ui_f\",\"data\",\"map\",\"vehicleicons\",\"iconLogic_ca\",\"paa\"]\n\n```"
                },
                {
                    "text": "```sqf\n\"1:2:3\" splitString \":\"; // [\"1\",\"2\",\"3\"]\n```"
                },
                {
                    "text": "```sqf\n\"Japa is the best!\" splitString \"\" joinString \" \"; // \"J a p a   i s   t h e   b e s t !\"\n```"
                },
                {
                    "text": "```sqf\n\n_cmd = currentMagazineDetail player; // \"9mm 16Rnd Mag(13/16)[id/cr:10000011/0]\"\n_cmd splitString \"([ ]/:)\"; // [\"9mm\",\"16Rnd\",\"Mag\",\"13\",\"16\",\"id\",\"cr\",\"10000011\",\"0\"]\n\n```"
                },
                {
                    "text": "Remove all \\r\\n from file:\n\n```sqf\nloadFile \"somefile.txt\" splitString toString [13,10] joinString \" \";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "str",
                            "description": "`String` - the string to split"
                        },
                        {
                            "name": "delimiters",
                            "description": "`String` - one or more characters, each used as a separate delimiter; if empty, _str_ is split by each character"
                        }
                    ],
                    "outline": "str `splitString` delimiters",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/splitString"
        },
        "configuration": {
            "label": "splitString",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns square root of x.",
            "examples": [
                {
                    "text": "```sqf\nprivate _squareRoot = sqrt 9;  // returns 3\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "x",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`sqrt` x",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/sqrt"
        },
        "configuration": {
            "label": "sqrt",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns data about squad of given unit loaded from [[squad.xml]] as well as the unit itself.\n**NOTE**: This command returns an empty array in single player.",
            "examples": [
                {
                    "text": "```sqf\n_info = squadParams player;\n```"
                },
                {
                    "text": "```sqf\nsquadParams player params [\"_squadInfo\", \"_memberInfo\", \"_squadID\", \"_a3unitsID\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`squadParams` unit",
                    "returns": "`Array` in format [squadInfo, memberInfo, squadId, a3unitsId] where:\n* squadInfo: `Array` of `String`s format [nick, name, email, web, picture, title]\n* memberInfo: `Array` of `String`s format [uid, name, fullname, email, icq, remark]\n* {{GVI|arma3|2.06"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/squadParams"
        },
        "configuration": {
            "label": "squadParams",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the stance of the given unit.",
            "examples": [
                {
                    "text": "```sqf\nif (stance player == \"STAND\") then { hint \"I am standing!\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`stance` unit",
                    "returns": "`String` - can be:\n* `**\"STAND\"**`\n* `**\"CROUCH\"**`\n* `**\"PRONE\"**`\n* `**\"UNDEFINED\"**` (for example, swimming)\n* `**\"\"**` (on non-person [object](https://community.bistudio.com/wiki/Object))"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/stance"
        },
        "configuration": {
            "label": "stance",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Shows loading screen with the given text, using the given resource. While loading screen is shown, simulation and scene drawing is disabled, user control is disabled, mouse cursor is hidden, scripts run at full speed (50ms per frame instead of 3ms per frame for [Scheduled Scripts](https://community.bistudio.com/wiki/Scheduler)).\n\n\n{{Feature|informative",
            "examples": [
                {
                    "text": "```sqf\nstartLoadingScreen [\"Loading My Mission, please wait...\"];\n```"
                },
                {
                    "text": "```sqf\nstartLoadingScreen [\"Can't skip loading time...\", \"MyLoadingRsc\"];\n```"
                },
                {
                    "text": "```sqf\n\nstartLoadingScreen [\"Loading My Mission\"];\n// code\nprogressLoadingScreen 0.5;\n// code\nendLoadingScreen;\n\n```"
                },
                {
                    "text": "```sqf\n\n// this structure prevents error-prone or lengthy code to miss endLoadingScreen.\nprivate _maxTime = diag_tickTime + 30; // max 30s of loading\n\nstartLoadingScreen [\"Loading\"];\nprivate _handle = [] spawn {\n\t// code that may crash or take too long\n};\n\nwaitUntil { uiSleep .1; scriptDone _handle || diag_tickTime > _maxTime };\nendLoadingScreen;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "text",
                            "description": "`String`"
                        },
                        {
                            "name": "resource",
                            "description": "`String` - (Optional)"
                        }
                    ],
                    "outline": "`startLoadingScreen` [text, resource]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/startLoadingScreen"
        },
        "configuration": {
            "label": "startLoadingScreen",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Optional step value. A countdown can be made with a negative value. If not set, the default step is 1.",
            "examples": [
                {
                    "text": "```sqf\nfor \"_i\" from 20 to 10 step -2 do\n{\n\t// ...\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "for",
                            "description": "[For Type](https://community.bistudio.com/wiki/For%20Type)"
                        },
                        {
                            "name": "stepSize",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "for `step` stepSize",
                    "returns": "[For Type](https://community.bistudio.com/wiki/For%20Type)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/step"
        },
        "configuration": {
            "label": "step",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "Stop an AI unit from turning or moving, preventing it to follow a watched object or engage an enemy properly - although if properly aligned, the unit -will- shoot the enemy.\nIt may still change the stance if deemed appropriate (e.g. under fire). Use `disableAI` to disable specific AI capabilities.",
            "examples": [
                {
                    "text": "```sqf\nloon1 stop true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        },
                        {
                            "name": "toggle",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "unitName `stop` toggle",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/stop"
        },
        "configuration": {
            "label": "stop",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Instant engines stop. \n{{Feature|afm}}",
            "examples": [
                {
                    "text": "`stopEngineRTD` myHeli"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "heli",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`stopEngineRTD` heli",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/stopEngineRTD"
        },
        "configuration": {
            "label": "stopEngineRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check if unit is stopped by `stop` command.",
            "examples": [
                {
                    "text": "<sqs>? (stopped _loon1) : hint \"Loon1 is stopped\"</sqs>"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`stopped` unitName",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/stopped"
        },
        "configuration": {
            "label": "stopped",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Stops the given sound",
            "examples": [
                {
                    "text": "```sqf\nstopSound 10;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "id",
                            "description": "`Number` - id returned by `playSoundUI` and `playSound3D` commands**IMPORTANT**: Sound ids are **local**."
                        }
                    ],
                    "outline": "`stopSound` id",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/stopSound"
        },
        "configuration": {
            "label": "stopSound",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Converts any value into a string, depending on its type. If an `Object` has a `vehicleVarName`, it is returned (see _Example 4_).",
            "examples": [
                {
                    "text": "```sqf\n_s = str (5 + 2); // The value of _s is the string \"7\"\n```"
                },
                {
                    "text": "```sqf\n\na = [];\nac = 0;\nwhile { ac < 5 } do\n{\n\tac = count a;\n\ta set [ac, format [\"Index %1\", ac]];\n};\nhintSilent str a; // hints all of [\"Index 0\",\"Index 1\",\"Index 2\",\"Index 3\",\"Index 4\"] including brackets, quotes and commas\n\n```"
                },
                {
                    "text": "```sqf\n\nstr [0, 0, 0] == \"[0, 0, 0]\";\t// false\nstr [0, 0, 0] == \"[0,0,0]\";\t\t// true\n\nstr \"a\";\t\t\t// \"\"\"a\"\"\"\ncount str \"a\";\t\t// 3\nstr text \"a\";\t\t// \"a\"\ncount str text \"a\";\t// 1\n\n```"
                },
                {
                    "text": "```sqf\n\nstr objNull;\t\t// \"<NULL-object>\"\nstr player;\t\t\t// e.g \"B Alpha 1-1:1 (PlayerName)\"\nplayer setVehicleVarName \"PlayerUnit\";\nstr player;\t\t\t// \"PlayerUnit\"\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "value",
                            "description": "`Anything`"
                        }
                    ],
                    "outline": "`str` value",
                    "returns": "`String` - if _value_ is a `String`, double quotes `**\"\"**` will surround it (see _Example 3_)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/str"
        },
        "configuration": {
            "label": "str",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "{{{!}} class=\"wikitable float-right align-center-col-1\" style=\"font-size: 0.85em; min-width: 15em\"\n! Time\n! `sunOrMoon`\n{{!}}-\n{{!}} 12:00\n{{!}} 1\n{{!}}-\n{{!}} (...)\n{{!}} 1\n{{!}}-\n{{!}} 18:39\n{{!}} 0.911201\n{{!}}-\n{{!}} 18:42\n{{!}} 0.576303\n{{!}}-\n{{!}} 18:45\n{{!}} 0.240862\n{{!}}-\n{{!}} 18:48\n{{!}} 0\n{{!}}-\n{{!}} (...)\n{{!}} 0\n{{!}}-\n{{!}} 06:00\n{{!}} 0.695308\n{{!}}-\n{{!}} 06:03\n{{!}} 0.739519\n{{!}}-\n{{!}} 06:09\n{{!}} 1\n{{!}}-\n{{!}} (...)\n{{!}} 1\n{{!}}}\nReturns the moon to sun transition state in range 0..1.\n\nThe return value is either 0 or 1 most of the time, the in-between values only returned during a few minutes in the morning and in the evening, depending on the `date`, and could be similar to shown here:\n\n<gallery mode=\"packed\" heights=\"200px\">\nFile:sunOrMoon VR up.png|Sunrise in Arma 3 VR\nFile:sunOrMoon VR down.png|Sunset in Arma 3 VR\n</gallery>",
            "examples": [
                {
                    "text": "```sqf\nprivate _transitionState = sunOrMoon;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`sunOrMoon`",
                    "returns": "`Number` - 0 for night (moon), 1 for day (sun)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/sunOrMoon"
        },
        "configuration": {
            "label": "sunOrMoon",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates a list of supported operators and type. Each field of array has the format: \"x:name\" Where x can be:\n*'t' - type\n*'n' - [nullar](https://community.bistudio.com/wiki/SQF%20Syntax%23Nular_Operators) operator\n*'u' - [unary](https://community.bistudio.com/wiki/SQF%20Syntax%23Unary_Operators) operator\n*'b' - [binary](https://community.bistudio.com/wiki/SQF%20Syntax%23Binary_Operators) operator.\n\n'name' is the operator or type name (in case operator, type of input operands is included). \n_mask_ parameter can be an empty string, or one of field. In this case, function returns empty array, if operator is not included in the list. Limited wildcard support is available. Type _x_ may be replaced with _*_, meaning all types. For the _mask_ partial match may be used, like _abc*_, meaning any operators starting with 'abc' are reported, for example: \n* `**\"\"**` - list all types and commands\n* `**\"t:*\"**` - list all types\n* `**\"*:&lt;command&gt;*\"**` - list all entries for script _&lt;command&gt;_\n* {{GVI|arma3|2.00",
            "examples": [
                {
                    "text": "```sqf\nsupportInfo \"b:select*\"; // returns [\"b:ARRAY select SCALAR\",\"b:ARRAY select BOOL\",\"b:CONFIG select SCALAR\"]\n```"
                },
                {
                    "text": "Return all available commands:\n\n```sqf\n_commands = supportInfo \"\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mask",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`supportInfo` mask",
                    "returns": "`Array` - array with requested info or empty array `**[]**`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/supportInfo"
        },
        "configuration": {
            "label": "supportInfo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Force [suppressive fire](https://community.bistudio.com/wiki/Suppressive%20Fire) from the unit.",
            "examples": [
                {
                    "text": "```sqf\n_soldier1 suppressFor 10; // Will force soldier1 to do suppressive fire to known enemies for 10 seconds\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "duration",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "unit `suppressFor` duration",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/suppressFor"
        },
        "configuration": {
            "label": "suppressFor",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns whether there is water at given position. In Arma 3, it also detects pond objects, but only if they are loaded in memory (normally only true if the objects are within the [object view distance](https://community.bistudio.com/wiki/setObjectViewDistance))",
            "examples": [
                {
                    "text": "```sqf\nprivate _result = surfaceIsWater [1000, 3000];\n```"
                },
                {
                    "text": "```sqf\n_isWater = surfaceIsWater position player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Array` format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction)  or `Array` format [Position3D](https://community.bistudio.com/wiki/Position%23Introduction) - when using [Position3D](https://community.bistudio.com/wiki/Position%23Introduction) Z will be ignored"
                        }
                    ],
                    "outline": "`surfaceIsWater` position",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/surfaceIsWater"
        },
        "configuration": {
            "label": "surfaceIsWater",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns terrain's {{Link|https://en.wikipedia.org/wiki/Normal_(geometry)|surface normal}} on given position.",
            "examples": [
                {
                    "text": "```sqf\n_normal = surfaceNormal [300, 500];\n```"
                },
                {
                    "text": "```sqf\n_normal = surfaceNormal getPosASL player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Array` format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position3D](https://community.bistudio.com/wiki/Position%23Introduction) - when using [Position3D](https://community.bistudio.com/wiki/Position%23Introduction), Z is ignored"
                        }
                    ],
                    "outline": "`surfaceNormal` position",
                    "returns": "`Array` format `Vector3D`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/surfaceNormal"
        },
        "configuration": {
            "label": "surfaceNormal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Same as `surfaceType`, but returns texture path to ground texture as string.\n**NOTE**: The texture returned is of the ground, even if there is a road at that position. To get road texture use `getRoadInfo` command.",
            "examples": [
                {
                    "text": "```sqf\nprivate _groundTexture = surfaceTexture getPosATL player;\n```"
                },
                {
                    "text": "```sqf\nprivate _pos = getPosATL player;\n_pos set [2, true]; // use layer mask\nprivate _groundTexture = surfaceTexture _pos;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "x",
                            "description": "`Number` - world x coordinate of the position"
                        },
                        {
                            "name": "y",
                            "description": "`Number` - world y coordinate of the position"
                        },
                        {
                            "name": "z or useLayerMask",
                            "description": "`Number` or `Boolean` - When a number is provided (Z in 3D positions), it is ignored. When a boolean is provided, it defines whether the layer mask should be used. Using the layer mask is more accurate but slightly slower.\n[[File:Capture.png|thumb|256px|The patches of \"dirt\" are defined using a layer mask. The \"concrete\" is the primary surface texture.]]"
                        }
                    ],
                    "outline": "`surfaceTexture` [x, y, z or useLayerMask]",
                    "returns": "`String` - Surface texture"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/surfaceTexture"
        },
        "configuration": {
            "label": "surfaceTexture",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns what surface type is at the given position. For surface texture see `surfaceTexture` command.\n\n\n\n**NOTE**: The command returns surface type of the ground, even underneath objects such as buildings and roads}}\n<spoiler text=\"Show surface types (Armed Assault)\">\n* #GRASSSOUTH\n* #GRASSGENERAL\n* #SANDGENERAL<spoiler text=\"Show surface types (Arma 2)\">\n* #UTGRASS - for natural surfaces\n* #UTCONCRETE - for urban surfaces<spoiler text=\"Show surface types (Arma 3)\">\n{{Columns|4|\n* BuildingRubble\n* BuildingRubble_exp\n* cardboard\n* cardboard_exp\n* carpet\n* carpet_exp\n* carpet_inside\n* carpet_in_exp\n* concrete\n* concrete_exp\n* concrete_hall\n* concrete_hall_exp\n* concrete_inside\n* concrete_in_exp\n* concrete_out\n* Default\n* dirtrunway\n* floor\n* floor_exp\n* floor_inside\n* floor_in_exp\n* GdtAsphalt\n* GdtBeach\n* GdtCliff\n* GdtConcrete\n* GdtDead\n* GdtDesert\n* GdtDirt\n* GdtField\n* GdtForest\n* GdtForestMalden\n* GdtForestPine\n* GdtGrassDry\n* GdtGrassGreen\n* GdtGrassLong\n* GdtGrassShort\n* GdtGrassTall\n* GdtGrassWild\n* GdtKLCobblestone\n* GdtKLDirt\n* GdtKlField\n* GdtKLForestCon\n* GdtKLForestDec\n* GdtKLGrass1\n* GdtKLGrass2\n* GdtKlSoil\n* GdtKlStubble\n* GdtKlTarmac\n* GdtKlWeatheredTarmac\n* GdtMarsh\n* GdtMud\n* GdtRedDirt\n* GdtRock\n* GdtRubble\n* GdtSeabed\n* GdtSeabedExp\n* GdtSoil\n* GdtStony\n* GdtStonyThistle\n* GdtStratisBeach\n* GdtStratisConcrete\n* GdtStratisDirt\n* GdtStratisDryGrass\n* GdtStratisForestPine\n* GdtStratisGreenGrass\n* GdtStratisRocky\n* GdtStratisSeabed\n* GdtStratisSeabedCluttered\n* GdtStratisThistles\n* GdtThorn\n* GdtVolcano\n* GdtVolcanoBeach\n* GdtVRsurface01\n* GdtWeed\n* GdtWildField\n* grid\n* grid_exp\n* lino\n* lino_exp\n* lino_in_exp\n* mat_in_exp\n* metalPlate\n* metalPlatePressed_exp\n* metalPlate_exp\n* metalPlate_in_exp\n* mud\n* mud_exp\n* parquet\n* planks\n* planks_exp\n* planks_inside\n* planks_in_exp\n* road\n* road_exp\n* roof_tiles_exp\n* rubble\n* rubble_exp\n* sand\n* sand_exp\n* softwood_in_exp\n* steel\n* steel_exp\n* stones\n* stones_exp\n* straw_exp\n* SurfIntConcrete\n* SurfIntMetal\n* SurfIntTiles\n* SurfIntWood\n* surfint_concrete\n* surfint_metal\n* surfint_tiles\n* surfint_wood\n* SurfMetal\n* SurfRoadConcrete\n* SurfRoadConcrete_exp\n* SurfRoadDirt\n* SurfRoadDirt_Enoch\n* SurfRoadDirt_exp\n* SurfRoadTarmac\n* SurfRoadTarmac1_Enoch\n* SurfRoadTarmac2_Enoch\n* SurfRoadTarmac3_Enoch\n* SurfRoadTarmac_exp\n* SurfRoofTiles\n* SurfRoofTin\n* SurfTrailDirt_Enoch\n* SurfTrailDirt_exp\n* SurfWater\n* SurfWood\n* surf_metal\n* surf_roadconcrete\n* surf_roaddirt\n* surf_roadtarmac\n* surf_rooftiles\n* surf_rooftin\n* surf_wood\n* TEST_SurfNormal\n* tiling\n* trash\n* trash_exp\n* Water\n* wavyMetal\n* wavyMetal_exp\n* woodenFloor",
            "examples": [
                {
                    "text": "```sqf\nprivate _surface = surfaceType [4500, 4500];\n```"
                },
                {
                    "text": "```sqf\nhint surfaceType getPosWorld player;\n```"
                },
                {
                    "text": "```sqf\nprivate _pos = getPosWorld player;\n_pos set [2, true]; // use layer mask\nsurfaceType _pos;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "x",
                            "description": "`Number` - world x coordinate of the position"
                        },
                        {
                            "name": "y",
                            "description": "`Number` - world y coordinate of the position"
                        },
                        {
                            "name": "z or useLayerMask",
                            "description": "`Number` or `Boolean` - When a number is provided (Z in 3D positions), it is ignored. When a boolean is provided, it defines whether the layer mask should be used. Using the layer mask is more accurate but slightly slower.\n[[File:Capture.png|thumb|256px|The patches of \"dirt\" are defined using a layer mask. The \"concrete\" is the primary surface texture.]]"
                        }
                    ],
                    "outline": "`surfaceType` [x, y, z or useLayerMask]",
                    "returns": "`String` - Surface type"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/surfaceType"
        },
        "configuration": {
            "label": "surfaceType",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the target depth level for swimming soldier. Depth should be a negative number.",
            "examples": [
                {
                    "text": "```sqf\nsoldier swimInDepth -20;\n```"
                },
                {
                    "text": "```sqf\nbob swimInDepth -10;\nbob doMove ASLToAGL getPosASL player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "value",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "unit `swimInDepth` value",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/swimInDepth"
        },
        "configuration": {
            "label": "swimInDepth",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks if the given parameter matches any `case`. If so, the code block of that case will be executed. After that the switch ends so no further cases will be checked.\n\nIf a case has no code block the code of the next case will automatically be executed, making it possible to formulate a logical \"or\" for cases which would otherwise contain the exact same code (see _Example 2_).\n\nThe `default` block will be executed **only** if no case matches, no matter its position inside the code block. It is not a `case`, and will **never** be entered by fallthrough.\n\n**NOTE**: \n* `String` comparison is case-sensitive. Use `toUpper`, `toLower`, `toLowerANSI` or `toUpperANSI` to force all [strings](https://community.bistudio.com/wiki/String) to the same case.\n* if no `default` block is provided and no `case` is matched, the switch block returns the default value `true`, otherwise it returns what the valid case block returns.",
            "examples": [
                {
                    "text": "```sqf\n\nswitch (floor random 5) do\n{\n\tcase 1: { hint \"one\"; };\n\tcase 2: { hint \"two\"; };\n\tdefault { hint \"zero, three or four\" };\n};\n\n```"
                },
                {
                    "text": "<!-- this example is referenced in Description -->\n\n```sqf\n\nswitch (_condition) do\n{\n\tcase \"string1\";\n\tcase \"string2\": { hint \"string1 or string2\" };\n\tcase \"string3\";\n\tcase \"string4\": { hint \"string3 or string4\" };\n\tcase \"string5\"; // will never enter default's code\n\tdefault { hint \"default\" };\n};\n\n```"
                },
                {
                    "text": "```sqf\n\nprivate _color = switch (side player) do\n{\n\tcase west: { \"ColorGreen\" };\n\tcase east: { \"ColorRed\" };\n};\n\n```"
                },
                {
                    "text": "```sqf\n\nprivate _fn_moveForward =\t{ /*...code...*/ };\nprivate _fn_moveBackward =\t{ /*...code...*/ };\nprivate _fn_invalidKey =\t{ /*...code...*/ };\n\nswitch true do\n{\n\tcase (_dikCode in actionKeys \"MoveForward\"):\t_fn_moveForward;\n\tcase (_dikCode in actionKeys \"MoveBackward\"):\t_fn_moveBackward;\n\tdefault _fn_invalidKey;\n};\n\n```"
                },
                {
                    "text": "```sqf\n\nswitch _var do\n{\n\tcase \"0\";\n\tdefault { hint str [\"default\", _var] };\n\tcase \"3\": { hint str [\"3\", _var] };\n\tcase \"1\";\n\tcase \"4\";\n\tcase \"2\": { hint str [\"2\", _var] };\n};\n\n_var = \"0\"; // -> [\"3\", \"0\"]\n_var = \"1\"; // -> [\"2\", \"1\"]\n_var = \"2\"; // -> [\"2\", \"2\"]\n_var = \"3\"; // -> [\"3\", \"3\"]\n_var = \"4\"; // -> [\"2\", \"4\"]\n_var = \"5\"; // -> [\"default\", \"5\"]\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "value",
                            "description": "`Anything`"
                        }
                    ],
                    "outline": "`switch` value",
                    "returns": "[Switch Type](https://community.bistudio.com/wiki/Switch%20Type)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/switch"
        },
        "configuration": {
            "label": "switch",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "Returns a list of playable units available for switching to\n* Command is relative to the client on which it is executed and will only show playable units for the same `side` as `player`'s `group` + `player` himself\n* In singleplayer where playable units from all sides will be accessible via this command\n* Dead and player-controlled units are automatically removed from the resulting array\n* In order to get all _playable_ units regardless of their `side`, see the `playableUnits` command",
            "examples": [
                {
                    "text": "```sqf\n_availableUnits = switchableUnits;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`switchableUnits`",
                    "returns": "`Array`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/switchableUnits"
        },
        "configuration": {
            "label": "switchableUnits",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "When used on a person, the given action is started immediately (there is no transition). Use switchmove \"\" to switch back to the default movement if there is no transition back, otherwise the person may be stuck.",
            "examples": [
                {
                    "text": "```sqf\nsoldierOne switchAction \"SitDown\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "soldier",
                            "description": "`Object`"
                        },
                        {
                            "name": "action",
                            "description": "`String`"
                        }
                    ],
                    "outline": "soldier `switchAction` action",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/switchAction"
        },
        "configuration": {
            "label": "switchAction",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Switch camera to given vehicle / camera. Mode is one of:\n* **\"INTERNAL\"**: 1st person\n* **\"GUNNER\"**: optics / sights\n* **\"EXTERNAL\"**: 3rd person\n* **\"GROUP\"**: group\n* **\"CARGO\"**: same as \"INTERNAL\"\n\nIf you switch to a unit in a vehicle, this command uses the correct turret.\n**NOTE**: Control over the unit is not given to the player. Use `selectPlayer` or a combination of `switchCamera` and `remoteControl` to achieve this.\n**WARNING**: Always `switchCamera` first (when needed) before using `remoteControl` as doing it after may lead to unpredictable results.",
            "examples": [
                {
                    "text": "```sqf\nplayer switchCamera \"Gunner\";\n```"
                },
                {
                    "text": "```sqf\nvehicle player switchCamera \"External\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Object`"
                        },
                        {
                            "name": "mode",
                            "description": "`String`"
                        }
                    ],
                    "outline": "target `switchCamera` mode",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`switchCamera` target",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/switchCamera"
        },
        "configuration": {
            "label": "switchCamera",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "When used on a person,the given move is started immediately (without transition).",
            "examples": [
                {
                    "text": "```sqf\nsoldierOne switchGesture \"Wave\";\n```"
                },
                {
                    "text": "```sqf\n// Create a dummy agent that copies your moves\nai1 = createAgent [typeOf player, getPosATL player, [], 0, \"NONE\"];\nai1 disableAI \"ALL\";\nonEachFrame\n{\n\tai1 setAnimSpeedCoef getAnimSpeedCoef player;\n\tai1 setVectorDir vectorDir player;\n\t_m = animationState player;\n\t_g = gestureState player;\n\t_i = getUnitMovesInfo player;\n\t_a = getUnitMovesInfo ai1;\n\n\tif (animationState ai1 != _m || abs(_i#1 - _a#1) > 0.1) then {\n\t\tai1 switchMove [_m, _i#0, _i#3, false];\n\t};\n\tif ((gestureState ai1 != _g || abs(_i#6 - _a#6) > 0.1) && (_g != \"<none>\" && _g find \"_player\" < 0)) then {\n\t\tai1 switchGesture [_g, _i#5, _i#8, false];\n\t};\n}\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "soldier",
                            "description": "`Object`"
                        },
                        {
                            "name": "moveName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "soldier `switchGesture` moveName",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "soldier",
                            "description": "`Object`"
                        },
                        {
                            "name": "moveName",
                            "description": "`String` - Entry from `**\"CfgMovesMaleSdr\" >> \"states\"**` or `**\"CfgGesturesMale\" >> \"states\"**`"
                        },
                        {
                            "name": "time",
                            "description": "`Number` - (Optional, default: 0) normalized time, in range 0-1, where 0 = beginning of the animation, and 1 = end of the animation"
                        },
                        {
                            "name": "blendFactor",
                            "description": "`Number` -  (Optional, default 1) how much to blend the current animation with the new animation, in range 0..1, where 0 = current animation, and 1 = new animation. When 1 is used, the switching is instant (not smooth)."
                        },
                        {
                            "name": "resetAim",
                            "description": "`Boolean` - (Optional, default: true) Whether the aim/head direction should be reset after switching"
                        }
                    ],
                    "outline": "soldier `switchGesture` [moveName, time, blendFactor, resetAim]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/switchGesture"
        },
        "configuration": {
            "label": "switchGesture",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Controls whether a lamp is lit or not.\n**Arma 3**: \nThis command was originally designed to only work with `**CfgNonAIVehicles**` class `**\"StreetLamp\"**` only.\nSince Arma 3 v1.92 this command was extended to work with street lights and some prop lights, like portable construction light.",
            "examples": [
                {
                    "text": "```sqf\n(object 12345) switchLight \"OFF\";\n```"
                },
                {
                    "text": "```sqf\nnearestObject [player, \"Streetlamp\"] switchLight \"OFF\";\n```"
                },
                {
                    "text": "```sqf\ncursorObject switchLight \"ON\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "lamp",
                            "description": "`Object`"
                        },
                        {
                            "name": "mode",
                            "description": "`String` - mode can be: \"ON\", \"OFF\" or \"AUTO\" (_lamp_ is on only during nighttime, default)"
                        }
                    ],
                    "outline": "lamp `switchLight` mode",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/switchLight"
        },
        "configuration": {
            "label": "switchLight",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Immediately applies given animation to the unit. For a smooth transition from the current animation, use `playMove`.\n**NOTE**: see [:Category:Moves](https://community.bistudio.com/wiki/%3ACategory%3AMoves) for respective games animations.}}\n\nThis command first resets the unit's animation states (including aiming state, gesture state, etc.) then puts the unit in the first frame of the animation (therefore showing no transition).\nIf an invalid animation is provided, the unit's animations will be reset but no new animation will be played (see _Example 3_).\n\n{{Feature|informative|It is a good practice to always use `playMoveNow` after `switchMove` to make sure the animation plays correctly when using the first syntax:\n\n```sqf\n\n_unit switchMove \"myMove\";\n_unit playMoveNow \"myMove\";\n\n```\n\nThe alternative syntax does this automatically.",
            "examples": [
                {
                    "text": "Prone:\n\n```sqf\nplayer switchMove \"AmovPpneMstpSrasWrflDnon\";\n```"
                },
                {
                    "text": "Sit player immediately and globally:\n\n```sqf\n[player, \"AmovPsitMstpSlowWrflDnon\"] remoteExec [\"switchMove\"];\n```"
                },
                {
                    "text": "Resets unit's animation:\n\n```sqf\n_unit switchMove \"\";\n```"
                },
                {
                    "text": "```sqf\n\n// Create a dummy agent that copies your moves\nai1 = createAgent [typeOf player, getPosATL player, [], 0, \"NONE\"];\nai1 disableAI \"ALL\";\nonEachFrame\n{\n\tai1 setAnimSpeedCoef getAnimSpeedCoef player;\n\tai1 setVectorDir vectorDir player;\n\tprivate _m = animationState player;\n\tprivate _g = gestureState player;\n\tprivate _i = getUnitMovesInfo player;\n\tprivate _a = getUnitMovesInfo ai1;\n\t\n\tif (animationState ai1 != _m || abs(_i#1 - _a#1) > 0.1) then\n\t{\n\t\tai1 switchMove [_m, _i#0, _i#3, false];\n\t};\n\n\tif ((gestureState ai1 != _g || abs(_i#6 - _a#6) > 0.1) && (_g != \"<none>\" && _g find \"_player\" < 0)) then\n\t{\n\t\tai1 switchGesture [_g, _i#5, _i#8, false];\n\t};\n}\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "person",
                            "description": "`Object` - unit"
                        },
                        {
                            "name": "moveName",
                            "description": "`String` - animation state (see `animationState`)"
                        }
                    ],
                    "outline": "person `switchMove` moveName",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "person",
                            "description": "`Object` - unit"
                        },
                        {
                            "name": "moveName",
                            "description": "`String` - entry from `**\"CfgMovesMaleSdr\" >> \"states\"**` or `**\"CfgGesturesMale\" >> \"states\"**`"
                        },
                        {
                            "name": "time",
                            "description": "`Number` - (Optional, default 0) normalized time, in range 0..1, where 0 = beginning of the animation, and 1 = end of the animation"
                        },
                        {
                            "name": "blendFactor",
                            "description": "`Number` - (Optional, default 1) how much to blend the current animation with the new animation, in range 0..1, where 0 = current animation, and 1 = new animation. When 1 is used, the switching is instant (not smooth), similar to the first syntax."
                        },
                        {
                            "name": "resetAim",
                            "description": "`Boolean` - (Optional, default true) whether the aim/head direction should be reset after switching"
                        }
                    ],
                    "outline": "person `switchMove` [moveName, time, blendFactor, resetAim]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/switchMove"
        },
        "configuration": {
            "label": "switchMove",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return the list of objects synchronized with the given unit.",
            "examples": [
                {
                    "text": "```sqf\n_objects = synchronizedObjects _logic;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`synchronizedObjects` unit",
                    "returns": "`Array`"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/synchronizedObjects"
        },
        "configuration": {
            "label": "synchronizedObjects",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the list of triggers synchronized with a given waypoint.",
            "examples": [
                {
                    "text": "```sqf\nsynchronizedTriggers _someWaypoint;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Waypoint`"
                        }
                    ],
                    "outline": "`synchronizedTriggers` waypoint",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/synchronizedTriggers"
        },
        "configuration": {
            "label": "synchronizedTriggers",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the list of waypoints synchronized with a given trigger or waypoint.",
            "examples": [
                {
                    "text": "```sqf\nsynchronizedWaypoints _someTrigger;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "obj",
                            "description": "`Object` or `Waypoint`"
                        }
                    ],
                    "outline": "`synchronizedWaypoints` obj",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/synchronizedWaypoints"
        },
        "configuration": {
            "label": "synchronizedWaypoints",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Add given objects to the unit's list of synchronized objects.",
            "examples": [
                {
                    "text": "```sqf\n\n_acm = _groupLogic createUnit [\"AmbientCombatManager\", position player, [], 0, \"NONE\"];\n_acm synchronizeObjectsAdd [player];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "objects",
                            "description": "`Array` - array of objects"
                        }
                    ],
                    "outline": "unit `synchronizeObjectsAdd` objects",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/synchronizeObjectsAdd"
        },
        "configuration": {
            "label": "synchronizeObjectsAdd",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes given objects from the unit's list of synchronized objects.",
            "examples": [
                {
                    "text": "```sqf\nplayer synchronizeObjectsRemove [_object1, _object2, _object3];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "objects",
                            "description": "`Array` - an array of objects"
                        }
                    ],
                    "outline": "unit `synchronizeObjectsRemove` objects",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/synchronizeObjectsRemove"
        },
        "configuration": {
            "label": "synchronizeObjectsRemove",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "[[ArmA:_Mission_Editor#Synchronize_Mode_.28F5.29|Synchronizes]] the trigger with zero or more waypoints.",
            "examples": [
                {
                    "text": "```sqf\n_trigger synchronizeTrigger [];\n```"
                },
                {
                    "text": "```sqf\n_trigger synchronizeTrigger [_waypoint1];\n```"
                },
                {
                    "text": "```sqf\n_trigger synchronizeTrigger [_waypoint1, [_group5, 7], _waypoint3];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "trigger",
                            "description": "`Object` - trigger to synchronize"
                        },
                        {
                            "name": "waypoints",
                            "description": "`Array` of `Waypoint`s - waypoints to synchronize with trigger. Array can be empty to unset"
                        }
                    ],
                    "outline": "trigger `synchronizeTrigger` waypoints",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/synchronizeTrigger"
        },
        "configuration": {
            "label": "synchronizeTrigger",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Synchronizes the trigger or the waypoint with an array of waypoints.",
            "examples": [
                {
                    "text": "```sqf\n_myTrigger synchronizeWaypoint [[_group2, 3]];\n```"
                },
                {
                    "text": "```sqf\n[_group1, 2] synchronizeWaypoint [[_group2, 3]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "triggerOrWaypoint",
                            "description": "`Object` or `Waypoint` - can be:\n* `Object` - [trigger](https://community.bistudio.com/wiki/Trigger)\n* `Waypoint` - `Array` in format of `Waypoint`"
                        },
                        {
                            "name": "waypoints",
                            "description": "`Array` of `Waypoint`s"
                        }
                    ],
                    "outline": "triggerOrWaypoint `synchronizeWaypoint` waypoints",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/synchronizeWaypoint"
        },
        "configuration": {
            "label": "synchronizeWaypoint",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Types text to the system radio channel. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see `remoteExec`).",
            "examples": [
                {
                    "text": "```sqf\nsystemChat \"Hello world!\";\n```"
                },
                {
                    "text": "[[File:xChat.jpg|right]]\n\n```sqf\n\ndriver vehicle player sideChat \"sideChat\";\ndriver vehicle player globalChat \"globalChat\";\ndriver vehicle player groupChat \"groupChat\";\nvehicle player vehicleChat \"vehicleChat\";\ndriver vehicle player commandChat \"commandChat\";\ndriver vehicle player customChat [1, \"customChat\"];\nsystemChat \"systemChat\";\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "text",
                            "description": "`String` - message to transmit"
                        }
                    ],
                    "outline": "`systemChat` text",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/systemChat"
        },
        "configuration": {
            "label": "systemChat",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the currently selected system of units.\n* 0: Metric\n* 1: Mixed (ground vehicles use Metric / air vehicles use Imperial)\n* 2: Imperial",
            "examples": [
                {
                    "text": "```sqf\n_system = systemOfUnits;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**systemOfUnits**",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/systemOfUnits"
        },
        "configuration": {
            "label": "systemOfUnits",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns system time.",
            "examples": [
                {
                    "text": "```sqf\nprivate _currentTime = systemTime;\n```"
                },
                {
                    "text": "```sqf\nsystemTime apply {if (_x < 10) then {\"0\" + str _x} else {str _x}}; // [\"2021\",\"05\",\"03\",\"14\",\"09\",\"37\",\"593\"]\n```"
                },
                {
                    "text": "```sqf\nsystemTime params [\"_year\", \"_month\", \"_day\", \"_hour\", \"_minute\", \"_second\", \"_millisecond\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`systemTime`",
                    "returns": "`Array` of `Number`s in format [year, month, day, hour, minute, second, millisecond]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/systemTime"
        },
        "configuration": {
            "label": "systemTime",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `systemTime` according to **U**niversal **T**ime **C**oordinated time scale.",
            "examples": [
                {
                    "text": "```sqf\nprivate _UKTime = systemTimeUTC;\n```"
                },
                {
                    "text": "```sqf\nsystemTimeUTC apply { if (_x < 10) then { \"0\" + str _x } else { str _x } }; // [\"2021\",\"05\",\"03\",\"14\",\"09\",\"37\",\"593\"]\n```"
                },
                {
                    "text": "```sqf\n\nprivate _timeUTC = systemTimeUTC;\nprivate _time = systemTime;\nprivate _timeDiffH = (_time select 3) - (_timeUTC select 3);\nprivate _timeDiffM = (_time select 4) - (_timeUTC select 4);\nif (_timeDiffM < 0) then\n{\n\t_timeDiffH = _timeDiffH - 1;\n\t_timeDiffM = _timeDiffM + 60;\n};\nif (_timeDiffH < -12) then\n{\n\t_timeDiffH = _timeDiffH + 24;\n};\nif (_timeDiffH > 12) then\n{\n\t_timeDiffH = _timeDiffH - 24;\n};\nprivate _timeZone = [_timeDiffH, _timeDiffM]; // hour (_timeDiffH) is in range -12..+12\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`systemTimeUTC`",
                    "returns": "`Array` of `Number`s in format [year, month, day, hour, minute, second, millisecond]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/systemTimeUTC"
        },
        "configuration": {
            "label": "systemTimeUTC",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Tangent of x, argument in [Degrees](https://community.bistudio.com/wiki/Number%23Degrees).",
            "examples": [
                {
                    "text": "```sqf\n_tangent = tan 45;\n```\n \nResult is 1"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "x",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`tan` x",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/tan"
        },
        "configuration": {
            "label": "tan",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns unit's knowledge about target.",
            "examples": [
                {
                    "text": "```sqf\nprivate _allInfo = _soldierOne targetKnowledge _jeepOne;\n_allInfo params [\"_knownByGroup\", \"_knownByUnit\", \"_lastSeen\", \"_lastThreat\", \"_side\", \"_errorMargin\", \"_position\"];\n```"
                },
                {
                    "text": "```sqf\nprivate _posError = (_soldierOne targetKnowledge _jeepOne) select 5;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "target",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "unit `targetKnowledge` target",
                    "returns": "`Array` in format [knownByGroup, knownByUnit, lastSeen, lastThreat, side, errorMargin, position]:\n* knownByGroup: `Boolean` - target known by group\n* knownByUnit: `Boolean` - target known by the unit\n* lastSeen: `Number` - last time the target was seen by the unit\n* lastThreat: `Number` - last time the target endangered the unit\n* side: `Side` - target side\n* errorMargin: `Number` - position error\n* position: `Array` - target position in format `Position`\n* **(Arma 3)**: `Boolean` - target is ignored (`ignoreTarget`)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/targetKnowledge"
        },
        "configuration": {
            "label": "targetKnowledge",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Retrieves list of given unit targets matching specified filter. If the filter is not specified, all targets are returned.\n**NOTE**: If a unit is provided, the unit itself will be excluded from results. If a group is provided, its units will be excluded (even if renegades).",
            "examples": [
                {
                    "text": "```sqf\nprivate _targets = _unit targets [false, 300, [east, sideEnemy]]; // all targets of east or renegade side in 300m\n```"
                },
                {
                    "text": "```sqf\nprivate _targets = _unit targets [true, 300]; // enemy targets in 300m\n```"
                },
                {
                    "text": "```sqf\nprivate _targets = _unit targets []; // all targets\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitOrGroup",
                            "description": "`Object` or {{GVI|arma3|2.12"
                        },
                        {
                            "name": "enemyOnly",
                            "description": "`Boolean` - (Optional, default `false`) `true` to include only enemy targets, `false` to include all targets"
                        },
                        {
                            "name": "maxDistance",
                            "description": "`Number` - (Optional, default -1) maximum **2D** distance based on target's expected position; use 0 to ignore the filter"
                        },
                        {
                            "name": "sides",
                            "description": "`Array` - (Optional, default `**[]**`) array of accepted sides; use `**[]**` to ignore the side filter"
                        },
                        {
                            "name": "maxAge",
                            "description": "`Number` - (Optional, default 0) max. target age, targets that are known to unit for longer than maxAge are ignored; use 0 to ignore the maxAge filter"
                        },
                        {
                            "name": "alternateCenter",
                            "description": "`Array` - (Optional, default _unitOrGroup_<nowiki/>'s position) alternate (2D or 3D) position used for **2D** distance check"
                        }
                    ],
                    "outline": "unitOrGroup `targets` [enemyOnly, maxDistance, sides, maxAge, alternateCenter]",
                    "returns": "`Array` - _unitOrGroup_<nowiki/>'s targets matching the criteria"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/targets"
        },
        "configuration": {
            "label": "targets",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Aggregate candidates.",
            "examples": [
                {
                    "text": "```sqf\n_aggregation = [player, sideEnemy, \"\", [], 0] targetsAggregate (player targetsQuery [objNull, sideUnknown, \"\", [], 0]);\n/*\n\treturns e.g\n\t[\n\t\t[\n\t\t\t[\"COUNT0\", 1],\n\t\t\t[\"SIDE0\", WEST],\n\t\t\t[\"UNIT0\", \"B_Soldier_F\"],\n\t\t\t[\"PLACE0\", [[<null>,<null>], 0, <null>]],\n\t\t\t[\"TIME0\", [-0.9, -0.9]],\n\t\t\t[\"UCOUNT0\", 1],\n\t\t\t[\"UTYPE0\", ...\n\t\t]\n\t]\n*/\n\n```\n\nwith e.g\n* one Orca Helicopter\n* one T-100 Varsuk tank\n* one T-140K Angara tank\n* one MBT-52 Kuma tank (independent, set as enemy to blufor)\n\n```sqf\n\n/*\n\t[\n\t\t[[\"COUNT0\",1],[\"SIDE0\",EAST],[\"UNIT0\",\"O_Heli_Light_02_dynamicLoadout_F\"],[\"PLACE0\",[[<null>,<null>],0,<null>]],[\"TIME0\",[-0.982,-0.982]],[\"UCOUNT0\",1],[\"UTYPE0\",\"O_Heli_Light_02_dynamicLoadout_F\"]],\n\t\t[[\"COUNT1\",1],[\"SIDE1\",GUER],[\"UNIT1\",\"I_MBT_03_cannon_F\"],[\"PLACE1\",[[<null>,<null>],0,<null>]],[\"TIME1\",[-0.982,-0.982]],[\"UCOUNT1\",1],[\"UTYPE1\",\"I_MBT_03_cannon_F\"]],\n\t\t[[\"COUNT2\",2],[\"SIDE2\",EAST],[\"UNIT2\",\"*Tank_F\"],[\"PLACE2\",[[<null>,<null>],4.34554,<null>]],[\"TIME2\",[-0.982,-0.982]],[\"UCOUNT2\",2],[\"UTYPE2\",\"*O_MBT_02_cannon_F\"]]]\n\t[\n\t\t[[\"COUNT0\",1],[\"SIDE0\",EAST],[\"UNIT0\",\"O_Heli_Light_02_dynamicLoadout_F\"],[\"PLACE0\",[[<null>,<null>],0,<null>]],[\"TIME0\",[-1,-1]],[\"UCOUNT0\",1],[\"UTYPE0\",\"O_Heli_Light_02_dynamicLoadout_F\"]],\n\t\t[[\"COUNT1\",1],[\"SIDE1\",GUER],[\"UNIT1\",\"I_MBT_03_cannon_F\"],[\"PLACE1\",[[<null>,<null>],0,<null>]],[\"TIME1\",[-1,-1]],[\"UCOUNT1\",1],[\"UTYPE1\",\"I_MBT_03_cannon_F\"]],\n\t\t[[\"COUNT2\",2],[\"SIDE2\",EAST],[\"UNIT2\",\"*Tank_F\"],[\"PLACE2\",[[<null>,<null>],4.34565,<null>]],[\"TIME2\",[-1,-1]],[\"UCOUNT2\",2],[\"UTYPE2\",\"*O_MBT_02_cannon_F\"]]\n\t]\n*/\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "speaker",
                            "description": "`Object`"
                        },
                        {
                            "name": "side",
                            "description": "`Side` - if provided, a target with a side matching _side_ will see it replaced by `**\"$\"**`"
                        },
                        {
                            "name": "classname",
                            "description": "`String` - `**CfgVehicles**` classname - if provided, a target with a type matching _classname_ will see it replaced by `**\"$\"**`"
                        },
                        {
                            "name": "position",
                            "description": "`Array` format `Position` (Z-value is ignored) - centre of a hardcoded 200m radius"
                        },
                        {
                            "name": "timeMax",
                            "description": "`Number` - max age of the target"
                        },
                        {
                            "name": "candidates",
                            "description": "`Array` -  array of targets in format [<nowiki/>[accuracy, target, targetSide, targetType, targetPosition, targetAge], ...] where:\n* accuracy: `Number` - a coefficient, which reflects how close the returned result to the query filter. Range: 0..1, 1 being the best match\n* target: `Object` - the actual target object\n* targetSide: `Side` - side of the target\n* targetType: `String` - target `typeOf`\n* targetPosition: `Array` format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) - [x,y] of the target \n* targetAge: `Number` - the actual target age in seconds (can be negative)\n**NOTE**: See `targetsQuery` format."
                        }
                    ],
                    "outline": "[speaker, side, classname, position, timeMax] `targetsAggregate` candidates",
                    "returns": "`Array` format [countInfo, sideInfo, unitInfo, placeInfo, timeInfo, uCountInfo, uTypeInfo]:\n* countInfo: `Array` - [<nowiki/>`format` [\"COUNT%1\", index], count on index]\n* sideInfo: `Array` - [<nowiki/>`format` [\"SIDE%1\", index], side or string] if string then $ == \"equal to queried\"\n* unitInfo: `Array` - [<nowiki/>`format` [\"UNIT%1\", index], string]  $ == \"equal to queried\", otherwise the \"type\" of the unit? Should be CfgVehicles config type I think\n* placeInfo: `Array` - [<nowiki/>`format` [\"PLACE%1\", index], [[centerX, centerY], radius]]\n* timeInfo: `Array` - [<nowiki/>`format` [\"TIME%1\", index], string or array] if string then $ == \"equal to queried\", otherwise [timeMin, timeMax]\n* uCountInfo: `Array` - [<nowiki/>`format` [\"UCOUNT%1\", index], scalar count]\n* uTypeInfo: `Array` - [<nowiki/>`format` [\"UTYPE%1\", index], string name] a classname? Will be format [\"*%1\", classname] if count &gt; 1"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/targetsAggregate"
        },
        "configuration": {
            "label": "targetsAggregate",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns sorted array of targets, **known** to the enquirer (including own troops), where the accuracy coefficient reflects how close the result matches the query. This command could be CPU intensive.",
            "examples": [
                {
                    "text": "Return all known targets for player:\n\n```sqf\n_targets = player targetsQuery [objNull, sideUnknown, \"\", [], 0];\n```"
                },
                {
                    "text": "Prioritise all known OPFOR targets and return targets less than 10 seconds old:\n\n```sqf\n_targets = player targetsQuery [objNull, east, \"\", [], 10];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "enquirer",
                            "description": "`Object` - for whom the query will be made"
                        },
                        {
                            "name": "targetIgnore",
                            "description": "`Object` - target object to exclude from results. `objNull` - return every target"
                        },
                        {
                            "name": "targetSide",
                            "description": "`Side` - desired side of the target. `sideUnknown` - any side"
                        },
                        {
                            "name": "targetType",
                            "description": "`String` - desired target `typeOf`. \"\" - any type"
                        },
                        {
                            "name": "targetPosition",
                            "description": "`Array` - desired target position in format of [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position3D](https://community.bistudio.com/wiki/Position%23Introduction) (only [x,y] is considered). Position tolerance is 200m from the actual position of the target. [] - any position"
                        },
                        {
                            "name": "targetMaxAge",
                            "description": "`Number` - desired max age of the target. This will limit returned results to the targets younger than specified age. 0 - any age"
                        }
                    ],
                    "outline": "enquirer `targetsQuery` [targetIgnore, targetSide, targetType, targetPosition, targetMaxAge]",
                    "returns": "`Array` - **sorted** array of returned targets in the following format:\n<nowiki>[</nowiki>[accuracy, target, targetSide, targetType, targetPosition, targetAge],...] where:\n* accuracy: `Number` - a coefficient, which reflects how close the returned result to the query filter. Range: 0 - 1 (1 - best match)\n* target: `Object` - the actual target object\n* targetSide: `Side` - side of the target\n* targetType: `String` - target `typeOf`\n* targetPosition: `Array` - [x,y] of the target \n* targetAge: `Number` - the actual target age in seconds (can be negative)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/targetsQuery"
        },
        "configuration": {
            "label": "targetsQuery",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns true if the task is flagged to be always visible or false if not.",
            "examples": [
                {
                    "text": "```sqf\n_isAlwaysVisible = taskAlwaysVisible (currentTask player);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "task",
                            "description": "`Task`"
                        }
                    ],
                    "outline": "`taskAlwaysVisible` task",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/taskAlwaysVisible"
        },
        "configuration": {
            "label": "taskAlwaysVisible",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return the child tasks of the specified task.",
            "examples": [
                {
                    "text": "```sqf\n_children = taskChildren \"someTask\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "task",
                            "description": "`Task`"
                        }
                    ],
                    "outline": "`taskChildren` task",
                    "returns": "`Array` of children `Task`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/taskChildren"
        },
        "configuration": {
            "label": "taskChildren",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return if task is completed. (state Succeeded, Failed or Canceled)",
            "examples": [
                {
                    "text": "```sqf\n\n_task = createSimpleTask [\"task_1\"];\n_done = taskCompleted _task;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "task",
                            "description": "`Task`"
                        }
                    ],
                    "outline": "`taskCompleted` task",
                    "returns": "`Boolean` - `true` if task has been Succeeded, Failed or Canceled"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/taskCompleted"
        },
        "configuration": {
            "label": "taskCompleted",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns custom data attached to the local task or an empty array if there are no custom data attached.",
            "examples": [
                {
                    "text": "```sqf\n_data = taskCustomData \"someTask\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "task",
                            "description": "`Task`"
                        }
                    ],
                    "outline": "`taskCustomData` task",
                    "returns": "`Array` of string - iconPath, iconText, descriptionText"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/taskCustomData"
        },
        "configuration": {
            "label": "taskCustomData",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the sub-parts of the task description. The returned Array is in format [Task description, Task title, Task waypoint description].",
            "examples": [
                {
                    "text": "```sqf\n_taskDescArray = taskDescription _task;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "task",
                            "description": "`Task`"
                        }
                    ],
                    "outline": "`taskDescription` task",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/taskDescription"
        },
        "configuration": {
            "label": "taskDescription",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the position of the task (as specified by destination parameter in config).",
            "examples": [
                {
                    "text": "```sqf\nif (!isNull currentTask player) then { hint str taskDestination currentTask player };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "task",
                            "description": "`Task`"
                        }
                    ],
                    "outline": "`taskDestination` task",
                    "returns": "`Array` (A3 1.28 Returns `Nothing` if identity is `taskNull`)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/taskDestination"
        },
        "configuration": {
            "label": "taskDestination",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Shows info about new, changed or failed task. The text can contain several lines. `**\\n**` is used to set a line return.\n**Arma 3**: It is recommended to use `BIS_fnc_showNotification` in order to maintain Arma 3's visual style.",
            "examples": [
                {
                    "text": "```sqf\ntaskHint [\"Task failed.\\nBad job!\", [1, 0, 0, 1], \"taskFailed\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "text",
                            "description": "`String`"
                        },
                        {
                            "name": "colour",
                            "description": "`Array` format [[Color|Color (RGBA)]]"
                        },
                        {
                            "name": "icon",
                            "description": "`String` - one of:\n{{Columns|2|\n* \"taskNew\"\n* \"taskCurrent\"\n* \"taskDone\"\n* \"taskFailed\"\n}}"
                        }
                    ],
                    "outline": "`taskHint` [text, colour, icon]",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/taskHint"
        },
        "configuration": {
            "label": "taskHint",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns model space position for the task marker",
            "examples": [
                {
                    "text": "```sqf\n_offset = taskMarkerOffset player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`taskMarkerOffset` unit",
                    "returns": "`Array` - offset in format [x, y, z]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/taskMarkerOffset"
        },
        "configuration": {
            "label": "taskMarkerOffset",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the name of the given task.",
            "examples": [
                {
                    "text": "```sqf\nprivate _taskName = taskName _mytask;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "task",
                            "description": "`Task`"
                        }
                    ],
                    "outline": "`taskName` task",
                    "returns": "`String` - task name"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/taskName"
        },
        "configuration": {
            "label": "taskName",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "A non-existing `Task`. To compare non-existent tasks use `isNull` or `isEqualTo`:\n\n```sqf\ntaskNull == taskNull;\t\t\t// false\nisNull taskNull;\t\t\t\t// true\ntaskNull isEqualTo taskNull;\t// true\n```",
            "examples": [
                {
                    "text": "```sqf\n!isNull taskNull; // false\n```"
                },
                {
                    "text": "```sqf\nstr taskNull; // no task\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`taskNull`",
                    "returns": "`Task`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/taskNull"
        },
        "configuration": {
            "label": "taskNull",
            "grammarType": "null-literal"
        }
    },
    {
        "documentation": {
            "description": "Returns the parent task of the specified task.",
            "examples": [
                {
                    "text": "```sqf\n_parent = taskParent \"someTask\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "task",
                            "description": "`Task`"
                        }
                    ],
                    "outline": "`taskParent` task",
                    "returns": "`Task`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/taskParent"
        },
        "configuration": {
            "label": "taskParent",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Send a result of the task to the task sender.",
            "examples": [
                {
                    "text": "```sqf\ntaskResult (player createSimpleTask [\"NewTask\"]);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "task",
                            "description": "`Task`"
                        }
                    ],
                    "outline": "`taskResult` task",
                    "returns": "`Array` - format [state, result] (see `setTaskResult`)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/taskResult"
        },
        "configuration": {
            "label": "taskResult",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the current state of a task.",
            "examples": [
                {
                    "text": "```sqf\n\ntskSomeTask = player createSimpleTask [\"NewTask\"];\nhint format[\"Taskstate: %1\", taskState tskSomeTask];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "task",
                            "description": "`Task` - the task you want to query"
                        }
                    ],
                    "outline": "`taskState` task",
                    "returns": "`String` - current state of task - can be one of:\n* \"None\"\n* \"Created\"\n* \"Assigned\"\n* \"Succeeded\"\n* \"Failed\"\n* \"Canceled\""
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/taskState"
        },
        "configuration": {
            "label": "taskState",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the type of the given task. A new task returns \"Default\" for the type.",
            "examples": [
                {
                    "text": "```sqf\n_type = taskType (currentTask player);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "task",
                            "description": "`Task`"
                        }
                    ],
                    "outline": "`taskType` task",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/taskType"
        },
        "configuration": {
            "label": "taskType",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return an agent for given person.",
            "examples": [
                {
                    "text": "```sqf\n_agent = teamMember player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "person",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`teamMember` person",
                    "returns": "[Team Member](https://community.bistudio.com/wiki/Team%20Member)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/teamMember"
        },
        "configuration": {
            "label": "teamMember",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "A non-existent [Team Member](https://community.bistudio.com/wiki/Team%20Member). To compare non-existent team members use `isNull` or `isEqualTo`:\n\n```sqf\n\nteamMemberNull == teamMemberNull;\t\t\t// false\nisNull teamMemberNull;\t\t\t\t\t\t// true\nteamMemberNull isEqualTo teamMemberNull;\t// true\n\n```",
            "examples": [
                {
                    "text": "```sqf\n!isNull teamMemberNull; // false\n```"
                },
                {
                    "text": "```sqf\nstr teamMemberNull; // <NULL - team member>\n```"
                },
                {
                    "text": "```sqf\n\nif (_teamMember isEqualTo teamMemberNull) then\n{\n\thint \"team member is null\";\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`teamMemberNull`",
                    "returns": "[Team Member](https://community.bistudio.com/wiki/Team%20Member)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/teamMemberNull"
        },
        "configuration": {
            "label": "teamMemberNull",
            "grammarType": "null-literal"
        }
    },
    {
        "documentation": {
            "description": "Return a name of given [team](https://community.bistudio.com/wiki/Team).",
            "examples": [
                {
                    "text": "```sqf\n_name = teamName _team;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "team",
                            "description": "[Team Member](https://community.bistudio.com/wiki/Team%20Member)"
                        }
                    ],
                    "outline": "`teamName` team",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/teamName"
        },
        "configuration": {
            "label": "teamName",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return a list of teams in the current mission.",
            "examples": [
                {
                    "text": "```sqf\n_teams = teams;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**teams**",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/teams"
        },
        "configuration": {
            "label": "teams",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Invoke the [Team Switch](https://community.bistudio.com/wiki/Team%20Switch) dialog (force it even when conditions are not met).\nThere has to be at least one playable unit for team switch to work, and for this command to work in MP, respawn type in [[Description.ext|description.ext]] should be 5 (SIDE).\n**NOTE**: When player switches and leaves behind AI unit, you need to enable \"TeamSwitch\" AI on it <sqf inline>_unit enableAI \"TeamSwitch\" so that the unit continues with `waypoints`.",
            "examples": [
                {
                    "text": "```sqf\nteamSwitch;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`teamSwitch`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/teamSwitch"
        },
        "configuration": {
            "label": "teamSwitch",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check if [Team Switch](https://community.bistudio.com/wiki/Team%20Switch) is currently enabled.\nTeam Switch is enabled by default.",
            "examples": [
                {
                    "text": "```sqf\n_isTeamSwitchEnabled = teamSwitchEnabled;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`teamSwitchEnabled`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/teamSwitchEnabled"
        },
        "configuration": {
            "label": "teamSwitchEnabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a type of given team.",
            "examples": [
                {
                    "text": "```sqf\n_type = teamType _team;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "team",
                            "description": "[Team Member](https://community.bistudio.com/wiki/Team%20Member)"
                        }
                    ],
                    "outline": "`teamType` team",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/teamType"
        },
        "configuration": {
            "label": "teamType",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Terminates (aborts) `spawn`ed or `execVM`ed script.\n**IMPORTANT**:  The given script will not terminate immediately upon `terminate` command execution, it will do so the next time the script is processed by the [scheduler](https://community.bistudio.com/wiki/Scheduler)",
            "examples": [
                {
                    "text": "```sqf\n_script = [] execVM \"script.sqf\";\nsleep 5;\nterminate _script;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "scriptHandle",
                            "description": "[Script Handle](https://community.bistudio.com/wiki/Script%20Handle)"
                        }
                    ],
                    "outline": "`terminate` scriptHandle",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "FSMHandle",
                            "description": "`Number` - The FSM script must be launched with 'allowTermination' flag for this command to work (see `execFSM`)."
                        }
                    ],
                    "outline": "`terminate` FSMHandle",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/terminate"
        },
        "configuration": {
            "label": "terminate",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "Checks for intersection of terrain between two AGL positions. Returns `true` if intersects with terrain. For ASL variant see `terrainIntersectASL`.",
            "examples": [
                {
                    "text": "```sqf\n_intersects = terrainIntersect [getPos player, getPos chopper];\n```"
                },
                {
                    "text": "```sqf\n_intersects = terrainIntersect [position player, position enemy1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "start",
                            "description": "`Array` format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) - start position"
                        },
                        {
                            "name": "end",
                            "description": "`Array` format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) - end position"
                        }
                    ],
                    "outline": "`terrainIntersect` [start, end]",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/terrainIntersect"
        },
        "configuration": {
            "label": "terrainIntersect",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks for intersection of terrain between two ASL positions. Returns `true` if intersects with terrain.\nFor AGL variant, see `terrainIntersect`.",
            "examples": [
                {
                    "text": "```sqf\n_intersects = terrainIntersectASL [getPosASL player, getPosASL chopper];\n```"
                },
                {
                    "text": "```sqf\n_intersects = terrainIntersectASL [eyePos player, eyePos enemy1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "start",
                            "description": "`Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) - start position"
                        },
                        {
                            "name": "end",
                            "description": "`Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) - end position"
                        }
                    ],
                    "outline": "`terrainIntersectASL` [start, end]",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/terrainIntersectASL"
        },
        "configuration": {
            "label": "terrainIntersectASL",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks for intersection of terrain between two ASL positions. Same as `terrainIntersectASL` but returns the intersection ASL position.",
            "examples": [
                {
                    "text": "```sqf\n_posASL = terrainIntersectAtASL [eyePos player, getPosASL chopper];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "start",
                            "description": "`Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) - start position"
                        },
                        {
                            "name": "end",
                            "description": "`Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) - end position"
                        }
                    ],
                    "outline": "`terrainIntersectAtASL` [start, end]",
                    "returns": "`Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) - intersect position"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/terrainIntersectAtASL"
        },
        "configuration": {
            "label": "terrainIntersectAtASL",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates a structured text containing the given plain text if argument is `String`. Use `setAttributes` to set additional [ attributes](https://community.bistudio.com/wiki/Structured_Text%23Attributes%20) on the text. If the argument is `location`, returns location's text value (see Alt Syntax).",
            "examples": [
                {
                    "text": "```sqf\n_stxt2 = text \"Hello world.\";\n```"
                },
                {
                    "text": "```sqf\n_townName = text myTownLocation;\n```"
                },
                {
                    "text": "```sqf\n_loc = text nearestLocation [position player, \"NameMarine\"]; //\"Marina Bay\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "string",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`text` string",
                    "returns": "[Structured Text](https://community.bistudio.com/wiki/Structured%20Text)"
                },
                {
                    "parameters": [
                        {
                            "name": "location",
                            "description": "`Location`"
                        }
                    ],
                    "outline": "`text` location",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/text"
        },
        "configuration": {
            "label": "text",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Dump argument value to debugging output. \n\n**WARNING**: This command is non-functional in the retail version",
            "examples": [
                {
                    "text": "```sqf\ntextLog player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "anything",
                            "description": "`Anything`"
                        }
                    ],
                    "outline": "`textLog` anything",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/textLog"
        },
        "configuration": {
            "label": "textLog",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Debugging output.\n**WARNING**: This command is non-functional in the retail version",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "format",
                            "description": "`String`"
                        },
                        {
                            "name": "arg1",
                            "description": "`Anything`"
                        },
                        {
                            "name": "arg2",
                            "description": "`Anything`"
                        },
                        {
                            "name": "argN",
                            "description": "`Anything`"
                        }
                    ],
                    "outline": "`textLogFormat` [format, arg1, arg2, argN]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/textLogFormat"
        },
        "configuration": {
            "label": "textLogFormat",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Identical to `tan`",
            "examples": [
                {
                    "text": "```sqf\n_tangent = tg 45; // Result is 1\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "x",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`tg` x",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/tg"
        },
        "configuration": {
            "label": "tg",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Links an [If Type](https://community.bistudio.com/wiki/If%20Type) with `Code` to be executed if said [If Type](https://community.bistudio.com/wiki/If%20Type)'s condition is `true`; otherwise, \"`else`\" code is executed if provided.\n\nThe alternative syntax allows to set \"`then`\" code and \"`else`\" code in one array.\n**NOTE**: Variables declared inside _thenCode_ are private to that code block - see [Variables - Local Variables Scope](https://community.bistudio.com/wiki/Variables#Local_Variables_Scope).",
            "examples": [
                {
                    "text": "```sqf\nif (a > b) then { hint \"a is greater than b!\"; };\n```"
                },
                {
                    "text": "```sqf\n\nprivate _c = 0;\nif (_a > _b) then\n{\n\t_c = 1;\n}\nelse\n{\n\t_c = 2;\n};\n\n```"
                },
                {
                    "text": "```sqf\nif (alive player) then [{ hint \"player is alive\"; }, { hint \"player is dead\"; }];\n```"
                },
                {
                    "text": "```sqf\nprivate _value = if (alive player) then { 1 } else { 0 };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "ifType",
                            "description": "[If Type](https://community.bistudio.com/wiki/If%20Type)"
                        },
                        {
                            "name": "thenCode",
                            "description": "`Code` or `Array` of `Code`:\n* `Code` - code block to execute if _ifType_<nowiki/>'s condition is `true`\n* `Array` of `Code` - array of two `Code` elements in format [thenCode, elseCode]; see _Example 3_"
                        }
                    ],
                    "outline": "ifType `then` thenCode",
                    "returns": "`Anything` - result of the executed code"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/then"
        },
        "configuration": {
            "label": "then",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "Throws an exception. The exception is processed by first `catch` block. This command will terminate further execution of the code.\n\n**IMPORTANT**:  Avoid using alternative shorthand syntax if you are planning on preparing your exception information dynamically, as it will have to be generated first regardless of the condition of the `if` statement before it, as shown in _Example 3_.",
            "examples": [
                {
                    "text": "```sqf\ntry {throw \"invalid argument\"} catch {hint str _exception};\n```"
                },
                {
                    "text": "```sqf\n123 try { if (_this != 123) throw \"invalid argument\" } catch { hint str _exception };\n```"
                },
                {
                    "text": "The correct usage of shorthand alt syntax:\n\n```sqf\n\ntry {\n\tif (a > b) throw \"Error: some error\"; // OK\n\t// the command argument is static\n} catch {\n\thint str _exception;\n};\n\ntry {\n\t_someFunc = {\n\t\t// ...\n\t};\n\tif (a > b) throw (call _someFunc); // NOT OK\n\t// The command argument is dynamic\n\t// _someFunc is called first to get the value regardless of (a > b) outcome\n} catch {\n\thint str _exception;\n};\n\ntry {\n\t_someFunc = {\n\t\t// ...\n\t};\n\tif (a > b) then {throw (call _someFunc)}; /// OK\n\t// the command argument is dynamic\n\t// _someFunc is only called when (a > b) is true\n} catch {\n\thint str _exception;\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "expression",
                            "description": "`Anything`"
                        }
                    ],
                    "outline": "`throw` expression",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "if (condition)",
                            "description": "[If Type](https://community.bistudio.com/wiki/If%20Type)  - if (condition) returns `true`, \"exception\" is thrown"
                        },
                        {
                            "name": "exception",
                            "description": "`Anything` - value that will be put into __exception_ variable inside `catch` block"
                        }
                    ],
                    "outline": "if (condition) `throw` exception",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/throw"
        },
        "configuration": {
            "label": "throw",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "Returns all throwables in unit inventory in `currentThrowable` format.",
            "examples": [
                {
                    "text": "```sqf\nthrowables player;\n/*\n\t[\n\t\t[\"HandGrenade\",\"HandGrenadeMuzzle\",[1e+007,0]],\n\t\t[\"SmokeShell\",\"SmokeShellMuzzle\",[1e+007,0]],\n\t\t[\"SmokeShellGreen\",\"SmokeShellGreenMuzzle\",[1e+007,0]],\n\t\t[\"Chemlight_green\",\"ChemlightGreenMuzzle\",[1e+007,0]],\n\t\t[\"Chemlight_green\",\"\",[1e+007,0]],\n\t\t[\"HandGrenade\",\"\",[1e+007,0]]\n\t]\n*/\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`throwables` unit",
                    "returns": "`Array` - array of throwables in format [<nowiki>[</nowiki>magazineName, muzzleName, id], ...], where:\n* magazineName: `String`\n* muzzleName: `String`\n* id: `Array` of `Number` pairs: [itemWorldID, creatorID]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/throwables"
        },
        "configuration": {
            "label": "throwables",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns time elapsed since mission started (in seconds). The value is different on each client. If you need unified time, use `serverTime`.",
            "examples": [
                {
                    "text": "```sqf\nprivate _future = time + 30;\nwaitUntil { time >= _future };  // continue after 30 seconds\n```"
                },
                {
                    "text": "Wait until mission fully started:\n\n```sqf\nwaitUntil { time > 0 };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`time`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/time"
        },
        "configuration": {
            "label": "time",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the value set with `setTimeMultiplier`.",
            "examples": [
                {
                    "text": "```sqf\n_multiplier = timeMultiplier;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**timeMultiplier**",
                    "returns": "`Number` - current time multiplier"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/timeMultiplier"
        },
        "configuration": {
            "label": "timeMultiplier",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Displays text on screen.\n{{Feature|obsolete|`cutText` should be used instead.}}",
            "examples": [
                {
                    "text": "```sqf\ntitleCut [\"Hello, how are you?\",\"Plain Down\",3];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "text",
                            "description": "`String` - text to be displayed on screen"
                        },
                        {
                            "name": "type",
                            "description": "`String` - can be one of [Title Effect Type](https://community.bistudio.com/wiki/Title%20Effect%20Type)s"
                        },
                        {
                            "name": "speed",
                            "description": "`Number` - (Optional, default 1)"
                        }
                    ],
                    "outline": "`titleCut` [text, type, speed]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/titleCut"
        },
        "configuration": {
            "label": "titleCut",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Terminate the title effect and set duration of the fade out phase to the given time. Same as `cutFadeOut` but for the title layer.",
            "examples": [
                {
                    "text": "```sqf\ntitleText [\"Hi\", \"plain\"];\ntitleFadeOut 2;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "duration",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`titleFadeOut` duration",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/titleFadeOut"
        },
        "configuration": {
            "label": "titleFadeOut",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Shows object defined in global config in CfgTitles",
            "examples": [
                {
                    "text": "```sqf\ntitleObj [\"BISLogo\", \"PLAIN\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "class",
                            "description": "`String` - defined in <sqf inline>configFile >> \"CfgTitles\" >> class"
                        },
                        {
                            "name": "type",
                            "description": "`String` - one of \"PLAIN\", \"PLAIN DOWN\", \"BLACK\", \"BLACK FADED\", \"BLACK OUT\", \"BLACK IN\", \"WHITE OUT\" and \"WHITE IN\". See [Title Effect Type](https://community.bistudio.com/wiki/Title%20Effect%20Type)s for more information about these values"
                        },
                        {
                            "name": "speed",
                            "description": "`Number` - (Optional, default -1) time in seconds to fade in resource"
                        },
                        {
                            "name": "showInMap",
                            "description": "`Boolean` - (Optional, default `true`) `false` to hide the text when the map is opened"
                        }
                    ],
                    "outline": "`titleObj` [class, type, speed, showInMap]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/titleObj"
        },
        "configuration": {
            "label": "titleObj",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Displays a resource defined in RscTitles. Also see `cutRsc`, with these two commands you can show two different resources at once.\n**Arma 3**: **(Arma 3)** Multiple layers and map overlays are possible with `cutRsc` which provides more options and handles layers better.",
            "examples": [
                {
                    "text": "```sqf\ntitleRsc [\"BIS\", \"PLAIN\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "text",
                            "description": "`String` - the class name of the resource. (\"Default\" will remove the current resource)"
                        },
                        {
                            "name": "type",
                            "description": "`String` - can be one of: \"PLAIN\", \"PLAIN DOWN\", \"BLACK\", \"BLACK FADED\", \"BLACK OUT\", \"BLACK IN\", \"WHITE OUT\" and \"WHITE IN\"; see [Title Effect Type](https://community.bistudio.com/wiki/Title%20Effect%20Type)s for more information about these values"
                        },
                        {
                            "name": "speed",
                            "description": "`Number` - (Optional, default -1) time in seconds to fade in resource"
                        },
                        {
                            "name": "showInMap",
                            "description": "`Boolean` - (Optional, default `true`) `false` to hide the text when the map is opened"
                        }
                    ],
                    "outline": "`titleRsc` [text, type, speed, showInMap]",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/titleRsc"
        },
        "configuration": {
            "label": "titleRsc",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Displays text across the screen. If used along with `cutText` two different texts (in different type styles) can be shown at once.\nThe text can be displayed on multiple lines by using \"\\n\" new line characters (see _Example 3_).",
            "examples": [
                {
                    "text": "```sqf\ntitleText [\"Show this text\", \"PLAIN\"];\n```"
                },
                {
                    "text": "```sqf\ntitleText [\"Your message\", \"BLACK\", 2];\n```"
                },
                {
                    "text": "```sqf\ntitleText [\"line1\\nline2\\nline3\", \"PLAIN\"];\n```"
                },
                {
                    "text": "```sqf\ntitleText [\"<t color='#ff0000' size='5'>RED ALERT!</t><br/>***********\", \"PLAIN\", -1, true, true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "text",
                            "description": "`String` - text to be displayed"
                        },
                        {
                            "name": "type",
                            "description": "`String` - one of \"PLAIN\", \"PLAIN DOWN\", \"BLACK\", \"BLACK FADED\", \"BLACK OUT\", \"BLACK IN\", \"WHITE OUT\" and \"WHITE IN\". See [Title Effect Type](https://community.bistudio.com/wiki/Title%20Effect%20Type)s for more information about these values."
                        },
                        {
                            "name": "speed",
                            "description": "`Number` - (Optional, default -1) time in seconds to fade in resource"
                        },
                        {
                            "name": "showInMap",
                            "description": "`Boolean` - (Optional, default `true`) `false` to hide the text when the map is opened"
                        },
                        {
                            "name": "isStructuredText",
                            "description": "`Boolean` - (Optional, default `false`) `true` to switch support for [Structured Text](https://community.bistudio.com/wiki/Structured%20Text) formatting - see _Example 4_"
                        }
                    ],
                    "outline": "`titleText` [text, type, speed,  showInMap, isStructuredText]",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/titleText"
        },
        "configuration": {
            "label": "titleText",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Continue sequence of `for` construct. It sets the end value of the index variable.",
            "examples": [
                {
                    "text": "```sqf\n\nfor \"_i\" from 10 to 20 do\n{\n\thint str _i; // will hint from 10 to 20, spaced by 1 second\n\tsleep 1;\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "forType",
                            "description": "[For Type](https://community.bistudio.com/wiki/For%20Type)"
                        },
                        {
                            "name": "b",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "forType `to` b",
                    "returns": "[For Type](https://community.bistudio.com/wiki/For%20Type)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/to"
        },
        "configuration": {
            "label": "to",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "Converts the supplied `String` into an `Array` of `Number`s. The numbers in the created array are the decimal {{Link|https://en.wikipedia.org/wiki/Unicode|Unicode}} representations of characters.\n**Arma 3**: Since v2.04 this command can also handle `HashMap`s. See alternative syntax.",
            "examples": [
                {
                    "text": "```sqf\nhint format [\"%1\", toArray \"AaŒ\"];// Returns \"[65,97,338]\"\n```"
                },
                {
                    "text": "```sqf\ntoArray _hashMap params [\"_keys\", \"_values\"];\n```"
                },
                {
                    "text": "```sqf\n\nprivate _hashmap = [\"cow\", \"cat\", \"chicken\"] createHashMapFromArray [10000, 20000, 20000];\n_hashmap toArray true;\t// returns [[\"cow\", \"cat\", \"chicken\"], [10000, 20000, 20000]] - same as Syntax 2\n_hashmap toArray false;\t// returns [[\"cow\", 10000], [\"cat\", 20000], [\"chicken\", 20000]]\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "string",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`toArray` string",
                    "returns": "`Array`"
                },
                {
                    "parameters": [
                        {
                            "name": "hashMap",
                            "description": "`HashMap`"
                        }
                    ],
                    "outline": "`toArray` hashMap",
                    "returns": "`Array` - array in format <nowiki>[</nowiki>[key, key, ...], [value, value, ...]]"
                },
                {
                    "parameters": [
                        {
                            "name": "hashMap",
                            "description": "`HashMap`"
                        },
                        {
                            "name": "splitArrays",
                            "description": "`Boolean` - see return value"
                        }
                    ],
                    "outline": "hashMap `toArray` splitArrays",
                    "returns": "`Array` - array in either one of the following formats:\n* splitArrays: `true` - `**[<nowiki/>[key1, key2, ...], [value1, value2, ...]]**`\n* splitArrays: `false` - `**[<nowiki/>[key1, value1], [key2, value2], ...]**` This is **very inefficient** since the engine has to create many small arrays"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/toArray"
        },
        "configuration": {
            "label": "toArray",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Converts a number into a string, keeping the specified number of decimals. If the desired number of decimals is higher than the actual number, nulls are added to create the desired decimal length. This command is almost identical in behaviour to JavaScript {{Link|https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed|toFixed()}}\n\n\nThe alternative syntax acts as keyword and switches engine's `Number` to `String` global conversion into desired format, from the moment it is applied until the end of script.\nTo reset output back to default at any time, use `**toFixed -1**` - see _Example 5_.\n\n**NOTE**: Converted number is never presented in scientific notation unlike with other number to string commands. Also Arma's default string conversion limits numbers to 6 {{Link|https://en.wikipedia.org/wiki/Significant_figures|significant figures}}, whereas with this command it is possible to preserve some extra precision - see _Example 6_.",
            "examples": [
                {
                    "text": "```sqf\n123 toFixed 2; // \"123.00\"\n```"
                },
                {
                    "text": "```sqf\n2.34 toFixed 1; // \"2.3\"\n2.35 toFixed 1; // \"2.4\"\n```"
                },
                {
                    "text": "Convert position to string preserving position precision:\n\n```sqf\nfn_posToString = \n{\n\tformat [\n\t\t\"[%1,%2,%3]\", \n\t\t_this select 0 toFixed 8, \n\t\t_this select 1 toFixed 8, \n\t\t_this select 2 toFixed 8\n\t]\n};\nstr getPos player;\t\t\t\t\t// \"[3231.05,171.802,0.00143862]\"\ngetPos player call fn_posToString;\t// \"[3231.04882813,171.80192566,0.00143862]\"\n```"
                },
                {
                    "text": "Same as **Example 3** only using new alternative syntax:\n\n```sqf\nstr getPos player; // \"[3231.05,171.802,0.00143862]\"\ntoFixed 8;\nstr getPos player; // \"[3231.04882813,171.80192566,0.00143862]\"\n```"
                },
                {
                    "text": "```sqf\n\nsystemChat str position player;\t\t// [11580.3,11797.7,0.00146675]\ncall\n{\n\ttoFixed 6;\n\tsystemChat str position player;\t// [11580.341797,11797.737305,0.001467]\n};\nsystemChat str position player;\t\t// [11580.341797,11797.737305,0.001467]\ntoFixed -1;\nsystemChat str position player;\t\t// [11580.3,11797.7,0.00146675]\n\n```\n\nIdeal to be used when saving data to a database when more precise positioning is required."
                },
                {
                    "text": "```sqf\n\nstr (pi/100000);\t\t// \"3.14159e-005\" - scientific notation\n(pi/100000) toFixed 10;\t// \"0.0000314159\" - no scientific notation\nstr pi;\t\t\t\t\t// \"3.14159\" - 6 significant figures (default)\npi toFixed 6;\t\t\t// \"3.141593\" - forced to 7 significant figures\npi toFixed 7;\t\t\t// \"3.1415927\" - forced to 8 significant figures\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "number",
                            "description": "`Number` - number to convert"
                        },
                        {
                            "name": "decimals",
                            "description": "`Number` - number of decimals to display (range 0-20)"
                        }
                    ],
                    "outline": "number `toFixed` decimals",
                    "returns": "`String`"
                },
                {
                    "parameters": [
                        {
                            "name": "decimals",
                            "description": "`Number` - number of decimals to display (range 0-20). -1 to reset to default number of decimals"
                        }
                    ],
                    "outline": "`toFixed` decimals",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/toFixed"
        },
        "configuration": {
            "label": "toFixed",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Converts the supplied Unicode string to all lowercase characters. If the string doesn't have characters with [codes](https://community.bistudio.com/wiki/toArray) > 255, use `toLowerANSI`.",
            "examples": [
                {
                    "text": "```sqf\nhint toLower \"AaBb1\"; // returns \"aabb1\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "string",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`toLower` string",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/toLower"
        },
        "configuration": {
            "label": "toLower",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "[[File:ISO-8859-1.jpg|thumb|right|ISO-8859-1]]\nConverts the supplied string to all lower case characters fast (could be 3&times; faster than `toLower`).\n{{Link|https://stackoverflow.com/questions/701882/what-is-ansi-format/701920|ANSI}} in this case refers to {{Link|https://en.wikipedia.org/wiki/ISO/IEC_8859-1|ISO-8859-1}} code page.\nThe command is primary designed to convert characters with [ codes](https://community.bistudio.com/wiki/toArray%20) 0...127 however it will also convert other characters in 128...255 range as long as they are present in ISO-8859-1 codepage.\nFor Unicode alternative see `toLower`.",
            "examples": [
                {
                    "text": "```sqf\nhint toLowerANSI \"AaBb1\"; // returns \"aabb1\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "string",
                            "description": "`String` - string to convert"
                        }
                    ],
                    "outline": "`toLowerANSI` string",
                    "returns": "`String` - all lower case string"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/toLowerANSI"
        },
        "configuration": {
            "label": "toLowerANSI",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Converts the supplied `Array` of `Number`s into a `String` through {{Link|https://en.wikipedia.org/wiki/Unicode}} characters representation conversion, or provided `Code` to [compilable](https://community.bistudio.com/wiki/compile) `String`.",
            "examples": [
                {
                    "text": "```sqf\nhint toString [65,97,338]; // returns \"AaŒ\"\n```"
                },
                {
                    "text": "```sqf\n[\"test\", \"test\"] joinString toString [12345] splitString toString [12345]; // [\"test\", \"test\"]\n```"
                },
                {
                    "text": "```sqf\n\nprivate _compilableString = toString { hint \"it works!\" };\nhint _compilableString; // hints ' hint \"it works!\" '\nsleep 2;\ncall compile _compilableString; // hints ' it works! '\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array` of `Number`s\n**IMPORTANT**: If _array_ contains non-number values, the following error might appear in .rpt file: `**Bad conversion: scalar**`. See `parseSimpleArray` for multi-type array."
                        }
                    ],
                    "outline": "`toString` array",
                    "returns": "`String` - {{Link|https://en.wikipedia.org/wiki/Unicode}} numbers converted to `String` of characters"
                },
                {
                    "parameters": [
                        {
                            "name": "code",
                            "description": "`Code`"
                        }
                    ],
                    "outline": "`toString` code",
                    "returns": "`String` - [compilable](https://community.bistudio.com/wiki/compile) `String` from provided code"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/toString"
        },
        "configuration": {
            "label": "toString",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Converts the supplied Unicode string to all uppercase characters. If the string doesn't have characters with [codes](https://community.bistudio.com/wiki/toArray) > 255, use `toUpperANSI`.",
            "examples": [
                {
                    "text": "```sqf\nhint toUpper \"AaBb1\"; // returns \"AABB1\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "string",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`toUpper` string",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/toUpper"
        },
        "configuration": {
            "label": "toUpper",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "[[File:ISO-8859-1.jpg|thumb|right|ISO-8859-1]]Converts the supplied string to all upper case characters fast (could be 3x faster than `toUpper`).\n{{Link|https://stackoverflow.com/questions/701882/what-is-ansi-format/701920|ANSI}} in this case refers to {{Link|https://en.wikipedia.org/wiki/ISO/IEC_8859-1|ISO-8859-1}} code page.\nThe command is primary designed to convert characters with [ codes](https://community.bistudio.com/wiki/toArray%20) 0...127 however will also convert other characters in 128...255 range as long as they are present in ISO-8859-1 codepage.\nFor Unicode alternative see `toUpper`.",
            "examples": [
                {
                    "text": "```sqf\nhint toUpperANSI \"AaBb1\"; // returns \"AABB1\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "string",
                            "description": "`String` - string to convert"
                        }
                    ],
                    "outline": "`toUpperANSI` string",
                    "returns": "`String` - all upper case string"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/toUpperANSI"
        },
        "configuration": {
            "label": "toUpperANSI",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns true if the trigger has been activated.",
            "examples": [
                {
                    "text": "```sqf\nif (triggerActivated trg1) then { hint \"trigger trg1 activated!\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "trigger",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`triggerActivated` trigger",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/triggerActivated"
        },
        "configuration": {
            "label": "triggerActivated",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns trigger activation in the form [by, type, repeating]. \n\n**IMPORTANT**:  The trigger could be [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality) or remote but the result returned by this command will be for the trigger activation set up locally on the client that executed the command. See `createTrigger` for more info.",
            "examples": [
                {
                    "text": "```sqf\n_activation = triggerActivation someTrigger;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "trigger",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`triggerActivation` trigger",
                    "returns": "`Array`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/triggerActivation"
        },
        "configuration": {
            "label": "triggerActivation",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Triggers a munition such as shells, bullets, missiles, rockets, mines and bombs (_shotSubmunition/shotShell/shotBullet/shotMissile/shotRocket_) as if it did hit.\nIf ammo uses submunition, then creation of submunition will be triggered.",
            "examples": [
                {
                    "text": "```sqf\ntriggerAmmo bomb1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "munition",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`triggerAmmo` munition",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/triggerAmmo"
        },
        "configuration": {
            "label": "triggerAmmo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns currently monitored trigger area. Since Arma 3 v1.60, the command returns 3rd dimension for the monitored area. If height is not set, the value for it would be -1.\n**IMPORTANT**:  The trigger could be [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality) or remote but the result returned by this command will be for the trigger area set up locally on the client that executed the command. See `createTrigger` for more info.",
            "examples": [
                {
                    "text": "```sqf\n_area = triggerArea sensor1; // result is [200, 120, 45, false, -1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "trigger",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`triggerArea` trigger",
                    "returns": "`Array` in format [a, b, angle, isRectangle, c], where:\n* a - trigger area X size / 2\n* b - trigger area Y size / 2\n* angle\n* isRectangle\n* c - trigger area Z size / 2 (since Arma 3 v1.60)"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/triggerArea"
        },
        "configuration": {
            "label": "triggerArea",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns vehicle attached to the trigger (for example using `triggerAttachVehicle`).\n\n**IMPORTANT**: The trigger could be [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality) or remote but the result returned by this command will be for the vehicle attached locally on the client that executed the command. See `createTrigger` for more info.",
            "examples": [
                {
                    "text": "```sqf\n_result = triggerAttachedVehicle triggerName;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "trigger",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`triggerAttachedVehicle` trigger",
                    "returns": "`Object`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/triggerAttachedVehicle"
        },
        "configuration": {
            "label": "triggerAttachedVehicle",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Assigns a static object to the trigger. The activation source is changed to \"STATIC\".",
            "examples": [
                {
                    "text": "```sqf\n_trigger triggerAttachObject 1234;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "triggerName",
                            "description": "`Object`"
                        },
                        {
                            "name": "objectId",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "triggerName `triggerAttachObject` objectId",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/triggerAttachObject"
        },
        "configuration": {
            "label": "triggerAttachObject",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Specifies the entity which will activate the selected trigger.\n\n*If **[]** is given, the trigger is decoupled from the assigned vehicle (example 2).\n*If the activation source is **\"VEHICLE\"**, **\"GROUP\"**, **\"LEADER\"** or **\"MEMBER\"**, it is changed to **\"NONE\"**. \n*If **[vehicle]** is given, the trigger is coupled to the vehicle or its group. \n*When the source is **\"GROUP\"**, **\"LEADER\"** or **\"MEMBER\"**, it is coupled to the group, otherwise it is coupled to the vehicle and the source is changed to **\"VEHICLE\"**.",
            "examples": [
                {
                    "text": "```sqf\ntrigger triggerAttachVehicle [player];\n```"
                },
                {
                    "text": "```sqf\ntrigger triggerAttachVehicle [];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "triggerName",
                            "description": "`Object`"
                        },
                        {
                            "name": "objects",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "triggerName `triggerAttachVehicle` objects",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/triggerAttachVehicle"
        },
        "configuration": {
            "label": "triggerAttachVehicle",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Controls the ability of given unit to activate entities with disabled [Arma 3: Dynamic Simulation](https://community.bistudio.com/wiki/Arma%203%3A%20Dynamic%20Simulation). If `false` dynamically disabled entities will not be activated by this unit's presence. This command has the same effect as the [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor) attribute _Wake-Up Dynamic Simulation_.",
            "examples": [
                {
                    "text": "```sqf\nplayer triggerDynamicSimulation false;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "trigger",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "unit `triggerDynamicSimulation` trigger",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/triggerDynamicSimulation"
        },
        "configuration": {
            "label": "triggerDynamicSimulation",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns trigger condition check frequency in seconds. \n\n \n\n**IMPORTANT**:  The trigger could be [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality) or remote but the result returned by this command will be for the trigger interval set up locally on the client that executed the command. See `createTrigger` for more info.",
            "examples": [
                {
                    "text": "```sqf\n_interval = triggerInterval someTrigger;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "trigger",
                            "description": "`Object` - trigger object"
                        }
                    ],
                    "outline": "`triggerInterval` trigger",
                    "returns": "`Number` - trigger interval in seconds"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/triggerInterval"
        },
        "configuration": {
            "label": "triggerInterval",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns trigger statements.",
            "examples": [
                {
                    "text": "```sqf\n_statements = triggerStatements someTrigger;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "trigger",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`triggerStatements` trigger",
                    "returns": "`Array` in format:\n\n0: condition: `String`\n\n1: code on activation: `String`\n\n2: code on deactivation: `String`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/triggerStatements"
        },
        "configuration": {
            "label": "triggerStatements",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns trigger text.",
            "examples": [
                {
                    "text": "```sqf\n_text = triggerText triggerName;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "trigger",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`triggerText` trigger",
                    "returns": "`String`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/triggerText"
        },
        "configuration": {
            "label": "triggerText",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns trigger timeout in the form [min, mid, max, interruptable].\n\n**IMPORTANT**:  The trigger could be [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality) or remote but the result returned by this command will be for the trigger timeout set up locally on the client that executed the command. See `createTrigger` for more info.",
            "examples": [
                {
                    "text": "```sqf\n_timeOut = triggerTimeout someTrigger;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "trigger",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`triggerTimeout` trigger",
                    "returns": "`Array`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/triggerTimeout"
        },
        "configuration": {
            "label": "triggerTimeout",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns current timeout of the given trigger or -1 if countdown is not in progress. \n\n**IMPORTANT**:  The trigger could be [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality) or remote but the result returned by this command will be for the current trigger timeout local to the client that executed the command. See `createTrigger` for more info.",
            "examples": [
                {
                    "text": "```sqf\nprivate _remaining = triggerTimeoutCurrent _trigger;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "trigger",
                            "description": "`Object` - trigger object"
                        }
                    ],
                    "outline": "`triggerTimeoutCurrent` trigger",
                    "returns": "`Number` - time remaining before trigger activation."
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/triggerTimeoutCurrent"
        },
        "configuration": {
            "label": "triggerTimeoutCurrent",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the trigger type. \n\n**IMPORTANT**: \nThe trigger could be [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality) or remote but the result returned by this command will be for the trigger type set up locally on the client that executed the command.\nSee `createTrigger` for more info.",
            "examples": [
                {
                    "text": "```sqf\n_type = triggerType tr1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "trigger",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`triggerType` trigger",
                    "returns": "`String` - can be one of the following (see `setTriggerType` for details):\n{{Columns|8|\n* `**\"NONE\"**`\n* `**\"EAST G\"**`\n* `**\"WEST G\"**`\n* `**\"GUER G\"**`\n* `**\"SWITCH\"**`\n* `**\"END1\"**`\n* `**\"END2\"**`\n* `**\"END3\"**`\n* `**\"END4\"**`\n* `**\"END5\"**`\n* `**\"END6\"**`\n* `**\"LOOSE\"**`\n* `**\"WIN\"**`\n}}\nCan return `**\"ERROR\"**` in case of an invalid trigger type (due to [[Mission.sqm]] manual edit or other type of data corruption)"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/triggerType"
        },
        "configuration": {
            "label": "triggerType",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Trims a [string](https://community.bistudio.com/wiki/String).",
            "examples": [
                {
                    "text": "```sqf\ntrim \"\t\thello, how are you?  \"; // returns \"hello, how are you?\"\n```"
                },
                {
                    "text": "```sqf\n\"hewosentence!123\" trim [\"3e1o2hw\", 0]; // returns \"sentence!\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "stringValue",
                            "description": "`String` - string to be trimmed. spaces, tabs and line returns are removed from both ends of _stringValue_."
                        }
                    ],
                    "outline": "`trim` stringValue",
                    "returns": "`String` - trimmed string"
                },
                {
                    "parameters": [
                        {
                            "name": "string",
                            "description": "`String` - string to be trimmed"
                        },
                        {
                            "name": "chars",
                            "description": "`String` - list of characters to be trimmed"
                        },
                        {
                            "name": "where",
                            "description": "`Number` - can be:\n* 0 - trim at the beginning (left) and the end (right)\n* 1 - trim at the beginning (left)\n* 2 - trim at the end (right)"
                        }
                    ],
                    "outline": "string `trim` [chars, where]",
                    "returns": "`String` - trimmed string"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/trim"
        },
        "configuration": {
            "label": "trim",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Always true",
            "examples": [
                {
                    "text": "```sqf\n_var = true;\nsystemChat str _var; // true\n\nif (_var) then\n{\n\thint \"_var is true!\";\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`true`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/true"
        },
        "configuration": {
            "label": "true",
            "grammarType": "boolean-literal"
        }
    },
    {
        "documentation": {
            "description": "Defines a try-catch structure. This sets up an [exception handling](https://community.bistudio.com/wiki/Exception%20handling) block. Any thrown exception in a try block is caught in a `catch` block. The structured exception block has the following form:\n\n```sqf\ntry\n{ /* block that can throw exception */ }\ncatch\n{ /* block that processes the exception. Exception is described in the _exception variable */ };\n```",
            "examples": [
                {
                    "text": "```sqf\ntry { throw \"invalid argument\" } catch { hint str _exception };\n```"
                },
                {
                    "text": "```sqf\n123 try { if (_this != 123) throw \"invalid argument\" } catch { hint str _exception };\n```"
                },
                {
                    "text": "```sqf\n\ntry {\n\tif (a > b) throw \"Error: some error\"; // OK\n\t// the command argument is static\n} catch {\n\thint str _exception;\n};\n\ntry {\n\t_someFunc = {\n\t\t// ...\n\t};\n\tif (a > b) throw (call _someFunc); // NOT OK\n\t// the command argument is dynamic\n\t// _someFunc is called first to get the value regardless of (a > b) outcome\n} catch {\n\thint str _exception;\n};\n\ntry {\n\t_someFunc = {\n\t\t// ...\n\t};\n\tif (a > b) then {throw (call _someFunc)}; // OK\n\t// the command argument is dynamic\n\t// _someFunc is only called when (a > b) is true\n} catch {\n\thint str _exception;\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "code",
                            "description": "`Code`"
                        }
                    ],
                    "outline": "`try` code",
                    "returns": "[Exception Type](https://community.bistudio.com/wiki/Exception%20handling)"
                },
                {
                    "parameters": [
                        {
                            "name": "args",
                            "description": "`Anything` - passed arguments, will be put in __this_ variable inside the \"code\""
                        },
                        {
                            "name": "code",
                            "description": "`Code`"
                        }
                    ],
                    "outline": "args `try` code",
                    "returns": "[Exception Type](https://community.bistudio.com/wiki/Exception%20handling)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/try"
        },
        "configuration": {
            "label": "try",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "Checks if a turret is [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality).",
            "examples": [
                {
                    "text": "```sqf\n_isLocal = vehicle player turretLocal [0];\n```"
                },
                {
                    "text": "```sqf\nif (heli turretLocal [1]) then { heli setVehicleAmmo 1 };\n```"
                },
                {
                    "text": "```sqf\nif (isNil { heli turretLocal [5] }) then { hint \"Turret 5 is non-existent\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` format [Turret Path](https://community.bistudio.com/wiki/Turret%20Path). Also supports [-1] for driver turret"
                        }
                    ],
                    "outline": "vehicle `turretLocal` turretPath",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/turretLocal"
        },
        "configuration": {
            "label": "turretLocal",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns id of the turret's `owner`. Returns 0 on non-server and SP.",
            "examples": [
                {
                    "text": "```sqf\n_ownerId = vehicle player turretOwner [0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` format [Turret Path](https://community.bistudio.com/wiki/Turret%20Path) - since {{GVI|arma3|2.08"
                        }
                    ],
                    "outline": "vehicle `turretOwner` turretPath",
                    "returns": "`Number` - `owner` id"
                }
            ],
            "argumentLocality": "Global Argument",
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/turretOwner"
        },
        "configuration": {
            "label": "turretOwner",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the unit in the vehicle turret. To find turret path of known unit, see `unitTurret`.",
            "examples": [
                {
                    "text": "```sqf\n_vehicle turretUnit _thisTurret;\n```"
                },
                {
                    "text": "```sqf\nvehicle player turretUnit [0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` format [Turret Path](https://community.bistudio.com/wiki/Turret%20Path) - since {{GVI|arma3|1.58"
                        }
                    ],
                    "outline": "vehicle `turretUnit` turretPath",
                    "returns": "`Object`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/turretUnit"
        },
        "configuration": {
            "label": "turretUnit",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds an item with given text to Tree View control. The position on Tree View where to add the item and the actual path to this item once added are different. If item is added to existing item, then parent item path is used. If no parent exists, empty array [] is used. See [Tree View Path](https://community.bistudio.com/wiki/Tree%20View%20Path) for more information.",
            "examples": [
                {
                    "text": "```sqf\n_index = _ctrl tvAdd [[], \"Parent Item\"];\n```"
                },
                {
                    "text": "```sqf\n_index = tvAdd [101, [0], \"First item\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "pathParent",
                            "description": "`Array` - [Tree View Path](https://community.bistudio.com/wiki/Tree%20View%20Path) of parent item or [] if no parent exists"
                        },
                        {
                            "name": "text",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`tvAdd` [idc, pathParent, text]",
                    "returns": "`Number` - index of the added item relative to the branch it was added to"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "pathParent",
                            "description": "`Array` - [Tree View Path](https://community.bistudio.com/wiki/Tree%20View%20Path) of parent item or [] if no parent exists"
                        },
                        {
                            "name": "text",
                            "description": "`String`"
                        }
                    ],
                    "outline": "control `tvAdd` [pathParent, text]",
                    "returns": "`Number` - index of the added item relative to the branch it was added to"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/tvAdd"
        },
        "configuration": {
            "label": "tvAdd",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes all items from Tree View with given idc.",
            "examples": [
                {
                    "text": "```sqf\ntvClear 101;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`tvClear` idc",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`tvClear` control",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/tvClear"
        },
        "configuration": {
            "label": "tvClear",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Collapses tree item pointed to by the path. IDC means id of parent Tree View.",
            "examples": [
                {
                    "text": "```sqf\ntvCollapse [101, [0]];\n```"
                },
                {
                    "text": "```sqf\n_ctrl tvCollapse [0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - item [Tree View Path](https://community.bistudio.com/wiki/Tree%20View%20Path). [] will collapse the whole tree and it will disappear"
                        }
                    ],
                    "outline": "`tvCollapse` [idc, path]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - item [Tree View Path](https://community.bistudio.com/wiki/Tree%20View%20Path). [] will collapse the whole tree and it will disappear"
                        }
                    ],
                    "outline": "control `tvCollapse` path",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/tvCollapse"
        },
        "configuration": {
            "label": "tvCollapse",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Collapses all tree items for the given Tree View.",
            "examples": [
                {
                    "text": "```sqf\ntvCollapseAll 101;\n```"
                },
                {
                    "text": "```sqf\ntvCollapseAll _ctrl;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`tvCollapseAll` idc",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`tvCollapseAll` control",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/tvCollapseAll"
        },
        "configuration": {
            "label": "tvCollapseAll",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns children count on given path. IDC means id of parent Tree View.",
            "examples": [
                {
                    "text": "```sqf\ntvCount [101, [0]];\n```"
                },
                {
                    "text": "```sqf\n_ctrl tvCount [1,0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` of `Number`s"
                        }
                    ],
                    "outline": "`tvCount` [idc, path]",
                    "returns": "`Number`"
                },
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` of `Number`s"
                        }
                    ],
                    "outline": "ctrl `tvCount` path",
                    "returns": "`Number`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/tvCount"
        },
        "configuration": {
            "label": "tvCount",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns path to currently selected item. IDC means id of parent Tree View.",
            "examples": [
                {
                    "text": "```sqf\ntvCurSel 101;\n```"
                },
                {
                    "text": "```sqf\ntvCurSel _ctrl;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`tvCurSel` idc",
                    "returns": "`Array` - [Tree View Path](https://community.bistudio.com/wiki/Tree%20View%20Path) of selected item"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`tvCurSel` control",
                    "returns": "`Array` - [Tree View Path](https://community.bistudio.com/wiki/Tree%20View%20Path) of selected item"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/tvCurSel"
        },
        "configuration": {
            "label": "tvCurSel",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns string data from item on given path. IDC means id of parent `CT_TREE`.",
            "examples": [
                {
                    "text": "```sqf\ntvData [101, [0]];\n```"
                },
                {
                    "text": "```sqf\n(_display displayCtrl 101) tvData [0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` of `Number`s"
                        }
                    ],
                    "outline": "`tvData` [idc, path]",
                    "returns": "`String`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` of `Number`s"
                        }
                    ],
                    "outline": "control `tvData` path",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/tvData"
        },
        "configuration": {
            "label": "tvData",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Removes an item with given [Tree View Path](https://community.bistudio.com/wiki/Tree%20View%20Path) from Tree View.\n**IMPORTANT**: The paths of other items on the same branch after delete operation are updated accordingly; therefore, when deleting multiple entries, start with the one with the highest index and proceed in reverse order.",
            "examples": [
                {
                    "text": "```sqf\ntvDelete [101, [0, 0]];\n```"
                },
                {
                    "text": "```sqf\n_ctrl tvDelete [0, 0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - [Tree View Path](https://community.bistudio.com/wiki/Tree%20View%20Path) of the item"
                        }
                    ],
                    "outline": "`tvDelete` [idc, path]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - [Tree View Path](https://community.bistudio.com/wiki/Tree%20View%20Path) of the item"
                        }
                    ],
                    "outline": "control `tvDelete` path",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/tvDelete"
        },
        "configuration": {
            "label": "tvDelete",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Expands tree item pointed to by the path. IDC means id of parent Tree View.",
            "examples": [
                {
                    "text": "```sqf\ntvExpand [101, [0]];\n```"
                },
                {
                    "text": "```sqf\n_ctrl tvExpand [1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - item [Tree View Path](https://community.bistudio.com/wiki/Tree%20View%20Path). [] will expand the whole tree if it was collapsed previously with []"
                        }
                    ],
                    "outline": "`tvExpand` [idc, path]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - item [Tree View Path](https://community.bistudio.com/wiki/Tree%20View%20Path). [] will expand the whole tree if it was collapsed previously with []"
                        }
                    ],
                    "outline": "control `tvExpand` path",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/tvExpand"
        },
        "configuration": {
            "label": "tvExpand",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Expands all tree items for the given Tree View.",
            "examples": [
                {
                    "text": "```sqf\ntvExpandAll 101;\n```"
                },
                {
                    "text": "```sqf\ntvExpandAll _ctrl;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`tvExpandAll` idc",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`tvExpandAll` control",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/tvExpandAll"
        },
        "configuration": {
            "label": "tvExpandAll",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns true if given treeview item is selected.",
            "examples": [
                {
                    "text": "```sqf\n_control tvIsSelected [0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "control `tvIsSelected` path",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/tvIsSelected"
        },
        "configuration": {
            "label": "tvIsSelected",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns name of picture from item pointed to by path. IDC means id of parent Tree View.",
            "examples": [
                {
                    "text": "```sqf\ntvPicture [101, [0]];\n```"
                },
                {
                    "text": "```sqf\n_ctrl tvPicture [0,0,0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` of `Number`s"
                        }
                    ],
                    "outline": "`tvPicture` [idc, path]",
                    "returns": "`String`"
                },
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` of `Number`s"
                        }
                    ],
                    "outline": "ctrl `tvPicture` path",
                    "returns": "`String`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/tvPicture"
        },
        "configuration": {
            "label": "tvPicture",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the right picture of a `CT_TREE` on given path.",
            "examples": [
                {
                    "text": "```sqf\nprivate _result = _controlTV tvPictureRight [0, 0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - path"
                        }
                    ],
                    "outline": "`tvPictureRight` [idc, path]",
                    "returns": "`String` - path to picture"
                },
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - path"
                        }
                    ],
                    "outline": "ctrl `tvPictureRight` path",
                    "returns": "`String` - path to picture"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/tvPictureRight"
        },
        "configuration": {
            "label": "tvPictureRight",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array of paths to selected items.",
            "examples": [
                {
                    "text": "```sqf\nprivate _selection = tvSelection _ctrlTV;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`tvSelection` control",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/tvSelection"
        },
        "configuration": {
            "label": "tvSelection",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets text color on given Tree View Item",
            "examples": [
                {
                    "text": "```sqf\ntvSetColor [101, [0,0], [1,0,0,1]];\n```"
                },
                {
                    "text": "```sqf\n_ctrl tvSetColor [[0,0], [1,0,0,1]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - [Tree View Path](https://community.bistudio.com/wiki/Tree%20View%20Path) of the item"
                        },
                        {
                            "name": "color",
                            "description": "`Array` - item text color"
                        }
                    ],
                    "outline": "`tvSetColor` [idc, path, color]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - [Tree View Path](https://community.bistudio.com/wiki/Tree%20View%20Path) of the item"
                        },
                        {
                            "name": "color",
                            "description": "`Array` - item text color in format [r,g,b,a]"
                        }
                    ],
                    "outline": "control `tvSetColor` [path, color]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/tvSetColor"
        },
        "configuration": {
            "label": "tvSetColor",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets cursor to given item on given path. IDC means id of parent Tree View. To deselect all items use [-1] for the path param (_available since Arma 3 v1.56_)",
            "examples": [
                {
                    "text": "```sqf\ntvSetCurSel [101, [0]];\n```"
                },
                {
                    "text": "```sqf\n_ctrl tvSetCurSel [0,0,0];\n```"
                },
                {
                    "text": "```sqf\n\n[] spawn\n{\n\tdisableSerialization;\n\t_CT_TREE = findDisplay 46 ctrlCreate [\"RscTree\", -1];\n\t_CT_TREE ctrlSetPosition [0,0,0.3,1];\n\t_CT_TREE ctrlCommit 0;\n\t_CT_TREE tvAdd [[],\"Parent_A\"];\n\t_CT_TREE tvAdd [[0],\"Child_A\"];\n\t_CT_TREE tvAdd [[0,0],\"Grandchild_A\"];\n\t_CT_TREE tvAdd [[],\"Parent_B\"];\n\t_CT_TREE tvAdd [[1],\"Child_B\"];\n\tsleep 1;\n\thint \"SELECT [0,0,0]\";\n\t_CT_TREE tvSetCurSel [0,0,0];\n\tsleep 2;\n\thint \"DESELECT ALL\";\n\t_CT_TREE tvSetCurSel [-1];\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` of `Number`s"
                        }
                    ],
                    "outline": "`tvSetCurSel` [idc, path]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` of `Number`s"
                        }
                    ],
                    "outline": "control `tvSetCurSel` path",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/tvSetCurSel"
        },
        "configuration": {
            "label": "tvSetCurSel",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets string data to item on given path. IDC means id of parent Tree View.",
            "examples": [
                {
                    "text": "```sqf\ntvSetData [101, [0], \"Test data\"];\n```"
                },
                {
                    "text": "```sqf\n_ctrl tvSetData [[0,0,0], \"Test data\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` of `Number`s"
                        },
                        {
                            "name": "data",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`tvSetData` [idc, path, data]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` of `Number`s"
                        },
                        {
                            "name": "data",
                            "description": "`String`"
                        }
                    ],
                    "outline": "ctrl `tvSetData` [path, data]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/tvSetData"
        },
        "configuration": {
            "label": "tvSetData",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets picture to item selected by path. IDC means id of parent Tree View. Name is picture name. The picture is searched in the mission directory.\n**NOTE**: \nAdding pictures to lists is very slow. In order to prevent the filling of the list to be slowed down, add the pictures in a **scheduled** environment - See _Example 3_.\nOne drawback of this method is that sorting the entries is not easily possible.",
            "examples": [
                {
                    "text": "```sqf\ntvSetPicture [101, [0], \"picture\"];\n```"
                },
                {
                    "text": "```sqf\n_ctrl tvSetPicture [[0,0,0], getText (configFile >> \"CfgWeapons\" >> \"optic_NVS\" >> \"picture\")];\n```"
                },
                {
                    "text": "Adding images in a scheduled environment:\n\n```sqf\n\nprivate _path = _ctrlTV tvAdd [[], \"Some Entry\"];\n[_ctrlTV, _path] spawn {\n\t(_this select 0) tvSetPictureRight [[_this select 1], \"someImage.paa\"];\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` of `Number`s"
                        },
                        {
                            "name": "name",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`tvSetPicture` [idc, path, name]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` of `Number`s"
                        },
                        {
                            "name": "name",
                            "description": "`String`"
                        }
                    ],
                    "outline": "control `tvSetPicture` [path, name]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/tvSetPicture"
        },
        "configuration": {
            "label": "tvSetPicture",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the colour of the picture (set via `tvSetPicture`) under the specified tree view path.",
            "examples": [
                {
                    "text": "```sqf\ntvSetPictureColor [101, [0,2], [1,0,1,1]];\n```"
                },
                {
                    "text": "```sqf\n_tree tvSetPictureColor [[0,2], [1,0,1,1]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - IDC of the tree view control"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - array containing path numbers"
                        },
                        {
                            "name": "color",
                            "description": "[[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "`tvSetPictureColor` [idc, path, color]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - array containing path numbers"
                        },
                        {
                            "name": "color",
                            "description": "[[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "ctrl `tvSetPictureColor` [path, color]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/tvSetPictureColor"
        },
        "configuration": {
            "label": "tvSetPictureColor",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the color of left picture of a tree item defined by path when that item is disabled.",
            "examples": [
                {
                    "text": "```sqf\n_control tvSetPictureColorDisabled [[0], [1,0,1,1]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - path to tree view item"
                        },
                        {
                            "name": "color",
                            "description": "`Array` format [[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "control `tvSetPictureColorDisabled` [path, color]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/tvSetPictureColorDisabled"
        },
        "configuration": {
            "label": "tvSetPictureColorDisabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the color of the left picture of a tree item defined by path when item is selected",
            "examples": [
                {
                    "text": "```sqf\n_control tvSetPictureColorSelected [[0], [1,0,1,1]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - path to tree view item"
                        },
                        {
                            "name": "color",
                            "description": "`Array` format [[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "control `tvSetPictureColorSelected` [path, color]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/tvSetPictureColorSelected"
        },
        "configuration": {
            "label": "tvSetPictureColorSelected",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets right picture on the tree view item defined by path.",
            "examples": [
                {
                    "text": "```sqf\ntvSetPictureRight [101, [0], \"picture\"];\n```"
                },
                {
                    "text": "```sqf\n_ctrl tvSetPictureRight [[0], \"picture\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - path to tree view item"
                        },
                        {
                            "name": "name",
                            "description": "`String` - picture texture"
                        }
                    ],
                    "outline": "`tvSetPictureRight` [idc, path, name]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - path to tree view item"
                        },
                        {
                            "name": "name",
                            "description": "`String` - picture texture"
                        }
                    ],
                    "outline": "control `tvSetPictureRight` [path, name]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/tvSetPictureRight"
        },
        "configuration": {
            "label": "tvSetPictureRight",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets color of the right picture on the tree view item defined by path",
            "examples": [
                {
                    "text": "```sqf\ntvSetPictureRightColor [101, [0], [1,0,1,1]];\n```"
                },
                {
                    "text": "```sqf\n_ctrl tvSetPictureRightColor [[0], [1,0,1,1]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - path to tree view item"
                        },
                        {
                            "name": "color",
                            "description": "[[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "`tvSetPictureRightColor` [idc, path, color]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - path to tree view item"
                        },
                        {
                            "name": "color",
                            "description": "[[Color|Color (RGBA)]]"
                        }
                    ],
                    "outline": "control `tvSetPictureRightColor` [path, color]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/tvSetPictureRightColor"
        },
        "configuration": {
            "label": "tvSetPictureRightColor",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the color of the right picture of a tree item defined by path when item is disabled",
            "examples": [
                {
                    "text": "```sqf\n_control tvSetPictureRightColorDisabled [[0], [1,0,1,1]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - path to tree view item"
                        },
                        {
                            "name": "color",
                            "description": "`Array` - color in format [r,g,b,a]"
                        }
                    ],
                    "outline": "control `tvSetPictureRightColorDisabled` [path, color]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/tvSetPictureRightColorDisabled"
        },
        "configuration": {
            "label": "tvSetPictureRightColorDisabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the color of the right picture of a tree item defined by path when item is selected",
            "examples": [
                {
                    "text": "```sqf\n_control tvSetPictureRightColorSelected [[0], [1,0,1,1]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - path to tree view item"
                        },
                        {
                            "name": "color",
                            "description": "`Array` - color in format [r,g,b,a]"
                        }
                    ],
                    "outline": "control `tvSetPictureRightColorSelected` [path, color]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/tvSetPictureRightColorSelected"
        },
        "configuration": {
            "label": "tvSetPictureRightColorSelected",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the select color of given path.",
            "examples": [
                {
                    "text": "```sqf\n_control tvSetSelectColor [[0, 0], [1,1,1,0.5]];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - path of the item"
                        },
                        {
                            "name": "color",
                            "description": "`Array` - color RGBA"
                        }
                    ],
                    "outline": "ctrl `tvSetSelectColor` [path, color]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/tvSetSelectColor"
        },
        "configuration": {
            "label": "tvSetSelectColor",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the selection state of given treeview item in multi-select control.",
            "examples": [
                {
                    "text": "```sqf\n_control tvSetSelected [[0], true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array`"
                        },
                        {
                            "name": "selected",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "control `tvSetSelected` [path, selected]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/tvSetSelected"
        },
        "configuration": {
            "label": "tvSetSelected",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets string text to item on given path. IDC means id of parent Tree View.",
            "examples": [
                {
                    "text": "```sqf\ntvSetText [101, [0], \"Test data\"];\n```"
                },
                {
                    "text": "```sqf\n_ctrl tvSetText [[0,0,0], \"Test data\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` of `Number`s"
                        },
                        {
                            "name": "text",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`tvSetText` [idc, path, text]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` of `Number`s"
                        },
                        {
                            "name": "text",
                            "description": "`String`"
                        }
                    ],
                    "outline": "control `tvSetText` [path, text]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/tvSetText"
        },
        "configuration": {
            "label": "tvSetText",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the tooltip text associated with the specified tree view path.",
            "examples": [
                {
                    "text": "```sqf\ntvSetTooltip [101, [0,2], \"This is a tooltip\"];\n```"
                },
                {
                    "text": "```sqf\n_tree tvSetTooltip [[0,2], \"This is a tooltip\"];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - IDC of the tree view control"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - array containing path numbers"
                        },
                        {
                            "name": "text",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`tvSetTooltip` [idc, path, text]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - array containing path numbers"
                        },
                        {
                            "name": "text",
                            "description": "`String`"
                        }
                    ],
                    "outline": "ctrl `tvSetTooltip` [path, text]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/tvSetTooltip"
        },
        "configuration": {
            "label": "tvSetTooltip",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets scalar data to item on given path. IDC means id of parent Tree View. If the given value is not integer, it will be converted to integer",
            "examples": [
                {
                    "text": "```sqf\ntvSetValue [101, [0], 555];\n```"
                },
                {
                    "text": "```sqf\n_ctrl tvSetValue [[0,0,0], 14];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` of `Number`s"
                        },
                        {
                            "name": "val",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`tvSetValue` [idc, path, val]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` of `Number`s"
                        },
                        {
                            "name": "val",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "ctrl `tvSetValue` [path, val]",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/tvSetValue"
        },
        "configuration": {
            "label": "tvSetValue",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sorts all children of given path. Text of [Tree View](https://community.bistudio.com/wiki/CT_TREE) entries is used for sorting.",
            "examples": [
                {
                    "text": "```sqf\ncontrol tvSort [[0], true];\n```"
                },
                {
                    "text": "```sqf\ntvSort [102, [0], true];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - [Tree View Path](https://community.bistudio.com/wiki/Tree%20View%20Path) of the parent item to sort"
                        },
                        {
                            "name": "reversed",
                            "description": "`Boolean` - (Optional, default `false`) `true` to reverse sort it"
                        }
                    ],
                    "outline": "control `tvSort` [path, reversed]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - control idc"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - [Tree View Path](https://community.bistudio.com/wiki/Tree%20View%20Path) of the parent item to sort"
                        },
                        {
                            "name": "reversed",
                            "description": "`Boolean` - (Optional, default `false`) `true` to reverse sort it"
                        }
                    ],
                    "outline": "`tvSort` [idc, path, reversed]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/tvSort"
        },
        "configuration": {
            "label": "tvSort",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sorts all children, including trees deriving from given path. Text of [Tree View](https://community.bistudio.com/wiki/CT_TREE) entries is used for sorting.",
            "examples": [
                {
                    "text": "```sqf\n_ctrl tvSortAll [[], false]; // sorts the complete Tree View\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - path to start sorting from"
                        },
                        {
                            "name": "reversed",
                            "description": "`Boolean` - `true` to reverse sort it."
                        }
                    ],
                    "outline": "control `tvSortAll` [path, reversed]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/tvSortAll"
        },
        "configuration": {
            "label": "tvSortAll",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sorts all children of given path. Value of [Tree View](https://community.bistudio.com/wiki/CT_TREE) entries is used for sorting. `tvSetValue` can be used to set the value for a given path.",
            "examples": [
                {
                    "text": "```sqf\ncontrol tvSortByValue [[0], false];\n```"
                },
                {
                    "text": "```sqf\ntvSortByValue [102, [0], false];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - [Tree View Path](https://community.bistudio.com/wiki/Tree%20View%20Path) of the parent item to sort"
                        },
                        {
                            "name": "ascending",
                            "description": "`Boolean` - (Optional, default `false`) `true` to sort ascending, else descending"
                        }
                    ],
                    "outline": "control `tvSortByValue` [path, ascending]",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - control idc"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - [Tree View Path](https://community.bistudio.com/wiki/Tree%20View%20Path) of the parent item to sort"
                        },
                        {
                            "name": "ascending",
                            "description": "`Boolean` - (Optional) `true` to sort ascending, else descending. Default: `false`"
                        }
                    ],
                    "outline": "`tvSortByValue` [idc, path, ascending]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/tvSortByValue"
        },
        "configuration": {
            "label": "tvSortByValue",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sorts all children, including trees deriving from given path.  Value of [Tree View](https://community.bistudio.com/wiki/CT_TREE) entries is used for sorting.",
            "examples": [
                {
                    "text": "```sqf\n_ctrl tvSortByValueAll [[], false]; // Sorts the complete Tree View\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - path to start sorting from"
                        },
                        {
                            "name": "reversed",
                            "description": "`Boolean` - `true` to reverse sort it."
                        }
                    ],
                    "outline": "control `tvSortByValueAll` [path, reversed]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/tvSortByValueAll"
        },
        "configuration": {
            "label": "tvSortByValueAll",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns shown text in the item on given path. IDC means id of parent Tree View.",
            "examples": [
                {
                    "text": "```sqf\ntvText [101, [0]];\n```"
                },
                {
                    "text": "```sqf\n_ctrl tvText [0,0,0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` of `Number`s"
                        }
                    ],
                    "outline": "`tvText` [idc, path]",
                    "returns": "`String`"
                },
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` of `Number`s"
                        }
                    ],
                    "outline": "control `tvText` path",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/tvText"
        },
        "configuration": {
            "label": "tvText",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets the tooltip text associated with the specified tree view path.",
            "examples": [
                {
                    "text": "```sqf\n_text = tvTooltip [101, [0,2]];\n```"
                },
                {
                    "text": "```sqf\n_text = _treeCtrl tvTooltip [0,2];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number` - IDC of the tree view control"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - array containing path numbers"
                        }
                    ],
                    "outline": "`tvTooltip` [idc, path]",
                    "returns": "`String` - tooltip text"
                },
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - array containing path numbers"
                        }
                    ],
                    "outline": "ctrl `tvTooltip` path",
                    "returns": "`String` - tooltip text"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/tvTooltip"
        },
        "configuration": {
            "label": "tvTooltip",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns numeric value set for given tree view path.",
            "examples": [
                {
                    "text": "```sqf\ntvValue [101, [0]];\n```"
                },
                {
                    "text": "```sqf\n_ctrl tvValue [0,0,0];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "idc",
                            "description": "`Number`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` of `Number`s"
                        }
                    ],
                    "outline": "`tvValue` [idc, path]",
                    "returns": "`Number` - set value; if no value was set, 0 is returned"
                },
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` of `Number`s"
                        }
                    ],
                    "outline": "ctrl `tvValue` path",
                    "returns": "`Number` - set value; if no value was set, 0 is returned"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/tvValue"
        },
        "configuration": {
            "label": "tvValue",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a string of a `Location`'s class name or `Task`'s name (same as `taskName`).",
            "examples": [
                {
                    "text": "```sqf\n_locationType = type myLocation;\n```"
                },
                {
                    "text": "```sqf\n_taskName = type myTask;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "location",
                            "description": "`Location`"
                        }
                    ],
                    "outline": "`type` location",
                    "returns": "`String`"
                },
                {
                    "parameters": [
                        {
                            "name": "task",
                            "description": "`Task`"
                        }
                    ],
                    "outline": "`type` task",
                    "returns": "`String` - the type of the task"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/type"
        },
        "configuration": {
            "label": "type",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the [Data Type](https://community.bistudio.com/wiki/%3ACategory%3AData%20Types) of an expression. \n\nThe type is returned as on of the following all-uppercase strings:\n{{Columns|5|\n* \"[ARRAY](https://community.bistudio.com/wiki/Array)\"\n* \"[BOOL](https://community.bistudio.com/wiki/Boolean)\"\n* \"[CODE](https://community.bistudio.com/wiki/Code)\"\n* \"[CONFIG](https://community.bistudio.com/wiki/Config)\"\n* \"[CONTROL](https://community.bistudio.com/wiki/Control)\"\n* \"[DISPLAY](https://community.bistudio.com/wiki/Display)\"\n* \"[GROUP](https://community.bistudio.com/wiki/Group)\"\n* \"[OBJECT](https://community.bistudio.com/wiki/Object)\"\n* \"[SCALAR](https://community.bistudio.com/wiki/Number)\"\n* \"[SCRIPT](https://community.bistudio.com/wiki/Script%20Handle)\"\n* \"[SIDE](https://community.bistudio.com/wiki/Side)\"\n* \"[STRING](https://community.bistudio.com/wiki/String)\"\n* \"[TEXT](https://community.bistudio.com/wiki/Structured%20Text)\"\n* {{GVI|arma1|1.08",
            "examples": [
                {
                    "text": "```sqf\n_msg = \"hello\"; _result = typeName _msg;  //_result will be \"STRING\"\n```"
                },
                {
                    "text": "```sqf\n_unit = player; _result = typeName _unit; //_result becomes \"OBJECT\"\n```"
                },
                {
                    "text": "Values representing direct [ Data Types](https://community.bistudio.com/wiki/%3ACategory%3A%20Data%20Types):\n\n```sqf\n\nhint typeName 0;\t\t\t\t\t// SCALAR\nhint typeName \"\";\t\t\t\t\t// STRING\nhint typeName true;\t\t\t\t\t// BOOL\nhint typeName [];\t\t\t\t\t// ARRAY\nhint typeName {};\t\t\t\t\t// CODE\nhint typeName scriptNull;\t\t\t// SCRIPT (since Arma 3 v1.32)\nhint typeName objNull;\t\t\t\t// OBJECT\nhint typeName grpNull;\t\t\t\t// GROUP\nhint typeName controlNull;\t\t\t// CONTROL\nhint typeName teamMemberNull;\t\t// TEAM_MEMBER\nhint typeName displayNull;\t\t\t// DISPLAY\nhint typeName taskNull;\t\t\t\t// TASK\nhint typeName locationNull;\t\t\t// LOCATION\nhint typeName sideUnknown;\t\t\t// SIDE\nhint typeName text \"\";\t\t\t\t// TEXT\nhint typeName configFile;\t\t\t// CONFIG\nhint typeName configNull;\t\t\t// CONFIG (since Arma 3 v1.54)\nhint typeName missionNamespace;\t\t// NAMESPACE\nhint typeName diaryRecordNull;\t\t// DIARY_RECORD (since Arma 3 v2.00)\nhint typeName createHashMap;\t\t// HASHMAP (since Arma 3 v2.02)\n\n```"
                },
                {
                    "text": "```sqf\n\nif (typeName _this != \"ARRAY\") exitWith { hint \"_this is not an array!\" };\n// is the same as\nif (typeName _this != typeName []) exitWith { hint \"_this is not an array!\" };\n// same result but faster in Arma 3\nif !(_this isEqualType []) exitWith { hint \"_this is not an array!\" };\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "anything",
                            "description": "`Anything`"
                        }
                    ],
                    "outline": "`typeName` anything",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/typeName"
        },
        "configuration": {
            "label": "typeName",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the class name of a given object.",
            "examples": [
                {
                    "text": "```sqf\nif (typeOf vehicle player == \"B_Heli_Light_01_armed_F\") then { hint \"Player is in a AH-9 Pawnee\"; };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "obj",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`typeOf` obj",
                    "returns": "`String` - config class name, or empty string if _obj_ does not have a class"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/typeOf"
        },
        "configuration": {
            "label": "typeOf",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array with current operator of UAV and his vehicle role in UAV.\nIf nobody is controlling the UAV, the command tries to find any person with connected terminal to this UAV.\nIf nobody is connected, `objNull` is used as returned operator (see _Example 2_).\n**NOTE**: This command works only for vehicles, to get a unit remote-controlling a unit, see `remoteControlled` and [remoteControl - Example 4](https://community.bistudio.com/wiki/remoteControl#Example_4).",
            "examples": [
                {
                    "text": "```sqf\nprivate _result = UAVControl _myUAV;\n```"
                },
                {
                    "text": "Since {{GVI|arma3|1.96"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "uav",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`UAVControl` uav",
                    "returns": "`Array` in format [unit, vehicleRole] {{GVI|arma3|1.96"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/UAVControl"
        },
        "configuration": {
            "label": "UAVControl",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the global namespace attached to user interface.",
            "examples": [
                {
                    "text": "```sqf\nuiNamespace setVariable [\"LIB_interruptDisplay\", _display];\n```"
                },
                {
                    "text": "```sqf\n\nuiNamespace setVariable [\"myVar\", 46];\nwith uiNamespace do\n{\n\thint str myVar; // 46\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`uiNamespace`",
                    "returns": "`Namespace`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/uiNamespace"
        },
        "configuration": {
            "label": "uiNamespace",
            "grammarType": "namespace"
        }
    },
    {
        "documentation": {
            "description": "Suspend execution of script for given UI time. `uiSleep` is a sleep method to delay script execution where script time/simulation time is stopped.\n`uiSleep` is basically using the system time (uiTime more specifically) and not simulation time.\nSo in the cases where `sleep` would get stuck indefinitely, `uiSleep` can still be used to effectively delay script execution for example in pause or in a mission briefing or an editor or when simulation is paused in general.",
            "examples": [
                {
                    "text": "In singleplayer:\n\n```sqf\n\nsetAccTime 0.25;\t// slows down time\nsleep 1;\t\t\t// waits for 1 second in-game, 4 IRL seconds (1 / 0.25)\n\nsetAccTime 0;\t\t// freezes simulation\n// sleep 1;\t\t\t// would wait forever\nuiSleep 1;\t\t\t// waits for 1 IRL second\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "delay",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`uiSleep` delay",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/uiSleep"
        },
        "configuration": {
            "label": "uiSleep",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "Unassign curator (will destroy both sides of connection).",
            "examples": [
                {
                    "text": "```sqf\nunassignCurator myCurator;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curatorObj",
                            "description": "`Object` - curator module."
                        }
                    ],
                    "outline": "`unassignCurator` curatorObj",
                    "returns": "`Nothing`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/unassignCurator"
        },
        "configuration": {
            "label": "unassignCurator",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Unassigns existing item and tries to put it into inventory. If there is no space in inventory the item simply disappears. See also `unlinkItem`.",
            "examples": [
                {
                    "text": "```sqf\n\n_bluforUnit unassignItem \"NVGoggles\";\n_bluforUnit removeItem \"NVGoggles\";\n_opforUnit unassignItem \"NVGoggles_OPFOR\";\n_opforUnit removeItem \"NVGoggles_OPFOR\";\n_independentUnit unassignItem \"NVGoggles_INDEP\";\n_independentUnit removeItem \"NVGoggles_INDEP\";\n\n```"
                },
                {
                    "text": "```sqf\n\n{\n\t_x unassignItem hmd _x; // unassign (not remove) NVGs from all units\n} forEach allUnits;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "item",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `unassignItem` item",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/unassignItem"
        },
        "configuration": {
            "label": "unassignItem",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Unassigns the unit (in the case of a vehicle its commander unit) from his team. This is equal to unit `assignTeam` \"MAIN\".",
            "examples": [
                {
                    "text": "```sqf\nunassignTeam _soldier2;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicleName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`unassignTeam` vehicleName",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/unassignTeam"
        },
        "configuration": {
            "label": "unassignTeam",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Unassigns individual unit from a vehicle, usually previously assigned with _assignAsXXX_ command, i.e removes `assignedVehicleRole` of the unit.\nIf the unit is currently in that vehicle, the group leader will issue an order to disembark.\n**NOTE**: See [AI Group Vehicle Management](https://community.bistudio.com/wiki/AI%20Group%20Vehicle%20Management) for more information.",
            "examples": [
                {
                    "text": "```sqf\nunassignVehicle player;\n```"
                },
                {
                    "text": "Make all the occupants of a vehicle disembark:\n\n```sqf\n{ unassignVehicle _x } forEach crew _vehicle;\n```"
                },
                {
                    "text": "Make all the occupants of a vehicle disembark and unable to get back in:\n\n```sqf\n\nprivate _crew = crew _vehicle;\n{ unassignVehicle _x } forEach _crew;\n_crew allowGetIn false;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`unassignVehicle` unitName",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/unassignVehicle"
        },
        "configuration": {
            "label": "unassignVehicle",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns whether the object is fully underwater.\n**NOTE**: This command works well with Arma 3 mini-submarines, which was most likely the primary design goal.",
            "examples": [
                {
                    "text": "```sqf\nprivate _isUnderwater = underwater vehicle player;\n```"
                },
                {
                    "text": "```sqf\nprivate _isHeadUnderwater = eyePos player select 2 < 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - mini-submarine"
                        }
                    ],
                    "outline": "`underwater` object",
                    "returns": "`Boolean` - `true` if submerged"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/underwater"
        },
        "configuration": {
            "label": "underwater",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns name of uniform.",
            "examples": [
                {
                    "text": "```sqf\n_uniform = uniform _unit;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`uniform` unit",
                    "returns": "`String`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/uniform"
        },
        "configuration": {
            "label": "uniform",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a cargo container of a unit's uniform.",
            "examples": [
                {
                    "text": "```sqf\nhint str uniformContainer player; //2df7dd00# 163941: dummyweapon.p3d\n```"
                },
                {
                    "text": "```sqf\nhint str getMagazineCargo uniformContainer player;\n/*\n\treturns e.g\n\t[\n\t\t[\"30Rnd_65x39_caseless_mag\"],\n\t\t[3]\n\t]\n*/\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`uniformContainer` unit",
                    "returns": "`Object` - cargo container, `objNull` if _unit_ does not wear any uniform/clothing"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/uniformContainer"
        },
        "configuration": {
            "label": "uniformContainer",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get array with all items (of any kind, even weapons) from uniform.",
            "examples": [
                {
                    "text": "```sqf\n\nuniformItems player;\n// returns e.g\n/*\n[\n\t\"FirstAidKit\",\n\t\"30Rnd_65x39_caseless_mag\",\n\t\"30Rnd_65x39_caseless_mag\",\n\t\"30Rnd_65x39_caseless_mag\"\n]\n*/\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`uniformItems` unit",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/uniformItems"
        },
        "configuration": {
            "label": "uniformItems",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get array with all magazines from uniform of the given unit.",
            "examples": [
                {
                    "text": "```sqf\n\nuniformMagazines player;\n// returns e.g\n/*\n[\n\t\"6.5mm 30Rnd STANAG Mag(30/30)[id/cr:1/0](3x)\"\n]\n*/\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`uniformMagazines` unit",
                    "returns": "`Array` of `String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/uniformMagazines"
        },
        "configuration": {
            "label": "uniformMagazines",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns hashmap of all items in units inventory as [classname, count] pairs.\n**NOTE**: \n* _weaponItems_, _uniformItems_, _vestItems_, _backpackItems_ arguments use the following `Number` values:\n** 0: do not return value\n** 1: returns container only (weapon or container)\n** 2: returns container and its content\n* weapons/containers that are stored inside containers (e.g weapon in backpack) always return all contents if contents for the parent container are enabled.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _unitUniqueItems = uniqueUnitItems [player, 0, 2, 2, 2, true];\nif (_unitUniqueItems getOrDefault [\"FirstAidKit\", 0] > 5) then { hint \"I'm rich of FAK to give!\"; };\n\n```"
                },
                {
                    "text": "```sqf\nprivate _unitUniqueItems = uniqueUnitItems [cursorObject];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`uniqueUnitItems` unit",
                    "returns": "`HashMap` in format itemClassname (`String`) &rarr; amount (`Number`)"
                },
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "weaponsItems",
                            "description": "`Number` - (Optional, default 2) weapons (including binoculars) and their accessories (flashlight etc), loaded magazines"
                        },
                        {
                            "name": "uniformItems",
                            "description": "`Number` - (Optional, default 2)"
                        },
                        {
                            "name": "vestItems",
                            "description": "`Number` - (Optional, default 2)"
                        },
                        {
                            "name": "backpackItems",
                            "description": "`Number` - (Optional, default 2)"
                        },
                        {
                            "name": "assignedItems",
                            "description": "`Boolean` - (Optional, default `true`) returns `assignedItems` as well as `headgear` and [goggles](https://community.bistudio.com/wiki/hmd)"
                        }
                    ],
                    "outline": "`uniqueUnitItems` [unit, weaponsItems, uniformItems, vestItems, backpackItems, assignedItems]",
                    "returns": "`HashMap` in format itemClassname (`String`) &rarr; amount (`Number`)"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/uniqueUnitItems"
        },
        "configuration": {
            "label": "uniqueUnitItems",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns list with addons the unit belongs to.",
            "examples": [
                {
                    "text": "```sqf\nhint str unitAddons typeOf player; // [\"A3_Characters_F_BLUFOR\"]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "className",
                            "description": "`String` - class name of a unit/vehicle or object"
                        }
                    ],
                    "outline": "`unitAddons` className",
                    "returns": "`Array` - addon names"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/unitAddons"
        },
        "configuration": {
            "label": "unitAddons",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the position on the unit other units can aim at. Same as `aimPos` only returns position in [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) format and has render scope alternative `unitAimPositionVisual`.",
            "examples": [
                {
                    "text": "```sqf\nunitAimPosition player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`unitAimPosition` unit",
                    "returns": "`Array` format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL)"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/unitAimPosition"
        },
        "configuration": {
            "label": "unitAimPosition",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the position on the unit other units can aim at in render scope. See also `aimPos`, `unitAimPosition`.",
            "examples": [
                {
                    "text": "```sqf\nunitAimPositionVisual player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`unitAimPositionVisual` unit",
                    "returns": "`Array` - position in format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL)"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/unitAimPositionVisual"
        },
        "configuration": {
            "label": "unitAimPositionVisual",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns unit's backpack",
            "examples": [
                {
                    "text": "```sqf\nprivate _myBackpack = unitBackpack player;\n```"
                },
                {
                    "text": "```sqf\nclearMagazineCargo unitBackpack player;\n```"
                },
                {
                    "text": "```sqf\nplayer action [\"gear\", unitBackpack player];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`unitBackpack` unit",
                    "returns": "`Object`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/unitBackpack"
        },
        "configuration": {
            "label": "unitBackpack",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets individual unit's [combat mode](https://community.bistudio.com/wiki/Combat%20Modes). For more information see `setUnitCombatMode`.",
            "examples": [
                {
                    "text": "```sqf\nunitCombatMode _unit;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`unitCombatMode` unit",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/unitCombatMode"
        },
        "configuration": {
            "label": "unitCombatMode",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns whether or not the given transport object is a drone (UAV, UGV), regardless of if it has a crew or if it is empty,\ncorresponding to the <syntaxhighlight lang=\"cpp\" inline>isUAV</syntaxhighlight> transport parameter.\n\n{{GVI|arma3|2.14",
            "examples": [
                {
                    "text": "```sqf\n\nunitIsUAV _myUAV;\t\t\t// true (whether it has driver/gunner or not)\nunitIsUAV driver _myUAV;\t// true (provided there is a driver)\nunitIsUAV gunner _myUAV;\t// true (provided there is a gunner)\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - vehicle or {{GVI|arma3|2.14"
                        }
                    ],
                    "outline": "`unitIsUAV` object",
                    "returns": "`Boolean` - `true` when UAV"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/unitIsUAV"
        },
        "configuration": {
            "label": "unitIsUAV",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return the unit position rules.\n\nThe return value is always \"Auto\" unless the unit has gotten a `setUnitPos` command. In that case the value is the last stance the unit was ordered to.\n\nAvailable modes are listed at `setUnitPos`.",
            "examples": [
                {
                    "text": "```sqf\nhint str unitPos _unit;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`unitPos` unit",
                    "returns": "`String` - one of `**\"Auto\"**`, `**\"Up\"**`, `**\"Middle\"**`, `**\"Down\"**` (as of Arma 3)"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/unitPos"
        },
        "configuration": {
            "label": "unitPos",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check if the unit is ready. Unit is busy when it is given some command like `move`, until the command is finished.",
            "examples": [
                {
                    "text": "```sqf\nprivate _it = unitReady _soldierOne;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`unitReady` unitName",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/unitReady"
        },
        "configuration": {
            "label": "unitReady",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns recoil coefficient of a soldier.",
            "examples": [
                {
                    "text": "```sqf\n_myRecoil = unitRecoilCoefficient player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "soldier",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`unitRecoilCoefficient` soldier",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/unitRecoilCoefficient"
        },
        "configuration": {
            "label": "unitRecoilCoefficient",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array with all the units in the group or unit's group, or all units belonging to a certain side.",
            "examples": [
                {
                    "text": "```sqf\n_myUnitCount = count units player;\n```"
                },
                {
                    "text": "```sqf\n_isInMyGroup = _soldier1 in units player;\n```"
                },
                {
                    "text": "```sqf\nprivate _unitsEast = units opfor;\n```"
                },
                {
                    "text": "```sqf\n\n// both methods are the same, the latter is preferred for performance reason\nunits group player;\t\t// [B Alpha 1-1:1 (R3vo), B Alpha 1-1:2, B Alpha 1-1:3, B Alpha 1-1:4, B Alpha 1-1:5, B Alpha 1-1:6, B Alpha 1-1:7, B Alpha 1-1:8]\nunits player;\t\t\t// [B Alpha 1-1:1 (R3vo), B Alpha 1-1:2, B Alpha 1-1:3, B Alpha 1-1:4, B Alpha 1-1:5, B Alpha 1-1:6, B Alpha 1-1:7, B Alpha 1-1:8]\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`Group`, `Object` or {{GVI|arma3|2.02"
                        }
                    ],
                    "outline": "`units` type",
                    "returns": "`Array` of `Object`s - if _type_ is a destroyed object, an empty array is returned"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/units"
        },
        "configuration": {
            "label": "units",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns units in group/array below given Above Terrain Level (ATL) altitude.\n**NOTE**: an object's ATL altitude can be found with <sqf inline>_altitude = (getPosATL _obj) select 2;.",
            "examples": [
                {
                    "text": "```sqf\n_allOnGroudUnits = group player unitsBelowHeight 10;\n```"
                },
                {
                    "text": "```sqf\n_units = allUnits unitsBelowHeight 30;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "units",
                            "description": "`Array` of `Object`s"
                        },
                        {
                            "name": "height",
                            "description": "`Number` - height above terrain level ([PositionATL](https://community.bistudio.com/wiki/Position%23PositionATL))"
                        }
                    ],
                    "outline": "units `unitsBelowHeight` height",
                    "returns": "`Array` of `Object`s"
                },
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group` - AI group"
                        },
                        {
                            "name": "height",
                            "description": "`Number` - height above terrain level ([PositionATL](https://community.bistudio.com/wiki/Position%23PositionATL))"
                        }
                    ],
                    "outline": "group `unitsBelowHeight` height",
                    "returns": "`Array` of `Object`s"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/unitsBelowHeight"
        },
        "configuration": {
            "label": "unitsBelowHeight",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the turret path the given vehicle's gunner is in.\nTo get the turret's unit see `turretUnit`.",
            "examples": [
                {
                    "text": "```sqf\n_vehicle unitTurret _gunner;\n```"
                },
                {
                    "text": "```sqf\nvehicle player unitTurret player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "gunner",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "vehicle `unitTurret` gunner",
                    "returns": "`Array` format [Turret Path](https://community.bistudio.com/wiki/Turret%20Path)\n- `**[-1]**` is returned if the `gunner` is also the `driver`.\nWhen no units are in any of vehicle's turret, empty array `**[]**` is returned."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/unitTurret"
        },
        "configuration": {
            "label": "unitTurret",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Unassign and delete existing item from its assigned slot. If item does not exist or is not in the assigned slot, command simply fails. See also `unassignItem`.",
            "examples": [
                {
                    "text": "```sqf\nbluforUnit unlinkItem \"NVGoggles\";\nopforUnit unlinkItem \"NVGoggles_OPFOR\";\nindependentUnit unlinkItem \"NVGoggles_INDEP\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "item",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `unlinkItem` item",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/unlinkItem"
        },
        "configuration": {
            "label": "unlinkItem",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Unlocks the given achievement. The achievements are listed in CfgAchievements, however none of the currently listed achievements is used in Arma 3, hence the command always returns `false`.\n\n\n\n{{Feature|important|\nThis command is obsolete and was used in the experimental (unreleased) Arma 2 Xbox 360 version as stated\n{{Link|https://forums.bohemia.net/forums/topic/187873-unlockachievment-command/?tab{{=}}comments#comment-2978436|here}}.\n}}\n**Arma 3**: To unlock a [Steam Achievement](https://community.bistudio.com/wiki/Arma%203%3A%20Stat%20Names) for Arma 3, see `setStatValue`.",
            "examples": [
                {
                    "text": "```sqf\n_isUnlocked = unlockAchievement \"Hunter\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "name",
                            "description": "`String` - achievement name"
                        }
                    ],
                    "outline": "`unlockAchievement` name",
                    "returns": "`Boolean` - `true` if achievement was unlocked"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/unlockAchievement"
        },
        "configuration": {
            "label": "unlockAchievement",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Unregisters a task type from given agent. The task type is the name given in `**CfgTasks**` classes in `**name**` property. Also available from `registeredTasks` array.",
            "examples": [
                {
                    "text": "```sqf\nteamMember _agent unregisterTask (registeredTasks select 0);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "teamMember",
                            "description": "[Team Member](https://community.bistudio.com/wiki/Team%20Member) - `teamMember` `agent`"
                        },
                        {
                            "name": "name",
                            "description": "`String` - name of the task"
                        }
                    ],
                    "outline": "teamMember `unregisterTask` name",
                    "returns": "`Boolean` - `true` on success"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/unregisterTask"
        },
        "configuration": {
            "label": "unregisterTask",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Updates the icon to be shown in 2D editor for the specified editor,object. If maintain size is false,icon will not scale depending on the,scale of the map. If maintain size is a number,the icon will maintain,size if map scale is below that number.\n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "[object,string identifier,color,offset,width,height,maintain size?,angle,shadow]",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "map `updateDrawIcon` [object,string identifier,color,offset,width,height,maintain size?,angle,shadow]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/updateDrawIcon"
        },
        "configuration": {
            "label": "updateDrawIcon",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sets the text and command for the menu item. Index is index returned by `addMenuItem` command. Command is optional.\n**NOTE**: Some Old Editor Command",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        },
                        {
                            "name": "menu item index",
                            "description": "`Number` - See `addMenuItem`"
                        },
                        {
                            "name": "text",
                            "description": "`String`"
                        },
                        {
                            "name": "command",
                            "description": "`String`"
                        }
                    ],
                    "outline": "map `updateMenuItem` [menu item index, text, command]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/updateMenuItem"
        },
        "configuration": {
            "label": "updateMenuItem",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Update the editor object tree.\n**NOTE**: Some Old Editor Command",
            "examples": [
                {
                    "text": "```sqf\nupdateObjectTree _ctrlMap;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control`"
                        }
                    ],
                    "outline": "`updateObjectTree` map",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/updateObjectTree"
        },
        "configuration": {
            "label": "updateObjectTree",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Toggle secondary obstruction test on road paths.",
            "examples": [
                {
                    "text": "```sqf\nuseAIOperMapObstructionTest true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "state",
                            "description": "`Boolean` - `true` to enable, `false` to disable"
                        }
                    ],
                    "outline": "`useAIOperMapObstructionTest` state",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/useAIOperMapObstructionTest"
        },
        "configuration": {
            "label": "useAIOperMapObstructionTest",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Enable the new {{Link",
            "examples": [
                {
                    "text": "```sqf\nuseAISteeringComponent true;\n```"
                },
                {
                    "text": "```sqf\nmyTank useAISteeringComponent false;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "enabled",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "`useAISteeringComponent` enabled",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - the vehicle to enable/disable the feature for"
                        },
                        {
                            "name": "enabled",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "vehicle `useAISteeringComponent` enabled"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/useAISteeringComponent"
        },
        "configuration": {
            "label": "useAISteeringComponent",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Switch between elapsed game time and audio time being used as animation timer. Used for audio/animation synchronization.",
            "examples": [
                {
                    "text": "```sqf\nplayer useAudioTimeForMoves true;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "soldier",
                            "description": "`Object`"
                        },
                        {
                            "name": "toggle",
                            "description": "`Boolean`"
                        }
                    ],
                    "outline": "soldier `useAudioTimeForMoves` toggle",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/useAudioTimeForMoves"
        },
        "configuration": {
            "label": "useAudioTimeForMoves",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns true if user input is disabled",
            "examples": [
                {
                    "text": "Toggles user input\n```sqf\ndisableUserInput !userInputDisabled;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**userInputDisabled**",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/userInputDisabled"
        },
        "configuration": {
            "label": "userInputDisabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns all values stored in the given `HashMap`. The order of the returned Array corresponds to the order of the Array returned by the `keys` command.",
            "examples": [
                {
                    "text": "```sqf\nprivate _values = values _myHashMap;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "hashmap",
                            "description": "`HashMap`"
                        }
                    ],
                    "outline": "`values` hashmap",
                    "returns": "`Array` - all values stored in _hashmap_"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/values"
        },
        "configuration": {
            "label": "values",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Adds two arrays of numbers. Replaces `BIS_fnc_vectorAdd`.",
            "examples": [
                {
                    "text": "```sqf\nhint str (velocity unit1 vectorAdd velocity unit2);\n```"
                },
                {
                    "text": "```sqf\n[5, 10, 5] vectorAdd [5, 5, 10];\t\t\t// returns [10, 15, 15]\n```"
                },
                {
                    "text": "```sqf\n[0, 0] vectorAdd [1, -2];\t\t\t\t\t// returns [1, -2, 0]\n```"
                },
                {
                    "text": "```sqf\n[1, 2, 3, 4, 5, 6] vectorAdd [10, 10, 10];\t// returns [11, 12, 13, 4, 5, 6]\n```"
                },
                {
                    "text": "```sqf\n\n[1, 2, 3] vectorAdd [1, 2, 3];\t// [2, 4, 6]\n[1, 2, 3] vectorAdd [1, 2];\t\t// [2, 4, 3]\n[1, 2] vectorAdd [1, 2, 3];\t\t// [2, 4, 3]\n[1, 2] vectorAdd [1, 2];\t\t// [2, 4]\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vector1",
                            "description": "`Array` of `Number`s of any size"
                        },
                        {
                            "name": "vector2",
                            "description": "`Array` of `Number`s of any size"
                        }
                    ],
                    "outline": "vector1 `vectorAdd` vector2",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/vectorAdd"
        },
        "configuration": {
            "label": "vectorAdd",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Cosine of angle between two 3D vectors.",
            "examples": [
                {
                    "text": "```sqf\n_cos = getPos player vectorCos [0,0,2];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vector1",
                            "description": "`Array` - vector 3D or 2D (since Arma 3 v2.00, the z coordinate is defaulted to 0)"
                        },
                        {
                            "name": "vector2",
                            "description": "`Array` - vector 3D or 2D (since Arma 3 v2.00, the z coordinate is defaulted to 0)"
                        }
                    ],
                    "outline": "vector1 `vectorCos` vector2",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/vectorCos"
        },
        "configuration": {
            "label": "vectorCos",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Cross product of two 3D vectors. \n\nIn layman's terms, if you have a polygon (surface) defined by 3 points, you can find a normal to it (just like terrain `surfaceNormal`). To invert direction of the normal, swap arguments around.",
            "examples": [
                {
                    "text": "```sqf\n_vector = [1,1,1] vectorCrossProduct [2,2,2];\n```"
                },
                {
                    "text": "```sqf\n_vectorUp = [0,1,0] vectorCrossProduct [-1,0,0]; //[0,-0,1]\n```"
                },
                {
                    "text": "```sqf\n_vectorSide = (vectorDir player) vectorCrossProduct (vectorUp player);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vector1",
                            "description": " `Array` - in form [x, y, z] or 2D (since Arma 3 v2.00, z coordinate is defaulted to 0)"
                        },
                        {
                            "name": "vector2",
                            "description": " `Array` - in form [x, y, z] or 2D (since Arma 3 v2.00, z coordinate is defaulted to 0)"
                        }
                    ],
                    "outline": "vector1 `vectorCrossProduct` vector2",
                    "returns": "`Array` -  vector [x, y, z]\n\n\n\n[[File:crossProduct.jpg|300px]]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/vectorCrossProduct"
        },
        "configuration": {
            "label": "vectorCrossProduct",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Subtracts one 3D vector from another. (vector1 - vector2)",
            "examples": [
                {
                    "text": "```sqf\nhint str (velocity car vectorDiff velocity bike);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vector1",
                            "description": "`Array` - vector 3D or 2D (since Arma 3 v2.00, z coordinate is defaulted to 0)"
                        },
                        {
                            "name": "vector2",
                            "description": "`Array` - vector 3D or 2D (since Arma 3 v2.00, z coordinate is defaulted to 0)"
                        }
                    ],
                    "outline": "vector1 `vectorDiff` vector2",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/vectorDiff"
        },
        "configuration": {
            "label": "vectorDiff",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "[[File:arma3_object-vectors.jpg|thumb|right|An object with its `vectorDir`, `vectorUp` and `vectorSide` (vectors not to scale)]]\nReturns an object's direction vector in world space.\n\n{{Feature|important|The vector is **not necessarily [normalized](https://community.bistudio.com/wiki/vectorNormalized)**. The [magnitude](https://community.bistudio.com/wiki/vectorMagnitude) of the vector depends on the [[getObjectScale|object's scale]].}}\n\nFor an object facing one of the cardinal directions on perfectly flat ground (parallel to the XY-plane of the world space), `vectorDir` returns simple values:\n* `**[0, 1, 0]**` if the object is facing directly north\n* `**[1, 0, 0]**` if the object is facing directly east\n* `**[0, -1, 0]**` if the object is facing directly south\n* `**[-1, 0, 0]**` if the object is facing directly west",
            "examples": [
                {
                    "text": "```sqf\n_vecDir = vectorDir MyObject;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`vectorDir` object",
                    "returns": "`Array` format `Vector3D`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/vectorDir"
        },
        "configuration": {
            "label": "vectorDir",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "[[File:arma3_object-vectors.jpg|thumb|right|An object with its `vectorDirVisual`, `vectorUpVisual` and `vectorSideVisual` (vectors not to scale)]]\nReturns an object's direction vector in world space and [render time scope](https://community.bistudio.com/wiki/Simulation%20vs%20Render%20Time%20Scope).\n\n{{Feature|important|The vector is **not necessarily [normalized](https://community.bistudio.com/wiki/vectorNormalized)**. The [magnitude](https://community.bistudio.com/wiki/vectorMagnitude) of the vector depends on the [[getObjectScale|object's scale]].}}\n\nFor an object facing one of the cardinal directions on perfectly flat ground (parallel to the XY-plane of the world space), `vectorDirVisual` returns simple values:\n* `**[0, 1, 0]**` if the object is facing directly north\n* `**[1, 0, 0]**` if the object is facing directly east\n* `**[0, -1, 0]**` if the object is facing directly south\n* `**[-1, 0, 0]**` if the object is facing directly west",
            "examples": [
                {
                    "text": "```sqf\n_vecDirVis = vectorDirVisual MyObject;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`vectorDirVisual` object",
                    "returns": "`Array` format `Vector3D`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/vectorDirVisual"
        },
        "configuration": {
            "label": "vectorDirVisual",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns {{Link|https://en.wikipedia.org/wiki/Euclidean_distance|Euclidean distance}} between two points.",
            "examples": [
                {
                    "text": "```sqf\n_euclideanDist = getPosASL player vectorDistance [0,0,0];\n```"
                },
                {
                    "text": "```sqf\n(getPosASL _a) vectorDistance (getPosASL _b);\n// same as\n(getPosATL _a) distance (getPosATL _b);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "point1",
                            "description": "[Position3D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) - (since **(Arma 3)**, z coordinate is defaulted to 0)"
                        },
                        {
                            "name": "point2",
                            "description": "[Position3D](https://community.bistudio.com/wiki/Position%23Introduction) or [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) - (since **(Arma 3)**, z coordinate is defaulted to 0)"
                        }
                    ],
                    "outline": "point1 `vectorDistance` point2",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/vectorDistance"
        },
        "configuration": {
            "label": "vectorDistance",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Squared distance between two 3D vectors.",
            "examples": [
                {
                    "text": "```sqf\n_distSqr = getPos player vectorDistanceSqr [0,0,2];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vector1",
                            "description": "`Array` - vector 3D or 2D (since Arma 3 v2.00, z coordinate is defaulted to 0)"
                        },
                        {
                            "name": "vector2",
                            "description": "`Array` - vector 3D or 2D (since Arma 3 v2.00, z coordinate is defaulted to 0)"
                        }
                    ],
                    "outline": "vector1 `vectorDistanceSqr` vector2",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/vectorDistanceSqr"
        },
        "configuration": {
            "label": "vectorDistanceSqr",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Dot product of two 3D vectors.",
            "examples": [
                {
                    "text": "```sqf\n_dot = [1,0,1] vectorDotProduct [0,0,2];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vector1",
                            "description": "`Array` - vector 3D or 2D (since Arma 3 v2.00, z coordinate is defaulted to 0)"
                        },
                        {
                            "name": "vector2",
                            "description": "`Array` - vector 3D or 2D (since Arma 3 v2.00, z coordinate is defaulted to 0)"
                        }
                    ],
                    "outline": "vector1 `vectorDotProduct` vector2",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/vectorDotProduct"
        },
        "configuration": {
            "label": "vectorDotProduct",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Unit vector, equal to direction from vector1 to vector2. In other words this command produces [ normalised vector](https://community.bistudio.com/wiki/vectorNormalized%20) between given 2 points.\n\nTo get a non-normalised vector, use `vectorDiff`.",
            "examples": [
                {
                    "text": "```sqf\n[1,2,3] vectorFromTo [4,5,6];\n// is the same as\nvectorNormalized ([4,5,6] vectorDiff [1,2,3]);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vector1",
                            "description": "`Array` - vector 3D or 2D (since **(Arma 3)**, z coordinate is defaulted to 0)"
                        },
                        {
                            "name": "vector2",
                            "description": "`Array` - vector 3D or 2D (since **(Arma 3)**, z coordinate is defaulted to 0)"
                        }
                    ],
                    "outline": "vector1 `vectorFromTo` vector2",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/vectorFromTo"
        },
        "configuration": {
            "label": "vectorFromTo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Interpolates vector between the given _vectorFrom_ and _vectorTo_ value according to the given range value.",
            "examples": [
                {
                    "text": "```sqf\nvectorLinearConversion [0, 1, 0.5, [0,0,0], [25,50,100], false];\t// [12.5,25,50]\n```"
                },
                {
                    "text": "```sqf\nvectorLinearConversion [0, 1, 100, [0,0,0], [25,50,100], true];\t// [25,50,100]\n```"
                },
                {
                    "text": "```sqf\nvectorLinearConversion [0, 1, 100, [0,0,0], [25,50,100], false];\t// [2500,5000,10000]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "rangeFrom",
                            "description": "`Number` - start \"from\" range"
                        },
                        {
                            "name": "rangeTo",
                            "description": "`Number` - end \"to\" range"
                        },
                        {
                            "name": "rangeValue",
                            "description": "`Number` - variable range value"
                        },
                        {
                            "name": "vectorFrom",
                            "description": "`Array` - start \"from\" vector"
                        },
                        {
                            "name": "vectorTo",
                            "description": "`Array` - end \"to\" vector"
                        },
                        {
                            "name": "clip",
                            "description": "`Boolean` - (Optional, default `false`) if `true`, range value will be clipped to stay within \"from\" - \"to\" range"
                        }
                    ],
                    "outline": "`vectorLinearConversion` [rangeFrom, rangeTo, rangeValue, vectorFrom, vectorTo, clip]",
                    "returns": "`Array` - interpolated vector"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/vectorLinearConversion"
        },
        "configuration": {
            "label": "vectorLinearConversion",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Magnitude of a 3D vector.",
            "examples": [
                {
                    "text": "```sqf\n_size = vectorMagnitude [0,3,4]; // returns 5\n```"
                },
                {
                    "text": "```sqf\n\n_speed = vectorMagnitude velocity player;\t\t\t\t// return velocity of player in m/s\n_speed = (vectorMagnitude velocity player) * 3.6;\t\t// return velocity of player in km/h\n_speed = (vectorMagnitude velocity player) * 2.23694;\t// return velocity of player in mph\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vector",
                            "description": "`Array` - vector 3D or 2D (since Arma 3 v2.00, z coordinate is defaulted to 0)"
                        }
                    ],
                    "outline": "`vectorMagnitude` vector",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/vectorMagnitude"
        },
        "configuration": {
            "label": "vectorMagnitude",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Squared magnitude of a 3D vector.",
            "examples": [
                {
                    "text": "```sqf\n_sizeSqr = vectorMagnitudeSqr [0,3,4]; // returns 25\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vector",
                            "description": "`Array` - vector 3D or 2D (since Arma 3 v2.00, z coordinate is defaulted to 0)"
                        }
                    ],
                    "outline": "`vectorMagnitudeSqr` vector",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/vectorMagnitudeSqr"
        },
        "configuration": {
            "label": "vectorMagnitudeSqr",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Converts vector direction from model to world space.\n**IMPORTANT**: For [scaled objects](https://community.bistudio.com/wiki/setObjectScale), the resulting vector's [magnitude](https://community.bistudio.com/wiki/vectorMagnitude) will also be [multiplied](https://community.bistudio.com/wiki/vectorMultiply) by the object scale.",
            "examples": [
                {
                    "text": "Convert model space vector [0,-10,4] to world space; vector gets rotated according to _airplane: \n\n```sqf\n_airplane vectorModelToWorld [0,-10,4];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "modelDir",
                            "description": "`Array` - vector direction in model space in format [x,y,z]"
                        }
                    ],
                    "outline": "object `vectorModelToWorld` modelDir",
                    "returns": "`Array` - vector direction in world space in format [x,y,z]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/vectorModelToWorld"
        },
        "configuration": {
            "label": "vectorModelToWorld",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Converts vector from model to world space in render time scope.\n**IMPORTANT**: For [scaled objects](https://community.bistudio.com/wiki/setObjectScale), the resulting vector's [magnitude](https://community.bistudio.com/wiki/vectorMagnitude) will also be [multiplied](https://community.bistudio.com/wiki/vectorMultiply) by the object scale.",
            "examples": [
                {
                    "text": "Convert model space vector [0,-10,4] to world space; vector gets rotated according to _airplane: \n\n```sqf\n_airplane vectorModelToWorldVisual [0,-10,4];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "modelDir",
                            "description": "`Array` - vector direction in model space in format [x,y,z]"
                        }
                    ],
                    "outline": "object `vectorModelToWorldVisual` modelDir",
                    "returns": "`Array` - vector direction in world space in format [x,y,z]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/vectorModelToWorldVisual"
        },
        "configuration": {
            "label": "vectorModelToWorldVisual",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Multiplies 3D vector by a scalar.",
            "examples": [
                {
                    "text": "```sqf\n_newVector = [1,2,3] vectorMultiply 3; // returns [3,6,9]\n```"
                },
                {
                    "text": "```sqf\n \nprivate _eyePos = eyePos player;\nprivate _eyeDir = getCameraViewDirection player;\t// this is a normalized vector, i.e. its magnitude is 1\nprivate _100mFurther = _eyeDir vectorMultiply 100;\t// since _eyeDir is normalized, multiplying it by 100 means 100 m in that direction\nprivate _lookPos = _eyePos vectorAdd _100mFurther;\t// the position where player is looking 100m ahead\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vector",
                            "description": "`Array` - vector 3D or 2D (since Arma 3 v2.00, z coordinate is defaulted to 0)"
                        },
                        {
                            "name": "scalar",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "vector `vectorMultiply` scalar",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/vectorMultiply"
        },
        "configuration": {
            "label": "vectorMultiply",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns normalized vector (unit vector, `vectorMagnitude` {{=}}{{=}} 1) of given vector. If given vector is 0 result is a 0 vector as well.",
            "examples": [
                {
                    "text": "```sqf\nvectorNormalized [12345,7890,38383]; // [0.300481,0.192045,0.934254]\nvectorMagnitude [0.300481,0.192045,0.934254]; // 1\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vector",
                            "description": "`Array` - vector 3D or 2D (since Arma 3 v2.00, z coordinate is defaulted to 0)"
                        }
                    ],
                    "outline": "`vectorNormalized` vector",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/vectorNormalized"
        },
        "configuration": {
            "label": "vectorNormalized",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "[[File:arma3_object-vectors.jpg|thumb|right|An object with its `vectorDir`, `vectorUp` and `vectorSide` (vectors not to scale)]]\nReturns an object's side vector in world space.\n\n**IMPORTANT**: The vector is **not necessarily [normalized](https://community.bistudio.com/wiki/vectorNormalized)**. The [magnitude](https://community.bistudio.com/wiki/vectorMagnitude) of the vector depends on the [[getObjectScale|object's scale]].",
            "examples": [
                {
                    "text": "```sqf\n_vecSide = vectorSide MyObject;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`vectorSide` object",
                    "returns": "`Array` format `Vector3D`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/vectorSide"
        },
        "configuration": {
            "label": "vectorSide",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "[[File:arma3_object-vectors.jpg|thumb|right|An object with its `vectorDirVisual`, `vectorUpVisual` and `vectorSideVisual` (vectors not to scale)]]\nReturns an object's side vector in world space and [render time scope](https://community.bistudio.com/wiki/Simulation%20vs%20Render%20Time%20Scope).\n\n**IMPORTANT**: The vector is **not necessarily [normalized](https://community.bistudio.com/wiki/vectorNormalized)**. The [magnitude](https://community.bistudio.com/wiki/vectorMagnitude) of the vector depends on the [[getObjectScale|object's scale]].",
            "examples": [
                {
                    "text": "```sqf\n_vecSideVis = vectorSideVisual MyObject;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`vectorSideVisual` object",
                    "returns": "`Array` format `Vector3D`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/vectorSideVisual"
        },
        "configuration": {
            "label": "vectorSideVisual",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "[[File:arma3_object-vectors.jpg|thumb|right|An object with its `vectorDir`, `vectorUp` and `vectorSide` (vectors not to scale)]]\nReturns an object's up vector in world space.\n\n**IMPORTANT**: The vector is **not necessarily [normalized](https://community.bistudio.com/wiki/vectorNormalized)**. The [magnitude](https://community.bistudio.com/wiki/vectorMagnitude) of the vector depends on the [[getObjectScale|object's scale]].",
            "examples": [
                {
                    "text": "```sqf\n_vecUp = vectorUp MyObject;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`vectorUp` object",
                    "returns": "`Array` format `Vector3D`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/vectorUp"
        },
        "configuration": {
            "label": "vectorUp",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "[[File:arma3_object-vectors.jpg|thumb|right|An object with its `vectorDirVisual`, `vectorUpVisual` and `vectorSideVisual` (vectors not to scale)]]\nReturns an object's up vector in world space and [render time scope](https://community.bistudio.com/wiki/Simulation%20vs%20Render%20Time%20Scope).\n\n**IMPORTANT**: The vector is **not necessarily [normalized](https://community.bistudio.com/wiki/vectorNormalized)**. The [magnitude](https://community.bistudio.com/wiki/vectorMagnitude) of the vector depends on the [[getObjectScale|object's scale]].",
            "examples": [
                {
                    "text": "```sqf\n_vecUpVis = vectorUpVisual MyObject;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`vectorUpVisual` object",
                    "returns": "`Array` format `Vector3D`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/vectorUpVisual"
        },
        "configuration": {
            "label": "vectorUpVisual",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Converts vector direction from world to model space.\n**IMPORTANT**: For [scaled objects](https://community.bistudio.com/wiki/setObjectScale), the resulting vector's [magnitude](https://community.bistudio.com/wiki/vectorMagnitude) will be [divided](https://community.bistudio.com/wiki/vectorMultiply) by the object scale.",
            "examples": [
                {
                    "text": "Convert world space vector [0,-10,4] to model space of object _airplane: \n\n```sqf\n_airplane vectorWorldToModel [0,-10,4];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "worldDir",
                            "description": "`Array` - vector direction in world space in format [x,y,z]"
                        }
                    ],
                    "outline": "object `vectorWorldToModel` worldDir",
                    "returns": "`Array` - vector direction in model space in format [x,y,z]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/vectorWorldToModel"
        },
        "configuration": {
            "label": "vectorWorldToModel",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Converts vector direction from world to model space in [render time scope](https://community.bistudio.com/wiki/Simulation%20vs%20Render%20Time%20Scope).\n**IMPORTANT**: For [scaled objects](https://community.bistudio.com/wiki/setObjectScale), the resulting vector's [magnitude](https://community.bistudio.com/wiki/vectorMagnitude) will be [divided](https://community.bistudio.com/wiki/vectorMultiply) by the object scale.",
            "examples": [
                {
                    "text": "Convert world space vector [0,-10,4] to model space of object _airplane:\n\n```sqf\nprivate _vector = _airplane vectorWorldToModelVisual [0,-10,4];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "worldDir",
                            "description": "`Array` - vector direction in world space in format [x,y,z]"
                        }
                    ],
                    "outline": "object `vectorWorldToModelVisual` worldDir",
                    "returns": "`Array` - vector direction in model space in format [x,y,z]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/vectorWorldToModelVisual"
        },
        "configuration": {
            "label": "vectorWorldToModelVisual",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Vehicle in which given unit is mounted. If none, unit is returned. Alternatively, use `objectParent`\n**IMPORTANT**: While `vehicle` may return the vehicle the unit is in for **`alive`** units, for dead units which are groupless, this command returns the unit itself - use `objectParent` instead.",
            "examples": [
                {
                    "text": "SQS\n<sqs>? vehicle player != player : hint \"Player is in a vehicle\"</sqs>"
                },
                {
                    "text": "SQF\n\n```sqf\nif (vehicle player != player) then { hint \"Player is in a vehicle\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unitName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`vehicle` unitName",
                    "returns": "`Object`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/vehicle"
        },
        "configuration": {
            "label": "vehicle",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check if the vehicle has enabled transporting other vehicles or not.",
            "examples": [
                {
                    "text": "Blackfish (Vehicle Transport) with given variable name blackfish\n\n```sqf\n_canTransportVehicles = vehicleCargoEnabled blackfish; //returns true\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`vehicleCargoEnabled` vehicle",
                    "returns": "`Boolean` - returns true if the vehicle has enabled transporting other vehicles, and false if the vehicle has not enabled transporting other vehicles"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/vehicleCargoEnabled"
        },
        "configuration": {
            "label": "vehicleCargoEnabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Types text to the vehicle radio channel. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally, see `remoteExec`.\n\n**NOTE**: \n* Object parameter must be a vehicle, not a player\n* If you are in a crew seat (i.e. driver, gunner or commander), then it will include that role in the chat name output (Eg: Driver (you_name): \"Message\")",
            "examples": [
                {
                    "text": "```sqf\nvehicle player vehicleChat \"Show this text\";\n```"
                },
                {
                    "text": "[[File:xChat.jpg|right]]\n\n```sqf\n\ndriver vehicle player sideChat \"sideChat\";\ndriver vehicle player globalChat \"globalChat\";\ndriver vehicle player groupChat \"groupChat\";\nvehicle player vehicleChat \"vehicleChat\";\ndriver vehicle player commandChat \"commandChat\";\ndriver vehicle player customChat [1, \"customChat\"];\nsystemChat \"systemChat\";\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - vehicle unit is in"
                        },
                        {
                            "name": "chatText",
                            "description": "`String` - message to transmit"
                        }
                    ],
                    "outline": "vehicle `vehicleChat` chatText",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/vehicleChat"
        },
        "configuration": {
            "label": "vehicleChat",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns current vehicle move/turn info (a getter for `sendSimpleCommand`) in format [moveInfo, turnInfo]. Possible values:\n\n{{{!}} class=\"wikitable\"\n! moveInfo\n! turnInfo\n{{!}}- style=\"vertical-align: top\"\n{{!}} width=\"50%\" {{!}}\n* `**\"FORMATION\"**` - vehicle is stationary\n* `**\"FORWARD\"**`  - vehicle is moving forward\n* `**\"FAST\"**` - vehicle is fast moving forward\n* `**\"SLOW\"**` - vehicle is slow moving forward\n* `**\"STOP\"**` - vehicle is stationary\n* `**\"BACK\"**` - vehicle is reversing\n* {{sic|`**\"DirectByComander\"**`}} - keyboard pilot is used, i.e. player is in the vehicle and is the `effectiveCommander` pressing any driving key (WASD or arrows). \n{{!}} width=\"50%\" {{!}}\n* `**\"LEFT\"**` - vehicle is turning left (use [[sendSimpleCommand | \"STOPTURNING\"]] to cancel)\n* `**\"RIGHT\"**` - vehicle is turning right (use [[sendSimpleCommand | \"STOPTURNING\"]] to cancel)\n* `**\"NONE\"**` - vehicle is not turning (when script command is used)\n* `**\"ABS\"**` - vehicle is not turning (when keyboard pilot is used)\n{{!}}}",
            "examples": [
                {
                    "text": "```sqf\nonEachFrame { hintSilent str vehicleMoveInfo vehicle player };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`vehicleMoveInfo` vehicle",
                    "returns": "`Array` in format [moveInfo, turnInfo], where:\n* moveInfo: `String` - state of vehicle forward/backward movement (see description)\n* turnInfo: `String` - state of vehicle left/right turning (see description)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/vehicleMoveInfo"
        },
        "configuration": {
            "label": "vehicleMoveInfo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Sends the audio message to the vehicle radio channel. The message is defined in CfgRadio in the [[Description.ext|description.ext]] file or config radio protocol. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see `remoteExec`).\n**NOTE**: When transmitting unit gets killed, transmission will be interrupted. However when receiving unit gets killed, the transmission continues to play.",
            "examples": [
                {
                    "text": "```sqf\n_soldierOne vehicleRadio \"messageOne\";\n```"
                },
                {
                    "text": "```sqf\nplayer vehicleRadio configName selectRandom (\"true\" configClasses (configFile >> \"CfgRadio\"));\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit to transmit"
                        },
                        {
                            "name": "radioName",
                            "description": "`String` - class name from CfgRadio"
                        }
                    ],
                    "outline": "unit `vehicleRadio` radioName",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/vehicleRadio"
        },
        "configuration": {
            "label": "vehicleRadio",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets whether the vehicle can acquire targets via datalink from the `Side` center.",
            "examples": [
                {
                    "text": "```sqf\nvehicleReceiveRemoteTargets vehicle player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`vehicleReceiveRemoteTargets` vehicle",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/vehicleReceiveRemoteTargets"
        },
        "configuration": {
            "label": "vehicleReceiveRemoteTargets",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets whether the vehicle shares its own position via datalink with the `Side` center.",
            "examples": [
                {
                    "text": "```sqf\nvehicleReportOwnPosition vehicle player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`vehicleReportOwnPosition` vehicle",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/vehicleReportOwnPosition"
        },
        "configuration": {
            "label": "vehicleReportOwnPosition",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets whether the vehicle shares acquired targets via datalink with the `Side` center.",
            "examples": [
                {
                    "text": "```sqf\nvehicleReportRemoteTargets vehicle player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`vehicleReportRemoteTargets` vehicle",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/vehicleReportRemoteTargets"
        },
        "configuration": {
            "label": "vehicleReportRemoteTargets",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array of all vehicles available to current client. This command returns both empty and crewed vehicles <u>but not soldiers</u>. It will also return \"WeaponHolderSimulated\" of dead bodies (weapon on the ground). Vehicles created with `createVehicleLocal` will only be returned on the client that created them.",
            "examples": [
                {
                    "text": "```sqf\n_vehicles = vehicles;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`vehicles`",
                    "returns": "`Array`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/vehicles"
        },
        "configuration": {
            "label": "vehicles",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the variable name that contains a primary editor reference to this object. This is the variable given in the _Insert Unit dialog / name field_ in the editor. It can be changed using `setVehicleVarName`.\n\n**NOTE**: Respawned unit will have the same vehicleVarName as the corpse left behind, however actual `missionNamespace` variable of the same name will only contain respawned unit.",
            "examples": [
                {
                    "text": "```sqf\nhint vehicleVarName player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`vehicleVarName` object",
                    "returns": "`String` - variable name, if none was set, an empty string is returned"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/vehicleVarName"
        },
        "configuration": {
            "label": "vehicleVarName",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the velocity of the object as vector in m/s.",
            "examples": [
                {
                    "text": "```sqf\n_vector = velocity jeep;\n```"
                },
                {
                    "text": "```sqf\nif ((velocity _plane1 select 2) > 50) then { hint \"Aircraft is climbing up too fast!\"; };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`velocity` object",
                    "returns": "`Array` - `Vector3D`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/velocity"
        },
        "configuration": {
            "label": "velocity",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the velocity (speed vector) of the vehicle as an array with format [x, y, z] in metre per second. Vector is in model space.",
            "examples": [
                {
                    "text": "```sqf\nvelocityModelSpace _chopper; // returns [X (left(-) right(+)), Y (backward(-) forward(+)), Z (down(-) up(+))]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`velocityModelSpace` vehicle",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/velocityModelSpace"
        },
        "configuration": {
            "label": "velocityModelSpace",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Check if file is signed by any key present in game keys folders. On clients, it does not check against the keys accepted by server.",
            "examples": [
                {
                    "text": "```sqf\nverifySignature \"@MyAddon\\Addons\\SomeAddon.pbo\";\n```"
                },
                {
                    "text": "```sqf\nverifySignature \"@MyAddon\\Somefnc.dll\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "filename",
                            "description": "`String`"
                        }
                    ],
                    "outline": "`verifySignature` filename",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/verifySignature"
        },
        "configuration": {
            "label": "verifySignature",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "nameof vest.",
            "examples": [
                {
                    "text": "```sqf\n_myVest = vest player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`vest` unit",
                    "returns": "`String`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/vest"
        },
        "configuration": {
            "label": "vest",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns a cargo container of a unit's vest.",
            "examples": [
                {
                    "text": "```sqf\nhint str vestContainer player; // 2df7d600# 163942: dummyweapon.p3d\n```"
                },
                {
                    "text": "```sqf\nhint str getMagazineCargo vestContainer player;\n/*\n\treturns e.g\n\t[\n\t\t[\n\t\t\t\"30Rnd_65x39_caseless_mag\",\n\t\t\t\"16Rnd_9x21_Mag\",\n\t\t\t\"HandGrenade\",\n\t\t\t\"APERSMine_Range_Mag\",\n\t\t\t\"SmokeShell\",\n\t\t\t\"SmokeShellGreen\",\n\t\t\t\"Chemlight_green\"\n\t\t],[\n\t\t\t2,\n\t\t\t2,\n\t\t\t2,\n\t\t\t3,\n\t\t\t1,\n\t\t\t1,\n\t\t\t2\n\t\t]\n\t]\n*/\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`vestContainer` unit",
                    "returns": "`Object` - cargo container or `objNull` if _unit_ does not wear a vest"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/vestContainer"
        },
        "configuration": {
            "label": "vestContainer",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get array with all items (of any kind, even weapons) from vest.",
            "examples": [
                {
                    "text": "```sqf\n\nvestItems player;\n// returns e.g\n/*\n[\n\t\"30Rnd_65x39_caseless_mag\",\n\t\"30Rnd_65x39_caseless_mag\",\n\t\"16Rnd_9x21_Mag\",\n\t\"16Rnd_9x21_Mag\",\n\t\"HandGrenade\",\n\t\"HandGrenade\",\n\t\"SmokeShell\",\n\t\"SmokeShellGreen\",\n\t\"Chemlight_green\",\n\t\"Chemlight_green\"\n]\n*/\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`vestItems` unit",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/vestItems"
        },
        "configuration": {
            "label": "vestItems",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get array with all magazines from vest of the given unit.",
            "examples": [
                {
                    "text": "```sqf\n\nvestMagazines player;\n// returns e.g\n/*\n[\n\t\"6.5mm 30Rnd STANAG Mag(30/30)[id/cr:4/0](2x)\",\n\t\"9mm 16Rnd Mag(16/16)[id/cr:7/0](2x)\",\n\t\"RGO Frag Grenade(1/1)[id/cr:10/0](2x)\",\n\t\"Smoke Grenade (White)(1/1)[id/cr:12/0](1x)\",\n\t\"Smoke Grenade (Green)(1/1)[id/cr:13/0](1x)\",\n\t\"Chemlight (Green)(1/1)[id/cr:14/0](2x)\"\n]\n*/\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`vestMagazines` unit",
                    "returns": "`Array` of `String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/vestMagazines"
        },
        "configuration": {
            "label": "vestMagazines",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the rendering distance.",
            "examples": [
                {
                    "text": "```sqf\nhint (\"my view distance is \" + str viewDistance + \" meters\");\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**viewDistance**",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/viewDistance"
        },
        "configuration": {
            "label": "viewDistance",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks if the player has compass opened and visible. Keep in mind that the GPS minimap in Arma 3 also shows the direction.",
            "examples": [
                {
                    "text": "```sqf\nif (visibleCompass) then {hint \"Compass is visible\"};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**visibleCompass**",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/visibleCompass"
        },
        "configuration": {
            "label": "visibleCompass",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks if the player has GPS receiver (minimap) opened and visible.",
            "examples": [
                {
                    "text": "```sqf\nif (visibleGPS) then {hint \"GPS is visible\"};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**visibleGPS**",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/visibleGPS"
        },
        "configuration": {
            "label": "visibleGPS",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return true if the main map is shown (active). In Arma 3 it also returns true if the respawn screen map is visible.",
            "examples": [
                {
                    "text": "```sqf\nif (visibleMap) then {hint \"You're showing the map !\"};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`visibleMap`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/visibleMap"
        },
        "configuration": {
            "label": "visibleMap",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an object's rendered position (z value above surface underneath) in render time scope. Same as `getPosVisual`.\n**IMPORTANT**: This command must **not** be used for actual 3D calculations. See `getPos` for an explanation.",
            "examples": [
                {
                    "text": "```sqf\n_playerRenderedPos = visiblePosition player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - name of the object"
                        }
                    ],
                    "outline": "`visiblePosition` object",
                    "returns": "[PositionAGLS](https://community.bistudio.com/wiki/Position%23PositionAGLS)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/visiblePosition"
        },
        "configuration": {
            "label": "visiblePosition",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an object's rendered [ASL position](https://community.bistudio.com/wiki/Position%23PositionASL) (z value above sea level) in render time scope.",
            "examples": [
                {
                    "text": "```sqf\n_playerRenderedPosASL = visiblePositionASL player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - name of the object"
                        }
                    ],
                    "outline": "`visiblePositionASL` object",
                    "returns": "`Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/visiblePositionASL"
        },
        "configuration": {
            "label": "visiblePositionASL",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks whether the score table is visible.",
            "examples": [
                {
                    "text": "```sqf\n_visible = visibleScoretable;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`visibleScoretable`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/visibleScoretable"
        },
        "configuration": {
            "label": "visibleScoretable",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks if the player has watch opened and visible. Keep in mind that the GPS minimap in Arma 3 also shows the time.",
            "examples": [
                {
                    "text": "```sqf\nif (visibleWatch) then { hint \"Watch is visible\" };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`visibleWatch`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/visibleWatch"
        },
        "configuration": {
            "label": "visibleWatch",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Suspends execution of [scheduled](https://community.bistudio.com/wiki/Scheduler) script until the given condition satisfied. \n* This command will loop and call the code inside <sqf inline>{} **mostly every frame**, depends on complexity of the condition and the overall engine load, until the [code](https://community.bistudio.com/wiki/Code) returns `true`\n* If the very first execution of the code returns `true` the command will exit immediately, therefore it will not produce any \"Suspending not allowed in this context\" error when used inside [[Scheduler#Unscheduled_Environment|non-scheduled]] script. For all other uses it must be executed in environment that allows [suspension](https://community.bistudio.com/wiki/Scheduler%23Suspension) (`canSuspend`), such as `spawn`ed or `execVM`ed code\n* Avoid doing <sqf inline>waitUntil { time > 20 }; and use <sqf inline>sleep 20; instead!\n* If you can, add a `sleep` to the condition to save some cpu cycles <sqf inline>waitUntil { sleep 1; !alive player };\n\n**Arma 3**: Since Arma 3 v1.94, a _condition_ returning anything other than `true` or `false` **will** result in an appropriate type error.",
            "examples": [
                {
                    "text": "```sqf\nwaitUntil { not alive player };\n```"
                },
                {
                    "text": "```sqf\n_i = 0; waitUntil { _i = _i + 1; _i >= 100 };\n```"
                },
                {
                    "text": "`waitUntil` can lead to performance loss if used improperly:\n\n```sqf\n\nwaitUntil { not alive player };\t\t\t// bad\nwaitUntil { sleep 1; not alive player };\t// good - checks every 1 second\nplayer addEventHandler [\"Killed\", {  }];\t// best - don't forget about Event Handlers\n\n```"
                },
                {
                    "text": "An on-the-fly custom [event handler](https://community.bistudio.com/wiki/Arma%203%3A%20Event%20Handlers):\n\n```sqf\n\n_myEH = [\"ZoomIn\"] spawn {\n\twhile { true } do\n\t{\n\t\twaitUntil { inputAction (_this select 0) == 1 };\n\t\tdiag_log format [\"%1 @ %2\", _this select 0, diag_tickTime];\n\t};\n};\n\n```\n\nAlthough it may be better to use `onEachFrame` ([stacked](https://community.bistudio.com/wiki/BIS_fnc_addStackedEventHandler)) [mission Event Handler](https://community.bistudio.com/wiki/Arma_3%3A_Mission_Event_Handlers%23EachFrame), depending on the application."
                },
                {
                    "text": "Use `getVariable` with default value to prevent unexcepted script errors:\n\n```sqf\n\nwaitUntil { bank getVariable [\"money\", 0] > 0 };\nwaitUntil { missionNamespace getVariable [\"isready\", false] };\n\n```"
                },
                {
                    "text": "Always return `Boolean`:\n\n```sqf\n\nwaitUntil { sleep 1; if (not alive player) exitWith {}; _time = _time + 1 };\t\t\t\t// bad\nwaitUntil { sleep 1; if (not alive player) exitWith { true }; _time = _time + 1; false };\t// good\nwaitUntil { sleep 1; not alive player };\t\t\t\t\t\t\t\t\t\t\t\t\t// perfect\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "condition",
                            "description": "`Code` - the expression that **must** return a `Boolean`, `true` to finish waiting or `false` to continue waiting"
                        }
                    ],
                    "outline": "`waitUntil` condition",
                    "returns": "`Anything` - the value the condition evaluates to when the wait is over (normally `true`)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/waitUntil"
        },
        "configuration": {
            "label": "waitUntil",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "Checks if the engine was water damaged. When a vehicle is [ Drowned](https://community.bistudio.com/wiki/Arma_3%3A_Mission_Event_Handlers%23Drowned%20), the engine gets water damaged and might need full repair either with `setDamage` or `setHitPointDamage` to be able to start.",
            "examples": [
                {
                    "text": "```sqf\nwaterDamaged tank1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`waterDamaged` object",
                    "returns": "`Boolean` - `true` if the engine was water damaged"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/waterDamaged"
        },
        "configuration": {
            "label": "waterDamaged",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Return waves value.",
            "examples": [
                {
                    "text": "```sqf\nwaveIntensity = waves;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**waves**",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/waves"
        },
        "configuration": {
            "label": "waves",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets the object attached to the waypoint.",
            "examples": [
                {
                    "text": "```sqf\nwaypointAttachedObject [groupOne,1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": " `Array` - format `Waypoint`"
                        }
                    ],
                    "outline": "`waypointAttachedObject` waypoint",
                    "returns": "`Object`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/waypointAttachedObject"
        },
        "configuration": {
            "label": "waypointAttachedObject",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets the vehicle attached to the waypoint.\n\nA vehicle can be attached to a waypoint by\n* creating the waypoint on top of the vehicle in the [2D Editor](https://community.bistudio.com/wiki/2D%20Editor)\n* using `waypointAttachVehicle`",
            "examples": [
                {
                    "text": "```sqf\nwaypointAttachedVehicle [groupOne, 1];\n```"
                },
                {
                    "text": "```sqf\nwaypointAttachedVehicle [group player, currentWaypoint group player];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Array` - format `Waypoint`"
                        }
                    ],
                    "outline": "`waypointAttachedVehicle` waypoint",
                    "returns": "`Object`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/waypointAttachedVehicle"
        },
        "configuration": {
            "label": "waypointAttachedVehicle",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Attaches a static object via it is numeric ID to the given waypoint.\n\n**IMPORTANT**: \n* The [main syntax](https://community.bistudio.com/wiki/%23Syntax) doesn't work in Arma 3 anymore.\n* The [alternative syntax](https://community.bistudio.com/wiki/%23Alternative_Syntax) is (at least) available since Arma 2.",
            "examples": [
                {
                    "text": "```sqf\n[_grp, 2] waypointAttachObject 1234;\n```"
                },
                {
                    "text": "```sqf\nprivate _wp = group player addWaypoint [[1907.5, 5746.5, 0.00144196], 0];\n_wp waypointAttachObject ((waypointPosition _wp) nearestObject 66220);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Array` - format `Waypoint`"
                        },
                        {
                            "name": "objectID",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "waypoint `waypointAttachObject` objectID",
                    "returns": "`Nothing`"
                },
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Array` - format `Waypoint`"
                        },
                        {
                            "name": "object",
                            "description": "`Object` - static object"
                        }
                    ],
                    "outline": "waypoint `waypointAttachObject` object",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/waypointAttachObject"
        },
        "configuration": {
            "label": "waypointAttachObject",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Attaches the `Waypoint` to the provided vehicle `Object`.\n**IMPORTANT**:  Use this command to associate a transport with `**\"GETIN\"**` waypoint, other types of waypoints might or might not work.\nSee also `setWaypointType` to set the waypoint type to \"GETIN\".",
            "examples": [
                {
                    "text": "```sqf\n[_grp, 2] waypointAttachVehicle vehicle player;\n```"
                },
                {
                    "text": "```sqf\n((waypoints player) select 0) waypointAttachVehicle _soldier1;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Waypoint`"
                        },
                        {
                            "name": "vehicleName",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "waypoint `waypointAttachVehicle` vehicleName",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/waypointAttachVehicle"
        },
        "configuration": {
            "label": "waypointAttachVehicle",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets the waypoint behavior.",
            "examples": [
                {
                    "text": "```sqf\nwaypointBehaviour [groupOne,1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": " `Array` - format `Waypoint`"
                        }
                    ],
                    "outline": "`waypointBehaviour` waypoint",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/waypointBehaviour"
        },
        "configuration": {
            "label": "waypointBehaviour",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets the waypoint's combat mode setting.",
            "examples": [
                {
                    "text": "```sqf\nwaypointCombatMode [groupOne, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Array` - format `Waypoint`"
                        }
                    ],
                    "outline": "`waypointCombatMode` waypoint",
                    "returns": "`String` - one of \"BLUE\", \"GREEN\", \"WHITE\", \"YELLOW\" and \"RED\" or \"ERROR\""
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/waypointCombatMode"
        },
        "configuration": {
            "label": "waypointCombatMode",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets the radius around the waypoint where the waypoint is completed.",
            "examples": [
                {
                    "text": "```sqf\n_radius = waypointCompletionRadius [groupOne, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Array` - format `Waypoint`"
                        }
                    ],
                    "outline": "`waypointCompletionRadius` waypoint",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/waypointCompletionRadius"
        },
        "configuration": {
            "label": "waypointCompletionRadius",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets the waypoint description.",
            "examples": [
                {
                    "text": "```sqf\nwaypointDescription [groupOne,1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Array` - format `Waypoint`"
                        }
                    ],
                    "outline": "`waypointDescription` waypoint",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/waypointDescription"
        },
        "configuration": {
            "label": "waypointDescription",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns true if the waypoint behavior is forced.",
            "examples": [
                {
                    "text": "```sqf\n_isForced = waypointForceBehaviour [groupOne, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Waypoint` - format [group, index]:\n* group: `Group`\n* index: `Number`"
                        }
                    ],
                    "outline": "`waypointForceBehaviour` waypoint",
                    "returns": "`Boolean` - is forced"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/waypointForceBehaviour"
        },
        "configuration": {
            "label": "waypointForceBehaviour",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets the waypoint formation.\n\nPossible values are: \n* \"NO CHANGE\"\n* \"COLUMN\"\n* \"STAG COLUMN\"\n* \"WEDGE\"\n* \"ECH LEFT\"\n* \"ECH RIGHT\"\n* \"VEE\"\n* \"LINE\"\n* \"FILE\"\n* \"DIAMOND\"",
            "examples": [
                {
                    "text": "```sqf\nwaypointFormation [groupOne,1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Array` - format `Waypoint`"
                        }
                    ],
                    "outline": "`waypointFormation` waypoint",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/waypointFormation"
        },
        "configuration": {
            "label": "waypointFormation",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `buildingPos` index assigned to the waypoint.",
            "examples": [
                {
                    "text": "```sqf\nwaypointHousePosition [groupOne,1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Array` - format `Waypoint`"
                        }
                    ],
                    "outline": "`waypointHousePosition` waypoint",
                    "returns": "`Number` - `buildingPos` index"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/waypointHousePosition"
        },
        "configuration": {
            "label": "waypointHousePosition",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets the waypoint loiter altitude.",
            "examples": [
                {
                    "text": "```sqf\nprivate _loiterAlt = waypointLoiterAltitude [groupOne, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Array` format `Waypoint`"
                        }
                    ],
                    "outline": "`waypointLoiterAltitude` waypoint",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/waypointLoiterAltitude"
        },
        "configuration": {
            "label": "waypointLoiterAltitude",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets the waypoint's loiter radius.",
            "examples": [
                {
                    "text": "```sqf\n_radius = waypointLoiterRadius [groupOne, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Array` format `Waypoint`"
                        }
                    ],
                    "outline": "`waypointLoiterRadius` waypoint",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/waypointLoiterRadius"
        },
        "configuration": {
            "label": "waypointLoiterRadius",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets the waypoint loiter type. Waypoint uses format `Waypoint`.",
            "examples": [
                {
                    "text": "```sqf\n_type = waypointLoiterType [groupOne, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Waypoint`"
                        }
                    ],
                    "outline": "`waypointLoiterType` waypoint",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/waypointLoiterType"
        },
        "configuration": {
            "label": "waypointLoiterType",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets the waypoint name.",
            "examples": [
                {
                    "text": "```sqf\n_wpName = waypointName [_grp, 2];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Array` format `Waypoint`"
                        }
                    ],
                    "outline": "`waypointName` waypoint",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/waypointName"
        },
        "configuration": {
            "label": "waypointName",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get provided waypoint's position.",
            "examples": [
                {
                    "text": "```sqf\n_wPos = waypointPosition [_groupOne, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "groupOrUnit",
                            "description": "`Group` or `Object`"
                        },
                        {
                            "name": "index",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "`waypointPosition` [groupOrUnit, index]",
                    "returns": "`Array` format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/waypointPosition"
        },
        "configuration": {
            "label": "waypointPosition",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array of waypoints for the specified unit/group.",
            "examples": [
                {
                    "text": "```sqf\nwaypoints player;\n```"
                },
                {
                    "text": "```sqf\n_wPosArray = waypoints group10; // returns e.g [[EAST 1-1-A,0],[EAST 1-1-A,1],[EAST 1-1-A,2]]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "groupName",
                            "description": "`Group` or `Object`"
                        }
                    ],
                    "outline": "`waypoints` groupName",
                    "returns": "`Array` of `Waypoint`s"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/waypoints"
        },
        "configuration": {
            "label": "waypoints",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets the waypoint script.",
            "examples": [
                {
                    "text": "```sqf\nwaypointScript [groupOne,1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Array` - format `Waypoint`"
                        }
                    ],
                    "outline": "`waypointScript` waypoint",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/waypointScript"
        },
        "configuration": {
            "label": "waypointScript",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Checks if the UAV has waypoints enabled.",
            "examples": [
                {
                    "text": "```sqf\n_uav enableUAVWaypoints false;\nhint str waypointsEnabledUAV _uav; // returns false\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "uav",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`waypointsEnabledUAV` uav",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/waypointsEnabledUAV"
        },
        "configuration": {
            "label": "waypointsEnabledUAV",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "A getter for `showWaypoint` command.",
            "examples": [
                {
                    "text": "```sqf\n_wpShow = waypointShow [groupOne, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Array` - in format `Waypoint`"
                        }
                    ],
                    "outline": "`waypointShow` waypoint",
                    "returns": "`String` - can return:\n* \"NEVER\" - Never show\n* \"EASY\" - Show only in cadet mode\n* \"ALWAYS\" - Always show\n* \"ERROR\" - When set to any different string"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/waypointShow"
        },
        "configuration": {
            "label": "waypointShow",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets the waypoint speed.\n\nPossible values are:\n* \"UNCHANGED\"\n* \"LIMITED\"\n* \"NORMAL\"\n* \"FULL\"",
            "examples": [
                {
                    "text": "```sqf\n_speed = waypointSpeed [groupOne,1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Array` - format `Waypoint`"
                        }
                    ],
                    "outline": "`waypointSpeed` waypoint",
                    "returns": "`String` - see description"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/waypointSpeed"
        },
        "configuration": {
            "label": "waypointSpeed",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets the waypoint statements.",
            "examples": [
                {
                    "text": "```sqf\nwaypointStatements [groupOne,1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Array` - format `Waypoint`"
                        }
                    ],
                    "outline": "`waypointStatements` waypoint",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/waypointStatements"
        },
        "configuration": {
            "label": "waypointStatements",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets the waypoint timeout values.",
            "examples": [
                {
                    "text": "```sqf\nwaypointTimeout [groupOne,1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Array` - format `Waypoint`"
                        }
                    ],
                    "outline": "`waypointTimeout` waypoint",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/waypointTimeout"
        },
        "configuration": {
            "label": "waypointTimeout",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets the current timeout for `currentWaypoint` of a `group` or -1 if countdown is not in progress.",
            "examples": [
                {
                    "text": "```sqf\n_timeout = waypointTimeoutCurrent group player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group`"
                        }
                    ],
                    "outline": "`waypointTimeoutCurrent` group",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/waypointTimeoutCurrent"
        },
        "configuration": {
            "label": "waypointTimeoutCurrent",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Gets the waypoint type.\n**NOTE**: See [Waypoints - Waypoint Types](https://community.bistudio.com/wiki/Waypoints#Waypoint_Types) for more information.",
            "examples": [
                {
                    "text": "```sqf\nprivate _type = waypointType [groupOne, 1];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": " `Array` - format `Waypoint`"
                        }
                    ],
                    "outline": "`waypointType` waypoint",
                    "returns": "`String` - returns `**\"\"**` if the waypoint doesn't exist."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/waypointType"
        },
        "configuration": {
            "label": "waypointType",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "A getter for `setWaypointVisible` command.\n\n**WARNING**: Returns **0** (`Number`) instead of `Boolean`for an invalid waypoint.",
            "examples": [
                {
                    "text": "```sqf\n_visible = waypointVisible [groupOne, 1];\n```"
                },
                {
                    "text": "```sqf\n_visible = waypointVisible [group player, currentWaypoint group player];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Array` - format `Waypoint`"
                        }
                    ],
                    "outline": "`waypointVisible` waypoint",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/waypointVisible"
        },
        "configuration": {
            "label": "waypointVisible",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get array with all items linked to a given weapon.\n**IMPORTANT**:  This command does not return loaded magazines, see `weaponsItems`",
            "examples": [
                {
                    "text": "```sqf\nplayer weaponAccessories primaryWeapon player; //[\"\",\"acc_pointer_IR\",\"optic_Aco\",\"\"]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "weapon",
                            "description": "`String` - primary, secondary or handgun"
                        }
                    ],
                    "outline": "unit `weaponAccessories` weapon",
                    "returns": "`Array` - [silencer, laserpointer/flashlight, optics, bipod]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/weaponAccessories"
        },
        "configuration": {
            "label": "weaponAccessories",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array with all items assigned to the given weapon in given cargo container.\n**WARNING**: This is unofficial documentation. All Information here is as it exists in the Engine. It might not reflect the reality.",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "container",
                            "description": "`Object` - cargo container"
                        },
                        {
                            "name": "weaponId",
                            "description": "`Number`"
                        },
                        {
                            "name": "creatorId",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "container `weaponAccessoriesCargo` [weaponId, creatorId]",
                    "returns": "`Array` - [silencer, laserpointer/flashlight, optics, bipod]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/weaponAccessoriesCargo"
        },
        "configuration": {
            "label": "weaponAccessoriesCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Get array with weapons from ammo box (or any general weapon holder container).",
            "examples": [
                {
                    "text": "```sqf\nhint str weaponCargo backpackContainer player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "box",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`weaponCargo` box",
                    "returns": "`Array` of `String` - list of present classes"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/weaponCargo"
        },
        "configuration": {
            "label": "weaponCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the direction that the vehicle weapon is aiming in. For addons the weapon name must be an entry in [CfgWeapons](https://community.bistudio.com/wiki/%3ACategory%3ACfgWeapons).\n**NOTE**: Turret and gun angle in degrees can also be obtained using `animationSourcePhase` or `animationPhase` commands.",
            "examples": [
                {
                    "text": "```sqf\n_weaponVectorDir = player weaponDirection currentWeapon player;\n```"
                },
                {
                    "text": "Draw AI eye direction (green) and weapon direction (red) in 3D:\n\n```sqf\nbob = createGroup east createUnit [\"O_Soldier_F\", [0,0,0], [], 0, \"NONE\"];\nbob setVehiclePosition [player modelToWorld [0,100,0], [], 0, \"NONE\"];\nonEachFrame\n{\n\t_beg = ASLToAGL eyePos bob;\n\t_endE = _beg vectorAdd (eyeDirection bob vectorMultiply 100);\n\tdrawLine3D [_beg, _endE, [0,1,0,1]];\n\t_endW = _beg vectorAdd (bob weaponDirection currentWeapon bob vectorMultiply 100);\n\tdrawLine3D [_beg, _endW, [1,0,0,1]];\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicleName",
                            "description": "`Object`"
                        },
                        {
                            "name": "weaponName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "vehicleName `weaponDirection` weaponName",
                    "returns": "`Array` - format `Vector3D`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/weaponDirection"
        },
        "configuration": {
            "label": "weaponDirection",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns if weapon disassembly is enabled. As disassembly can be enabled/disabled on both player and weapon, it might be necessary to check both.\n\n**IMPORTANT**: \nBeware that when the weapon disassembly is disabled on the player, it is tracking the unit itself.\nIf the player leaves the server and another player joins into the same playable unit, they will not have the option to disassemble either.",
            "examples": [
                {
                    "text": "```sqf\nprivate _enabled = weaponDisassemblyEnabled player && weaponDisassemblyEnabled _weapon;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "`Object` - `player` or weapon"
                        }
                    ],
                    "outline": "`weaponDisassemblyEnabled` entity",
                    "returns": "`Boolean` - `true` if enabled"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/weaponDisassemblyEnabled"
        },
        "configuration": {
            "label": "weaponDisassemblyEnabled",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns current rate of how much the weapon view is distorted because of quick aiming.",
            "examples": [
                {
                    "text": "```sqf\n_inertia = weaponInertia player; //[-0.0126307,0.038023]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`weaponInertia` unit",
                    "returns": "`Array` of `Number`s in format [x_sway, y_sway]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/weaponInertia"
        },
        "configuration": {
            "label": "weaponInertia",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if given soldier's weapon is lowered. **IMPORTANT**:  This command will **always** return `false` if player is sprinting, even without a weapon. Alternatively, the weapon raised state could be obtained via `animationState` command `**...slow...**` vs `**...sras...**`",
            "examples": [
                {
                    "text": "```sqf\nisWeaponLowered = weaponLowered player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`weaponLowered` unit",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/weaponLowered"
        },
        "configuration": {
            "label": "weaponLowered",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns current ammo round reloading phase. For a magazine reloading phase see `weaponState` command.",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "gunner",
                            "description": "`Object` - gunner of desired turret"
                        },
                        {
                            "name": "muzzleName",
                            "description": "`String` - muzzle on desired turret"
                        }
                    ],
                    "outline": "vehicle `weaponReloadingTime` [gunner, muzzleName]",
                    "returns": "`Number` - ammo round reload phase in range 0..1; -1 when N/A"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/weaponReloadingTime"
        },
        "configuration": {
            "label": "weaponReloadingTime",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns array of names of all unit's weapons.",
            "examples": [
                {
                    "text": "```sqf\n_wArray = weapons player;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`weapons` unit",
                    "returns": "`Array` of weapon names."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/weapons"
        },
        "configuration": {
            "label": "weapons",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns entity's weapons information including weapon index and firemode.",
            "examples": [
                {
                    "text": "Find weapon with FullAuto firemode and switch to it: \n```sqf\n\nprivate _weapons = player weaponsInfo [currentMuzzle player, true];\nprivate _found = _weapons findIf { _x select 4 == \"FullAuto\" };\nif (_found > -1) then { action [\"SwitchWeapon\", player, player, _weapons select _found select 0] };\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - person"
                        },
                        {
                            "name": "weaponOrMuzzle",
                            "description": "`String` - name of the weapon or muzzle (returns whichever matches first) or \"\" to return all weapons"
                        },
                        {
                            "name": "onlyLoaded",
                            "description": "`Boolean` - (Optional, default `false`) `true` to return loaded weapons only"
                        }
                    ],
                    "outline": "unit `weaponsInfo` [weaponOrMuzzle, onlyLoaded]",
                    "returns": "`Array` of `Array`s (or an empty []) - weapons information in format <nowiki>[</nowiki>[weaponIndex, isSelected, weaponName, muzzleName, firemode, magazineName, ammoCount, isPrimary], ...] where:\n* weaponIndex: `Number` - internal weapon index (changes frequently) used with \"SwitchWeapon\" and \"UseWeapon\" `action`s\n* isSelected: `Boolean` - `true` if this weapon is currently selected\n* weaponName: `String` - weapon name\n* muzzleName: `String` - muzzle name\n* firemode: `String` - firemode that is set for this 'weaponIndex'\n* magazineName: `String` - name of the loaded magazine or \"\"\n* ammoCount: `Number` - magazine ammo count or -1\n* isPrimary: `Boolean` - `true` if this muzzle is considered primary by the engine (Since Arma 3 2.14)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/weaponsInfo"
        },
        "configuration": {
            "label": "weaponsInfo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "[[File:Weaponsitems.jpg|150px|right|border]]Returns an array with subarrays contains class names and also names of connected items of all the vehicle's weapons.\n{{Feature|informative|This command can return weapon magazine(s) if any are present. Or an empty array if weapon is stored without a magazine in it.}}\n* {{GVI|arma3|1.22",
            "examples": [
                {
                    "text": "```sqf\n\nhint str weaponsItems player;\n// returns e.g\n/*\n[\n\t[\"arifle_MX_ACO_pointer_F\", \"muzzle_snds_H\", \"acc_pointer_IR\", \"optic_Aco\", [\"30Rnd_65x39_caseless_mag\", 30], [], \"bipod_01_F_blk\"],\n\t[\"launch_NLAW_F\", \"\", \"\", \"\", [\"NLAW_F\", 1], [], \"\"],\n\t[\"hgun_P07_F\", \"muzzle_snds_L\", \"\", \"\", [\"16Rnd_9x21_Mag\", 11], [], \"\"]\n]\n// a loaded underbarrel grenade launcher can look like this:\n[\n\t[\"arifle_MX_GL_F\", \"muzzle_snds_H\", \"acc_pointer_IR\", \"optic_Aco\", [\"30Rnd_65x39_caseless_mag\", 30], [\"1Rnd_HE_Grenade_shell\", 1], \"\"]\n]\n*/\n\n\n```"
                },
                {
                    "text": "```sqf\n\nhint str weaponsItems vehicle player;\n// returns e.g\n/*\n[\n\t[\"gatling_30mm\", \"\", \"\", \"\", [\"250Rnd_30mm_HE_shells\", 250], [], \"\"],\n\t[\"missiles_SCALPEL\", \"\", \"\", \"\", [\"8Rnd_LG_scalpel\", 8], [], \"\"],\n\t[\"rockets_Skyfire\", \"\", \"\", \"\", [\"38Rnd_80mm_rockets\", 38], [], \"\"]\n]\n*/\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - unit or vehicle"
                        }
                    ],
                    "outline": "`weaponsItems` vehicle",
                    "returns": "`Array` of `Array`s of weapon items, format [weapon, muzzle, flashlight, optics, [magazine, ammo], [magazine, ammo], bipod]:\n* weapon: `String`\n* muzzle: `String`\n* flashlight: `String`\n* optics: `String`\n* [primaryMagazine, primaryAmmo]: `Array` - could be empty\n* [secondaryMagazine, secondaryAmmo]: `Array` - could be empty\n* bipod: `String`\n**IMPORTANT**: The weapons are listed in the order they were taken by the unit, with the most recent at the bottom of the array, e.g do **not** assume the first item is always the primary weapon."
                },
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - unit or vehicle"
                        },
                        {
                            "name": "extended",
                            "description": "`Boolean` - `true` to include muzzle information"
                        }
                    ],
                    "outline": "`weaponsItems` [vehicle, extended]",
                    "returns": "`Array` of `Array`s (see above) in format [weapon, muzzle, flashlight, optics, [magazine, ammo, muzzle, maxammo], [magazine, ammo, muzzle, maxammo], bipod]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/weaponsItems"
        },
        "configuration": {
            "label": "weaponsItems",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns an array with subarrays contains class names and also names of connected items of all the vehicle's cargo weapons in `weaponsItems` format. If weapon has no magazine, an empty array [] is returned instead of magazine info. If the argument is a vehicle with weapons, vehicles cargo is searched, unlike with `weaponsItems` command, which will return vehicle's weapons instead. \n* Since Arma 3 v1.96 the returned array always contains secondary muzzle magazine info and consistent with `getUnitLoadout` format for weapon items.",
            "examples": [
                {
                    "text": "```sqf\nweaponsItemsCargo vehicle player;\n```"
                },
                {
                    "text": "```sqf\nweaponsItemsCargo _weaponholder;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` ammobox or vehicle"
                        }
                    ],
                    "outline": "`weaponsItemsCargo` vehicle",
                    "returns": "`Array` - see `weaponsItems`"
                },
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - ammobox or vehicle"
                        },
                        {
                            "name": "extended",
                            "description": "`Boolean` - `true` to include muzzle information"
                        }
                    ],
                    "outline": "`weaponsItemsCargo` [vehicle, extended]",
                    "returns": "`Array` - see `weaponsItems`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/weaponsItemsCargo"
        },
        "configuration": {
            "label": "weaponsItemsCargo",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the given or currently selected weapon state for unit or vehicle.\nWith {{Link|#Syntax 2}}, if no optional arguments are present, currently selected weapon is queried.\n**Arma 3**: \nSince Arma 3 v1.70 this command has been improved and extended:\n* A vehicle's weapon query doesn't need a weapon operator provided the weapon or muzzle is specified in optional param.\n(keep in mind that by default a vehicle has no weapons selected)\n* Driver turret can now be accessed as well with turret path [-1].\n* Muzzle name is supported as well as weapon name. The command searches for weapon first, then if not found, muzzle is searched for.",
            "examples": [
                {
                    "text": "```sqf\n_wsPlayer = weaponState player;\t\t\t\t\t// [\"arifle_MXC_ACO_F\",\"arifle_MXC_ACO_F\",\"Single\",\"30Rnd_65x39_caseless_mag\",30,0,0]\n```"
                },
                {
                    "text": "Query currently selected gunner weapon:\n\n```sqf\n_wsVehicle = weaponState [_apc, [0]];\t\t\t// [\"autocannon_40mm_CTWS\",\"HE\",\"player\",\"60Rnd_40mm_GPR_Tracer_Red_shells\",60,0,0]\n```"
                },
                {
                    "text": "```sqf\n_wsVehicle = weaponState [_apc, [0], \"AP\"];\t\t// [\"autocannon_40mm_CTWS\",\"AP\",\"player\",\"40Rnd_40mm_APFSDS_Tracer_Red_shells\",40,0,0]\n```"
                },
                {
                    "text": "```sqf\n_wsPlayer = player weaponState \"GL_3GL_F\";\t\t// [\"arifle_MX_GL_ACO_F\",\"GL_3GL_F\",\"Single\",\"1Rnd_HE_Grenade_shell\",1,0,0]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`weaponState` unit",
                    "returns": "`Array` in format [weapon, muzzle, firemode, magazine, ammoCount, roundReloadPhase, magazineReloadPhase], where:\n* weapon: `String`\n* muzzle: `String`\n* firemode: `String`\n* magazine: `String`\n* ammoCount: `Number`\n* {{GVI|arma3|2.06"
                },
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array`"
                        },
                        {
                            "name": "weapon",
                            "description": "`String` - (Optional, default `**\"\"**`) weapon or muzzle name"
                        },
                        {
                            "name": "muzzle",
                            "description": "`String` - (Optional, default `**\"\"**`) muzzle name"
                        },
                        {
                            "name": "firemode",
                            "description": "`String` - (Optional, default `**\"\"**`) firemode name"
                        }
                    ],
                    "outline": "`weaponState` [vehicle, turretPath, weapon, muzzle, firemode]",
                    "returns": "`Array` in format [weapon, muzzle, firemode, magazine, ammoCount, roundReloadPhase, magazineReloadPhase], where:\n* weapon: `String`\n* muzzle: `String`\n* firemode: `String`\n* magazine: `String`\n* ammoCount: `Number`\n* {{GVI|arma3|2.06"
                },
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "weaponOrMuzzle",
                            "description": "`String`"
                        }
                    ],
                    "outline": "unit `weaponState` weaponOrMuzzle",
                    "returns": "`Array` in format [weapon, muzzle, firemode, magazine, ammoCount, roundReloadPhase, magazineReloadPhase], where:\n* weapon: `String`\n* muzzle: `String`\n* firemode: `String`\n* magazine: `String`\n* ammoCount: `Number`\n* {{GVI|arma3|2.06"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/weaponState"
        },
        "configuration": {
            "label": "weaponState",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns all weapons of a given turret. Use turret path [-1] for driver's turret.",
            "examples": [
                {
                    "text": "```sqf\n_weapons = vehicle player weaponsTurret [0,0];\n```"
                },
                {
                    "text": "```sqf\n_weapons = _tank weaponsTurret [0];\n```"
                },
                {
                    "text": "```sqf\n_driverWeapon = _ka50pilot weaponsTurret [-1];\n```"
                },
                {
                    "text": "```sqf\n_weaponsForAnyTurrentPosition = (vehicle player) weaponsTurret ((assignedVehicleRole player) select 1);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "turretPath",
                            "description": "`Array` format [Turret Path](https://community.bistudio.com/wiki/Turret%20Path)"
                        }
                    ],
                    "outline": "vehicle `weaponsTurret` turretPath",
                    "returns": "`Array` of `String`s"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/weaponsTurret"
        },
        "configuration": {
            "label": "weaponsTurret",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "{{Feature|afm}}Returns weight of RTD helicopter.",
            "examples": [
                {
                    "text": "```sqf\n_taruWeight = weightRTD taru// Returns [7000,300,1990.56,0,0]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "helicopter",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`weightRTD` helicopter",
                    "returns": "`Array` -  [fuselage weight, crew weight, fuel weight, [custom weight](https://community.bistudio.com/wiki/setCustomWeightRTD), weapons weight] (kilograms)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/weightRTD"
        },
        "configuration": {
            "label": "weightRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "West (BLUFOR) [side](https://community.bistudio.com/wiki/Side).",
            "examples": [
                {
                    "text": "[SQS Syntax](https://community.bistudio.com/wiki/SQS%20Syntax):\n<sqs>? side _unit == west : hint \"This is a western unit!\"</sqs>"
                },
                {
                    "text": "[SQF Syntax](https://community.bistudio.com/wiki/SQF%20Syntax):\n\n```sqf\n\nif (side _unit == west) then\n{\n\thint \"This is a western unit!\";\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`west`",
                    "returns": "`Side`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/west"
        },
        "configuration": {
            "label": "west",
            "grammarType": "reserved-literal"
        }
    },
    {
        "documentation": {
            "description": "Returns the [unlocalized](https://community.bistudio.com/wiki/localize) text value of a side or an object's/group's side.\n\n{{{!}} class=\"wikitable\"\n! Side\n{{!}} `east`&nbsp;/&nbsp;`opfor`\n{{!}} `west`&nbsp;/&nbsp;`blufor`\n{{!}} `resistance`&nbsp;/&nbsp;`independent`\n{{!}} `civilian`\n{{!}} `sideUnknown`\n{{!}} `sideEnemy`\n{{!}} `sideFriendly`\n{{!}} `sideLogic`\n{{!}} `sideEmpty`\n{{!}} `sideAmbientLife`\n{{!}}- style=\"text-align: center\"\n! Result\n{{!}} \"East\"\n{{!}} \"West\"\n{{!}} \"Resistance\"\n{{!}} \"Civilian\"\n{{!}} colspan=\"6\" {{!}} \"Unknown\"\n{{!}}}\n\n**NOTE**: _WF_ stands for **Warfare**, an [[Warfare 1 - Editing Guide|Armed Assault]]/[[Warfare 2 Manual|Arma 2]] official game mode.",
            "examples": [
                {
                    "text": "```sqf\nWFSideText player;\n```"
                },
                {
                    "text": "```sqf\nWFSideText group player;\n```"
                },
                {
                    "text": "```sqf\nWFSideText west;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "value",
                            "description": "`Object`, `Group` or `Side`"
                        }
                    ],
                    "outline": "`WFSideText` value",
                    "returns": "`String` - unlocalized side text value"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/WFSideText"
        },
        "configuration": {
            "label": "WFSideText",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Repeats `Code` while the given condition is `true`. A part of `while`-`do` construct.\n**IMPORTANT**: \n* A `while` loop does not have any suspension, meaning that if used in [scheduled environment](https://community.bistudio.com/wiki/Scheduler%23Scheduled_Environment) without any suspension (`sleep` or `uiSleep`) the code will run multiple times per frame and consumes the 3 ms per frame scheduler execution limit. This should be avoided if not intended (see _Example 3_).\n* In [[Scheduler#Unscheduled_Environment|non-scheduled environment]], `while` `do` loop is limited to 10,000 iterations, after which it exits even if condition is still `true`.",
            "examples": [
                {
                    "text": "```sqf\nwhile { a < b } do { a = a + 1 };\n```"
                },
                {
                    "text": "A practical example: Repair all members of a group to such a level that they are able to stand up:\n\n```sqf\n\n{\n\tif (alive _x) then\n\t{\n\t\twhile { not canStand _x } do\n\t\t{\n\t\t\t_x setDamage (damage _x - 0.01);\n\t\t};\n\t};\n} forEach units group unitname;\n\n```"
                },
                {
                    "text": "```sqf\n\n[] spawn {\n\t// warning: while loop without suspension executes multiple times per frame\n\tprivate _counter = 0;\n\tprivate _endTime = diag_tickTime + 5;\n\tprivate _frameNo = diag_frameNo;\n\twhile { diag_tickTime < _endTime } do\n\t{\n\t\t_counter = _counter + 1;\n\t};\n\t// in an empty mission, the _counter may go well over 2000 times per frame!\n\thint format [\"Average Execution: %1 times per frame\", _counter / (diag_frameNo - _frameNo)];\n\n\t// with suspension\n\tprivate _counter = 0;\n\tprivate _endTime = diag_tickTime + 5;\n\tprivate _frameNo = diag_frameNo;\n\twhile { diag_tickTime < _endTime } do\n\t{\n\t\t_counter = _counter + 1;\n\t\tuiSleep 0.001; // waits at least 1 frame\n\t};\n\t// _counter says one per frame, as expected\n\thint format [\"Average Execution: %1 times per frame\", _counter / (diag_frameNo - _frameNo)];\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "condition",
                            "description": "`Code`"
                        }
                    ],
                    "outline": "`while` condition",
                    "returns": "[While Type](https://community.bistudio.com/wiki/While%20Type)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/while"
        },
        "configuration": {
            "label": "while",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "Returns the current wind vector (in m/s) as array [x, y, z].\n\n**NOTE**: The last value (z, \"up-down\") always returns 0 – wind being only horizontal.",
            "examples": [
                {
                    "text": "```sqf\n_windArray = wind;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**wind**",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/wind"
        },
        "configuration": {
            "label": "wind",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the current wind azimuth.",
            "examples": [
                {
                    "text": "```sqf\n\nif (windDir < 45 || windDir > 315) then {\n\thint \"I feel a southern wind\"; // wind going from South to North\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`windDir`",
                    "returns": "`Number` - azimuth"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/windDir"
        },
        "configuration": {
            "label": "windDir",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns wind strength and direction.\n{{Feature|afm}}",
            "examples": [
                {
                    "text": "```sqf\n_wind = windRTD;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`windRTD`",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/windRTD"
        },
        "configuration": {
            "label": "windRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the current wind strength.",
            "examples": [
                {
                    "text": "```sqf\n10 setWindStr (0.5 * windStr);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "**windStr**",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/windStr"
        },
        "configuration": {
            "label": "windStr",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "{{Feature|afm}} Returns force produced by wings.",
            "examples": [
                {
                    "text": "```sqf\n_wingForce = wingsForcesRTD _rtdHelo;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "RTD_helicopter",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "`wingsForcesRTD` RTD_helicopter",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/wingsForcesRTD"
        },
        "configuration": {
            "label": "wingsForcesRTD",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Creates a [With Type](https://community.bistudio.com/wiki/With%20Type) that is used inside a `do` construct in order to execute code inside a given namespace.\n**IMPORTANT**: To avoid the below-mentioned issue error (whether in [scheduled](https://community.bistudio.com/wiki/Scheduler%23Scheduled%20Environment) or [unscheduled](https://community.bistudio.com/wiki/Scheduler%23Unscheduled%20Environment) environment) use `setVariable`/`getVariable` with the desired `Namespace`.",
            "examples": [
                {
                    "text": "```sqf\n_myWithType = with uiNamespace;\n```"
                },
                {
                    "text": "```sqf\nwith missionNamespace do { global = global + 1 };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "namespace",
                            "description": "`Namespace`"
                        }
                    ],
                    "outline": "`with` namespace",
                    "returns": "[With Type](https://community.bistudio.com/wiki/With%20Type)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/with"
        },
        "configuration": {
            "label": "with",
            "grammarType": "control-statement"
        }
    },
    {
        "documentation": {
            "description": "Return the name of the currently loaded world.",
            "examples": [
                {
                    "text": "```sqf\nprivate _name = worldName;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`worldName`",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/worldName"
        },
        "configuration": {
            "label": "worldName",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Returns the engine calculated size (terrain side length) of the current world (`BIS_fnc_mapSize` may return the same value, but is just a simple look up in [ config](https://community.bistudio.com/wiki/configFile%20)).",
            "examples": [
                {
                    "text": "```sqf\nprivate _size = worldSize;\n```"
                },
                {
                    "text": "```sqf\n// A round marker that should cover the whole map, placed in the center of the map, should have the following radius (a, b)\nprivate _radius = sqrt 2 / 2 * worldSize;\n```"
                },
                {
                    "text": "```sqf\nprivate _axis = worldSize / 2;\nprivate _center = [_axis, _axis , 0];\nprivate _radius = sqrt 2 * _axis;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`worldSize`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/worldSize"
        },
        "configuration": {
            "label": "worldSize",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Converts position from world space to object model space.\n**IMPORTANT**: For [scaled objects](https://community.bistudio.com/wiki/setObjectScale), the relative position will be [divided](https://community.bistudio.com/wiki/vectorMultiply) by the object scale.",
            "examples": [
                {
                    "text": "```sqf\n_relPos = myObject worldToModel [0,0,0];\n```"
                },
                {
                    "text": "```sqf\n_relPos = player worldToModel ASLToAGL getPosASL car;\n```"
                },
                {
                    "text": "```sqf\n_relPos = car worldToModel [12000,5000];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "model",
                            "description": "`Object`"
                        },
                        {
                            "name": "position",
                            "description": "`Array` - world position, format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) or [Position2D](https://community.bistudio.com/wiki/Position%23Introduction)"
                        }
                    ],
                    "outline": "model `worldToModel` position",
                    "returns": "`Array` - position relative to model, format [PositionRelative](https://community.bistudio.com/wiki/Position%23PositionRelative)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/worldToModel"
        },
        "configuration": {
            "label": "worldToModel",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Converts position from world space to object model space in [render time scope](https://community.bistudio.com/wiki/Simulation%20vs%20Render%20Time%20Scope).\n**IMPORTANT**: For [scaled objects](https://community.bistudio.com/wiki/setObjectScale), the relative position will be [divided](https://community.bistudio.com/wiki/vectorMultiply) by the object scale.",
            "examples": [
                {
                    "text": "```sqf\n_relPos = myObject worldToModelVisual [0,0,0];\n```"
                },
                {
                    "text": "```sqf\n_relPos = player worldToModelVisual position car;\n```"
                },
                {
                    "text": "```sqf\n_relPos = car worldToModelVisual [12000, 5000];\n```"
                },
                {
                    "text": "```sqf\n_relPos = unit worldToModelVisual position tank;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "worldPosition",
                            "description": "`Array` format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) or `Array` format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction)"
                        }
                    ],
                    "outline": "object `worldToModelVisual` worldPosition",
                    "returns": "`Array` - [PositionRelative](https://community.bistudio.com/wiki/Position%23PositionRelative)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/worldToModelVisual"
        },
        "configuration": {
            "label": "worldToModelVisual",
            "grammarType": "command"
        }
    },
    {
        "documentation": {
            "description": "Converts position in world space into screen (UI) space. If a specified position is not within the current screen view, an empty array is returned.\n**NOTE**:  `SafeZone`s should be considered:\n* the result can be out of the [0,0]..[1,1] range\n* the result can be a filled array even if the position is not displayed on screen if it would appear on a triplescreen setup",
            "examples": [
                {
                    "text": "```sqf\n_screenPos = worldToScreen ASLToAGL getPosASL soldier1;\n```"
                },
                {
                    "text": "```sqf\n_screenPos = worldToScreen (player modelToWorld [0,10,0]);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Array` - world position 2D [x,y] or [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL)"
                        }
                    ],
                    "outline": "`worldToScreen` position",
                    "returns": "`Array` - screen position in `SafeZone` format [x, y]. Returns an empty array `**[]**` if not on-screen."
                },
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object` - camera object"
                        },
                        {
                            "name": "position",
                            "description": "`Array` - world position 2D [x,y] or [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL)"
                        }
                    ],
                    "outline": "camera `worldToScreen` position",
                    "returns": "`Array` - screen position in `SafeZone` format [x, y], for the specified camera. Returns an empty array `**[]**` if not on-screen."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/worldToScreen"
        },
        "configuration": {
            "label": "worldToScreen",
            "grammarType": "command"
        }
    }
]