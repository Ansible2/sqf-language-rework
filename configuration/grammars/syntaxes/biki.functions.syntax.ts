import { SQFItemConfig } from "../sqf.namespace";

export const configs: SQFItemConfig[] = [
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_addButtonEvents;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_addButtonEvents` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_addButtonEvents"
        },
        "configuration": {
            "label": "BIN_fnc_addButtonEvents",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_addDangerZone;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_addDangerZone` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_addDangerZone"
        },
        "configuration": {
            "label": "BIN_fnc_addDangerZone",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_addEntitiesToArea;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_addEntitiesToArea` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_addEntitiesToArea"
        },
        "configuration": {
            "label": "BIN_fnc_addEntitiesToArea",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_addFaradayCage;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_addFaradayCage` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_addFaradayCage"
        },
        "configuration": {
            "label": "BIN_fnc_addFaradayCage",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tAdds measurement point to IDWMap\n\n\tParameter(s):\n\t\tARRAY (Optional) - position in format [x,y] or [x,y,z] in which case z is ignored. Default: position player\n\n\tReturns:\n\t\tNUMBER \n\t\t\t0 ... 1 - strength at given coordinates \n\t\t\t-1 - point is out of bounds\n\t\t\t-999 - error\n\t\t\n\tExample:\n\t\tcall BIN_fnc_addIDWMapMeasurementPoint\n\t\t[x,y] call BIN_fnc_addIDWMapMeasurementPoint\n\t\t[x,y,z] call BIN_fnc_addIDWMapMeasurementPoint\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_addIDWMapMeasurementPoint;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_addIDWMapMeasurementPoint` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_addIDWMapMeasurementPoint"
        },
        "configuration": {
            "label": "BIN_fnc_addIDWMapMeasurementPoint",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tAdds given array of objects to area, ovewriting previous objects data stored for the area in extension\n\n\tParameter(s):\n\t\t0: STRING - area name\n\t\t1: ARRAY - array of objects to add\n\n\tReturns:\n\t\tNUMBER - number of objects added\n\t\t\n\tExample:\n\t\t[\"myArea\", [obj1,ob2,...]]  call BIN_fnc_addObjectsToArea\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_addObjectsToArea;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_addObjectsToArea` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_addObjectsToArea"
        },
        "configuration": {
            "label": "BIN_fnc_addObjectsToArea",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_addRecordedSignal;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_addRecordedSignal` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_addRecordedSignal"
        },
        "configuration": {
            "label": "BIN_fnc_addRecordedSignal",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_addRotation;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_addRotation` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_addRotation"
        },
        "configuration": {
            "label": "BIN_fnc_addRotation",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_addSignal;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_addSignal` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_addSignal"
        },
        "configuration": {
            "label": "BIN_fnc_addSignal",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\t\tRegister entities to a site, so they can be despawned with the rest when player leaves the area.\n\n\tParameter(s):\n\t\t0: OBJECT - site logic. The site must be spawned for the function to work.\n\t\t1: ARRAY - entities to be added. Types can be mixed, the system will sort them out itself.\n\n\tReturns:\n\t\tBOOL - true if added\n*/\n\n#define ADD(ID)\\\n\t(_entities select ID) pushback _x;\\\n\t(_entityIDs select ID) pushback -1;\n</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_addSiteEntities;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_addSiteEntities` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_addSiteEntities"
        },
        "configuration": {
            "label": "BIN_fnc_addSiteEntities",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_addTranslation;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_addTranslation` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_addTranslation"
        },
        "configuration": {
            "label": "BIN_fnc_addTranslation",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_addTravelPoint;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_addTravelPoint` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_addTravelPoint"
        },
        "configuration": {
            "label": "BIN_fnc_addTravelPoint",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tRetrieves user measurements data with strengths\n\n\tParameter(s):\n\t\tNONE\n\n\tReturns:\n\t\tARRAY - user measurements in format [x,y,strength] or empty array [] on error\n\t\t\n\tExample:\n\t\tcall BIN_fnc_getAllMeasurementPoints\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_allIDWMapMeasurementPoints;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_allIDWMapMeasurementPoints` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_allIDWMapMeasurementPoints"
        },
        "configuration": {
            "label": "BIN_fnc_allIDWMapMeasurementPoints",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_allowAntennaReveal;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_allowAntennaReveal` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_allowAntennaReveal"
        },
        "configuration": {
            "label": "BIN_fnc_allowAntennaReveal",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_allowedAntennaReveal;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_allowedAntennaReveal` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_allowedAntennaReveal"
        },
        "configuration": {
            "label": "BIN_fnc_allowedAntennaReveal",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_animateSmooth;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_animateSmooth` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_animateSmooth"
        },
        "configuration": {
            "label": "BIN_fnc_animateSmooth",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_assignAntenna;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_assignAntenna` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_assignAntenna"
        },
        "configuration": {
            "label": "BIN_fnc_assignAntenna",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_assignedAntenna;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_assignedAntenna` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_assignedAntenna"
        },
        "configuration": {
            "label": "BIN_fnc_assignedAntenna",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>#define VAR_LIGHT\t\"BIN_fnc_attachChemlight_light\"\n#define VAR_KILLED\t\"BIN_fnc_attachChemlight_killed\"\n</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_attachChemlight;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_attachChemlight` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_attachChemlight"
        },
        "configuration": {
            "label": "BIN_fnc_attachChemlight",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_bakeAntenna;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_bakeAntenna` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_bakeAntenna"
        },
        "configuration": {
            "label": "BIN_fnc_bakeAntenna",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>#define HISTORY_CAPACITY\t5\n#define HIT_DELAY\t\t5\n#define SIZE_COEF\t\t3\n</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_behaviorInit;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_behaviorInit` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_behaviorInit"
        },
        "configuration": {
            "label": "BIN_fnc_behaviorInit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tCalculate bezier curve\n\n\tParameter(s):\n\t\t0: ARRAY - list of control points in format [x,y,z], can be any number of them\n\t\t1: NUMBER - progress in range 0 to 1\n\n\tReturns:\n\tARRAY - position curve in format [x,y,z]\n*/\n</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_bezier;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_bezier` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_bezier"
        },
        "configuration": {
            "label": "BIN_fnc_bezier",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>#define STEPS\t101\n</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_bezierAverage;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_bezierAverage` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_bezierAverage"
        },
        "configuration": {
            "label": "BIN_fnc_bezierAverage",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_bezierBoundingBox;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_bezierBoundingBox` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_bezierBoundingBox"
        },
        "configuration": {
            "label": "BIN_fnc_bezierBoundingBox",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>#define POINT_W\t\t\t(0.03)\n#define POINT_H\t\t\t(POINT_W / 0.75)\n#define RESOLUTION\t\t50\n#define MAX_POINTS\t\t16\n#define GRIDS\t\t\t10\n#define REFRESH\t\t\t([_ctrlParent] call (_ctrlArea getvariable \"fnc_draw\"))\n#define POINTS\t\t\t(_ctrlArea getvariable \"points\")\n#define LINES\t\t\t(_ctrlArea getvariable \"lines\")\n#define CURVE\t\t\t(_ctrlArea getvariable \"curve\")\n#define BUTTONS\t\t\t(_ctrlArea getvariable \"buttons\")\n#define HOVER\t\t\t(_ctrlArea getvariable \"hover\")\n#define SELECTED\t\t(_ctrlArea getvariable \"selected\")\n#define SET_HOVER(CTRL)\t\t_ctrlArea setvariable [\"hover\",CTRL]; CTRL ctrlsettextcolor COLOR_SELECTED\n#define SET_SELECTED(CTRL)\t_ctrlArea setvariable [\"selected\",CTRL]\n#define COLOR_BACKGROUND\t[0.4,0.4,0.4,1]\n#define COLOR\t\t\t[0,0,0,1]\n#define COLOR_SELECTED\t\t[1,1,1,1]\n#define COLOR_CURVE\t\t[1,0,0,1]\n#define COLOR_LINE\t\t[0,0,0,0.2]\n#define COLOR_TIMELINE\t\t[1,1,1,1]\n#define COLOR_GRID\t\t[1,1,1,0.3]\n#define POINT_POS\t\t[\\\n\t\t\t\t\t(_posX - POINT_W / 2) max 0 min ((ctrlposition _ctrlArea select 2) - POINT_W),\\\n\t\t\t\t\t(_posY - POINT_H / 2) max 0 min ((ctrlposition _ctrlArea select 3) - POINT_H),\\\n\t\t\t\t\tPOINT_W,\\\n\t\t\t\t\tPOINT_H\\\n\t\t\t\t]\n</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_bezierEditor;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_bezierEditor` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_bezierEditor"
        },
        "configuration": {
            "label": "BIN_fnc_bezierEditor",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_bezierNormalize;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_bezierNormalize` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_bezierNormalize"
        },
        "configuration": {
            "label": "BIN_fnc_bezierNormalize",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tCalculate bezier curve velocity\n\n\tParameter(s):\n\t\t0: ARRAY - list of control points in format [x,y,z], can be any number of them\n\t\t1: NUMBER - progress in range 0 to 1\n\n\tReturns:\n\tARRAY - velocity vector in format [x,y,z]\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_bezierVelocity;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_bezierVelocity` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_bezierVelocity"
        },
        "configuration": {
            "label": "BIN_fnc_bezierVelocity",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_breatheInit;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_breatheInit` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_breatheInit"
        },
        "configuration": {
            "label": "BIN_fnc_breatheInit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_calculateLinkBudget;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_calculateLinkBudget` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_calculateLinkBudget"
        },
        "configuration": {
            "label": "BIN_fnc_calculateLinkBudget",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_calculateSpectrumAnalyzerValues;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_calculateSpectrumAnalyzerValues` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_calculateSpectrumAnalyzerValues"
        },
        "configuration": {
            "label": "BIN_fnc_calculateSpectrumAnalyzerValues",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_callButtonEvent;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_callButtonEvent` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_callButtonEvent"
        },
        "configuration": {
            "label": "BIN_fnc_callButtonEvent",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Adjust Military Cargo Platform legs length in [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor).",
            "examples": [
                {
                    "text": "```sqf\nplatform call BIN_fnc_cargoPlatform_01_adjust;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - cargo platform"
                        }
                    ],
                    "outline": "[object] call `BIN_fnc_cargoPlatform_01_adjust`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_cargoPlatform_01_adjust"
        },
        "configuration": {
            "label": "BIN_fnc_cargoPlatform_01_adjust",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_CargoPlatform_01_destruction\n\n\tApply texture & materials of parent object to ruins. Function is attached to killed event handler.\n*/</pre>\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_cargoPlatform_01_destruction`; -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_cargoPlatform_01_destruction"
        },
        "configuration": {
            "label": "BIN_fnc_cargoPlatform_01_destruction",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_cargoPlatform_01_update\n\n\tUpdate cargo platform position\n*/</pre>\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_cargoPlatform_01_update`; -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_cargoPlatform_01_update"
        },
        "configuration": {
            "label": "BIN_fnc_cargoPlatform_01_update",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tEnables CBRN systems on a specific character entity.\n\tNOTE: Module / function set not robust nor completed - not recommended for usage at this stage!\n\n\tParameter(s):\n\t\t0: OBJECT - character entity to enable CBRN systems on\n\n\tReturns:\n\tBOOL\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_CBRNCharacterAdd;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_CBRNCharacterAdd` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_CBRNCharacterAdd"
        },
        "configuration": {
            "label": "BIN_fnc_CBRNCharacterAdd",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tRegisters a CBRN contaminant.\n\tNOTE: Module / function set not robust nor completed - not recommended for usage at this stage!\n\n\tParameter(s):\n\t\t0: \n\t\t\tOBJECT - trigger representing a CBRN contaminated area\n\t\t\tOBJECT - entity representing an active CBRN contaminant\n\n\tReturns:\n\tBOOL\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_CBRNContaminantAdd;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_CBRNContaminantAdd` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_CBRNContaminantAdd"
        },
        "configuration": {
            "label": "BIN_fnc_CBRNContaminantAdd",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tUnregisters a CBRN contaminant.\n\tNOTE: Module / function set not robust nor completed - not recommended for usage at this stage!\n\n\tParameter(s):\n\t\t0: OBJECT - trigger representing a CBRN contaminated area\n\n\tReturns:\n\tBOOL\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_CBRNContaminantRemove;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_CBRNContaminantRemove` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_CBRNContaminantRemove"
        },
        "configuration": {
            "label": "BIN_fnc_CBRNContaminantRemove",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tActivates a specific piece of CBRN gear for a character entity.\n\tNOTE: Module / function set not robust nor completed - not recommended for usage at this stage!\n\n\tParameter(s):\n\t\t0: OBJECT - character entity to activate CBRN gear for\n\t\t1: STRING - CBRN gear class name to activate\n\n\tReturns:\n\tBOOL\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_CBRNGearActivate;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_CBRNGearActivate` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_CBRNGearActivate"
        },
        "configuration": {
            "label": "BIN_fnc_CBRNGearActivate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tDeactivates a specific piece of CBRN gear for a character entity.\n\tNOTE: Module / function set not robust nor completed - not recommended for usage at this stage!\n\n\tParameter(s):\n\t\t0: OBJECT - character entity to deactivate CBRN gear for\n\t\t1: STRING - CBRN gear class name to deactivate\n\n\tReturns:\n\tBOOL\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_CBRNGearDeactivate;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_CBRNGearDeactivate` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_CBRNGearDeactivate"
        },
        "configuration": {
            "label": "BIN_fnc_CBRNGearDeactivate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tProcesses CBRN gear updates on a specific character entity.\n\tNOTE: Module / function set not robust nor completed - not recommended for usage at this stage!\n\n\tParameter(s):\n\t\t0: OBJECT - character entity to process CBRN gear for\n\t\t1: STRING - CBRN gear class name to process\n\n\tReturns:\n\tBOOL\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_CBRNGearUpdate;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_CBRNGearUpdate` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_CBRNGearUpdate"
        },
        "configuration": {
            "label": "BIN_fnc_CBRNGearUpdate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Initialises CBRN Hose for given unit.",
            "examples": [
                {
                    "text": "```sqf\nplayer call BIN_fnc_CBRNHoseInit;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit"
                        }
                    ],
                    "outline": "[unit] call `BIN_fnc_CBRNHoseInit`",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_CBRNHoseInit"
        },
        "configuration": {
            "label": "BIN_fnc_CBRNHoseInit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tReturns whether or not a character entity is within a CBRN contaminated area.\n\tNOTE: Module / function set not robust nor completed - not recommended for usage at this stage!\n\n\tParameter(s):\n\t\t0: OBJECT - character entity to test for\n\n\tReturns:\n\tBOOL\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_CBRNInContaminant;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_CBRNInContaminant` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_CBRNInContaminant"
        },
        "configuration": {
            "label": "BIN_fnc_CBRNInContaminant",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_circleSmokeMissile\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_circleSmokeMissile;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_circleSmokeMissile` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_circleSmokeMissile"
        },
        "configuration": {
            "label": "BIN_fnc_circleSmokeMissile",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tClears IDWMap on the main map\n\n\tParameter(s):\n\t\tNONE\n\n\tReturns:\n\t\tBOOL - true if EH existed and was removed\n\t\t\n\tExample:\n\t\tcall BIN_fnc_clearIDWMap\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_clearIDWMap;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_clearIDWMap` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_clearIDWMap"
        },
        "configuration": {
            "label": "BIN_fnc_clearIDWMap",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tClears TXScan drawing\n\n\tParameter(s):\n\t\t0: STRING - scan name, \"\" - all scans\n\n\tReturns:\n\t\tBOOL - false if error occured\n\t\t\n\tExample:\n\t\t\"MyScan\" call BIN_fnc_clearTXScan\n\t\t\"\" call BIN_fnc_clearTXScan - all scans\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_clearTXScan;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_clearTXScan` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_clearTXScan"
        },
        "configuration": {
            "label": "BIN_fnc_clearTXScan",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Converts {{Link|https://en.wikipedia.org/wiki/HSL_and_HSV|HSL colour format}} to RGB.\n**Arma**: 3contact",
            "examples": [
                {
                    "text": "```sqf\nprivate _rgb = [0, 100, 50] call BIN_fnc_colorHSLtoRGB;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "hue",
                            "description": "`Number` - (Optional, default 0)"
                        },
                        {
                            "name": "saturation",
                            "description": "`Number` - (Optional, default 0)"
                        },
                        {
                            "name": "lightness",
                            "description": "`Number` - (Optional, default 0)"
                        }
                    ],
                    "outline": "[hue, saturation, lightness] call `BIN_fnc_colorHSLtoRGB`",
                    "returns": "`Array` of `Number`s - to format [{{Color|red|R}}, {{Color|green|G}}, {{Color|blue|B}}]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_colorHSLtoRGB"
        },
        "configuration": {
            "label": "BIN_fnc_colorHSLtoRGB",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "This function contains no code.\n**Arma**: 3contact",
            "examples": [
                {
                    "text": "```sqf\n[] call BIN_fnc_crearAllData;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "[] call `BIN_fnc_crearAllData`",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_crearAllData"
        },
        "configuration": {
            "label": "BIN_fnc_crearAllData",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_createScriptedSoundSource;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_createScriptedSoundSource` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_createScriptedSoundSource"
        },
        "configuration": {
            "label": "BIN_fnc_createScriptedSoundSource",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_createScriptedSoundSourceVehicle;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_createScriptedSoundSourceVehicle` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_createScriptedSoundSourceVehicle"
        },
        "configuration": {
            "label": "BIN_fnc_createScriptedSoundSourceVehicle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tCreates a scan with the name defined as class in CfgTXScans or from given params. \n\t\tIf name doesn't exists in config and params are not provided, default scan is created which could be tweaked later\n\n\tParameter(s):\n\t\t0: STRING - \"\" create every scan from config\n\t\tor\n\t\t0: STRING - scan name\n\t\t1: ARRAY (Optional) - TX position\n\t\t2: NUMBER (Optional) - scan angle\n\t\t3: NUMBER (Optional) - scan precision\n\t\t4: ARRAY (Optional) - scan polygon\n\n\tReturns:\n\t\tBOOL - false on error\n\t\t\n\tExamples:\n\t\t\"MyScan\" call BIN_fnc_createTXScan\n\t\t\"\" call BIN_fnc_createTXScan - creates every scan from config\n\t\t[\"MyScan\", [1,2,3], 20, 0.1] call BIN_fnc_createTXScan - creates every scan from config\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_createTXScan;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_createTXScan` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_createTXScan"
        },
        "configuration": {
            "label": "BIN_fnc_createTXScan",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tCrops given scan\n\n\tParameter(s):\n\t\t0: STRING - scan name\n\t\t1: NUMBER - crop rectangle center X\n\t\t2: NUMBER - crop rectangle center Y\n\t\t3: NUMBER - crop rectangle center W\n\t\t4: NUMBER - crop rectangle center H\n\n\tReturns:\n\t\tARRAY - crop rectangle corners\n\t\t\n\tExample:\n\t\t[\"MyScan\", 100, 100, 1000, 500] call BIN_fnc_cropTXScan\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_cropTXScan;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_cropTXScan` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_cropTXScan"
        },
        "configuration": {
            "label": "BIN_fnc_cropTXScan",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_curatorInit;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_curatorInit` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_curatorInit"
        },
        "configuration": {
            "label": "BIN_fnc_curatorInit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_debugDraw;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_debugDraw` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_debugDraw"
        },
        "configuration": {
            "label": "BIN_fnc_debugDraw",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_debugDrawMapInit;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_debugDrawMapInit` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_debugDrawMapInit"
        },
        "configuration": {
            "label": "BIN_fnc_debugDrawMapInit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_debugQuests;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_debugQuests` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_debugQuests"
        },
        "configuration": {
            "label": "BIN_fnc_debugQuests",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_debugText;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_debugText` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_debugText"
        },
        "configuration": {
            "label": "BIN_fnc_debugText",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_deconShowerAnim\n*/</pre>\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_deconShowerAnim;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_deconShowerAnim` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_deconShowerAnim"
        },
        "configuration": {
            "label": "BIN_fnc_deconShowerAnim",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_deconShowerAnimLarge\n*/</pre>\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_deconShowerAnimLarge;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_deconShowerAnimLarge` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_deconShowerAnimLarge"
        },
        "configuration": {
            "label": "BIN_fnc_deconShowerAnimLarge",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_deconShowerAnimStop\n\tDelete all sound sources attachted to decon shower in case it is destroyed or deleted\n*/</pre>\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_deconShowerAnimStop;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_deconShowerAnimStop` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_deconShowerAnimStop"
        },
        "configuration": {
            "label": "BIN_fnc_deconShowerAnimStop",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_deconShowerCollision\n*/</pre>\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_deconShowerCollision;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_deconShowerCollision` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_deconShowerCollision"
        },
        "configuration": {
            "label": "BIN_fnc_deconShowerCollision",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_deconShowerDelete\n\tDelete all sound sources attachted to decon shower in case it is destroyed or deleted\n*/</pre>\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_deconShowerDelete;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_deconShowerDelete` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_deconShowerDelete"
        },
        "configuration": {
            "label": "BIN_fnc_deconShowerDelete",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_deconShowerMove\n*/</pre>\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_deconShowerMove;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_deconShowerMove` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_deconShowerMove"
        },
        "configuration": {
            "label": "BIN_fnc_deconShowerMove",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_deleteAntenna;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_deleteAntenna` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_deleteAntenna"
        },
        "configuration": {
            "label": "BIN_fnc_deleteAntenna",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_deleteDangerZone;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_deleteDangerZone` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_deleteDangerZone"
        },
        "configuration": {
            "label": "BIN_fnc_deleteDangerZone",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_deleteDiaryRecord;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_deleteDiaryRecord` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_deleteDiaryRecord"
        },
        "configuration": {
            "label": "BIN_fnc_deleteDiaryRecord",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_deleteFaradayCage;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_deleteFaradayCage` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_deleteFaradayCage"
        },
        "configuration": {
            "label": "BIN_fnc_deleteFaradayCage",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_deleteLoopedRadioSignal;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_deleteLoopedRadioSignal` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_deleteLoopedRadioSignal"
        },
        "configuration": {
            "label": "BIN_fnc_deleteLoopedRadioSignal",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_deleteSignal;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_deleteSignal` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_deleteSignal"
        },
        "configuration": {
            "label": "BIN_fnc_deleteSignal",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_deleteSpectrumAnalyzer;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_deleteSpectrumAnalyzer` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_deleteSpectrumAnalyzer"
        },
        "configuration": {
            "label": "BIN_fnc_deleteSpectrumAnalyzer",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_deleteTravelPoint;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_deleteTravelPoint` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_deleteTravelPoint"
        },
        "configuration": {
            "label": "BIN_fnc_deleteTravelPoint",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tDeletes scan with given name from extension and the map\n\n\tParameter(s):\n\t\t0: STRING - TXScan name\n\n\tReturns:\n\t\tBOOL - false on error\n\t\t\n\tExample:\n\t\t\"MyScan\" call BIN_fnc_deleteTXScan\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_deleteTXScan;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_deleteTXScan` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_deleteTXScan"
        },
        "configuration": {
            "label": "BIN_fnc_deleteTXScan",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_diag_addAllSpectrumAnalyzers;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_diag_addAllSpectrumAnalyzers` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_diag_addAllSpectrumAnalyzers"
        },
        "configuration": {
            "label": "BIN_fnc_diag_addAllSpectrumAnalyzers",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tDraws all area objects bounds\n\n\tParameter(s):\n\t\t0: STRING - area name\n\n\tReturns:\n\t\tNUMBER - event handler id\n\t\t\n\tExample:\n\t\t\"MyArea\" call BIN_fnc_diag_drawAllAreaObjectsBounds\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_diag_drawAllAreaObjectsBounds;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_diag_drawAllAreaObjectsBounds` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_diag_drawAllAreaObjectsBounds"
        },
        "configuration": {
            "label": "BIN_fnc_diag_drawAllAreaObjectsBounds",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_diag_getAllAreaEntities;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_diag_getAllAreaEntities` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_diag_getAllAreaEntities"
        },
        "configuration": {
            "label": "BIN_fnc_diag_getAllAreaEntities",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tReturns stored area objects for diagnostics\n\n\tParameter(s):\n\t\t0: STRING - area name\n\t\t1: NUMBER - multipart number\n\n\tReturns:\n\t\tARRAY of arays in format [[posX,posY,posMinZ,posMaxZ,radius],...]\n\t\t\n\tExample:\n\t\t\"MyArea\" call BIN_fnc_diag_getAllAreaObjects\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_diag_getAllAreaObjects;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_diag_getAllAreaObjects` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_diag_getAllAreaObjects"
        },
        "configuration": {
            "label": "BIN_fnc_diag_getAllAreaObjects",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tAdds user action menu to the player with different IDWMap diag options\n\n\tParameter(s):\n\t\t0: STRING - command\n\t\t1: BOOL (Optional) - extended option\n\n\tReturns:\n\t\tNOTHING\n\t\t\n\tExample:\n\t\tcall BIN_fnc_diag_IDWMap\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_diag_IDWMap;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_diag_IDWMap` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_diag_IDWMap"
        },
        "configuration": {
            "label": "BIN_fnc_diag_IDWMap",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_diag_logAntenna;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_diag_logAntenna` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_diag_logAntenna"
        },
        "configuration": {
            "label": "BIN_fnc_diag_logAntenna",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_diag_revealAllAntennas;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_diag_revealAllAntennas` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_diag_revealAllAntennas"
        },
        "configuration": {
            "label": "BIN_fnc_diag_revealAllAntennas",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_diag_showLinkBudgetMap;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_diag_showLinkBudgetMap` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_diag_showLinkBudgetMap"
        },
        "configuration": {
            "label": "BIN_fnc_diag_showLinkBudgetMap",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tAdds user action menu to the player with different TXScan diag options\n\n\tParameter(s):\n\t\t0: STRING - command\n\n\tReturns:\n\t\tNOTHING\n\t\t\n\tExample:\n\t\tcall BIN_fnc_diag_TXScan\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_diag_TXScan;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_diag_TXScan` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_diag_TXScan"
        },
        "configuration": {
            "label": "BIN_fnc_diag_TXScan",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_distanceToAreaBorder;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_distanceToAreaBorder` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_distanceToAreaBorder"
        },
        "configuration": {
            "label": "BIN_fnc_distanceToAreaBorder",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_dockModule;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_dockModule` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_dockModule"
        },
        "configuration": {
            "label": "BIN_fnc_dockModule",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_drawAntennas;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_drawAntennas` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_drawAntennas"
        },
        "configuration": {
            "label": "BIN_fnc_drawAntennas",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\t\tSet fixed size marker to be drawn in main map\n\n\tParameter(s):\n\t\t0: STRING - unique marker ID\n\t\t1:\n\t\t\tARRAY - marker parameters in format used by drawIcon command\n\t\t\tBOOL - delete the marker\n\n\tReturns:\n\t\tBOOL - true if successful\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_drawIconFixed;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_drawIconFixed` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_drawIconFixed"
        },
        "configuration": {
            "label": "BIN_fnc_drawIconFixed",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tDraws IDWMap on the main map\n\n\tParameter(s):\n\t\tNONE\n\t\t\n\tReturns:\n\t\tBOOL - true on success\n\t\t\n\tExample:\n\t\tcall BIN_fnc_drawIDWMap\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_drawIDWMap;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_drawIDWMap` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_drawIDWMap"
        },
        "configuration": {
            "label": "BIN_fnc_drawIDWMap",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_drawMap;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_drawMap` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_drawMap"
        },
        "configuration": {
            "label": "BIN_fnc_drawMap",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_drawProbeMap;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_drawProbeMap` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_drawProbeMap"
        },
        "configuration": {
            "label": "BIN_fnc_drawProbeMap",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_drawSpectrum;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_drawSpectrum` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_drawSpectrum"
        },
        "configuration": {
            "label": "BIN_fnc_drawSpectrum",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_drawTooltip;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_drawTooltip` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_drawTooltip"
        },
        "configuration": {
            "label": "BIN_fnc_drawTooltip",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tDraws TXScan with given name\n\n\tParameter(s):\n\t\tSTRING - scan name or \"\" to draw all scans\n\t\t\n\tReturns:\n\t\tBOOL - true on success\n\t\t\n\tExample:\n\t\t\"MyScan\" call BIN_fnc_drawTXScan\n\t\t\"\" call BIN_fnc_drawTXScan - draw all scans\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_drawTXScan;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_drawTXScan` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_drawTXScan"
        },
        "configuration": {
            "label": "BIN_fnc_drawTXScan",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_droneDestructionFX\n*/</pre>\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_droneDestructionFX;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_droneDestructionFX` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_droneDestructionFX"
        },
        "configuration": {
            "label": "BIN_fnc_droneDestructionFX",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_droneModuleDestruction\n\tAlien Module destruction\n*/</pre>\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_droneModuleDestruction;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_droneModuleDestruction` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_droneModuleDestruction"
        },
        "configuration": {
            "label": "BIN_fnc_droneModuleDestruction",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_editMoveProperties;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_editMoveProperties` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_editMoveProperties"
        },
        "configuration": {
            "label": "BIN_fnc_editMoveProperties",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Sets EMP parameters to a vehicle. Destroys lights and optionally prevents vehicle from starting\n\n**NOTE**: The player has to be defined as <sqf inline>BIN_player for the voice lines to be spoken.\n**Arma**: 3contact",
            "examples": [
                {
                    "text": "```sqf\n[_enemyVehicle, true, true] call BIN_fnc_empVehicle;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "obj",
                            "description": "`Object` - the vehicle"
                        },
                        {
                            "name": "destroyEngine",
                            "description": "`Boolean` - (Optional, default `true`) `true` to destroys the engine, `false` to have it working"
                        },
                        {
                            "name": "aiExit",
                            "description": "`Boolean` - (Optional, default `true`) AI behaviour in vehicle; `true` to make them exit the vehicle, `false` to remain in it"
                        }
                    ],
                    "outline": "[obj, destroyEngine, aiExit] call `BIN_fnc_empVehicle`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_empVehicle"
        },
        "configuration": {
            "label": "BIN_fnc_empVehicle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Sets a variable used in [Arma 3 Contact](https://community.bistudio.com/wiki/Arma%203%20Contact) which handles saving. **Arma**: 3contact",
            "examples": [
                {
                    "text": "```sqf\n[true, true] call BIN_fnc_enableSaving;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "enableSaving",
                            "description": "`Boolean` - (Optional, default `true`) `true` to enable, `false` to disable"
                        },
                        {
                            "name": "saveGame",
                            "description": "`Boolean` - (Optional, default `false`) `true` to save, `false` to not disable"
                        }
                    ],
                    "outline": "[enableSaving, saveGame] call `BIN_fnc_enableSaving`",
                    "returns": "`Nothing`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_enableSaving"
        },
        "configuration": {
            "label": "BIN_fnc_enableSaving",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_eulerToVector;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_eulerToVector` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_eulerToVector"
        },
        "configuration": {
            "label": "BIN_fnc_eulerToVector",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_exit;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_exit` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_exit"
        },
        "configuration": {
            "label": "BIN_fnc_exit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_exitAntennas;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_exitAntennas` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_exitAntennas"
        },
        "configuration": {
            "label": "BIN_fnc_exitAntennas",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_exitDiary;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_exitDiary` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_exitDiary"
        },
        "configuration": {
            "label": "BIN_fnc_exitDiary",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_exitGroup;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_exitGroup` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_exitGroup"
        },
        "configuration": {
            "label": "BIN_fnc_exitGroup",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_exitPersistentObjects;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_exitPersistentObjects` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_exitPersistentObjects"
        },
        "configuration": {
            "label": "BIN_fnc_exitPersistentObjects",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_exitQuests;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_exitQuests` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_exitQuests"
        },
        "configuration": {
            "label": "BIN_fnc_exitQuests",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_exitSites;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_exitSites` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_exitSites"
        },
        "configuration": {
            "label": "BIN_fnc_exitSites",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_exitTasks;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_exitTasks` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_exitTasks"
        },
        "configuration": {
            "label": "BIN_fnc_exitTasks",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_findNearestGrid;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_findNearestGrid` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_findNearestGrid"
        },
        "configuration": {
            "label": "BIN_fnc_findNearestGrid",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tA* search algorithm.\n\tUses hard-coded Manhattan distance to measure distance.\n\n\tParameter(s):\n\t\t0: ARRAY of ARRAYs in format:\n\t\t\t0: NUMBER - node cost\n\t\t\t1: ARRAY - array of neighbor indexes\n\t\t\t2: ARRAY - XYZ position of the node, used to measure distance from end pos\n\t\t1: NUMBER - index of starting point\n\t\t2: NUMBER - index of ending point\n\n\tReturns:\n\tARRAY of NUMBERs - indexes of nodes which are traversed on the way to the ending point\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_findPath;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_findPath` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_findPath"
        },
        "configuration": {
            "label": "BIN_fnc_findPath",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_findSafePositions\n*/</pre>\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_findSafePositions;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_findSafePositions` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_findSafePositions"
        },
        "configuration": {
            "label": "BIN_fnc_findSafePositions",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_findTargetWeight\n*/</pre>\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_findTargetWeight;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_findTargetWeight` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_findTargetWeight"
        },
        "configuration": {
            "label": "BIN_fnc_findTargetWeight",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\t\tReturns frequency as a string\n\n\tParameter(s):\n\t\t0:\n\t\t\tNUMBER - frequency in MHz, returned value is in format \"<value> <unit>\"\n\t\t\tARRAY in format [NUMBER,NUMBER] - frequency range in MHz, returned value is in format \"<value1> <unit1> - <value2> <unit2>\"\n\t\t1: NUMBER - order offset. When 0, frequency 1000 will return \"1 GHz\". When -1, returned value will be \"1000 MHz\"\n\t\t2: BOOL - true if input values are in Hz, false if in MHz (standard across the game)\n\n\tReturns:\n\t\tSTRING\n*/\n</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_frequencyToString;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_frequencyToString` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_frequencyToString"
        },
        "configuration": {
            "label": "BIN_fnc_frequencyToString",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getAISquadID;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getAISquadID` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getAISquadID"
        },
        "configuration": {
            "label": "BIN_fnc_getAISquadID",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getAISquadPosition;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getAISquadPosition` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getAISquadPosition"
        },
        "configuration": {
            "label": "BIN_fnc_getAISquadPosition",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getAllAISquads;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getAllAISquads` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getAllAISquads"
        },
        "configuration": {
            "label": "BIN_fnc_getAllAISquads",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getAllAreas;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getAllAreas` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getAllAreas"
        },
        "configuration": {
            "label": "BIN_fnc_getAllAreas",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tReturns array of names of all TXScans stored in extension\n\n\tParameter(s):\n\t\tNONE\n\n\tReturns:\n\t\tARRAY - scan names\n\t\t\n\tExample:\n\t\tcall BIN_fnc_getAllTXScans \n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getAllTXScans;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getAllTXScans` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getAllTXScans"
        },
        "configuration": {
            "label": "BIN_fnc_getAllTXScans",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getAntennaAngle;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getAntennaAngle` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getAntennaAngle"
        },
        "configuration": {
            "label": "BIN_fnc_getAntennaAngle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getAntennaCanReveal;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getAntennaCanReveal` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getAntennaCanReveal"
        },
        "configuration": {
            "label": "BIN_fnc_getAntennaCanReveal",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getAntennaFrequency;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getAntennaFrequency` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getAntennaFrequency"
        },
        "configuration": {
            "label": "BIN_fnc_getAntennaFrequency",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getAntennaFrequencyClass;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getAntennaFrequencyClass` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getAntennaFrequencyClass"
        },
        "configuration": {
            "label": "BIN_fnc_getAntennaFrequencyClass",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getAntennaGain;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getAntennaGain` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getAntennaGain"
        },
        "configuration": {
            "label": "BIN_fnc_getAntennaGain",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getAntennaName;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getAntennaName` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getAntennaName"
        },
        "configuration": {
            "label": "BIN_fnc_getAntennaName",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getAntennaObject;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getAntennaObject` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getAntennaObject"
        },
        "configuration": {
            "label": "BIN_fnc_getAntennaObject",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getAntennaPower;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getAntennaPower` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getAntennaPower"
        },
        "configuration": {
            "label": "BIN_fnc_getAntennaPower",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getAntennaRevealValue;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getAntennaRevealValue` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getAntennaRevealValue"
        },
        "configuration": {
            "label": "BIN_fnc_getAntennaRevealValue",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\t\tGet all antennas, transmitters and receivers alike\n\n\tParameter(s):\n\t\t0: BOOL - true to ignore player's antennas (default: false)\n\n\tReturns:\n\t\tARRAY of STRINGs - antenna IDs\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getAntennas;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getAntennas` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getAntennas"
        },
        "configuration": {
            "label": "BIN_fnc_getAntennas",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getAntennaScanPolygon;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getAntennaScanPolygon` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getAntennaScanPolygon"
        },
        "configuration": {
            "label": "BIN_fnc_getAntennaScanPolygon",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getAntennaScans;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getAntennaScans` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getAntennaScans"
        },
        "configuration": {
            "label": "BIN_fnc_getAntennaScans",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getAntennaScanSignals;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getAntennaScanSignals` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getAntennaScanSignals"
        },
        "configuration": {
            "label": "BIN_fnc_getAntennaScanSignals",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getAntennaSensitivity;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getAntennaSensitivity` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getAntennaSensitivity"
        },
        "configuration": {
            "label": "BIN_fnc_getAntennaSensitivity",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getAntennaSignal;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getAntennaSignal` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getAntennaSignal"
        },
        "configuration": {
            "label": "BIN_fnc_getAntennaSignal",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getAntennaSignalHistory;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getAntennaSignalHistory` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getAntennaSignalHistory"
        },
        "configuration": {
            "label": "BIN_fnc_getAntennaSignalHistory",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getAntennaType;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getAntennaType` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getAntennaType"
        },
        "configuration": {
            "label": "BIN_fnc_getAntennaType",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_getBehaviorCoef\n\tGet behavior coefficients\n\n\tExamples:\n\n\t\t[bin_drone,\"gravityCannon\"] call BIN_fnc_getBehaviorCoef - returns coefficients for gravity cannon behavior\n*/</pre>\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getBehaviorCoef;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getBehaviorCoef` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getBehaviorCoef"
        },
        "configuration": {
            "label": "BIN_fnc_getBehaviorCoef",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getCharacterSounds;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getCharacterSounds` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getCharacterSounds"
        },
        "configuration": {
            "label": "BIN_fnc_getCharacterSounds",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getCurrentSignal;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getCurrentSignal` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getCurrentSignal"
        },
        "configuration": {
            "label": "BIN_fnc_getCurrentSignal",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getEntityBoundingBarrel;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getEntityBoundingBarrel` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getEntityBoundingBarrel"
        },
        "configuration": {
            "label": "BIN_fnc_getEntityBoundingBarrel",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\t\tGet signals which follow after given one.\n\n\tParameter(s):\n\t\t0: STRING - signal class\n\n\tReturns:\n\t\tARRAY of STRINGs (including input signal when it is not a link)\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getFollowingSignals;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getFollowingSignals` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getFollowingSignals"
        },
        "configuration": {
            "label": "BIN_fnc_getFollowingSignals",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tReturn a formatted string of a mapped control (same style as the Field Manual and Hints)\n\n\tParameter(s):\n\t\t0: STRING - name of the control action\n\t\t1 (Optional): SCALAR - 0-based index of the mapped control\n\n\tReturns:\n\tSTRING - formatted control\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getFormattedControl;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getFormattedControl` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getFormattedControl"
        },
        "configuration": {
            "label": "BIN_fnc_getFormattedControl",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>#define BUSH_WIDTH\t\t2\n#define BUSH_HEIGHT\t\t2\n#define TREE_TRUNK_WIDTH\t0.5\n#define TREE_TRUNK_HEIGHT\t4\n\n#define GET_POS\\\n\tprivate _pos = _x modelToWorld (boundingcenter _x vectormultiply -1);\n\n#define GET_BBOX\\\n\tprivate _bbox = boundingboxreal _x;\\\n\tprivate _bboxX = abs ((_bbox select 0 select 0) - (_bbox select 1 select 0)) / 2 + _cellSizeXHalf*0;\\\n\tprivate _bboxY = abs ((_bbox select 0 select 1) - (_bbox select 1 select 1)) / 2 + _cellSizeYHalf*0;\\\n\tprivate _bboxZ = abs ((_bbox select 0 select 2) - (_bbox select 1 select 2)) / 2 + _cellSizeZHalf*0;\n\n\t//_bboxZ = (abs (_bbox select 0 select 2) + abs (_bbox select 1 select 2)) + _cellSizeZHalf*0;\n\n#define GET_BBOX_FIXED(SIZE)\\\n\tprivate _bboxX = SIZE + _cellSizeXHalf;\\\n\tprivate _bboxY = SIZE + _cellSizeYHalf;\\\n\tprivate _bboxZ = SIZE + _cellSizeZHalf;\n</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getGridCollisions;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getGridCollisions` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getGridCollisions"
        },
        "configuration": {
            "label": "BIN_fnc_getGridCollisions",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getGridMap;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getGridMap` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getGridMap"
        },
        "configuration": {
            "label": "BIN_fnc_getGridMap",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getGridPath;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getGridPath` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getGridPath"
        },
        "configuration": {
            "label": "BIN_fnc_getGridPath",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getGroupSeed;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getGroupSeed` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getGroupSeed"
        },
        "configuration": {
            "label": "BIN_fnc_getGroupSeed",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tGets stored draw colors\n\n\tParameter(s):\n\t\tNONE\n\n\tReturns:\n\t\tARRAY - draw colors\n\t\tor\n\t\t[] on error\n\t\t\n\tExample:\n\t\tcall BIN_fnc_getIDWMapDrawColorSet\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getIDWMapDrawColorSet;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getIDWMapDrawColorSet` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getIDWMapDrawColorSet"
        },
        "configuration": {
            "label": "BIN_fnc_getIDWMapDrawColorSet",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tGets stored draw pattern index\n\n\tParameter(s):\n\t\tNONE\n\n\tReturns:\n\t\tNUMBER - draw pattern index (0..3)\n\t\tor\n\t\t-1 on error\n\t\t\n\tExample:\n\t\tcall BIN_fnc_getIDWMapDrawPatternIndex\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getIDWMapDrawPatternIndex;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getIDWMapDrawPatternIndex` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getIDWMapDrawPatternIndex"
        },
        "configuration": {
            "label": "BIN_fnc_getIDWMapDrawPatternIndex",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tReturns currently set IDWMap params\n\n\tParameter(s):\n\t\tNONE\n\n\tReturns:\n\t\tARRAY in format: [[mapMinX, mapMinY, mapMaxX, mapMaxY], idwCellSize, idwSpreadRadius, idwSpreadPower, curvePointsInterval, curvePointSpreadRadius] \n\t\tor \n\t\t[] on error\n\t\t\n\tExample:\n\t\tcall BIN_fnc_getIDWMapParams\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getIDWMapParams;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getIDWMapParams` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getIDWMapParams"
        },
        "configuration": {
            "label": "BIN_fnc_getIDWMapParams",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tReturns array with IDWMap data which is used for saving/loading\n\n\tParameter(s):\n\t\tNONE\n\n\tReturns:\n\t\tARRAY - save data\n\t\t\n\tExample:\n\t\tcall BIN_fnc_getIDWMapSaveData\n*/\n\n#define MAPDRAWPATTERNINDEX_DEFAULT 0\n#define MAPDRAWCOLORSET_DEFAULT [[0,0,0.514,0.7],[0,0,0.875,0.7],[0,0.247,1,0.7],[0,0.659,1,0.7],[0.035,1,0.961,0.7],[0.443,1,0.553,0.7],[0.843,1,0.153,0.7],[1,0.749,0,0.7],[1,0.357,0,0.7],[0.941,0,0,0.7],[0.522,0,0,0.7]]\n#define MAPDRAWIDC_DEFAULT 51\n\n// if the data was not yet set\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getIDWMapSaveData;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getIDWMapSaveData` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getIDWMapSaveData"
        },
        "configuration": {
            "label": "BIN_fnc_getIDWMapSaveData",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tGets static data from extension\n\n\tParameter(s):\n\t\tNONE\n\n\tReturns:\n\t\tARRAY in format:\n\t\t[\n\t\t\t[[x,y,strengh],[x,y,strengh],...], // data layer 0\n\t\t\t[[x,y,strengh],[x,y,strengh],...], // data layer 1\n\t\t\t...\n\t\t\t[[x,y,strengh],[x,y,strengh],...] // data layer N\n\t\t]\n\t\tor \n\t\t[] - on error\n\n\t\t\n\tExample:\n\t\tcall BIN_fnc_getIDWMapStaticDataLayers\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getIDWMapStaticDataLayers;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getIDWMapStaticDataLayers` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getIDWMapStaticDataLayers"
        },
        "configuration": {
            "label": "BIN_fnc_getIDWMapStaticDataLayers",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getLinkBudget;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getLinkBudget` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getLinkBudget"
        },
        "configuration": {
            "label": "BIN_fnc_getLinkBudget",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getLinkDir;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getLinkDir` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getLinkDir"
        },
        "configuration": {
            "label": "BIN_fnc_getLinkDir",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getLinkedAntennas`; -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getLinkedAntennas"
        },
        "configuration": {
            "label": "BIN_fnc_getLinkedAntennas",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getLinkStrength;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getLinkStrength` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getLinkStrength"
        },
        "configuration": {
            "label": "BIN_fnc_getLinkStrength",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getObjectAntennas;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getObjectAntennas` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getObjectAntennas"
        },
        "configuration": {
            "label": "BIN_fnc_getObjectAntennas",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tReturns bounding barrel of the given object\n\n\tParameter(s):\n\t\t0: OBJECT - object to measure\n\n\tReturns:\n\t\tARRAY in format [radius, height, offset]. Offset is negative if object Z position is higher than the lower bound\n\t\t\n\tExample:\n\t\tmyObj call BIN_fnc_getObjectBoundingBarrel\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getObjectBoundingBarrel;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getObjectBoundingBarrel` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getObjectBoundingBarrel"
        },
        "configuration": {
            "label": "BIN_fnc_getObjectBoundingBarrel",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getPatrolRoutes;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getPatrolRoutes` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getPatrolRoutes"
        },
        "configuration": {
            "label": "BIN_fnc_getPatrolRoutes",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getRadioConversation;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getRadioConversation` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getRadioConversation"
        },
        "configuration": {
            "label": "BIN_fnc_getRadioConversation",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getRecordedSignals;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getRecordedSignals` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getRecordedSignals"
        },
        "configuration": {
            "label": "BIN_fnc_getRecordedSignals",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\t\tGet soldier's role icon (e.g., sniper, machine-gunner, etc.)\n\n\tParameter(s):\n\t\t0: OBJECT\n\n\tReturns:\n\t\tSTRING - image path\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getRoleIcon;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getRoleIcon` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getRoleIcon"
        },
        "configuration": {
            "label": "BIN_fnc_getRoleIcon",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getRotation;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getRotation` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getRotation"
        },
        "configuration": {
            "label": "BIN_fnc_getRotation",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getSignalAge;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getSignalAge` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getSignalAge"
        },
        "configuration": {
            "label": "BIN_fnc_getSignalAge",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getSignalTypeClass;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getSignalTypeClass` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getSignalTypeClass"
        },
        "configuration": {
            "label": "BIN_fnc_getSignalTypeClass",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getSignalTypes;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getSignalTypes` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getSignalTypes"
        },
        "configuration": {
            "label": "BIN_fnc_getSignalTypes",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getSiteLayerEntities;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getSiteLayerEntities` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getSiteLayerEntities"
        },
        "configuration": {
            "label": "BIN_fnc_getSiteLayerEntities",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tReturns terrain objects of the given type for the given area dimensions\n\t\t\n\tParameter(s):\n\t\t0: ARRAY - area details in Area format (see BIS_fnc_getArea)\n\t\t1: ARRAY - types of terrain objects, for example [\"HOUSE\", \"TREE\"]\n\n\tReturns:\n\t\tARRAY of objects\n\t\t\n\tExample:\n\t\t[\"myArea\", [player, 100], [\"HOUSE\", \"TREE\"]] call BIN_fnc_getTerrainObjects\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getTerrainObjects;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getTerrainObjects` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getTerrainObjects"
        },
        "configuration": {
            "label": "BIN_fnc_getTerrainObjects",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tReturns TXScan angle\n\n\tParameter(s):\n\t\t0: STRING - scan name\n\t\t\n\tReturns:\n\t\tNUMBER - set cone angle or -1 on error\n\t\t\n\tExample:\n\t\t\"MyScan\" call BIN_fnc_getTXScanAngle\n\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getTXScanAngle;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getTXScanAngle` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getTXScanAngle"
        },
        "configuration": {
            "label": "BIN_fnc_getTXScanAngle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tReturns draw data for given TXScan\n\n\tParameter(s):\n\t\t0: STRING - scan name\n\n\tReturns:\n\t\tARRAY in format [iconData, polygonData, triangleData, rectangleData, isDefaultPolygon] where:\n\t\t\ticonData: ARRAY - position in format [x,y,0]\n\t\t\tpolygonData: ARRAY - array of polygon vertices, where each vertex is in format [x,y,0]\n\t\t\ttriangleData: ARRAY - array of triangle vrtices, where each vertex is in format [x,y,0] \n\t\t\trectangleData: ARRAY - bounding rectangle in format [center, a, b, angle]\n\t\t\tisDefaultPolygon: BOOL - if a scan polygon has not yet been calculated, this will be true\n\t\t\n\tExample:\n\t\t\"myScan\" call BIN_fnc_getTXScanDrawData\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getTXScanDrawData;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getTXScanDrawData` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getTXScanDrawData"
        },
        "configuration": {
            "label": "BIN_fnc_getTXScanDrawData",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tReturns current intersection polygon for given scan\n\n\tParameter(s):\n\t\t0: STRING - TXScan name\n\n\tReturns:\n\t\tARRAY - polygon points or [] on error\n\t\t\n\tExample:\n\t\t\"MyScan\" call BIN_fnc_getTXScanPolygon\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getTXScanPolygon;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getTXScanPolygon` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getTXScanPolygon"
        },
        "configuration": {
            "label": "BIN_fnc_getTXScanPolygon",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tReturns estimated area and perimeter of the given scan polygon \n\n\tParameter(s):\n\t\t0: STRING - TXScan name\n\n\tReturns:\n\t\tARRAY in format [area, perimeter]\n\t\t\n\tExample:\n\t\t\"MyScan\" call BIN_fnc_getTXScanPolygonDetails\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getTXScanPolygonDetails;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getTXScanPolygonDetails` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getTXScanPolygonDetails"
        },
        "configuration": {
            "label": "BIN_fnc_getTXScanPolygonDetails",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tGets stored TXScan transmitter position\n\n\tParameter(s):\n\t\t0: STRING - scan name\n\t\t\n\tReturns:\n\t\tARRAY - set transmitter position or [] on error\n\t\t\n\tExample:\n\t\t\"MyScan\" call BIN_fnc_setTXScanPosition\n\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getTXScanPosition;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getTXScanPosition` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getTXScanPosition"
        },
        "configuration": {
            "label": "BIN_fnc_getTXScanPosition",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tReturns stored TXScan precision\n\n\tParameter(s):\n\t\t0: STRING - scan name\n\t\t\n\tReturns:\n\t\tNUMBER - set cone precision or -1 on error\n\t\t\n\tExample:\n\t\t\"MyScan\" call BIN_fnc_getTXScanPrecision\n\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getTXScanPrecision;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getTXScanPrecision` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getTXScanPrecision"
        },
        "configuration": {
            "label": "BIN_fnc_getTXScanPrecision",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tReturns array with given TXScan data which is used for saving/loading\n\n\tParameter(s):\n\t\t0: STRING - TXScan name or \"\" to return all saved scan names\n\n\tReturns:\n\t\tARRAY - save data for given scan name \n\t\tor if argument was \"\"\n\t\tARRAY in format [allscannames, activeareaboundaries]\n\t\t\n\tExample:\n\t\t\"MyScan\" call BIN_fnc_getTXScanSaveData\n\t\t\"\" call BIN_fnc_getTXScanSaveData\n*/\n\n#define SAVEVAR_NAME \"BIN_fnc_TXScan_saveData\"\n#define IDD_DEFAULT 12\n#define IDC_DEFAULT 51\n</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getTXScanSaveData;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getTXScanSaveData` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getTXScanSaveData"
        },
        "configuration": {
            "label": "BIN_fnc_getTXScanSaveData",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tReturns currently set boundaries of active area\n\t\t\n\tParameter(s):\n\t\tNONE\n\n\tReturns:\n\t\tARRAY in format: [minX, minY, maxX, maxY] \n\t\tor \n\t\t[] on error\n\t\t\n\tExample:\n\t\tcall BIN_fnc_getTXScanWorldBounds\n*/</pre>\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_getTXScanWorldBounds;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_getTXScanWorldBounds` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_getTXScanWorldBounds"
        },
        "configuration": {
            "label": "BIN_fnc_getTXScanWorldBounds",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_gravityBurst;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_gravityBurst` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_gravityBurst"
        },
        "configuration": {
            "label": "BIN_fnc_gravityBurst",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_gravityCannon_01_AI\n*/</pre>\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_gravityCannon_01_ai`; -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_gravityCannon_01_ai"
        },
        "configuration": {
            "label": "BIN_fnc_gravityCannon_01_ai",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_grenadeThrowback\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_grenadeThrowback;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_grenadeThrowback` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_grenadeThrowback"
        },
        "configuration": {
            "label": "BIN_fnc_grenadeThrowback",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_hackAIDrone;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_hackAIDrone` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_hackAIDrone"
        },
        "configuration": {
            "label": "BIN_fnc_hackAIDrone",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\t\tShow hand-drawn bezier curve in the map\n\n\tParameter(s):\n\t\t0: STRING - Unique ID of the ellipse. When such ellipse already exists, it will override it.\n\t\t1: ARRAY - control points of bezier curve\n\t\t2: ARRAY - color in [r,g,b,a] format\n\t\t3: STRING - fill texture\n\t\t   BOOL - true for default pen-blue color, false for the same, but faded\n\n\t\tOptional:\n\t\t4: NUMBER or ARRAY: thickness\n\t\t5: ARRAY - random thickness offset in format [min,mid,max]\n\t\t6: NUMBER - number od drawing steps\n\n\tReturns:\n\t\tNOTHING\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_handDrawBezier;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_handDrawBezier` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_handDrawBezier"
        },
        "configuration": {
            "label": "BIN_fnc_handDrawBezier",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\t\tShow hand-drawn ellipse in the map\n\n\tParameter(s):\n\t\t0: STRING - Unique ID of the ellipse. When such ellipse already exists, it will override it.\n\t\t1: ARRAY - center position\n\t\t2: NUMBER - semi-major axis\n\t\t3: NUMBER - semi-minor axis\n\t\t4: NUMBER - angle\n\t\t5: ARRAY - color in [r,g,b,a] format\n\t\t6: STRING - fill texture\n\t\t   BOOL - true for default pen-blue color, false for the same, but faded\n\n\t\tOptional:\n\t\t7: NUMBER - radius coef\n\t\t8: NUMBER - length coef\n\t\t9: NUMBER or ARRAY: thickness\n\t\t10: ARRAY - radius curve\n\t\t11: BOOL - true if clockwise\n\t\t12: NUMBER - starting angle\n\t\t13: ARRAY - random thickness offset in format [min,mid,max]\n\t\t14: NUMBER - number od drawing steps\n\n\tReturns:\n\t\tNOTHING\n\n\tExamples:\n\t\t//--- Show an ellipse on player's position\n\t\t[\"test1\",position player,300,400,15] call BIN_fnc_handDrawEllipse;\n\n\t\t//--- Show the same ellipse, but faded\n\t\t[\"test1\",position player,300,400,15,nil,false] call BIN_fnc_handDrawEllipse;\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_handDrawEllipse;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_handDrawEllipse` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_handDrawEllipse"
        },
        "configuration": {
            "label": "BIN_fnc_handDrawEllipse",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_hasAntennaSignal;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_hasAntennaSignal` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_hasAntennaSignal"
        },
        "configuration": {
            "label": "BIN_fnc_hasAntennaSignal",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_inDangerZone;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_inDangerZone` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_inDangerZone"
        },
        "configuration": {
            "label": "BIN_fnc_inDangerZone",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_initAcctime;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_initAcctime` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_initAcctime"
        },
        "configuration": {
            "label": "BIN_fnc_initAcctime",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_initActors;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_initActors` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_initActors"
        },
        "configuration": {
            "label": "BIN_fnc_initActors",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_initAI;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_initAI` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_initAI"
        },
        "configuration": {
            "label": "BIN_fnc_initAI",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_initAIBase;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_initAIBase` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_initAIBase"
        },
        "configuration": {
            "label": "BIN_fnc_initAIBase",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_initAIDrone;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_initAIDrone` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_initAIDrone"
        },
        "configuration": {
            "label": "BIN_fnc_initAIDrone",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_initAISquad;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_initAISquad` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_initAISquad"
        },
        "configuration": {
            "label": "BIN_fnc_initAISquad",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_initAntennas;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_initAntennas` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_initAntennas"
        },
        "configuration": {
            "label": "BIN_fnc_initAntennas",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_initConstants;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_initConstants` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_initConstants"
        },
        "configuration": {
            "label": "BIN_fnc_initConstants",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>//--- Register RSC layers in the correct order (they are not serialized)\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_initCutLayers;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_initCutLayers` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_initCutLayers"
        },
        "configuration": {
            "label": "BIN_fnc_initCutLayers",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_initDiary;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_initDiary` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_initDiary"
        },
        "configuration": {
            "label": "BIN_fnc_initDiary",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_initDroneModule\n*/</pre>\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_initDroneModule;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_initDroneModule` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_initDroneModule"
        },
        "configuration": {
            "label": "BIN_fnc_initDroneModule",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>#define DEBUG\n#define GROUP\t(units player - [player])\n#define DAMAGE_COEF\t0.25\n#define DIS_LIMIT_SOFT\t400\n#define DIS_LIMIT_HARD\t600</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_initGroup;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_initGroup` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_initGroup"
        },
        "configuration": {
            "label": "BIN_fnc_initGroup",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_initHub;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_initHub` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_initHub"
        },
        "configuration": {
            "label": "BIN_fnc_initHub",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_initInspectableDiaryRecord;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_initInspectableDiaryRecord` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_initInspectableDiaryRecord"
        },
        "configuration": {
            "label": "BIN_fnc_initInspectableDiaryRecord",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>//--- Ignored in missions without special description.ext property\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_initInventory;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_initInventory` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_initInventory"
        },
        "configuration": {
            "label": "BIN_fnc_initInventory",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_initLocations;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_initLocations` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_initLocations"
        },
        "configuration": {
            "label": "BIN_fnc_initLocations",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_initMiniUGV;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_initMiniUGV` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_initMiniUGV"
        },
        "configuration": {
            "label": "BIN_fnc_initMiniUGV",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\t\tEnable scripted ET Mothership lights on baked memory points\n\t\tCreated lights can be retrieved via getVariable \"BIN_lights\" on the Mothership\n\n\tParameter(s):\n\t\t0: OBJECT - Mothership\n\n\tReturns:\n\t\tNOTHING\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_initMothershipLights;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_initMothershipLights` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_initMothershipLights"
        },
        "configuration": {
            "label": "BIN_fnc_initMothershipLights",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_initPersistentObjects;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_initPersistentObjects` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_initPersistentObjects"
        },
        "configuration": {
            "label": "BIN_fnc_initPersistentObjects",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>//--- Debug\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_initProbeMap;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_initProbeMap` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_initProbeMap"
        },
        "configuration": {
            "label": "BIN_fnc_initProbeMap",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_initPuzzle;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_initPuzzle` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_initPuzzle"
        },
        "configuration": {
            "label": "BIN_fnc_initPuzzle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_initQuests;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_initQuests` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_initQuests"
        },
        "configuration": {
            "label": "BIN_fnc_initQuests",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>#define BLEED_TIME\t\t160\n#define BLINK_DELAY_MAX\t\t20\n#define BLINK_TIME\t\t0.75\n</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_initRevive;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_initRevive` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_initRevive"
        },
        "configuration": {
            "label": "BIN_fnc_initRevive",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>#define FORMAT \"Map_%1_%2\"\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_initSideColors;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_initSideColors` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_initSideColors"
        },
        "configuration": {
            "label": "BIN_fnc_initSideColors",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>#define DEBUG\n#define AREA_BUFFER\t+200\n#define DEF_RADIUS\t500\n#define DEF_RADIUS_OUT\t550\n#define AREA_DEF\t[position _logic,DEF_RADIUS_OUT,DEF_RADIUS_OUT,0,false]\n</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_initSites;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_initSites` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_initSites"
        },
        "configuration": {
            "label": "BIN_fnc_initSites",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>//--- Obsolete, replace dby BIN_fnc_initQuests\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_initTasks;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_initTasks` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_initTasks"
        },
        "configuration": {
            "label": "BIN_fnc_initTasks",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_initTurret;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_initTurret` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_initTurret"
        },
        "configuration": {
            "label": "BIN_fnc_initTurret",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_initUAV;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_initUAV` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_initUAV"
        },
        "configuration": {
            "label": "BIN_fnc_initUAV",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_initUGV;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_initUGV` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_initUGV"
        },
        "configuration": {
            "label": "BIN_fnc_initUGV",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_inList;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_inList` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_inList"
        },
        "configuration": {
            "label": "BIN_fnc_inList",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_inRadioConversation;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_inRadioConversation` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_inRadioConversation"
        },
        "configuration": {
            "label": "BIN_fnc_inRadioConversation",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_inRadioConversationWith;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_inRadioConversationWith` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_inRadioConversationWith"
        },
        "configuration": {
            "label": "BIN_fnc_inRadioConversationWith",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_isAIBase;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_isAIBase` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_isAIBase"
        },
        "configuration": {
            "label": "BIN_fnc_isAIBase",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_isAntenna;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_isAntenna` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_isAntenna"
        },
        "configuration": {
            "label": "BIN_fnc_isAntenna",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_isAntennaBaked;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_isAntennaBaked` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_isAntennaBaked"
        },
        "configuration": {
            "label": "BIN_fnc_isAntennaBaked",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_isAntennaBroadcasting;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_isAntennaBroadcasting` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_isAntennaBroadcasting"
        },
        "configuration": {
            "label": "BIN_fnc_isAntennaBroadcasting",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_isAntennaJammed;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_isAntennaJammed` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_isAntennaJammed"
        },
        "configuration": {
            "label": "BIN_fnc_isAntennaJammed",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_isAntennaRevealed;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_isAntennaRevealed` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_isAntennaRevealed"
        },
        "configuration": {
            "label": "BIN_fnc_isAntennaRevealed",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_isAntennaSelected;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_isAntennaSelected` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_isAntennaSelected"
        },
        "configuration": {
            "label": "BIN_fnc_isAntennaSelected",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tReturns true and displays description of the error from extension if there was an error. \n\t\tWhen extension returns negative number (usually -1), it is considered an indication of some sort of error, \n\t\tin which case string output should contain the description of the error.\n\n\tParameter(s):\n\t\tExtension (arg version) output in format [<string>, <number>, <number>]\n\n\tReturns:\n\t\tBOOL - true if error\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_isExtensionError;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_isExtensionError` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_isExtensionError"
        },
        "configuration": {
            "label": "BIN_fnc_isExtensionError",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_isNull;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_isNull` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_isNull"
        },
        "configuration": {
            "label": "BIN_fnc_isNull",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_isPaused;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_isPaused` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_isPaused"
        },
        "configuration": {
            "label": "BIN_fnc_isPaused",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_isPausedInit;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_isPausedInit` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_isPausedInit"
        },
        "configuration": {
            "label": "BIN_fnc_isPausedInit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_isPuzzleReset;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_isPuzzleReset` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_isPuzzleReset"
        },
        "configuration": {
            "label": "BIN_fnc_isPuzzleReset",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_isPuzzleTerminated;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_isPuzzleTerminated` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_isPuzzleTerminated"
        },
        "configuration": {
            "label": "BIN_fnc_isPuzzleTerminated",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_isRadioHandshake;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_isRadioHandshake` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_isRadioHandshake"
        },
        "configuration": {
            "label": "BIN_fnc_isRadioHandshake",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_isRadioSilence;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_isRadioSilence` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_isRadioSilence"
        },
        "configuration": {
            "label": "BIN_fnc_isRadioSilence",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_joinAISquad;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_joinAISquad` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_joinAISquad"
        },
        "configuration": {
            "label": "BIN_fnc_joinAISquad",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_lightBurst;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_lightBurst` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_lightBurst"
        },
        "configuration": {
            "label": "BIN_fnc_lightBurst",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_list;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_list` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_list"
        },
        "configuration": {
            "label": "BIN_fnc_list",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tLoads IDWMap data from global variable 'BIN_fnc_IDWMap_saveData' into extension\n\n\tParameter(s):\n\t\tNONE\n\n\tReturns:\n\t\tBOOL - true on success\n\t\t\n\tExample:\n\t\tcall BIN_fnc_loadIDWMap\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_loadIDWMap;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_loadIDWMap` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_loadIDWMap"
        },
        "configuration": {
            "label": "BIN_fnc_loadIDWMap",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tLoads TXScan data from global saved variables into extension\n\n\tParameter(s):\n\t\tNONE\n\n\tReturns:\n\t\tBOOL - true on success\n\t\t\n\tExample:\n\t\tcall BIN_fnc_loadTXScanState\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_loadTXScanState;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_loadTXScanState` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_loadTXScanState"
        },
        "configuration": {
            "label": "BIN_fnc_loadTXScanState",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_markDangerZone;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_markDangerZone` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_markDangerZone"
        },
        "configuration": {
            "label": "BIN_fnc_markDangerZone",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tReturns array of booleans in place of passed positions, where true is free and false is possible collision\n\n\tParameter(s):\n\t\t0: STRING - area name\n\t\t1: ARRAY - bounding barrel in format [radius, height, offset]\n\t\t2: ARRAY - arrays of positions\n\n\tReturns:\n\t\tARRAY of booleans\n\t\t\n\tExample:\n\t\t[\"myArea\", [10,5,0], [[123,123,123],[456,456,456],...]] call BIN_fnc_markFreeAreaPositions\n*/</pre>\n\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_markFreeAreaPositions;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_markFreeAreaPositions` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_markFreeAreaPositions"
        },
        "configuration": {
            "label": "BIN_fnc_markFreeAreaPositions",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_matrixMultiply;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_matrixMultiply` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_matrixMultiply"
        },
        "configuration": {
            "label": "BIN_fnc_matrixMultiply",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_matrixTranspose;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_matrixTranspose` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_matrixTranspose"
        },
        "configuration": {
            "label": "BIN_fnc_matrixTranspose",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_matterBallDestruction\n\tAlien Module destruction\n*/</pre>\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_matterballDestruction`; -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_matterballDestruction"
        },
        "configuration": {
            "label": "BIN_fnc_matterballDestruction",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_matterBallEffects\n\n\tAlien Matter Ball decaying effects\n\n\ta: reyhard\n*/</pre>\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_matterballEffects`; -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_matterballEffects"
        },
        "configuration": {
            "label": "BIN_fnc_matterballEffects",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_matterCollectionFX\n*/</pre>\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_matterCollectionFX`; -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_matterCollectionFX"
        },
        "configuration": {
            "label": "BIN_fnc_matterCollectionFX",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_missileDeflection`; -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_missileDeflection"
        },
        "configuration": {
            "label": "BIN_fnc_missileDeflection",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_missileSwarm\n*/</pre>\n{{Wiki|placeholder}} **Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_missileSwarm`; -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_missileSwarm"
        },
        "configuration": {
            "label": "BIN_fnc_missileSwarm",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_moduleAntenna` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_moduleAntenna"
        },
        "configuration": {
            "label": "BIN_fnc_moduleAntenna",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tEnables CBRN systems in a scenario (not MP-compatible!).\n\tNOTE: Module / function set not robust nor completed - not recommended for usage at this stage!\n\n\tParameter(s):\n\n\tReturns:\n\tBOOL\n*/</pre>\n\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_moduleCBRN` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_moduleCBRN"
        },
        "configuration": {
            "label": "BIN_fnc_moduleCBRN",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_moduleChargeSequence` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_moduleChargeSequence"
        },
        "configuration": {
            "label": "BIN_fnc_moduleChargeSequence",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>#define AREA_BUFFER\t+50</pre>\n\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_moduleDangerZone` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_moduleDangerZone"
        },
        "configuration": {
            "label": "BIN_fnc_moduleDangerZone",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_moduleFaradayCage` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_moduleFaradayCage"
        },
        "configuration": {
            "label": "BIN_fnc_moduleFaradayCage",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_moduleGravityAnomaly` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_moduleGravityAnomaly"
        },
        "configuration": {
            "label": "BIN_fnc_moduleGravityAnomaly",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_moduleMovementGrid` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_moduleMovementGrid"
        },
        "configuration": {
            "label": "BIN_fnc_moduleMovementGrid",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_modulePointOfInterest` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_modulePointOfInterest"
        },
        "configuration": {
            "label": "BIN_fnc_modulePointOfInterest",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_moduleSimpleObject` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_moduleSimpleObject"
        },
        "configuration": {
            "label": "BIN_fnc_moduleSimpleObject",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_moduleTravel` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_moduleTravel"
        },
        "configuration": {
            "label": "BIN_fnc_moduleTravel",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_moveAI` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_moveAI"
        },
        "configuration": {
            "label": "BIN_fnc_moveAI",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_moveAIReinforcements` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_moveAIReinforcements"
        },
        "configuration": {
            "label": "BIN_fnc_moveAIReinforcements",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_moveInit` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_moveInit"
        },
        "configuration": {
            "label": "BIN_fnc_moveInit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_moveModule` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_moveModule"
        },
        "configuration": {
            "label": "BIN_fnc_moveModule",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_moveObject` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_moveObject"
        },
        "configuration": {
            "label": "BIN_fnc_moveObject",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_moveTo` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_moveTo"
        },
        "configuration": {
            "label": "BIN_fnc_moveTo",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_moveToModelSpace` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_moveToModelSpace"
        },
        "configuration": {
            "label": "BIN_fnc_moveToModelSpace",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_moveToOnArc\n\n*/</pre>\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_moveToOnArc` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_moveToOnArc"
        },
        "configuration": {
            "label": "BIN_fnc_moveToOnArc",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_onPuzzleCompleted` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_onPuzzleCompleted"
        },
        "configuration": {
            "label": "BIN_fnc_onPuzzleCompleted",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_onPuzzleProgress` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_onPuzzleProgress"
        },
        "configuration": {
            "label": "BIN_fnc_onPuzzleProgress",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_onPuzzleReset` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_onPuzzleReset"
        },
        "configuration": {
            "label": "BIN_fnc_onPuzzleReset",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_onPuzzleStepCompleted` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_onPuzzleStepCompleted"
        },
        "configuration": {
            "label": "BIN_fnc_onPuzzleStepCompleted",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_onPuzzleTerminated` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_onPuzzleTerminated"
        },
        "configuration": {
            "label": "BIN_fnc_onPuzzleTerminated",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_persistentVariables` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_persistentVariables"
        },
        "configuration": {
            "label": "BIN_fnc_persistentVariables",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_playAlternatingSound` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_playAlternatingSound"
        },
        "configuration": {
            "label": "BIN_fnc_playAlternatingSound",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>//--- Disabled, campaign is now configured as traditional campaign</pre>\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_playMission` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_playMission"
        },
        "configuration": {
            "label": "BIN_fnc_playMission",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_playPatrolAnim` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_playPatrolAnim"
        },
        "configuration": {
            "label": "BIN_fnc_playPatrolAnim",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_playPatrolAnimDone` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_playPatrolAnimDone"
        },
        "configuration": {
            "label": "BIN_fnc_playPatrolAnimDone",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_postInit` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_postInit"
        },
        "configuration": {
            "label": "BIN_fnc_postInit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_preInit` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_preInit"
        },
        "configuration": {
            "label": "BIN_fnc_preInit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_preInitEM` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_preInitEM"
        },
        "configuration": {
            "label": "BIN_fnc_preInitEM",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tShould be called from preInit, contains saving/loading functions as well as default initisalization\n\n\tParameter(s):\n\t\t0: STRING - preInit pass through\n\n\tReturns:\n\t\tNOTHING\n\t\t\n\tExample: \n\t\t// from preinit script\n\t\tcall BIN_fnc_preInitIDWMap\n*/</pre>\n\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_preInitIDWMap` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_preInitIDWMap"
        },
        "configuration": {
            "label": "BIN_fnc_preInitIDWMap",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tShould be called from preInit, contains saving/loading functions as well as default initisalization\n\n\tParameter(s):\n\t\t0: STRING - \"preInit\"\n\n\tReturns:\n\t\tNOTHING\n\t\t\n\tExample: \n\t\t// from preinit script\n\t\tcall BIN_fnc_preInitTXScan\n*/</pre>\n\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_preInitTXScan` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_preInitTXScan"
        },
        "configuration": {
            "label": "BIN_fnc_preInitTXScan",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_probeAnim\n\n\tExample usage:\n\t\t[probe,1] call BIN_fnc_probeAnim - expand probe core\n\t\t[probe,0] call BIN_fnc_probeAnim - retract probe core\n*/</pre>\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_probeAnim` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_probeAnim"
        },
        "configuration": {
            "label": "BIN_fnc_probeAnim",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_probeCoreDelete` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_probeCoreDelete"
        },
        "configuration": {
            "label": "BIN_fnc_probeCoreDelete",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_probeCoreEffects\n\t[probeCore] call BIN_fnc_probeCoreEffects\n*/</pre>\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_probeCoreEffects` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_probeCoreEffects"
        },
        "configuration": {
            "label": "BIN_fnc_probeCoreEffects",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_probeCoreInit` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_probeCoreInit"
        },
        "configuration": {
            "label": "BIN_fnc_probeCoreInit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_probeCoreLegsDestroyed\n*/</pre>\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_probeCoreLegsDestroyed` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_probeCoreLegsDestroyed"
        },
        "configuration": {
            "label": "BIN_fnc_probeCoreLegsDestroyed",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_probeCoreUpdate` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_probeCoreUpdate"
        },
        "configuration": {
            "label": "BIN_fnc_probeCoreUpdate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_probeDelete\n*/</pre>\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_probeDelete` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_probeDelete"
        },
        "configuration": {
            "label": "BIN_fnc_probeDelete",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_probeHitpoint\n\n\tSpawns particle effects & sound\n\n\tFunction is connected to probe hitpoint and can be also manually triggered via calling following code:\n\t\t* [cursorObject,1,true] call BIN_fnc_probeHitpoint - destroy hitpoint with index 1\n*/</pre>\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_probeHitpoint` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_probeHitpoint"
        },
        "configuration": {
            "label": "BIN_fnc_probeHitpoint",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_probeVeinHitpoint\n\n\tAnimate vein & spawn sound\n\n\tInput:\n\t\tDammaged EH\n*/</pre>\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_probeVeinHitpoint` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_probeVeinHitpoint"
        },
        "configuration": {
            "label": "BIN_fnc_probeVeinHitpoint",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_probingArm_fired\n*/</pre>\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_ProbingArm_fired;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_ProbingArm_fired` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_ProbingArm_fired"
        },
        "configuration": {
            "label": "BIN_fnc_ProbingArm_fired",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_probingBeam_fired\n*/</pre>\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_ProbingBeam_fired;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_ProbingBeam_fired` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_ProbingBeam_fired"
        },
        "configuration": {
            "label": "BIN_fnc_ProbingBeam_fired",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIS_fnc_ProbingBeam_sendData\n*/</pre>\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIN_fnc_ProbingBeam_sendData;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIN_fnc_ProbingBeam_sendData` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_ProbingBeam_sendData"
        },
        "configuration": {
            "label": "BIN_fnc_ProbingBeam_sendData",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_prototypeCannon_01_ai` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_prototypeCannon_01_ai"
        },
        "configuration": {
            "label": "BIN_fnc_prototypeCannon_01_ai",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_prototypeCannon_01_player` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_prototypeCannon_01_player"
        },
        "configuration": {
            "label": "BIN_fnc_prototypeCannon_01_player",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_prototypeCannon_01_slaved` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_prototypeCannon_01_slaved"
        },
        "configuration": {
            "label": "BIN_fnc_prototypeCannon_01_slaved",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_puzzle_mole` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_puzzle_mole"
        },
        "configuration": {
            "label": "BIN_fnc_puzzle_mole",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_puzzle_outlier` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_puzzle_outlier"
        },
        "configuration": {
            "label": "BIN_fnc_puzzle_outlier",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_reactRadio` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_reactRadio"
        },
        "configuration": {
            "label": "BIN_fnc_reactRadio",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_reactRadio_Base` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_reactRadio_Base"
        },
        "configuration": {
            "label": "BIN_fnc_reactRadio_Base",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_reactRadio_Player` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_reactRadio_Player"
        },
        "configuration": {
            "label": "BIN_fnc_reactRadio_Player",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_reactRadio_Squad` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_reactRadio_Squad"
        },
        "configuration": {
            "label": "BIN_fnc_reactRadio_Squad",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\t\tAdd signal to the library.\n\n\tParameter(s):\n\t\t0: STRING - antenna ID (its currently transmitted signal will be used) or signal class from CfgContact >> Signals\n\n\tReturns:\n\t\tBOOL - true if added\n*/</pre>\n\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_recordSignal` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_recordSignal"
        },
        "configuration": {
            "label": "BIN_fnc_recordSignal",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_resetPuzzle` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_resetPuzzle"
        },
        "configuration": {
            "label": "BIN_fnc_resetPuzzle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_revealAntenna` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_revealAntenna"
        },
        "configuration": {
            "label": "BIN_fnc_revealAntenna",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_revealFrequency` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_revealFrequency"
        },
        "configuration": {
            "label": "BIN_fnc_revealFrequency",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tSaves IDWMap data into global variable 'BIN_fnc_IDWMap_saveData' so that it can be serialised and then loaded from game save when needed\n\n\tParameter(s):\n\t\tNONE\n\n\tReturns:\n\t\tBOOL - true on success\n\t\t\n\tExample:\n\t\tcall BIN_fnc_saveIDWMap\n*/</pre>\n\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_saveIDWMap` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_saveIDWMap"
        },
        "configuration": {
            "label": "BIN_fnc_saveIDWMap",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tSaves TXScan data into global variables so that it can be serialised and then loaded from game save when needed\n\n\tParameter(s):\n\t\tNONE\n\n\tReturns:\n\t\tBOOL - true on success\n\t\t\n\tExample:\n\t\tcall BIN_fnc_saveTXScanState\n*/</pre>\n\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_saveTXScanState` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_saveTXScanState"
        },
        "configuration": {
            "label": "BIN_fnc_saveTXScanState",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns the value of <sqf inline>missionNamespace getVariable [\"BIN_enableSaving\", true].\n**Arma**: 3contact",
            "examples": [
                {
                    "text": "```sqf\ncall BIN_fnc_savingEnabled == (missionNamespace getVariable [\"BIN_enableSaving\", true]); // true\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIN_fnc_savingEnabled`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_savingEnabled"
        },
        "configuration": {
            "label": "BIN_fnc_savingEnabled",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_scan` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_scan"
        },
        "configuration": {
            "label": "BIN_fnc_scan",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_scanObject` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_scanObject"
        },
        "configuration": {
            "label": "BIN_fnc_scanObject",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tIntersects current scan polygon (or map square if no scan exists) with triangle originated from RX position\n\t\tand returns the triangle\n\n\tParameter(s):\n\t\t0: STRING - scan name\n\t\t1: ARRAY (Optional) - RX position. Default: position player\n\n\tReturns:\n\t\tARRAY - triangle used for intersection\n\t\t\n\tExample:\n\t\t[\"MyScan\", position player] call BIN_fnc_scanTX\n*/</pre>\n\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_scanTX` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_scanTX"
        },
        "configuration": {
            "label": "BIN_fnc_scanTX",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_selectDiaryCategory` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_selectDiaryCategory"
        },
        "configuration": {
            "label": "BIN_fnc_selectDiaryCategory",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_selectDiaryRecord` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_selectDiaryRecord"
        },
        "configuration": {
            "label": "BIN_fnc_selectDiaryRecord",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_selectDiaryTask` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_selectDiaryTask"
        },
        "configuration": {
            "label": "BIN_fnc_selectDiaryTask",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_sendPing` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_sendPing"
        },
        "configuration": {
            "label": "BIN_fnc_sendPing",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_sendRadioSignal` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_sendRadioSignal"
        },
        "configuration": {
            "label": "BIN_fnc_sendRadioSignal",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setAISquadID` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setAISquadID"
        },
        "configuration": {
            "label": "BIN_fnc_setAISquadID",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setAntenna` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setAntenna"
        },
        "configuration": {
            "label": "BIN_fnc_setAntenna",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setAntennaAngle` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setAntennaAngle"
        },
        "configuration": {
            "label": "BIN_fnc_setAntennaAngle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setAntennaCanReveal` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setAntennaCanReveal"
        },
        "configuration": {
            "label": "BIN_fnc_setAntennaCanReveal",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setAntennaClass` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setAntennaClass"
        },
        "configuration": {
            "label": "BIN_fnc_setAntennaClass",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setAntennaFrequency` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setAntennaFrequency"
        },
        "configuration": {
            "label": "BIN_fnc_setAntennaFrequency",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setAntennaFrequencyFromList` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setAntennaFrequencyFromList"
        },
        "configuration": {
            "label": "BIN_fnc_setAntennaFrequencyFromList",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setAntennaGain` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setAntennaGain"
        },
        "configuration": {
            "label": "BIN_fnc_setAntennaGain",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setAntennaName` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setAntennaName"
        },
        "configuration": {
            "label": "BIN_fnc_setAntennaName",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setAntennaObject` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setAntennaObject"
        },
        "configuration": {
            "label": "BIN_fnc_setAntennaObject",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setAntennaPower` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setAntennaPower"
        },
        "configuration": {
            "label": "BIN_fnc_setAntennaPower",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setAntennaRevealValue` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setAntennaRevealValue"
        },
        "configuration": {
            "label": "BIN_fnc_setAntennaRevealValue",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setAntennaScans` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setAntennaScans"
        },
        "configuration": {
            "label": "BIN_fnc_setAntennaScans",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setAntennaSensitivity` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setAntennaSensitivity"
        },
        "configuration": {
            "label": "BIN_fnc_setAntennaSensitivity",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setAntennaType` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setAntennaType"
        },
        "configuration": {
            "label": "BIN_fnc_setAntennaType",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>\n#define DEBUG\n#define HISTORY_CAPACITY\t5\n#define TERMINATE_DEFAULT\t1\n#define TERMINATE_INTERRUPT\t2\n#define BEHAVIOR_PATH \"a3\\Functions_F_Contact\\Behavior\\Drone\\\"\n</pre>\n\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setBehavior` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setBehavior"
        },
        "configuration": {
            "label": "BIN_fnc_setBehavior",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_setBehaviorCoef\n\tSet behavior coefficients\n\n\tExamples:\n\n\t\t[bin_drone,\"gravityCannon\",0] call BIN_fnc_setBehaviorCoef\n*/</pre>\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setBehaviorCoef` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setBehaviorCoef"
        },
        "configuration": {
            "label": "BIN_fnc_setBehaviorCoef",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setBreathe` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setBreathe"
        },
        "configuration": {
            "label": "BIN_fnc_setBreathe",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setCurrentSignal` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setCurrentSignal"
        },
        "configuration": {
            "label": "BIN_fnc_setCurrentSignal",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_setCustomSoundController\n\n\ta: reyhard\n*/</pre>\n\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setCustomSoundController` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setCustomSoundController"
        },
        "configuration": {
            "label": "BIN_fnc_setCustomSoundController",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setDiaryRecord` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setDiaryRecord"
        },
        "configuration": {
            "label": "BIN_fnc_setDiaryRecord",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_setDroneModuleParams\n*/</pre>\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setDroneModuleParams` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setDroneModuleParams"
        },
        "configuration": {
            "label": "BIN_fnc_setDroneModuleParams",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_setDroneModuleTarget\n\n*/</pre>\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setDroneModuleTarget` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setDroneModuleTarget"
        },
        "configuration": {
            "label": "BIN_fnc_setDroneModuleTarget",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setGravityPulse` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setGravityPulse"
        },
        "configuration": {
            "label": "BIN_fnc_setGravityPulse",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>\n/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tSets map draw color set\n\n\tParameter(s):\n\t\tARRAY - array of colors from 1 to 11\n\n\tReturns:\n\t\tBOOL - true on success\n\t\t\n\tExample:\n\t\t// set 3 color drawing on the fly\n\t\t[[0,0,0.514,0.7],[0.843,1,0.153,0.7],[0.522,0,0,0.7]] call BIN_fnc_setIDWMapDrawColorSet;\n\t\t// set from config\n\t\t[] call BIN_fnc_setIDWMapDrawColorSet;\n*/\n</pre>\n\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setIDWMapDrawColorSet` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setIDWMapDrawColorSet"
        },
        "configuration": {
            "label": "BIN_fnc_setIDWMapDrawColorSet",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tSets map draw pattern\n\n\tParameter(s):\n\t\tNUMBER - pattern: 0 - triangles, 1 - diamonds, 2 - squares, 3 - diamonds overlapped\n\n\tReturns:\n\t\tBOOL - true on success\n\t\t\n\tExample:\n\t\t// set on the fly\n\t\t3 call BIN_fnc_setIDWMapDrawPatternIndex; OR [3] call BIN_fnc_setIDWMapDrawPatternIndex;\n\t\t// set from config\n\t\tcall BIN_fnc_setIDWMapDrawPatternIndex; OR [] call BIN_fnc_setIDWMapDrawPatternIndex;\n*/\n</pre>\n\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setIDWMapDrawPatternIndex` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setIDWMapDrawPatternIndex"
        },
        "configuration": {
            "label": "BIN_fnc_setIDWMapDrawPatternIndex",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tResets extension data, sets IDWMap params from argument, from config or default\n\t\t*** This function must be called before any data is added to the IDWMap ***\n\n\tParameter(s):\n\t\t0: ARRAY - (Optional) areaParams in format:\n\t\t\t0: NUMBER - minMapX\n\t\t\t1: NUMBER - minMapY\n\t\t\t2: NUMBER - maxMapX\n\t\t\t3: NUMBER - maxMapY\n\t\t\tDefault: [0, 0, worldSize, worldSize]\n\t\t1: NUMBER (Optional) - idwCellSize. Default: 20\n\t\t2: NUMBER (Optional) - idwSpreadRadius. Default: 200\n\t\t3: NUMBER (Optional) - idwSpreadPower. Default: 2.0\n\t\t4: NUMBER (Optional) - curvePointsInterval. Default: 20\n\t\t5: NUMBER (Optional) - curvePointSpreadRadius. Default: idwSpreadRadius\n\n\tReturns:\n\t\tBOOL - true on success\n\t\t\n\tExample:\n\t\tcall BIN_fnc_setIDWMapParams\n*/</pre>\n\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setIDWMapParams` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setIDWMapParams"
        },
        "configuration": {
            "label": "BIN_fnc_setIDWMapParams",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tSets static data for extension use from argument or config \"CfgIDWMap\"\n\n\tParameter(s):\n\t\tARRAY (optional) - static data in format:\n\t\t[\n\t\t\t[[x,y,strengh],[x,y,strengh],...], // data layer 0\n\t\t\t[[x,y,strengh],[x,y,strengh],...], // data layer 1\n\t\t\t...\n\t\t\t[[x,y,strengh],[x,y,strengh],...] // data layer N\n\t\t]\n\n\tReturns:\n\t\tBOOL - true on success\n\t\t\n\tExample:\n\t\tcall BIN_fnc_setIDWMapStaticDataLayers\n*/</pre>\n\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setIDWMapStaticDataLayers` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setIDWMapStaticDataLayers"
        },
        "configuration": {
            "label": "BIN_fnc_setIDWMapStaticDataLayers",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setModuleSpeed` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setModuleSpeed"
        },
        "configuration": {
            "label": "BIN_fnc_setModuleSpeed",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setMoveProperties` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setMoveProperties"
        },
        "configuration": {
            "label": "BIN_fnc_setMoveProperties",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setObjectGrid` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setObjectGrid"
        },
        "configuration": {
            "label": "BIN_fnc_setObjectGrid",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setPlayerSelectedBand` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setPlayerSelectedBand"
        },
        "configuration": {
            "label": "BIN_fnc_setPlayerSelectedBand",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\t\tAdd point of interest shown in the map\n\n\tParameter(s):\n\t\t0: STRING - unique ID of the point\n\t\t1:\n\t\t\tBOOL - true if the point is completed (shown faded in the map)\n\t\t\tNUMBER - status, can be:\n\t\t\t\t-1: dormant, will be activated when player gets close\n\t\t\t\t 0: shown, but not completed\n\t\t\t\t+1: completed\n\t\t2: ARRAY - position\n\t\t3: ARRAY - area in format [width,height,angle,isRectangle]\n\t\t4: STRING - type, can be \"Unknown\" or \"Warning\" (default: \"Unknown\")\n\t\t5: STRING - color, can be \"Black\", \"Blue\" or \"Red\" (default: \"Black\")\n\n\t\tor\n\n\t\t0: OBJECT - \"Point of interest\" module\n\n\tReturns:\n\t\tSTRING - ID of the point\n\n\tExamples:\n\n\t\t//--- Activate existing module\n\t\t_myID = myModule call BIN_fnc_setPointOfInterest;\n\n\t\t//--- Mark POI as completed\n\t\t[_myID,true] call BIN_fnc_setPointOfInterest;\n\n\t\t//--- Set custom POI\n\t\t[\"myID\",false,position myObject,[50,50,0,false],\"Warning\",\"Red\"] call BIN_fnc_setPointOfInterest;\n\n\t\t//--- Set custom POI using default type and color\n\t\t[\"myID\",false,position myObject,[50,50,0,false]] call BIN_fnc_setPointOfInterest;\n*/\n</pre>\n\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setPointOfInterest` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setPointOfInterest"
        },
        "configuration": {
            "label": "BIN_fnc_setPointOfInterest",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setRadioConversation` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setRadioConversation"
        },
        "configuration": {
            "label": "BIN_fnc_setRadioConversation",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setRadioHandshake` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setRadioHandshake"
        },
        "configuration": {
            "label": "BIN_fnc_setRadioHandshake",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setRadioSilence` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setRadioSilence"
        },
        "configuration": {
            "label": "BIN_fnc_setRadioSilence",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tInput:\n\t\t0: _unit [object] - Name of unit (works only with man type units)\n\t\t1: _force [vector] - Amount of force that will be applied to colliding object\n\t\t2: _position [string] (optional) - Name of selection from which it will try to calculate center point (default: spine1)\n\tUsage:\n\t[player,[0,100,0]] call BIN_fnc_setRagdoll -\n*/</pre>\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setRagdoll` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setRagdoll"
        },
        "configuration": {
            "label": "BIN_fnc_setRagdoll",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>#define DEBUG\n#define ALPHA_ON\t1.0\n#define ALPHA_OFF\t0.4\n#define DRAW(SHOW)\\\n\t_color = [[1,0,0,1],[0,1,0,1],[0,0,1,1],[1,1,0,1],[1,0,1,1],[0,1,1,1],[1,0.5,0,1]] select ((_logic getvariable [\"#index\",0]) % 7);\\\n\tif !(SHOW) then {_color set [3,0.4];};\\\n\t_drawIcon = [\"\\a3\\Ui_f\\data\\Map\\LocationTypes\\borderCrossing_CA.paa\",_color,position _logic,0.75,0.75,0,_class,2,0.04,\"RobotoCondensed\",\"right\"];\\\n\t[\"bin_diagSites\",_class,\"icon\",[_drawIcon]] call BIN_fnc_debugDraw;\\\n\t_isRectangle = false;\\\n\t_drawArea = if (SHOW) then {\\\n\t\t_areaOut = _logic getvariable [\"areaOut\",[position _logic,0,0,0,false]];\\\n\t\t_isRectangle = _areaOut select 4;\\\n\t\t[_areaOut select 0,_areaOut select 1,_areaOut select 2,_areaOut select 3,_color,\"\"]\\\n\t} else {\\\n\t\t_areaIn = _logic getvariable [\"areaIn\",[position _logic,0,0,0,false]];\\\n\t\t_isRectangle = _areaIn select 4;\\\n\t\t[_areaIn select 0,_areaIn select 1,_areaIn select 2,_areaIn select 3,_color,\"\"]\\\n\t};\\\n\t[\"bin_diagSites\",_class,if (_isRectangle) then {\"rectangle\"} else {\"ellipse\"},[_drawArea]] call BIN_fnc_debugDraw;\n\n#define VAR_IGNORE\t\"$i\"\n#define VAR_KILL\t\"$k\"\n#define VAR_VISITED\t\"$v\"\n#define VAR_SPAWNED\t\"#spawned\"</pre>\n\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setSite` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setSite"
        },
        "configuration": {
            "label": "BIN_fnc_setSite",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setSpectrumAnalyzer` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setSpectrumAnalyzer"
        },
        "configuration": {
            "label": "BIN_fnc_setSpectrumAnalyzer",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIN_fnc_setTargetWeight\n\tSet target priroty which is used later by BIN_fnc_findTargetWeight function to find target.\n\n\tInput:\n\t\t0:\n\t\t\t_input - Unit, vehicle, group or side.\n\t\t1:\n\t\t\t_value - scalar above 0 - weight which is later used by selectRandomWeighted script command. Values equal or less than 0 are excluded from target selection\n\n\tExamples:\n\n\t\t[west,0] call BIN_fnc_setTargetWeight - all units from side \"west\" will be ignored by targeting system\n\t\t[player,10] call BIN_fnc_setTargetWeight - Increase player chance of being targeted by drone weapons\n\t\t[bis_car,0] call BIN_fnc_setTargetWeight - Vehicle & it is crew will be ignored by targeting system\n*/</pre>\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setTargetWeight` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setTargetWeight"
        },
        "configuration": {
            "label": "BIN_fnc_setTargetWeight",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tSets TXScan angle\n\n\tParameter(s):\n\t\t0: STRING - scan name\n\t\t1: NUMBER - cone angle\n\t\t\n\tReturns:\n\t\tBOOL - true on success\n\t\t\n\tExample:\n\t\t[\"MyScan\", 45] call BIN_fnc_setTXScanAngle\n\n*/</pre>\n\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setTXScanAngle` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setTXScanAngle"
        },
        "configuration": {
            "label": "BIN_fnc_setTXScanAngle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tPre-sets intersection polygon for given scan. Can only be done with newly created scans since once the first scan is made, the polygon cannot be overwritten\n\n\tParameter(s):\n\t\t0: STRING - TXScan name\n\t\t1: ARRAY - polygon points\n\n\tReturns:\n\t\tBOOL - false on error\n\t\t\n\tExample:\n\t\t[\"MyScan\",[p1,p2,p3...]] call BIN_fnc_setTXScanPolygon\n*/</pre>\n\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setTXScanPolygon` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setTXScanPolygon"
        },
        "configuration": {
            "label": "BIN_fnc_setTXScanPolygon",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tSets TXScan transmitter position\n\n\tParameter(s):\n\t\t0: STRING - scan name\n\t\t1: ARRAY - transmitter position\n\t\t\n\tReturns:\n\t\tBOOL - true on success\n\t\t\n\tExample:\n\t\t[\"MyScan\", position player] call BIN_fnc_setTXScanPosition\n\n*/</pre>\n\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setTXScanPosition` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setTXScanPosition"
        },
        "configuration": {
            "label": "BIN_fnc_setTXScanPosition",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tSets TXScan precision\n\n\tParameter(s):\n\t\t0: STRING - scan name\n\t\t1: NUMBER - cone precision\n\t\t\n\tReturns:\n\t\tBOOL - true on success\n\t\t\n\tExample:\n\t\t[\"MyScan\", 0.1] call BIN_fnc_setTXScanPrecision\n\n*/</pre>\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setTXScanPrecision` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setTXScanPrecision"
        },
        "configuration": {
            "label": "BIN_fnc_setTXScanPrecision",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tSets map bounds in which scans could be carried out. Default [0,0,worldSize,worldSize]\n\n\tParameter(s):\n\t\t0: NUMBER - minX\n\t\t1: NUMBER - minY\n\t\t2: NUMBER - maxX\n\t\t3: NUMBER - maxY\n\t\t\n\t\tor [] to use config values or default\n\n\tReturns:\n\t\tBOOL - true on success\n\t\t\n\tExample:\n\t\t[0,0,worldSize,worldSize] call BIN_fnc_setTXScanWorldBounds\n\t\t[] call BIN_fnc_setTXScanWorldBounds\n*/\n</pre>\n\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_setTXScanWorldBounds` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_setTXScanWorldBounds"
        },
        "configuration": {
            "label": "BIN_fnc_setTXScanWorldBounds",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_showAntennaIcon` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_showAntennaIcon"
        },
        "configuration": {
            "label": "BIN_fnc_showAntennaIcon",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_showAntennaIcons` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_showAntennaIcons"
        },
        "configuration": {
            "label": "BIN_fnc_showAntennaIcons",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_showCurrentTask` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_showCurrentTask"
        },
        "configuration": {
            "label": "BIN_fnc_showCurrentTask",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\t\tShow or hide horizontal compass\n\n\tParameter(s):\n\t\t0: BOOL - true to show, false to hide\n\n\tReturns:\n\t\tNOTHING\n*/</pre>\n\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_showHorizontalCompass` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_showHorizontalCompass"
        },
        "configuration": {
            "label": "BIN_fnc_showHorizontalCompass",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\t\tSelect which maps will be available\n\n\tParameter(s):\n\t\t0: NUMBER - mode, can be:\n\t\t\t0 - all options available (default)\n\t\t\t1 - probe map not available\n\t\t\t2 - no options available (i.e., only main map is shown)\n\n\tReturns:\n\t\tNOTHING\n*/\n</pre>\n\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_showMapOptions` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_showMapOptions"
        },
        "configuration": {
            "label": "BIN_fnc_showMapOptions",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_showPlayerSpectrumAnalyzer` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_showPlayerSpectrumAnalyzer"
        },
        "configuration": {
            "label": "BIN_fnc_showPlayerSpectrumAnalyzer",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_showSimpleNotification` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_showSimpleNotification"
        },
        "configuration": {
            "label": "BIN_fnc_showSimpleNotification",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_showSpectrumAnalyzer` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_showSpectrumAnalyzer"
        },
        "configuration": {
            "label": "BIN_fnc_showSpectrumAnalyzer",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_showSpectrumAnalyzerGUI` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_showSpectrumAnalyzerGUI"
        },
        "configuration": {
            "label": "BIN_fnc_showSpectrumAnalyzerGUI",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_showSpectrumAnalyzerMuzzle` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_showSpectrumAnalyzerMuzzle"
        },
        "configuration": {
            "label": "BIN_fnc_showSpectrumAnalyzerMuzzle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_showSpectrumAnalyzerPiP` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_showSpectrumAnalyzerPiP"
        },
        "configuration": {
            "label": "BIN_fnc_showSpectrumAnalyzerPiP",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_showVision` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_showVision"
        },
        "configuration": {
            "label": "BIN_fnc_showVision",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>//#define TIME_SKIP\t1.4 // Apex\n#define TIME_SKIP\t0.5\n\n</pre>{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_skip` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_skip"
        },
        "configuration": {
            "label": "BIN_fnc_skip",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_soundDrone` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_soundDrone"
        },
        "configuration": {
            "label": "BIN_fnc_soundDrone",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_switchMap` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_switchMap"
        },
        "configuration": {
            "label": "BIN_fnc_switchMap",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\t\tReturn if task is active, i.e., added to player, but not yet completed.\n\t\tOnly in this state can player assign it.\n\n\tParameter(s):\n\t\t0: STRING - task ID\n\n\tReturns:\n\t\tBOOL\n\n\tExample:\n\t\tif (\"q_schnobble\" call BIN_fnc_taskActive) then {hint \"ACTIVE!\";};\n*/</pre>\n\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_taskActive` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_taskActive"
        },
        "configuration": {
            "label": "BIN_fnc_taskActive",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\t\tReturn if task was added to player.\n\t\tIncludes both finished and unfinished tasks.\n\n\tParameter(s):\n\t\t0: STRING - task ID\n\n\tReturns:\n\t\tBOOL\n\n\tExample:\n\t\tif (\"q_schnobble\" call BIN_fnc_taskAdded) then {hint \"ADDED!\";};\n*/</pre>\n\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_taskAdded` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_taskAdded"
        },
        "configuration": {
            "label": "BIN_fnc_taskAdded",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_terminatePuzzle` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_terminatePuzzle"
        },
        "configuration": {
            "label": "BIN_fnc_terminatePuzzle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_translationDone` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_translationDone"
        },
        "configuration": {
            "label": "BIN_fnc_translationDone",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_travelToPoint` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_travelToPoint"
        },
        "configuration": {
            "label": "BIN_fnc_travelToPoint",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_tvSaveExpanded` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_tvSaveExpanded"
        },
        "configuration": {
            "label": "BIN_fnc_tvSaveExpanded",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_updateEM` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_updateEM"
        },
        "configuration": {
            "label": "BIN_fnc_updateEM",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_updateGravityPulse` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_updateGravityPulse"
        },
        "configuration": {
            "label": "BIN_fnc_updateGravityPulse",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tRetrieves draw data for IDWMap and stores it in 'IDWMapDrawData' variable on map control for use in 'Draw' event handler. Should be called in scheduled environment to spread the load.\n\n\tParameter(s):\n\t\tNONE\n\n\tReturns:\n\t\tBOOL - true on success if called from scheduled\n\t\tNOTHING - if called from unscheduled\n\t\t\n\tExample:\n\t\tcall BIN_fnc_updateIDWMapDrawData\n*/</pre>\n\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_updateIDWMapDrawData` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_updateIDWMapDrawData"
        },
        "configuration": {
            "label": "BIN_fnc_updateIDWMapDrawData",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_updatePlayerAntenna` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_updatePlayerAntenna"
        },
        "configuration": {
            "label": "BIN_fnc_updatePlayerAntenna",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_updatePlayerInput` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_updatePlayerInput"
        },
        "configuration": {
            "label": "BIN_fnc_updatePlayerInput",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_updatePlayerSpectrumAnalyzer` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_updatePlayerSpectrumAnalyzer"
        },
        "configuration": {
            "label": "BIN_fnc_updatePlayerSpectrumAnalyzer",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_updatePlayerSpectrumAnalyzerSounds` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_updatePlayerSpectrumAnalyzerSounds"
        },
        "configuration": {
            "label": "BIN_fnc_updatePlayerSpectrumAnalyzerSounds",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_updateSignalDurations` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_updateSignalDurations"
        },
        "configuration": {
            "label": "BIN_fnc_updateSignalDurations",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_updateSpectrumAnalyzerInput` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_updateSpectrumAnalyzerInput"
        },
        "configuration": {
            "label": "BIN_fnc_updateSpectrumAnalyzerInput",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\tKillzone_Kid\n\n\tDescription:\n\t\tRetrieves draw data for TXScan and updates drawing\n\n\tParameter(s):\n\t\t0: STRING - scan name, \"\" - all scans\n\n\tReturns:\n\t\tBOOL - true on success\n\t\t\n\tExample:\n\t\t\"myScan\" call BIN_fnc_updateTXScanDrawData\n\t\t\"\" call BIN_fnc_updateTXScanDrawData - all scans\n*/\n</pre>\n\n{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_updateTXScanDrawData` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_updateTXScanDrawData"
        },
        "configuration": {
            "label": "BIN_fnc_updateTXScanDrawData",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "{{Wiki|placeholder}}\n**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_vectorToEuler` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_vectorToEuler"
        },
        "configuration": {
            "label": "BIN_fnc_vectorToEuler",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_wpAddScript` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_wpAddScript"
        },
        "configuration": {
            "label": "BIN_fnc_wpAddScript",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_wpDroneMove` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_wpDroneMove"
        },
        "configuration": {
            "label": "BIN_fnc_wpDroneMove",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_wpMoveFast` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_wpMoveFast"
        },
        "configuration": {
            "label": "BIN_fnc_wpMoveFast",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3contact",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIN_fnc_wpPatrol` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIN_fnc_wpPatrol"
        },
        "configuration": {
            "label": "BIN_fnc_wpPatrol",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Displays structured text in 3D world. GUI layer for indicator is `**2733**`.",
            "examples": [
                {
                    "text": "```sqf\n[\"<t size='2'>Hello World</t>\", getPosATL helloWorld, 15, 0] spawn BIS_fnc_3Dcredits;\n```"
                },
                {
                    "text": "```sqf\n[\"<img size='2' image='img\\myImage.paa'/><br />Some text on the second line\", getPosATL someObject] spawn BIS_fnc_3Dcredits;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "text",
                            "description": "`String` with optional [Structured Text](https://community.bistudio.com/wiki/Structured%20Text) formatting"
                        },
                        {
                            "name": "position",
                            "description": "`Array` in format `Position`"
                        },
                        {
                            "name": "minDist",
                            "description": "`Number` - (Optional, default 20) distance in which text is displayed"
                        },
                        {
                            "name": "fadeDist",
                            "description": "`Number` - (Optional, default is 1.5) distance in which text starts fading again"
                        }
                    ],
                    "outline": "[text, position, minDist, fadeDist] spawn `BIS_fnc_3Dcredits`",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_3Dcredits"
        },
        "configuration": {
            "label": "BIS_fnc_3Dcredits",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Used internally by the [Key Frame Animation](https://community.bistudio.com/wiki/Arma%203%3A%20Key%20Frame%20Animation) system. Adds needed event handlers.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_3den_init"
        },
        "configuration": {
            "label": "BIS_fnc_3den_init",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Used internally by the [Arma 3: Key Frame Animation](https://community.bistudio.com/wiki/Arma%203%3A%20Key%20Frame%20Animation) system. Called when a button is pressed.",
            "examples": [
                {
                    "text": "```sqf\nfindDisplay 313 displayAddEventHandler [\"keyDown\", { _this call BIS_fnc_3den_onKeyDown }];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "display",
                            "description": "`Display` - the display"
                        },
                        {
                            "name": "button",
                            "description": "`Number` - key code of the pressed button"
                        },
                        {
                            "name": "shift",
                            "description": "`Boolean` - {{Controls|Shift}} key"
                        },
                        {
                            "name": "ctrl",
                            "description": "`Boolean` - {{Controls|Ctrl}} key"
                        },
                        {
                            "name": "alt",
                            "description": "`Boolean` - {{Controls|Alt}} key"
                        }
                    ],
                    "outline": "[display, button, shift, ctrl, alt] call `BIS_fnc_3den_onKeyDown`",
                    "returns": "`Boolean` - whether or not to consume the input"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_3den_onKeyDown"
        },
        "configuration": {
            "label": "BIS_fnc_3den_onKeyDown",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Used internally by the [Key Frame Animation](https://community.bistudio.com/wiki/Arma%203%3A%20Key%20Frame%20Animation) system. Called when a button is released.",
            "examples": [
                {
                    "text": "```sqf\nfindDisplay 313 displayAddEventHandler [\"keyUp\", {_this call BIS_fnc_3den_onKeyUp}];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "display",
                            "description": "`Display` - the display"
                        },
                        {
                            "name": "button",
                            "description": "`Number` - key code of the pressed button"
                        },
                        {
                            "name": "shift",
                            "description": "`Boolean` - SHIFT key"
                        },
                        {
                            "name": "ctrl",
                            "description": "`Boolean` - CTRL key"
                        },
                        {
                            "name": "alt",
                            "description": "`Boolean` - ALT key"
                        }
                    ],
                    "outline": "[display, button, shift, ctrl, alt] call `BIS_fnc_3den_onKeyUp`",
                    "returns": "`Boolean` - whether or not to consume the input"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_3den_onKeyUp"
        },
        "configuration": {
            "label": "BIS_fnc_3den_onKeyUp",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Used internally by the [Key Frame Animation](https://community.bistudio.com/wiki/Arma%203%3A%20Key%20Frame%20Animation) system. Executed when a new mission is loaded.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_3den_onMissionLoad"
        },
        "configuration": {
            "label": "BIS_fnc_3den_onMissionLoad",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Used internally by the [Key Frame Animation](https://community.bistudio.com/wiki/Arma%203%3A%20Key%20Frame%20Animation) system. Executed when a new mission is created.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_3den_onMissionNew"
        },
        "configuration": {
            "label": "BIS_fnc_3den_onMissionNew",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Used internally by the [Key Frame Animation](https://community.bistudio.com/wiki/Arma%203%3A%20Key%20Frame%20Animation) system. Executed when preview ended.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_3den_onMissionPreviewEnd"
        },
        "configuration": {
            "label": "BIS_fnc_3den_onMissionPreviewEnd",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Used internally by the [Key Frame Animation](https://community.bistudio.com/wiki/Arma%203%3A%20Key%20Frame%20Animation) system.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_3den_onSelectionChange"
        },
        "configuration": {
            "label": "BIS_fnc_3den_onSelectionChange",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Internal function used for the [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor) Edit Terrain Object module.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_3DENAttributeDoorStates`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_3DENAttributeDoorStates"
        },
        "configuration": {
            "label": "BIS_fnc_3DENAttributeDoorStates",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Moves Eden's camera depending on one of two modes:\n* \"random\" - A random position over land preferring non forested areas\n* \"selected\" - The current selected Eden entity or users cursor position if nothing is selected",
            "examples": [
                {
                    "text": "Move Eden's camera to the currently selected Eden entity\n\n```sqf\n[\"selected\"] call BIS_fnc_3DENCamera;\n```"
                },
                {
                    "text": "Move Eden's camera to a random position\n\n```sqf\n[\"random\"] call BIS_fnc_3DENCamera;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`String` - option mode to use"
                        }
                    ],
                    "outline": "[mode] call `BIS_fnc_3DENCamera`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_3DENCamera"
        },
        "configuration": {
            "label": "BIS_fnc_3DENCamera",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Used by Eden to display control hints for the current Eden operation as seen in the bottom right corner of the Editor display.",
            "examples": [
                {
                    "text": "```sqf\n[\"toggle\"] call BIS_fnc_3DENControlsHint; // toggle Eden controls hints\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`String` - **case-sensitive**, can be one of:"
                        }
                    ],
                    "outline": "[mode] call `BIS_fnc_3DENControlsHint`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_3DENControlsHint"
        },
        "configuration": {
            "label": "BIS_fnc_3DENControlsHint",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Copies all in [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor) available objects to the clipboard.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_3DENDiagCreateList;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "class call `BIS_fnc_3DENDiagCreateList`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_3DENDiagCreateList"
        },
        "configuration": {
            "label": "BIS_fnc_3DENDiagCreateList",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "[[File:BIS_fnc_3DENDiagFonts example.jpg|thumb|This display is opened when the function is called in Eden.]]\nDisplays given font in various different sizes. The fontID is the index of the font in <sqf inline>configFile >> \"CfgFontFamilies\".\n\nFonts for **(Arma 3)**:\n<ol start=\"0\" style=\"column-count: 3\">\n<li>LucidaConsoleB\n<li>TahomaB\n<li>EtelkaMonospacePro\n<li>LCD14\n<li>EtelkaMonospaceProBold\n<li>EtelkaNarrowMediumPro\n<li>PuristaBold\n<li>PuristaLight\n<li>PuristaMedium\n<li>PuristaSemibold\n<li>RobotoCondensed\n<li>RobotoCondensedBold\n<li>RobotoCondensedLight\n<li>Caveat\n</ol>",
            "examples": [
                {
                    "text": "```sqf\n2 call BIS_fnc_3DENDiagFonts;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "fontID",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "fontID call `BIS_fnc_3DENDiagFonts`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_3DENDiagFonts"
        },
        "configuration": {
            "label": "BIS_fnc_3DENDiagFonts",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Creates a display which highlights currently pressed mouse buttons and CTRL, ALT or SHIFT key.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_3DENDiagMouseControl;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_3DENDiagMouseControl`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_3DENDiagMouseControl"
        },
        "configuration": {
            "label": "BIS_fnc_3DENDiagMouseControl",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Internal function used by [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor) to draw locations.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_3DENDrawLocations`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_3DENDrawLocations"
        },
        "configuration": {
            "label": "BIS_fnc_3DENDrawLocations",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Excutes actions available in the entity menu (context menu).",
            "examples": [
                {
                    "text": "```sqf\n[\"reset\"] call BIS_fnc_3DENEntityMenu;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`String` - case insensitive. Can be:"
                        }
                    ],
                    "outline": "[mode] call `BIS_fnc_3DENEntityMenu`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_3DENEntityMenu"
        },
        "configuration": {
            "label": "BIS_fnc_3DENEntityMenu",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Copies all available attributes to the clipboard.",
            "examples": [
                {
                    "text": "```sqf\n\"trigger\" call BIS_fnc_3DENExportAttributes;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`String` - (Optional, default \"object\") type of attributes to be exported. Classes from `configFile` >> Cfg3DEN >> class"
                        }
                    ],
                    "outline": "class call `BIS_fnc_3DENExportAttributes`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_3DENExportAttributes"
        },
        "configuration": {
            "label": "BIS_fnc_3DENExportAttributes",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Export current mission (usually in [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor)) in [2D Editor](https://community.bistudio.com/wiki/2D%20Editor) format to the clipboard.",
            "examples": [
                {
                    "text": "See [Debug Console](https://community.bistudio.com/wiki/Arma%203%3A%20Debug%20Console)\n```sqf\ncall BIS_fnc_3DENExportOldSQM; // execute in debug console\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_3DENExportOldSQM`",
                    "returns": "`Nothing` - old SQM is [copied to the clipboard](https://community.bistudio.com/wiki/copyToClipboard)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_3DENExportOldSQM"
        },
        "configuration": {
            "label": "BIS_fnc_3DENExportOldSQM",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Export 3DEN mission to SQF script. When called, the script will dynamically recreate the mission.",
            "examples": [
                {
                    "text": "```sqf\n[true, false, [1337,1337,0], true] call BIS_fnc_3DENExportSQF;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "showWindow",
                            "description": "`Boolean` - (Optional, default `true`) `true` to show window with script code"
                        },
                        {
                            "name": "exportLayers",
                            "description": "`Boolean` - (Optional, default `true`) `true` to export layers as conditions (it's possible to create only specific layers using params passed to the exported script)"
                        },
                        {
                            "name": "center",
                            "description": "`Array` format `Position` - (Optional, default [0,0,0]) center position, all entity positions will be exported as relative"
                        },
                        {
                            "name": "checkBlacklist",
                            "description": "`Boolean` - (Optional, default `false`) `true` to export with check if specific entity ID was blacklisted"
                        }
                    ],
                    "outline": "[showWindow,exportLayers,center,checkBlacklist] call `BIS_fnc_3DENExportSQF`",
                    "returns": "`Array` in form [[objects,groups,triggers,waypoints,logics,markers],[objectIDs,groupIDs,triggerIDs,waypointIDs,logicIDs,markerIDs]]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_3DENExportSQF"
        },
        "configuration": {
            "label": "BIS_fnc_3DENExportSQF",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Gets all empty vehicles placed in the currently opened Eden mission and converts data into the format used by the [Terrain Builder](https://community.bistudio.com/wiki/Terrain%20Builder).",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_3DENExportTerrainBuilder;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_3DENExportTerrainBuilder`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_3DENExportTerrainBuilder"
        },
        "configuration": {
            "label": "BIS_fnc_3DENExportTerrainBuilder",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Toggle or set [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor) flashlight (light source snapped to the camera).",
            "examples": [
                {
                    "text": "```sqf\nprivate _mode = 0 call BIS_fnc_3DENFlashlight;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`Number` - can be:"
                        }
                    ],
                    "outline": "mode call `BIS_fnc_3DENFlashlight`",
                    "returns": "`Number` - selected mode"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_3DENFlashlight"
        },
        "configuration": {
            "label": "BIS_fnc_3DENFlashlight",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Handles action when grid button is pressed in the toolbar in [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor).",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`String` - can be:"
                        },
                        {
                            "name": "input",
                            "description": "`Array` - array in form:"
                        }
                    ],
                    "outline": "[mode, input] call `BIS_fnc_3DENGrid`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_3DENGrid"
        },
        "configuration": {
            "label": "BIS_fnc_3DENGrid",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Is used to set the weather settings in [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor). Internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlGroup",
                            "description": "`Control` - control group used in [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor) to manipulate the weather settings"
                        },
                        {
                            "name": "value",
                            "description": "`Number` - value used for weather settings like `setFog`"
                        }
                    ],
                    "outline": "[controlGroup, value] call `BIS_fnc_3DENIntel`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_3DENIntel"
        },
        "configuration": {
            "label": "BIS_fnc_3DENIntel",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_3DENInterface` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_3DENInterface"
        },
        "configuration": {
            "label": "BIS_fnc_3DENInterface",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Used in the locations display in [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor). Internal use only.",
            "examples": [
                {
                    "text": "```sqf\n[\"init\"] call BIS_fnc_3DENListLocations;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`String` - can be:"
                        }
                    ],
                    "outline": "[mode] call `BIS_fnc_3DENListLocations`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_3DENListLocations"
        },
        "configuration": {
            "label": "BIS_fnc_3DENListLocations",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: This function is used internally by the [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor)",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_3DENMissionPreview"
        },
        "configuration": {
            "label": "BIS_fnc_3DENMissionPreview",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "This functions does nothing.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "call `BIS_fnc_3DENMissionStats`",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_3DENMissionStats"
        },
        "configuration": {
            "label": "BIS_fnc_3DENMissionStats",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Used to display module description in the attribute window.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "ctrl",
                            "description": "`Control` - attribute control"
                        },
                        {
                            "name": "cfg",
                            "description": "`Config`"
                        }
                    ],
                    "outline": "[ctrl,cfg] call `BIS_fnc_3DENModuleDescription`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_3DENModuleDescription"
        },
        "configuration": {
            "label": "BIS_fnc_3DENModuleDescription",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Shows notification banner with given text, animated or not, at the top of the screen in the [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor).<br/>\nSince **(Arma 3)** this function will no longer throw an error outside of [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor). Because `**Display3DEN**` (<sqf inline>findDisplay 313) is not available, it will only play the sound according to the message type.\nThe sound is played through the UI channel with `playSoundUI`.",
            "examples": [
                {
                    "text": "```sqf\n[\"This is an animated notification\", 0] call BIS_fnc_3DENNotification;\n```"
                },
                {
                    "text": "```sqf\n[\"This is a warning that is not animated\", 1, 2, false] call BIS_fnc_3DENNotification;\n```"
                },
                {
                    "text": "```sqf\n[\"For more information visit <t colorLink='#E69710'><a href='https://community.bistudio.com/wiki/BIS_fnc_3DENNotification'>Community Wiki</a></t>\"] call BIS_fnc_3DENNotification;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "text",
                            "description": "`String` or [Structured Text](https://community.bistudio.com/wiki/Structured%20Text) - either text or class from <sqf inline>\"Cfg3DEN\" >> \"Notifications\""
                        },
                        {
                            "name": "type",
                            "description": "`Number` - (Optional, default 0) 0: Notification (Green) 1: Warning (Red)"
                        },
                        {
                            "name": "duration",
                            "description": "`Number` - (Optional, default 2) duration in seconds (+ 1 sec for each new line)"
                        },
                        {
                            "name": "animate",
                            "description": "`Boolean` - (Optional, default `true`) toggle animation"
                        },
                        {
                            "name": "volume",
                            "description": "`Number` - (Optional, default 1) volume adjustment"
                        }
                    ],
                    "outline": "[text, type, duration, animate] call `BIS_fnc_3DENNotification`",
                    "returns": "`Number` - selected Mode"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_3DENNotification"
        },
        "configuration": {
            "label": "BIS_fnc_3DENNotification",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Shows a pop-up message.\nIn order to skip any optional parameter in between other parameters, send `nil` as parameter.\n**NOTE**: The following [[Stringtable.xml|stringtable]] entries are useful to add custom `Code` but keep the default button texts:\n* `**\"STR_DISP_OK\"**`\n* `**\"STR_DISP_CLOSE\"**`\n* `**\"STR_DISP_CANCEL\"**`",
            "examples": [
                {
                    "text": "```sqf\n[\"Message\",\"Title of the Message\"] call BIS_fnc_3DENShowMessage;\n```"
                },
                {
                    "text": "```sqf\n\n[\n\t\"Are you sure you want to delete / modify the selected variables?\",\n\t\"Delete / Modify\",\n\t[\n\t\t\"Yes\",\n\t\t{ BIS_Message_Confirmed = true }\n\t],\n\t[\n\t\t\"No\",\n\t\t{ BIS_Message_Confirmed = false }\n\t],\n\t\"\\A3\\ui_f\\data\\map\\markers\\handdrawn\\warning_CA.paa\",\n\tfindDisplay 313\n] call BIS_fnc_3DENShowMessage;\n\n```"
                },
                {
                    "text": "```sqf\n\n// Only change the OK button's code\n[\n\t\"Are you sure you want to delete / modify the selected variables?\",\n\t\"Delete / Modify\",\n\t[\n\t\tnil,\n\t\t{ BIS_Message_Confirmed = true }\n\t],\n\tnil,\n\t\"\\A3\\ui_f\\data\\map\\markers\\handdrawn\\warning_CA.paa\",\n\tfindDisplay 313\n] call BIS_fnc_3DENShowMessage;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "text",
                            "description": "`String` - text to display"
                        },
                        {
                            "name": "title",
                            "description": "`String` - (Optional, default \"\") title header"
                        },
                        {
                            "name": "buttonOK",
                            "description": "`String`, `Boolean` or `Array` - (Optional, default \"\") can be one of:"
                        },
                        {
                            "name": "buttonCancel",
                            "description": "`String`, `Boolean` or `Array` - (Optional, default \"\") can be one of:"
                        },
                        {
                            "name": "icon",
                            "description": "`String` - (Optional, default \"\") path to an icon which will be shown on the left side of the message"
                        },
                        {
                            "name": "parentDisplay",
                            "description": "`Display` - (Optional, default <sqf inline>findDisplay 313 (Eden Display)) display from which the window is opened"
                        }
                    ],
                    "outline": "[text, title, buttonOK, buttonCancel, icon, parentDisplay] call `BIS_fnc_3DENShowMessage`",
                    "returns": "`Display`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_3DENShowMessage"
        },
        "configuration": {
            "label": "BIS_fnc_3DENShowMessage",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_3DENStatusBar` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_3DENStatusBar"
        },
        "configuration": {
            "label": "BIS_fnc_3DENStatusBar",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Interacts with the [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor) toolbar",
            "examples": [
                {
                    "text": "```sqf\n\"ToggleFlashlight\" call BIS_fnc_3DENToolbar;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`String` - can be:"
                        }
                    ],
                    "outline": "[mode] call `BIS_fnc_3DENToolbar`",
                    "returns": "`Boolean` - returns `true` if it was added successfully"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_3DENToolbar"
        },
        "configuration": {
            "label": "BIS_fnc_3DENToolbar",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Show tutorial in [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor).",
            "examples": [
                {
                    "text": "```sqf\n[[\"Editing\", \"Connecting\"], 0, false] call BIS_fnc_3DENTutorial;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "path",
                            "description": "`Array` - path in format [<categoryClass>,<tutorialClass>], classes are from **Cfg3DEN >> Tutorials**"
                        },
                        {
                            "name": "index",
                            "description": "`Number` - (Optional, default 0) index of step at which tutorial starts"
                        },
                        {
                            "name": "oneStep",
                            "description": "`Boolean` - (Optional, default `false`) true to show only one step, without ability to go forward or backward"
                        },
                        {
                            "name": "display",
                            "description": "`Display` - (Optional, default Eden display) display used"
                        }
                    ],
                    "outline": "[path, index, oneStep, display] call `BIS_fnc_3DENTutorial`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_3DENTutorial"
        },
        "configuration": {
            "label": "BIS_fnc_3DENTutorial",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Toggle or set [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor) vision mode. Has to be executed while Eden interface is opened.",
            "examples": [
                {
                    "text": "```sqf\nprivate _mode = 0 call BIS_fnc_3DENVisionMode;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`Number` - can be:"
                        }
                    ],
                    "outline": "mode call `BIS_fnc_3DENVisionMode`",
                    "returns": "`Number` - selected mode"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_3DENVisionMode"
        },
        "configuration": {
            "label": "BIS_fnc_3DENVisionMode",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Add an AAN overlay to the screen, with one headline and a rolling text on the bottom.",
            "examples": [
                {
                    "text": "```sqf\n\n[\n\tparseText \"<t size='2'>AAN live in Takistan</t>\",\n\tparseText \"Weather coming up hot and steamy - Takistan shelled again from border area\"\n] spawn BIS_fnc_AAN;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "headline",
                            "description": "[Structured Text](https://community.bistudio.com/wiki/Structured%20Text) - main title, shown in bigger size"
                        },
                        {
                            "name": "rollingText",
                            "description": "[Structured Text](https://community.bistudio.com/wiki/Structured%20Text) - bottom text under _headline_ scrolling right to left"
                        }
                    ],
                    "outline": "[headline, rollingText] spawn `BIS_fnc_AAN`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_AAN"
        },
        "configuration": {
            "label": "BIS_fnc_AAN",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns absolute `speed` of a vehicle in kilometers per hour (km/h)",
            "examples": [
                {
                    "text": "```sqf\nif (((vehicle player) call BIS_fnc_absSpeed) > 150) then\n{\n  hint \"There goes my driver's license :(\";\n};\n```"
                },
                {
                    "text": "```sqf\nprivate _kmh = (vehicle player) call BIS_fnc_absSpeed;\n_miles = _kmh / 1.609344;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "`Object`",
                            "description": "vehicle"
                        }
                    ],
                    "outline": "`Object` call `BIS_fnc_absSpeed`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_absSpeed"
        },
        "configuration": {
            "label": "BIS_fnc_absSpeed",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Activate addons upon mission start. Doesn't work when the mission is already running.",
            "examples": [
                {
                    "text": "```sqf\n[\"class_1\",\"class_2\"] call BIS_fnc_activateAddons;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "addons",
                            "description": "`Array` of `String`s - addon classes from CfgPatches or object classes from CfgVehicles"
                        }
                    ],
                    "outline": "[addons] call `BIS_fnc_activateAddons`",
                    "returns": "`Array` of `String`s - activated addons"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_activateAddons"
        },
        "configuration": {
            "label": "BIS_fnc_activateAddons",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Registering a class for the OO scripting shell.",
            "examples": [
                {
                    "text": "```sqf\n\"someOOClass\" call BIS_fnc_addClassOO;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "class",
                            "description": "`String` - class for the OO scripting shell **IMPORTANT**: Class has to exist in CfgOO"
                        }
                    ],
                    "outline": "class call `BIS_fnc_addClassOO`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_addClassOO"
        },
        "configuration": {
            "label": "BIS_fnc_addClassOO",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Add [communication menu](https://community.bistudio.com/wiki/Arma%203%3A%20Communication%20Menu) to the given unit.\n\nThe item will be available in the Communication menu and visualized in comm menu icon area.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _supportHeli = [player,\"Support_Request_CAS_Heli\"] call BIS_fnc_addCommMenuItem;\n_supportHeli = [player,\"Support_Request_CAS_Heli\",nil,nil,\"\"] call BIS_fnc_addCommMenuItem; // don't show notification\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "**owner**",
                            "description": "`Object` - object to which the item belongs to"
                        },
                        {
                            "name": "**itemClass**",
                            "description": "`String` - `**CfgCommunicationMenu**` class"
                        },
                        {
                            "name": "**textArguments**",
                            "description": "`Anything` - (Optional) additional info to display in the `**text}} attribute. {{hl|%1}} will be replaced by the first array element, {{hl|%2**` with the second and so on."
                        },
                        {
                            "name": "**expressionArguments**",
                            "description": "`Anything` - (Optional) similar to **textArguments**, just this time in the `**expression**` attribute."
                        },
                        {
                            "name": "**notification**",
                            "description": "`String` - (Optional) notification class from `**CfgNotifications**`. Empty string will disabled the notification."
                        }
                    ],
                    "outline": "[owner, itemClass, textArguments, expressionArguments, notification] call `BIS_fnc_addCommMenuItem`",
                    "returns": "`Number` - item ID, used in `BIS_fnc_removeCommMenuItem`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_addCommMenuItem"
        },
        "configuration": {
            "label": "BIS_fnc_addCommMenuItem",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Add curator editing / camera area based on triggers.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_curator, [trigger_1,trigger_2], [0,0,0], true, true, true] call BIS_fnc_addCuratorAreaFromTrigger;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curatorLogic",
                            "description": "`Logic` - curator logic"
                        },
                        {
                            "name": "triggers",
                            "description": "`Array` - list of triggers"
                        },
                        {
                            "name": "checkedPosition",
                            "description": "`Anything` - checked position. Check `BIS_fnc_position` for supported data types"
                        },
                        {
                            "name": "triggerType",
                            "description": "`Boolean` - `true` to use a trigger nearest to the _checkedPosition_, `false` to use all triggers which the position is in"
                        },
                        {
                            "name": "editingArea",
                            "description": "`Boolean` - `true` to add editing area"
                        },
                        {
                            "name": "cameraArea",
                            "description": "`Boolean` - `true` to add camera area"
                        }
                    ],
                    "outline": "[curatorLogic, triggers, checkedPosition, triggerType, editingArea, cameraArea] call `BIS_fnc_addCuratorAreaFromTrigger`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_addCuratorAreaFromTrigger"
        },
        "configuration": {
            "label": "BIS_fnc_addCuratorAreaFromTrigger",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tAdd challenges for curator to complete\n\n\tParameter(s):\n\t\t0: OBJECT - curator\n\t\t1 (Optional): ARRAY - list of supported challenges from CfgCuratorChallenges (default: all challenges)\n\t\t2 (Optional): NUMBER - number of added challenges (default: 3)\n\t\t3 (Optional): CODE - condition for challenges to remain active {default: true}\n\t\t4 (optional):\n\t\t\tCODE or [CODE,STRING] - code executed upon completing all challenges and reward description\n\t\t\tArguments passed to the code are:\n\t\t\t\t0: OBJECT - curator\n\t\t\t\t1: NUMBER - number of previously completed challenges by given curator\n\t\t\t\t2: STRING - parent task ID\n\t\t5 (Optional): STRING - parent task ID\n\n\tReturns:\n\tSTRING - ID of parent task under which all challenge tasks are\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_addCuratorChallenge` -->"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_addCuratorChallenge"
        },
        "configuration": {
            "label": "BIS_fnc_addCuratorChallenge",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Add an icon displayed in curator interface.",
            "examples": [
                {
                    "text": "```sqf\n[curatorModule, [\"targetIcon.paa\", [1,1,1,1], position player, 1, 1, 45, \"Target\", 1, 0.05, \"TahomaB\"], false] call BIS_fnc_addCuratorIcon;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - curator module"
                        },
                        {
                            "name": "iconParams",
                            "description": "`Array` - icon params (see `drawIcon3D` scripting command for its format)"
                        },
                        {
                            "name": "map",
                            "description": "`Boolean` - (Optional, default `true`) `true` to show icon on map"
                        },
                        {
                            "name": "3D",
                            "description": "`Boolean` - (Optional, default `true`) `true` to show icon in 3D scene"
                        }
                    ],
                    "outline": "[object, iconParams, map, 3D] call `BIS_fnc_addCuratorIcon`",
                    "returns": "`Number` - icon ID, used in `BIS_fnc_removeCuratorIcon`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_addCuratorIcon"
        },
        "configuration": {
            "label": "BIS_fnc_addCuratorIcon",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>\n/*******************************************************************************\n *\n *\tversion: \t\t1.0\n *\tname:\t\t\tAdd evidence\n *\tdescription:\tadd an evidence value to global campaign variable \t\n *\tparamater:\t\tevidence variable name (defined in init.sqf of campaign\n \t\t\t\t\tmission C1) or simply number (scalar)\n *\treturn value:\tnone \t\n * \n</pre>\n{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_addEvidence` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_addEvidence"
        },
        "configuration": {
            "label": "BIS_fnc_addEvidence",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Add a respawn inventory for [respawn menu](https://community.bistudio.com/wiki/Arma%203%3A%20Respawn%23MenuInventory).\n\nAvailable loadouts are defined in [[Description.ext#CfgRespawnInventory|CfgRespawnInventory]].",
            "examples": [
                {
                    "text": "```sqf\n[west, \"WEST1\"] call BIS_fnc_addRespawnInventory;\n```"
                },
                {
                    "text": "```sqf\nprivate _myRespawnInventory = [missionNamespace, \"ATSniper\"] call BIS_fnc_addRespawnInventory;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "Receiver of the respawn loadout"
                        },
                        {
                            "name": "inventoryParams",
                            "description": "`Array` or `String`"
                        }
                    ],
                    "outline": "[target, inventoryParams] call `BIS_fnc_addRespawnInventory`",
                    "returns": "`Array` - format [target, id] used in `BIS_fnc_removeRespawnInventory`"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_addRespawnInventory"
        },
        "configuration": {
            "label": "BIS_fnc_addRespawnInventory",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Add a respawn position for the [[Arma 3: Respawn|Arma 3 Respawn Menu]].",
            "examples": [
                {
                    "text": "```sqf\n[west, myRespawnAPC] call BIS_fnc_addRespawnPosition;\n```"
                },
                {
                    "text": "```sqf\nmyRespawn = [missionNamespace,\"arena\",\"Battle Arena\"] call BIS_fnc_addRespawnPosition;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "**target**",
                            "description": "`Namespace`, `Side`, `Group` or `Object` - receiver of the respawn position. Use `missionNamespace` to add the position to everyone"
                        },
                        {
                            "name": "**position**",
                            "description": "`Array`, `Object` or `String`"
                        },
                        {
                            "name": "**name**",
                            "description": "`String` - (Optional) respawn name, can be text or link to localization key"
                        }
                    ],
                    "outline": "[target, position, name] call `BIS_fnc_addRespawnPosition`",
                    "returns": "`Array` - format [target,id] (used in `BIS_fnc_removeRespawnPosition`)"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_addRespawnPosition"
        },
        "configuration": {
            "label": "BIS_fnc_addRespawnPosition",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Adds a set amount of points to the score of a unit _(MP only)_",
            "examples": [
                {
                    "text": "```sqf\n[player,20] call BIS_fnc_addScore;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "`Object`",
                            "description": "unit to add score to."
                        },
                        {
                            "name": "`Number`",
                            "description": "number of points (score) to add to unit."
                        }
                    ],
                    "outline": "[object, number] call `BIS_fnc_addScore`",
                    "returns": "`Number` - score added to unit"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_addScore"
        },
        "configuration": {
            "label": "BIS_fnc_addScore",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Adds a Scripted Event Handler and returns its ID. Additionally, the \"ScriptedEventHandlerAdded\" Scripted EH is called. For the full list of all available Scripted EHs see [Arma 3: Scripted Event Handlers](https://community.bistudio.com/wiki/Arma%203%3A%20Scripted%20Event%20Handlers).",
            "examples": [
                {
                    "text": "```sqf\n[missionNamespace, \"event\", { hint \"Hello World\" }] call BIS_fnc_addScriptedEventHandler;\n```"
                },
                {
                    "text": "```sqf\n[true, \"event\", { hint \"Hello World\" }] call BIS_fnc_addScriptedEventHandler;\n```\n \nBoolean will default to `missionNamespace`."
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "namespace",
                            "description": "`Namespace`, `Object`, `Group`, `Location`, `Boolean`, `Control` or `Display` - namespace in which the EH is stored"
                        },
                        {
                            "name": "name",
                            "description": "`String` - event name"
                        },
                        {
                            "name": "code",
                            "description": "`Code` or `String` - the code that is executed when the EH fires. The magic variable [_thisScriptedEventHandler](https://community.bistudio.com/wiki/Magic_Variables%23thisScriptedEventHandler) can be used to access the event handler ID within the code."
                        }
                    ],
                    "outline": "[namespace, name, code] call `BIS_fnc_addScriptedEventHandler`",
                    "returns": "`Number` - the ID of the new Event Handler"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_addScriptedEventHandler"
        },
        "configuration": {
            "label": "BIS_fnc_addScriptedEventHandler",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "{{Feature|obsolete|[Arma 3: Mission Event Handlers](https://community.bistudio.com/wiki/Arma%203%3A%20Mission%20Event%20Handlers) should be used instead.|arma3|1.58}}\nStacks an event handler.  All event handlers accept user arguments, which are passed to the EH code in `**_this}} variable. If the EH has own params returned in {{hl|_this}} variable as well, user arguments are appended to the end of {{hl|_this**` array. Note that if you try to add an empty EH, i.e. with empty code, it will simply be ignored.\n\n{{{!}} class=\"wikitable\"\n{{!}}+ Supported Event Handlers\n! Scripted Event Handler\n! Mission EH Equivalent\n! Description\n{{!}}-\n{{!}} \"`onEachFrame`\"\n{{!}} [EachFrame](https://community.bistudio.com/wiki/Arma%203%3A%20Mission%20Event%20Handlers%23EachFrame)\n{{!}} {{n/a}}\n{{!}}-\n{{!}} \"`onPlayerConnected`\"\n{{!}} [PlayerConnected](https://community.bistudio.com/wiki/Arma%203%3A%20Mission%20Event%20Handlers%23PlayerConnected)\n{{!}} rowspan=\"2\" {{!}}Special variables `**_id}}, {{hl|_uid}}, {{hl|_name}}, {{hl|_jip}}, {{hl|_owner}} are provided and are available in {{hl|_this**` array as well.\n\n```sqf\nparams [\"_id\", \"_uid\", \"_name\", \"_jip\", \"_owner\"];\n```\n\n{{!}}-\n{{!}} \"`onPlayerDisconnected`\"\n{{!}} [PlayerDisconnected](https://community.bistudio.com/wiki/Arma%203%3A%20Mission%20Event%20Handlers%23PlayerDisconnected)\n{{!}}-\n{{!}} \"`onMapSingleClick`\"\n{{!}} [MapSingleClick](https://community.bistudio.com/wiki/Arma%203%3A%20Mission%20Event%20Handlers%23MapSingleClick)\n{{!}} Special variables `**_units}}, {{hl|_pos}}, {{hl|_alt}}, {{hl|_shift}} are provided and are available in {{hl|_this**` array as well.\n\n```sqf\nparams [\"_units\", \"_pos\", \"_alt\", \"_shift\"];\n```\n\n{{!}}-\n{{!}} \"`onPreloadStarted`\"\n{{!}} [PreloadStarted](https://community.bistudio.com/wiki/Arma%203%3A%20Mission%20Event%20Handlers%23PreloadStarted)\n{{!}} {{n/a}}\n{{!}}-\n{{!}} \"`onPreloadFinished`\"\n{{!}} [PreloadFinished](https://community.bistudio.com/wiki/Arma%203%3A%20Mission%20Event%20Handlers%23PreloadFinished)\n{{!}} {{n/a}}\n{{!}}}",
            "examples": [
                {
                    "text": "```sqf\n[\"someId\", \"onEachFrame\", { hintSilent str time }] call BIS_fnc_addStackedEventHandler;\n```"
                },
                {
                    "text": "```sqf\n[\"someId\", \"onEachFrame\", {hintSilent str position (_this select 0)}, [player]] call BIS_fnc_addStackedEventHandler;\n```"
                },
                {
                    "text": "```sqf\n\nprivate _eventName = \"OnEachFrame\";\nmissionNamespace getVariable [format [\"BIS_stackedEventHandlers_%1\", _eventName], []]; // gets an array with all existing ids\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "id",
                            "description": "`String` - custom id, a unique identifier. Adding same type of EH with the same id will overwrite existing"
                        },
                        {
                            "name": "event",
                            "description": "`String` - event handler name, see description for supported EHs"
                        },
                        {
                            "name": "code",
                            "description": "`Code` or `String`. The `String` is treated as function name"
                        },
                        {
                            "name": "arguments",
                            "description": "`Array` of `Anything` - arguments to make available in code in `**_this**` array"
                        }
                    ],
                    "outline": "[id, event, code, arguments] call `BIS_fnc_addStackedEventHandler`",
                    "returns": "`String` - custom id on success or \"\" on failure"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_addStackedEventHandler"
        },
        "configuration": {
            "label": "BIS_fnc_addStackedEventHandler",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Adds support types during a mission.",
            "examples": [
                {
                    "text": "```sqf\n[player, BIS_requesterMod, BIS_providerMod] call BIS_fnc_addSupportLink;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "requesterUnit",
                            "description": "`Object` - requester unit"
                        },
                        {
                            "name": "requesterMod",
                            "description": "`Object` - requester module"
                        },
                        {
                            "name": "providerMod",
                            "description": "`Object` - provider module"
                        }
                    ],
                    "outline": "[requesterUnit, requesterMod, providerMod] call `BIS_fnc_addSupportLink`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_addSupportLink"
        },
        "configuration": {
            "label": "BIS_fnc_addSupportLink",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Adds given value to pair array, stored under unique key.\n\n\n\n If value is found:\n\n a) both values are scalars: values are added and stored as a single scalar\n\n b) one or both values are array: values are added and stored as a single array\n\n c) anything else: an array is created and both values are stored there\n\n\n\n**NOTE**: Function by default modifies the input array. This can be overrriden by setting '_copyArray' param to true.",
            "examples": [
                {
                    "text": "```sqf\n[[[\"apple\",3],[\"pear\",2]],\"pear\",10] call BIS_fnc_addToPairs; // Returns [[\"apple\",3],[\"pear\",12]]\n```"
                },
                {
                    "text": "```sqf\n[[[\"apple\",3],[\"pear\",2]],\"apple\",-2] call BIS_fnc_addToPairs; // Returns [[\"apple\",1],[\"pear\",2]]\n```"
                },
                {
                    "text": "```sqf\n[[[\"greetings\",\"Hello!\"],[\"rudewords\",\"\"]],\"greetings\",\"Hi!\"] call BIS_fnc_addToPairs; // Returns [[\"greetings\",[\"Hello!\",\"Hi!\"]],[\"rudewords\",\"\"]]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array` - array to search through"
                        },
                        {
                            "name": "key",
                            "description": "`String` - key to search for"
                        },
                        {
                            "name": "value",
                            "description": "`Number` - (Optional, default `nil`) default return value if no match was found"
                        },
                        {
                            "name": "copyArray",
                            "description": "`Boolean` - (Optional, default `false`) `true` to copy the array and return it, `false` to modify the original array"
                        }
                    ],
                    "outline": "[array, key, value, copyArray] call `BIS_fnc_addToPairs`",
                    "returns": "`Array` - resulting modified array or a copy"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_addToPairs"
        },
        "configuration": {
            "label": "BIS_fnc_addToPairs",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Add virtual backpacks to an object (e.g., ammo box). Virtual items can be selected in the `Arsenal`.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_ammoBox, [\"class_1\",\"class_2\"], false, true] call BIS_fnc_addVirtualBackpackCargo;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - object to which items will be added"
                        },
                        {
                            "name": "backpackClasses",
                            "description": "`Boolean`, `String` or `Array` of `String`s - backpack classes"
                        },
                        {
                            "name": "addItemsGlobal",
                            "description": "`Boolean` - (Optional, default `false`) `true` to add items globally"
                        },
                        {
                            "name": "arsenal",
                            "description": "`Boolean` - (Optional, default `true`) `true` to add `Arsenal` action"
                        }
                    ],
                    "outline": "[object,backpackClasses,addItemsGlobal,arsenal] call `BIS_fnc_addVirtualBackpackCargo`",
                    "returns": "`Array` of `String`s - all virtual backpacks"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_addVirtualBackpackCargo"
        },
        "configuration": {
            "label": "BIS_fnc_addVirtualBackpackCargo",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Add virtual items to an object (e.g., ammo box). Virtual items can be selected in the `Arsenal`.\nIf parameters 4 and 5 are used this function can replace `BIS_fnc_addVirtualWeaponCargo`, `BIS_fnc_addVirtualMagazineCargo` and `BIS_fnc_addVirtualBackpackCargo`.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_ammoBox, [\"class_1\", \"class_2\"], false, true] call BIS_fnc_addVirtualItemCargo;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - object to which items will be added"
                        },
                        {
                            "name": "itemClasses",
                            "description": "`Boolean`, `String` or `Array` of `String`s - item classes"
                        },
                        {
                            "name": "addItemsGlobal",
                            "description": "`Boolean` - (Optional, default `false`) `true` to add items globally"
                        },
                        {
                            "name": "arsenal",
                            "description": "`Boolean` - (Optional, default `true`) `true` to add `Arsenal` action"
                        },
                        {
                            "name": "mode",
                            "description": "`Number` - (Optional, default 1) defines what the function will do, can be:"
                        },
                        {
                            "name": "itemType",
                            "description": "`Number` - (Optional, default 0) define the item type, can be:"
                        }
                    ],
                    "outline": "[object, itemClasses, addItemsGlobal, arsenal, mode, itemType] call `BIS_fnc_addVirtualItemCargo`",
                    "returns": "`Array` of `String`s - all virtual items"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_addVirtualItemCargo"
        },
        "configuration": {
            "label": "BIS_fnc_addVirtualItemCargo",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Add virtual magazines to an object (e.g., ammo box). Virtual items can be selected in the `Arsenal`.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_ammoBox, [\"class_1\",\"class_2\"], false, true] call BIS_fnc_addVirtualMagazineCargo;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - object to which items will be added"
                        },
                        {
                            "name": "magClasses",
                            "description": "`Boolean`, `String` or `Array` of `String`s - magazine classes"
                        },
                        {
                            "name": "addItemsGlobal",
                            "description": "`Boolean` - (Optional, default `false`) `true` to add items globally"
                        },
                        {
                            "name": "arsenal",
                            "description": "`Boolean` - (Optional, default `true`) `true` to add `Arsenal` action"
                        }
                    ],
                    "outline": "[object,magClasses,addItemsGlobal,arsenal] call `BIS_fnc_addVirtualMagazineCargo`",
                    "returns": "`Array` of `String`s - all virtual magazines"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_addVirtualMagazineCargo"
        },
        "configuration": {
            "label": "BIS_fnc_addVirtualMagazineCargo",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Add virtual weapons to an object (e.g., ammo box). Virtual items can be selected in the `Arsenal`.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_ammoBox, [\"class_1\",\"class_2\"], false, true] call BIS_fnc_addVirtualWeaponCargo;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - object to which items will be added"
                        },
                        {
                            "name": "weaponClasses",
                            "description": "`Boolean`, `String` or `Array` of `String`s - weapon classes"
                        },
                        {
                            "name": "addItemsGlobal",
                            "description": "`Boolean` - (Optional, default `false`) `true` to add items globally"
                        },
                        {
                            "name": "arsenal",
                            "description": "`Boolean` - (Optional, default `true`) `true` to add `Arsenal` action"
                        }
                    ],
                    "outline": "[object,weaponClasses,addItemsGlobal,arsenal] call `BIS_fnc_addVirtualWeaponCargo`",
                    "returns": "`Array` of `String`s - all virtual weapons"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_addVirtualWeaponCargo"
        },
        "configuration": {
            "label": "BIS_fnc_addVirtualWeaponCargo",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Adds a weapon to the specified unit, with magazine classnames taken from the weapon's config (in [CfgWeapons](https://community.bistudio.com/wiki/%3ACategory%3AWeapons)).\nThis function does not remove magazines nor weapons prior to adding the new weapon, so that still has to be done manually.",
            "examples": [
                {
                    "text": "Add 6 dual-purpose magazines and the underwater gun to the player:\n\n```sqf\n[player, \"arifle_SDAR_F\", 6] call BIS_fnc_addWeapon;\n```"
                },
                {
                    "text": "Adds 2 &times; 30 Rnd Stanag Tracer (Red) magazines to bluforUnit, with an Mk20_F:\n\n```sqf\n[bluforUnit, \"arifle_Mk20_F\", 2, 1] call BIS_fnc_addWeapon;\n```"
                },
                {
                    "text": "Alternative syntax of second example, with magazine name written out:\n\n```sqf\n[bluforUnit, \"arifle_Mk20_F\", 2, \"30Rnd_556x45_Stanag_Tracer_red\"] call BIS_fnc_addWeapon;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit to add weapon to."
                        },
                        {
                            "name": "weaponClassName",
                            "description": "`String` - weapon Classname (found in [CfgWeapons](https://community.bistudio.com/wiki/%3ACategory%3AWeapons))."
                        },
                        {
                            "name": "quantity",
                            "description": "`Number` - amount of magazines."
                        },
                        {
                            "name": "type",
                            "description": "`Number` or `String` - (Optional, default 0)"
                        }
                    ],
                    "outline": "[unit, weaponClassName, quantity, type] call `BIS_fnc_addWeapon`",
                    "returns": "`String` - primary**(!)** muzzle name of weapon."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_addWeapon"
        },
        "configuration": {
            "label": "BIS_fnc_addWeapon",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Adjust simple object vertical position, animations and selection according to provided data.\n\nIn case both adjustment data and class are being used, data has higher priority and only undefined parts are filled from config.\n\n**IMPORTANT**: This function is automatically called by `BIS_fnc_createSimpleObject`.",
            "examples": [
                {
                    "text": "```sqf\n[myCar, [\"B_MyCar_F\", \"path\\to\\file.p3d\"]] call BIS_fnc_adjustSimpleObject;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - simple object that will be adjusted"
                        },
                        {
                            "name": "class",
                            "description": "`String` - (Optional, default \"\") asset `**CfgVehicles**` config class (**at least either _model_ or _class_ must be provided, ideally both**)"
                        },
                        {
                            "name": "model",
                            "description": "`String` - (Optional, default \"\") path to the vehicle p3d model; needs to start without backslash and must end with the proper file extension \".p3d\""
                        },
                        {
                            "name": "reversed",
                            "description": "`Number` - (Optional, default 0) some objects, usually vehicles, are reveresed in p3d; valid values are:"
                        },
                        {
                            "name": "verticalOffset",
                            "description": "`Array` - (Optional, default 0) fix for non-existant physX; usually needed only for vehicles"
                        },
                        {
                            "name": "animationAdjustments",
                            "description": "`Array` - (Optional, default <sqf inline>[]) animation that need to be animated to given state, in format [animationName, animationState]:"
                        },
                        {
                            "name": "selectionsToHide",
                            "description": "`Array` - (Optional, default <sqf inline>[]) all listed selections will be hidden"
                        }
                    ],
                    "outline": "[object, [class, model, reversed, verticalOffset, animAdjustments, selectionToHide]] call `BIS_fnc_adjustSimpleObject`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_adjustSimpleObject"
        },
        "configuration": {
            "label": "BIS_fnc_adjustSimpleObject",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns the admin state of a client the function is called on. Complements `admin` script command and used for self check on a local client.",
            "examples": [
                {
                    "text": "```sqf\nprivate _adminState = call BIS_fnc_admin;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_admin`",
                    "returns": "`Number`  - admin state of current client:\n* 0 - client is not an admin\n* 1 - client is admin that is [voted in](https://community.bistudio.com/wiki/Arma%203%3A%20Server%20Config%20File%23Voted_In_Admin)\n* 2 - client is admin that is [logged in](https://community.bistudio.com/wiki/Arma%203%3A%20Server%20Config%20File%23Logged_In_Admin)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_admin"
        },
        "configuration": {
            "label": "BIS_fnc_admin",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Shows advanced hint to player.",
            "examples": [
                {
                    "text": "```sqf\n[[\"Common\", \"GPS\"]] call BIS_fnc_advHint;\n```"
                },
                {
                    "text": "```sqf\n[[\"Common\", \"GPS\"], 15, \"\", 35, \"\", false, false, false, true] call BIS_fnc_advHint; // default\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "**classes**",
                            "description": "`Array` - array in format [\"hint main class\", \"hint class\"]"
                        },
                        {
                            "name": "**duration1**",
                            "description": "`Number` - (Optional, default 15) duration of short hint in seconds"
                        },
                        {
                            "name": "**condition1**",
                            "description": "`String` - (Optional, default \"\") condition for hiding the short hint"
                        },
                        {
                            "name": "**duration2**",
                            "description": "`Number` - (Optional, default 35) duration of full hint in seconds"
                        },
                        {
                            "name": "**condition2**",
                            "description": "`String` - (Optional, default \"\") condition for hiding the full hint"
                        },
                        {
                            "name": "**showing**",
                            "description": "`Boolean` - (Optional, default `false`) true shows hint even if tutorial hints are disabled in game settings"
                        },
                        {
                            "name": "**onlyFullHint**",
                            "description": "`Boolean` - (Optional, default `false`) true shows full hint without using of short hint"
                        },
                        {
                            "name": "**onlyOnce**",
                            "description": "`Boolean` - (Optional, default `false`) show the hint in mission only once (true) or multiple times (false)"
                        },
                        {
                            "name": "**useSound**",
                            "description": "`Boolean` - (Optional, default `true`) true plays a sound when the hint is opened"
                        }
                    ],
                    "outline": "[classes, duration1, condition1, duration2, condition2, showing, onlyFullHint, onlyOnce, useSound] call `BIS_fnc_advHint`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_advHint"
        },
        "configuration": {
            "label": "BIS_fnc_advHint",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Advanced hint arguments preprocess.",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "arguments",
                            "description": "`Array`"
                        },
                        {
                            "name": "HTMLColour",
                            "description": "`String` - HTML colour for highlighted text"
                        },
                        {
                            "name": "hintClass",
                            "description": "`String` - (Optional, default \"\") class of hint (in case of warning or error is used in logged info)"
                        }
                    ],
                    "outline": "[arguments, HTMLColour, hintClass] call `BIS_fnc_advHintArg`",
                    "returns": "`Array` - arguments"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_advHintArg"
        },
        "configuration": {
            "label": "BIS_fnc_advHintArg",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Advanced hint call, creates hint itself.\n\nThis function gets parameters from variable **BIS_fnc_advHint_hint** in format [class, fullText, shortText, shortDur, shortHideCond, fullDur, fullHideCond, showFull, sound]:\n* class: `String` - class of hint\n\n* fullText: `String` - structured text of full hint\n\n* shortText: `String` - structured text of short hint\n\n* shortDur: `Number` - duration of short hint in seconds\n\n* hideCond: `String` - condition for hiding of short hint (default: \"false\")\n\n* fullDur: `Number` - duration of full hint in seconds\n\n* fullHideCond: `String` - condition for hiding of full hint (default: \"false\")\n\n* showFull: `Boolean` - true shows directly full hint (default: `false`)\n\n* sound: `Boolean` - true for using of sound (default: `true`)",
            "examples": [
                {
                    "text": "```sqf\nfalse call BIS_fnc_advHintCall;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "fullText",
                            "description": "`Boolean` - `true` to show full text, `false` to only show small hint notification"
                        }
                    ],
                    "outline": "fullText call `BIS_fnc_advHintCall`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_advHintCall"
        },
        "configuration": {
            "label": "BIS_fnc_advHintCall",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Advanced hint credits preprocessor.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_advHintCredits;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_advHintCredits`",
                    "returns": "`String` - credits"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_advHintCredits"
        },
        "configuration": {
            "label": "BIS_fnc_advHintCredits",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return formatted texts of a CfgHints hint.",
            "examples": [
                {
                    "text": "```sqf\n[\"Arma3\",\"Feedback\",\"\",[0.5,0.3,0.6,1]] call BIS_fnc_advHintFormat;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "topic",
                            "description": "`String` - topic"
                        },
                        {
                            "name": "hint",
                            "description": "`String` - hint"
                        },
                        {
                            "name": "subHint",
                            "description": "`String` - sub-hint"
                        },
                        {
                            "name": "colour",
                            "description": "`Array` - custom highlight color"
                        }
                    ],
                    "outline": "[topic,hint,subHint,colour] call `BIS_fnc_advHintFormat`",
                    "returns": "`Array` - array in format:\n*0: `Config` - Hint path\n*1: `String` - Display name\n*2: `String` - Display name (short)\n*3: `String` - Description\n*4: `String` - Tip\n*5: `String` - Image\n*6: `Number` - DLC ID\n*7: `Boolean` - `true` if hint belongs to non-owned DLC"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_advHintFormat"
        },
        "configuration": {
            "label": "BIS_fnc_advHintFormat",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Accelerates an aircraft off the aircraft carrier. For this to work the aircraft must be properly configured in config. See [Arma 3: Aircraft Systems](https://community.bistudio.com/wiki/Arma%203%3A%20Aircraft%20Systems) for information about needed config changes.",
            "examples": [
                {
                    "text": "```sqf\n[_plane] call BIS_fnc_aircraftCatapultLaunch;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "aircraft",
                            "description": "`Object` - the aircraft that should be launched"
                        },
                        {
                            "name": "direction",
                            "description": "`Number` - (optional, default <sqf inline>direction _aircraft) direction to launch the aircraft off to"
                        }
                    ],
                    "outline": "[aircraft, direction] call `BIS_fnc_aircraftCatapultLaunch`",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_aircraftCatapultLaunch"
        },
        "configuration": {
            "label": "BIS_fnc_aircraftCatapultLaunch",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Handles foldable wings of aircrafts. Is supposed to be used from within class Eventhandlers of the vehicle. See [Arma 3: Aircraft Systems](https://community.bistudio.com/wiki/Arma%203%3A%20Aircraft%20Systems) for information about needed config changes.\n```cpp\nclass Eventhandlers : Eventhandlers\n{\n\tengine = \"_this call BIS_fnc_aircraftFoldingWings\";\n\tgear = \"_this call BIS_fnc_aircraftFoldingWings\";\n};\n```",
            "examples": [
                {
                    "text": "```sqf\n[_aircraft, 1] call BIS_fnc_aircraftFoldingWings;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "aircraft",
                            "description": "`Object`"
                        },
                        {
                            "name": "animationState",
                            "description": "`Boolean` - (optional, default `false`) if `false`, the function will just terminate"
                        }
                    ],
                    "outline": "[aircraft, animationState] call `BIS_fnc_aircraftFoldingWings`",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_aircraftFoldingWings"
        },
        "configuration": {
            "label": "BIS_fnc_aircraftFoldingWings",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Bravo Zero One development\n\t- John_Spartan\n\n\tDescription:\n\t- Init function to invoke scripted features required for Jets DLC content.\n\n\tExucution:\n\t- Call the function via int EH on each aircrfat config\n\t\tclass Eventhandlers : Eventhandlers\n\t\t{\n\t\t\tinit = \"_this call BIS_fnc_AircraftSystemsInit\";\n\t\t};\n\n\tRequirments:\n\t- Compatible aircrfat must have a config definition for all sub-systems that will be invoked by this function\n\n\t\texample of cfgVehicles subclass definitions;\n\t\tclass AircraftAutomatedSystems\n\t\t{\n\t\t\twingStateControl = 1;\t\t\t\t\t\t\t\t\t\t\t//enable automated wing state control to prevent player to take off with folded wings\n\t\t\twingFoldAnimations[] = {\"wing_fold_l\",\"wing_fold_r\",\"wing_fold_cover_l\", \"wing_fold_cover_r\"};\t\t//foldable wing animation list\n\t\t\twingStateFolded = 1;\t\t\t\t\t\t\t\t\t\t\t//animation state when folded\n\t\t\twingStateUnFolded = 0;\t\t\t\t\t\t\t\t\t\t\t//animation state when un-folded\n\t\t\twingAutoUnFoldSpeed = 40;\t\t\t\t\t\t\t\t\t\t//speed treshold when triger this feature, and unfold wings for player\n\n\t\t};\n\n\tParameter(s):\n\t\t_this select 0: mode (Scalar)\n\t\t0: plane/object\n\n\tReturns: nothing\n\tResult: Aircrfat additional functionality added\n\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_aircraftSystemsInit` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_aircraftSystemsInit"
        },
        "configuration": {
            "label": "BIS_fnc_aircraftSystemsInit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Aircraft carrier arrest/recovery function for USS Freedom aircraft carrier. If the aircraft exceeds the speed defined in config a wire snap will be simulated.",
            "examples": [
                {
                    "text": "```sqf\n[_aircraft] call BIS_fnc_aircraftTailhook;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "aircraft",
                            "description": "`Object` - the aircraft to arrest/recover"
                        }
                    ],
                    "outline": "[aircraft] call `BIS_fnc_aircraftTailhook`",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_aircraftTailhook"
        },
        "configuration": {
            "label": "BIS_fnc_aircraftTailhook",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Handles landing on the aircraft carrier for AI and player autopilot.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "params",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "[params, isLanding] call `BIS_fnc_aircraftTailhookAi`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_aircraftTailhookAi"
        },
        "configuration": {
            "label": "BIS_fnc_aircraftTailhookAi",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Bravo Zero One development\n\t- John_Spartan\n\n\tDescription:\n\t- This function is designed to prevent take off with folded wings on the Jets DLC aircraft that have such useraction/function enabled.\n\n\tExucution:\n\t- Call the function via int EH on each aircrfat config\n\t\tclass Eventhandlers : Eventhandlers\n\t\t{\n\t\t\tinit = \"_this call BIS_fnc_AircraftSystemsInit\";\n\t\t};\n\n\tRequirments:\n\t- Compatible aircrfat must have a config definition for all subsytems that will be invoked by this function\n\n\t\texample of cfgVehicles subclass definitions;\n\t\tclass AircraftAutomatedSystems\n\t\t{\n\t\t\twingStateControl = 1;\t\t\t\t\t\t\t\t\t\t\t//enable automated wing state control to prevent player to take off with folded wings\n\t\t\twingFoldAnimations[] = {\"wing_fold_l\",\"wing_fold_r\",\"wing_fold_cover_l\", \"wing_fold_cover_r\"};\t\t//foldable wing animation list\n\t\t\twingStateFolded = 1;\t\t\t\t\t\t\t\t\t\t\t//animation state when folded\n\t\t\twingStateUnFolded = 0;\t\t\t\t\t\t\t\t\t\t\t//animation state when un-folded\n\t\t\twingAutoUnFoldSpeed = 40;\t\t\t\t\t\t\t\t\t\t//speed treshold when triger this feature, and unfold wings for player\n\n\t\t};\n\n\tParameter(s):\n\t\t_this select 0: mode (Scalar)\n\t\t0: plane/object\n\n\tReturns: nothing\n\tResult: Aircrfat should not be able to take off/ fly with wings folded\n\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_aircraftWingStateCheck` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_aircraftWingStateCheck"
        },
        "configuration": {
            "label": "BIS_fnc_aircraftWingStateCheck",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Align two columns divided by tabs. A tab counts for 8 characters.",
            "examples": [
                {
                    "text": "```sqf\n[\n\t[\"Player:\", str player],\n\t[\"Name:\", name player],\n\t[\"Type:\", typeOf player],\n\t[\"Location:\", str getPosATL player],\n\t[\"Direction:\", str getDir player]\n] call BIS_fnc_alignTabs;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array` - in format"
                        }
                    ],
                    "outline": "array call `BIS_fnc_alignTabs`",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_alignTabs"
        },
        "configuration": {
            "label": "BIS_fnc_alignTabs",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return all synchronized objects, including those synced to synced and so on.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_Poliakko,\"LocationArea_F\"] call BIS_fnc_allSynchronizedObjects;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - parent object"
                        },
                        {
                            "name": "filter",
                            "description": "`String` or `Array` of strings - (Optional, default \"\") class name filter. 1 or more class name of objects we are interested in"
                        }
                    ],
                    "outline": "[object, filter] call `BIS_fnc_allSynchronizedObjects`",
                    "returns": "`Array` - synchronized objects"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_allSynchronizedObjects"
        },
        "configuration": {
            "label": "BIS_fnc_allSynchronizedObjects",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns all vehicle turrets from config with options. Does what `allTurrets` command does, except the param is vehicle's config classname.",
            "examples": [
                {
                    "text": "```sqf\nprivate _allTurrets = \"C_Offroad_01_F\" call BIS_fnc_allTurrets; // []\n```"
                },
                {
                    "text": "```sqf\nprivate _allTurrets = [\"C_Offroad_01_F\", true] call BIS_fnc_allTurrets; // [[0],[1],[2],[3]]\n```"
                },
                {
                    "text": "```sqf\nprivate _allTurrets = [\"C_Offroad_01_F\", false] call BIS_fnc_allTurrets; // []\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicleClass",
                            "description": "`String` - classname of the vehicle"
                        },
                        {
                            "name": "vehicleClass",
                            "description": "`String` - classname of the vehicle"
                        },
                        {
                            "name": "personTurrets",
                            "description": "`Boolean` - `true` to include FFV (firing from vehicle) turrets, `false` to exclude them"
                        }
                    ],
                    "outline": "[vehicleClass, personTurrets] call `BIS_fnc_allTurrets`",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_allTurrets"
        },
        "configuration": {
            "label": "BIS_fnc_allTurrets",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Play set of ambient animations on given unit. If the unit should react to combat, use `BIS_fnc_ambientAnimCombat` instead.\n**NOTE**: Animations can be cancelled using <sqf inline>_unit call BIS_fnc_ambientAnim__terminate.",
            "examples": [
                {
                    "text": "```sqf\n[player, \"STAND1\", \"ASIS\"] call BIS_fnc_ambientAnim;\n```"
                },
                {
                    "text": "```sqf\n\n// will search for a chair within 2 meters around the unit and will place the unit on it\n[_unit, \"SIT\", \"NONE\"] call BIS_fnc_ambientAnim;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit that will play the animations"
                        },
                        {
                            "name": "animationSet",
                            "description": "`String` - the animation set to play. Possible values:"
                        },
                        {
                            "name": "equipmentLevel",
                            "description": "`String` - the equipment level of the unit. Possible values:"
                        },
                        {
                            "name": "snapTo",
                            "description": "`Object` - (Optional, default `objNull`) the object where the unit will be snapped to"
                        },
                        {
                            "name": "interpolate",
                            "description": "`Boolean` - (Optional, default `false`) should try to interpolate into the ambient animation. Works only for some default stances"
                        },
                        {
                            "name": "attachToLogic",
                            "description": "`Boolean` - (Optional, default `true`) `true` to [attach](https://community.bistudio.com/wiki/attachTo) the unit to the created logic object, forcing it in one position"
                        }
                    ],
                    "outline": "[unit, animationSet, equipmentLevel, snapTo, interpolate, attachToLogic] call `BIS_fnc_ambientAnim`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_ambientAnim"
        },
        "configuration": {
            "label": "BIS_fnc_ambientAnim",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Play set of ambient animations on given unit AND allows the unit to leave the ambient state and engage enemy or move away.\n**NOTE**: Animations can be cancelled using <sqf inline>_unit call BIS_fnc_ambientAnim__terminate.",
            "examples": [
                {
                    "text": "```sqf\n[_unit, \"STAND\", \"FULL\", { (player distance _this) < 5 }] call BIS_fnc_ambientAnimCombat;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit where the animations will be played"
                        },
                        {
                            "name": "animationSet",
                            "description": "`String` - (Optional, default \"STAND\") the animation set to play. Possible values are:"
                        },
                        {
                            "name": "equipmentLevel",
                            "description": "`String` - (Optional, default \"RANDOM\") the equipment level of the unit. Possible values are:"
                        },
                        {
                            "name": "condition",
                            "description": "`Code` or `String` - (Optional, default <sqf inline>{ false }) condition that if true frees the unit from the animation loop"
                        },
                        {
                            "name": "behaviour",
                            "description": "`String` - (Optional, default \"COMBAT\") behaviour the unit should go to, when freed. Default \"COMBAT\""
                        }
                    ],
                    "outline": "[unit, animationSet, equipmentLevel, condition, behaviour] call `BIS_fnc_ambientAnimCombat`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_ambientAnimCombat"
        },
        "configuration": {
            "label": "BIS_fnc_ambientAnimCombat",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Feeds params of given animset to `BIS_fnc_ambientAnim`.",
            "examples": [
                {
                    "text": "```sqf\nprivate _animParams = \"KNEEL\" call BIS_fnc_ambientAnimGetParams;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "animType",
                            "description": "`String` - can be:"
                        }
                    ],
                    "outline": "animType call `BIS_fnc_ambientAnimGetParams`",
                    "returns": "`Array` - animation parameters"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_ambientAnimGetParams"
        },
        "configuration": {
            "label": "BIS_fnc_ambientAnimGetParams",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Check if area is blacklisted. Blacklist triggers are to be named 'bis_ambientBlacklist_#', where # is number from 0 to 99.",
            "examples": [
                {
                    "text": "```sqf\n[1337,1337,0] call BIS_fnc_ambientBlacklist;\n```"
                },
                {
                    "text": "```sqf\n[0] call BIS_fnc_ambientBlacklist;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "input",
                            "description": "`Array` - if array, function checks if givin position is in blacklisted areas. If any `Number` is passed to the function instead of an `Array` blacklisted areas are initialized and saved in BIS_ambientBlacklist"
                        }
                    ],
                    "outline": "[input] call `BIS_fnc_ambientBlacklist`",
                    "returns": "`Boolean` - returns `Boolean` when in blacklisted area, when initialization was triggered, it returns `nil`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_ambientBlacklist"
        },
        "configuration": {
            "label": "BIS_fnc_ambientBlacklist",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Add a new ambient blacklist trigger",
            "examples": [
                {
                    "text": "```sqf\n[BIS_trigger] call BIS_fnc_ambientBlacklistAdd;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "trigger",
                            "description": "`Object` - trigger"
                        }
                    ],
                    "outline": "[trigger] call `BIS_fnc_ambientBlacklistAdd`",
                    "returns": "`Boolean` - returns `true` if it was added successfully"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_ambientBlacklistAdd"
        },
        "configuration": {
            "label": "BIS_fnc_ambientBlacklistAdd",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_ambientBoats` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_ambientBoats"
        },
        "configuration": {
            "label": "BIS_fnc_ambientBoats",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Spawns an air unit that moves from point A to point B, never engaging nor being engaged. It is set as captive and will despawn once it reaches its destination.\n**NOTE**: Created vehicle is [set captive](https://community.bistudio.com/wiki/setCaptive), making its side `civilian`.",
            "examples": [
                {
                    "text": "```sqf\n\n// spawns a Littlebird that flies from position 200,200,50 to 250,250,75 at altitude 100 and normal speed\n[[200,200,50], [250,250,75]] call BIS_fnc_ambientFlyby;\n\n```"
                },
                {
                    "text": "```sqf\n[getPosATL player, getPosATL opforUnit, 400, \"FULL\", \"B_Heli_Light_01_Armed_F\", west] call BIS_fnc_ambientFlyby;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "startPos",
                            "description": "`Position` - start position of the air unit. The Z value does not matter and is replaced by _altitude_"
                        },
                        {
                            "name": "endPos",
                            "description": "`Array` format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL) - end position where the air unit moves to and despawns (through `addWaypoint`)"
                        },
                        {
                            "name": "altitude",
                            "description": "`Number` - (Optional, default 100) height at which air unit will spawn and fly above ground level"
                        },
                        {
                            "name": "speedMode",
                            "description": "`String` - (Optional, default \"NORMAL\") [speed mode](https://community.bistudio.com/wiki/speedMode) at which air unit travels. Possible values are \"LIMITED\", \"NORMAL\" and \"FULL\""
                        },
                        {
                            "name": "classname",
                            "description": "`String` - (Optional, default \"B_Heli_Light_01_F\") vehicle classname defined in `CfgVehicles`"
                        },
                        {
                            "name": "side",
                            "description": "`Side` - (Optional, default `west`) side to which the vehicle belongs"
                        }
                    ],
                    "outline": "[startPos, endPos, altitude, speedMode, classname, side] call `BIS_fnc_ambientFlyby`",
                    "returns": "`Boolean` - `true` if function executed successfully."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_ambientFlyby"
        },
        "configuration": {
            "label": "BIS_fnc_ambientFlyby",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_ambientHelicopters` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_ambientHelicopters"
        },
        "configuration": {
            "label": "BIS_fnc_ambientHelicopters",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Creates ambient airplanes fly-by near airports around the `player`. It will automatically get classes from <sqf inline>configFile >> \"CfgVehicles\" on all planes that have \"ambientType\" attribute &gt; 0.",
            "examples": [
                {
                    "text": "```sqf\n[] call BIS_fnc_ambientPlanes;\n```"
                },
                {
                    "text": "```sqf\n[30, 3000] call BIS_fnc_ambientPlanes;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "quantity",
                            "description": "`Number` - (Optional, default 5)"
                        },
                        {
                            "name": "areaRadius",
                            "description": "`Number` - (Optional, default 10000) - area radius around airports where planes can spawn/fly"
                        },
                        {
                            "name": "dirStep",
                            "description": "`Number` - (Optional, default 30)"
                        }
                    ],
                    "outline": "[quantity, areaRadius, dirStep] call `BIS_fnc_ambientPlanes`",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_ambientPlanes"
        },
        "configuration": {
            "label": "BIS_fnc_ambientPlanes",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Initialize terrain-related postprocess effects.",
            "examples": [
                {
                    "text": "```sqf\n[] call BIS_fnc_ambientPostprocess;\n```"
                },
                {
                    "text": "```sqf\n[\"Malden\", \"ColorCorrections\"] call BIS_fnc_ambientPostprocess;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "terrain",
                            "description": "`String` - (Optional, default `worldName`) terrain from which to take post-process effets configuration"
                        },
                        {
                            "name": "`String` or `Boolean`",
                            "description": "(Optional, default `true`) post-process type to get, or `true` to get all of them. **Any effect but \"filmGrain\"**."
                        }
                    ],
                    "outline": "[terrain, activation] call `BIS_fnc_ambientPostprocess`",
                    "returns": "`Array` of initialized effects with values"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_ambientPostprocess"
        },
        "configuration": {
            "label": "BIS_fnc_ambientPostprocess",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Animal behaviour control. Called by `**Animals_F\\Data\\Scripts\\main.fsm**`.",
            "examples": [
                {
                    "text": "```sqf\n[animal] call BIS_fnc_animalBehaviour;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "animal",
                            "description": "`Object` - the controlled animal"
                        }
                    ],
                    "outline": "[animal] call `BIS_fnc_animalBehaviour`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_animalBehaviour"
        },
        "configuration": {
            "label": "BIS_fnc_animalBehaviour",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Randomise animals skin.\n\nWorks on:\n* \"Alsatian_Random_F\"\n* \"ButterFly_random\"\n* \"Cock_random_F\"\n* \"Fin_random_F\"\n* \"Goat_random_F\"\n* \"Sheep_random_F\"\n* \"Snake_random_F\"",
            "examples": [
                {
                    "text": "```sqf\nmyDog call BIS_fnc_animalRandomization;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "animal call `BIS_fnc_animalRandomization`",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_animalRandomization"
        },
        "configuration": {
            "label": "BIS_fnc_animalRandomization",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Create an area that spawns animals. The animals will be created or deleted if a player is inside or outside the area's radius.",
            "examples": [
                {
                    "text": "```sqf\n[player, [\"rabbit_f\", \"turtle_f\", \"hen_random_f\"], 200] call BIS_fnc_animalSiteSpawn;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "animalSite",
                            "description": "`Object` - the object to create the site around."
                        },
                        {
                            "name": "classnamesToSpawn",
                            "description": "`Array` of `String`s - animals that can be spawned."
                        },
                        {
                            "name": "radius",
                            "description": "`Number` - the radius by which animals are created or deleted."
                        }
                    ],
                    "outline": "[animalSite, classnamesToSpawn, radius] call `BIS_fnc_animalSiteSpawn`",
                    "returns": "[Script Handle](https://community.bistudio.com/wiki/Script%20Handle)"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_animalSiteSpawn"
        },
        "configuration": {
            "label": "BIS_fnc_animalSiteSpawn",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Plays the Animated Briefings. Basically, it is a wrap function for the `BIS_fnc_eventTimeline` function.",
            "examples": [
                {
                    "text": "```sqf\n\n// timeline of events\n_timeline = [\n\t[0.0, { hint \"Start of the Timeline\" }],\n\t[1.0, { hint \"Event 1\" }],\n\t[3.0, { hint \"End of the timeline\" }]\n];\n\n// get markers to be shown at end by using the layer's name\nprivate _showMarkers = (getMissionLayerEntities \"showAtEnd\") select 1;\n\n// start the Animated Briefing at index 0\n// hide all markers and show the markers from the \"showAtEnd\" layer after the briefing is done\n// zoom on marker_rect_1 at the end of the briefing\n[_timeline, 0, \"\", nil, allMapMarkers, _showMarkers, \"marker_rect_1\"] spawn BIS_fnc_animatedBriefing;\n\n// Wait until timeline is over\nwaitUntil { !(missionNamespace getVariable \"BIS_fnc_eventTimeline_playing\"); };\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "timeline",
                            "description": "`Array` - array in format [time, code]: "
                        },
                        {
                            "name": "indexEvent",
                            "description": "`Number` - index of the event to play"
                        },
                        {
                            "name": "music",
                            "description": "`String` - (Optional, default \"\") CfgMusic class"
                        },
                        {
                            "name": "markersHide",
                            "description": "`Array` - (Optional, default `**[]**`) array of markers which should be hidden when briefing starts"
                        },
                        {
                            "name": "markersShow",
                            "description": "`Array` - (Optional, default `**[]**`) array of markers which should be shown when the briefing is done"
                        },
                        {
                            "name": "endPosition",
                            "description": "`String` - (Optional, default \"\") marker to focus when the briefing is done"
                        },
                        {
                            "name": "codeEnd",
                            "description": "`Code` - (Optional, default `**{}<nowiki/>**`) code executed when briefing is done"
                        }
                    ],
                    "outline": "[timeline, indexEvent, music, markersHide, markersShow, endPosition] call `BIS_fnc_animatedBriefing`",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_animatedBriefing"
        },
        "configuration": {
            "label": "BIS_fnc_animatedBriefing",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: BIS\n\n\tDescription:\n\n \tParameters:\n\n\tReturns:\n\tnone\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_animatedOpening`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_animatedOpening"
        },
        "configuration": {
            "label": "BIS_fnc_animatedOpening",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*--------------------------------------------------------------------------------------------------\n\n\tExample:\n\t[_mode] call BIS_fnc_animatedScreen;\n\n--------------------------------------------------------------------------------------------------*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_animatedScreen`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_animatedScreen"
        },
        "configuration": {
            "label": "BIS_fnc_animatedScreen",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Smoothly animates given flag from current position on the flag pole to the given position. When flag animation is done, the {{Link|Arma 3: Scripted Event Handlers|scripted event handler}} {{Link|Arma 3: Scripted Event Handlers#BIS_fnc_animateFlag|\"FlagAnimationDone\"}} is called.",
            "examples": [
                {
                    "text": "```sqf\n[flag1, 0] call BIS_fnc_animateFlag;\n```"
                },
                {
                    "text": "```sqf\n\n// Adding the \"FlagAnimationDone\" EH\nprivate _eh = [<yourflag>, \"FlagAnimationDone\", { /* your code */ }] call BIS_fnc_addScriptedEventHandler;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "flag",
                            "description": "`Object` - `flag` object of the type \"FlagCarrier\""
                        },
                        {
                            "name": "phase",
                            "description": "`Number` - desired animation phase 0..1 (0 - bottom of the flag pole, 1 - top of the flag pole)"
                        },
                        {
                            "name": "instant (Optional, default `false`)",
                            "description": "* `Boolean` - when `true`, animation is instant (\"FlagAnimationDone\" EH is not called in this case)"
                        }
                    ],
                    "outline": "[flag, phase, instant] call `BIS_fnc_animateFlag`",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_animateFlag"
        },
        "configuration": {
            "label": "BIS_fnc_animateFlag",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Translates (relative or absolute), scales (relative or absolute), and sets the alpha over time on the provided control.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _t =\n[\n\t_controlFront,\n\t1,\n\t[[0.5, 0.5], true, false],\n\t[],\n\t0.5\n] \ncall BIS_fnc_animatePicture;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control` - the control to be moved"
                        },
                        {
                            "name": "durationOrSpeed",
                            "description": "`Number` - (Optional, default 2) transition duration _or_ movement speed, depending on _useDuration_"
                        },
                        {
                            "name": "translationPosition",
                            "description": "`Array` format [Position2D](https://community.bistudio.com/wiki/Position%23Position2D) - (Optional, default [0,0])"
                        },
                        {
                            "name": "isRelativeTranslation",
                            "description": "`Boolean` - (Optional, default `true`) is _translationPosition_ relative to the original _control_<nowiki/>'s position"
                        },
                        {
                            "name": "useDuration",
                            "description": "`Boolean` - (Optional, default `true`) if set to `false`, _durationOrSpeed_ will be used as _control_ speed (and effect duration will be recalculated from it)"
                        },
                        {
                            "name": "scalePosition",
                            "description": "`Number` or `Array` of `Number`s - (Optional, default 1) define X and Y scale value"
                        },
                        {
                            "name": "isRelativeScale",
                            "description": "`Boolean` - (Optional, default `true`) is _scalePosition_ relative to the original _control_<nowiki/>'s scale"
                        },
                        {
                            "name": "scalePivot",
                            "description": "`String` - (Optional, default \"center\") case-**in**sensitive. Possible values:"
                        },
                        {
                            "name": "alpha",
                            "description": "`Number` - (Optional, default 0) _control_<nowiki/>'s final opacity"
                        }
                    ],
                    "outline": "[control, durationOrSpeed, [translationPosition, isRelativeTranslation, useDuration], [scalePosition, isRelativeScale, scalePivot], alpha] call `BIS_fnc_animatePicture`",
                    "returns": "`Number` - animation's duration"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_animatePicture"
        },
        "configuration": {
            "label": "BIS_fnc_animatePicture",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Plays an animation that pushes the active task waypoint up and down.",
            "examples": [
                {
                    "text": "```sqf\n[player] call BIS_fnc_animateTaskWaypoint;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "`Object`",
                            "description": "unit that should have animations played."
                        }
                    ],
                    "outline": "param call `BIS_fnc_animateTaskWaypoint`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_animateTaskWaypoint"
        },
        "configuration": {
            "label": "BIS_fnc_animateTaskWaypoint",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Function that returns a categorized array using a single string with the animation name.",
            "examples": [
                {
                    "text": "```sqf\nanimType = [\"AmovPsitMstpSrasWrflDnon\"] call BIS_fnc_animType;\n// Returns [[\"Action\",\"Move\"],[\"Pose\",\"Sit\"],[\"Movement\",\"Stop\"],[\"Stance\",\"Raised\"],[\"Hand item\",\"Rifle\"],[\"Direction\",\"Not specified\"]]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "`String`",
                            "description": "animation name."
                        }
                    ],
                    "outline": "param call `BIS_fnc_animType`",
                    "returns": "`Array` - sorted arrays within an array with details about animation."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_animType"
        },
        "configuration": {
            "label": "BIS_fnc_animType",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Opens the [[Arma 3: Splendid Animation Viewer|Splendid&trade; Animation Viewer]].",
            "examples": [
                {
                    "text": "```sqf\n[] call BIS_fnc_animViewer;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`String` - (Optional, default \"Init\")"
                        },
                        {
                            "name": "arguments",
                            "description": "`Array` - (Optional, default <sqf inline>[])"
                        }
                    ],
                    "outline": "[] call `BIS_fnc_animViewer`\n\n<!--\np0= arrayFromHeader: `Array` - forced animation in format [<unit class>, <animation class>]",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_animViewer"
        },
        "configuration": {
            "label": "BIS_fnc_animViewer",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "This function returns true if all of the passed data elements are of the same type and value. One or more elements can be passed.\n\n**Arma**: 3|In {{arma3, see `isEqualTo`.}}\n\nNote:\n* This function is an improvement over the == operator because it can handle any data type in any combination.\n* For arrays, it returns true if both arrays hold the same elements in the same order.\n* If both values are undefined / nil / null, then this function will return true.",
            "examples": [
                {
                    "text": "```sqf\n\n[0, \"0\"]\t\tcall BIS_fnc_areEqual; // false\n[0, 1 + 1 - 2]\tcall BIS_fnc_areEqual; // true\n[str 50, \"50\"]\tcall BIS_fnc_areEqual; // true\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "anythingM",
                            "description": "`Anything` - any [data type](https://community.bistudio.com/wiki/%3ACategory%3AData_Types)"
                        }
                    ],
                    "outline": "[anything1, anything2, ..., anythingN] call `BIS_fnc_areEqual`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_areEqual"
        },
        "configuration": {
            "label": "BIS_fnc_areEqual",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Compares all elements of passed array between each other and returns true is all are defined and identical.\n\nVery fast, different from `BIS_fnc_areEqual` in that `nil` values will not be considered equal to each other.",
            "examples": [
                {
                    "text": "```sqf\n\n[[1, 2, [3, [4, 5]]],\t[1, 2, [3, [4, 5]]]]\tcall BIS_fnc_areEqualNotNil; // true\n[[1, 2, [3, [4, nil]]],\t[1, 2, [3, [4, nil]]]]\tcall BIS_fnc_areEqualNotNil; // false\n\n```"
                },
                {
                    "text": "```sqf\n[nil, nil] call BIS_fnc_areEqualNotNil; // false\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "anythings",
                            "description": "`Anything` - `nil` values won't be considered equal"
                        }
                    ],
                    "outline": "[anything1, anything2, …] call `BIS_fnc_areEqualNotNil`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_areEqualNotNil"
        },
        "configuration": {
            "label": "BIS_fnc_areEqualNotNil",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Function that takes two `Side`s and compares them, returning whether they are friendly or not.",
            "examples": [
                {
                    "text": "```sqf\nprivate _areFriendly = [west, east] call BIS_fnc_areFriendly;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "side1",
                            "description": "`Side` - first side, will be compared to second side."
                        },
                        {
                            "name": "side2",
                            "description": "`Side` - second side, will be compared to first side."
                        }
                    ],
                    "outline": "[side1, side2] call `BIS_fnc_areFriendly`",
                    "returns": "`Boolean` - true if sides are friendly to each other, false if not."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_areFriendly"
        },
        "configuration": {
            "label": "BIS_fnc_areFriendly",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns the {{Link|https://en.wikipedia.org/wiki/Mean#Arithmetic_mean_(AM)|arithmetic mean}} (\"average value\") of an array of numbers.",
            "examples": [
                {
                    "text": "```sqf\n[1, 3] call BIS_fnc_arithmeticMean; // returns 2\n```"
                },
                {
                    "text": "```sqf\n[1, 9, 8, 2] call BIS_fnc_arithmeticMean; // returns 5\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "numbers",
                            "description": "`Array` of `Number`s - must not be empty"
                        }
                    ],
                    "outline": "numbers call `BIS_fnc_arithmeticMean`",
                    "returns": "`Number` - arithmetic mean"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_arithmeticMean"
        },
        "configuration": {
            "label": "BIS_fnc_arithmeticMean",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "This function checks if two arrays are containing the same elements in the same order.\n**IMPORTANT**: This function is deprecated in Arma 2 as it fails with certain data types; see `BIS_fnc_areEqual` for Arma 2.\n**Arma**: 3|Use `isEqualTo` instead.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _array1 = [0,1,2];\nprivate _array2 = [0,1,2];\n[_array1, _array2] call BIS_fnc_arrayCompare; // returns true\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array1",
                            "description": "`Array`"
                        },
                        {
                            "name": "array2",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "[array1, array2] call `BIS_fnc_arrayCompare`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_arrayCompare"
        },
        "configuration": {
            "label": "BIS_fnc_arrayCompare",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Searches an array for a specific value and returns its index.",
            "examples": [
                {
                    "text": "```sqf\n[[1,2,3,4,5], 3] call BIS_fnc_arrayFindDeep;//Returns [2]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array` - array to be searched"
                        },
                        {
                            "name": "value `Anything`",
                            "description": "value to be searched for"
                        }
                    ],
                    "outline": "[array,value] call `BIS_fnc_arrayFindDeep`",
                    "returns": "`Array` - returns array with index of found element, if it was not found it returns -1"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_arrayFindDeep"
        },
        "configuration": {
            "label": "BIS_fnc_arrayFindDeep",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Inserts the elements of one array into another, at a specified index. Neither arrays are touched by reference, a new array is returned.",
            "examples": [
                {
                    "text": "```sqf\nprivate _result = [[0,1,2,3,4], [\"a\",\"b\",\"c\"], 1] call BIS_fnc_arrayInsert; // returns [0,\"a\",\"b\",\"c\",1,2,3,4]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array1",
                            "description": "`Array` - array to insert into"
                        },
                        {
                            "name": "array2",
                            "description": "`Array` - array to be inserted"
                        },
                        {
                            "name": "index",
                            "description": "`Number` - insertion index"
                        }
                    ],
                    "outline": "[array1, array2, index] call `BIS_fnc_arrayInsert`",
                    "returns": "`Array` - a new array"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_arrayInsert"
        },
        "configuration": {
            "label": "BIS_fnc_arrayInsert",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "This function removes the last (rightmost) element of an array and returns it.\n\n**The array is passed by reference** so changes inside the function will be reflected outside of it.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _array = [1,2,3,4];\n_removedElement = _array call BIS_fnc_arrayPop; // _array is now [1,2,3] and _removedElement = 4\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "array call `BIS_fnc_arrayPop`",
                    "returns": "`Anything` - the removed array element"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_arrayPop"
        },
        "configuration": {
            "label": "BIS_fnc_arrayPop",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "This function adds an element to the end of an array and returns the array.\n\n**The array is passed by reference** so changes inside the function will be reflected outside of it.\n\n**Arma**: 3|Use `append` or `pushBack` instead.",
            "examples": [
                {
                    "text": "```sqf\n_newArray = [[0,1,2], 3] call BIS_fnc_arrayPush; // _newArray is [0,1,2,3]\n```"
                },
                {
                    "text": "```sqf\nprivate _array = [0,1,2]; [_array, [3]] call BIS_fnc_arrayPush; // _array is [0,1,2,[3]]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array`"
                        },
                        {
                            "name": "element",
                            "description": "`Anything`"
                        }
                    ],
                    "outline": "[array, element] call `BIS_fnc_arrayPush`",
                    "returns": "`Array` - modified _array_"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_arrayPush"
        },
        "configuration": {
            "label": "BIS_fnc_arrayPush",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "This function is similar to the array push function; however, it pushes the contents of an array onto the stack array.\n**Arma**: 3|Use `append` or `pushBack` instead",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _array = [0,1,2];\n[_array, [3,4,5]] call BIS_fnc_arrayPushStack; // _array is [0,1,2,3,4,5]\n\n```"
                },
                {
                    "text": "```sqf\nprivate _array = [[5, 6, 7], [8, [9], 10]] call BIS_fnc_arrayPushStack; // _array is [5, 6, 7, 8, [9], 10]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array1",
                            "description": "`Array`"
                        },
                        {
                            "name": "array2",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "[array1, array2] call `BIS_fnc_arrayPushStack`",
                    "returns": "`Array` - the modified _array1_"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_arrayPushStack"
        },
        "configuration": {
            "label": "BIS_fnc_arrayPushStack",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "This function removes the first (leftmost) element of an array and returns it.\n\nThe array is passed by reference so changes inside the function will be reflected outside of it.\n\n**Arma**: 3|In {{arma3, use <sqf inline>array deleteAt 0.}}",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _myArray = [\"2\", \"report\", \"status\"];\n_removedElement = [_myArray] call BIS_fnc_arrayShift;\t// array is -within an array-\n_removedElement == \"2\";\t\t\t\t\t\t\t\t\t// true\n_myArray isEqualTo [\"report\", \"status\"];\t\t\t\t// true\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array` - **NOTE:** given array must be within an array (e.g <sqf inline>[[10, 20, 30]] call BIS_fnc_arrayShift)"
                        }
                    ],
                    "outline": "[array] call `BIS_fnc_arrayShift`",
                    "returns": "`Anything` - the removed element"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_arrayShift"
        },
        "configuration": {
            "label": "BIS_fnc_arrayShift",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return a new array with randomized order of elements from input array.",
            "examples": [
                {
                    "text": "```sqf\n[1,2,3] call BIS_fnc_arrayShuffle; // can return [1,2,3] (the original order), [3,1,2], [2,3,1], [1,3,2], [2,1,3] or [3,2,1]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "array call `BIS_fnc_arrayShuffle`",
                    "returns": "`Array` - a new array instance"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_arrayShuffle"
        },
        "configuration": {
            "label": "BIS_fnc_arrayShuffle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "This function adds an element to the beginning of an array and returns the array.\nThe array is passed by reference so changes inside the function will be reflected outside of it.",
            "examples": [
                {
                    "text": "```sqf\nprivate _array = [2,3,4];\n[_array, 1] call BIS_fnc_arrayUnShift;\t\t\t\t\t\t// _array is now [1,2,3,4]\n```"
                },
                {
                    "text": "```sqf\nprivate _array = [[2,3,4], 1] call BIS_fnc_arrayUnShift;\t// _array is now [1,2,3,4]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array`"
                        },
                        {
                            "name": "value",
                            "description": "`Anything`"
                        }
                    ],
                    "outline": "[array, value] call `BIS_fnc_arrayUnShift`",
                    "returns": "`Array` - _array_ reference"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_arrayUnShift"
        },
        "configuration": {
            "label": "BIS_fnc_arrayUnShift",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Function used for the [Virtual Arsenal](https://community.bistudio.com/wiki/Arma%203%3A%20Arsenal). The function features four different modes, each mode comes with its own parameters.\n**NOTE**: If Arsenal is launched within the first second from the mission start, the unit loadout will be randomised.",
            "examples": [
                {
                    "text": "Opens [Arsenal](https://community.bistudio.com/wiki/Arma%203%3A%20Arsenal) with all items:\n\n```sqf\n[\"Open\", [true]] call BIS_fnc_arsenal;\n```"
                },
                {
                    "text": "Preloads [Arsenal](https://community.bistudio.com/wiki/Arma%203%3A%20Arsenal)'s config:\n\n```sqf\n[\"Preload\"] call BIS_fnc_arsenal;\n```"
                },
                {
                    "text": "Adds full `Arsenal` to the `player` object and makes the [action](https://community.bistudio.com/wiki/addAction) available when the player is closer than 10 meters from ammoBox:\n\n```sqf\n[\"AmmoboxInit\", [ammoBox, true, { _this distance _target  < 10 }]] call BIS_fnc_arsenal;\n```"
                },
                {
                    "text": "Removes Arsenal from player object:\n\n```sqf\n[\"AmmoboxExit\", player] call BIS_fnc_arsenal;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`String` - mode, can be one of:"
                        },
                        {
                            "name": "params",
                            "description": "`Anything` - mode parameters:"
                        }
                    ],
                    "outline": "[mode, params] call `BIS_fnc_arsenal`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_arsenal"
        },
        "configuration": {
            "label": "BIS_fnc_arsenal",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Ensures the player can only get in the specific vehicle role.",
            "examples": [
                {
                    "text": "```sqf\n[myVehicle, \"turret\", [0, 1]] call BIS_fnc_assignPlayerRole;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - targeted vehicle"
                        },
                        {
                            "name": "role",
                            "description": "`String` - can be one of:"
                        },
                        {
                            "name": "path",
                            "description": "`Array` or `Number`s - the turret path"
                        }
                    ],
                    "outline": "[vehicle, role, path] call `BIS_fnc_assignPlayerRole`",
                    "returns": "`Boolean` - `true` when done"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_assignPlayerRole"
        },
        "configuration": {
            "label": "BIS_fnc_assignPlayerRole",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Attaches object 1 to object 2, while preserving object 1 initial position and orientation against object 2.",
            "examples": [
                {
                    "text": "```sqf\n[tank, car] call BIS_fnc_attachToRelative;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object1",
                            "description": "`Object`"
                        },
                        {
                            "name": "object2",
                            "description": "`Object`"
                        },
                        {
                            "name": "visual",
                            "description": "`Boolean` (Optional, default `true`) if `true` render scope is used else simulation scope. See [Simulation vs Render Time Scope](https://community.bistudio.com/wiki/Simulation%20vs%20Render%20Time%20Scope) for more information"
                        }
                    ],
                    "outline": "[object1, object2, visual] call `BIS_fnc_attachToRelative`",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_attachToRelative"
        },
        "configuration": {
            "label": "BIS_fnc_attachToRelative",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns base vehicle (i.e., vehicle which is not just derivative of other with different textures / animations).",
            "examples": [
                {
                    "text": "```sqf\n[\"O_MBT_04_cannon_F\"] call BIS_fnc_baseVehicle;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "class",
                            "description": "`String` - vehicle class"
                        }
                    ],
                    "outline": "class call `BIS_fnc_baseVehicle`",
                    "returns": "class: `String` - base vehicle class"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_baseVehicle"
        },
        "configuration": {
            "label": "BIS_fnc_baseVehicle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Determines base weapon class, with no attachments.",
            "examples": [
                {
                    "text": "```sqf\n[\"arifle_Mk20_MRCO_pointer_F\"] call BIS_fnc_baseWeapon; // Returns \"arifle_Mk20_F\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "weaponName",
                            "description": "`String` - weapon classname."
                        }
                    ],
                    "outline": "[weaponName] call `BIS_fnc_baseWeapon`",
                    "returns": "`String` - weapon classname that features no attachments."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_baseWeapon"
        },
        "configuration": {
            "label": "BIS_fnc_baseWeapon",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Determines basic backpack with no equipment present (ie empty).",
            "examples": [
                {
                    "text": "```sqf\nbaseBackpack = \"b_assaultpack_rgr_medic\" call BIS_fnc_basicBackpack; // returns \"b_assaultpack_rgr\", the base class\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "`String`",
                            "description": "backpack classname."
                        }
                    ],
                    "outline": "backPackClassName call `BIS_fnc_basicBackpack`",
                    "returns": "`String` - returns classname of base backpack."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_basicBackpack"
        },
        "configuration": {
            "label": "BIS_fnc_basicBackpack",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3|Internally used **.fsm**.",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": []
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_basicTask"
        },
        "configuration": {
            "label": "BIS_fnc_basicTask",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Derivative of the {{Link|https://en.wikipedia.org/wiki/Kelvin_functions|Kelvin function}} {{Link|https://en.wikipedia.org/wiki/Kelvin_functions#ber(x)|ber}}.",
            "examples": [
                {
                    "text": "```sqf\nprivate _value = [0, 1, 0.5] call BIS_fnc_berp;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "a",
                            "description": "`Number` - (Optional, default 0) first point (start)"
                        },
                        {
                            "name": "b",
                            "description": "`Number` - (Optional, default 0) second point (end)"
                        },
                        {
                            "name": "delta",
                            "description": "`Number` - (Optional, default 0) the delta time, 0..1"
                        }
                    ],
                    "outline": "[a, b, delta] call `BIS_fnc_berp`",
                    "returns": "`Number` - the interpolated value"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_berp"
        },
        "configuration": {
            "label": "BIS_fnc_berp",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Wrapper for `BIS_fnc_berp` applying to each respective element of current and target vectors.",
            "examples": [
                {
                    "text": "```sqf\nprivate _vector = [[1,2,3], [11,12,13], 0.1] call BIS_fnc_berpVector;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "a",
                            "description": "`Array` format `Vector3D` - (Optional, default [0,0,0]) the current vector"
                        },
                        {
                            "name": "b",
                            "description": "`Array` format `Vector3D` - (Optional, default [0,0,0]) the target vector"
                        },
                        {
                            "name": "delta",
                            "description": "`Number` - (Optional, default 0) the delta time in range 0..1"
                        }
                    ],
                    "outline": "[a, b, delta] call `BIS_fnc_berpVector`",
                    "returns": "`Array` - the interpolated vector"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_berpVector"
        },
        "configuration": {
            "label": "BIS_fnc_berpVector",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_bezierInterpolate`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_bezierInterpolate"
        },
        "configuration": {
            "label": "BIS_fnc_bezierInterpolate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_bezierInterpolateVector`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_bezierInterpolateVector"
        },
        "configuration": {
            "label": "BIS_fnc_bezierInterpolateVector",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_bezierLength`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_bezierLength"
        },
        "configuration": {
            "label": "BIS_fnc_bezierLength",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Checks if one or more flags are set in the given flagset, represented with decimal or hexadecimal number\n\n(Hexadecimal number representation is simply auto-converted into decimal by the engine)\n\nIn other words, it simply performs a [[BIS_fnc_bitwiseAND|bitwise AND (&)]] operation on the two numbers: `**flags & flagset > 0**`\n\nTo check which flags are present in given flagset use `BIS_fnc_bitflagsToArray`",
            "examples": [
                {
                    "text": "```sqf\n\n[2 + 4 + 8, 8] call BIS_fnc_bitflagsCheck; // true\n[2 + 4 + 8, 2 + 32] call BIS_fnc_bitflagsCheck; // true\n[2 + 4 + 8, 1] call BIS_fnc_bitflagsCheck; // false\n[2 + 4 + 8, 1 + 32] call BIS_fnc_bitflagsCheck; // false\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "flagset",
                            "description": "`Number` - flagset"
                        },
                        {
                            "name": "flag",
                            "description": "`Number` - one or more flags to check"
                        }
                    ],
                    "outline": "[flagset, flag] call `BIS_fnc_bitflagsCheck`",
                    "returns": "`Boolean`\n* `true`: one or more flags are set in given flagset\n* `false`: no given flag or flags are set in the given flagset"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_bitflagsCheck"
        },
        "configuration": {
            "label": "BIS_fnc_bitflagsCheck",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Flips one or more flags (set gets unset and vice versa) in the given flagset, represented with decimal or hexadecimal number\n\n(Hexadecimal number representation is simply auto-converted into decimal by the engine)\n\nTo check which flags are present in given flagset use `BIS_fnc_bitflagsToArray`\n\n\n**Limitations**:\n\nDue to various limitations of the Real Virtuality engine this function is \nintended to work with unsigned 24 bit integers only. This means that the \nsupported range is 2^0...2^24 (1...16777216)",
            "examples": [
                {
                    "text": "```sqf\n[1 + 16, 8] call BIS_fnc_bitflagsFlip; // 25 (which is 1 + 8 + 16)\n[25, 8] call BIS_fnc_bitflagsFlip; // 17 (which is 1 + 16)\n[2 + 4 + 8, 2 + 8] call BIS_fnc_bitflagsFlip; // 4\n[4, 2 + 8] call BIS_fnc_bitflagsFlip; // 14 (which is 2 + 4 + 8)\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "flagset",
                            "description": "`Number` - flagset"
                        },
                        {
                            "name": "flag",
                            "description": "`Number` - one or more flags to flip"
                        }
                    ],
                    "outline": "[flagset, flag] call `BIS_fnc_bitflagsFlip`",
                    "returns": "`Number`  - new flagset with given flag or flags flipped"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_bitflagsFlip"
        },
        "configuration": {
            "label": "BIS_fnc_bitflagsFlip",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Sets one or more flags in the given flagset, represented with decimal or hexadecimal number\n\n(Hexadecimal number representation is simply auto-converted into decimal by the engine)\n\nTo check which flags are present in given flagset use `BIS_fnc_bitflagsToArray`\n\n\n**Limitations**:\n\nDue to various limitations of the Real Virtuality engine this function is \nintended to work with unsigned 24 bit integers only. This means that the \nsupported range is 2^0...2^24 (1...16777216)",
            "examples": [
                {
                    "text": "```sqf\n[0, 16] call BIS_fnc_bitflagsSet; // 16\n[16, 2] call BIS_fnc_bitflagsSet; // 18 (which is 2 + 16)\n[18, 2 + 8 + 16] call BIS_fnc_bitflagsSet; // 26 (which is 2 + 8 + 16)\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "flagset",
                            "description": "`Number` - flagset"
                        },
                        {
                            "name": "flag",
                            "description": "`Number` - one or more flags to set"
                        }
                    ],
                    "outline": "[flagset, flag] call `BIS_fnc_bitflagsSet`",
                    "returns": "`Number`  - new flagset with given flag or flags set"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_bitflagsSet"
        },
        "configuration": {
            "label": "BIS_fnc_bitflagsSet",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns array with all bit flags which are set in the given flagset\n\n\n**Limitations**:\n\nDue to various limitations of the Real Virtuality engine this function is \nintended to work with unsigned 24 bit integers only. This means that the \nsupported range is 2^0...2^24 (1...16777216)",
            "examples": [
                {
                    "text": "```sqf\n15 call BIS_fnc_bitflagsToArray; // [1,2,4,8]\n2342 call BIS_fnc_bitflagsToArray; // [2,4,32,256,2048]\n[2 + 4 + 8] call BIS_fnc_bitflagsToArray; // [2,4,8]\n[2 + 2 + 2 + 4 + 8 + 8 + 8] call BIS_fnc_bitflagsToArray; // [2,32]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "flagset",
                            "description": "`Number` - decimal or hexadecimal unsigned 24 bit integer"
                        }
                    ],
                    "outline": "flagset call `BIS_fnc_bitflagsToArray`",
                    "returns": "`Array` - array of set bit flags"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_bitflagsToArray"
        },
        "configuration": {
            "label": "BIS_fnc_bitflagsToArray",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Unsets one or more flags in the given flagset, represented with decimal or hexadecimal number\n\n(Hexadecimal number representation is simply auto-converted into decimal by the engine)\n\nTo check which flags are present in given flagset use `BIS_fnc_bitflagsToArray`\n\n\n**Limitations**:\n\nDue to various limitations of the Real Virtuality engine this function is \nintended to work with unsigned 24 bit integers only. This means that the \nsupported range is 2^0...2^24 (1...16777216)",
            "examples": [
                {
                    "text": "```sqf\n[2 + 4 + 8, 8] call BIS_fnc_bitflagsUnset; // 6 (which is 2 + 4)\n[2 + 4 + 8, 2 + 8] call BIS_fnc_bitflagsUnset; // 4\n[2 + 4 + 8, 1 + 8] call BIS_fnc_bitflagsUnset; // 6 (which is 2 + 4)\n[2 + 4 + 8, 1 + 8 + 8 + 2 + 2] call BIS_fnc_bitflagsUnset; // 10 (which is 2 + 8, since 1 + 8 + 8 + 2 + 2 is in fact 1 + 4 + 16)\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "flagset",
                            "description": "`Number` - flagset"
                        },
                        {
                            "name": "flag",
                            "description": "`Number` - one or more flags to unset"
                        }
                    ],
                    "outline": "[flagset, flag] call `BIS_fnc_bitflagsUnset`",
                    "returns": "`Number`  - new flagset with given flag or flags unset"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_bitflagsUnset"
        },
        "configuration": {
            "label": "BIS_fnc_bitflagsUnset",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Performs bitwise AND operation on two decimal or hexadecimal unsigned 24 bit integers \n(Hexadecimal number representation is simply auto-converted into decimal by the engine)\n\n\n**Limitations**:\n\nDue to various limitations of the Real Virtuality engine this function is \nintended to work with unsigned 24 bit integers only. This means that the \nsupported range is 2^0...2^24 (1...16777216)",
            "examples": [
                {
                    "text": "```sqf\n[2 + 4 + 8 + 32, 1] call BIS_fnc_bitwiseAND; // 0\n[2 + 4 + 8 + 32, 2] call BIS_fnc_bitwiseAND; // 2\n[1 + 2 + 16 + 32, 4 + 8] call BIS_fnc_bitwiseAND; // 0\n[1 + 2 + 16 + 32, 4 + 32] call BIS_fnc_bitwiseAND; // 32\n[1 + 2 + 16 + 32, 16 + 32] call BIS_fnc_bitwiseAND; // 48\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "num1",
                            "description": "`Number` - decimal or hexadecimal unsigned 24 bit integer"
                        },
                        {
                            "name": "num2",
                            "description": "`Number` - decimal or hexadecimal unsigned 24 bit integer"
                        }
                    ],
                    "outline": "[num1, num2] call `BIS_fnc_bitwiseAND`",
                    "returns": "`Number` - decimal number"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_bitwiseAND"
        },
        "configuration": {
            "label": "BIS_fnc_bitwiseAND",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Performs bitwise NOT operation on decimal or hexadecimal unsigned 24 bit integer \n(Hexadecimal number representation is simply auto-converted into decimal by the engine)\n\n\n**Limitations**:\n\nDue to various limitations of the Real Virtuality engine this function is \nintended to work with unsigned 24 bit integers only. This means that the \nsupported range is 2^0...2^24 (1...16777216)",
            "examples": [
                {
                    "text": "```sqf\n873687 call BIS_fnc_bitwiseNOT; // 15903528\n[2 + 4 + 8 + 32 + 256 + 1024] call BIS_fnc_bitwiseNOT; // 16775889\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "num",
                            "description": "`Number` - decimal or hexadecimal unsigned 24 bit integer"
                        }
                    ],
                    "outline": "num call `BIS_fnc_bitwiseNOT`",
                    "returns": "`Number` - decimal number"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_bitwiseNOT"
        },
        "configuration": {
            "label": "BIS_fnc_bitwiseNOT",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Performs bitwise OR operation on two decimal or hexadecimal unsigned 24 bit integers \n(Hexadecimal number representation is simply auto-converted into decimal by the engine)\n\n\n**Limitations**:\n\nDue to various limitations of the Real Virtuality engine this function is \nintended to work with unsigned 24 bit integers only. This means that the \nsupported range is 2^0...2^24 (1...16777216)",
            "examples": [
                {
                    "text": "```sqf\n[2 + 4 + 8 + 32, 1] call BIS_fnc_bitwiseOR; // 47\n[1 + 2 + 16 + 32, 4 + 8] call BIS_fnc_bitwiseOR; // 63\n[1 + 2 + 16 + 32, 4 + 32] call BIS_fnc_bitwiseOR; // 55\n[1 + 2 + 16 + 32, 16 + 32] call BIS_fnc_bitwiseOR; // 51\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "num1",
                            "description": "`Number` - decimal or hexadecimal unsigned 24 bit integer"
                        },
                        {
                            "name": "num2",
                            "description": "`Number` - decimal or hexadecimal unsigned 24 bit integer"
                        }
                    ],
                    "outline": "[num1, num2] call `BIS_fnc_bitwiseOR`",
                    "returns": "`Number` - decimal number"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_bitwiseOR"
        },
        "configuration": {
            "label": "BIS_fnc_bitwiseOR",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Performs bitwise XOR operation on two decimal or hexadecimal unsigned 24 bit integers \n(Hexadecimal number representation is simply auto-converted into decimal by the engine)\n\n\n**Limitations**:\n\nDue to various limitations of the Real Virtuality engine this function is \nintended to work with unsigned 24 bit integers only. This means that the \nsupported range is 2^0...2^24 (1...16777216)",
            "examples": [
                {
                    "text": "```sqf\n[1 + 4 + 16, 1] call BIS_fnc_bitwiseXOR; // 20\n[1 + 2 + 32, 4 + 8] call BIS_fnc_bitwiseXOR; // 47\n[16 + 32, 4 + 16] call BIS_fnc_bitwiseXOR; // 36\n[1 + 16 + 32, 2 + 32] call BIS_fnc_bitwiseXOR; // 19\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "num1",
                            "description": "`Number` - decimal or hexadecimal unsigned 24 bit integer"
                        },
                        {
                            "name": "num2",
                            "description": "`Number` - decimal or hexadecimal unsigned 24 bit integer"
                        }
                    ],
                    "outline": "[num1, num2] call `BIS_fnc_bitwiseXOR`",
                    "returns": "`Number` - decimal number"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_bitwiseXOR"
        },
        "configuration": {
            "label": "BIS_fnc_bitwiseXOR",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Unregister a black screen. When none other black screen is registered, fade it out.",
            "examples": [
                {
                    "text": "```sqf\n[\"TAG_aVeryUniqueID\", false, 5] call BIS_fnc_blackIn;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "id",
                            "description": "`String` - black screen id used for registration (case sensitive)"
                        },
                        {
                            "name": "smoothing",
                            "description": "`Boolean` - (Optional, default `true`) smooth transition - `false` for an immediate blackout"
                        },
                        {
                            "name": "fadeSpeed",
                            "description": "`Number` - (Optional, default 2) transition duration (if _smoothing_ is `true`)"
                        }
                    ],
                    "outline": "[id, smoothing, fadeSpeed] call `BIS_fnc_blackIn`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_blackIn"
        },
        "configuration": {
            "label": "BIS_fnc_blackIn",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Register a black screen. Start the black screen when the first request is registered.",
            "examples": [
                {
                    "text": "```sqf\n[\"TAG_aVeryUniqueID\", false, 5] call BIS_fnc_blackOut;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "id",
                            "description": "`String` - black screen id used for registration (case sensitive)"
                        },
                        {
                            "name": "smoothing",
                            "description": "`Boolean` - (Optional, default `true`) smooth transition - `false` for an immediate blackout"
                        },
                        {
                            "name": "fadeSpeed",
                            "description": "`Number` - (Optional, default 2) transition duration (if _smoothing_ is `true`)"
                        }
                    ],
                    "outline": "[id, smoothing, fadeSpeed] call `BIS_fnc_blackOut`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_blackOut"
        },
        "configuration": {
            "label": "BIS_fnc_blackOut",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Function that handles bleeding ticket system. Tickets are set beforehand using `BIS_fnc_respawnTickets`.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_bleedTickets;\n```"
                },
                {
                    "text": "```sqf\n[[west, east], 1, 1, 10] call BIS_fnc_bleedTickets;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "sides",
                            "description": "`Array` - (Optional, default All sides) array of effected sides"
                        },
                        {
                            "name": "dominanceRatio",
                            "description": "`Number` - (Optional, default 0.5) dominance ratio, values from 0 to 1. Determines how much of a sector a side must hold for bleeding tickets to start"
                        },
                        {
                            "name": "bleedingAmount",
                            "description": "`Number` - (Optional, default 3) amount of tickets bled every step. Optional parameter"
                        },
                        {
                            "name": "bleedingDelay",
                            "description": "`Object` - (Optional, default 5) delay in seconds between every bleeding step"
                        }
                    ],
                    "outline": "[sides, dominanceRatio, bleedingAmount, bleedingDelay] call `BIS_fnc_bleedTickets`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_bleedTickets"
        },
        "configuration": {
            "label": "BIS_fnc_bleedTickets",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Makes given marker blink.",
            "examples": [
                {
                    "text": "```sqf\n[\"BIS_marker\", 3, 10] spawn BIS_fnc_blinkMarker; // blinks 10 times using 3 seconds intervals\n```"
                },
                {
                    "text": "```sqf\n[\"BIS_marker\"] spawn BIS_fnc_blinkMarker; // keeps blinking\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "marker",
                            "description": "`String` - marker's name"
                        },
                        {
                            "name": "blinkDuration",
                            "description": "`Number` - (Optional, default 1) a blink's time"
                        },
                        {
                            "name": "blinkAmount",
                            "description": "`Number` - (Optional, default 2) quantity of blinks"
                        }
                    ],
                    "outline": "[marker, blinkDuration, blinkAmount] spawn `BIS_fnc_blinkMarker`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_blinkMarker"
        },
        "configuration": {
            "label": "BIS_fnc_blinkMarker",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Adds the bleeding effect post-processing effect to the players screen.",
            "examples": [
                {
                    "text": "```sqf\n[10] call BIS_fnc_bloodEffect; // Adds the blood effect for 10 (milli)seconds.\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "`Number`",
                            "description": "duration in (milli?)seconds in which effect should be visible."
                        }
                    ],
                    "outline": "[10] call `BIS_fnc_bloodEffect`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_bloodEffect"
        },
        "configuration": {
            "label": "BIS_fnc_bloodEffect",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Bravo Zero One development\n\t- John_Spartan\n\n\tDescription:\n\t- This is sub function for 'boat recovery' functionality.\n\n\tExecution:\n\t- Call from trigger that is added to object (boat rack).\n\n\tExample:\n\t\t\"[thisTrigger,thisList] call BIS_fnc_boatRack01ActionAdd;\"\n\n\tRequired:\n\t\tObject (boat rack) must have vehicle in vehicle behavior configured (https://community.bistudio.com/wiki/Arma_3_Vehicle_in_Vehicle_Transport).\n\t\tObject (boat rack) must have triggers set up with continuous actions.\n\n\tParameter(s):\n\t\t_this select 0: mode (Scalar)\n\t\t0: trigger object\n\t\tand\n\t\tother parameters from trigger's & players vehicle's names-pace's.\n\n\tReturns: nothing\n\tResult: Continuous action added for players vehicle.\n\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_boatRack01ActionAdd`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_boatRack01ActionAdd"
        },
        "configuration": {
            "label": "BIS_fnc_boatRack01ActionAdd",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "`BIS_fnc_BoatRack01ActionCondition`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_BoatRack01ActionCondition"
        },
        "configuration": {
            "label": "BIS_fnc_BoatRack01ActionCondition",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Bravo Zero One development\n\t- John_Spartan\n\n\tDescription:\n\t- This is sub function for 'boat recovery' functionality.\n\n\tExecution:\n\t- Call from trigger that is added to object (boat rack).\n\n\tExample:\n\t\t\"[thisTrigger] call BIS_fnc_boatRack01ActionRemove;\"\n\n\tRequired:\n\t\tObject (boat rack) must have vehicle in vehicle behavior configured (https://community.bistudio.com/wiki/Arma_3_Vehicle_in_Vehicle_Transport).\n\t\tObject (boat rack) must have triggers set up with continuous actions.\n\n\tParameter(s):\n\t\t_this select 0: mode (Scalar)\n\t\t0: trigger object\n\t\tand\n\t\tother parameters from trigger's & players vehicle's names-pace's.\n\n\tReturns: nothing\n\tResult: Continuous action removed from player.\n\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_boatRack01ActionRemove`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_boatRack01ActionRemove"
        },
        "configuration": {
            "label": "BIS_fnc_boatRack01ActionRemove",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Bravo Zero One development\n\t- John_Spartan\n\n\tDescription:\n\t- This is sub function for 'boat recovery' functionality.\n\n\tExecution:\n\t- Call from Init EH script that is added to object (boat rack) or from action code.\n\n\tExample:\n\t\t[_boatRack, _boat] call BIS_fnc_boatRack01AdjustZOffset;\n\n\tRequired:\n\t\tObject (boat rack) must have vehicle in vehicle behavior configured (https://community.bistudio.com/wiki/Arma_3_Vehicle_in_Vehicle_Transport).\n\t\tObject (boat rack) must have triggers set up with continuous actions.\n\t\tObject (boat rack) must have set of Z offset's predefined in cfgVehicles for know/supported boat types.\n\n\t\tParameters used from cfgVehicles configuration:\n\t\tcargoBayAnimationSelection \t\t= \"CargoBay_Move_Z\";\n\t\tsupportedVehicleOffsetsZ[]\t\t= {{\"C_Boat_Civil_01_F\",0.55}};\n\n\tParameter(s):\n\t\t_this select 0: mode (Scalar)\n\t\t0: boat rack object\n\t\t1: boat in cargo\n\t\tand\n\t\tother parameters from boat rack's cfgVehicles configuration.\n\n\tReturns: nothing\n\tResult: Adjusts the hight (Z offset) of boat rack suspension to prevent different boats clipping with visual mesh.\n\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_boatRack01AdjustZOffset`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_boatRack01AdjustZOffset"
        },
        "configuration": {
            "label": "BIS_fnc_boatRack01AdjustZOffset",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Bravo Zero One development\n\t- John_Spartan\n\n\tDescription:\n\t- This is sub function for 'boat recovery' functionality.\n\n\tExecution:\n\t- Call from script that invokes the \"Hold Action\" for boat recovery.\n\n\tExample:\n\t\t[_target,_boatRack] call BIS_fnc_boatRack01CanExetuteAction;\n\n\tRequired:\n\t\tObject (boat)\n\t\tObject (boat rack) must have vehicle in vehicle behavior configured (https://community.bistudio.com/wiki/Arma_3_Vehicle_in_Vehicle_Transport).\n\n\tParameter(s):\n\t\t_this select 0: mode (Scalar)\n\t\t0: Object (boat)\n\t\t1: Object (boat rack)\n\n\tReturns: true if all conditions are met to display the \"Hold Action\"\n\tResult: Check to show \"Hold Action\" to player.\n\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_boatRack01CanExetuteAction`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_boatRack01CanExetuteAction"
        },
        "configuration": {
            "label": "BIS_fnc_boatRack01CanExetuteAction",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Bravo Zero One development\n\t- John_Spartan\n\n\tDescription:\n\t- This is sub function for 'boat recovery' functionality.\n\n\tExecution:\n\t- Call from script that invokes the \"Hold Action\" for boat recovery.\n\n\tExample:\n\t\t[_target,_boatRack] call BIS_fnc_boatRack01CanProgressAction;\n\n\tRequired:\n\t\tObject (boat)\n\t\tObject (boat rack) must have vehicle in vehicle behavior configured (https://community.bistudio.com/wiki/Arma_3_Vehicle_in_Vehicle_Transport).\n\n\tParameter(s):\n\t\t_this select 0: mode (Scalar)\n\t\t0: Object (boat)\n\t\t1: Object (boat rack)\n\n\tReturns: true if all conditions are met during the process of \"Hold Action\", can continue with action\n\tResult: Check to allow continue with \"Hold Action\".\n\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_boatRack01CanProgressAction`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_boatRack01CanProgressAction"
        },
        "configuration": {
            "label": "BIS_fnc_boatRack01CanProgressAction",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Bravo Zero One development\n\t- John_Spartan\n\n\tDescription:\n\t- This is main function for 'boat recovery' functionality.\n\n\tExecution:\n\t- Call from assets init EH.\n\n\tExample:\n\t\tclass Eventhandlers\n\t\t{\n\t\t\tinit = \"_this call BIS_fnc_BoatRack01Init;\";\n\t\t};\n\n\tRequired:\n\t\tObject (boat rack) must have vehicle in vehicle behavior configured (https://community.bistudio.com/wiki/Arma_3_Vehicle_in_Vehicle_Transport).\n\n\tParameter(s):\n\t\t_this select 0: mode (Scalar)\n\t\t0: boat rack object\n\t\tand\n\t\tother parameters from configuration\n\n\tReturns: nothing\n\tResult: Two triggers are added near object to allow user to interact with feature.\n\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_boatRack01Init`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_boatRack01Init"
        },
        "configuration": {
            "label": "BIS_fnc_boatRack01Init",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Bravo Zero One development\n\t- John_Spartan\n\n\tDescription:\n\t- This is sub function for 'boat recovery' functionality.\n\n\tExecution:\n\t- Call from Init EH script that is added to object (boat rack).\n\n\tExample:\n\t\t[_boatRack] spawn BIS_fnc_boatRack01InitAdjustZOffsets;\n\n\tRequired:\n\t\tObject (boat rack) must have vehicle in vehicle behavior configured (https://community.bistudio.com/wiki/Arma_3_Vehicle_in_Vehicle_Transport).\n\t\tObject (boat rack) must have triggers set up with continuous actions.\n\t\tObject (boat rack) must have set of Z offset's predefined in cfgVehicles for know/supported boat types.\n\n\t\tParameters used from cfgVehicles configuration:\n\t\tcargoBayAnimationSelection \t\t= \"CargoBay_Move_Z\";\n\t\tsupportedVehicleOffsetsZ[]\t\t= {{\"C_Boat_Civil_01_F\",0.55}};\n\n\tParameter(s):\n\t\t_this select 0: mode (Scalar)\n\t\t0: boat rack object\n\t\tand\n\t\tother parameters from boat rack's cfgVehicles configuration.\n\n\tReturns: nothing\n\tResult: On mission startup adjusts the hight (Z offset) of boat rack suspension to prevent different boats clipping with visual mesh.\n\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_boatRack01InitAdjustZOffsets`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_boatRack01InitAdjustZOffsets"
        },
        "configuration": {
            "label": "BIS_fnc_boatRack01InitAdjustZOffsets",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_bounceIn`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_bounceIn"
        },
        "configuration": {
            "label": "BIS_fnc_bounceIn",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_bounceInOut`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_bounceInOut"
        },
        "configuration": {
            "label": "BIS_fnc_bounceInOut",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_bounceInOutVector`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_bounceInOutVector"
        },
        "configuration": {
            "label": "BIS_fnc_bounceInOutVector",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_bounceInVector`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_bounceInVector"
        },
        "configuration": {
            "label": "BIS_fnc_bounceInVector",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_bounceOut`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_bounceOut"
        },
        "configuration": {
            "label": "BIS_fnc_bounceOut",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_bounceOutVector`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_bounceOutVector"
        },
        "configuration": {
            "label": "BIS_fnc_bounceOutVector",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>\n/*\n\n\tDescription:\n\t\tReturns position of all four bounding box corners\n\t\tOR\n\t\tReturns position of the nearest corner to the given position\n\n\tParameter(s):\n\t\t_this: OBJECT - object with bounding box\n\t\tOR\n\t\t_this: ARRAY in format:\n\t\t\t0: OBJECT - object with bounding box\n\t\t\t1: ARRAY or OBJECT - position for which the nearest corner is returned\n\tReturns:\n\t\tARRAY in format [pos1, pos2, pos3, pos4] - 4 corners of the bounding box\n\t\tOR\n\t\tARRAY in format [x,y,z] - position of the nearest corner\n\t\t\n\tExample 1:\n\t\t_corners = car call BIS_fnc_boundingBoxCorner;\n\t\t\n\tExample 2:\n\t\t_nearestCorner = [car, player] call BIS_fnc_boundingBoxCorner;\n\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_boundingBoxCorner` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_boundingBoxCorner"
        },
        "configuration": {
            "label": "BIS_fnc_boundingBoxCorner",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns the sizes of the three dimensions of an object's bounding box.",
            "examples": [
                {
                    "text": "```sqf\nplayer call BIS_fnc_boundingBoxDimensions;//Returns [1.6,2.2,2] for soldier\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - object which bounding box should be returned."
                        }
                    ],
                    "outline": "object call `BIS_fnc_boundingBoxDimensions`",
                    "returns": "`Array` - bounding box dimensions in [X, Y, Z]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_boundingBoxDimensions"
        },
        "configuration": {
            "label": "BIS_fnc_boundingBoxDimensions",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Creates marker on object with size of objects' bounding box.",
            "examples": [
                {
                    "text": "```sqf\nBIS_Vehicle call BIS_fnc_boundingBoxMarker;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "object call `BIS_fnc_boundingBoxMarker`",
                    "returns": "`String` - marker\n<!---"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_boundingBoxMarker"
        },
        "configuration": {
            "label": "BIS_fnc_boundingBoxMarker",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns size of bounding circle (calculated from X and Y coordinates). This is actually the 2D horizontal diagonal length of the `boundingBox`.",
            "examples": [
                {
                    "text": "```sqf\nvehicle player call BIS_fnc_boundingCircle;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "object call `BIS_fnc_boundingCircle`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_boundingCircle"
        },
        "configuration": {
            "label": "BIS_fnc_boundingCircle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Animate briefing markers.",
            "examples": [
                {
                    "text": "```sqf\n\n// given you have 6 markers:\n// - \"myMarker\"\n// - \"myMarker_0\"\n// - \"myMarker_1\"\n// - \"myMarker_2\"\n// - \"myMarker_3\"\n// - \"myMarker_4\"\nfor \"_i\" from 0 to 4 do {\n\tprivate _commit = 1;\n\t[\"myMarker\", 5, _commit] call BIS_fnc_briefingAnimate;\n\tsleep _commit;\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String` - marker to animate"
                        },
                        {
                            "name": "stepId",
                            "description": "`Number` - step ID (steps are invisible markers named `**&lt;_markerName_&gt;_&lt;_stepId_&gt;**`)"
                        },
                        {
                            "name": "delay",
                            "description": "`String` - commit time (transition duration)"
                        }
                    ],
                    "outline": "[markerName, stepId, delay] call `BIS_fnc_briefingAnimate`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_briefingAnimate"
        },
        "configuration": {
            "label": "BIS_fnc_briefingAnimate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Initialize animated briefing markers.",
            "examples": [
                {
                    "text": "\"marker_1\" `call` `BIS_fnc_briefingInit`;"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "marker",
                            "description": "`String` - marker to initialise"
                        }
                    ],
                    "outline": "marker call `BIS_fnc_briefingInit`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_briefingInit"
        },
        "configuration": {
            "label": "BIS_fnc_briefingInit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Get all available positions within a building or structure.",
            "examples": [
                {
                    "text": "```sqf\n[_building] call BIS_fnc_buildingPositions;\n```"
                },
                {
                    "text": "```sqf\n[_building, _maxNumberOfPositions] call BIS_fnc_buildingPositions;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "param",
                            "description": "`Object`"
                        },
                        {
                            "name": "param",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "param call `BIS_fnc_buildingPositions`",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_buildingPositions"
        },
        "configuration": {
            "label": "BIS_fnc_buildingPositions",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns the end datetime if an offset is passed, or the offset between start and end dates.",
            "examples": [
                {
                    "text": "```sqf\n\n[date, 3600] call BIS_fnc_calculateDateTime;\t\t\t\t\t\t\t\t// returns date in 3600 seconds (60min, 1h)\n[date, 60, \"m\"] call BIS_fnc_calculateDateTime;\t\t\t\t\t\t\t\t// returns date in 60 minutes (1h)\n[[2035,8,28,11,55], [2035,8,29,11,55], \"h\"] call BIS_fnc_calculateDateTime;\t// returns 24\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "startDate",
                            "description": "`Array` in `Date` format - (Optional, default `date`)"
                        },
                        {
                            "name": "endDateOrOffset",
                            "description": "`Array` in `Date` format or `Number` - (Optional, default `date`) either the end date of the period to calculate, or time in seconds from _startDate_"
                        },
                        {
                            "name": "timeUnit",
                            "description": "`String` - (Optional, default \"s\") one of:"
                        }
                    ],
                    "outline": "[startDate, endDateOrOffset, timeUnit] call `BIS_fnc_calculateDateTime`",
                    "returns": "`Date` or `Number`\n* `Date` if _endDateOrOffset_ is a `Number`\n* `Number` is _endDateOrOffset_ is a `Date`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_calculateDateTime"
        },
        "configuration": {
            "label": "BIS_fnc_calculateDateTime",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Execute given code with or without parameter.\n**Arma**: 3|Since **(Arma 3)**",
            "examples": [
                {
                    "text": "Show a message for the current player.\n\n```sqf\n[[\"Hello\"], {hint (_this select 0);}] call BIS_fnc_call;\n```"
                },
                {
                    "text": "Alternative syntax\n\n```sqf\n{ hint \"Hello\"; } call BIS_fnc_call;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "params",
                            "description": "`Anything` - function arguments"
                        },
                        {
                            "name": "code",
                            "description": "`Code` - function code"
                        },
                        {
                            "name": "code",
                            "description": "`Code`"
                        }
                    ],
                    "outline": "code call `BIS_fnc_call`",
                    "returns": "`Anything`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_call"
        },
        "configuration": {
            "label": "BIS_fnc_call",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Calls all the codes assigned to scripted event handler with given name. Since **(Arma 3)** the code receives current EH id in the special variable: `**_thisScriptedEventHandler**`",
            "examples": [
                {
                    "text": "```sqf\n[missionNamespace, \"event\", [player, 123]] call BIS_fnc_callScriptedEventHandler;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "namespace",
                            "description": "`Namespace`, `Object`, `Group`, `Location`, `Boolean`, `Control` or `Display` - namespace in which handler is saved"
                        },
                        {
                            "name": "name",
                            "description": "`String` - handler name"
                        },
                        {
                            "name": "arguments",
                            "description": "`Array` - array of arguments passed to the EH code"
                        },
                        {
                            "name": "returnResults",
                            "description": "`Boolean` - (Optional, default `false`) if `true` EH will place results from each code execution into an array using EH id as index"
                        }
                    ],
                    "outline": "[namespace, name, arguments, returnResults] call `BIS_fnc_callScriptedEventHandler`",
                    "returns": "`Array` - array with EH results or empty array"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_callScriptedEventHandler"
        },
        "configuration": {
            "label": "BIS_fnc_callScriptedEventHandler",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Splendid™ Camera, _\"Ultimate Screenshot Simulator\"_",
            "examples": [
                {
                    "text": "```sqf\n[] call BIS_fnc_camera;\n```"
                },
                {
                    "text": "```sqf\n[] spawn BIS_fnc_camera;\n```"
                },
                {
                    "text": "```sqf\n[\"Init\"] call BIS_fnc_camera;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`String` - (Optional, default \"Init\") **case-sensitive**, for internal use. Can be one of:"
                        },
                        {
                            "name": "parameter",
                            "description": "`Anything` - (Optional, default <sqf inline>[])"
                        }
                    ],
                    "outline": "[mode, parameter] call `BIS_fnc_camera`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_camera"
        },
        "configuration": {
            "label": "BIS_fnc_camera",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Deletes given camera.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_camera] call BIS_fnc_camera_deleted;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object` - the camera"
                        }
                    ],
                    "outline": "[camera] call `BIS_fnc_camera_deleted`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_camera_deleted"
        },
        "configuration": {
            "label": "BIS_fnc_camera_deleted",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tAttributes change in EDEN for a camera\n\n\tParameter(s):\n\t_this select 0: Object\t- The camera\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_camera_edenAttributesChanged`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_camera_edenAttributesChanged"
        },
        "configuration": {
            "label": "BIS_fnc_camera_edenAttributesChanged",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\t3DEN connections of a camera are changed\n\n\tParameter(s):\n\t_this select 0: Object\t- The camera\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_camera_edenConnectionChanged`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_camera_edenConnectionChanged"
        },
        "configuration": {
            "label": "BIS_fnc_camera_edenConnectionChanged",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tCamera is deleted\n\n\tParameter(s):\n\t_this select 0: Object - The destroyed camera\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_camera_edenDeleted`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_camera_edenDeleted"
        },
        "configuration": {
            "label": "BIS_fnc_camera_edenDeleted",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tCamera is initialized in 3den\n\n\tParameter(s):\n\t_this select 0: Object\t- The camera\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_camera_edenInit`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_camera_edenInit"
        },
        "configuration": {
            "label": "BIS_fnc_camera_edenInit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tWhether this camera is selected in 3den\n\n\tParameter(s):\n\t_this select 0: Object\t- The camera\n\n\tReturns:\n\tBool - True if selected, false if not\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_camera_edenIsSelected`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_camera_edenIsSelected"
        },
        "configuration": {
            "label": "BIS_fnc_camera_edenIsSelected",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_camera_edenRegisteredToWorld`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_camera_edenRegisteredToWorld"
        },
        "configuration": {
            "label": "BIS_fnc_camera_edenRegisteredToWorld",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tResets camera in 3DEN\n\n\tParameter(s):\n\t_this select 0: Object\t- The camera\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_camera_edenReset`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_camera_edenReset"
        },
        "configuration": {
            "label": "BIS_fnc_camera_edenReset",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tThe selection state of given camera changes\n\n\tParameter(s):\n\t_this select 0: Object\t- The camera\n\t_this select 1: Bool\t- True if selected, false if not\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_camera_edenSelectionChanged`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_camera_edenSelectionChanged"
        },
        "configuration": {
            "label": "BIS_fnc_camera_edenSelectionChanged",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tAttributes change in EDEN for a camera\n\n\tParameter(s):\n\t_this select 0: Object\t- The camera\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_camera_edenUnregisteredFromWorld`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_camera_edenUnregisteredFromWorld"
        },
        "configuration": {
            "label": "BIS_fnc_camera_edenUnregisteredFromWorld",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Gets camera instance of camerea object",
            "examples": [
                {
                    "text": "```sqf\n[BIS_camera] call BIS_fnc_camera_getCam;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object` - the camera"
                        }
                    ],
                    "outline": "[camera] call `BIS_fnc_camera_getCam`",
                    "returns": "`Object` - camera instance"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_camera_getCam"
        },
        "configuration": {
            "label": "BIS_fnc_camera_getCam",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Check if camera uses cinema borders.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_camera] call BIS_fnc_camera_getCinemaBordersEnabled;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object` - the camera"
                        }
                    ],
                    "outline": "[camera] call `BIS_fnc_camera_getCinemaBordersEnabled`",
                    "returns": "`Boolean` - returns `true` if cinema borders are used"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_camera_getCinemaBordersEnabled"
        },
        "configuration": {
            "label": "BIS_fnc_camera_getCinemaBordersEnabled",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns camera focus.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_camera] call BIS_fnc_camera_getFocus;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object` - the camera"
                        }
                    ],
                    "outline": "[camera] call `BIS_fnc_camera_getFocus`",
                    "returns": "`Array` - array with focus values in format [distance, blur]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_camera_getFocus"
        },
        "configuration": {
            "label": "BIS_fnc_camera_getFocus",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Gets FOV of camera.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_camera] call BIS_fnc_camera_getFOV;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object` - the camera"
                        }
                    ],
                    "outline": "[camera] call `BIS_fnc_camera_getFOV`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_camera_getFOV"
        },
        "configuration": {
            "label": "BIS_fnc_camera_getFOV",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns wether camera HUD is enabled.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_camera] call BIS_fnc_camera_getHUDEnabled;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object` - the camera"
                        }
                    ],
                    "outline": "[camera] call `BIS_fnc_camera_getHUDEnabled`",
                    "returns": "`Boolean` - returns `true` if HUD is enabled"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_camera_getHUDEnabled"
        },
        "configuration": {
            "label": "BIS_fnc_camera_getHUDEnabled",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns camera vision mode.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_camera] call BIS_fnc_camera_getVisionMode;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object` - the camera"
                        }
                    ],
                    "outline": "[camera] call `BIS_fnc_camera_getVisionMode`",
                    "returns": "`Number` - \n0 - no vision mode\n1 - Night vision\n2 - Ti"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_camera_getVisionMode"
        },
        "configuration": {
            "label": "BIS_fnc_camera_getVisionMode",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Initialises a camera.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_camera] call BIS_fnc_camera_init;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object` - the camera"
                        }
                    ],
                    "outline": "[camera] call `BIS_fnc_camera_init`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_camera_init"
        },
        "configuration": {
            "label": "BIS_fnc_camera_init",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Sets camera instance of camera object.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_camera,BIS_camera_instance] call BIS_fnc_camera_setCam;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object` - the camera"
                        },
                        {
                            "name": "cameraInstance",
                            "description": "`Object` - camera instance"
                        }
                    ],
                    "outline": "[camera, cameraInstance] call `BIS_fnc_camera_setCam`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_camera_setCam"
        },
        "configuration": {
            "label": "BIS_fnc_camera_setCam",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Sets cinema borders.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_camera,true] call BIS_fnc_camera_setCinemaBordersEnabled;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object` - the camera"
                        },
                        {
                            "name": "enabled",
                            "description": "`Boolean` - (Optional, default `false`) `true` to show cinema borders, `false` to hide them."
                        }
                    ],
                    "outline": "[camera, enabled] call `BIS_fnc_camera_setCinemaBordersEnabled`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_camera_setCinemaBordersEnabled"
        },
        "configuration": {
            "label": "BIS_fnc_camera_setCinemaBordersEnabled",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Sets camera focus.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_camera, [0.5,0.5]] call BIS_fnc_camera_setFocus;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object` - the camera"
                        },
                        {
                            "name": "focusValues",
                            "description": "`Array` - (Optional, default [-1, -1]) focus values in format [distance, blur]"
                        }
                    ],
                    "outline": "[camera, focusValues] call `BIS_fnc_camera_setFocus`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_camera_setFocus"
        },
        "configuration": {
            "label": "BIS_fnc_camera_setFocus",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Sets the FOV of given camera.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_camera,0.5] call BIS_fnc_camera_setFOV;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object` - the camera"
                        },
                        {
                            "name": "FOV",
                            "description": "`Number` - (Optional, default 0,75) wanted FOV"
                        }
                    ],
                    "outline": "[camera, FOV] call `BIS_fnc_camera_setFOV`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_camera_setFOV"
        },
        "configuration": {
            "label": "BIS_fnc_camera_setFOV",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Enables or disables camera HUD.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_camera,true] call BIS_fnc_camera_setHUDEnabled;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object` - the camera"
                        },
                        {
                            "name": "state",
                            "description": "`Boolean` - (Optional, default `false`) `true` to enable HUD, `false` to disable"
                        }
                    ],
                    "outline": "[camera, state] call `BIS_fnc_camera_setHUDEnabled`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_camera_setHUDEnabled"
        },
        "configuration": {
            "label": "BIS_fnc_camera_setHUDEnabled",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Sets camera vision mode.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_camera,1] call BIS_fnc_camera_setVisionMode;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object` - the camera"
                        },
                        {
                            "name": "mode",
                            "description": "`Number` - (Optional, default 0)"
                        }
                    ],
                    "outline": "[camera, mode] call `BIS_fnc_camera_setVisionMode`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_camera_setVisionMode"
        },
        "configuration": {
            "label": "BIS_fnc_camera_setVisionMode",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Ticks a camera. Updates position and view mode.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_camera] call BIS_fnc_camera_tick;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object` - the camera"
                        }
                    ],
                    "outline": "[camera] call `BIS_fnc_camera_tick`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_camera_tick"
        },
        "configuration": {
            "label": "BIS_fnc_camera_tick",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Classic camera script, replaced by the Splendid™ `BIS_fnc_camera`.",
            "examples": [
                {
                    "text": "```sqf\n[player] call BIS_fnc_cameraOld; // starts the camera on the player\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Object` - (Optional, default `cameraOn`)"
                        }
                    ],
                    "outline": "[target] call `BIS_fnc_cameraOld`",
                    "returns": "[Script Handle](https://community.bistudio.com/wiki/Script%20Handle)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_cameraOld"
        },
        "configuration": {
            "label": "BIS_fnc_cameraOld",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Refresh a camera Field of View according to its distance with the target.",
            "examples": [
                {
                    "text": "```sqf\nprivate _camera = \"camera\" camCreate ((getPos player) vectorAdd [0,0,3]);\n[_camera, player, -2] call BIS_fnc_camFollow;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camera",
                            "description": "`Object`"
                        },
                        {
                            "name": "target",
                            "description": "`Object` or `Position`"
                        },
                        {
                            "name": "refreshTime",
                            "description": "`Number` - (Optional, default 1) transition time in seconds."
                        }
                    ],
                    "outline": "[camera, target, refreshTime] call `BIS_fnc_camFollow`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_camFollow"
        },
        "configuration": {
            "label": "BIS_fnc_camFollow",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Cancels a marker by a red 'X' marker. Also sets its variable to \"Canceled\" to `true`.",
            "examples": [
                {
                    "text": "```sqf\n[\"BIS_marker\",2,1.5,75] spawn BIS_fnc_cancelMarker;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "marker",
                            "description": "`String` - marker"
                        },
                        {
                            "name": "duration",
                            "description": "`Number` - (Optional, default 1) duration of canceling in seconds"
                        },
                        {
                            "name": "fadeTime",
                            "description": "`Number` - (Optional, default -1) time in seconds after which cancel marker fades. If value is <0 then marker won't fade out and will be deleted after duration"
                        },
                        {
                            "name": "sizeMultiplier",
                            "description": "`Number` - (Optional, default 1) multiplier for a size of the 'cancel' marker compared to the original"
                        },
                        {
                            "name": "angleOffset",
                            "description": "`Number` - (Optional, default 45) angle offset from the original marker"
                        }
                    ],
                    "outline": "[marker, duration, fadeTime, sizeMultiplier, angleOffset] spawn `BIS_fnc_cancelMarker`",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_cancelMarker"
        },
        "configuration": {
            "label": "BIS_fnc_cancelMarker",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Play car alarm effect.",
            "examples": [
                {
                    "text": "```sqf\n[\"init\", myCar] call BIS_fnc_carAlarm;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`String` - can be one of:"
                        },
                        {
                            "name": "car",
                            "description": "`Object` - vehicle protected by alarm"
                        }
                    ],
                    "outline": "[mode, car] call `BIS_fnc_carAlarm`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_carAlarm"
        },
        "configuration": {
            "label": "BIS_fnc_carAlarm",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return cargo index of a person turret and the other way around.",
            "examples": [
                {
                    "text": "```sqf\nprivate _vehicle = vehicle player;\nprivate _turretCargoIndex = [_vehicle, [0, 1]] call BIS_fnc_cargoTurretIndex;\nprivate _playerTurretPath = [_vehicle, player] call BIS_fnc_cargoTurretIndex;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - the vehicle to check"
                        },
                        {
                            "name": "personOrTurretPath",
                            "description": "[Person](https://community.bistudio.com/wiki/Object%23Person) or `Array` of `Number`s - unit to find or turret path"
                        }
                    ],
                    "outline": "[vehicle, personOrTurretPath] call `BIS_fnc_cargoTurretIndex`",
                    "returns": "`Array` (turret path) or `Number` (cargo index)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_cargoTurretIndex"
        },
        "configuration": {
            "label": "BIS_fnc_cargoTurretIndex",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Plays a set of animations to animate the carriers' catapult jet blast deflectors. See [Arma 3: Aircraft Systems](https://community.bistudio.com/wiki/Arma%203%3A%20Aircraft%20Systems) for information about needed config changes.",
            "examples": [
                {
                    "text": "```sqf\n[_carrierPart, [\"Deflector_1\", \"Deflector_1_hydraulic_1\", \"Deflector_1_hydraulic_2\", \"Deflector_1_hydraulic_3\"], 10] spawn BIS_fnc_carrier01AnimateDeflectors;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "[carrierPart, animations, animationState] spawn `BIS_fnc_carrier01AnimateDeflectors`",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_carrier01AnimateDeflectors"
        },
        "configuration": {
            "label": "BIS_fnc_carrier01AnimateDeflectors",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_carrier01CatapultActionAdd` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_carrier01CatapultActionAdd"
        },
        "configuration": {
            "label": "BIS_fnc_carrier01CatapultActionAdd",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_carrier01CatapultActionRemove` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_carrier01CatapultActionRemove"
        },
        "configuration": {
            "label": "BIS_fnc_carrier01CatapultActionRemove",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_carrier01CatapultID` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_carrier01CatapultID"
        },
        "configuration": {
            "label": "BIS_fnc_carrier01CatapultID",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_carrier01CatapultLockTo` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_carrier01CatapultLockTo"
        },
        "configuration": {
            "label": "BIS_fnc_carrier01CatapultLockTo",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_carrier01CrewInAnim` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_carrier01CrewInAnim"
        },
        "configuration": {
            "label": "BIS_fnc_carrier01CrewInAnim",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_carrier01CrewPlayAnim` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_carrier01CrewPlayAnim"
        },
        "configuration": {
            "label": "BIS_fnc_carrier01CrewPlayAnim",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Bravo Zero One development\n\t- John_Spartan\n\n\tDescription:\n\t- This is a sub function designed to delete dynamic aircrfat carrier in EDEN editor. Carrier consists of multiple sub-objects that are linked together bnased on precise memory point positions in 3D space.\n\tFunction will delete carrier parts in EDEN editor after main object is deleted.\n\n\tExucution:\n\t- Call from EH on the main carrier base model (blank model with momory points and reference config).\n\n\t\tExample:\n\t\tclass Eventhandlers\n\t\t{\n\t\t\tinit = \"_this call BIS_fnc_Carrier01Init\";\t\t\t\t\t\t\t\t//main init fnc, will assemble carrier in game\n\t\t\tAttributesChanged3DEN = \"_this call BIS_fnc_Carrier01EdenInit\";\t\t\t//function to update objects position in EDEN editor if attributes changed by player\n\t\t\tDragged3DEN = \"_this call BIS_fnc_Carrier01PosUpdate\";\t\t\t\t\t//function to update objects position in EDEN editor if attributes changed by player\n\t\t\tRegisteredToWorld3DEN = \"_this call BIS_fnc_Carrier01EdenInit\";\t\t\t//initial EDEN init fnc (main init is still called)\n\t\t\tUnregisteredFromWorld3DEN = \"_this call BIS_fnc_Carrier01EdenDelete\";\t//function  to delete all carrier objects in EDEN editor\n\t\t};\n\n\tRequirments:\n\t- An array of carrier parts/objects as a variable attached to main carrier base. This array is created by main BIS_fnc_Carrier01Init.\n\n\tParameter(s):\n\t\t_this select 0: mode (Scalar)\n\t\t0: carrier Base/object\n\t\tand\n\t\t1: array of objects in variable in base objects namespace [\"bis_carrierParts\", []];\n\n\tReturns: nothing\n\tResult: Aircraft Carrier's parts are deleted in EDEN editor.\n\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_carrier01EdenDelete` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_carrier01EdenDelete"
        },
        "configuration": {
            "label": "BIS_fnc_carrier01EdenDelete",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Bravo Zero One development\n\t- John_Spartan\n\n\tDescription:\n\t- This is a sub function designed to assemble dynamic aircrfat carrier in EDEN editor. Carrier consists of multiple sub-objects that are linked together bnased on precise memory point positions in 3D space.\n\tFunction will update initial init setup on EDEN editor invoked.\n\n\tExucution:\n\t- Call from EH on the main carrier base model (blank model with momory points and reference config).\n\n\t\tExample:\n\t\tclass Eventhandlers\n\t\t{\n\t\t\tinit = \"_this call BIS_fnc_Carrier01Init\";\t\t\t\t\t\t\t\t//main init fnc, will assemble carrier in game\n\t\t\tAttributesChanged3DEN = \"_this call BIS_fnc_Carrier01EdenInit\";\t\t\t//function to update objects position in EDEN editor if attributes changed by player\n\t\t\tDragged3DEN = \"_this call BIS_fnc_Carrier01PosUpdate\";\t\t\t\t\t//function to update objects position in EDEN editor if attributes changed by player\n\t\t\tRegisteredToWorld3DEN = \"_this call BIS_fnc_Carrier01EdenInit\";\t\t\t//initial EDEN init fnc (main init is still called)\n\t\t\tUnregisteredFromWorld3DEN = \"_this call BIS_fnc_Carrier01EdenDelete\";\t//function  to delete all carrier objects in EDEN editor\n\t\t};\n\n\tRequirments:\n\t- An array of carrier parts/objects as a variable attached to main carrier base. This array is created by main BIS_fnc_Carrier01Init.\n\n\tParameter(s):\n\t\t_this select 0: mode (Scalar)\n\t\t0: carrier Base/object\n\t\tand\n\t\t1: array of objects in variable in base objects namespace [\"bis_carrierParts\", []];\n\n\tReturns: nothing\n\tResult: Aircraft Carrier's possition is updated in EDEN editor.\n\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_carrier01EdenInit` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_carrier01EdenInit"
        },
        "configuration": {
            "label": "BIS_fnc_carrier01EdenInit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "This is a main function designed to assemble a dynamic aircraft carrier.\nA carrier consists of multiple sub-objects that are linked together based on precise memory point positions in 3D space.",
            "examples": [
                {
                    "text": "```sqf\nmyCarrier call BIS_fnc_carrier01Init;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "carrier",
                            "description": "`Object` - an object from which the script will wait to [get variable](https://community.bistudio.com/wiki/getVariable) \"BIS_carrierParts\""
                        }
                    ],
                    "outline": "carrier call `BIS_fnc_carrier01Init`",
                    "returns": "[Script Handle](https://community.bistudio.com/wiki/Script%20Handle)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_carrier01Init"
        },
        "configuration": {
            "label": "BIS_fnc_carrier01Init",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Bravo Zero One development\n\t- John_Spartan\n\n\tDescription:\n\t- This is a sub function designed to update dynamic aircraft carriers position in EDEN editor. Carrier consists of multiple sub-objects that are linked together bnased on precise memory point positions in 3D space.\n\tFunction will update initial object positions when player drggs the object in EDEN editor.\n\n\tExucution:\n\t- Call from EH on the main carrier base model (blank model with momory points and reference config).\n\n\t\tExample:\n\t\tclass Eventhandlers\n\t\t{\n\t\t\tinit = \"_this call BIS_fnc_Carrier01Init\";\t\t\t\t\t\t\t\t//main init fnc, will assemble carrier in game\n\t\t\tAttributesChanged3DEN = \"_this call BIS_fnc_Carrier01EdenInit\";\t\t\t//function to update objects position in EDEN editor if attributes changed by player\n\t\t\tDragged3DEN = \"_this call BIS_fnc_Carrier01PosUpdate\";\t\t\t\t\t//function to update objects position in EDEN editor if attributes changed by player\n\t\t\tRegisteredToWorld3DEN = \"_this call BIS_fnc_Carrier01EdenInit\";\t\t\t//initial EDEN init fnc (main init is still called)\n\t\t\tUnregisteredFromWorld3DEN = \"_this call BIS_fnc_Carrier01EdenDelete\";\t//function  to delete all carrier objects in EDEN editor\n\t\t};\n\n\tRequirments:\n\t- An array of carrier parts/objects as a variable attached to main carrier base. This array is created by main BIS_fnc_Carrier01Init.\n\n\tParameter(s):\n\t\t_this select 0: mode (Scalar)\n\t\t0: carrier Base/object\n\t\tand\n\t\t1: array of objects in variable in base objects namespace [\"bis_carrierParts\", []];\n\n\tReturns: nothing\n\tResult: Aircraft Carrier's possition is updated in EDEN editor.\n\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_carrier01PosUpdate` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_carrier01PosUpdate"
        },
        "configuration": {
            "label": "BIS_fnc_carrier01PosUpdate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Makes the marker go from its original color to a specified color over time",
            "examples": [
                {
                    "text": "```sqf\n[\"BIS_marker\",\"ColorRed\"] spawn BIS_fnc_changeColorMarker;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "marker",
                            "description": "`String` - marker"
                        },
                        {
                            "name": "color",
                            "description": "`String` - color from CfgMarkerColors"
                        },
                        {
                            "name": "duration",
                            "description": "`Number` - (Optional, default 1) duration of transition in seconds"
                        }
                    ],
                    "outline": "[marker, color, duration] spawn `BIS_fnc_changeColorMarker`",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_changeColorMarker"
        },
        "configuration": {
            "label": "BIS_fnc_changeColorMarker",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tChanges the radio channel for Support module-related protocol.\n\n\tParameter(s):\n\t_this select 0: SIDE - Affected side\n\t_this select 1: ANY - Channel setting\n\n\tReturns:\n\tnothing\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_changeSupportRadioChannel` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_changeSupportRadioChannel"
        },
        "configuration": {
            "label": "BIS_fnc_changeSupportRadioChannel",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Creates cinematic borders. Player cannot move during cutscene.",
            "examples": [
                {
                    "text": "```sqf\n[1, 2, true, true] call BIS_fnc_cinemaBorder;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`Number` - can be:"
                        },
                        {
                            "name": "duration",
                            "description": "`Number` - (Optional, default 1.5) duration in seconds"
                        },
                        {
                            "name": "sound",
                            "description": "`Boolean` - (Optional, default `true`) play sound"
                        },
                        {
                            "name": "view",
                            "description": "`Boolean` - (Optional, default `false`) lock 1st-person-view"
                        }
                    ],
                    "outline": "[mode, duration, sound, view] call `BIS_fnc_cinemaBorder`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_cinemaBorder"
        },
        "configuration": {
            "label": "BIS_fnc_cinemaBorder",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Clamps provided value within min..max range.\n**NOTE**: This function is for readability; for performance, directly use `min` and `max`.",
            "examples": [
                {
                    "text": "<sqf notrim>\n [5, 0, 10] call BIS_fnc_clamp;\t// returns 5\n [0, 0, 10] call BIS_fnc_clamp;\t// returns 0\n[10, 0, 10] call BIS_fnc_clamp;\t// returns 10\n[-5, 0, 10] call BIS_fnc_clamp;\t// returns 0\n[15, 0, 10] call BIS_fnc_clamp;\t// returns 10\n [5, 10, 3] call BIS_fnc_clamp;\t// returns 10"
                },
                {
                    "text": "```sqf\n\n[5, 0, 10] call BIS_fnc_clamp;\t// 0.0098 ms\n0 max 5 min 10;\t\t\t\t\t// 0.0011 ms - about 10x faster\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "value",
                            "description": "`Number` - value to be clamped"
                        },
                        {
                            "name": "min",
                            "description": "`Number` - (Optional, default 0) lower limit"
                        },
                        {
                            "name": "max",
                            "description": "`Number` - (Optional, default 0) upper limit"
                        }
                    ],
                    "outline": "[value, min, max] call `BIS_fnc_clamp`",
                    "returns": "`Number` - the clamped value"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_clamp"
        },
        "configuration": {
            "label": "BIS_fnc_clamp",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Clamps vector values between provided min/max boundaries.\n\n**NOTE**: This function can be used to clamp any `Array` of `Number`s (even though it is not its main usage).",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _newVelocity = [velocity vehicle player, -100, 100] call BIS_fnc_clampVector;\nvehicle player setVelocity _newVelocity;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vector",
                            "description": "`Vector3D` - (Optional, default [0,0,0]) the vector to be clamped"
                        },
                        {
                            "name": "min",
                            "description": "`Number` - (Optional, default 0)"
                        },
                        {
                            "name": "max",
                            "description": "`Number` - (Optional, default 0)"
                        }
                    ],
                    "outline": "[vector, min, max] call `BIS_fnc_clampVector`",
                    "returns": "`Vector3D` - the clamped _vector_"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_clampVector"
        },
        "configuration": {
            "label": "BIS_fnc_clampVector",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns class of magazine given by string.",
            "examples": [
                {
                    "text": "```sqf\nprivate _magazineConfig = currentMagazine player call BIS_fnc_classMagazine;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "magazineClass",
                            "description": "`String`"
                        }
                    ],
                    "outline": "magazineClass call `BIS_fnc_classMagazine`",
                    "returns": "`Config`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_classMagazine"
        },
        "configuration": {
            "label": "BIS_fnc_classMagazine",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns class of weapon given by string.",
            "examples": [
                {
                    "text": "```sqf\nprivate _weaponConfig = currentWeapon player call BIS_fnc_classWeapon;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "weaponClass",
                            "description": "`String`"
                        }
                    ],
                    "outline": "weaponClass call `BIS_fnc_classWeapon`",
                    "returns": "`Config`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_classWeapon"
        },
        "configuration": {
            "label": "BIS_fnc_classWeapon",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "CLerp - Circular Lerp - is like lerp but handles the wraparound from 0 to 360\n This is useful when interpolating eulerAngles and the object crosses the 0/360 boundary\n The standard Lerp function causes the object to rotate in the wrong direction, clerp fixes that",
            "examples": [
                {
                    "text": "```sqf\n[90,170,0.1] call BIS_fnc_clerp; // Returns 98\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "currentValue",
                            "description": "`Number` - the current value"
                        },
                        {
                            "name": "targetValue",
                            "description": "`Number` - the target value"
                        },
                        {
                            "name": "alpha",
                            "description": "`Number` - the alpha"
                        }
                    ],
                    "outline": "[currentValue, targetValue, alpha] call `BIS_fnc_clerp`",
                    "returns": "`Number` - interpolated value"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_clerp"
        },
        "configuration": {
            "label": "BIS_fnc_clerp",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "[[File:BIS_fnc_codePerformance.png|300px|right]]\nMeasures how much time it takes to execute given expression.\nResults may vary based on overall performance; use this function to compare alternative scripting approaches rather than to measure specific values.\nUpon function execution, window with results is opened. The user then has a choice to copy the result into clipboard or not.\n\nThis function is using `diag_codePerformance` command.\n\n**NOTE**: Use `toString` to stringify `Code`, as `str` adds curly braces - See {{Link|#Example 2.}}",
            "examples": [
                {
                    "text": "```sqf\n\n// compare three methods of adding elements into array\ntestArray = [];\n[\"testArray = testArray + [1]\"] call BIS_fnc_codePerformance;\ntestArray = [];\n[\"testArray set [count testArray, 1]\"] call BIS_fnc_codePerformance;\ntestArray = [];\n[\"testArray pushBack 1\"] call BIS_fnc_codePerformance;\n\n```"
                },
                {
                    "text": "```sqf\n[toString { hint \"Hello there\" }] call BIS_fnc_codePerformance;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "expression",
                            "description": "`String` - tested expression"
                        },
                        {
                            "name": "arguments",
                            "description": "`Anything` - (Optional, default <sqf inline>[]) arguments to pass into the code"
                        },
                        {
                            "name": "cycles",
                            "description": "`Number` - (Optional, default 10000) number of wanted cycles"
                        },
                        {
                            "name": "display",
                            "description": "`Display` - (Optional, default <sqf inline>findDisplay 46) display in which the message window with results will be opened. Use `displayNull` to disable the window"
                        }
                    ],
                    "outline": "[expression, arguments, cycles, display] call `BIS_fnc_codePerformance`",
                    "returns": "`Number` - average execution time of the expression"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_codePerformance"
        },
        "configuration": {
            "label": "BIS_fnc_codePerformance",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Converts config color format to RGBA array of numbers.",
            "examples": [
                {
                    "text": "```sqf\n[\"0.5 + 0.25\",0,0,1] call BIS_fnc_colorConfigToRGBA; // returns [0.75,0,0,1]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "configColor",
                            "description": "`Array` - config color"
                        }
                    ],
                    "outline": "configColor call `BIS_fnc_colorConfigToRGBA`",
                    "returns": "`Array` format [[Color|Color (RGBA)]]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_colorConfigToRGBA"
        },
        "configuration": {
            "label": "BIS_fnc_colorConfigToRGBA",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Changes color of a marker with a little effect",
            "examples": [
                {
                    "text": "```sqf\n[\"BIS_marker\",\"ColorRed\",2] spawn BIS_fnc_colorMarker;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "marker",
                            "description": "`String` - marker"
                        },
                        {
                            "name": "color",
                            "description": "`String` - color from CfgMarkerColors"
                        },
                        {
                            "name": "duration",
                            "description": "`Number` - (Optional, default 1) duration of the transition"
                        }
                    ],
                    "outline": "[marker, color, duration] spawn `BIS_fnc_colorMarker`",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_colorMarker"
        },
        "configuration": {
            "label": "BIS_fnc_colorMarker",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Converts RGBA color format to #AARRGGBB HTML color format.",
            "examples": [
                {
                    "text": "```sqf\n[0,0,0,1] call BIS_fnc_colorRGBAtoHTML; // will return #FF000000\n```"
                },
                {
                    "text": "```sqf\n[2,93,0,1] call BIS_fnc_colorRGBAtoHTML; // will return #FF025D00\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "colorArray",
                            "description": "[[Color|Color (RGBA)]] - in [r, g, b, a] format"
                        }
                    ],
                    "outline": "colorArray call `BIS_fnc_colorRGBAtoHTML`",
                    "returns": "`String` - format #{{Color|grey|AA}}{{Color|red|RR}}{{Color|green|GG}}{{Color|blue|BB}}"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_colorRGBAtoHTML"
        },
        "configuration": {
            "label": "BIS_fnc_colorRGBAtoHTML",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Converts RGB color format to procedural texture, e.g `**[0,0,0,1]}} becomes {{hl|\"#(argb,8,8,3)color(0,0,0,1)\"**`.\n\nValues are in range 0..1.",
            "examples": [
                {
                    "text": "```sqf\nprivate _texture = [0,0,0,1] call BIS_fnc_colorRGBAtoTexture;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "color",
                            "description": "`Array` - format [{{Color|red|R}},{{Color|green|G}},{{Color|blue|B}},{{Color|grey|A}}]"
                        }
                    ],
                    "outline": "color call `BIS_fnc_colorRGBAtoTexture`",
                    "returns": "`String` - procedural texture to format \"#(argb,8,8,3)color(<span style{{=}}\"color: red\">R</span>,<span style{{=}}\"color: green\">G</span>,<span style{{=}}\"color: blue\">B</span>,<span style{{=}}\"color: grey\">A</span>)\""
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_colorRGBAtoTexture"
        },
        "configuration": {
            "label": "BIS_fnc_colorRGBAtoTexture",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Converts RGB color format to HTML color format.",
            "examples": [
                {
                    "text": "```sqf\nprivate _htmlColor = [0,0,0,1] call BIS_fnc_colorRGBtoHTML; // will return #000000\n```"
                },
                {
                    "text": "```sqf\nprivate _htmlColor = [2,93,0,1] call BIS_fnc_colorRGBtoHTML; // will return #025D00\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "colorArray",
                            "description": "[[Color|Color (RGBA)]] - can be [r, g, b, a] or [r, g, b], alpha value will be ignored in both cases"
                        }
                    ],
                    "outline": "colorArray call `BIS_fnc_colorRGBtoHTML`",
                    "returns": "`String` - format #{{Color|red|RR}}{{Color|green|GG}}{{Color|blue|BB}}"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_colorRGBtoHTML"
        },
        "configuration": {
            "label": "BIS_fnc_colorRGBtoHTML",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Creates the global communications menu, if it is not already created. All entries are invisible by default. Unhide appropriate sections by using `BIS_fnc_commsMenuToggleVisibility`.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_commsMenuCreate;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_commsMenuCreate`",
                    "returns": "`Boolean` - `true` if successful"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_commsMenuCreate"
        },
        "configuration": {
            "label": "BIS_fnc_commsMenuCreate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>\n/*\n\tFile: fn_commsMenuToggleAvailability.sqf\n\n\tDescription:\n\tEnables or disables certain sections of the global communications menu.\n\n\tParameter(s):\n\t_this select 0: index (Scalar) or list of indices (Array of Scalars) or section name (String)\n\t\t\"som\" - SecOps section\n\t\t\"wf\" - Warfare section\n\t_this select 1: mode (Scalar)\n\t\t0 - disable\n\t\t1 - enable\n\t\n\tReturns:\n\tSuccess flag (Boolean)\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_commsMenuToggleAvailability` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_commsMenuToggleAvailability"
        },
        "configuration": {
            "label": "BIS_fnc_commsMenuToggleAvailability",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>\n/*\n\tFile: fn_commsMenuToggleVisibility.sqf\n\n\tDescription:\n\tShows or hides certain sections of the global communications menu.\n\n\tParameter(s):\n\t_this select 0: index (Scalar) or list of indices (Array of Scalars) or section name (String)\n\t\t\"som\" - SecOps section\n\t\t\"wf\" - Warfare section\n\t_this select 1: mode (Scalar)\n\t\t0 - hide\n\t\t1 - show\n\t\n\tReturns:\n\tSuccess flag (Boolean)\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_commsMenuToggleVisibility` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_commsMenuToggleVisibility"
        },
        "configuration": {
            "label": "BIS_fnc_commsMenuToggleVisibility",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns the newer date or returns true if they are identical.",
            "examples": [
                {
                    "text": "```sqf\n[[2035,5,28,13,37], [2032,5,28,13,37]] call BIS_fnc_compareDateTimes;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "date1",
                            "description": "`Array` format `Date`"
                        },
                        {
                            "name": "date2",
                            "description": "`Array` format `Date`"
                        }
                    ],
                    "outline": "[date1, date2] call `BIS_fnc_compareDateTimes`",
                    "returns": "`Boolean` or `Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_compareDateTimes"
        },
        "configuration": {
            "label": "BIS_fnc_compareDateTimes",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "{{Feature|obsolete|Use `compatibleItems` instead.}} Return all compatible weapon attachments.",
            "examples": [
                {
                    "text": "```sqf\n(currentWeapon player) call BIS_fnc_compatibleItems;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "weapon",
                            "description": "`String` - weapon class"
                        }
                    ],
                    "outline": "weapon call `BIS_fnc_compatibleItems`",
                    "returns": "`Array` of `String`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_compatibleItems"
        },
        "configuration": {
            "label": "BIS_fnc_compatibleItems",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "{{Feature|obsolete|\nUse `compatibleMagazines` instead.|arma3|2.10}}\nGets all compatible magazines for selected weapons. Function looks both for magazines listed in `**magazines}} array and compatible {{hl|magazineWells**`.",
            "examples": [
                {
                    "text": "```sqf\n[\"arifle_mx_f\"] call BIS_fnc_compatibleMagazines;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "weapon",
                            "description": "`String` - weapon's classname"
                        },
                        {
                            "name": "returnHidden",
                            "description": "`Boolean` - (Optional, default `false`) `true` to also return magazines with scope 1"
                        }
                    ],
                    "outline": "[weapon, returnHidden] call `BIS_fnc_compatibleMagazines`",
                    "returns": "`Array` - array of magazine classes"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_compatibleMagazines"
        },
        "configuration": {
            "label": "BIS_fnc_compatibleMagazines",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return number of completed curator challenges.",
            "examples": [
                {
                    "text": "```sqf\ncuratorModule call BIS_fnc_completedCuratorChallengesCount;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curator",
                            "description": "`Object` - curator module"
                        }
                    ],
                    "outline": "curator call `BIS_fnc_completedCuratorChallengesCount`",
                    "returns": "`Number` - number of completed challenges"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_completedCuratorChallengesCount"
        },
        "configuration": {
            "label": "BIS_fnc_completedCuratorChallengesCount",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "This returns a sub-array of elements that satisfy a specific condition **in the order they have been passed**.\n**Arma**: 3|Since {{arma3 v1.55, use <sqf inline>array select condition instead.}}\n\nIn the condition, the currently tested element is assigned to the variable \"[_x](https://community.bistudio.com/wiki/Magic%20Variables%23x)\".\nThe original array is **not** modified.",
            "examples": [
                {
                    "text": "```sqf\n[[10, 0, 8, 2, 6, 4], { _x > 5 }] call BIS_fnc_conditionalSelect; // will return [10,8,6]\n```"
                },
                {
                    "text": "```sqf\n[[10, true, 8, player], { typeName _x == \"STRING\" }] call BIS_fnc_conditionalSelect; // will return []\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "items",
                            "description": "`Array` - array to check"
                        },
                        {
                            "name": "condition",
                            "description": "`Code` - selection code"
                        }
                    ],
                    "outline": "[items, condition] call `BIS_fnc_conditionalSelect`",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_conditionalSelect"
        },
        "configuration": {
            "label": "BIS_fnc_conditionalSelect",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Scan config paths and return min and max values for each property.\n\nCan be used only for properties of type `Number` and `Array` (value is considered to be the geometric mean of all numbers in the array).",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _paths = [configFile >> \"CfgWeapons\"] call BIS_fnc_returnChildren;\n[_paths, [\"maxRange\", \"reloadTime\"]] call BIS_fnc_configExtremes;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "paths",
                            "description": "`Array` of `Config`s - paths to be scanned."
                        },
                        {
                            "name": "properties",
                            "description": "`Array` of `String`s - class names of properties to be evaluated."
                        },
                        {
                            "name": "propertyTypes",
                            "description": "`Array` of `Boolean`s - (Optional, default `false`) whether the property at the respective index should be evaluated and returned as a `log`arithmic number"
                        },
                        {
                            "name": "propertyDefaults",
                            "description": "`Array` of `Number`s - (Optional, default 0) value to be used in cases where the property at the respective index is not defined"
                        }
                    ],
                    "outline": "[paths, properties, propertyTypes, propertyDefaults] call `BIS_fnc_configExtremes`",
                    "returns": "`Array` - [minValues, maxValues] where minValues and maxValues are arrays respective to the properties array."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_configExtremes"
        },
        "configuration": {
            "label": "BIS_fnc_configExtremes",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns config path to given entry in given format.",
            "examples": [
                {
                    "text": "```sqf\n[\"configFile >> \"\"CfgVehicles\"\" >> \"\"Car\"\"\"] call BIS_fnc_configPath; // [\"configFile\",\"CfgVehicles\",\"Car\"]\n```"
                },
                {
                    "text": "```sqf\n[[\"mary\", \"had\", \"a\", \"little\", \"lamb\"], \"\"] call BIS_fnc_configPath; // \"mary >> \"\"had\"\" >> \"\"a\"\" >> \"\"little\"\" >> \"\"lamb\"\"\"\n```"
                },
                {
                    "text": "```sqf\n[[\"configFile\",\"CfgVehicles\",\"Car\"]] call BIS_fnc_configPath; // bin\\config.cpp/CfgVehicles/Car\n```"
                },
                {
                    "text": "```sqf\n[\"bin\\config.cpp/CfgVehicles/Car\"] call BIS_fnc_configPath; // [\"configFile\",\"CfgVehicles\",\"Car\"]\n```"
                },
                {
                    "text": "```sqf\n[configFile >> \"CfgVehicles\" >> \"Car\", \"\"] call BIS_fnc_configPath; // \"configFile >> \"\"CfgVehicles\"\" >> \"\"Car\"\"\"\n```"
                },
                {
                    "text": "```sqf\n[\"bin\\config.cpp/CfgVehicles/Car\", \"\", true] call BIS_fnc_configPath; // \"configFile >> \"\"CfgVehicles\"\" >> \"\"Car\"\"\"\n```"
                },
                {
                    "text": "```sqf\n[\"bin\\config.cpp/CfgVehicles/Car\", \"\"] call BIS_fnc_configPath; // \"bin\\config.cpp/CfgVehicles/Car\"\n```"
                },
                {
                    "text": "```sqf\n[[\"mary\", \"had\", \"a\", \"little\", \"lamb\"], \"\", true] call BIS_fnc_configPath; // \"\" invalid config\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "config",
                            "description": "`Array`, `String` or `Config` - input config"
                        },
                        {
                            "name": "format",
                            "description": "`Array`, `String` or `Config` - (Optional, default <sqf inline>[] or <sqf inline>configNull if _config_ is `Array` - see {{Link|#Example 1}}) desired format of output"
                        },
                        {
                            "name": "strict",
                            "description": "`Boolean` - (Optional, default `false`) if false, the function will not attempt to construct a valid config before certain format conversions (see {{Link|#Example 2}})."
                        }
                    ],
                    "outline": "[config, format, strict] call `BIS_fnc_configPath`",
                    "returns": "`Array`, `String` or `Config`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_configPath"
        },
        "configuration": {
            "label": "BIS_fnc_configPath",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Opens the [[Arma 3: Splendid Config Viewer|Splendid&trade; Config Viewer]].",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_configViewer;\n```"
                },
                {
                    "text": "```sqf\n\nprivate _return = [\n\tnil,\n\tconfigFile >> \"CfgWeapons\",\n\ttrue,\n\tnil,\n\t{\n\t\tparams [\"_cfg\"];\n\t\tif (\n\t\t\tgetNumber(_cfg >> \"scope\") == 2 &&\n\t\t\t{ // Layzy evaluation\n\t\t\t\tgetNumber(_cfg >> \"type\") in [1,2,4] && // primary, secondary, handgun weapons\n\t\t\t\t{ !isClass (_cfg >> \"LinkedItems\") or getText(_cfg >> \"baseWeapon\") == configName _cfg } // only base weapons, no accessories\n\t\t\t}\n\t\t) exitWith {\n\t\t\t[_cfg] call BIS_fnc_displayName; // add the weapon with its displayname\n\t\t};\n\t\t\"\" // don't add\n\t},\n\t\"Select Weapon\"\n] call BIS_fnc_configViewer;\n_cfgSelected = _return param [0, configNull];\nsystemChat str [configName _cfgSelected, _cfgSelected];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "parent",
                            "description": "`Display` - (Optional, default mission display) parent display"
                        },
                        {
                            "name": "cfg",
                            "description": "`Config` - (Optional, default all configs) root config"
                        },
                        {
                            "name": "showOk",
                            "description": "`Boolean` - (Optional, default `false`) `true` to display OK button. Script will then wait until viewer is closed and return selected class and param"
                        },
                        {
                            "name": "onSelect",
                            "description": "`Code` - (Optional, default {}) executed upon selecting a class. **Must return `String`**, which will be shown as structured text instead of params. Currently evaluated config is passed in the `**_this**` variable."
                        },
                        {
                            "name": "onAdd",
                            "description": "`Code` - (Optional, default {}) executed upon adding a class to list. Returned value (STRING) is item text. Empty string will skip the item. Currently evaluated config is passed in the `**_this**` variable."
                        },
                        {
                            "name": "header",
                            "description": "`String` - (Optional, default \"%1\") custom header. Use %1 to refer to original name (\"Splendid Config Viewer\")"
                        }
                    ],
                    "outline": "[parent, cfg, showOk, onSelect, onAdd, header] call `BIS_fnc_configViewer`",
                    "returns": "`Array`\n* When OK button is not displayed, empty array is returned\n* Else, an array of currently selected entries in format [class (`Config`), param (`String`)] is returned."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_configViewer"
        },
        "configuration": {
            "label": "BIS_fnc_configViewer",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Finds duplicates in the given array of anything and consolidates them into an array of sub-arrays",
            "examples": [
                {
                    "text": "```sqf\n[\"apple\",\"apple\",\"pear\",\"pear\",\"apple\"] call BIS_fnc_consolidateArray; // return: [[\"apple\",3],[\"pear\",2]]\n```"
                },
                {
                    "text": "```sqf\n[\"apple\",\"apple\",1,1,nil,nil] call BIS_fnc_consolidateArray; // return: [[\"apple\",2],[1,2],[any,2]]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array` - array of anything"
                        }
                    ],
                    "outline": "array call `BIS_fnc_consolidateArray`",
                    "returns": "`Array` - array of sub-arrays in format [<nowiki/>[value, count],...], where:\n* value: `Anything` - consolidated element\n* count: `Number` - occurrence count"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_consolidateArray"
        },
        "configuration": {
            "label": "BIS_fnc_consolidateArray",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return config paths to all display controls.",
            "examples": [
                {
                    "text": "```sqf\n[findDisplay 313, configFile >> \"Display3DEN\"] call BIS_fnc_controlConfigs;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "display",
                            "description": "`Display`"
                        },
                        {
                            "name": "path",
                            "description": "`Config` - root display config path"
                        }
                    ],
                    "outline": "[display, path] call `BIS_fnc_controlConfigs`",
                    "returns": "`Array` in format [<nowiki/>[control1, configpath1], [control2, configpath2], ..., [controlN, configpathN]]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_controlConfigs"
        },
        "configuration": {
            "label": "BIS_fnc_controlConfigs",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Computes data for control point.",
            "examples": [
                {
                    "text": "```sqf\n[controlPoint] call BIS_fnc_controlPoint_compute;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlPoint",
                            "description": "`Object` - the control point"
                        }
                    ],
                    "outline": "[controlPoint] call `BIS_fnc_controlPoint_compute`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_controlPoint_compute"
        },
        "configuration": {
            "label": "BIS_fnc_controlPoint_compute",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns the key owner of given control point.",
            "examples": [
                {
                    "text": "```sqf\nprivate _key = [controlPoint] call BIS_fnc_controlPoint_computeOwnerKey;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlPoint",
                            "description": "`Object` - the control point"
                        }
                    ],
                    "outline": "[controlPoint] call `BIS_fnc_controlPoint_computeOwnerKey`",
                    "returns": "`Object` - the owner key"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_controlPoint_computeOwnerKey"
        },
        "configuration": {
            "label": "BIS_fnc_controlPoint_computeOwnerKey",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tAttributes change in EDEN for a control point\n\n\tParameter(s):\n\t_this select 0: Object\t- The control point\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_controlPoint_edenAttributesChanged`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_controlPoint_edenAttributesChanged"
        },
        "configuration": {
            "label": "BIS_fnc_controlPoint_edenAttributesChanged",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\t3DEN connections of a control point is changed\n\n\tParameter(s):\n\t_this select 0: Object\t- The control point\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_controlPoint_edenConnectionChanged`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_controlPoint_edenConnectionChanged"
        },
        "configuration": {
            "label": "BIS_fnc_controlPoint_edenConnectionChanged",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tEntity is dragged in 3DEN\n\n\tParameter(s):\n\t_this select 0: Object\t- The control point\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_controlPoint_edenDragged`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_controlPoint_edenDragged"
        },
        "configuration": {
            "label": "BIS_fnc_controlPoint_edenDragged",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tWhether given control point is selected in 3den\n\n\tParameter(s):\n\t_this select 0: Object\t- The control point object\n\n\tReturns:\n\tBool - True if selected, false if not\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_controlPoint_edenIsSelected`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_controlPoint_edenIsSelected"
        },
        "configuration": {
            "label": "BIS_fnc_controlPoint_edenIsSelected",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tAttributes change in EDEN for a control point\n\n\tParameter(s):\n\t_this select 0: Object\t- The control point\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_controlPoint_edenRegisteredToWorld`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_controlPoint_edenRegisteredToWorld"
        },
        "configuration": {
            "label": "BIS_fnc_controlPoint_edenRegisteredToWorld",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tAttributes change in EDEN for a control point\n\n\tParameter(s):\n\t_this select 0: Object\t- The control point\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_controlPoint_edenUnregisteredFromWorld`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_controlPoint_edenUnregisteredFromWorld"
        },
        "configuration": {
            "label": "BIS_fnc_controlPoint_edenUnregisteredFromWorld",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns the key owner of given control point.",
            "examples": [
                {
                    "text": "```sqf\nprivate _key = [controlPoint] call BIS_fnc_controlPoint_getOwnerKey;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlPoint",
                            "description": "`Object` - the control point"
                        }
                    ],
                    "outline": "[controlPoint] call `BIS_fnc_controlPoint_getOwnerKey`",
                    "returns": "`Object` - the key"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_controlPoint_getOwnerKey"
        },
        "configuration": {
            "label": "BIS_fnc_controlPoint_getOwnerKey",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Whether given control point is arrive, not leave.",
            "examples": [
                {
                    "text": "```sqf\nprivate _isArrive = [controlPoint] call BIS_fnc_controlPoint_isArrive;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlPoint",
                            "description": "`Object` - the control point"
                        }
                    ],
                    "outline": "[controlPoint] call `BIS_fnc_controlPoint_isArrive`",
                    "returns": "`Boolean` - returns `true` if control point is arrive, `false` if leave"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_controlPoint_isArrive"
        },
        "configuration": {
            "label": "BIS_fnc_controlPoint_isArrive",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Set's whether this control point is arrive or leave.",
            "examples": [
                {
                    "text": "```sqf\n[controlPoint,false] call BIS_fnc_controlPoint_setIsArrive;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "controlPoint",
                            "description": "`Object` - the control point"
                        },
                        {
                            "name": "isArrive",
                            "description": "`Object` - (Optional, default `true`) `true` - arrive"
                        }
                    ],
                    "outline": "[controlPoint, isArrive] call `BIS_fnc_controlPoint_setIsArrive`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_controlPoint_setIsArrive"
        },
        "configuration": {
            "label": "BIS_fnc_controlPoint_setIsArrive",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Converts values to a target system of units.",
            "examples": [
                {
                    "text": "```sqf\nprivate _distString = [500, 0, 5, 1, -1] call BIS_fnc_convertUnits;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "value",
                            "description": "`Number` - source value"
                        },
                        {
                            "name": "from",
                            "description": "`Number` - source unit. Can be one of:"
                        },
                        {
                            "name": "to",
                            "description": "`Number` - (Optional, default detected system of units _via_ `systemOfUnits`) destination unit. See _from_."
                        },
                        {
                            "name": "mode",
                            "description": "`Number` - (Optional, default 0) can be one of:"
                        },
                        {
                            "name": "precision",
                            "description": "`Number` - (Optional, default 1) destination precision factor, -1 for no precision change. **cannot be 0**"
                        }
                    ],
                    "outline": "[value, from, to, mode, precision] call `BIS_fnc_convertUnits`",
                    "returns": "`Number` or `String` - converted value"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_convertUnits"
        },
        "configuration": {
            "label": "BIS_fnc_convertUnits",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Triggers a countdown.\n**NOTE**: \nThe **initial** countdown can be accessed _via_ `missionNamespace`'s variable **BIS_fnc_countdown_time**.\n\nThe initial value is either <sqf inline>serverTime + timeInSeconds (if set globally) or <sqf inline>time + timeInSeconds (if set locally).\nTo return the left-over time see {{Link|#Example 4.\n}}",
            "examples": [
                {
                    "text": "```sqf\nprivate _initialCountdown = [50,false] call BIS_fnc_countdown; // sets countdown to 50 seconds where function is executed\n```"
                },
                {
                    "text": "```sqf\nprivate _initialCountdown = [50] call BIS_fnc_countdown; // sets countdown to 50 seconds globally\n```"
                },
                {
                    "text": "```sqf\n[-1] call BIS_fnc_countdown; // sets BIS_fnc_countdown_time to nil\n```"
                },
                {
                    "text": "```sqf\nprivate _timeLeft = [0] call BIS_fnc_countdown; // returns the left over-time\n```"
                },
                {
                    "text": "```sqf\nprivate _isTimeLeft = [true] call BIS_fnc_countdown; // returns true if countdown is greater than 0\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "timeInSeconds",
                            "description": "can be:"
                        },
                        {
                            "name": "global",
                            "description": "`Boolean`: True to set it globally (Optional) Default: `true`"
                        }
                    ],
                    "outline": "[timeInSeconds, global] call `BIS_fnc_countdown`",
                    "returns": "<nowiki/>\n* `Number`:\n** If set locally: `time` + timeInSeconds (see {{Link|#Example 1}})\n** If set globally `serverTime` + timeInSeconds (see {{Link|#Example 2}})\n** Returns -1 if countdown is set to `nil` (see {{Link|#Example 3}})\n** Return left-over time (see {{Link|#Example 4}})\n* `Boolean`: returns `true` when countdown is > 0 else `false` (see {{Link|#Example 5}})"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_countdown"
        },
        "configuration": {
            "label": "BIS_fnc_countdown",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Modify the given counter, create it if does not exist.\n**IMPORTANT**: It is **not** possible to broadcast the counter (like `setVariable` does) with this function.",
            "examples": [
                {
                    "text": "```sqf\n[[\"TAG_Score\", player], 1] call BIS_fnc_counter;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "varName",
                            "description": "`String` or `Array` format [varName, namespace] - default namespace is `missionNamespace`"
                        },
                        {
                            "name": "add",
                            "description": "`Number` - (Optional, default 0) the value to be added"
                        },
                        {
                            "name": "modulo",
                            "description": "`Number` - (Optional, default -1) the `mod`ulo to use for counter cycle, applied after the addition"
                        }
                    ],
                    "outline": "[varName, add, modulo] call `BIS_fnc_counter`",
                    "returns": "`Number` the new counter value"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_counter"
        },
        "configuration": {
            "label": "BIS_fnc_counter",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_CPDummy`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_CPDummy"
        },
        "configuration": {
            "label": "BIS_fnc_CPDummy",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Josef Zemanek\n\n\tDescription:\n\tCombat Patrol empty position locator\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_CPFindEmptyPosition`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_CPFindEmptyPosition"
        },
        "configuration": {
            "label": "BIS_fnc_CPFindEmptyPosition",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Josef Zemanek\n\n\tDescription:\n\tCombat Patrol init & general handle\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_CPInit`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_CPInit"
        },
        "configuration": {
            "label": "BIS_fnc_CPInit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Josef Zemanek\n\n\tDescription:\n\tCombat Patrol dedicated logging fnc\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_CPLog`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_CPLog"
        },
        "configuration": {
            "label": "BIS_fnc_CPLog",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Josef Zemanek\n\n\tDescription:\n\tCombat Patrol safe azimuth picker.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_CPPickSafeDir`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_CPPickSafeDir"
        },
        "configuration": {
            "label": "BIS_fnc_CPPickSafeDir",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Josef Zemanek\n\n\tDescription:\n\tCombat Patrol safe azimuth finder. Scans around the AO for usable & convenient approach routes\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_CPSafeAzimuths`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_CPSafeAzimuths"
        },
        "configuration": {
            "label": "BIS_fnc_CPSafeAzimuths",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Josef Zemanek\n\n\tDescription:\n\tCombat Patrol reinforcements handle\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_CPSendReinforcements`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_CPSendReinforcements"
        },
        "configuration": {
            "label": "BIS_fnc_CPSendReinforcements",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Josef Zemanek\n\n\tDescription:\n\tCombat Patrol garrison spawning\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_CPSpawnGarrisonGrp`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_CPSpawnGarrisonGrp"
        },
        "configuration": {
            "label": "BIS_fnc_CPSpawnGarrisonGrp",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Function waits until condition becomes true. Condition is checked with given interval.",
            "examples": [
                {
                    "text": "```sqf\n[{ not alive player }, 2] spawn BIS_fnc_CPWaitUntil;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "condition",
                            "description": "`Code` - (Optional, default <sqf inline>{ true }) condition to be checked"
                        },
                        {
                            "name": "interval",
                            "description": "`Number` - (Optional, default 0.5) interval in which the condition will be checked"
                        }
                    ],
                    "outline": "[condition, interval] spawn `BIS_fnc_CPWaitUntil`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_CPWaitUntil"
        },
        "configuration": {
            "label": "BIS_fnc_CPWaitUntil",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Create a dated, timed diary record in the owner's \"Log\" subject.",
            "examples": [
                {
                    "text": "```sqf\n[player, \"Title\", \"This is a log entry. Have fun!\"] call BIS_fnc_createLogRecord;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "owner",
                            "description": "`Object`"
                        },
                        {
                            "name": "title",
                            "description": "`String` - (Optional, default \"\")"
                        },
                        {
                            "name": "text",
                            "description": "`String` - (Optional, default \"\")"
                        }
                    ],
                    "outline": "[owner, title, text] call `BIS_fnc_createLogRecord`",
                    "returns": "`String`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_createLogRecord"
        },
        "configuration": {
            "label": "BIS_fnc_createLogRecord",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>\n/*\n\tFile: fn_createMenu.sqf\n\n\tDescription:\n\tCreate custom commanding menu (with multiple pages if necessary).\n\n\tParameter(s):\n\t\t_this select 0 - STRING or ARRAY - Name of menu or [Name, Context sensitive]\n\t\t_this select 1 - STRING - Variable in which will be menu params stored (as variable_0, variable_1, ...)\n\t\t_this select 2 - ARRAY - Array with menu items (can be either [items] or [[items],[itemNames],[itemEnable]] if you want to set custom params (names, enable values))\n\t\t_this select 3 - STRING - Name of submenu which will open when item is activated. Name of selected item is passed to string as %1\n\t\t_this select 4 - STRING - Expression which is executed when item is activated. Name of selected item is passed to string as %1, ID is %2.\n\t\t_this select 5 - ANYTHING (Optional) - params passed to expression. Whole argument is passed as %3\n\t\t_this select 6 - BOOLEAN - False to hide number shortcuts\n\n\tReturned value(s):\n\t\tTrue\n\t\t\n\tExample:\n\t  c = [\"first\",\"second\"]; [\"Menu\", \"b\", c, \"\",\"hint 'ahoj'\"] call BIS_FNC_createmenu; showCommandingMenu \"#USER:b_0\"  \n\t  c = [[\"firstData\",\"secondData\"],[\"First\",\"Second\"]]; [\"Menu\", \"b\", c, \"\",\"hint (str '%1' + str '%2' + str '%3')\"] call BIS_FNC_createmenu;  showCommandingMenu \"#USER:b_0\";\n\t  see news:g7p3po$gik$1@new-server.localdomain\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_createmenu` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_createMenu"
        },
        "configuration": {
            "label": "BIS_fnc_createMenu",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Instantiates an object of a certain class.",
            "examples": [
                {
                    "text": "```sqf\n[\"someOOClass\", [1,2,3]] call BIS_fnc_createObjectOO;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "class",
                            "description": "`String` - class for the OO scripting shell **IMPORTANT**: Class has to exist in CfgOO"
                        },
                        {
                            "name": "params",
                            "description": "`Array` - (Optional, default <sqf inline>[]) optional parameters for constructor"
                        }
                    ],
                    "outline": "[class,params] call `BIS_fnc_createObjectOO`",
                    "returns": "`Logic` - created logic object"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_createObjectOO"
        },
        "configuration": {
            "label": "BIS_fnc_createObjectOO",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Create a building ruin and hide the original object.",
            "examples": [
                {
                    "text": "```sqf\naBuilding call BIS_fnc_createRuin;\n```"
                },
                {
                    "text": "```sqf\n\n// will destroy every building in a 50m radius around the player\nprivate _nearBuildings = player nearObjects [\"House\", 50];\n{ _x call BIS_fnc_createRuin } forEach _nearBuildings;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "building",
                            "description": "`Object` - building to \"destroy\""
                        }
                    ],
                    "outline": "building call `BIS_fnc_createRuin`",
                    "returns": "`Object` - the created ruin"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_createRuin"
        },
        "configuration": {
            "label": "BIS_fnc_createRuin",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Creates non-simulated framerate and network performance friendly object - a [Simple Object](https://community.bistudio.com/wiki/Arma%203%3A%20Simple%20Objects) - and applies different adjustments to fake non-existing physX and engine interactions. The adjustments need either to be stored in the object config or provided as the function input, otherwise they need to be done manually.\n\n\n\nSimple objects cannot be destroyed and do not interact with the environment. They are useful for creating low performance-demanding static compositions (walls, rocks, wrecks, …) and/or environments where shooting and collisions are not expected.",
            "examples": [
                {
                    "text": "```sqf\n[\"B_Boat_Armed_01_minigun_F\", getPosWorld player, getDir player] call BIS_fnc_createSimpleObject;\n```"
                },
                {
                    "text": "```sqf\n[\"B_Boat_Armed_01_minigun_F\", player modelToWorldWorld [0,5,0], getDir player + 90, false, false] call BIS_fnc_createSimpleObject;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "input",
                            "description": "`String` or `Array`:"
                        },
                        {
                            "name": "position",
                            "description": "`Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL) - the object will be placed by the **model centre**<nowiki/>'s position (see `getPosWorld`)"
                        },
                        {
                            "name": "direction",
                            "description": "`Number` - (Optional, default 0)"
                        },
                        {
                            "name": "followTerrain",
                            "description": "`Boolean` - (Optional, default `true`) `true` to follow terrain inclination, `false` to be horizontally aligned"
                        },
                        {
                            "name": "forceSuperSimpleObject",
                            "description": "`Boolean` - (Optional, default `false`) `true` to create a **Super Simple Object** from p3d path (that **must** be provided)"
                        },
                        {
                            "name": "local",
                            "description": "`Boolean` - (Optional, default `false`) `true` to create `local` instance of the object"
                        }
                    ],
                    "outline": "[input, position, direction, followTerrain, forceSuperSimpleObject, local] call `BIS_fnc_createSimpleObject`",
                    "returns": "`Object` - the created Simple Object, `objNull` if creation failed"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_createSimpleObject"
        },
        "configuration": {
            "label": "BIS_fnc_createSimpleObject",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Shows group tooltip. Adapted for Tac Ops DLC for use in the animated briefings.\n\n[[File:a3 bis fnc createTooltip.jpg|300px|right]]",
            "examples": [
                {
                    "text": "```sqf\n\n// enable icons in 2D and 3D\nsetGroupIconsVisible [true, true];\nsetGroupIconsSelectable true;\n\n// add the icon for all existing groups\nprivate _group = group player;\nprivate _color = [side _group, false] call BIS_fnc_sideColor;\n_group addGroupIcon [\"o_inf\", [0, 0]];\n_group setGroupIconParams [_color, groupID _group, 1, true];\n\n// show tooltip when hovering over group icon of player group\naddMissionEventHandler [\"GroupIconOverEnter\",\n{\n\t[configFile >> \"CfgORBAT\" >> \"BIS\" >> \"I_AAF\", findDisplay 12, getMousePosition] call BIS_fnc_createTooltip;\n}];\n\n// remove tooltip when leaving group icon area\naddMissionEventHandler [\"GroupIconOverLeave\",\n{\n\t[nil, findDisplay 12, getMousePosition] call BIS_fnc_createTooltip;\n}];\n\n```"
                },
                {
                    "text": "```sqf\n\nprivate _marker = createMarker [\"marker_0\", [worldSize / 2, worldSize / 2]];\n_marker setMarkerType \"flag_Germany\";\n_marker setMarkerText \"GERMANY\";\n\n_marker = createMarker [\"marker_1\", [worldSize / 1.5, worldSize / 1.5]];\n_marker setMarkerType \"flag_Altis\";\n_marker setMarkerText \"ALTIS\";\n\nfindDisplay 12 displayCtrl 51 ctrlAddEventHandler\n[\n\t\"draw\",\n\t{\n\t\tparams [\"_ctrlMap\"];\n\n\t\tctrlMapMouseOver _ctrlMap params [[\"_type\", \"\"], [\"_markerName\", \"\"]];\n\n\t\tif (_type == \"marker\") then\n\t\t{\n\t\t\tprivate _markerTexture = getText (configFile >> \"CfgMarkers\" >> markerType _markerName >> \"icon\");\n\t\t\tprivate _markerText = markerText _markerName;\n\n\t\t\t[[nil, nil, _markerName, nil, _markerTexture, nil, nil, nil, _markerText, nil, nil, \"Some Description\"], findDisplay 12, getMousePosition] call BIS_fnc_createTooltip;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t[nil, findDisplay 12, getMousePosition] call BIS_fnc_createTooltip;\n\t\t};\n\t}\n];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "input",
                            "description": "`Array` format [config, parameters]:"
                        },
                        {
                            "name": "display",
                            "description": "`Display` - display where tooltip controls group is created"
                        },
                        {
                            "name": "mousePos",
                            "description": "`Array` - mouse position in format [x, y]"
                        }
                    ],
                    "outline": "[input, display, mousePos] call `BIS_fnc_createTooltip`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_createTooltip"
        },
        "configuration": {
            "label": "BIS_fnc_createTooltip",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Opens credits, identical to those found in main menu (Arma 3). Also present in Arma 3.",
            "examples": [
                {
                    "text": "```sqf\n[] spawn BIS_fnc_credits;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "[] spawn `BIS_fnc_credits`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_credits"
        },
        "configuration": {
            "label": "BIS_fnc_credits",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Movie credits function.",
            "examples": [
                {
                    "text": "```sqf\n[] spawn BIS_fnc_credits_movie;\n```"
                },
                {
                    "text": "Display the credits full screen:\n\n```sqf\n\n[] spawn {\n\tdisableSerialization;\n\t// create credits\n\t(findDisplay 46) createDisplay \"RscCredits\";\n\t[] call BIS_fnc_credits_movie;\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "display",
                            "description": "`Display` - (Optional) display to use to show the credits"
                        },
                        {
                            "name": "mode",
                            "description": "`Number` - (Optional, default 0) 0 to start the credits, 1 to end them"
                        }
                    ],
                    "outline": "[display, mode] call `BIS_fnc_credits_movie`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_credits_movie"
        },
        "configuration": {
            "label": "BIS_fnc_credits_movie",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tFile: fn_credits_movieConfig.sqf\n\n\tDescription:\n\tMovie credits config preprocessor.\n\n\tParameter(s):\n\t_this select 0: Number - Index of item in config (CfgCredits >> CreditsMovie >> item)\n\t\n\tReturned value:\n\t_array: Array\n\t_array select 0: String - Position name (and tags) as structured text.\n\t_array select 1: String - Names (and tags) as structured text.\n\t_array select 2: Number - Required space coeficient (numberOfNames * textSizeCoef), -1 if config entry doesn't exist\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_credits_movieConfig` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_credits_movieConfig"
        },
        "configuration": {
            "label": "BIS_fnc_credits_movieConfig",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tFile: fn_credits_movieSupport.sqf\n\n\tDescription:\n\tMovie credits supporters preprocessor.\n\n\tParameter(s):\n\tNone.\n\t\n\tReturned value:\n\t_array: Array\n\t_array select 0: String - Position name (and tags) as structured text.\n\t_array select 1: String - Names (and tags) as structured text - 1st paragraph.\n\t_array select 2: String - Names (and tags) as structured text - 2nd paragraph.\n\t_array select 3: String - Names (and tags) as structured text - 3rd paragraph.\n\t_array select 4: Number - Required space coeficient (numberOfNamesInOneParagraph * textSizeCoef)\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_credits_movieSupport` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_credits_movieSupport"
        },
        "configuration": {
            "label": "BIS_fnc_credits_movieSupport",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Function that counts amount of seats, both for crew and cargo seats.",
            "examples": [
                {
                    "text": "```sqf\ncrewCount = [\"B_Heli_Light_01_F\", false] call BIS_fnc_crewCount; // Counts all available seats excluding cargo slots. Returns 6 (see notes).\n```"
                },
                {
                    "text": "```sqf\ncrewCount = [\"B_Heli_Transport_01_F\", true] call BIS_fnc_crewCount; // Counts all available seats including cargo slots. Returns 12.\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "`String`",
                            "description": "classname of vehicle."
                        },
                        {
                            "name": "`Boolean`",
                            "description": "true if cargo seats should be included (see notes)"
                        }
                    ],
                    "outline": "param call `BIS_fnc_crewCount`",
                    "returns": "`Number` - amount of seats in vehicle."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_crewCount"
        },
        "configuration": {
            "label": "BIS_fnc_crewCount",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return the cross product of two 3D vectors.\n**Arma**: 3|Use `vectorCrossProduct` instead.",
            "examples": [
                {
                    "text": "```sqf\nprivate _product = [[1,2,3], [3,2,1]] call BIS_fnc_crossProduct;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vector1",
                            "description": "`Array`"
                        },
                        {
                            "name": "vector2",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "[vector1, vector2] call `BIS_fnc_crossProduct`",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_crossProduct"
        },
        "configuration": {
            "label": "BIS_fnc_crossProduct",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Spawns flock of crows circling the area.",
            "examples": [
                {
                    "text": "```sqf\nbis_crows = [BIS_scientist, 20, 8, 20] call BIS_fnc_crows;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Array` (in format `position`) or `Object` (object position) or `String` (marker position)"
                        },
                        {
                            "name": "areaSize _(Optional)_",
                            "description": "`Number` - area radius - default: 50"
                        },
                        {
                            "name": "number _(Optional)_",
                            "description": "`Number` of crows - default: areaSize/5"
                        },
                        {
                            "name": "height _(Optional)_",
                            "description": "`Number` - height in which crows flies - default: 30 + random 10"
                        }
                    ],
                    "outline": "[position, _areaSize_, _number_, _height_] call `BIS_fnc_crows`",
                    "returns": "`Array` - list of spawned crows"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_crows"
        },
        "configuration": {
            "label": "BIS_fnc_crows",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Resize structured text control to fit its text height.",
            "examples": [
                {
                    "text": "```sqf\nprivate _height = [_ctrl, 1.5, 3] call BIS_fnc_ctrlFitToTextHeight;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control` - the control which should be scaled"
                        },
                        {
                            "name": "offset",
                            "description": "`Number` - (Optional, default 0) offset"
                        },
                        {
                            "name": "time",
                            "description": "`Number` - (Optional, default 0) commit time"
                        }
                    ],
                    "outline": "[control,offset,time] call `BIS_fnc_ctrlFitToTextHeight`",
                    "returns": "`Number` - text height"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_ctrlFitToTextHeight"
        },
        "configuration": {
            "label": "BIS_fnc_ctrlFitToTextHeight",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Scale a control while maintaining its centering.",
            "examples": [
                {
                    "text": "```sqf\nprivate _finalPos = [_ctrl, 1.5, 3] spawn BIS_fnc_ctrlSetScale;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control` - the control which should be scaled"
                        },
                        {
                            "name": "scale",
                            "description": "`Number` - (Optional, default 1) scale"
                        },
                        {
                            "name": "time",
                            "description": "`Number` - (Optional, default 0) commit time"
                        }
                    ],
                    "outline": "[control,scale,time] spawn `BIS_fnc_ctrlSetScale`",
                    "returns": "`Array` - final position"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_ctrlSetScale"
        },
        "configuration": {
            "label": "BIS_fnc_ctrlSetScale",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Resize control according to it is text.",
            "examples": [
                {
                    "text": "```sqf\n[_ctrl] call BIS_fnc_ctrlTextHeight;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "control",
                            "description": "`Control` - the control which should changed"
                        }
                    ],
                    "outline": "[control] call `BIS_fnc_ctrlTextHeight`",
                    "returns": "`Boolean` - `true`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_ctrlTextHeight"
        },
        "configuration": {
            "label": "BIS_fnc_ctrlTextHeight",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Attach an object on another one under cursor.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_vehicle] call BIS_fnc_curatorAttachObject;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - some object"
                        }
                    ],
                    "outline": "[object] call `BIS_fnc_curatorAttachObject`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_curatorAttachObject"
        },
        "configuration": {
            "label": "BIS_fnc_curatorAttachObject",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tReturn attributes available for given entity\n\n\tParameter(s):\n\t\t0: OBJECT - curator\n\t\t1: OBJECT or GROUp or ARRAY or STRING - checked entity\n\n\tReturns:\n\tARRAY of STRINGs\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_curatorAttributes` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_curatorAttributes"
        },
        "configuration": {
            "label": "BIS_fnc_curatorAttributes",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Spawn units based on curator settings. Used when curator role is not taken.",
            "examples": [
                {
                    "text": "```sqf\n[curator_module, [west, independent, 0.1, 40, 30, 20, 10] call BIS_fnc_curatorAutomatic;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curator",
                            "description": "`Object` - curator module, costs and coefficients will be read from it"
                        },
                        {
                            "name": "sides",
                            "description": "`Array` - array of [sides](https://community.bistudio.com/wiki/side) of the placed entities"
                        },
                        {
                            "name": "cheatCoef",
                            "description": "`Number` - cheat coefficient (1 means default costs, 0.5 means 50% values; allows spawning of more units)"
                        },
                        {
                            "name": "infantryProb",
                            "description": "`Number` - infantry probability (probabilities are compared together, the ones with higher number have better chance of spawning)"
                        },
                        {
                            "name": "groundProb",
                            "description": "`Number` - ground vehicle probability"
                        },
                        {
                            "name": "airProb",
                            "description": "`Number` - aicraft probability"
                        },
                        {
                            "name": "marineProb",
                            "description": "`Number` - marine probability"
                        }
                    ],
                    "outline": "[curator, sides, cheatCoef, infantryProb, groundProb, airProb, marineProb] call `BIS_fnc_curatorAutomatic`",
                    "returns": "`Array` of `Group`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_curatorAutomatic"
        },
        "configuration": {
            "label": "BIS_fnc_curatorAutomatic",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_curatorAutomaticPositions` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_curatorAutomaticPositions"
        },
        "configuration": {
            "label": "BIS_fnc_curatorAutomaticPositions",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_curatorChallengeDestroyVehicle` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_curatorChallengeDestroyVehicle"
        },
        "configuration": {
            "label": "BIS_fnc_curatorChallengeDestroyVehicle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_curatorChallengeFindIntel` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_curatorChallengeFindIntel"
        },
        "configuration": {
            "label": "BIS_fnc_curatorChallengeFindIntel",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_curatorChallengeFireWeapon` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_curatorChallengeFireWeapon"
        },
        "configuration": {
            "label": "BIS_fnc_curatorChallengeFireWeapon",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_curatorChallengeGetInVehicle` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_curatorChallengeGetInVehicle"
        },
        "configuration": {
            "label": "BIS_fnc_curatorChallengeGetInVehicle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_curatorChallengeIlluminate` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_curatorChallengeIlluminate"
        },
        "configuration": {
            "label": "BIS_fnc_curatorChallengeIlluminate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_curatorChallengeSpawnLightning` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_curatorChallengeSpawnLightning"
        },
        "configuration": {
            "label": "BIS_fnc_curatorChallengeSpawnLightning",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Show hint in curator interface.",
            "examples": [
                {
                    "text": "```sqf\n[\"Title\", \"Some text\", 1337] call BIS_fnc_curatorHint;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "title",
                            "description": "`String`"
                        },
                        {
                            "name": "text",
                            "description": "`String`"
                        },
                        {
                            "name": "duration",
                            "description": "`Number` - (Optional, default 30) duration in seconds"
                        }
                    ],
                    "outline": "[title, text, duration] call `BIS_fnc_curatorHint`",
                    "returns": "`Control` - UI control of the hint text"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_curatorHint"
        },
        "configuration": {
            "label": "BIS_fnc_curatorHint",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Code executed when curator object is edited (i.e., moved or rotated). When a soldier or a vehicle is moved high above ground, create a parachute for them.",
            "examples": [
                {
                    "text": "```sqf\n[module_curator, someObject] call BIS_fnc_curatorObjectEdited;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "module",
                            "description": "`Object` - [Arma 3: Curator](https://community.bistudio.com/wiki/Arma%203%3A%20Curator) module"
                        },
                        {
                            "name": "object",
                            "description": "`Object` - object which was edited"
                        }
                    ],
                    "outline": "[module, object] call `BIS_fnc_curatorObjectEdited`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_curatorObjectEdited"
        },
        "configuration": {
            "label": "BIS_fnc_curatorObjectEdited",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Code executed when curator object is placed.",
            "examples": [
                {
                    "text": "```sqf\n[curatorModule, player] call BIS_fnc_curatorObjectPlaced;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "module",
                            "description": "`Object` - [Arma 3: Curator](https://community.bistudio.com/wiki/Arma%203%3A%20Curator) module"
                        },
                        {
                            "name": "object",
                            "description": "`Object` - object which was edited"
                        }
                    ],
                    "outline": "[module,object] call `BIS_fnc_curatorObjectPlaced`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_curatorObjectPlaced"
        },
        "configuration": {
            "label": "BIS_fnc_curatorObjectPlaced",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Register \"curatorObjectRegistered\" handler. Cost of vehicles with crews will be automatically calculated based on vehicle + crew cost.",
            "examples": [
                {
                    "text": "```sqf\n[curatorModule, { hint format [\"Curator:%1, Classes:%2\", _this # 0, _this # 1] }] call BIS_fnc_curatorObjectRegistered;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curator",
                            "description": "`Object` - curator module"
                        },
                        {
                            "name": "code",
                            "description": "`Code` - handler code, passed arguments are:"
                        }
                    ],
                    "outline": "[curator, code] call `BIS_fnc_curatorObjectRegistered`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_curatorObjectRegistered"
        },
        "configuration": {
            "label": "BIS_fnc_curatorObjectRegistered",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Register curator object costs from a table.\n\nA table can be exported into a spreadsheet using `BIS_fnc_exportCuratorCostTable` and used as argument for this function.",
            "examples": [
                {
                    "text": "```sqf\n// Nothing but the listed flare modules will show up in the curator's unit list\n[getAssignedCuratorLogic player, [\"ModuleFlareWhite_F\",0.02,\"ModuleFlareYellow_F\",0.02,\"ModuleFlareGreen_F\",0.02]] call BIS_fnc_curatorObjectRegisteredTable;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curatorLogic",
                            "description": "`Object` - the curator logic to set the object costs for."
                        },
                        {
                            "name": "className",
                            "description": "`String` - the class name of the object you wish to assign a cost to. Any objects not listed in the array won't appear in the curator's unit list."
                        },
                        {
                            "name": "cost",
                            "description": "`Number` - the cost you wish to assign to the preceding object. The cost should be between 0 and 1, with 1 representing the entire resource bar of the curator."
                        }
                    ],
                    "outline": "[curatorLogic, [className, cost, className, cost...]] call `BIS_fnc_curatorObjectRegisteredTable`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_curatorObjectRegisteredTable"
        },
        "configuration": {
            "label": "BIS_fnc_curatorObjectRegisteredTable",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Show effects when player pings [curator](https://community.bistudio.com/wiki/Curator). Icon and entity list highlighting is handled by engine",
            "examples": [
                {
                    "text": "```sqf\n[module_curator, player] call BIS_fnc_curatorPinged;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "module",
                            "description": "`Object` - [Arma 3: Curator](https://community.bistudio.com/wiki/Arma%203%3A%20Curator) module"
                        },
                        {
                            "name": "player",
                            "description": "`Object` - [Player](https://community.bistudio.com/wiki/player) entity"
                        }
                    ],
                    "outline": "[module, player] call `BIS_fnc_curatorPinged`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_curatorPinged"
        },
        "configuration": {
            "label": "BIS_fnc_curatorPinged",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Restore unit for curators after respawn.\nWhen curator owner, it will transfer ownership to the new unit.\nWhen editable by curator, it will remove the dead unit and register the new one.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_newUnit,BIS_oldUnit] call BIS_fnc_curatorRespawn;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "newUnit",
                            "description": "`Object` - new unit"
                        },
                        {
                            "name": "oldUnit `Object`",
                            "description": "old, dead unit"
                        }
                    ],
                    "outline": "[newUnit,oldUnit] call `BIS_fnc_curatorRespawn`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_curatorRespawn"
        },
        "configuration": {
            "label": "BIS_fnc_curatorRespawn",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Plays some radio message from CfgRadio locally.",
            "examples": [
                {
                    "text": "```sqf\n[player, \"mp_groundsupport_01_casrequested_BHQ_0\"] call BIS_fnc_curatorSayMessage;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Object` - curator entity"
                        },
                        {
                            "name": "sentence",
                            "description": "`String` - sentence from CfgRadio"
                        }
                    ],
                    "outline": "[speaker, sentence] call `BIS_fnc_curatorSayMessage`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_curatorSayMessage"
        },
        "configuration": {
            "label": "BIS_fnc_curatorSayMessage",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Toggle curator vision mode.",
            "examples": [
                {
                    "text": "```sqf\nprivate _visionModes = [Curator] call BIS_fnc_curatorVisionModes;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curator",
                            "description": "`Object` - curator"
                        }
                    ],
                    "outline": "[curator] call `BIS_fnc_curatorVisionModes`",
                    "returns": "`Array` of `Number`s - vision modes"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_curatorVisionModes"
        },
        "configuration": {
            "label": "BIS_fnc_curatorVisionModes",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Code executed when curator waypoint is placed.",
            "examples": [
                {
                    "text": "```sqf\n[curatorModule, group player, 5] call BIS_fnc_curatorWaypointPlaced;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - curator module **Isn't used in the function**"
                        },
                        {
                            "name": "waypointGroup",
                            "description": "`Array` - group owning the edited waypoint"
                        },
                        {
                            "name": "waypointID",
                            "description": "`Number` - ID of the edited waypoint"
                        }
                    ],
                    "outline": "[object, waypointGroup, waypointID] call `BIS_fnc_curatorWaypointPlaced`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_curatorWaypointPlaced"
        },
        "configuration": {
            "label": "BIS_fnc_curatorWaypointPlaced",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Replaces GPS frame.\n\nThe following line **must** be defined in mission [[Description.ext]]:\n```cpp\nonMinimapScript[] = {\"BIS_fnc_customGPS_Spawn\"};\n```",
            "examples": [
                {
                    "text": "```sqf\n[\"ca\\missions_pmc\\data\\ui_gps_ca.paa\", -0.05, 0.16] call BIS_fnc_customGPS;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "path",
                            "description": "`String` - full path to image file"
                        },
                        {
                            "name": "deltaX _(Optional)_",
                            "description": "`Number`"
                        },
                        {
                            "name": "deltaY _(Optional)_",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "[path, _deltaX_, _deltaY_] call `BIS_fnc_customGPS`",
                    "returns": "`Boolean`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_customGPS"
        },
        "configuration": {
            "label": "BIS_fnc_customGPS",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Plays in-game video in GPS frame.\n\nIf `BIS_fnc_customGPS` changed GPS texture, it is used.\n\nGPS GUI layer is `**19**`.",
            "examples": [
                {
                    "text": "```sqf\nprivate _script = [\"\\ca\\video_pmc\\CP00_Reynolds_b.ogv\",1.04] spawn BIS_fnc_customGPSvideo;\nwaitUntil {scriptDone _script};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "path",
                            "description": "`String` - full path to image file"
                        },
                        {
                            "name": "sizeCoef _(Optional)_",
                            "description": "`Number` - screen size coeficient (default is 1)"
                        }
                    ],
                    "outline": "[path, _sizeCoef_] spawn `BIS_fnc_customGPSvideo`",
                    "returns": "[Script](https://community.bistudio.com/wiki/Script%20Handle) - script which terminates itself once video ends"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_customGPSvideo"
        },
        "configuration": {
            "label": "BIS_fnc_customGPSvideo",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Plays in-game video in GPS frame.\n**Arma**: 3|Does not work in {{arma3. See `BIS_fnc_playVideo` instead}}",
            "examples": [
                {
                    "text": "```sqf\n[\"myVideo.ogv\", 0.75] call BIS_fnc_customGPSVideo;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "videoFilePath",
                            "description": "`String` - video file path"
                        },
                        {
                            "name": "sizeCoef",
                            "description": "`Number` - (Optional, default 1)"
                        }
                    ],
                    "outline": "[videoFilePath, sizeCoef] call `BIS_fnc_customGPSVideo`",
                    "returns": "[Script Handle](https://community.bistudio.com/wiki/Script%20Handle)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_customGPSVideo"
        },
        "configuration": {
            "label": "BIS_fnc_customGPSVideo",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Function that rounds specified number to specified amount of decimals.\n**Arma**: 3|Use `toFixed` instead.",
            "examples": [
                {
                    "text": "```sqf\nprivate _cutDecimals = [33.3333, 1] call BIS_fnc_cutDecimals; // returns 33.3\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "number",
                            "description": "`Number` - decimal number to round."
                        },
                        {
                            "name": "precision",
                            "description": "`Number` - (Optional, default 0) amount of decimals to round to"
                        }
                    ],
                    "outline": "[number, precision] call `BIS_fnc_cutDecimals`",
                    "returns": "`Number` - rounded number."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_cutDecimals"
        },
        "configuration": {
            "label": "BIS_fnc_cutDecimals",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Handle effects caused by changing of damage.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_damageChanged;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_damageChanged`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_damageChanged"
        },
        "configuration": {
            "label": "BIS_fnc_damageChanged",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Game pulsing damage effect.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_damagePulsing;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_damagePulsing`",
                    "returns": "[Script Handle](https://community.bistudio.com/wiki/Script%20Handle)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_damagePulsing"
        },
        "configuration": {
            "label": "BIS_fnc_damagePulsing",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Animate a Data Terminal (\"Land_DataTerminal_01_F\").",
            "examples": [
                {
                    "text": "```sqf\n[myTerminal, 3] call BIS_fnc_dataTerminalAnimate;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "dataTerminal",
                            "description": "`Object`"
                        },
                        {
                            "name": "step",
                            "description": "`Number` - in range 0..3, steps being:"
                        }
                    ],
                    "outline": "[dataTerminal, step] call `BIS_fnc_dataTerminalAnimate`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_dataTerminalAnimate"
        },
        "configuration": {
            "label": "BIS_fnc_dataTerminalAnimate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Set Data Terminal colors for its different steps. Steps are:\n# closed terminal\n# opening terminal\n# emitting terminal.\n\nDefault step colors are \"blue\", \"orange\", \"green\".\nSee `BIS_fnc_dataTerminalAnimate` to animate a terminal.",
            "examples": [
                {
                    "text": "```sqf\n[myTerminal, \"purple\", \"red\", \"orange\"] call BIS_fnc_dataTerminalColor;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "dataTerminal",
                            "description": "`Object`"
                        },
                        {
                            "name": "step1color",
                            "description": "`String` - step 1 color.  Can be one of:"
                        },
                        {
                            "name": "step2color",
                            "description": "`String` - step 2 color"
                        },
                        {
                            "name": "step3color",
                            "description": "`String` - step 3 color"
                        }
                    ],
                    "outline": "[dataTerminal, step1color, step2color, step3color] call `BIS_fnc_dataTerminalColor`",
                    "returns": "`Boolean` - `false` if data terminal is null, `true` if the script ends properly"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_dataTerminalColor"
        },
        "configuration": {
            "label": "BIS_fnc_dataTerminalColor",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Check if class exists in Scripted Database.",
            "examples": [
                {
                    "text": "```sqf\n[[\"#MILLER\", [\"&NAME\", \"Miller\", \"&UID\", \"1234\", \"&MONEY\", 1000], [\"miller\"]] call BIS_fnc_dbClassCheck // true\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "databaseArray",
                            "description": "`Array`: An array in the Scripted Database format"
                        },
                        {
                            "name": "path",
                            "description": "`Array`: Database path to be checked"
                        }
                    ],
                    "outline": "[databaseArray, path] call `BIS_fnc_dbClassCheck`",
                    "returns": "`Boolean`: True if class exists"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_dbClassCheck"
        },
        "configuration": {
            "label": "BIS_fnc_dbClassCheck",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Converts string to class definition.",
            "examples": [
                {
                    "text": "```sqf\n\"miller\" call BIS_fnc_dbClassId; // \"#MILLER\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "text",
                            "description": "`String`: string to convert to class definition"
                        }
                    ],
                    "outline": "text call `BIS_fnc_dbClassId`",
                    "returns": "`String`: class definition"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_dbClassId"
        },
        "configuration": {
            "label": "BIS_fnc_dbClassId",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns indices leading to given class.",
            "examples": [
                {
                    "text": "```sqf\n[[\"#MILLER\", [\"&NAME\", \"Miller\", \"&UID\", \"1234\", \"&MONEY\", 1000]], [\"miller\"]] call BIS_fnc_dbClassIndex; // [0]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "database",
                            "description": "`Array`: database array"
                        },
                        {
                            "name": "path",
                            "description": "`Array`: path to class"
                        }
                    ],
                    "outline": "[database, path] call `BIS_fnc_dbClassIndex`",
                    "returns": "`Array`: List of indices"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_dbClassIndex"
        },
        "configuration": {
            "label": "BIS_fnc_dbClassIndex",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns all classes within class.",
            "examples": [
                {
                    "text": "```sqf\n[[\"#MILLER\", [\"&KILLS\", 1000], \"#TERRA\", [\"&WEAPON\", \"MX 6.5mm\"]], []] call BIS_fnc_dbClassList; // [\"MILLER\",\"TERRA\"]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "database",
                            "description": "`Array`: database array"
                        },
                        {
                            "name": "path",
                            "description": "`Array`: path to array of classes"
                        }
                    ],
                    "outline": "[database, path] call `BIS_fnc_dbClassList`",
                    "returns": "`Array`: List of classnames"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_dbClassList"
        },
        "configuration": {
            "label": "BIS_fnc_dbClassList",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Remove class from Scripted Database. The function does not return the modified database but modifies the passed array directly.",
            "examples": [
                {
                    "text": "```sqf\nprivate _db = [\"#MILLER\", [\"&KILLS\", 1000], \"#TERRA\", [\"&WEAPON\", \"MX 6.5mm\"]];\n[_db, [\"terra\"]] call BIS_fnc_dbClassRemove; // true\n_db // [\"#MILLER\",[\"&KILLS\",1000]]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "database",
                            "description": "`Array`: Database array"
                        },
                        {
                            "name": "path",
                            "description": "`Array`: Path to class to be deleted"
                        }
                    ],
                    "outline": "[database, path] call `BIS_fnc_dbClassRemove`",
                    "returns": "`Boolean`: True if class was removed"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_dbClassRemove"
        },
        "configuration": {
            "label": "BIS_fnc_dbClassRemove",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns content of given class.",
            "examples": [
                {
                    "text": "```sqf\n[[\"#MILLER\", [\"&KILLS\", 1000], \"#TERRA\", [\"&WEAPON\", \"MX 6.5mm\"]], [\"miller\"]] call BIS_fnc_dbClassReturn; // [\"&KILLS\", 1000]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "database",
                            "description": "`Array`: database array"
                        },
                        {
                            "name": "path",
                            "description": "`Array`: path to the class which content should be returned"
                        }
                    ],
                    "outline": "[database, path] call `BIS_fnc_dbClassReturn`",
                    "returns": "`Array` - class content"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_dbClassReturn"
        },
        "configuration": {
            "label": "BIS_fnc_dbClassReturn",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Add class to Scripted Database. The function modifies the passed array and returns a success flag.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _db = [\"#MILLER\", [\"&KILLS\", 1000], \"#TERRA\", [\"&WEAPON\", \"MX 6.5mm\"]];\n[_db, [\"kavala\"], [\"&POPULATION\", 42]] call BIS_fnc_dbClassSet;\n_db // [\"#MILLER\",[\"&KILLS\",1000],\"#TERRA\",[\"&WEAPON\",\"MX 6.5mm\"],\"#KAVALA\",[\"&POPULATION\",42]]\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "database",
                            "description": "`Array` - database array"
                        },
                        {
                            "name": "path",
                            "description": "`Array` - path to class"
                        },
                        {
                            "name": "value",
                            "description": "`Array` - (Optional, default <sqf inline>[]) the class' values"
                        }
                    ],
                    "outline": "[database, path, (value)] call `BIS_fnc_dbClassSet`",
                    "returns": "`Boolean`: True if class was added"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_dbClassSet"
        },
        "configuration": {
            "label": "BIS_fnc_dbClassSet",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "If there is a database present in the config (config.cpp or descritpion.ext) then this function can be used to get the config path of the passed array. So it basically converts the array into a config entry.",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "path",
                            "description": "`Array`: Path to class or value"
                        },
                        {
                            "name": "config",
                            "description": "`Config`: Database config"
                        }
                    ],
                    "outline": "[path, config] call `BIS_fnc_dbConfigPath`",
                    "returns": "`Config`: Config path to the class or value"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_dbConfigPath"
        },
        "configuration": {
            "label": "BIS_fnc_dbConfigPath",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Copy config classes and adds them to Scripted Database. Config values can not be passed through this function. The passed array gets modified.",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "database",
                            "description": "`Array`: Database array"
                        },
                        {
                            "name": "path",
                            "description": "`Array`: Path to class"
                        },
                        {
                            "name": "config",
                            "description": "`Config`: Config from where to import database"
                        }
                    ],
                    "outline": "[database, path, config] call `BIS_fnc_dbImportConfig`",
                    "returns": "`Boolean`: True if copied"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_dbImportConfig"
        },
        "configuration": {
            "label": "BIS_fnc_dbImportConfig",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Import XML file into Scripted Database.",
            "examples": [
                {
                    "text": "```sqf\nprivate _xmlDB = \"myFile.xml\" call BIS_fnc_dbImportXML;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "xmlFile",
                            "description": "`String` - XML file path"
                        }
                    ],
                    "outline": "xmlFile call `BIS_fnc_dbImportXML`",
                    "returns": "`Array` - database"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_dbImportXML"
        },
        "configuration": {
            "label": "BIS_fnc_dbImportXML",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Checks if string is class definition.",
            "examples": [
                {
                    "text": "```sqf\n\"#MYCLASS\" call BIS_fnc_dbIsClass; // true\n\"#myclass\" call BIS_fnc_dbIsClass; // true\n\"MYCLASS\" call BIS_fnc_dbIsClass; // false\n1234 call BIS_fnc_dbIsClass; // false\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "text",
                            "description": "`String`: Check if text is in class format"
                        }
                    ],
                    "outline": "text call `BIS_fnc_dbIsClass`",
                    "returns": "`Boolean`: true when the argument starts with \"#\" (class symbol returned with `BIS_fnc_dbSymbolClass`)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_dbIsClass"
        },
        "configuration": {
            "label": "BIS_fnc_dbIsClass",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Checks if string is value definition.",
            "examples": [
                {
                    "text": "```sqf\n\"&MYVALUE\" call BIS_fnc_dbIsValue; // true\n\"&myvalue\" call BIS_fnc_dbIsValue; // true\n\"MYVALUE\" call BIS_fnc_dbIsValue; // false\n1234 call BIS_fnc_dbIsValue; // false\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "text",
                            "description": "`String`: Check if text is in value format"
                        }
                    ],
                    "outline": "text call `BIS_fnc_dbIsValue`",
                    "returns": "`Boolean`: `true` when the argument starts with \"&amp;\" (value symbol returned with `BIS_fnc_dbSymbolValue`)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_dbIsValue"
        },
        "configuration": {
            "label": "BIS_fnc_dbIsValue",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Copy Scripted Database content into clipboard for evaluation. Text will be formatted as config.\n**IMPORTANT**: **(Arma 3)** The function does not insert semicolons at the end of values (not intentional?). You have to manually add them to make the config functional.",
            "examples": [
                {
                    "text": "```sqf\n[[\"#MILLER\", [\"&KILLS\", 1000, \"&RANK\", \"CAPTAIN\"], \"#TERRA\", [\"&WEAPON\", \"MX 6.5mm\"]]] call BIS_fnc_dbPrint;\n```"
                },
                {
                    "text": "```sqf\n[[\"#MILLER\", [\"&KILLS\", 1000, \"&RANK\", \"CAPTAIN\"], \"#TERRA\", [\"&WEAPON\", \"MX 6.5mm\"]], 1] call BIS_fnc_dbPrint;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "database",
                            "description": "`Array`: Database array"
                        },
                        {
                            "name": "tabs",
                            "description": "`Number`: Number of tabs"
                        }
                    ],
                    "outline": "[database, tabs] call `BIS_fnc_dbPrint`",
                    "returns": "`String`: Printed text"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_dbPrint"
        },
        "configuration": {
            "label": "BIS_fnc_dbPrint",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "A getter function to return the symbol used for declaring a class.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_dbSymbolClass; // #\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_dbSymbolClass`",
                    "returns": "`String`: the symbol used for classes"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_dbSymbolClass"
        },
        "configuration": {
            "label": "BIS_fnc_dbSymbolClass",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "A getter function to return the symobl used for declaring a value.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_dbSymbolValue; // &\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_dbSymbolValue`",
                    "returns": "`String`: the symbol used for values"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_dbSymbolValue"
        },
        "configuration": {
            "label": "BIS_fnc_dbSymbolValue",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Check if value exists in Scripted Database.",
            "examples": [
                {
                    "text": "```sqf\n[[\"#MILLER\", [\"&KILLS\", 1000, \"&RANK\", \"CAPTAIN\"]]] call BIS_fnc_dbValueCheck; // true\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "database",
                            "description": "`Array`: Database array"
                        },
                        {
                            "name": "path",
                            "description": "`Array`: Path to value"
                        }
                    ],
                    "outline": "[database, path] call `BIS_fnc_dbValueCheck`",
                    "returns": "`Boolean`: True when value exists"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_dbValueCheck"
        },
        "configuration": {
            "label": "BIS_fnc_dbValueCheck",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Converts string to value definition or vice versa.",
            "examples": [
                {
                    "text": "```sqf\n\"MYVALUE\" call BIS_fnc_dbValueId; // \"&MYVALUE\"\n```"
                },
                {
                    "text": "```sqf\n[\"&MYVALUE\"] call BIS_fnc_dbValueId; // \"MYVALUE\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "valueString",
                            "description": "`String` or `Array`:"
                        }
                    ],
                    "outline": "valueString call `BIS_fnc_dbValueId`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_dbValueId"
        },
        "configuration": {
            "label": "BIS_fnc_dbValueId",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns indexes leading to given value.",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "database",
                            "description": "`Array`: Database array"
                        },
                        {
                            "name": "path",
                            "description": "`Array`: Path leading to value entry"
                        }
                    ],
                    "outline": "[database, path] call `BIS_fnc_dbValueIndex`",
                    "returns": "`Array`: List of indexes"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_dbValueIndex"
        },
        "configuration": {
            "label": "BIS_fnc_dbValueIndex",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns all values within class.",
            "examples": [
                {
                    "text": "```sqf\n[[\"#MILLER\", [\"&KILLS\", 1000, \"&RANK\", \"CAPTAIN\"]], [\"miller\"]] call BIS_fnc_dbValueList; // [\"KILLS\", \"RANK\"]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "database",
                            "description": "`Array`: database array"
                        },
                        {
                            "name": "path- `Array`",
                            "description": "path to class"
                        }
                    ],
                    "outline": "[database, path] call `BIS_fnc_dbValueList`",
                    "returns": "`Array`: List of all value names"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_dbValueList"
        },
        "configuration": {
            "label": "BIS_fnc_dbValueList",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Remove value from Scripted Database.",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "database",
                            "description": "`Array`: Databse array"
                        },
                        {
                            "name": "path",
                            "description": "`Array`: Path to the value to remove"
                        }
                    ],
                    "outline": "[database, path] call `BIS_fnc_dbValueRemove`",
                    "returns": "`Boolean`: True if the value was removed"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_dbValueRemove"
        },
        "configuration": {
            "label": "BIS_fnc_dbValueRemove",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns content of given value.",
            "examples": [
                {
                    "text": "```sqf\n[[\"#MILLER\", [\"&KILLS\", 1000, \"&RANK\", \"CAPTAIN\"]], [\"miller\",\"kills\"]] call BIS_fnc_dbValueReturn; // 1000\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "database",
                            "description": "`Array`: Databse array"
                        },
                        {
                            "name": "path",
                            "description": "`Array`: Path to value"
                        },
                        {
                            "name": "(optional) defaultValue",
                            "description": "anything: In case the value does not exist return this value (Default: nil)"
                        }
                    ],
                    "outline": "[database, path, (defaultValue)] call `BIS_fnc_dbValueReturn`",
                    "returns": "Anything: Value's content"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_dbValueReturn"
        },
        "configuration": {
            "label": "BIS_fnc_dbValueReturn",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Add value to Scripted Database. If the provided path does not exist it is created, otherwise the value is overwritten. The passed array gets modified.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _db = [\"#MILLER\", [\"&KILLS\", 1000, \"&RANK\", \"CAPTAIN\"]];\n[_db, [\"miller\",\"kills\"],200] call BIS_fnc_dbValueSet;\n_db // [\"#MILLER\",[\"&KILLS\",200,\"&RANK\",\"CAPTAIN\"]]\n\n```"
                },
                {
                    "text": "```sqf\n\nprivate _db = [\"#MILLER\", [\"&KILLS\", 1000, \"&RANK\", \"CAPTAIN\"]];\n[_db, [\"miller\",\"iq\"],200] call BIS_fnc_dbValueSet;\n_db // [\"#MILLER\",[\"&KILLS\",1000,\"&RANK\",\"CAPTAIN\",\"&IQ\",200]]\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "database",
                            "description": "`Array`: database array"
                        },
                        {
                            "name": "path",
                            "description": "`Array`: path to value"
                        }
                    ],
                    "outline": "[database, path, newvalue] call `BIS_fnc_dbValueSet`",
                    "returns": "`Boolean`: True if value was added"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_dbValueSet"
        },
        "configuration": {
            "label": "BIS_fnc_dbValueSet",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Executes Debug Console code.",
            "examples": [
                {
                    "text": "```sqf\n[1,{hint \"Hello Players!\"}] call BIS_fnc_debugConsoleExec;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Number` - "
                        },
                        {
                            "name": "code",
                            "description": "`Code` - code to be executed"
                        }
                    ],
                    "outline": "[target, code] call `BIS_fnc_debugConsoleExec`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_debugConsoleExec"
        },
        "configuration": {
            "label": "BIS_fnc_debugConsoleExec",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Purges user profile from unwanted `BIS_fnc_diagAAR` data. If more than 7500 entries are found, the user is [asked](https://community.bistudio.com/wiki/BIS_fnc_GUImessage) to delete `profileNamespace` variable **BIS_fnc_diagAAR_data**.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_debugProfile;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_debugProfile`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_debugProfile"
        },
        "configuration": {
            "label": "BIS_fnc_debugProfile",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Decodes a single scalar into array of unique binary flags with indexes between 0-15.",
            "examples": [
                {
                    "text": "```sqf\nprivate _decodedFlags = 13 call BIS_fnc_decodeFlags;//Returns [0,2,3]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "scalar",
                            "description": "`Number` - scalar (max. 65535, 2^16-1)"
                        }
                    ],
                    "outline": "scalar call `BIS_fnc_decodeFlags`",
                    "returns": "`Array` - flags (See parameter of `BIS_fnc_encodeFlags`)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_decodeFlags"
        },
        "configuration": {
            "label": "BIS_fnc_decodeFlags",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Decodes a single scalar into array of unique binary flags (zeroes or ones).\n**NOTE**: The maximal decodable number is **16777215** (2<sup>24</sup> - 1).",
            "examples": [
                {
                    "text": "```sqf\nprivate _result = 13 call BIS_fnc_decodeFlags2; // returns [1,0,1,1]\n```"
                },
                {
                    "text": "```sqf\nprivate _result = [13, 8] call BIS_fnc_decodeFlags2; // returns [1,0,1,1,0,0,0,0]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "value",
                            "description": "`Number` - (Optional, default 0) the value to be converted"
                        },
                        {
                            "name": "size",
                            "description": "`Number` - (Optional, default 1) wanted array size"
                        }
                    ],
                    "outline": "[value, size] call `BIS_fnc_decodeFlags2`",
                    "returns": "`Array` of `Number`s - \"boolean\" flags where 0 {{=}} false and 1 {{=}} true"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_decodeFlags2"
        },
        "configuration": {
            "label": "BIS_fnc_decodeFlags2",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tDecodes a single scalar into array of unique 4-state flags (values 0,1,2,3). Max. number that can be decoded is 16777215 (= 4^12 - 1). An optional parameter can by supplied to resize the output.\n\n\tSyntax:\n\t-------\n\t_flags:array = _encodedFlags:scalar call BIS_fnc_decodeFlags4;\n\t_flags:array = [_encodedFlags:scalar,_size:scalar] call BIS_fnc_decodeFlags4;\n\n\tExample:\n\t--------\n\t[1,0,2,3] = 225 call BIS_fnc_decodeFlags4;\n\t[1,0,2,3,0,0,0,0] = [225,8] call BIS_fnc_decodeFlags4;\n\n\tExplanation:\n\t------------\n\t225 -> 11 10 00 01 -> [1,0,2,3]\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_decodeFlags4`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_decodeFlags4"
        },
        "configuration": {
            "label": "BIS_fnc_decodeFlags4",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tDecodes a single scalar into array of unique 8-state flags (values 0,1,2,3,4,5,6,7). Max. number that can be decoded is 16777215 (= 8^8 - 1). An optional parameter can by supplied to resize the output.\n\n\tSyntax:\n\t-------\n\t_flags:array = _encodedFlags:scalar call BIS_fnc_decodeFlags8;\n\t_flags:array = [_encodedFlags:scalar,_size:scalar] call BIS_fnc_decodeFlags8;\n\n\tExample:\n\t--------\n\t[7,2,3,0,1] = 4311 call BIS_fnc_decodeFlags8;\n\t[7,2,3,0,1,0,0,0] = [4311,8] call BIS_fnc_decodeFlags8;\n\n\tExplanation:\n\t------------\n\t4311 -> 0001 0000 1101 0111 -> 001 000 011 010 111 -> [7,2,3,0,1]\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_decodeFlags8`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_decodeFlags8"
        },
        "configuration": {
            "label": "BIS_fnc_decodeFlags8",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Delete the provided counter added by `BIS_fnc_counter`.",
            "examples": [
                {
                    "text": "```sqf\n[[\"TAG_Score\", player]] call BIS_fnc_deleteCounter;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "varName",
                            "description": "`String` or `Array` format [varName, namespace] - default namespace is `missionNamespace`"
                        }
                    ],
                    "outline": "[varName] call `BIS_fnc_deleteCounter`",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_deleteCounter"
        },
        "configuration": {
            "label": "BIS_fnc_deleteCounter",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Delete loadout saved using `BIS_fnc_saveInventory`.",
            "examples": [
                {
                    "text": "```sqf\n[player, [missionNamespace, \"BIS_inv\"]] call BIS_fnc_deleteInventory;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit whose inventory should be saved"
                        },
                        {
                            "name": "target",
                            "description": "`Namespace`, `Group` or `Object` - target where the loadout is stored"
                        },
                        {
                            "name": "loadout",
                            "description": "`String` - loadout name"
                        }
                    ],
                    "outline": "[unit, [target, loadout]] call `BIS_fnc_deleteInventory`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_deleteInventory"
        },
        "configuration": {
            "label": "BIS_fnc_deleteInventory",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Deletes given task. **NOTE**:  See [Arma 3: Task Framework](https://community.bistudio.com/wiki/Arma%203%3A%20Task%20Framework).",
            "examples": [
                {
                    "text": "```sqf\n[\"task_1\"] call BIS_fnc_deleteTask;\n```"
                },
                {
                    "text": "```sqf\n[\"task_1\", west] call BIS_fnc_deleteTask;\n```"
                },
                {
                    "text": "```sqf\n[\"task_1\", [west, player, group soldier]] call BIS_fnc_deleteTask;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "taskID",
                            "description": "`String` - ID of the task"
                        },
                        {
                            "name": "owner",
                            "description": "`String` - owner of the task.(Optional) Can be:"
                        },
                        {
                            "name": "removeFromJIP",
                            "description": "`Boolean` - `true` to also remove task from JIP queue, default `false`"
                        }
                    ],
                    "outline": "[taskID, owner, removeFromJIP] call `BIS_fnc_deleteTask`",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_deleteTask"
        },
        "configuration": {
            "label": "BIS_fnc_deleteTask",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Deletes specific crew member directly from the vehicle.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_tank, gunner BIS_tank] call BIS_fnc_deleteVehicleCrew;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "crewMember",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "[vehicle, crewMember] call `BIS_fnc_deleteVehicleCrew`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_deleteVehicleCrew"
        },
        "configuration": {
            "label": "BIS_fnc_deleteVehicleCrew",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Calculates and returns the time's delta between previous and current call to this function.\n\n**NOTE**: This commands internally uses `time`. For accurate-critical time measurement, use `diag_tickTime`.",
            "examples": [
                {
                    "text": "```sqf\n[\"TAG_duration\"] call BIS_fnc_deltaTime; // Defines the starting point\n// ...\nprivate _duration1 = [\"TAG_duration\"] call BIS_fnc_deltaTime; // Gets time between starting point and now\n// ...\nprivate _duration2 = [\"TAG_duration\"] call BIS_fnc_deltaTime; // Gets time between _duration1 and now\n[\"TAG_duration\", true] call BIS_fnc_deltaTime; // deletes the global variable \"TAG_duration\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "id",
                            "description": "`String` - (Optional, default \"generic\") used to not create conflicts between different systems calling this function, each system can calculate delta time since it last ticked. Will be a `missionNamespace` variable"
                        },
                        {
                            "name": "clear",
                            "description": "`Boolean` - (Optional, default `false`) if set to `true`, will delete the `missionNamespace` variable (defined by _id_)"
                        }
                    ],
                    "outline": "[id, clear] call `BIS_fnc_deltaTime`",
                    "returns": "`Number` - the delta time - 0.001 if _clear_ is `true`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_deltaTime"
        },
        "configuration": {
            "label": "BIS_fnc_deltaTime",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Destroys building in given area based on input seed.",
            "examples": [
                {
                    "text": "```sqf\n[\"destroyBase\", 500, 42, [ourHouseInTheMiddleOfTheStreet]] call BIS_fnc_destroyCity;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Object`, `String` or `Position` - center of the area:"
                        },
                        {
                            "name": "areaSize",
                            "description": "`Number` - (Optional, default 1000) area radius"
                        },
                        {
                            "name": "seed",
                            "description": "`Number` - (Optional, default 1138) destruction's random seed"
                        },
                        {
                            "name": "blacklist",
                            "description": "`Array` - (Optional, default <sqf inline>[]) array of spared buildings"
                        }
                    ],
                    "outline": "[position, _areaSize_, _seed_, _blacklist_] call `BIS_fnc_destroyCity`",
                    "returns": "`Boolean` - `true` when completed"
                }
            ],
            "effectLocality": "Global Effect",
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_destroyCity"
        },
        "configuration": {
            "label": "BIS_fnc_destroyCity",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Bravo Zero One development\n\t- John_Spartan\n\n\tDescription:\n\t- This is a sub function designed to handle animations of ship hangar doors. Used in Eden attributes and objects user actions.\n\n\tExecution:\n\t- Call from script.\n\n\tExample:\n\t\t[_shipPart, _value, false] spawn BIS_fnc_destroyer01AnimateHangarDoors;\n\n\tRequired:\n\t\tObject (ship) must have all animations correctly defined and user actions configured.\n\n\tParameter(s):\n\t\t_this select 0: mode (Scalar)\n\t\t0: ship-part object\n\t\tand\n\t\t1: animation state of doors\n\t\t2: animation speed (instant = true/smooth=false);\n\n\tReturns: nothing\n\tResult: Ship's hangar door animation is played with sounds added.\n\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_destroyer01AnimateHangarDoors`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_destroyer01AnimateHangarDoors"
        },
        "configuration": {
            "label": "BIS_fnc_destroyer01AnimateHangarDoors",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Bravo Zero One development\n\t- John_Spartan\n\n\tDescription:\n\t- This is a sub function designed to delete dynamic ships (multi-part structure) in EDEN editor. Ship consists of multiple sub-objects that are linked together based on precise memory point positions in 3D space.\n\tFunction will delete ship parts in EDEN editor after main object is deleted.\n\n\tExecution:\n\t- Call from EH on the main ship base model (blank model with memory points and reference config).\n\n\t\tExample:\n\t\tclass Eventhandlers\n\t\t{\n\t\t\tinit = \"_this call BIS_fnc_Destroyer01Init\";\t\t\t\t\t\t\t\t//main init fnc, will assemble ship in game\n\t\t\tAttributesChanged3DEN = \"_this call BIS_fnc_Destroyer01EdenInit\";\t\t\t//function to update objects position in EDEN editor if attributes changed by player\n\t\t\tDragged3DEN = \"_this call BIS_fnc_Destroyer01PosUpdate\";\t\t\t\t\t//function to update objects position in EDEN editor if attributes changed by player\n\t\t\tRegisteredToWorld3DEN = \"_this call BIS_fnc_Destroyer01EdenInit\";\t\t\t//initial EDEN init fnc (main init is still called)\n\t\t\tUnregisteredFromWorld3DEN = \"_this call BIS_fnc_Destroyer01EdenDelete\";\t\t//function  to delete all ship objects in EDEN editor\n\t\t};\n\n\tRequirements:\n\t- An array of ship parts/objects as a variable attached to main ship base. This array is created by main BIS_fnc_Destroyer01Init.\n\n\tParameter(s):\n\t\t_this select 0: mode (Scalar)\n\t\t0: ship Base/object\n\t\tand\n\t\t1: array of objects in variable in base objects name-space [\"bis_carrierParts\", []];\n\n\tReturns: nothing\n\tResult: Ship's parts are deleted in EDEN editor.\n\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_destroyer01EdenDelete`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_destroyer01EdenDelete"
        },
        "configuration": {
            "label": "BIS_fnc_destroyer01EdenDelete",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Bravo Zero One development\n\t- John_Spartan\n\n\tDescription:\n\t- This is a sub function designed to assemble dynamic ship (multi-part structure) in EDEN editor. Ship consists of multiple sub-objects that are linked together based on precise memory point positions in 3D space.\n\tFunction will update initial init setup on EDEN editor invoked.\n\n\tExecution:\n\t- Call from EH on the main ship's base model (blank model with memory points and reference config).\n\n\t\tExample:\n\t\tclass Eventhandlers\n\t\t{\n\t\t\tinit = \"_this call BIS_fnc_Destroyer01Init\";\t\t\t\t\t\t\t\t//main init fnc, will assemble ship in game\n\t\t\tAttributesChanged3DEN = \"_this call BIS_fnc_Destroyer01EdenInit\";\t\t\t//function to update objects position in EDEN editor if attributes changed by player\n\t\t\tDragged3DEN = \"_this call BIS_fnc_Destroyer01PosUpdate\";\t\t\t\t\t//function to update objects position in EDEN editor if attributes changed by player\n\t\t\tRegisteredToWorld3DEN = \"_this call BIS_fnc_Destroyer01EdenInit\";\t\t\t//initial EDEN init fnc (main init is still called)\n\t\t\tUnregisteredFromWorld3DEN = \"_this call BIS_fnc_Destroyer01EdenDelete\";\t\t//function  to delete all ship objects in EDEN editor\n\t\t};\n\n\tRequirements:\n\t- An array of ship parts/objects as a variable attached to main ship base. This array is created by main BIS_fnc_Destroyer01Init.\n\n\tParameter(s):\n\t\t_this select 0: mode (Scalar)\n\t\t0: ship Base/object\n\t\tand\n\t\t1: array of objects in variable in base objects names-pace [\"bis_carrierParts\", []];\n\n\tReturns: nothing\n\tResult: Ship's position is updated in EDEN editor.\n\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_destroyer01EdenInit`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_destroyer01EdenInit"
        },
        "configuration": {
            "label": "BIS_fnc_destroyer01EdenInit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Bravo Zero One development\n\t- John_Spartan\n\n\tDescription:\n\t- This is a helper function to get ship components (objects) by class name from stored array in ships master component's name-space (\"BIS_CarrierParts\" array).\n\n\tExecution:\n\t- Call from script or config.\n\n\t\tExample:\n\t\t[_this, 'Land_Destroyer_01_hull_05_F'] call BIS_fnc_destroyer01GetShipPart;\n\n\tRequirements:\n\t- Ships master object must be present. Ships master object must have initialized the array of sub components.\n\n\tParameter(s):\n\t\t_this select 0: mode (Scalar)\n\t\t0: ship Base/object\n\t\t1: ship part class name to find\n\n\tReturns: object (ship part that matches selected class name)\n\tResult: n/a\n\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_destroyer01GetShipPart`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_destroyer01GetShipPart"
        },
        "configuration": {
            "label": "BIS_fnc_destroyer01GetShipPart",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Bravo Zero One development\n\t- John_Spartan\n\n\tDescription:\n\t- This is a damage visual FX simulation function designed to animate ships bridge windows when shot.\n\t  Due to engine limitation (damage simulation is disabled for indestructible objects e.g. ships components) this workaround is applied.\n\n\tExecution:\n\t- Call from EH on the ship's model part with windows.\n\n\t\tExample:\n\t\tclass Eventhandlers\n\t\t{\n\t\t\tHitPart = \"_this call BIS_fnc_Destroyer01HandleDamage;\";\n\t\t};\n\n\tRequirements:\n\t- Compatible object (e.g. ship component) must have a set of selections that are setup and named by convention.\n\t  Selections must be defined as hidden selections in order for setObjectTexture to work.\n\n\tParameter(s):\n\t\t_this select 0: mode (Scalar)\n\t\t0: event Handler Array as documented here - https://community.bistudio.com/wiki/Arma_3:_Event_Handlers#HitPart\n\n\tReturns: nothing\n\tResult: Destroyer (ship) window textures are swapped for damaged ones. Simple swap.\n\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_destroyer01HandleDamage`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_destroyer01HandleDamage"
        },
        "configuration": {
            "label": "BIS_fnc_destroyer01HandleDamage",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Bravo Zero One development\n\t- John_Spartan\n\n\tDescription:\n\t- This is a main function designed to assemble dynamic ship (multi-part structure). Ship consists of multiple sub-objects that are linked together based on precise memory point positions in 3D space.\n\n\tExecution:\n\t- Call from EH on the main ship's base model (blank model with memory points and reference config).\n\n\t\tExample:\n\t\tclass Eventhandlers\n\t\t{\n\t\t\tinit = \"_this call BIS_fnc_Destroyer01Init\";\t\t\t\t\t\t\t\t//main init fnc, will assemble ship in game\n\t\t\tAttributesChanged3DEN = \"_this call BIS_fnc_Destroyer01EdenInit\";\t\t\t//function to update objects position in EDEN editor if attributes changed by player\n\t\t\tDragged3DEN = \"_this call BIS_fnc_Destroyer01PosUpdate\";\t\t\t\t\t//function to update objects position in EDEN editor if attributes changed by player\n\t\t\tRegisteredToWorld3DEN = \"_this call BIS_fnc_Destroyer01EdenInit\";\t\t\t//initial EDEN init fnc (main init is still called)\n\t\t\tUnregisteredFromWorld3DEN = \"_this call BIS_fnc_Destroyer01EdenDelete\";\t\t//function  to delete all ship objects in EDEN editor\n\t\t};\n\n\tRequirements:\n\t- Compatible object (carrier/ship) must have a base model with reference memory points and set of parts defined as separate objects in cfgVehicles config with their own models.\n\tMain ship base must have a definition of all listed sub parts and memory point position to reference it is placement in 3D space.\n\n\t\tExample in cfgVehicles class for ship base\n\t\tmultiStructureParts[] = {\n\t\t\t\t\t\t{\"Land_Destroyer_01_hull_01_F\",\"pos_hull_1\"},\n\t\t\t\t\t\t{\"Land_Destroyer_01_hull_02_F\",\"pos_hull_2\"},\n\t\t\t\t\t\t{\"Land_Destroyer_01_hull_03_F\",\"pos_hull_3\"},\n\t\t\t\t\t\t{\"Land_Destroyer_01_hull_04_F\",\"pos_hull_4\"},\n\t\t\t\t\t\t{\"Land_Destroyer_01_hull_05_F\",\"pos_hull_5\"},\n\t\t\t\t\t\t{\"Land_Destroyer_01_interior_02_F\",\"pos_hull_2\"},\n\t\t\t\t\t\t{\"Land_Destroyer_01_interior_03_F\",\"pos_hull_3\"},\n\t\t\t\t\t\t{\"Land_Destroyer_01_interior_04_F\",\"pos_hull_4\"},\n\t\t\t\t\t\t{\"Land_HelipadEmpty_F\",\"pos_heliPad\"},\n\t\t\t\t\t\t{\"ShipFlag_US_F\",\"pos_Flag\"}\n\n\t\t\t\t\t};\n\n\tParameter(s):\n\t\t_this select 0: mode (Scalar)\n\t\t0: ship Base/object\n\n\t\tand parameters from config\n\n\tReturns: exposes and array of objects (ship parts) to other scripts for easy access as variable in it is own object name-space.\n\tResult: Destroyer (ship) is assembled\n\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_destroyer01Init`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_destroyer01Init"
        },
        "configuration": {
            "label": "BIS_fnc_destroyer01Init",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Bravo Zero One development\n\t- John_Spartan\n\n\tDescription:\n\t- This is a sub function designed to customize ships hull numbers.\n\n\tExecution:\n\t- Call from vehicles config of eden attributes.\n\n\t\tExample:\n\t\t\tclass CustomShipNumber1\n\t\t\t{\n\t\t\t\tdisplayName=\"$STR_3den_object_attribute_CustomShipNumber1_displayname\";\n\t\t\t\ttooltip=\"$STR_3den_object_attribute_CustomShipNumber1_tooltip\";\n\t\t\t\tproperty=\"CustomShipNumber1\";\n\t\t\t\tcontrol=\"EditShort\";\n\t\t\t\texpression=\"[([_this, 'Land_Destroyer_01_hull_01_F'] call BIS_fnc_destroyer01GetShipPart), _value, 0] spawn BIS_fnc_destroyer01InitHullNumbers;\";\n\t\t\t\tdefaultValue=\"0\";\n\t\t\t\tvalidate = \"number\";\n\t\t\t\tcondition = \"object\";\n\t\t\t\ttypeName = \"NUMBER\";\n\t\t\t};\n\n\tRequired:\n\t\tObject (ship) must have predefined hidden selections for hull number. Pass object of ship part component which contains numbered selections.\n\n\tParameter(s):\n\t\t_this select 0: mode (Scalar)\n\t\t0: ship-part object\n\t\tand\n\t\t1: number that should be displayed on the selection\n\t\t2: selection number\n\n\tReturns: nothing\n\tResult: Ship's hull number is set to specified number.\n\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_destroyer01InitHullNumbers`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_destroyer01InitHullNumbers"
        },
        "configuration": {
            "label": "BIS_fnc_destroyer01InitHullNumbers",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "This function is designed to handle animations of ship hangar doors from vehicle user action (see {{Link|#Examples}}).\nIt calls `BIS_fnc_destroyer01AnimateHangarDoors`.\n\n**IMPORTANT**: Object (ship) must have all animations correctly defined and user actions configured.",
            "examples": [
                {
                    "text": "```sqf\n\n[this, 1] call BIS_fnc_destroyer01OperateHangarDoors; // to open doors\n[this, 0] call BIS_fnc_destroyer01OperateHangarDoors; // to close doors\n\n```\n\n```cpp\nclass OpenHangarDoor_1\n{\n\tdisplayNameDefault\t\t=\"<img image='\\A3\\Ui_f\\data\\IGUI\\Cfg\\Actions\\open_door_ca.paa' size='2.5' />\";\n\tdisplayName \t\t\t= \"$STR_DN_OUT_O_DOOR\";\n\tposition \t\t\t\t= \"pos_Door_Hangar_1_Trigger\";\n\tpriority \t\t\t\t= 0.4;\n\tradius \t\t\t\t\t= 1.5;\n\tonlyForPlayer \t\t\t= 0;\n\tcondition \t\t\t\t= \"(((nearestObjects [this, ['Land_Destroyer_01_hull_04_F'], 50, false]) select 0) animationPhase 'Door_Hangar_1_1_open') < 0.1;\";\n\tstatement \t\t\t\t= \"[this, 1] call BIS_fnc_destroyer01OperateHangarDoors;\";\n};\nclass CloseHangarDoor_1 : OpenHangarDoor_1\n{\n\tdisplayName \t\t\t= \"$STR_DN_OUT_C_DOOR\";\n\tposition \t\t\t\t= \"pos_Door_Hangar_1_Trigger\";\n\tcondition \t\t\t\t= \"(((nearestObjects [this, ['Land_Destroyer_01_hull_04_F'], 50, false]) select 0) animationPhase 'Door_Hangar_1_1_open') >= 0.1;\";\n\tstatement \t\t\t\t= \"[this, 0] call BIS_fnc_destroyer01OperateHangarDoors;\";\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "shipPart",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "[shipPart, mode] call `BIS_fnc_destroyer01OperateHangarDoors`",
                    "returns": "mode: `Number` - doors' animation state; 1 to open, 0 to close"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_destroyer01OperateHangarDoors"
        },
        "configuration": {
            "label": "BIS_fnc_destroyer01OperateHangarDoors",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Bravo Zero One development\n\t- John_Spartan\n\n\tDescription:\n\t- This is a sub function designed to add sounds required for ship hangar door animation.\n\n\tExecution:\n\t- Call from main script that handles the hangar door animation.\n\n\t\tExample:\n\t\t[_shipPart, _soundPos, _animationState] spawn BIS_fnc_destroyer01PlayHangarDoorSound;\n\n\tParameter(s):\n\t\t_this select 0: mode (Scalar)\n\t\t0: ship-part object\n\t\tand\n\t\t1: position in word coordinates where the sound should be played (modelToWorldWorld)\n\t\t2: animation state of hangar doors\n\n\tReturns: nothing\n\tResult: Ship's hangar door animation gets a sound source added.\n\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_destroyer01PlayHangarDoorSound`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_destroyer01PlayHangarDoorSound"
        },
        "configuration": {
            "label": "BIS_fnc_destroyer01PlayHangarDoorSound",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Bravo Zero One development\n\t- John_Spartan\n\n\tDescription:\n\t- This is a sub function designed to update dynamic ships (multi-part structure) position in EDEN editor. Ship consists of multiple sub-objects that are linked together based on precise memory point positions in 3D space.\n\tFunction will update initial object positions when player drags the object in EDEN editor.\n\n\tExecution:\n\t- Call from EH on the main ship base model (blank model with memory points and reference config).\n\n\t\tExample:\n\t\tclass Eventhandlers\n\t\t{\n\t\t\tinit = \"_this call BIS_fnc_Destroyer01Init\";\t\t\t\t\t\t\t\t//main init fnc, will assemble ship in game\n\t\t\tAttributesChanged3DEN = \"_this call BIS_fnc_Destroyer01EdenInit\";\t\t\t//function to update objects position in EDEN editor if attributes changed by player\n\t\t\tDragged3DEN = \"_this call BIS_fnc_Destroyer01PosUpdate\";\t\t\t\t\t//function to update objects position in EDEN editor if attributes changed by player\n\t\t\tRegisteredToWorld3DEN = \"_this call BIS_fnc_Destroyer01EdenInit\";\t\t\t//initial EDEN init fnc (main init is still called)\n\t\t\tUnregisteredFromWorld3DEN = \"_this call BIS_fnc_Destroyer01EdenDelete\";\t\t//function  to delete all ship objects in EDEN editor\n\t\t};\n\n\tRequirements:\n\t- An array of ship parts/objects as a variable attached to main ship base. This array is created by main BIS_fnc_Destroyer01Init.\n\n\tParameter(s):\n\t\t_this select 0: mode (Scalar)\n\t\t0: ship Base/object\n\t\tand\n\t\t1: array of objects in variable in base objects name-space [\"bis_carrierParts\", []];\n\n\tReturns: nothing\n\tResult: Ship's position is updated in EDEN editor.\n\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_destroyer01PosUpdate`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_destroyer01PosUpdate"
        },
        "configuration": {
            "label": "BIS_fnc_destroyer01PosUpdate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Fill an **AAR** (After Action Review) display with data and Event Handlers.\n\n**IMPORTANT**: \n`BIS_fnc_diagAARrecord` **must** have been previously executed to have data to display.",
            "examples": [
                {
                    "text": "```sqf\n[\"Init\", [_anAARDisplay]] call BIS_fnc_diagAAR;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`String` - can be one of:"
                        },
                        {
                            "name": "arguments",
                            "description": "* \"Init\" arguments: [display]: `Display`"
                        }
                    ],
                    "outline": "[mode, arguments] call `BIS_fnc_diagAAR`",
                    "returns": "[Script Handle](https://community.bistudio.com/wiki/Script%20Handle)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_diagAAR"
        },
        "configuration": {
            "label": "BIS_fnc_diagAAR",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Starts recording units position and events for an **AAR** (After Action Review).\n\nThe following keys must be added to [[Description.ext]] for AAR to work properly:\n```cpp\ndiagAAR = 1;\t\t// to enable diag AAR\ndiagAARauthor = 1;\t// if description.ext/dev == profileName, allows the creator to debug himself\ndiagAARunits = 2;\t// which units to record:\n\t\t\t\t\t\t// 1 = units player\n\t\t\t\t\t\t// 2 = allunits + alldead\n\t\t\t\t\t\t// any other value = player\ndiagAARdelay = 3;\t// delay between recording steps\n```\nThe data can be accessed with <sqf inline>profileNamespace getVariable \"BIS_fnc_diagAAR_data\".",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_diagAARrecord;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_diagAARrecord`",
                    "returns": "`Number` - the FSM handle (see `execFSM`)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_diagAARrecord"
        },
        "configuration": {
            "label": "BIS_fnc_diagAARrecord",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Displays or logs animation states:\n* **animChanged** - when action is performed (only to debug.log)\n* **animDone** - when animation chain that was started by action is finished (only to debug.log)\n* **animStateChanged** - each animation state changes(debug.log + globalchat).",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_diagAnim;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Object` - (Optional, default `player`) - the unit whose animation should be logged"
                        }
                    ],
                    "outline": "[target] call `BIS_fnc_diagAnim`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_diagAnim"
        },
        "configuration": {
            "label": "BIS_fnc_diagAnim",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Add a \"bullet camera\" to shots fired by the specified unit.",
            "examples": [
                {
                    "text": "```sqf\nplayer call BIS_fnc_diagBulletCam;\n```"
                },
                {
                    "text": "```sqf\n\n// bullet camera will be removed after 10s\n_unit = player;\n_unit call BIS_fnc_diagBulletCam;\n_ehIndex = _unit getVariable \"BIS_fnc_diagBulletCam_fired\";\nsleep 10;\n_unit removeEventHandler [\"fired\", _ehIndex];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - the shooting unit. Can be a vehicle."
                        }
                    ],
                    "outline": "unit call `BIS_fnc_diagBulletCam`",
                    "returns": "`Boolean` - `true` when done"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_diagBulletCam"
        },
        "configuration": {
            "label": "BIS_fnc_diagBulletCam",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tPrints config entries.\n\n\tParameter(s):\n\t\t0: CONFIG - config class which will be searched (default: configFile)\n\t\t1: STRING or ARRAY - entry name(s) whose values will be printed\n\t\t2: STRING - scan mode, can be one of following:\n\t\t\t\"controls\" - recursively scans controls in root, class controls, class controlsBackground and in RscControlsGroup controls (type = 15).\n\t\t\t\"turrets\" - recursively scans vehicles's turrets.\n\t\t\t\"weapons\" - scans weapon muzzles and modes.\n\t\t\t(default) - scans just class roots.\n\n\tReturns:\n\tSTRING\n\n\tResults are printed to debug log and wiki compatible table is copied to clipboard.\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_diagConfig;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_diagConfig` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_diagConfig"
        },
        "configuration": {
            "label": "BIS_fnc_diagConfig",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Copies a list of objects to the clipboard which miss the author attribute.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_diagFindMissingAuthors;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_diagFindMissingAuthors`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_diagFindMissingAuthors"
        },
        "configuration": {
            "label": "BIS_fnc_diagFindMissingAuthors",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Tracks received wounds. (`getNumber` (`missionConfigFile` >> \"diagHit\") > 0) has to be `true`.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_diagHit;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_diagHit`",
                    "returns": "`Boolean` - `true` when activated"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_diagHit"
        },
        "configuration": {
            "label": "BIS_fnc_diagHit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_diagJIRAlink`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_diagJIRAlink"
        },
        "configuration": {
            "label": "BIS_fnc_diagJIRAlink",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Tracks pressed keys. (`getNumber` (`missionConfigFile` >> \"diagKey\") > 0) has to be `true`.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_diagKey;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_diagKey`",
                    "returns": "`Boolean` - `true` when activated"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_diagKey"
        },
        "configuration": {
            "label": "BIS_fnc_diagKey",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tExports default key layout to wiki template.\n\n\tParameter(s):\n\t_this select 0: STRING - category, can be one of following\n\t\t\"\" - all controls in game\n\t\t\"All\"\n\t\t\"BasicInfantryControls\"\n\t\t\"Car\"\n\t\t\"Air\"\n\t\t\"Helicopter\"\n\t\t\"Submarine\"\n\t\t\"Buldozer\"\n\t\t\"UserActions\"\n\t_this select 1: STRING - selection method, can be one of following\n\t\t\"\" - single tap\n\t\t\"double\" - double tap\n\t\t\"LCtrl\" - with left control pressed\n\t\t\"RCtrl\" - with right control pressed\n\t\t\"LShift\" - with left shift pressed\n\t\t\"RShift\" - with right shift pressed\n\n\tReturns:\n\tSTRING - wiki export text (also copied to clipboard)\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_diagKeyLayout;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_diagKeyLayout` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_diagKeyLayout"
        },
        "configuration": {
            "label": "BIS_fnc_diagKeyLayout",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns all user actions according to mode.",
            "examples": [
                {
                    "text": "```sqf\n0 call BIS_fnc_diagKeyTest;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`Number` - can be:"
                        }
                    ],
                    "outline": "mode call `BIS_fnc_diagKeyTest`",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_diagKeyTest"
        },
        "configuration": {
            "label": "BIS_fnc_diagKeyTest",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tFile: fn_diagKnownAsTarget.sqf\n\n\tDescription:\n\tVisualize and profile which units know about one specific unit and how much they do.\n\tCalling function again stops diagnostics.\n\t\n\tParameter(s):\n\t_this select 0: profile unit (Object) [default player]\n\t_this select 1: radius (Scalar - meters) [default 1000m]\n\t\n\tReturns:\n\t-\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_diagKnownAsTarget;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_diagKnownAsTarget` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_diagKnownAsTarget"
        },
        "configuration": {
            "label": "BIS_fnc_diagKnownAsTarget",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Visualize and profile which units one specific unit knows about and how much. Calling function again stops diagnostics.",
            "examples": [
                {
                    "text": "```sqf\n[leader player, 500] call BIS_fnc_diagKnownTargets;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Object` - (Optional, default `player`) profiled unit"
                        },
                        {
                            "name": "radius",
                            "description": "`Number` - (Optional, default 3000) radius of the scanned area"
                        }
                    ],
                    "outline": "[target, radius] call `BIS_fnc_diagKnownTargets`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_diagKnownTargets"
        },
        "configuration": {
            "label": "BIS_fnc_diagKnownTargets",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Runs scripted loop. Repeated call terminates previous loops.",
            "examples": [
                {
                    "text": "```sqf\n[{ systemChat \"Loop!\" }, 0.5] spawn BIS_fnc_diagLoop;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "code",
                            "description": "`Code` - code to be executed"
                        },
                        {
                            "name": "code",
                            "description": "`Number` - (Optional, default 0.1) delay between loops"
                        }
                    ],
                    "outline": "[code, delay] spawn `BIS_fnc_diagLoop`",
                    "returns": "[Script Handle](https://community.bistudio.com/wiki/Script%20Handle) - `spawn` handle"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_diagLoop"
        },
        "configuration": {
            "label": "BIS_fnc_diagLoop",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tExports config macros.\n\n\tParameter(s):\n\t\t0: CONFIG or ARRAY - config container to be searched (e.g. configFile >> \"CfgVehicles\") or list of classes or classnames\n\t\t1: ARRAY - list of macro names to be used (e.g. [\"MAPSIZE\",\"NAMESOUND\"])\n\t\t2 (Optional): STRING - macro category name (when param 0 is CONFIG, its classname is used by default - e.g. \"CfgVehicles\")\n\n\tReturns:\n\tSTRING\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_diagMacros;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_diagMacros` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_diagMacros"
        },
        "configuration": {
            "label": "BIS_fnc_diagMacros",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_diagMacrosAuthor;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_diagMacrosAuthor` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_diagMacrosAuthor"
        },
        "configuration": {
            "label": "BIS_fnc_diagMacrosAuthor",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_diagMacrosEditorPreview`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_diagMacrosEditorPreview"
        },
        "configuration": {
            "label": "BIS_fnc_diagMacrosEditorPreview",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tPrints mapSize values based on real object size and copies it to clipboard.\n\tMission has to be running on order to get the values.\n\n\tParameter(s):\n\t\t0: CONFIG or ARRAY - either config container, or list of classes or classnames\n\t\t1: STRING - output mode, can be on of following:\n\t\t\t\"wiki\" - wiki table\n\t\t\t\"config\" - #define macros with model dimension values\n\t\t\t\"config_current\" - #define macros with current config values\n\t\t2: ARRAY - list of classnames which will be excluded from the scan\n\n\tReturns:\n\tSTRING\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_diagMacrosMapSize;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_diagMacrosMapSize` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_diagMacrosMapSize"
        },
        "configuration": {
            "label": "BIS_fnc_diagMacrosMapSize",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Detects vehicle types and prints their radio protocol definitions to clipboard.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_diagMacrosNameSound;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_diagMacrosNameSound`",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_diagMacrosNameSound"
        },
        "configuration": {
            "label": "BIS_fnc_diagMacrosNameSound",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tGenerates simple object config data.\n\n\tParameters:\n\t\t0: OBJECT or ARRAY - ground position where ground objects will be created (default: position calculated 15 meters away from player)\n\t\t1: SCALAR or BOOL - autolog mode (default: false)\n\t\t\t0 or false - no autolog, results will be only stored in clipboard\n\t\t\t1 or true - autolog on, results will be stored in \\A3\\macros_CfgVehicles_simpleObject_auto_A3.hpp file.\n\t\t\t2 - autlog on + world name, random number and custom suffix are appended to name of generated file to prevent overwriting and provide extra info\n\t\t2: ARRAY - classes you want to scan, use [] to scan all (default: []).\n\t\t3: OBJECT or ARRAY - sea position where ground objects will be created (default: position calculated 15 meters away from player)\n\t\t4: STRING - custom suffix added to filename if autolog is used (default: \"\").\n\n\tExample:\n\tbis_scriptHandle = [] spawn BIS_fnc_diagMacrosSimpleObject;\n\n\tExpected output per class (animate and hide arrays can have varying amount of elements):\n\t#define CFGVEHICLES_SIMPLEOBJECT_class_F\\\n\t\tclass SimpleObject\\\n\t\t{\\\n\t\t\tanimate[] =\\\n\t\t\t{\\\n\t\t\t\t{\"animationName1\", 1},\\\n\t\t\t\t{\"animationName2\", 2}\\\n\t\t\t};\\\n\t\t\thide[] =\\\n\t\t\t{\\\n\t\t\t\t\"animationSelection1\",\\\n\t\t\t\t\"animationSelection2\"\\\n\t\t\t};\\\n\t\t\tverticalOffsetAsl = 0;\\\n\t\t};\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_diagMacrosSimpleObject`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_diagMacrosSimpleObject"
        },
        "configuration": {
            "label": "BIS_fnc_diagMacrosSimpleObject",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_diagMacrosVerify;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_diagMacrosVerify` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_diagMacrosVerify"
        },
        "configuration": {
            "label": "BIS_fnc_diagMacrosVerify",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Displays positions of units from all missions",
            "examples": [
                {
                    "text": "```sqf\n[configFile >> \"CfgMissions\", true, false] call BIS_fnc_diagMissionPositions;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "configPath",
                            "description": "`Config` - (Optional, default <sqf inline>configFile >> \"CfgMissions\")"
                        },
                        {
                            "name": "allUnits",
                            "description": "`Boolean` - (Optional, default `false`) `true` to display all units, `false` to display only player positions"
                        },
                        {
                            "name": "isCampaign",
                            "description": "`Boolean` - (Optional, default `false`) `true` for the scan to perceive the main folder as campaign (required when _configPath_ is direct path to campaign)"
                        }
                    ],
                    "outline": "[configPath, allUnits, isCampaign] call `BIS_fnc_diagMissionPositions`",
                    "returns": "`Boolean` - `true` when done"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_diagMissionPositions"
        },
        "configuration": {
            "label": "BIS_fnc_diagMissionPositions",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Lists all weapons and magazines available in a mission.",
            "examples": [
                {
                    "text": "```sqf\ntrue call BIS_fnc_diagMissionWeapons;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "clipboard",
                            "description": "`Boolean` - (Optional, default `false`) - `true` to copy list to clipboard"
                        }
                    ],
                    "outline": "[clipboard] call `BIS_fnc_diagMissionWeapons`",
                    "returns": "`Array` - list of weapons available in mission"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_diagMissionWeapons"
        },
        "configuration": {
            "label": "BIS_fnc_diagMissionWeapons",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBenchmarks objects vs. simple objects performance and exports the data into .csv sheet.\n\n\tOutput format:\n\tclassname,simulation,fpsClean,fpsObjects,fpsSimpleObjects\n\n\tExample:\n\tbis_scriptHandle = [] spawn BIS_fnc_diagObjectPerformance;\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_diagObjectPerformance`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_diagObjectPerformance"
        },
        "configuration": {
            "label": "BIS_fnc_diagObjectPerformance",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Previews selected classes from given container.",
            "examples": [
                {
                    "text": "```sqf\n[\"CfgVehicles\", \"Car\", 15, [0,0,0]] call BIS_fnc_diagPreview;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "container",
                            "description": "`String` - (Optional, default \"CfgVehicles\") class container. Can be:"
                        },
                        {
                            "name": "parentClass",
                            "description": "`String` - (Optional, default `typeOf` `player`) parent class of the objects (e.g. \"Car\" or \"Rifle\")"
                        },
                        {
                            "name": "distance",
                            "description": "`Number` - (Optional, default 10) distance between objects"
                        },
                        {
                            "name": "startPos",
                            "description": "`Position` - (Optional, default <sqf inline>getPos player or <sqf inline>screenToWorld]] [0.5,0.5] in [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor)) start position"
                        }
                    ],
                    "outline": "[container, parentClass, distance, startPos] call `BIS_fnc_diagPreview`",
                    "returns": "`Array` - list of created classes"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_diagPreview"
        },
        "configuration": {
            "label": "BIS_fnc_diagPreview",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Previews selected class from the list. When **cheat1** (?) is activated, classnames will be shown instead of display names.",
            "examples": [
                {
                    "text": "```sqf\n[\"CfgVehicles\"] call BIS_fnc_diagPreviewCycle;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "container",
                            "description": "`String` - (Optional, default \"CfgVehicles\") class container. Can be:"
                        },
                        {
                            "name": "position",
                            "description": "[Array]] format `Position` - (Optional, default <sqf inline>[position player, 10, 0] call BIS_fnc_relPos) position of the previewed object"
                        },
                        {
                            "name": "vector `Array` of `Number`s",
                            "description": "(Optional, default [0,0]]) vector of previewed object in format:"
                        },
                        {
                            "name": "display",
                            "description": "`Display` - (Optional, default `BIS_fnc_displayMission`) parent display"
                        }
                    ],
                    "outline": "[container, position, vector, display] call `BIS_fnc_diagPreviewCycle`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_diagPreviewCycle"
        },
        "configuration": {
            "label": "BIS_fnc_diagPreviewCycle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Creates vehicles with their crew.",
            "examples": [
                {
                    "text": "```sqf\n[\"B_MRAP_01_F\", [5,5], 10] call BIS_fnc_diagPreviewVehicleCrew;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "class",
                            "description": "`String` - vehicle class name"
                        },
                        {
                            "name": "dimensions",
                            "description": "`Array` of `Number`s - number of vehicles in format [rows, columns] (number of vehicles = rows &times; columns)"
                        },
                        {
                            "name": "distance",
                            "description": "`Number` - distance between vehicles"
                        }
                    ],
                    "outline": "[class, dimensions, distance] call `BIS_fnc_diagPreviewVehicleCrew`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_diagPreviewVehicleCrew"
        },
        "configuration": {
            "label": "BIS_fnc_diagPreviewVehicleCrew",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Tracks played radio sentences.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_diagRadio;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_diagRadio`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_diagRadio"
        },
        "configuration": {
            "label": "BIS_fnc_diagRadio",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Previews all vehicle icons on map.\n**WARNING**: This function is broken as it uses bad arguments for `BIS_fnc_returnParents` (**line 35**, `**\"\" instead of {{hl|true}})**`",
            "examples": [
                {
                    "text": "```sqf\n[\"all\", getPos player] call BIS_fnc_diagVehicleIcons;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "parentClass",
                            "description": "`String` - (Optional, default \"all\")"
                        },
                        {
                            "name": "position",
                            "description": "`Position` - (Optional, default [100,100]) position of the first icon on the _map_, others will be layered on top of it"
                        },
                        {
                            "name": "map",
                            "description": "`Control` - (Optional, default <sqf inline>findDisplay 12 displayCtrl 51 a.k.a main map)"
                        }
                    ],
                    "outline": "[parentClass, position, map] call `BIS_fnc_diagVehicleIcons`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_diagVehicleIcons"
        },
        "configuration": {
            "label": "BIS_fnc_diagVehicleIcons",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Scans specific config folder and outputs the values in wiki format.",
            "examples": [
                {
                    "text": "```sqf\n[\"RadioProtocol_Sent\"] call BIS_fnc_diagWiki;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`String` - can be one of:"
                        }
                    ],
                    "outline": "[mode] call `BIS_fnc_diagWiki`",
                    "returns": "`String` - data in wiki format"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_diagWiki"
        },
        "configuration": {
            "label": "BIS_fnc_diagWiki",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>#define DIARY_CATEGORY\t\"BIS_fnc_diaryHints\"\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_diaryHints;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_diaryHints` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_diaryHints"
        },
        "configuration": {
            "label": "BIS_fnc_diaryHints",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>#define DIARY_CATEGORY\t\"BIS_fnc_diaryMaps\"\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_diaryMaps;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_diaryMaps` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_diaryMaps"
        },
        "configuration": {
            "label": "BIS_fnc_diaryMaps",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return whether or not the local player joined the game while it was already in progress. {{Feature|important|{{GVI|arma3|1.50",
            "examples": [
                {
                    "text": "```sqf\nif ([] call BIS_fnc_didJIP) then { forceRespawn player };\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "[] call `BIS_fnc_didJIP`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_didJIP"
        },
        "configuration": {
            "label": "BIS_fnc_didJIP",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Show a 4-directions indicator.\n\nIndicator GUI layer is 17, its `Display` is accessible with <sqf inline>uiNamespace getVariable \"BIS_RscMissionScreen_dirIndicator\".\n\nCan be reexecuted to change its colour, but once executed this function **cannot** be halted  until _origin_<nowiki/>'s death.",
            "examples": [
                {
                    "text": "```sqf\n[player, TheBoss, [0.706, 0.0745, 0.0196, 1]] call BIS_fnc_dirIndicator;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "origin",
                            "description": "`Object` - origin, usually `player`"
                        },
                        {
                            "name": "target",
                            "description": "`Code`, `String`, `Object` or `Array` format `Position` - to which indicator points to:"
                        },
                        {
                            "name": "color",
                            "description": "`Array` format [[Color|Color (RGBA)]] - (Optional, default [0.424,0.651,0.247,1] (Arma 2 green))"
                        },
                        {
                            "name": "sizeCoef",
                            "description": "`Number` - (Optional, default 0.1045752 (command bar height)) size coefficient"
                        }
                    ],
                    "outline": "[origin, target, color, sizeCoef] call `BIS_fnc_dirIndicator`",
                    "returns": "[Script Handle](https://community.bistudio.com/wiki/Script%20Handle)"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_dirIndicator"
        },
        "configuration": {
            "label": "BIS_fnc_dirIndicator",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Screen dirt (texture) postprocess. \nDisplays dust PP according to damage obtained from near explosion; takes array from \"Explosion\" event handler.",
            "examples": [
                {
                    "text": "```sqf\n[nil, 0.5] call BIS_fnc_dirtEffect;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - who gets the damage. **Unused and useless parameter**"
                        },
                        {
                            "name": "damage",
                            "description": "`Number` - damage given to unit by explosion"
                        }
                    ],
                    "outline": "[unit, damage] call `BIS_fnc_dirtEffect`",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_dirtEffect"
        },
        "configuration": {
            "label": "BIS_fnc_dirtEffect",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Function which returns vector direction from pos1 to pos2.\n**Arma**: 3|Use <sqf inline>obj1 getDir obj2 instead of `BIS_fnc_dirTo`.",
            "examples": [
                {
                    "text": "sets unit1 in the direction of unit2\n\n```sqf\nunit1 setDir ([unit1, unit2] call BIS_fnc_dirTo);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "param1",
                            "description": "vector starting point, `Position` **or** `Object`"
                        },
                        {
                            "name": "param2",
                            "description": "vector ending point, `Position` **or** `Object`"
                        }
                    ],
                    "outline": "[param1, param2] call `BIS_fnc_dirTo`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_dirTo"
        },
        "configuration": {
            "label": "BIS_fnc_dirTo",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Disables the load/restart button. Currently only for `BIS_fnc_cinemaBorder` used within the Prologue and Survive campaigns. Only works in single player.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_disableLoading;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_disableLoading`",
                    "returns": "`Boolean` - always `true`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_disableLoading"
        },
        "configuration": {
            "label": "BIS_fnc_disableLoading",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Disable revive on given unit.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_unit] call BIS_fnc_disableRevive;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "player",
                            "description": "`Object` - affected player"
                        }
                    ],
                    "outline": "[player] call `BIS_fnc_disableRevive`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_disableRevive"
        },
        "configuration": {
            "label": "BIS_fnc_disableRevive",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Controls the disabling of saving, stacking each request to prevent saving being enabled too early.",
            "examples": [
                {
                    "text": "```sqf\n\"savingID\" call BIS_fnc_disableSaving;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "id",
                            "description": "`String` - unique id to be used with `BIS_fnc_enableSaving`"
                        }
                    ],
                    "outline": "id call `BIS_fnc_disableSaving`",
                    "returns": "`Boolean` - `true` if successful, `false` if not"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_disableSaving"
        },
        "configuration": {
            "label": "BIS_fnc_disableSaving",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>#define DISPLAY\t\t(uinamespace getvariable 'hsim_RscClouds')\n#define CONTROL\t\t(DISPLAY displayctrl _idc)\n#define RSC_LAYER\t759\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_displayClouds;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_displayClouds` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_displayClouds"
        },
        "configuration": {
            "label": "BIS_fnc_displayClouds",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Loads custom [color settings](https://community.bistudio.com/wiki/User%20Interface%20Colors) from CfgUIDefault.\n\nIf variables are not stored in `profileNamespace` yet, the function will declare them.\n\n{{{!}}\n{{!}} style=\"vertical-align: top; width: 50%\" {{!}}\n<!-- A3 -->\n{{{!}} class=\"wikitable\"\n{{!}}+ Arma 3 v1.99\n! Tag !! Variable !! Description\n{{!}}-\n! rowspan=\"5\" {{!}} \"IGUI\"\n{{!}}\"BCG_RGB\" {{!}}{{!}} Backgrounds\n{{!}}-\n{{!}} \"TEXT_RGB\" {{!}}{{!}} Active Elements\n{{!}}-\n{{!}} \"WARNING_RGB\" {{!}}{{!}} Warnings\n{{!}}-\n{{!}} \"ERROR_RGB\" {{!}}{{!}} Errors\n{{!}}-\n{{!}} \"TACTPING_RGB\" {{!}}{{!}} Tactical Ping\n{{!}}-\n! rowspan=\"2\" {{!}} \"GUI\"\n{{!}} \"BCG_RGB\" {{!}}{{!}} Backgrounds\n{{!}}-\n{{!}} \"TITLETEXT_RGB\" {{!}}{{!}} Title Text\n{{!}}-\n! rowspan=\"5\" {{!}} \"Map\"\n{{!}} \"BLUFOR\" {{!}}{{!}} BLUFOR\n{{!}}-\n{{!}} \"OPFOR\" {{!}}{{!}} OPFOR\n{{!}}-\n{{!}} \"Independent\" {{!}}{{!}} Independent\n{{!}}-\n{{!}} \"Civilian\" {{!}}{{!}} Civilian\n{{!}}-\n{{!}} \"Unknown\" {{!}}{{!}} Unknown\n{{!}}-\n! rowspan=\"2\" {{!}} \"Subtitles\"\n{{!}} \"Background\" {{!}}{{!}} Subtitle background\n{{!}}-\n{{!}} \"Text\" {{!}}{{!}} Subtitle text\n{{!}}}\n\n{{!}} style=\"vertical-align: top; width: 50%\" {{!}}\n<!-- TKOH -->\n{{{!}} class=\"wikitable\"\n{{!}}+ {{tkoh}} v1.00\n! Tag !! Variable !! Description\n{{!}}-\n! rowspan=\"2\" {{!}} \"IGUI\"\n{{!}}\"IGUI_TEXT_RGB\" {{!}}{{!}} HUD color **RGB**\n{{!}}-\n{{!}} \"IGUI_TEXT_COLOR\" {{!}}{{!}} HUD color **RGBA**\n{{!}}-\n! rowspan=\"5\" {{!}} \"GUI\"\n{{!}} \"BCG_RGB\" {{!}}{{!}} menu background **RGB**\n{{!}}-\n{{!}} \"GUI_BCG_COLOR\" {{!}}{{!}} menu background **RGBA**\n{{!}}-\n{{!}} \"GUI_BCG_MEDIUM_RGB\" {{!}}{{!}} button background **RGB** (darker version of GUI_BCG_RGB)\n{{!}}-\n{{!}} \"GUI_BCG_MEDIUM_COLOR\" {{!}}{{!}} button background **RGBA**\n{{!}}-\n{{!}} \"GUI_BCG_ACTIVE_RGB\" {{!}}{{!}} active button background color (e.g. focused buttons) **RGB**\n{{!}}}\n\n{{!}}}",
            "examples": [
                {
                    "text": "```sqf\n[\"GUI\", \"BCG_RGB\"] call BIS_fnc_displayColorGet;//Returns menu color\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "tag",
                            "description": "`String` - tag defined in [CfgUIDefault](https://community.bistudio.com/wiki/User%20Interface%20Colors)"
                        },
                        {
                            "name": "variable",
                            "description": "`String` - variable defined in \"CfgUIColors\" >> Variables"
                        },
                        {
                            "name": "init",
                            "description": "`Boolean` - when used, function will initialize all color presets"
                        }
                    ],
                    "outline": "init call `BIS_fnc_displayColorGet`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_displayColorGet"
        },
        "configuration": {
            "label": "BIS_fnc_displayColorGet",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Applies custom [color settings](https://community.bistudio.com/wiki/User%20Interface%20Colors) to given `Display`.\n\nDisplay must be already using color macros, function will just refresh the values according to current color settings.",
            "examples": [
                {
                    "text": "```sqf\n[configFile >> (GUI_classes select _forEachIndex), _x] call BIS_fnc_displayColorSet;\n```"
                },
                {
                    "text": "```sqf\n\n[\n\tconfigFile >> _class,\n\t_display,\n\t0,\n\t{\n\t\t_this ctrlSetFade 0;\n\t\t_this ctrlCommit 0.5;\n\t}\n] call BIS_fnc_displayColorSet;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "displayClass",
                            "description": "`Config` - display config class"
                        },
                        {
                            "name": "display",
                            "description": "`Display`"
                        },
                        {
                            "name": "commitTime",
                            "description": "`Number` - (Optional, default 0) commit time"
                        },
                        {
                            "name": "code",
                            "description": "`Code` - (Optional, default <sqf inline>{}) code executed for every control element (which is passed as _this)"
                        }
                    ],
                    "outline": "[displayClass, display, commitTime, code] call `BIS_fnc_displayColorSet`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_displayColorSet"
        },
        "configuration": {
            "label": "BIS_fnc_displayColorSet",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tReturn all controls of given display class\n\n\tParameter(s):\n\t_this select 0: CONFIG - display config\n\t_this select 1: NUMBER or CONFIG or STRING - type of returned values (control configs, their names or IDCs; default: configfile))\n\t_this select 2: BOOL - true to search content of controls group (default: true)\n\n\tReturns:\n\tARRAY\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_displayControls;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_displayControls` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_displayControls"
        },
        "configuration": {
            "label": "BIS_fnc_displayControls",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "[Loading Screens](https://community.bistudio.com/wiki/Loading%20Screens) init.",
            "examples": [
                {
                    "text": "```sqf\n([_this, 2302] call (uiNamespace getVariable 'BIS_fnc_displayLoading')\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "onLoad",
                            "description": "`Array` - params provided by onLoad [UI Event Handler](https://community.bistudio.com/wiki/User%20Interface%20Event%20Handlers)"
                        },
                        {
                            "name": "id",
                            "description": "`Number` - id of loading screen. Used only for debugging"
                        }
                    ],
                    "outline": "[onLoad, id] call `BIS_fnc_displayLoading`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_displayLoading"
        },
        "configuration": {
            "label": "BIS_fnc_displayLoading",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns main display of current mission/intro/outro. A cleaner alternative to <sqf inline>findDisplay 46.",
            "examples": [
                {
                    "text": "```sqf\n_mainDisplay = call BIS_fnc_displayMission;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_displayMission`",
                    "returns": "`Display`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_displayMission"
        },
        "configuration": {
            "label": "BIS_fnc_displayMission",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return given class displayName value. Return base class name if displayName not defined.",
            "examples": [
                {
                    "text": "```sqf\nprivate _myDisplayName = [configFile >> \"CfgVehicles\" >> typeOf vehicle player] call BIS_fnc_displayName;\n```"
                },
                {
                    "text": "```sqf\nprivate _myDisplayName = [configOf player] call BIS_fnc_displayName; // Since Arma 3 2.00\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "config",
                            "description": "`Config` - config path"
                        }
                    ],
                    "outline": "[config] call `BIS_fnc_displayName`",
                    "returns": "`String` - displayName, else `configName`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_displayName"
        },
        "configuration": {
            "label": "BIS_fnc_displayName",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_displayResize;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_displayResize` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_displayResize"
        },
        "configuration": {
            "label": "BIS_fnc_displayResize",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns the distance between two [objects](https://community.bistudio.com/wiki/Object) or [positions](https://community.bistudio.com/wiki/Position).\n**Arma**: 3|Use `distance2D` instead.",
            "examples": [
                {
                    "text": "```sqf\n[player, rescueHelicopter] call BIS_fnc_distance2D;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "param1",
                            "description": "`Object` or `Array` in format `Position` or [Position2D](https://community.bistudio.com/wiki/Position%23Introduction)"
                        },
                        {
                            "name": "param2",
                            "description": "`Object` or `Array` in format `Position` or [Position2D](https://community.bistudio.com/wiki/Position%23Introduction)"
                        }
                    ],
                    "outline": "[param1, param2] call `BIS_fnc_distance2D`",
                    "returns": "`Number` - distance in meters or 1e10 if distance cannot be calculated"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_distance2D"
        },
        "configuration": {
            "label": "BIS_fnc_distance2D",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns the SQUARE of the distance between the two objects or positions \"as the crow flies\" (ignoring elevation).\n\n**Arma**: 3|This function became obsolete with the introduction of `distanceSqr`.",
            "examples": [
                {
                    "text": "```sqf\n[player, soldier_1] call BIS_fnc_distance2Dsqr;\n```"
                },
                {
                    "text": "```sqf\n[[100,100,0], [0,0,0]] call BIS_fnc_distance2Dsqr;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "pointA",
                            "description": "`Object` or `Position`"
                        },
                        {
                            "name": "pointB",
                            "description": "`Object` or `Position`"
                        }
                    ],
                    "outline": "[pointA, pointB] call `BIS_fnc_distance2Dsqr`",
                    "returns": "`Number` - squared distance"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_distance2Dsqr"
        },
        "configuration": {
            "label": "BIS_fnc_distance2Dsqr",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Changes animation phase of given door.",
            "examples": [
                {
                    "text": "```sqf\n[_building, 5, 1] call BIS_fnc_door;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "building",
                            "description": "`Object` - building"
                        },
                        {
                            "name": "doorIndex",
                            "description": "`Number` - index of the door used in \"bis_disabled_Door_%1\", \"Door_%1_sound_source\", \"Door_%1_noSound_source\", \"Door_%1_locked_source\""
                        },
                        {
                            "name": "animationPhase",
                            "description": "`Number` - phase of the animation, see `animateSource` for more information"
                        }
                    ],
                    "outline": "[building, doorIndex, animationPhase] call `BIS_fnc_door`",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_door"
        },
        "configuration": {
            "label": "BIS_fnc_door",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Close a door with an animated doorhandle.",
            "examples": [
                {
                    "text": "```sqf\n[building,\"doorAnimation\",\"animationUp\",\"animationDown\",1] call BIS_fnc_doorClose;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "building",
                            "description": "`Object` - (Optional, default `objNull`) building"
                        },
                        {
                            "name": "doorAnimation",
                            "description": "`String` - (Optional, default \"\") name of the door animation"
                        },
                        {
                            "name": "handleDownAnimation",
                            "description": "`String` - (Optional, default \"\") animation source of handle down"
                        },
                        {
                            "name": "doorHandleUpAnimation",
                            "description": "`String` - (Optional, default \"\") animation source of handle up"
                        },
                        {
                            "name": "animationPhase",
                            "description": "`Number` - (Optional, default 0) value from 0-1"
                        }
                    ],
                    "outline": "[building, doorAnimation, handleDownAnimation, doorHandleUpAnimation, animationPhase] call `BIS_fnc_doorClose`",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_doorClose"
        },
        "configuration": {
            "label": "BIS_fnc_doorClose",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_doorNoHandleClose`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_doorNoHandleClose"
        },
        "configuration": {
            "label": "BIS_fnc_doorNoHandleClose",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_doorNoHandleOpen`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_doorNoHandleOpen"
        },
        "configuration": {
            "label": "BIS_fnc_doorNoHandleOpen",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Open a door with an animated doorhandle.\n\n**NOTE**: This function uses `animate` internally.",
            "examples": [
                {
                    "text": "```sqf\n[_house, \"door_1_rot\", nil, nil, 0.25]  call BIS_fnc_doorOpen;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "building",
                            "description": "`Object` - (Optional, default `objNull`)"
                        },
                        {
                            "name": "doorAnimation",
                            "description": "`String` - (Optional, default \"\")"
                        },
                        {
                            "name": "upDownAnimation",
                            "description": "`String` - (Optional, default \"\")"
                        },
                        {
                            "name": "downUpAnimation",
                            "description": "`String` - (Optional, default \"\")"
                        },
                        {
                            "name": "animationPhase",
                            "description": "`Number` - (Optional, default 1)"
                        }
                    ],
                    "outline": "[building, doorAnimation, upDownAnimation, downUpAnimation, animationPhase] call `BIS_fnc_doorOpen`",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_doorOpen"
        },
        "configuration": {
            "label": "BIS_fnc_doorOpen",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Dot product of two vectors. **Arma**: 3|In {{arma3 use `vectorDotProduct`.}}",
            "examples": [
                {
                    "text": "```sqf\n[[1,2,3], [1,2,3]] call BIS_fnc_dotProduct; // returns: 1*1 + 2*2 + 3*3 = 14\n```"
                },
                {
                    "text": "```sqf\n[[1,2,3,4], [1,2,3,4]] call BIS_fnc_dotProduct; // returns 1*1 + 2*2 + 3*3 + 4*4 = 30\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vector1",
                            "description": "`Array`"
                        },
                        {
                            "name": "vector2",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "[vector1, vector2] call `BIS_fnc_dotProduct`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_dotProduct"
        },
        "configuration": {
            "label": "BIS_fnc_dotProduct",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Draws a dashed line around the outer edges of a trigger.",
            "examples": [
                {
                    "text": "```sqf\n[Trigger1] call BIS_fnc_drawAO; // draws a dashed line around trigger1's outer edge, with 50m between each line\n```"
                },
                {
                    "text": "```sqf\n[Trigger1, 10] call BIS_fnc_drawAO; // draws a dashed line around trigger1's outer edge, with 10m between each line\n```"
                },
                {
                    "text": "```sqf\n[[Trigger1, Trigger2]] call BIS_fnc_drawAO; // draws dashed lines around multiple triggers, useful for multiple AOs in one mission\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "triggers",
                            "description": "`Object` or `Array` - trigger or list of triggers that indicate AO"
                        },
                        {
                            "name": "distance",
                            "description": "`Number` - (Optional, default 50) number that decides distance between each new line drawn"
                        }
                    ],
                    "outline": "[triggers, distance] call `BIS_fnc_drawAO`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_drawAO"
        },
        "configuration": {
            "label": "BIS_fnc_drawAO",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Draws a static arrow (outline or color filled) on map. See {{Link|#Example 4}} for arrow removal.\n**NOTE**: Note that the order in which arrows are added to map is reversed, the last added arrow will appear under the first added arrow",
            "examples": [
                {
                    "text": "Draw a semi-transparent, blue arrow with default geometry:\n\n```sqf\nmyArrow1 = [_pos1, _pos2, [0,0,1,0.5]] call BIS_fnc_drawArrow;\n```"
                },
                {
                    "text": "Draw a wide, green arrow outline:\n\n```sqf\nmyArrow2 = [_pos1, _pos2, [0,1,0,1], [20], false] call BIS_fnc_drawArrow;\n```"
                },
                {
                    "text": "Draw a thin, red arrow with custom head geometry:\n\n```sqf\nmyArrow3 = [_pos1, _pos2, [1,0,0,1], [1,1/5,5]] call BIS_fnc_drawArrow;\n```"
                },
                {
                    "text": "Remove the arrow created in {{Link|#Example 3}}:\n\n```sqf\nmyArrow3 call BIS_fnc_drawArrow;\n```"
                },
                {
                    "text": "```sqf\n\nmyArrow1 = [[100,400,0], [200,500,0], [1,0,0,1], [20], true] call BIS_fnc_drawArrow;\nmyArrow2 = [[400,700,0], [300,600,0], [0,1,0,1], [20, 1/3, 2, 2], true] call BIS_fnc_drawArrow;\nmyArrow3 = [[600,700,0], [400,900,0], [0,0,1,1], [20, 1/3, 2, 0.5], true] call BIS_fnc_drawArrow;\nmyArrow4 = [[100,100,0], [200,200,0], [0,0,0,1], [20], false] call BIS_fnc_drawArrow;\nmyArrow5 = [[400,400,0], [300,300,0], [1,1,1,1], [20, 1/3, 2, 2], false] call BIS_fnc_drawArrow;\nmyArrow6 = [[600,400,0], [400,600,0], [0,1,1,1], [20, 1/3, 2, 0.5], false] call BIS_fnc_drawArrow;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "from",
                            "description": "`Array` - arrow start position in format [x,y] or [x,y,z]"
                        },
                        {
                            "name": "to",
                            "description": "`Array` - arrow end position in format [x,y] or [x,y,z]"
                        },
                        {
                            "name": "color",
                            "description": "`Array` format [[Color|Color (RGBA)]] - (Optional, default [1,1,1,1]) arrow line or fill color"
                        },
                        {
                            "name": "pars",
                            "description": "`Array` - (Optional) arrow geometry details in format [arrowThickness, arrowHeadLengthCoef, arrowHeadWidthCoef], where:"
                        },
                        {
                            "name": "fill",
                            "description": "`Boolean` - (Optional, default `true`) `true` to draw color filled arrow, `false` to draw outline"
                        },
                        {
                            "name": "map",
                            "description": "`Control` - (Optional, default [display](https://community.bistudio.com/wiki/findDisplay) 12 `displayCtrl` 51) map control"
                        }
                    ],
                    "outline": "[from, to, color, pars, fill, map] call `BIS_fnc_drawArrow`",
                    "returns": "`Array` - arrow reference for removal in format [idd, idc, ehId] or empty array [] on removal operation\n\n\n\n[[File:fnc_drawArrow.jpg|448px]] [[File:BIS_fnc_drawArrow2.jpg|400px]]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_drawArrow"
        },
        "configuration": {
            "label": "BIS_fnc_drawArrow",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Draws bounding box around given objects.",
            "examples": [
                {
                    "text": "```sqf\n[[BIS_building], [1,0,1,1], true] call BIS_fnc_drawBoundingBox;\n```"
                },
                {
                    "text": "```sqf\n[[], [], false] call BIS_fnc_drawBoundingBox;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "objects",
                            "description": "`Array` - (Optional, default <sqf inline>[objNull]) `Array` of `Object`s"
                        },
                        {
                            "name": "color",
                            "description": "`Array` in format [[Color|Color (RGBA)]] - (Optional, default [1,0,1,1])"
                        },
                        {
                            "name": "draw",
                            "description": "`Boolean` - (Optional, default nil) `true` to draw, `false` to remove"
                        }
                    ],
                    "outline": "[objects, color, draw] call `BIS_fnc_drawBoundingBox`",
                    "returns": "`Boolean` - `true` is successful, `false` if not"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_drawBoundingBox"
        },
        "configuration": {
            "label": "BIS_fnc_drawBoundingBox",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Show skull unit for curator when the unit dies.",
            "examples": [
                {
                    "text": "```sqf\nplayer call BIS_fnc_drawCuratorDeaths;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit"
                        }
                    ],
                    "outline": "[unit] call `BIS_fnc_drawCuratorDeaths`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_drawCuratorDeaths"
        },
        "configuration": {
            "label": "BIS_fnc_drawCuratorDeaths",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tLabel every vilage, town and city in curator interface\n\n\tParameter(s):\n\t\t0: OBJECT - curator module\n\n\tReturns:\n\tBOOL\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_drawCuratorLocations;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_drawCuratorLocations` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_drawCuratorLocations"
        },
        "configuration": {
            "label": "BIS_fnc_drawCuratorLocations",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tCreate a curator icon on every respawn marker\n\n\tParameter(s):\n\t\t0: OBJECT - curator module\n\t\t1: ARRAY of SIDEs \n\n\tReturns:\n\tBOOL\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_drawCuratorRespawnMarkers;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_drawCuratorRespawnMarkers` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_drawCuratorRespawnMarkers"
        },
        "configuration": {
            "label": "BIS_fnc_drawCuratorRespawnMarkers",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Draw minefields on the map. Dynamically calculated from all mines positions. Distinguishes AP and AT minefields.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_drawMinefields;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_drawMinefields`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_drawMinefields"
        },
        "configuration": {
            "label": "BIS_fnc_drawMinefields",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Draws respawn positions on the map which were added by `BIS_fnc_addRespawnPosition`.",
            "examples": [
                {
                    "text": "```sqf\n[true] call BIS_fnc_drawRespawnPositions;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "state",
                            "description": "`Boolean` - `true` to start drawing, `false` to end it"
                        }
                    ],
                    "outline": "[state] call `BIS_fnc_drawRespawnPositions`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_drawRespawnPositions"
        },
        "configuration": {
            "label": "BIS_fnc_drawRespawnPositions",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Function that adds dynamic groups to the mission as seen in End Game. Function needs to be initialized on server and client. Clients can then use action TeamSwitch (\"U\" by default) to access the Dynamic Groups interface.",
            "examples": [
                {
                    "text": "```sqf\n[\"Initialize\"] call BIS_fnc_dynamicGroups; // exec on Server\n```"
                },
                {
                    "text": "```sqf\n[\"InitializePlayer\", [player]] call BIS_fnc_dynamicGroups; // exec on client\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`String` - mode, can be:"
                        },
                        {
                            "name": "params",
                            "description": "`Array` - parameter changes according to `**mode**`. Check the function in the Functions Viewer for detailed information"
                        }
                    ],
                    "outline": "[mode, params] call `BIS_fnc_dynamicGroups`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_dynamicGroups"
        },
        "configuration": {
            "label": "BIS_fnc_dynamicGroups",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Shows dynamic opening credits or any type of text.\n\n[[File:BIS_fnc_dynamicText_v2.gif|left|400px]]",
            "examples": [
                {
                    "text": "```sqf\n[\"<t color='#ff0000' size='.8'>Warning!<br />Stop doing what you are doing</t>\",-1,-1,4,1,0,789] spawn BIS_fnc_dynamicText;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "text",
                            "description": "`String` - text to display"
                        },
                        {
                            "name": "x",
                            "description": "`Number` or `Array` - (Optional, default -1)"
                        },
                        {
                            "name": "y",
                            "description": "`Number` or `Array` - (Optional, default -1)"
                        },
                        {
                            "name": "duration",
                            "description": "`Number` - (Optional, default 4) display duration"
                        },
                        {
                            "name": "fadeInTime",
                            "description": "`Number` - (Optional, default 1) fade-in time"
                        },
                        {
                            "name": "deltaY",
                            "description": "`Number` - (Optional, default 0) Y position delta:"
                        },
                        {
                            "name": "rscLayer",
                            "description": "`Number` - resource layer"
                        }
                    ],
                    "outline": "[text, x, y, duration, fadeInTime, deltaY, rscLayer] spawn `BIS_fnc_dynamicText`",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_dynamicText"
        },
        "configuration": {
            "label": "BIS_fnc_dynamicText",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Earthquake simulation - now just camera shake and sound. [Stamina](https://community.bistudio.com/wiki/Arma%203%3A%20Stamina) is impacted by the earthquake too. Earthquake will last between 13 and 20 seconds. While earthquake is in progress `missionNamespace` variable `**BIS_fnc_earthquake_inprogress**` will be `true`.",
            "examples": [
                {
                    "text": "```sqf\n[4] spawn BIS_fnc_earthquake;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "intensity",
                            "description": "`Number` - (Optional, default 2) can be 1, 2, 3 or 4. Any other value will fall back to the default value"
                        }
                    ],
                    "outline": "[intensity] spawn `BIS_fnc_earthquake`",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_earthquake"
        },
        "configuration": {
            "label": "BIS_fnc_earthquake",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Wraps `BIS_fnc_lerp`.",
            "examples": [
                {
                    "text": "```sqf\n[] call BIS_fnc_easeIn; // returns 0\n```"
                },
                {
                    "text": "```sqf\n[0, 2, 0.5] call BIS_fnc_easeIn; // returns 0.5\n```"
                },
                {
                    "text": "```sqf\n([0, 2, 0.5] call BIS_fnc_lerp) == ([0, 2, 0.5, 1] call BIS_fnc_easeIn); // returns true\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "a",
                            "description": "`Number` - (Optional, default 0) first point (start)"
                        },
                        {
                            "name": "b",
                            "description": "`Number` - (Optional, default 0) second point (end)"
                        },
                        {
                            "name": "alpha",
                            "description": "`Number` - (Optional, default 0) original interpolation speed"
                        },
                        {
                            "name": "exp",
                            "description": "`Number` - (Optional, default 2) power applied to alpha"
                        }
                    ],
                    "outline": "[a, b, alpha, exp] call `BIS_fnc_easeIn`",
                    "returns": "`Number` - interpolated value"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_easeIn"
        },
        "configuration": {
            "label": "BIS_fnc_easeIn",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_easeInOut`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_easeInOut"
        },
        "configuration": {
            "label": "BIS_fnc_easeInOut",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_easeInOutVector`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_easeInOutVector"
        },
        "configuration": {
            "label": "BIS_fnc_easeInOutVector",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_easeInVector`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_easeInVector"
        },
        "configuration": {
            "label": "BIS_fnc_easeInVector",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_easeOut`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_easeOut"
        },
        "configuration": {
            "label": "BIS_fnc_easeOut",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_easeOutVector`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_easeOutVector"
        },
        "configuration": {
            "label": "BIS_fnc_easeOutVector",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_effectFired;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_effectFired` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_effectFired"
        },
        "configuration": {
            "label": "BIS_fnc_effectFired",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_effectFiredArtillery;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_effectFiredArtillery` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_effectFiredArtillery"
        },
        "configuration": {
            "label": "BIS_fnc_effectFiredArtillery",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tCruise Missile Start VFX\n\tBIS_fnc_effectFiredCruiseMissile\n\n\ta: reyhard\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_effectFiredCruiseMissile`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_effectFiredCruiseMissile"
        },
        "configuration": {
            "label": "BIS_fnc_effectFiredCruiseMissile",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*Arma 2 flares, by Maddmatt\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_effectFiredFlares;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_effectFiredFlares` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_effectFiredFlares"
        },
        "configuration": {
            "label": "BIS_fnc_effectFiredFlares",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_effectFiredHeliRocket;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_effectFiredHeliRocket` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_effectFiredHeliRocket"
        },
        "configuration": {
            "label": "BIS_fnc_effectFiredHeliRocket",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "This function does nothing.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "[] call `BIS_fnc_effectFiredLongSmoke`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_effectFiredLongSmoke"
        },
        "configuration": {
            "label": "BIS_fnc_effectFiredLongSmoke",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Used to add an effect to fired bullets. Should be executed from Fired Event Handler.",
            "examples": [
                {
                    "text": "```sqf\nunit addEventHandler [\"Fired\", \n{\n   _this call BIS_fnc_effectFiredRifle;\n}];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - the unit, the effect should be added to"
                        },
                        {
                            "name": "nil",
                            "description": "`Nothing`"
                        },
                        {
                            "name": "nil",
                            "description": "`Nothing`"
                        },
                        {
                            "name": "nil",
                            "description": "`Nothing`"
                        },
                        {
                            "name": "ammoType",
                            "description": "`String` - the type of ammo the effect should be triggered for"
                        }
                    ],
                    "outline": "[unit, nil, nil, nil, ammoType] call `BIS_fnc_effectFiredRifle`",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_effectFiredRifle"
        },
        "configuration": {
            "label": "BIS_fnc_effectFiredRifle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_effectFiredRocket;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_effectFiredRocket` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_effectFiredRocket"
        },
        "configuration": {
            "label": "BIS_fnc_effectFiredRocket",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*Arma 2 smokscreen, by Maddmatt\nUses code from VBS2 Smoke launcher by Philipp Pilhofer (raedor) & Andrew Barron\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_effectFiredSmokeLauncher;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_effectFiredSmokeLauncher` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_effectFiredSmokeLauncher"
        },
        "configuration": {
            "label": "BIS_fnc_effectFiredSmokeLauncher",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*Arma 2 smokscreen, by Maddmatt\nUses code from VBS2 Smoke launcher by Philipp Pilhofer (raedor) & Andrew Barron\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_effectFiredSmokeLauncher_boat;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_effectFiredSmokeLauncher_boat` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_effectFiredSmokeLauncher_boat"
        },
        "configuration": {
            "label": "BIS_fnc_effectFiredSmokeLauncher_boat",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_effectKilled;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_effectKilled` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_effectKilled"
        },
        "configuration": {
            "label": "BIS_fnc_effectKilled",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_effectKilledAirDestruction;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_effectKilledAirDestruction` -->"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_effectKilledAirDestruction"
        },
        "configuration": {
            "label": "BIS_fnc_effectKilledAirDestruction",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_effectKilledAirDestructionStage2;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_effectKilledAirDestructionStage2` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_effectKilledAirDestructionStage2"
        },
        "configuration": {
            "label": "BIS_fnc_effectKilledAirDestructionStage2",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>//Small secondary fuel explosions\n//By Maddmatt for Arma 2\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_effectKilledSecondaries;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_effectKilledSecondaries` -->"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_effectKilledSecondaries"
        },
        "configuration": {
            "label": "BIS_fnc_effectKilledSecondaries",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Create underwater plankton particle effect.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_effectPlankton;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_effectPlankton`",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_effectPlankton"
        },
        "configuration": {
            "label": "BIS_fnc_effectPlankton",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Part of the [EG Spectator Mode](https://community.bistudio.com/wiki/EG%20Spectator%20Mode). **IMPORTANT**: For internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EGObjectiveVisualizer"
        },
        "configuration": {
            "label": "BIS_fnc_EGObjectiveVisualizer",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Part of the [EG Spectator Mode](https://community.bistudio.com/wiki/EG%20Spectator%20Mode). **IMPORTANT**: For internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EGObjectiveVisualizerDraw"
        },
        "configuration": {
            "label": "BIS_fnc_EGObjectiveVisualizerDraw",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Spectator instance.",
            "examples": [
                {
                    "text": "```sqf\n[\"Initialize\", [player]] call BIS_fnc_EGSpectator;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`String` - function mode, can be:"
                        },
                        {
                            "name": "spectator",
                            "description": "`Object` - player"
                        },
                        {
                            "name": "whitelistedSides",
                            "description": "`Array` - (Optional, default: []) sides that can be spectated"
                        },
                        {
                            "name": "allowAi",
                            "description": "`Boolean` - (Optional, default: `false`) whether AI can be viewed by the spectator"
                        },
                        {
                            "name": "allowFreeCamera",
                            "description": "`Boolean` - (Optional, default: `true`) whether free camera mode is available"
                        },
                        {
                            "name": "allow3PPCamera",
                            "description": "`Boolean` - (Optional, default: `true`) whether 3rd Person camera mode is available"
                        },
                        {
                            "name": "showFocusInfo",
                            "description": "`Boolean` - (Optional, default: `true`) whether to show Focus Info stats widget"
                        },
                        {
                            "name": "showCameraButtons",
                            "description": "`Boolean` - (Optional, default: `true`) whether or not to show camera buttons widget"
                        },
                        {
                            "name": "showControlsHelper",
                            "description": "`Boolean` - (Optional, default: `true`) whether to show controls helper widget"
                        },
                        {
                            "name": "showHeader",
                            "description": "`Boolean` - (Optional, default: `true`) whether to show header widget"
                        },
                        {
                            "name": "showLists",
                            "description": "`Boolean` - (Optional, default: `true`) whether to show entities / locations lists"
                        }
                    ],
                    "outline": "[mode, [spectator, whitelistedSides, allowAi, allowFreeCamera, allow3PPCamera, showFocusInfo, showCameraButtons, showControlsHelper, showHeader, showLists]] call `BIS_fnc_EGSpectator`",
                    "returns": "`Boolean` - the return value depends on the mode. For \"Initialize\" and \"Terminate\" a `Boolean` indicating successful execution is returned."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EGSpectator"
        },
        "configuration": {
            "label": "BIS_fnc_EGSpectator",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Part of the [EG Spectator Mode](https://community.bistudio.com/wiki/EG%20Spectator%20Mode). **IMPORTANT**: For internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EGSpectatorCamera"
        },
        "configuration": {
            "label": "BIS_fnc_EGSpectatorCamera",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_EGSpectatorCameraPrepareTarget` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EGSpectatorCameraPrepareTarget"
        },
        "configuration": {
            "label": "BIS_fnc_EGSpectatorCameraPrepareTarget",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_EGSpectatorCameraResetTarget` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EGSpectatorCameraResetTarget"
        },
        "configuration": {
            "label": "BIS_fnc_EGSpectatorCameraResetTarget",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_EGSpectatorCameraSetTarget` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EGSpectatorCameraSetTarget"
        },
        "configuration": {
            "label": "BIS_fnc_EGSpectatorCameraSetTarget",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_EGSpectatorCameraTick` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EGSpectatorCameraTick"
        },
        "configuration": {
            "label": "BIS_fnc_EGSpectatorCameraTick",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_EGSpectatorDraw2D` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EGSpectatorDraw2D"
        },
        "configuration": {
            "label": "BIS_fnc_EGSpectatorDraw2D",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_EGSpectatorDraw3D` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EGSpectatorDraw3D"
        },
        "configuration": {
            "label": "BIS_fnc_EGSpectatorDraw3D",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_EGSpectatorGetUnitsToDraw` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EGSpectatorGetUnitsToDraw"
        },
        "configuration": {
            "label": "BIS_fnc_EGSpectatorGetUnitsToDraw",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Bravo Zero One development\n\t- John_Spartan\n\n\tDescription:\n\t- This function is designed as part of set of functions to implement semi-authenthic ejection system on fixed wing aircrfat that have such functionality enabled/configured.\n\t- Additional option for player to separate from ejetor seat via user action. default ejection function will ato deploy parachute at 350 m altitude. This is a manual override.\n\t- Generic parachute used, currently only one model in game so no need to parametarize.\n\n\tExucution:\n\t- Call the function via user action defined on the ejector seat vehicle.\n\n\t\tExample:\n\t\tclass UserActions\n\t    {\n\n\t\t\tclass Ejection_Seat_Eject\n\t\t\t{\n\t\t\t\tpriority = 0.05;\n\t\t\t\tshortcut = \"Eject\";\n\t\t\t\tdisplayName = \"$STR_A3_action_deploy_parachute\";\n\t\t\t\tcondition = \"player in this\";\n\t\t\t\tstatement = \"[this] spawn BIS_fnc_ejectionSeatRelease\";\n\t\t\t\tposition = \"pilotcontrol\";\n\t\t\t\tradius = 10;\n\t\t\t\tonlyforplayer = 1;\n\t\t\t\tshowWindow = 0;\n\t\t\t\thideOnUse = 1;\n\t\t\t};\n\t\t};\n\n\tRequirments:\n\t- Compatible ejector seat must have a user action set up to triger this fnc.\n\n\tParameter(s):\n\t\t_this select 0: mode (Scalar)\n\t\t0: ejector seat/object\n\n\tReturns: nothing\n\tResult: Pilot will be forced from ejection seat vehicle to parachute. Semi-authenthic behaviour.\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_ejectionSeatRelease;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_ejectionSeatRelease` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_ejectionSeatRelease"
        },
        "configuration": {
            "label": "BIS_fnc_ejectionSeatRelease",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Controls the enabling of saving. Will only enable saving if there are no remaining requests for disabled saving.",
            "examples": [
                {
                    "text": "```sqf\n\"savingID\" call BIS_fnc_enableSaving;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "id",
                            "description": "`String` - unique id previously used to disable saving via `BIS_fnc_disableSaving`"
                        }
                    ],
                    "outline": "id call `BIS_fnc_enableSaving`",
                    "returns": "`Boolean` - `true` if successful, `false` if not"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_enableSaving"
        },
        "configuration": {
            "label": "BIS_fnc_enableSaving",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Encodes array of unique binary flags with indexes between 0-15 into a single scalar.",
            "examples": [
                {
                    "text": "```sqf\nprivate _encodedFlags = [0,2,3] call BIS_fnc_encodeFlags;//Returns 13\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "flags",
                            "description": "`Array` - array of unique binary flags with indexes between 0-15"
                        }
                    ],
                    "outline": "flags call `BIS_fnc_encodeFlags`",
                    "returns": "`Number` - encoded flags"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_encodeFlags"
        },
        "configuration": {
            "label": "BIS_fnc_encodeFlags",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Encodes array of unique binary flags (zeroes or ones) into a single scalar.\n**IMPORTANT**:  Note that the input array is in {{Link|https://en.wikipedia.org/wiki/Endianness#Definition|Big Endian, meaning that the smallest value is **to the left**.}}",
            "examples": [
                {
                    "text": "```sqf\nprivate _result = [1,0,1,1] call BIS_fnc_encodeFlags2;\nhint str _result; // Displays 13\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "arrayOfNumbers",
                            "description": "`Array` of `Number`s - \"boolean\" flags where 0 = false and 1 = true"
                        }
                    ],
                    "outline": "arrayOfNumbers call `BIS_fnc_encodeFlags2`",
                    "returns": "`Number` - the calculated number"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_encodeFlags2"
        },
        "configuration": {
            "label": "BIS_fnc_encodeFlags2",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tEncodes array of unique 4-state flags (0,1,2,3) into a single number.\n\n\tSyntax:\n\t-------\n\t_encodedFlags:scalar = _flags:array call BIS_fnc_encodeFlags4;\n\n\tExample:\n\t--------\n\t225 = [1,0,2,3] call BIS_fnc_encodeFlags4;\n\n\tExplanation:\n\t------------\n\t[1,0,2,3] -> 11 10 00 01 -> 225\n\t[0,0,0,0,0,0,0,1] -> 01 00 00 00 00 00 00 00 -> 0100 0000 0000 0000 -> 16384\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_encodeFlags4`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_encodeFlags4"
        },
        "configuration": {
            "label": "BIS_fnc_encodeFlags4",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tEncodes array of unique 8-state flags (0,1,2,3,4,5,6,7) into a single number.\n\n\tSyntax:\n\t-------\n\t_encodedFlags:scalar = _flags:array call BIS_fnc_encodeFlags8;\n\n\tExample:\n\t--------\n\t4311 = [7,2,3,0,1] call BIS_fnc_encodeFlags8;\n\n\tExplanation:\n\t------------\n\t[7,2,3,0,1] -> 001 000 011 010 111 -> 0001 0000 1101 0111 -> 4311\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_encodeFlags8`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_encodeFlags8"
        },
        "configuration": {
            "label": "BIS_fnc_encodeFlags8",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Unregister a loading screen. When none other remains, end the loading.",
            "examples": [
                {
                    "text": "```sqf\n[\"myLoadingScreen\", \"Loading… wait for my splendid™ mission!\"] call BIS_fnc_startLoadingScreen;\nuiSleep 3;\n\"myLoadingScreen\" call BIS_fnc_endLoadingScreen;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "screenId",
                            "description": "`String` - screen ID, used in `BIS_fnc_startLoadingScreen`"
                        }
                    ],
                    "outline": "screenId call `BIS_fnc_endLoadingScreen`",
                    "returns": "`Boolean` - true when unregistered"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_endLoadingScreen"
        },
        "configuration": {
            "label": "BIS_fnc_endLoadingScreen",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Ends the mission properly for all players in a multiplayer environment.\n**NOTE**: This function is somewhat deprecated for custom endings since **(Arma 3)** as [[remoteExec|remote-exec]]uting `BIS_fnc_endMission` allows for more options:\n\n```sqf\n[\"MyEnding\", true, 3] remoteExec [\"BIS_fnc_endMission\", 0, true];\n```",
            "examples": [
                {
                    "text": "```sqf\n\"SideScore\" call BIS_fnc_endMissionServer;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "endType",
                            "description": "`String` - class name of ending defined in [[Description.ext#CfgDebriefing|CfgDebriefing]]."
                        }
                    ],
                    "outline": "endType call `BIS_fnc_endMissionServer`",
                    "returns": "`Boolean`"
                }
            ],
            "effectLocality": "Global Effect",
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_endMissionServer"
        },
        "configuration": {
            "label": "BIS_fnc_endMissionServer",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns true if unit knows about nearby enemy unit or driven vehicle.",
            "examples": [
                {
                    "text": "```sqf\nprivate _enemyDetected = _unit call BIS_fnc_enemyDetected;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`: unit that is inspected"
                        },
                        {
                            "name": "distance",
                            "description": "`Number`: radius around unit to check"
                        }
                    ],
                    "outline": "unit call `BIS_fnc_enemyDetected`",
                    "returns": "`Boolean`: True if an enemy was detected"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_enemyDetected"
        },
        "configuration": {
            "label": "BIS_fnc_enemyDetected",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns sides hostile to the given [side](https://community.bistudio.com/wiki/Side) / [object](https://community.bistudio.com/wiki/Object).",
            "examples": [
                {
                    "text": "```sqf\nplayer call BIS_fnc_enemySides;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "input",
                            "description": "`Object` or `Side` - side or object whose hostile sides should be returned"
                        }
                    ],
                    "outline": "input call `BIS_fnc_enemySides`",
                    "returns": "`Array` containing all hostile sides of given side or object"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_enemySides"
        },
        "configuration": {
            "label": "BIS_fnc_enemySides",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return list of nearby enemy targets for given unit.",
            "examples": [
                {
                    "text": "```sqf\nprivate _targets = _unit call BIS_fnc_enemyTargets;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`: unit that is inspected"
                        }
                    ],
                    "outline": "unit call `BIS_fnc_enemyTargets`",
                    "returns": "`Array` of enemies, empty if unit doesn't know about any enemy"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_enemyTargets"
        },
        "configuration": {
            "label": "BIS_fnc_enemyTargets",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "[[File:BIS_fnc_error.png|300px|right]]\nLogs an error message and shows an ingame error message. The message is shown when either of the following is true:\n\n* In [2D Editor](https://community.bistudio.com/wiki/2D%20Editor)\n* In [Eden Editor](https://community.bistudio.com/wiki/Eden%20Editor) via `BIS_fnc_3DENNotification`\n* Display `**313**` ([Eden Editor](https://community.bistudio.com/wiki/Eden%20Editor) display) is available\n* <sqf inline>profileNamespace getVariable [\"BIS_fnc_init_displayErrors\", false] is set to <sqf inline>true.\n\n**Output format:**\n\n* In multiplayer (`isMultiplayer`) the function will add the `profileName` in front of the message\n* If <sqf inline>_fnc_error_exit is set to <sqf inline>true before the function call, the log message will display `**HALT:}} instead of {{hl|ERROR:**`\n* If function is called from within another function, the name of the parent function will be displayed. This can be overwritten by setting <sqf inline>_fnc_scriptName to a custom value\n\n**NOTE**: `**[[Description.ext#allowFunctionsLog|allowFunctionsLog]] has to be set to **1** in [[Description.ext]] for this function to have any effect.**`",
            "examples": [
                {
                    "text": "```sqf\n[\"Player is too far away (%1 metres)\", round (player distance [0, 0, 0])] call BIS_fnc_error;\n```"
                },
                {
                    "text": "```sqf\n\n// some useful function cases\nif (!isServer) exitWith { [\"This function must run on the server\"] call BIS_fnc_error };\nif (!hasInterface) exitWith { [\"This function must not run on a headless machine\"] call BIS_fnc_error };\nif (!local _vehicle) exitWith { [\"This function must run on the vehicle owner's machine\"] call BIS_fnc_error };\n\n```"
                },
                {
                    "text": "```sqf\n\n// Change rpt log to \"HALT\" indicating that function exited\nprivate _fnc_error_exit = true;\nif (exitHere) exitWith\n{\n\t\"Some error message!\" call BIS_fnc_error; // Output in rpt: \"log: HALT: [BIS_fnc_debugConsoleExec] Some error message!\"\n};\n\n```"
                },
                {
                    "text": "```sqf\n\nprivate _fnc_scriptName = \"My_Awesome_Custom_Function\";\n\"Some error message!\" call BIS_fnc_error; // Output in rpt: \"log: ERROR: [My_Awesome_Custom_Function] Some error message!\"\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "message",
                            "description": "`String` - (`format`ted) logged message"
                        },
                        {
                            "name": "param1..paramN",
                            "description": "`Anything` - (Optional) `format` arguments, if any"
                        }
                    ],
                    "outline": "[message, param1, ..., paramN] call `BIS_fnc_error`",
                    "returns": "`Array` in format: [message, param1..paramN]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_error"
        },
        "configuration": {
            "label": "BIS_fnc_error",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Display error window.\n**Arma**: 3|Broken in {{arma3. Use `BIS_fnc_error` instead}}",
            "examples": [
                {
                    "text": "```sqf\n[\"This is an error message\"] call BIS_fnc_errorMsg;\n```"
                },
                {
                    "text": "```sqf\n[\"This is an error message: player is: %1\", player] call BIS_fnc_errorMsg;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "message",
                            "description": "`String`"
                        },
                        {
                            "name": "otherParameters",
                            "description": "`Anything` - to format `format` command"
                        }
                    ],
                    "outline": "[message, otherParameters] call `BIS_fnc_errorMsg`",
                    "returns": "[Script Handle](https://community.bistudio.com/wiki/Script%20Handle)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_errorMsg"
        },
        "configuration": {
            "label": "BIS_fnc_errorMsg",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Displays a parameter type error message (using `BIS_fnc_error`) explaining the problem.",
            "examples": [
                {
                    "text": "```sqf\n\n// show error and abort if input is not of type ARRAY:\nif !(_this isEqualType []) exitWith { [_this, \"isEqualType\", []] call BIS_fnc_errorParamsType; };\n\n```"
                },
                {
                    "text": "```sqf\n\n// show error and abort if array input is not in format [SCALAR, STRING, BOOL]:\nif !(_this isEqualTypeArray [0, \"\", true]) exitWith { [_this, \"isEqualTypeArray\", [0, \"\", true]] call BIS_fnc_errorParamsType; };\n\n```"
                },
                {
                    "text": "```sqf\n\n// show error and abort if array input is not in format [BOOL, BOOL, BOOL, ...]:\nif !(_this isEqualTypeAll true) exitWith { [_this, \"isEqualTypeAll\", true] call BIS_fnc_errorParamsType; };\n\n```"
                },
                {
                    "text": "```sqf\n\n// show error and abort if input is neither ARRAY nor OBJECT:\nif !(_this isEqualTypeAny [[], objNull]) exitWith { [_this, \"isEqualTypeAny\", [[], objNull]] call BIS_fnc_errorParamsType; };\n\n```"
                },
                {
                    "text": "```sqf\n\n// show error and abort if input is neither of type ARRAY nor array in format [SCALAR, ARRAY, <ANYTHING>, OBJECT]:\nif !(_this isEqualTypeParams [0, [], nil, objNull]) exitWith { [_this, \"isEqualTypeParams\", [0, [], nil, objNull]] call BIS_fnc_errorParamsType; };\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "**value**",
                            "description": "`Anything` - (Optional, default `nil`) value received."
                        },
                        {
                            "name": "**method**",
                            "description": "`String` - (Optional, default \"\") validation method, can be one of:"
                        },
                        {
                            "name": "**expected** (Optional, default",
                            "description": "`nil`): `Anything` - expected type."
                        }
                    ],
                    "outline": "[value, method, expected] call `BIS_fnc_errorParamsType`",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_errorParamsType"
        },
        "configuration": {
            "label": "BIS_fnc_errorParamsType",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_escortAI;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_escortAI` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_escortAI"
        },
        "configuration": {
            "label": "BIS_fnc_escortAI",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_escortAIHoldAction;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_escortAIHoldAction` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_escortAIHoldAction"
        },
        "configuration": {
            "label": "BIS_fnc_escortAIHoldAction",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Plays a fake UAV observational sequence which serves as an establishing shot.\n [[File:BIS_fnc_establishingShot.gif|left|400px]]",
            "examples": [
                {
                    "text": "```sqf\n[player, \"I can see my house from here\", 500, 250, 75, 1, [], 0, true] spawn BIS_fnc_establishingShot;\n```"
                },
                {
                    "text": "```sqf\n\n[\n\t[5229.97, 5233.07, 0],\n\t\"BLUFOR and OPFOR firefight\",\n\t500,\n\t250,\n\t75,\n\t1,\n\t[\n\t\t[\"\\A3\\ui_f\\data\\map\\markers\\nato\\b_inf.paa\", [0, 0.3, 0.6, 1], group_1, 1, 1, 0, \"BLUFOR\"],\n\t\t[\"\\A3\\ui_f\\data\\map\\markers\\nato\\o_inf.paa\", [0.5, 0, 0, 1], group_2, 1, 1, 0, \"OPFOR\"]\n\t],\n\t0,\n\ttrue,\n\t15\n] spawn BIS_fnc_establishingShot;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Object` or `Array` - target or target's position"
                        },
                        {
                            "name": "text",
                            "description": "`String` - (Optional, default \"\") text to display"
                        },
                        {
                            "name": "altitude",
                            "description": "`Number` - (Optional, default 500) altitude in meters"
                        },
                        {
                            "name": "radius",
                            "description": "`Number` - (Optional, default 200) radius of the circular movement in meters"
                        },
                        {
                            "name": "angle",
                            "description": "`Number` - (Optional, default random) viewing angle in degrees"
                        },
                        {
                            "name": "rotation",
                            "description": "`Number` - (Optional, default random) direction of camera movement"
                        },
                        {
                            "name": "iconOptions",
                            "description": "`Array` of `Array`s - (Optional, default <sqf inline>[]) each array in format [icon, color, target, sizeX, sizeY, angle, text, shadow]:"
                        },
                        {
                            "name": "mode",
                            "description": "`Number` - (Optional, default 0)"
                        },
                        {
                            "name": "fadeIn",
                            "description": "`Boolean` - (Optional, default `true`) fade in after completion"
                        },
                        {
                            "name": "waitTime",
                            "description": "`Number` - (Optional, default 2) wait time in seconds after the shot has been completed"
                        }
                    ],
                    "outline": "[target, text, altitude, radius, angle, rotation, iconOptions, mode, fadeIn, waitTime] spawn `BIS_fnc_establishingShot`",
                    "returns": "`Boolean` - true when done"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_establishingShot"
        },
        "configuration": {
            "label": "BIS_fnc_establishingShot",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Set mission countdown.",
            "examples": [
                {
                    "text": "```sqf\n[180] call BIS_fnc_estimatedTimeLeft;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "time",
                            "description": "`Number` - mission countdown"
                        }
                    ],
                    "outline": "[time] call `BIS_fnc_estimatedTimeLeft`",
                    "returns": "`Number` - `estimatedEndServerTime`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_estimatedTimeLeft"
        },
        "configuration": {
            "label": "BIS_fnc_estimatedTimeLeft",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Universal system for playing sequential events defined by time. **NOTE**: _codeInterrupt_ and _codeEnd_ are `call`ed while the code in the timeline is `spawn`ed.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _timeline =\n[\n\t[0.0, { hint \"Start of the Timeline\" }],\n\t[1.0, { hint \"Event 1\" }],\n\t[3.0, { hint \"End of the timeline\" }]\n];\n\n[_timeline, 0, \"\", { hint \"Interrupted\" }, { hint \"Timeline done\" }] spawn BIS_fnc_eventTimeline;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "timeline",
                            "description": "`Array` - timeline in format <nowiki>[[1.0, {code}], [2.0, {code}], [2.3, {code}], [4.7, {code}]]</nowiki>"
                        },
                        {
                            "name": "index",
                            "description": "`Number` - (Optional, default 0) index of the event to play"
                        },
                        {
                            "name": "music",
                            "description": "`String` - (Optional, default \"\") music to be played which will provide the sync time for the timeline"
                        },
                        {
                            "name": "codeInterrupt",
                            "description": "`Code` - (Optional, default "
                        },
                        {
                            "name": "codeEnd",
                            "description": "`Array` or `Code` - (Optional, default `nil`) `Code` or `Array` of codes to be executed once the timeline is finished. The codes are `call`ed one after the other."
                        }
                    ],
                    "outline": "[timeline, index, music, codeInterrupt, codeEnd] call `BIS_fnc_eventTimeline`",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_eventTimeline"
        },
        "configuration": {
            "label": "BIS_fnc_eventTimeline",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Execute the scripted FSM. Shell for `execFSM` command",
            "examples": [
                {
                    "text": "```sqf\nprivate _handle = [[_param1, _param2, _param3 /* etc */], \"test.fsm\"] call BIS_fnc_execFSM;\n```"
                },
                {
                    "text": "```sqf\nprivate _handle = \"test.fsm\" call BIS_fnc_execFSM;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "filename",
                            "description": "`String` - `FSM` filename"
                        },
                        {
                            "name": "params",
                            "description": "`Array` - parameters are passed to script as variable [_this](https://community.bistudio.com/wiki/Magic%20Variables%23this)"
                        },
                        {
                            "name": "filename",
                            "description": "`FSM` - `FSM` filename"
                        }
                    ],
                    "outline": "[params, filename] call `BIS_fnc_execFSM`",
                    "returns": "`Number` - FSM handle or **0** on error"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_execFSM"
        },
        "configuration": {
            "label": "BIS_fnc_execFSM",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "This function is now an alias to `BIS_fnc_MP`.\n**IMPORTANT**: Use `remoteExec` and `remoteExecCall` instead!",
            "examples": [
                {
                    "text": "See `BIS_fnc_MP`"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ]
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_execRemote"
        },
        "configuration": {
            "label": "BIS_fnc_execRemote",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "This function executes the stacked items.\n**IMPORTANT**: This function should not be called independently.",
            "examples": [
                {
                    "text": "```sqf\n[\"onEachFrame\"] call BIS_fnc_executeStackedEventHandler;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "eventHandlerType",
                            "description": "`String` - the onXXX event handler"
                        }
                    ],
                    "outline": "[eventHandlerType] call `BIS_fnc_executeStackedEventHandler`",
                    "returns": "`Boolean` - always `true`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_executeStackedEventHandler"
        },
        "configuration": {
            "label": "BIS_fnc_executeStackedEventHandler",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "{{Feature|obsolete|use `remoteExec`/`remoteExecCall` instead.|arma3|1.50}}\n`execVM` desired script with desired argument(s). This function is only really useful when combined with `BIS_fnc_MP` to execute a script remotely.",
            "examples": [
                {
                    "text": "```sqf\n\"Bonus\\initializeExtras.sqf\" call BIS_fnc_execVM;\n```"
                },
                {
                    "text": "```sqf\n[player, \"reposition.sqf\"] call BIS_fnc_execVM;\n```"
                },
                {
                    "text": "```sqf\n\n// before Arma 3 v1.50\n[[[_param1, _param2], \"addBonus.sqf\"], \"BIS_fnc_execVM\", true] call BIS_fnc_MP;\n\n// since Arma 3 v1.50\n[[_param1, _param2], \"addBonus.sqf\"] remoteExec [\"execVM\"];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "filename",
                            "description": "`String`"
                        },
                        {
                            "name": "arguments",
                            "description": "`Anything` - arguments are passed to script as magic variable [_this](https://community.bistudio.com/wiki/Magic%20Variables%23this)."
                        },
                        {
                            "name": "filename",
                            "description": "`String`"
                        }
                    ],
                    "outline": "[arguments, filename] call `BIS_fnc_execVM`",
                    "returns": "[Script Handle](https://community.bistudio.com/wiki/Script%20Handle) - can be used to determine (via `scriptDone`) when the script has finished."
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_execVM"
        },
        "configuration": {
            "label": "BIS_fnc_execVM",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_addTickets`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_addTickets"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_addTickets",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte\n\n\tDescription:\n\tBalances a group depending on the amount of connected players\n\n\tParameters:\n\t\t_group: The group to balance\n\t\t_minCount: The minimal count of units group must end up with\n\t\t_bExcludeVehicleRoles: Whether to exclude units in important vehicle roles (driver, gunner, commander)\n\n\tReturns:\n\t\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_balanceGroup`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_balanceGroup"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_balanceGroup",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte\n\n\tDescription:\n\t\tSet's a mission checkpoint, in single-player an auto save happens, in multiplayer a new respawn position is added\n\n\tParameters:\n\t\t_target: The target namespace\n\t\t_position: The desired position\n\t\t_name: The name of the position\n\n\tReturns:\n\t\tAdded respawn position identifier\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_checkpoint`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_checkpoint"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_checkpoint",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Changes AI skill based on player count, responding to player connected / player disconnected events. This function does exactly the same as `BIS_fnc_EXP_camp_setSkill` execept that it automatically executes when a player joins or disconnects.",
            "examples": [
                {
                    "text": "```sqf\n\n[\n\ttrue,\n\t[\n\t\t[WEST, 0.1, 0.2, 0.7, 0.6],\n\t\t[EAST, 0.1, 0.2, 0.7, 0.6]\n\t]\n] call BIS_fnc_EXP_camp_dynamicAISkill;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`Boolean` - (Optional, default `true`) `true` to enable, `false` to disable"
                        },
                        {
                            "name": "affectedSides",
                            "description": "`Array` - array of affected sides and their skill sets. For details see `BIS_fnc_EXP_camp_setSkill`"
                        }
                    ],
                    "outline": "[mode, affectedSides] call `BIS_fnc_EXP_camp_dynamicAISkill`",
                    "returns": "`Nothing`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_dynamicAISkill"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_dynamicAISkill",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns whether or not player is in cinematic mode.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_EXP_camp_getCinematicMode;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "returns": "`Boolean` - `true` if in cinematic mode, `false` if not"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_getCinematicMode"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_getCinematicMode",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns group that players belong to in coop campaign scenario.",
            "examples": [
                {
                    "text": "```sqf\nprivate _group = call BIS_fnc_EXP_camp_getPlayersGroup;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "returns": "`Group` - group the player belongs to"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_getPlayersGroup"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_getPlayersGroup",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte\n\n\tDescription:\n\tSpawns object of given class and makes it travel, hooming towards the target\n\tTo be used with CfgAmmo type of entity, but can be used with virtually any kind of object\n\n\tParameters:\n\t\t_startPos: \t\tARRAY \t\t\tThe initial position of the projectile (ASL)\n\t\t_class: \t\tSTRING or OBJECT\tThe class name of the object to spawn or an object entity already existing\n\t\t_target:\t\tOBJECT\t\t\tThe target object the projectile will be hooming towards to\n\t\t_speed:\t\t\tSCALAR\t\t\tThe speed the object should assume\n\t\t_destroyTarget:\t\tBOOL\t\t\tWhether to force destruction of the target object on detonation\n\t\t_localOffset:\t\tARRAY\t\t\tThe model space position offset that projectile should be hooming towards to\n\t\t_minDistanceToTarget:\tSCALAR\t\t\tThe minimal distance projectile needs to be from target position to enter ballistic mode\n\t\t_function\t\tSTRING\t\t\tThe function to execute on the created object with params [<object>]\n\t\t_isGlobalFunction\tBOOL\t\t\tWhether the executed function should be executed on all connected machine, false to execute only on the server\n\n\tReturns:\n\t\tNOTHING\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_guidedProjectile`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_guidedProjectile"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_guidedProjectile",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte\n\n\tDescription:\n\tReturns whether the mission has actually started (see Manager)\n\n\tParameters:\n\t\tNothing\n\n\tReturns:\n\t\tTrue if mission was started, false if not\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_hasMissionStarted`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_hasMissionStarted"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_hasMissionStarted",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Simple handling of the Support Team's scripted IFF.</br>\n\n[[File: BIS_fnc_EXP_camp_IFF.png|350px]]\n\n**NOTE**: See {{Link|#Example 2 for icon and name options.}}",
            "examples": [
                {
                    "text": "```sqf\n[units group player] call BIS_fnc_EXP_camp_IFF;\n```"
                },
                {
                    "text": "```sqf\n\nindividualUnit setVariable [\"BIS_iconAlways\", true];\t// to always show the icon and name of a unit\nindividualUnit setVariable [\"BIS_iconShow\", false];\t\t// to hide the icon\nindividualUnit setVariable [\"BIS_iconName\", false];\t\t// to hide the name\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "units",
                            "description": "`Array` - an array of units on which to apply IFF effect"
                        }
                    ],
                    "outline": "[units] call `BIS_fnc_EXP_camp_IFF`",
                    "returns": "`Boolean` - `true` if successful, `false` if not"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_IFF"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_IFF",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Assigns correct appearance and loadout of story characters based upon their vehicle classnames.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_unit,\"NIGHT\"] call BIS_fnc_EXP_camp_initCharacter;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - the character to be initialized"
                        },
                        {
                            "name": "mode",
                            "description": "`String` - (Optional, default \"DAY\") can be either \"DAY\" (unsilenced, no NVGs, default) or \"NIGHT\" (silenced, NVGs)"
                        }
                    ],
                    "outline": "[unit, mode] call `BIS_fnc_EXP_camp_initCharacter`",
                    "returns": "`Boolean` - returns `true` if successful, `false` if not"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_initCharacter"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_initCharacter",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Initializes the classes players can choose from before spawning.",
            "examples": [
                {
                    "text": "```sqf\n[\"NIGHT\"] call BIS_fnc_EXP_camp_initClasses;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`String` - (Optional, default \"DAY\") can be either \"DAY\" (unsilenced, no NVGs, default) or \"NIGHT\" (silenced, NVGs)"
                        }
                    ],
                    "outline": "[mode] call `BIS_fnc_EXP_camp_initClasses`",
                    "returns": "`Boolean` - returns `true` if successful, `false` if not"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_initClasses"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_initClasses",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Initializes difficulty settings in Apex Protocol campaign.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_EXP_camp_initDifficulty;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "returns": "`Boolean` - `true`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_initDifficulty"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_initDifficulty",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tPROJECT:\tR&D\n\tAUTHOR:\t\tEndstar\n\tDATE:\t\t18-04-2016\n\n\tfn_EXP_camp_lobby.sqf\n\n\t\tCampaign Lobby: Core Function\n\n\tParams\n\n\t\t0:\n\n\tReturn\n\n\t\t0:\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_lobby`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_lobby"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_lobby",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tPROJECT:\tR&D\n\tAUTHOR:\t\tEndstar\n\tDATE:\t\t18-04-2016\n\n\tfn_EXP_camp_lobby_clearVars.sqf\n\n\t\tCampaign Lobby: Clear variables\n\n\tParams\n\n\t\t0:\n\n\tReturn\n\n\t\t0:\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_lobby_clearVars`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_lobby_clearVars"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_lobby_clearVars",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tPROJECT: R&D\n\tAUTHOR:  Endstar\n\tDATE:    18-04-2016\n\n\tfn_EXP_camp_lobby_ctrlSetColor.sqf\n\n\t\tCampaign Lobby: Updates controls with defined colors\n\n\tParams\n\n\t\t0:\n\n\tReturn\n\n\t\t0:\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_lobby_ctrlSetColor`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_lobby_ctrlSetColor"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_lobby_ctrlSetColor",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tPROJECT:\tR&D\n\tAUTHOR:\t\tEndstar\n\tDATE:\t\t18-04-2016\n\n\tfn_EXP_camp_lobby_findHost.sqf\n\n\t\tCampaign Lobby: Find host\n\n\tParams\n\n\t\t0:\n\n\tReturn\n\n\t\t0:\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_lobby_findHost`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_lobby_findHost"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_lobby_findHost",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tPROJECT: R&D\n\tAUTHOR:  Endstar\n\tDATE:    08-08-2016\n\n\tfn_EXP_camp_lobby_getHostSettings.sqf\n\n\t\tCampaign Lobby: Grabs the host settings for respawn and revive\n\n\tParams\n\n\t\t0:\n\n\tReturn\n\n\t\t0:\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_lobby_getHostSettings`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_lobby_getHostSettings"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_lobby_getHostSettings",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tPROJECT: R&D\n\tAUTHOR:  Endstar\n\tDATE:    18-04-2016\n\n\tfn_EXP_camp_lobby_getPlayerSquadName.sqf\n\n\t\tCampaign Lobby: Return the player squad name\n\n\tParams\n\n\t\t0:\n\n\tReturn\n\n\t\t0:\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_lobby_getPlayerSquadName`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_lobby_getPlayerSquadName"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_lobby_getPlayerSquadName",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tPROJECT: R&D\n\tAUTHOR:  Endstar\n\tDATE:    18-04-2016\n\n\tfn_EXP_camp_lobby_go.sqf\n\n\t\tCampaign Lobby: Run Mission\n\n\tParams\n\n\t\t0:\n\n\tReturn\n\n\t\t0:\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_lobby_go`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_lobby_go"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_lobby_go",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tPROJECT: R&D\n\tAUTHOR:  Endstar\n\tDATE:    18-04-2016\n\n\tfn_EXP_camp_lobby_intro.sqf\n\n\t\tCampaign Lobby: On Load Function (Does nothing)\n\n\tParams\n\n\t\t0:\n\n\tReturn\n\n\t\t0:\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_lobby_intro`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_lobby_intro"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_lobby_intro",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tPROJECT: R&D\n\tAUTHOR:  Endstar\n\tDATE:    18-04-2016\n\n\tfn_EXP_camp_lobby_launch.sqf\n\n\t\tCampaign Lobby: Launch Function\n\n\tParams\n\n\t\t0:\n\n\tReturn\n\n\t\t0:\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_lobby_launch`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_lobby_launch"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_lobby_launch",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tPROJECT: R&D\n\tAUTHOR:  Endstar\n\tDATE:    18-04-2016\n\n\tfn_EXP_camp_lobby_loop.sqf\n\n\t\tCampaign Lobby: Update UI Loop\n\n\tParams\n\n\t\t0:\n\n\tReturn\n\n\t\t0:\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_lobby_loop`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_lobby_loop"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_lobby_loop",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tPROJECT: R&D\n\tAUTHOR:  Endstar\n\tDATE:    18-04-2016\n\n\tfn_EXP_camp_lobby_missionCountdown.sqf\n\n\t\tCampaign Lobby: Countdown to run mission\n\n\tParams\n\n\t\t0:\n\n\tReturn\n\n\t\t0:\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_lobby_missionCountdown`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_lobby_missionCountdown"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_lobby_missionCountdown",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tPROJECT: R&D\n\tAUTHOR:  Endstar\n\tDATE:    18-04-2016\n\n\tfn_EXP_camp_lobby_onLoad.sqf\n\n\t\tCampaign Lobby: On Load Function (Does nothing)\n\n\tParams\n\n\t\t0:\n\n\tReturn\n\n\t\t0:\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_lobby_onLoad`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_lobby_onLoad"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_lobby_onLoad",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tPROJECT: R&D\n\tAUTHOR:  Endstar\n\tDATE:    18-04-2016\n\n\tfn_EXP_camp_lobby_onUnLoad.sqf\n\n\t\tCampaign Lobby: On display unload function - clear variables and close as necessary\n\n\tParams\n\n\t\t0:\n\n\tReturn\n\n\t\t0:\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_lobby_onUnLoad`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_lobby_onUnLoad"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_lobby_onUnLoad",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tPROJECT: R&D\n\tAUTHOR:  Endstar\n\tDATE:    18-04-2016\n\n\tfn_EXP_camp_lobby_playMissionVideo.sqf\n\n\t\tCampaign Lobby: Creates the control and plays mission video\n\n\tParams\n\n\t\t0:\n\n\tReturn\n\n\t\t0:\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_lobby_playMissionVideo`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_lobby_playMissionVideo"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_lobby_playMissionVideo",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tPROJECT: R&D\n\tAUTHOR:  Endstar\n\tDATE:    18-04-2016\n\n\tfn_EXP_camp_lobby_serverPing.sqf\n\n\t\tCampaign Lobby: Updates player status\n\n\tParams\n\n\t\t0:\n\n\tReturn\n\n\t\t0:\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_lobby_serverPing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_lobby_serverPing"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_lobby_serverPing",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tPROJECT: R&D\n\tAUTHOR:  Endstar\n\tDATE:    18-04-2016\n\n\tfn_EXP_camp_lobby_serverUpdate.sqf\n\n\t\tCampaign Lobby: Server update function (runs on \"host\" machine for dedicated servers)\n\n\tParams\n\n\t\t0:\n\n\tReturn\n\n\t\t0:\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_lobby_serverUpdate`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_lobby_serverUpdate"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_lobby_serverUpdate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tPROJECT: R&D\n\tAUTHOR:  Endstar\n\tDATE:    18-04-2016\n\n\tfn_EXP_camp_lobby_structuredText.sqf\n\n\t\tCampaign Lobby: Formats structured text\n\n\tParams\n\n\t\t0:\n\n\tReturn\n\n\t\t0:\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_lobby_structuredText`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_lobby_structuredText"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_lobby_structuredText",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tPROJECT: R&D\n\tAUTHOR:  Endstar\n\tDATE:    15-08-2016\n\n\tfn_EXP_camp_lobby_UIMilitaryManager.sqf\n\n\t\tCampaign Lobby: Updates military efficiency based on mission settings\n\n\tParams\n\n\t\t0:\n\n\tReturn\n\n\t\t0:\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_lobby_UIMilitaryManager`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_lobby_UIMilitaryManager"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_lobby_UIMilitaryManager",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tPROJECT: R&D\n\tAUTHOR:  Endstar\n\tDATE:    18-04-2016\n\n\tfn_EXP_camp_lobby_missionCountdown.sqf\n\n\t\tCampaign Lobby: Countdown to run mission\n\n\tParams\n\n\t\t0:\n\n\tReturn\n\n\t\t0:\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_lobby_UIMissionCountdown`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_lobby_UIMissionCountdown"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_lobby_UIMissionCountdown",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tPROJECT: R&D\n\tAUTHOR:  Endstar\n\tDATE:    18-04-2016\n\n\tfn_EXP_camp_lobby_UIMissionManager.sqf\n\n\t\tCampaign Lobby: Handles UI behaviour of tree mission options\n\n\tParams\n\n\t\t0:\n\n\tReturn\n\n\t\t0:\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_lobby_UIMissionManager`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_lobby_UIMissionManager"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_lobby_UIMissionManager",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tPROJECT: R&D\n\tAUTHOR:  Endstar\n\tDATE:    18-04-2016\n\n\tfn_EXP_camp_lobby_updateIntel.sqf\n\n\t\tCampaign Lobby: Updates the mission overview and intel from tree interactions\n\n\tParams\n\n\t\t0:\n\n\tReturn\n\n\t\t0:\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_lobby_UIOverlayManager`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_lobby_UIOverlayManager"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_lobby_UIOverlayManager",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tPROJECT: R&D\n\tAUTHOR:  Endstar\n\tDATE:    18-04-2016\n\n\tfn_EXP_camp_lobby_UIProgressManager.sqf\n\n\t\tCampaign Lobby: Handles Progress button UI behaviour\n\n\tParams\n\n\t\t0:\n\n\tReturn\n\n\t\t0:\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_lobby_UIProgressManager`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_lobby_UIProgressManager"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_lobby_UIProgressManager",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tPROJECT: R&D\n\tAUTHOR:  Endstar\n\tDATE:    08-08-2016\n\n\tfn_EXP_camp_lobby_UISettingsManager.sqf\n\n\t\tCampaign Lobby: Handles the mission settings for Respawn and Revive\n\n\tParams\n\n\t\t0:\n\n\tReturn\n\n\t\t0:\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_lobby_UISettingsManager`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_lobby_UISettingsManager"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_lobby_UISettingsManager",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tPROJECT: R&D\n\tAUTHOR:  Endstar\n\tDATE:    08-08-2016\n\n\tfn_EXP_camp_lobby_updateHostSettings.sqf\n\n\t\tCampaign Lobby: Updates all clients with the latest host settings\n\n\tParams\n\n\t\t0:\n\n\tReturn\n\n\t\t0:\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_lobby_updateHostSettings`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_lobby_updateHostSettings"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_lobby_updateHostSettings",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tPROJECT: R&D\n\tAUTHOR:  Endstar\n\tDATE:    18-04-2016\n\n\tfn_EXP_camp_lobby_updateIntel.sqf\n\n\t\tCampaign Lobby: Updates the mission overview and intel from tree interactions\n\n\tParams\n\n\t\t0:\n\n\tReturn\n\n\t\t0:\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_lobby_updateIntel`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_lobby_updateIntel"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_lobby_updateIntel",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tPROJECT: R&D\n\tAUTHOR:  Endstar\n\tDATE:    15-08-2016\n\n\tfn_EXP_camp_lobby_updateMilitaryEfficiency.sqf\n\n\t\tCampaign Lobby: Updates military efficiency radial bar\n\n\tParams\n\n\t\t0:\n\n\tReturn\n\n\t\t0:\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_lobby_updateMilitaryEfficiency`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_lobby_updateMilitaryEfficiency"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_lobby_updateMilitaryEfficiency",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tPROJECT: R&D\n\tAUTHOR:  Endstar\n\tDATE:    18-04-2016\n\n\tfn_EXP_camp_lobby_updatePlayers.sqf\n\n\t\tCampaign Lobby: Updates UI based on player status changes\n\n\tParams\n\n\t\t0:\n\n\tReturn\n\n\t\t0:\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_lobby_updatePlayers`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_lobby_updatePlayers"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_lobby_updatePlayers",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tPROJECT: R&D\n\tAUTHOR:  Endstar\n\tDATE:    18-04-2016\n\n\tfn_EXP_camp_lobby_updatePlayerStatus.sqf\n\n\t\tCampaign Lobby: Updates player status\n\n\tParams\n\n\t\t0:\n\n\tReturn\n\n\t\t0:\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_lobby_updatePlayerStatus`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_lobby_updatePlayerStatus"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_lobby_updatePlayerStatus",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte\n\n\tDescription:\n\tHandles match start synchronization between server and clients\n\n\tThe following states are valid:\n\t- Waiting\t: State is set when joining the mission\n\t- Intro\t\t: State is set when mission intro starts\n\t- Loadout\t: State is set when mission loadout selection starts\n\t- Started\t: State is set when mission gameplay starts\n\n\tParameters:\n\t\t_introVideos: The videos directory to play, empty array leads to skipping intro videos completely\n\t\t_introVideosSubtitles: The subtitles files to execute for intro videos\n\t\t_minWaitDelay: The time to wait after waiting has been completed\n\t\t_minLoadoutDelay: The time to wait after loadout has been completed\n\t\t_maxWaitDelay: The maximum time to wait for all players during the waiting, if reached, mission is forced onto next state\n\t\t_maxLoadoutDelay: The maximum time to wait for all players during the loadout, mission is forced onto next state\n\t\t_bWantsLoadoutSelection: Whether or not to go into loadout selection, if false this is skipped\n\t\t_bNoCinematics: Whether to force no cinematics, these need to be handled manually then\n\n\tReturns:\n\t\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_manager`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_manager"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_manager",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte\n\n\tDescription:\n\tGet's the mission state, can be one of \"Waiting\", \"Intro\", \"Loadout\" or \"Started\"\n\n\tParameters:\n\t\tNothing\n\n\tReturns:\n\t\tThe mission state\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_manager_getState`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_manager_getState"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_manager_getState",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte\n\n\tDescription:\n\tA player is registered for given state\n\n\tParameters:\n\t\t_who: The player to be registered\n\t\t_listId: The state corresponding list, and where given player will be added to\n\n\tReturns:\n\t\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_manager_onPlayerRegistered`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_manager_onPlayerRegistered"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_manager_onPlayerRegistered",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte\n\n\tDescription:\n\tSet's the state of the mission\n\n\tParameters:\n\t\t_state: The new mission state to set\n\n\tReturns:\n\t\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_manager_setState`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_manager_setState"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_manager_setState",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte\n\n\tDescription:\n\tTriggers corresponding event for given mission state\n\n\tParameters:\n\t\t_state: The mission state\n\n\tReturns:\n\t\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_EXP_camp_manager_triggerEvent`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_manager_triggerEvent"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_manager_triggerEvent",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Display a checklist of players that don't meet the given condition, thus preventing mission progress.",
            "examples": [
                {
                    "text": "```sqf\n[{count allPlayers == 4}] call BIS_fnc_EXP_camp_playerChecklist;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "conditionProceed",
                            "description": "`Code` - (Optional, default {true}) general condition that must be met to proceed. Will not list player names."
                        },
                        {
                            "name": "conditionPlayer",
                            "description": "`Code` - (Optional, default {true}) condition that must be met by each player. Use **_player** to reference the player unit."
                        },
                        {
                            "name": "code",
                            "description": "`Code` - (Optional, default {}) code to be executed when all players meet the defined condition."
                        }
                    ],
                    "outline": "[conditionProceed, conditionPlayer, code] call `BIS_fnc_EXP_camp_playerChecklist`",
                    "returns": "`Boolean` - `true` if successful, `false` if not"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_playerChecklist"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_playerChecklist",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Displays the given subtitles at the correctly defined moments. Each array added to the parameters represents one subtitle.\n**NOTE**: Subtitles can be cancelled by setting `**BIS_fnc_EXP_camp_playSubtitles_terminate to `true`.**`",
            "examples": [
                {
                    "text": "```sqf\n\n[\n\t[\"CROSSROAD\", \"Mission is a go, I repeat, mission is a go! Crossroad, out.\", 0]\n] spawn BIS_fnc_EXP_camp_playSubtitles; // shows a subtitle immediately\n\n```"
                },
                {
                    "text": "```sqf\n\n[\n\t[\"Speaker1\", \"Subtitle1\", 0],\n\t[\"Speaker2\", \"Subtitle2\", 5],\n\t[\"Speaker3\", \"Subtitle3\", 10],\n\t[\"Speaker4\", \"Subtitle4\", 15]\n] spawn BIS_fnc_EXP_camp_playSubtitles; // displays 4 subtitles with 5 seconds between them\n\nsleep 7;\nBIS_fnc_EXP_camp_playSubtitles_terminate = true; // closes subtitles\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "subtitleDetailN",
                            "description": "`Array` - format [speaker, text, timing]:"
                        }
                    ],
                    "outline": "[subtitleDetail1, subtitleDetail2, ...] spawn `BIS_fnc_EXP_camp_playSubtitles`",
                    "returns": "`Boolean` - `true` if successful, `false` if not"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_playSubtitles"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_playSubtitles",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Plays a video with `BIS_fnc_EXP_camp_setCinematicMode` enabled.",
            "examples": [
                {
                    "text": "```sqf\n\"someVideoPath\" call BIS_fnc_EXP_camp_playTimelineVideo;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "videoPath",
                            "description": "`String` - path to video"
                        }
                    ],
                    "outline": "[videoPath] call `BIS_fnc_EXP_camp_playTimelineVideo`",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_playTimelineVideo"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_playTimelineVideo",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Replaces textures of \"I_G_Offroad_01_armed_F\" and \"I_G_Quadbike_01_F\" randomly.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_EXP_camp_replaceVehicles;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "returns": "`Boolean` - `true` if in cinematic mode, `false` if not"
                }
            ],
            "effectLocality": "Global Effect",
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_replaceVehicles"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_replaceVehicles",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Sets cinematic mode, with cinematic mode enabled the sounds are muted and screen is black.",
            "examples": [
                {
                    "text": "```sqf\n[true, 3, 3] call BIS_fnc_EXP_camp_setCinematicMode;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`Boolean` - (Optional, default `false`) `true` to enable, `false` to disable"
                        },
                        {
                            "name": "fadeBlack",
                            "description": "`Number` - (Optional, default 5) how long it takes in seconds to fade the screen"
                        },
                        {
                            "name": "fadeSound",
                            "description": "`Number` - (Optional, default 5) how long it takes in seconds to fade the sound"
                        }
                    ],
                    "outline": "[mode, fadeBlack, fadeSound] call `BIS_fnc_EXP_camp_setCinematicMode`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_setCinematicMode"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_setCinematicMode",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Sets skill for an entire AI side. The skill will be calculated using a lerp function. Function will take player as multiplier.",
            "examples": [
                {
                    "text": "```sqf\n[WEST,0.1,0.2,0.7,0.6] call BIS_fnc_EXP_camp_setSkill;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "side",
                            "description": "`Side` - side of which AI skill should be changed"
                        },
                        {
                            "name": "skillMin",
                            "description": "`Number` - (Optional, default 0.5) minimal general skill"
                        },
                        {
                            "name": "skillAimMin",
                            "description": "`Number` - (Optional, default 0.3) minimal aiming skill"
                        },
                        {
                            "name": "skillMax",
                            "description": "`Number` - (Optional, default 0.8) maximal general skill"
                        },
                        {
                            "name": "skillAimMax",
                            "description": "`Number` - (Optional, default 0.5) maximal aiming skill"
                        }
                    ],
                    "outline": "[side,skillMin,skillAimMin,skillMax,skillAimMax] call `BIS_fnc_EXP_camp_setSkill`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_setSkill"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_setSkill",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Displays multiple lines of text in given order.\n\n[[File:BIS_fnc_EXP camp SITREP.gif|400px]]",
            "examples": [
                {
                    "text": "```sqf\n[[\"line1\", 4, 5], [\"line2\", 3, 5, 8]] spawn BIS_fnc_EXP_camp_SITREP;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "line#",
                            "description": "`Array` - lines to be displayed, format [text, fadeInTime, waitTime, fadeOutTime]:"
                        }
                    ],
                    "outline": "[line1, line2, lineX] spawn `BIS_fnc_EXP_camp_SITREP`",
                    "returns": "`Boolean` - `true` if successful, `false` if not"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_EXP_camp_SITREP"
        },
        "configuration": {
            "label": "BIS_fnc_EXP_camp_SITREP",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tExport group or object composition for use in CfgGroups. The result will be copied to clipboard.\n\n\tParameter(s):\n\t\t0: position (for supported types see BIS_fnc_position). Screen center is used by default\n\t\t1: objects to be saved. Currently selected objects in curator are used by default\n\t\t\tARRAY of OBJECTs - specific objects to be saved\n\t\t\tarray in format used by nearEntities, which automatically get nearby objects\n\t\t\t\t0: STRING or ARRAY of STRINGS - object types\n\t\t\t\t1: NUMBER - radius in metres\n\n\tReturns:\n\tSTRING\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_exportCfgGroups;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_exportCfgGroups` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_exportCfgGroups"
        },
        "configuration": {
            "label": "BIS_fnc_exportCfgGroups",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Exports `**CfgHints**` to wiki format (see [:Category:Arma 3: Field Manual](https://community.bistudio.com/wiki/%3ACategory%3AArma%203%3A%20Field%20Manual)).",
            "examples": [
                {
                    "text": "```sqf\n[] call BIS_fnc_exportCfgHints;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "category",
                            "description": "`String`"
                        },
                        {
                            "name": "class",
                            "description": "`String`"
                        }
                    ],
                    "outline": "[category, class] call `BIS_fnc_exportCfgHints`",
                    "returns": "`String` - wiki content"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_exportCfgHints"
        },
        "configuration": {
            "label": "BIS_fnc_exportCfgHints",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Export list of magazines for {{GameCategory|arma3|Reference Lists",
            "examples": [
                {
                    "text": "```sqf\n[] spawn BIS_fnc_exportCfgMagazines; // exports [[Arma 3: CfgMagazines]]\n```"
                },
                {
                    "text": "```sqf\n[[\"class1\", \"class2\"]] spawn BIS_fnc_exportCfgMagazines;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "classes",
                            "description": "`Array` of `String`s - (Optional, default <sqf inline>[]) list of `CfgPatches` classes"
                        }
                    ],
                    "outline": "[classes] spawn `BIS_fnc_exportCfgMagazines`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_exportCfgMagazines"
        },
        "configuration": {
            "label": "BIS_fnc_exportCfgMagazines",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Export list of addons for Community Wiki - {{GameCategory|arma3|Assets",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_exportCfgPatches;\n```"
                },
                {
                    "text": "```sqf\n\n[\"CfgVehicles\"] call BIS_fnc_exportCfgPatches;\t// exports [[Arma 3: CfgPatches CfgVehicles]]\n[\"CfgWeapons\"]  call BIS_fnc_exportCfgPatches;\t// exports [[Arma 3: CfgPatches CfgWeapons]]\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "config",
                            "description": "`String` - (Optional, default \"CfgVehicles\")"
                        },
                        {
                            "name": "classes",
                            "description": "`Array` of `String`s - list of `**CfgPatches**` classes"
                        }
                    ],
                    "outline": "[config, classes] call `BIS_fnc_exportCfgPatches`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_exportCfgPatches"
        },
        "configuration": {
            "label": "BIS_fnc_exportCfgPatches",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Export list of objects for Community Wiki ([Assets](https://community.bistudio.com/wiki/%3ACategory%3AArma_3%3A_Assets)).",
            "examples": [
                {
                    "text": "```sqf\n[] call BIS_fnc_exportCfgVehicles;\n```"
                },
                {
                    "text": "```sqf\n[\"config\", [3], [\"A3_Characters_F_Beta\",\"A3_Characters_F_EPA\",\"A3_Characters_F_EPB\"], true] call BIS_fnc_exportCfgVehicles;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`String` - mode, can be one of:"
                        },
                        {
                            "name": "sides",
                            "description": "`Array` of `Side`s - only objects of these sides will be used"
                        },
                        {
                            "name": "classes",
                            "description": "`Array`of `String`s- list of CfgPatches classes. Only objects belonging to these addons will be used"
                        },
                        {
                            "name": "useAI",
                            "description": "`Boolean` - true to use only AI units (soldiers, vehicles), false to use empty ones"
                        }
                    ],
                    "outline": "[mode,sides,classes,useAI] call `BIS_fnc_exportCfgVehicles`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_exportCfgVehicles"
        },
        "configuration": {
            "label": "BIS_fnc_exportCfgVehicles",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Copies [CfgVehicles](https://community.bistudio.com/wiki/%3ACategory%3ACfgVehicles) information to clipboard in wiki format.",
            "examples": [
                {
                    "text": "```sqf\n\n[0]   spawn BIS_fnc_exportCfgVehiclesAssetDB;\t// exports {{Link|Arma 3: CfgVehicles EAST}}\n[1]   spawn BIS_fnc_exportCfgVehiclesAssetDB;\t// exports {{Link|Arma 3: CfgVehicles WEST}}\n[2]   spawn BIS_fnc_exportCfgVehiclesAssetDB;\t// exports {{Link|Arma 3: CfgVehicles GUER}}\n[3,0] spawn BIS_fnc_exportCfgVehiclesAssetDB;\t// exports {{Link|Arma 3: CfgVehicles CIV}}\n[3,1] spawn BIS_fnc_exportCfgVehiclesAssetDB;\t// exports {{Link|Arma 3: CfgVehicles Structures}}\n[3,2] spawn BIS_fnc_exportCfgVehiclesAssetDB;\t// exports {{Link|Arma 3: CfgVehicles Ruins & Wrecks}}\n[3,3] spawn BIS_fnc_exportCfgVehiclesAssetDB;\t// exports {{Link|Arma 3: CfgVehicles Equipment}}\n[3,4] spawn BIS_fnc_exportCfgVehiclesAssetDB;\t// exports {{Link|Arma 3: CfgVehicles EMPTY}}\n[3,5] spawn BIS_fnc_exportCfgVehiclesAssetDB;\t// exports {{Link|Arma 3: CfgVehicles VR Objects}}\n[3,6] spawn BIS_fnc_exportCfgVehiclesAssetDB;\t// exports {{Link|Arma 3: CfgVehicles Animals}}\n[]    spawn BIS_fnc_exportCfgVehiclesAssetDB;\t// exports {{Link|Arma 3: CfgVehicles Other}}\n\t\t\t\t\t\t\t\t\t\t\t\t// Unknown, Enemy, Friendly, Modules, Empty, Ambient Life\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "side",
                            "description": "`Array` or `Number`s - (Optional, default <sqf inline>[4,5,6,7,8,9]) `side` selection, can be:"
                        },
                        {
                            "name": "category",
                            "description": "`Number` - (Optional, default 0 if _side_ is a number, always reverts to 1 if _side_ an array) only used when _side_ is set to **3**."
                        }
                    ],
                    "outline": "[side, category] call `BIS_fnc_exportCfgVehiclesAssetDB`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_exportCfgVehiclesAssetDB"
        },
        "configuration": {
            "label": "BIS_fnc_exportCfgVehiclesAssetDB",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Export list of weapons for Community Wiki [Arma 3 Assets Category](https://community.bistudio.com/wiki/%3ACategory%3AArma%203%3A%20Assets).",
            "examples": [
                {
                    "text": "```sqf\n\n[\"Weapon\"]\t\t\tspawn BIS_fnc_exportCfgWeapons;\t// exports [[Arma 3: CfgWeapons Weapons]]\n[\"VehicleWeapon\"]\tspawn BIS_fnc_exportCfgWeapons;\t// exports [[Arma 3: CfgWeapons Vehicle Weapons]]\n[\"Item\"]\t\t\tspawn BIS_fnc_exportCfgWeapons;\t// exports [[Arma 3: CfgWeapons Items]]\n[\"Equipment\"]\t\tspawn BIS_fnc_exportCfgWeapons;\t// exports [[Arma 3: CfgWeapons Equipment]]\n[\"screenshots\"]\t\tspawn BIS_fnc_exportCfgWeapons;\t// screenshots\n[\"screenshotsTest\"]\tspawn BIS_fnc_exportCfgWeapons;\t// screenshots test mode, does nothing\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`String` - can be one of:"
                        },
                        {
                            "name": "patches",
                            "description": "`Array` of `String`s - (Optional, default <sqf inline>[]) list of `CfgPatches` classes. Only weapons belonging to these addons will be used"
                        },
                        {
                            "name": "types",
                            "description": "`Array` of `String`s - (Optional, default <sqf inline>[])"
                        }
                    ],
                    "outline": "[mode, patches, types] spawn `BIS_fnc_exportCfgWeapons`",
                    "returns": "`Boolean` - `true` when done"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_exportCfgWeapons"
        },
        "configuration": {
            "label": "BIS_fnc_exportCfgWeapons",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Export config hierarchy of given config.",
            "examples": [
                {
                    "text": "```sqf\n[configFile >> \"CfgWeapons\"] call BIS_fnc_exportConfigHierarchy;\n```"
                },
                {
                    "text": "```sqf\n[configFile >> \"CfgWeapons\", \"LandVehicle\"] call BIS_fnc_exportConfigHierarchy;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "config",
                            "description": "`Config`"
                        },
                        {
                            "name": "class",
                            "description": "`String` - topmost class"
                        }
                    ],
                    "outline": "[config,class] call `BIS_fnc_exportConfigHierarchy`",
                    "returns": "`String` - exported text in wikitable format"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_exportConfigHierarchy"
        },
        "configuration": {
            "label": "BIS_fnc_exportConfigHierarchy",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tGenerate spreadsheet with object classes and copy it to clipboard.\n\tThe table will generate export code to be used in BIS_fnc_curatorObjectRegisteredTable\n\n\tParameter(s):\n\t\t0 (Optional): ARRAY of STRINGs - supported addons (classes from CfgPatches). When empty, all preloaded addons will be added. Use empty string to export just the cost calculation.\n\t\t1 (Optional): STRING - format, can be \"ods\" or \"xls\"\n\t\t2 (Optional): STRING - name of sheet with cost calculation. When empty, the calculation will be inserted on top of the table\n\t\t3 (Optional): ARRAY of SIDEs or NUMBERs - filter only objects of listed sides or side IDs. Supported sides are west, east, resistance, civilian, sideUnknown and sideLogic\n\t\t4 (Optional): CODE - condition for class to be listed. Config path to the class is passed as an argument (default: {true})\n\t\t5 (Optional): CODE - default cost, must return STRING. When empty string is returned, no default cost will be used (default: {\"\"})\n\n\tReturns:\n\tBOOL\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_exportCuratorCostTable` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_exportCuratorCostTable"
        },
        "configuration": {
            "label": "BIS_fnc_exportCuratorCostTable",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Export screenshots of objects for [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor) and Community Wiki to `**<Arma 3 Profile>\\Screenshots\\EditorPreviews**` directory. See [Arma 3 assets](https://community.bistudio.com/wiki/%3ACategory%3AArma%203%3A%20Assets).\n**NOTE**: \nThe file is saved into _Screenshots_ folder in the `Profile` directory. The folder is by default limited to 250 MB to prevent abuse.\n\nTo increase the limit, add the following line at the end of the profile file:\n```cpp\nmaxScreenShotFolderSizeMB = 2000; // size in MB\n```",
            "examples": [
                {
                    "text": "```sqf\n// All objects\n[] spawn BIS_fnc_exportEditorPreviews;\n```"
                },
                {
                    "text": "```sqf\n// All characters and vehicles. Capturing delay will be 0.5 seconds\n[0.5, \"vehicles\"] spawn BIS_fnc_exportEditorPreviews;\n```"
                },
                {
                    "text": "```sqf\n// BLUFOR characters and vehicles\n[nil, \"vehicles\", [west]] spawn BIS_fnc_exportEditorPreviews;\n```"
                },
                {
                    "text": "```sqf\n// Props in Karts DLC\n[nil, \"props\", [], [\"kart\"]] spawn BIS_fnc_exportEditorPreviews;\n```"
                },
                {
                    "text": "```sqf\n// All objects in specified addons\n[nil, \"all\", [], [], [\"A3_Armor_F_Slammer\", \"A3_Air_F_Heli_Heli_Transport_03\"]] spawn BIS_fnc_exportEditorPreviews;\n```"
                },
                {
                    "text": "```sqf\n// BLUFOR characters and vehicles in Marksmen DLC\n[nil, \"vehicles\", [west], [\"mark\"]] spawn BIS_fnc_exportEditorPreviews;\n```"
                },
                {
                    "text": "```sqf\n// Only the B_Soldier_F\n[nil, \"all\", [], [], [], [\"B_Soldier_F\"]] spawn BIS_fnc_exportEditorPreviews;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "duration",
                            "description": "`Number` - (Optional, default 1) duration in seconds for which an objects remains on the screen before its screen is captured"
                        },
                        {
                            "name": "type",
                            "description": "`String` - (Optional, default \"all\") can be one of:"
                        },
                        {
                            "name": "sides",
                            "description": "`Array` of `Side`s - (Optional, default all sides) list of sides. Only objects of these sides will be used"
                        },
                        {
                            "name": "mods",
                            "description": "`Array` of `String` - (Optional, default all mods) list of CfgMods classes. Only objects belonging to these mods will be used"
                        },
                        {
                            "name": "addons",
                            "description": "`Array` of `String` - (Optional, default all addons) list of CfgPatches classes. Only objects belonging to these addons will be used"
                        },
                        {
                            "name": "classes",
                            "description": "`Array` of `String` - (Optional, default all classes) list of CfgVehicles classes. Only these objects will be used"
                        }
                    ],
                    "outline": "[duration, type, sides, mods, addons, classes] spawn `BIS_fnc_exportEditorPreviews`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_exportEditorPreviews"
        },
        "configuration": {
            "label": "BIS_fnc_exportEditorPreviews",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Export function descriptions to Community Wiki. Exported text will be copied to clipboard in XML format.\n\n**Wiki Admins** can import them using **[Special:Import](https://community.bistudio.com/wiki/Special%3AImport)**.\n\nIf the page already exists, it will be replaced only when _timestamp_ is newer.\n**WARNING**: <div style{{=\"font-weight: bold; padding: 2em; text-align: center\">This function should no longer be used to mass-import functions since the template for function pages has changed drastically!</div>}}",
            "examples": [
                {
                    "text": "```sqf\n[] spawn BIS_fnc_exportFunctionsToWiki; // export all functions\n```"
                },
                {
                    "text": "```sqf\n[[\"\", \"Arrays\"]] spawn BIS_fnc_exportFunctionsToWiki; // export all Array functions\n```"
                },
                {
                    "text": "```sqf\n[[\"\", \"\", [\"BIS_fnc_log\", \"BIS_fnc_param\"]]] spawn BIS_fnc_exportFunctionsToWiki; // export specific functions\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "filter",
                            "description": "`Array` - (Optional, default <sqf inline>[]) functions filter in format [tags, categories, functions]:"
                        },
                        {
                            "name": "timestamp",
                            "description": "`String` - (Optional, default \"2006-04-03T17:42:00Z\") in format \"2013-09-12T16:00:00Z\""
                        }
                    ],
                    "outline": "[filter, timestamp] spawn `BIS_fnc_exportFunctionsToWiki`",
                    "returns": "`String` - exported text"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_exportFunctionsToWiki"
        },
        "configuration": {
            "label": "BIS_fnc_exportFunctionsToWiki",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_exportGroupFormations;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_exportGroupFormations` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_exportGroupFormations"
        },
        "configuration": {
            "label": "BIS_fnc_exportGroupFormations",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Export GUI macros and base classes to the clipboard.\n{{Feature|obsolete|the [[import (Config)|import]] keyword was introduced.|arma3|2.01.146644}}\n**WARNING**: \nThe exported the Eden Editor base classes have several inheritance issues.\nIf you need the base classes you can get them {{Link|https://github.com/LarrowZurb/A3_GUI_Defines|**here**.\n}}",
            "examples": [
                {
                    "text": "```sqf\n\"all\" call BIS_fnc_exportGUIBaseClasses;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`String` - mode, **case-sensitive**; can be one of:"
                        }
                    ],
                    "outline": "mode call `BIS_fnc_exportGUIBaseClasses`",
                    "returns": "`String` - `**.hpp**` file content to be included in [[Description.ext]], also copied to the clipboard"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_exportGUIBaseClasses"
        },
        "configuration": {
            "label": "BIS_fnc_exportGUIBaseClasses",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Exports unit's loadout as a `String`, also [ copies](https://community.bistudio.com/wiki/copyToClipboard%20) it to clipboard.",
            "examples": [
                {
                    "text": "```sqf\n[player, \"init\", true] call BIS_fnc_exportInventory;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - (Optional, default `player`) unit whose loadout should be saved"
                        },
                        {
                            "name": "type",
                            "description": "`String` - (Optional, default \"script\") export type, can be:"
                        },
                        {
                            "name": "includeIdentity",
                            "description": "`Boolean` - (Optional, default `true`) `true` to also export face, voice and insignia (applicable to \"script\" and \"init\" only)"
                        }
                    ],
                    "outline": "[unit, type, includeIdentity] call `BIS_fnc_exportInventory`",
                    "returns": "`String` - [SQF](https://community.bistudio.com/wiki/SQF%20Syntax) code or `Config` text when \"config\" option is chosen"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_exportInventory"
        },
        "configuration": {
            "label": "BIS_fnc_exportInventory",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns terrain height map to BiTXT (Universal Bistudio TXT) format, which can be imported to [Object Builder](https://community.bistudio.com/wiki/Object%20Builder). Output is also [copied to clipboard](https://community.bistudio.com/wiki/copyToClipboard).\n**IMPORTANT**: \nBe wary that **this function is CPU-demanding** and may lock your computer for minutes!",
            "examples": [
                {
                    "text": "```sqf\n[10, 10, 1] call BIS_fnc_exportMapToBiTXT;\n```"
                },
                {
                    "text": "```sqf\ncall BIS_fnc_exportMapToBiTXT;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "resolution",
                            "description": "`Number` - (Optional, default 64) object resolution, i.e, number of points per side"
                        },
                        {
                            "name": "size",
                            "description": "`Number` - (Optional, default 10) object size in metres"
                        },
                        {
                            "name": "zCoeff",
                            "description": "`Number` - (Optional, default 2) vertical coefficient. All Z coordinates will be multiplied by this number to highlight hills and mountains"
                        }
                    ],
                    "outline": "[resolution, size, zCoeff] call `BIS_fnc_exportMapToBiTXT`",
                    "returns": "`String` - height map, same data as in the clipboard"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_exportMapToBiTXT"
        },
        "configuration": {
            "label": "BIS_fnc_exportMapToBiTXT",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Export vehicle settings",
            "examples": [
                {
                    "text": "```sqf\n[BIS_tank,\"\"] call BIS_fnc_exportVehicle;\n\n//Returns \n\"[\n  _this,\n  [\"\"Hex\"\",1], \n  [\"\"showCamonetHull\"\",1,\"\"showCamonetTurret\"\",1]\n] call BIS_fnc_initVehicle;\"\n```"
                },
                {
                    "text": "```sqf\n[BIS_tank] call BIS_fnc_exportVehicle;\n\n//Returns \n\"_veh = createVehicle [\"\"O_MBT_04_cannon_F\"\",position player,[],0,\"\"NONE\"\"];\n[\n  _veh,\n  [\"\"Hex\"\",1], \n  [\"\"showCamonetHull\"\",1,\"\"showCamonetTurret\"\",1]\n] call BIS_fnc_initVehicle;\"\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "vehicleClass",
                            "description": "`String` - use \"\" to skip createVehicle part and set components / textures only"
                        }
                    ],
                    "outline": "[vehicle,vehicleClass] call `BIS_fnc_exportVehicle`",
                    "returns": "`String` - [SQF](https://community.bistudio.com/wiki/SQF%20Syntax) code"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_exportVehicle"
        },
        "configuration": {
            "label": "BIS_fnc_exportVehicle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Easily carry out complex fading. Default values will be used if parameters are not defined or set to nil.",
            "examples": [
                {
                    "text": "```sqf\n[1, \"WHITE\", 5, 1] spawn BIS_fnc_fadeEffect;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "fadeInOrOut",
                            "description": "`Number` - (Optional, default 1) 0 to fade out, 1 to fade in"
                        },
                        {
                            "name": "fadeColor",
                            "description": "`String` - (Optional, default \"BLACK\") **case-sensitive** can be \"BLACK\" or \"WHITE\""
                        },
                        {
                            "name": "duration",
                            "description": "`Number` - (Optional, default 3) fade duration in seconds"
                        },
                        {
                            "name": "blur",
                            "description": "`Number` - (Optional, default 0) 0 to not blur, 1 to blur (blur-in for fade-in, blur-out for fade-out)"
                        },
                        {
                            "name": "music",
                            "description": "`String` - (Optional, default \"\") **only for fade-out** music class name defined in [[Description.ext#CfgMusic|CfgMusic]]"
                        },
                        {
                            "name": "ending",
                            "description": "`String` - (Optional, default \"\") \"\" to not end the mission, else a value compatible with `endMission` or `failMission`. **Will end mission only for the local player**"
                        },
                        {
                            "name": "success",
                            "description": "`Number` - (Optional, default 1) **if _ending_ != \"\"** 1 to end mission with success, 0 to fail mission"
                        }
                    ],
                    "outline": "[fadeInOrOut, blackOrWhite, duration, blur, music, ending, success] spawn `BIS_fnc_fadeEffect`",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_fadeEffect"
        },
        "configuration": {
            "label": "BIS_fnc_fadeEffect",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Effects for high fatigue values. Internal engine use only, as it relies on internal BIS_* variables.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_fatigueEffect;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_fatigueEffect`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_fatigueEffect"
        },
        "configuration": {
            "label": "BIS_fnc_fatigueEffect",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Init function for feedback system. Declaration of variables, eventhandlers, etc. for in-game effects. Engine use only.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_feedbackInit;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_feedbackInit`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_feedbackInit"
        },
        "configuration": {
            "label": "BIS_fnc_feedbackInit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Main feedback `FSM`, used for feedback effects (fatigue, drowning, injury etc.). Internal use only.",
            "examples": [
                {
                    "text": "```sqf\n[] call BIS_fnc_feedbackMain;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_feedbackMain`",
                    "returns": "`Number`? (`execFSM`)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_feedbackMain"
        },
        "configuration": {
            "label": "BIS_fnc_feedbackMain",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Update Firing From Vehicle feature depending on condition defined in turret's config.",
            "examples": [
                {
                    "text": "```sqf\n\nif (local _vehicle) then\n{\n\t_vehicle animate [\"Door_1\", 1];\n\t_vehicle call BIS_fnc_ffvUpdate;\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "vehicle call `BIS_fnc_ffvUpdate`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_ffvUpdate"
        },
        "configuration": {
            "label": "BIS_fnc_ffvUpdate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Removes characters from a string based on the list of allowed characters.",
            "examples": [
                {
                    "text": "```sqf\n[\"Player 1 @%!@$\"] call BIS_fnc_filterString; // returns \"Player1\"\n```"
                },
                {
                    "text": "```sqf\n[\"Player 1\", \"aelrPy\"] call BIS_fnc_filterString; // returns \"Player\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "**text:**",
                            "description": "`String` - text to filter"
                        },
                        {
                            "name": "**allowedChars**",
                            "description": "`String` - (Optional, default a..z, A..Z, 0..9, \"_\") allowed characters"
                        }
                    ],
                    "outline": "[text, allowedChars] call `BIS_fnc_filterString`",
                    "returns": "`String` - filtered text with only the allowed characters supplied in the filter."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_filterString"
        },
        "configuration": {
            "label": "BIS_fnc_filterString",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns array of paths to all matching elements in deeply nested array, similar to `BIS_fnc_findNestedElement` but with all occurences.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _array = [[1, 2, 3], [[1, 2, 3], 1, 2, 3]];\n_result = [_array, 2] call BIS_fnc_findAllNestedElements; // returns [[0, 1], [1, 0, 1], [1, 2]]\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array` - array to explore"
                        },
                        {
                            "name": "query",
                            "description": "`Anything` - wanted item"
                        }
                    ],
                    "outline": "[array, query] call `BIS_fnc_findAllNestedElements`",
                    "returns": "`Array` of `Array` of `Number`s - path to the first occurence of _query_"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_findAllNestedElements"
        },
        "configuration": {
            "label": "BIS_fnc_findAllNestedElements",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns the minimum or maximum value in an array of numbers.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _result = [[1,4,5,8,3,7], 1] call BIS_fnc_findExtreme; // returns 8\n_result = [[1,4,5,8,3,7], 0] call BIS_fnc_findExtreme; // returns 1\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "numbers",
                            "description": "`Array` - a set of numbers"
                        },
                        {
                            "name": "mode",
                            "description": "`Number` - 0 (find minimum) or 1 (find maximum)"
                        }
                    ],
                    "outline": "[numbers, mode] call `BIS_fnc_findExtreme`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_findExtreme"
        },
        "configuration": {
            "label": "BIS_fnc_findExtreme",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Searches the associative array for the first occurance of the key string and returns its index. Seach is not case-sensitive.",
            "examples": [
                {
                    "text": "```sqf\n[[[\"apple\",3],[\"pear\",2]],\"apple\"] call BIS_fnc_findInPairs; // Returns 0\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array` - array to search through"
                        },
                        {
                            "name": "key",
                            "description": "`String` - key to search for"
                        }
                    ],
                    "outline": "[array, key] call `BIS_fnc_findInPairs`",
                    "returns": "`Number` - index of first occurence"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_findInPairs"
        },
        "configuration": {
            "label": "BIS_fnc_findInPairs",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tGiven target location, calculates orientation vectors facing direction\n\n\tParameter(s):\n\t_this select 0: Object \t- The curve\n\n\tReturns:\n\tArray - In format [Dir Vector, Up Vector]\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_findLookAt`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_findLookAt"
        },
        "configuration": {
            "label": "BIS_fnc_findLookAt",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Function to find item in nested arrays and return a path to the first match.\n**Arma**: 3|In some cases `findIf` might be the better way of finding a nested element. It is a lot faster!",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _array = [[1, 2], [3, 4]];\n_path = [_array, 3] call BIS_fnc_findNestedElement; // expected result: [1, 0]\n// ((_array select 1) select 0) == 3\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array` - array to explore"
                        },
                        {
                            "name": "query",
                            "description": "`Anything` - wanted item"
                        }
                    ],
                    "outline": "[array, query] call `BIS_fnc_findNestedElement`",
                    "returns": "`Array` of `Number`s - path to the first occurence of _query_"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_findNestedElement"
        },
        "configuration": {
            "label": "BIS_fnc_findNestedElement",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Selects a position that provides overwatch onto another position.",
            "examples": [
                {
                    "text": "```sqf\n[getPosATL enemyTank, 300, 75, 20, getPosATL player] call BIS_fnc_findOverwatch;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "[Position3D](https://community.bistudio.com/wiki/Position%23Introduction) - **not** an object"
                        },
                        {
                            "name": "maxDistance",
                            "description": "`Number` - (Optional, default 500) maximum distance from target in meters"
                        },
                        {
                            "name": "minDistance",
                            "description": "`Number` - (Optional, default 100) minimum distance from target in meters"
                        },
                        {
                            "name": "minHeightAbove",
                            "description": "`Number` - (Optional, default 50) minimum height in relation to target in meters"
                        },
                        {
                            "name": "searchCentre",
                            "description": "[Position3D](https://community.bistudio.com/wiki/Position%23Introduction) - (Optional, default _target_) position to start looking from, if different from target pos"
                        }
                    ],
                    "outline": "[target, maxDistance, minDistance, minHeightAbove, searchCentre] call `BIS_fnc_findOverwatch`",
                    "returns": "`Position` - _target_ position if no result were found"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_findOverwatch"
        },
        "configuration": {
            "label": "BIS_fnc_findOverwatch",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "This function generates position on a map according to several given parameters (see diagram).\n[[File:bis_fnc_findsafepos.jpg|600px|thumb|Diagram]]\nThe position **pos** will be generated inside an area which resides between **minDist** and **maxDist** from the given **center**. If **objDist** is also specified, the position will be selected **objDist** away from nearest terrain object. If **maxGrad** > 0 then the position will be also checked for how flat the area around is within **objDist** radius. The function can additionally be instructed to generate position specifically on water or land (**waterMode**) or on a shoreline (**shoreMode**). The **shoreLine** param will be ignored if position is not requested specifically on land.\n\n\nAdditionally, generated position could be checked against the list of blacklisted positions **blacklistPos**. If search for suitable position failed, **defaultPos** position will be used. The format for **defaultPos** is array with 2 positions: [posOnLand, posOnWater].",
            "examples": [
                {
                    "text": "Find position minimum 1m from from player but not further than 150m, not closer than 3m to any other object, not in the water, maximum gradient of 20, not on the shoreline:\n\n```sqf\nprivate _pos = [player, 1, 150, 3, 0, 20, 0] call BIS_fnc_findSafePos;\n```"
                },
                {
                    "text": "```sqf\nprivate _pos = [getPos player, 2000, 5000, 1, 0, 0.7, 0, [], [getPos player, getPos player]] call BIS_fnc_findSafePos;\n```"
                },
                {
                    "text": "```sqf\nprivate _pos = [[], 0, 1000] call BIS_fnc_findSafePos;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "center",
                            "description": "(Optional, default <sqf inline>[]) center position. Can be one of: "
                        },
                        {
                            "name": "minDist",
                            "description": "`Number` - (Optional, default 0) minimum distance from the center position"
                        },
                        {
                            "name": "maxDist",
                            "description": "`Number` - (Optional, default -1) maximum distance from the center position. If -1, the world's \"safePositionRadius\" entry will be used"
                        },
                        {
                            "name": "objDist",
                            "description": "`Number` - (Optional, default 0) minimum distance from the resulting position to the center of nearest object. Specifying quite large distance here will slow the function and might often fail to find suitable position. Recommended value: 0..10"
                        },
                        {
                            "name": "waterMode",
                            "description": "`Number` - (Optional, default 0) water mode. Can be one of:"
                        },
                        {
                            "name": "maxGrad",
                            "description": "`Number` - (Optional, default 0) maximum terrain gradient (hill steepness). A quite small non-zero value could result in failure to find suitable position. Recommended: 0.1+"
                        },
                        {
                            "name": "shoreMode",
                            "description": "`Number` - (Optional, default 0) shore mode. Can be one of:"
                        },
                        {
                            "name": "blacklistPos",
                            "description": "`Array` - (Optional, default <sqf inline>[]) list of blacklisted areas in format [area1, area2, area3... areaN]. Can be one of:"
                        },
                        {
                            "name": "defaultPos",
                            "description": "`Array` - (Optional, default <sqf inline>[]) default position when no position is found. Array format is [landPosition, seaPosition], where: "
                        }
                    ],
                    "outline": "[center, minDist, maxDist, objDist, waterMode, maxGrad, shoreMode, blacklistPos, defaultPos] call `BIS_fnc_findSafePos`",
                    "returns": "`Array` - in format [x,y] on success. When position cannot be found at all, default map center position is returned, which will be in format [x,y,0]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_findSafePos"
        },
        "configuration": {
            "label": "BIS_fnc_findSafePos",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Handle repeated curator challenges.\n\tWhen rewards defined in the argument are exceeded, refilling points bar fill be offered instead. Number of challenges can be retrieved by",
            "examples": [
                {
                    "text": "```sqf\n[BIS_curator,[\"DestroyVehicle\",BIS_curator],\"SUCCEEDED\"] call BIS_fnc_finishCuratorChallenge;\n_number = BIS_curator getVariable \"DestroyVehicle\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curator `Object`",
                            "description": "curator"
                        },
                        {
                            "name": "input `Array`",
                            "description": "array in format:"
                        },
                        {
                            "name": "taskState `String`",
                            "description": "task state, can be:"
                        }
                    ],
                    "outline": "[curator,input,taskState]] call `BIS_fnc_finishCuratorChallenge`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_finishCuratorChallenge"
        },
        "configuration": {
            "label": "BIS_fnc_finishCuratorChallenge",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Makes a unit or a vehicle fire given muzzle. Make sure that there is some ammo to fire, and, in case of a unit, the weapon with given muzzle is already selected. It can be used to fire pretty much any muzzle on unit or vehicle from anywhere. Available weapons could usually be found with `weapons`, `weaponsTurret` and `allTurrets` commands.",
            "examples": [
                {
                    "text": "```sqf\n\nmarshall = \"B_APC_Wheeled_01_cannon_F\" createVehicle position player;\ncreateVehicleCrew marshall;\n\n[marshall, \"HE\"] call BIS_fnc_fire; // fires HE muzzle of the main cannon\n[marshall, \"AP\"] call BIS_fnc_fire; // fires AP muzzle of the main cannon\n[marshall, \"autocannon_40mm_CTWS\"] call BIS_fnc_fire; // fires HE muzzle, because it is default\n[marshall, \"LMG_M200_body\"] call BIS_fnc_fire; // fires machine gun\n[marshall, \"SmokeLauncher\"] call BIS_fnc_fire; // fires smoke launcher\n[marshall, \"TruckHorn\"] call BIS_fnc_fire; // beeps the horn\n\n```"
                },
                {
                    "text": "```sqf\n\n[bob, \"SmokeShellMuzzle\"] call BIS_fnc_fire;  // bob throws smoke grenade, if he has one\n[bob, \"HandGrenadeMuzzle\"] call BIS_fnc_fire; // bob throws hand grenade, if he has one\n\n```"
                },
                {
                    "text": "```sqf\n\nblackfoot = \"B_Heli_Attack_01_dynamicLoadout_F\" createVehicle position player;\ncreateVehicleCrew blackfoot;\n\n[blackfoot, \"missiles_DAGR\"]   call BIS_fnc_fire; // fires missiles\n[blackfoot, \"missiles_ASRAAM\"] call BIS_fnc_fire; // fires missiles\n[blackfoot, \"gatling_20mm\"]    call BIS_fnc_fire; // fires machine gun\n[blackfoot, \"CMFlareLauncher\"] call BIS_fnc_fire; // fires chaff\n\n```"
                },
                {
                    "text": "```sqf\n[vehicle mortargunner, \"mortar_82mm\"] call BIS_fnc_fire; // mortargunner fires mortar\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "`Object` - unit or vehicle"
                        },
                        {
                            "name": "muzzle",
                            "description": "`String` -  muzzle name of the muzzle to fire"
                        },
                        {
                            "name": "turret",
                            "description": "`Array` - (Optional) turret path of the turret with given muzzle (vehicles only)"
                        }
                    ],
                    "outline": "[entity, muzzle, turret] call `BIS_fnc_fire`",
                    "returns": "`Boolean` - in SP and on hosted server in MP or `Nothing` on client in MP. When boolean, `true` if all checks have passed and muzzle should have fired, `false` if there was a problem, like:\n* no ammo\n* non-existing muzzle\n* the muzzle is on a weapon that is not selected\n* the weapon has no unit operating it"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_fire"
        },
        "configuration": {
            "label": "BIS_fnc_fire",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Function used inside the IDAP showcase.",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_firedBombDemine;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_firedBombDemine` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_firedBombDemine"
        },
        "configuration": {
            "label": "BIS_fnc_firedBombDemine",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Mortar/artillery fire support.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_Mortar, [3600,3600,0], \"\", 100, 24, 10] spawn BIS_fnc_fireSupport;\n```"
                },
                {
                    "text": "```sqf\n[BIS_Mortar, BIS_Player, \"8Rnd_82mm_Mo_shells\", 100, 24, 10] spawn BIS_fnc_fireSupport;\n```"
                },
                {
                    "text": "```sqf\n[BIS_Mortar, \"BIS_mrkTargetArea\", \"8Rnd_82mm_Mo_shells\", 100, 24, 10, { BIS_Player distance BIS_EscapeZone < 100 }] spawn BIS_fnc_fireSupport;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "arty",
                            "description": "`Object` - artillery unit."
                        },
                        {
                            "name": "target",
                            "description": "`Position` or `Object` or `String` - target position, can be object/position 3D or marker name"
                        },
                        {
                            "name": "mag",
                            "description": "`String` - magazine (if left empy, first magazine available will be used)"
                        },
                        {
                            "name": "radius",
                            "description": "`Number` - radius of target area in meters"
                        },
                        {
                            "name": "rounds",
                            "description": "`Number` - number of rounds to be fired"
                        },
                        {
                            "name": "delay",
                            "description": "`Array` or `Number` - delay between rounds:"
                        },
                        {
                            "name": "conditionEnd",
                            "description": "`Code` - condition to end bombardment before all rounds are fired"
                        },
                        {
                            "name": "safezone",
                            "description": "`Number` - safezone radius - minimal distance from the target position where shells may be directed at"
                        }
                    ],
                    "outline": "[arty,target,mag,radius,rounds,delay,conditionEnd,safezone] spawn `BIS_fnc_fireSupport`",
                    "returns": "`Boolean` - `true` if successful"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_fireSupport"
        },
        "configuration": {
            "label": "BIS_fnc_fireSupport",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Virtual fire support - cluster shell.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_Player, \"G_40mm_HEDP\", 100, [4,10], 10] spawn BIS_fnc_fireSupportCluster;\n```"
                },
                {
                    "text": "```sqf\n[BIS_Victim,\"G_40mm_HEDP\", 100, [5,25], 10, { dayTime > 20 }, 75, 500, 150, [\"shell1\", \"shell2\"]] spawn BIS_fnc_fireSupportCluster;\n```"
                },
                {
                    "text": "```sqf\n[\"BIS_mrkTargetArea\", \"\", 100, [4,10], 10, { BIS_Player distance BIS_EscapeZone < 100 }] spawn BIS_fnc_fireSupportCluster;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Position`, `Object` or `String` - can be position, an object, or a marker"
                        },
                        {
                            "name": "ammo",
                            "description": "`String` - (Optional, default \"G_40mm_HEDP\") ammunition class, `nil` or empty string to use 40mm HEDP shells"
                        },
                        {
                            "name": "radius",
                            "description": "`Number` - (Optional, default 100) radius of the area in metres"
                        },
                        {
                            "name": "rounds",
                            "description": "`Array` - (Optional, default [1,20]) number of rounds to be fired, can be:"
                        },
                        {
                            "name": "delay",
                            "description": "`Array` or `Number` - (Optional, default 10) delay between rounds in seconds, can be `Number` for precise delay or `Array` to set min and max delay"
                        },
                        {
                            "name": "conditionEnd",
                            "description": "`Code` - (Optional, default {}) condition to end fire support"
                        },
                        {
                            "name": "safeZone",
                            "description": "`Number` - (Optional, default 0) safezone radius in metres"
                        },
                        {
                            "name": "altitude",
                            "description": "`Number` - (Optional, default 100) altitude in metres where the submunition will be spawned"
                        },
                        {
                            "name": "velocity",
                            "description": "`Number` - (Optional, default 100) descending velocity, in m/s"
                        },
                        {
                            "name": "sounds",
                            "description": "`Array` - (Optional, default [\"\"]) strings of sounds to be played on the incoming submunition"
                        }
                    ],
                    "outline": "[position,ammo,radius,rounds,delay,conditionEnd,safezone,altitude,velocity,sounds] spawn `BIS_fnc_fireSupportCluster`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_fireSupportCluster"
        },
        "configuration": {
            "label": "BIS_fnc_fireSupportCluster",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Fires virtual mortar/artillery fire support.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_Player, \"Sh_82mm_AMOS\", 100, 24, 10] spawn BIS_fnc_fireSupportVirtual;\n```"
                },
                {
                    "text": "```sqf\n[[3600, 3600, 0], nil, 100, 24, 10] spawn BIS_fnc_fireSupportVirtual;\n```"
                },
                {
                    "text": "```sqf\n[BIS_Player, nil, 100, 24, 10, {dayTime > 20}, 50] spawn BIS_fnc_fireSupportVirtual;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Position`, `Object` or `String` - target position, can be object, position or marker name"
                        },
                        {
                            "name": "ammo",
                            "description": "`String` - (Optional, default \"Sh_82mm_AMOS\") ammunition to be used (if left empty, `**Sh_82mm_AMOS**` ammunition will be used)"
                        },
                        {
                            "name": "radius",
                            "description": "`Number` - (Optional, default 100) radius of target area in meters"
                        },
                        {
                            "name": "rounds",
                            "description": "`Number` - (Optional, default 10) number of rounds to be fired"
                        },
                        {
                            "name": "delay",
                            "description": "`Array` or `Number` - (Optional, default 10) delay between rounds"
                        },
                        {
                            "name": "conditionEnd",
                            "description": "`Code` - (Optional, default <sqf inline>{ false }) condition to end bombardment before all rounds are fired"
                        },
                        {
                            "name": "safezone",
                            "description": "`Number` - (Optional, default 0) safezone radius - minimal distance from the target position where shells may be directed at"
                        },
                        {
                            "name": "alt",
                            "description": "`Number` - (Optional, default 250) altitude where the shell will be created"
                        },
                        {
                            "name": "speed",
                            "description": "`Number` - (Optional, default 150) descending velocity, in m/s. Default is 150, if you use flare as ammo, set it to lower value (1-5) to let it fall down slowly"
                        },
                        {
                            "name": "sounds",
                            "description": "`Array` of `String`s - (Optional, default [\"\"]) sounds to be played on the incoming shell"
                        }
                    ],
                    "outline": "[target, ammo, radius, rounds, delay, conditionEnd, safezone, alt, speed, sounds] spawn `BIS_fnc_fireSupportVirtual`",
                    "returns": "`Boolean` - `true` if successful"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_fireSupportVirtual"
        },
        "configuration": {
            "label": "BIS_fnc_fireSupportVirtual",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Checks the array with date data and makes sure the values are within the boundries.",
            "examples": [
                {
                    "text": "```sqf\nprivate _fixedDate = [2033, -2, 89, 25, 75] call BIS_fnc_fixDate;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "date",
                            "description": "`Array` format `Date` - date to be checked"
                        }
                    ],
                    "outline": "date call `BIS_fnc_fixDate`",
                    "returns": "`Array` format `Date` - resulting date"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_fixDate"
        },
        "configuration": {
            "label": "BIS_fnc_fixDate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Flames (texture) postprocess.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_flamesEffect;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_flamesEffect`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_flamesEffect"
        },
        "configuration": {
            "label": "BIS_fnc_flamesEffect",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Spawns flies around position.",
            "examples": [
                {
                    "text": "```sqf\nprivate _flies = [position deadBody, 0.05, 1.5] call BIS_fnc_flies;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Array` (in format `position`)"
                        },
                        {
                            "name": "interval _(Optional)_",
                            "description": "`Number` - particle refresh time (default is 0.1)"
                        },
                        {
                            "name": "areaSize _(Optional)_",
                            "description": "`Number` - area radius (default is 1)"
                        }
                    ],
                    "outline": "[position, _interval_, _areaSize_] call `BIS_fnc_flies`",
                    "returns": "`Array` - list of particle source objects"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_flies"
        },
        "configuration": {
            "label": "BIS_fnc_flies",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Force curator interface, so user cannot exit it by pressing Zeus key.",
            "examples": [
                {
                    "text": "```sqf\n[true, true] call BIS_fnc_forceCuratorInterface;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`Boolean` - `true` to force"
                        },
                        {
                            "name": "waitUntil",
                            "description": "`Boolean` - (Optional, default `false`) - `true` to keep trying until the interface is actually opened"
                        }
                    ],
                    "outline": "[mode, waitUntil] call `BIS_fnc_forceCuratorInterface`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_forceCuratorInterface"
        },
        "configuration": {
            "label": "BIS_fnc_forceCuratorInterface",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_forceEnd;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_forceEnd` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_forceEnd"
        },
        "configuration": {
            "label": "BIS_fnc_forceEnd",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Format the list of objects compatible with curator challenge to be displayed in the task descriptipon.",
            "examples": [
                {
                    "text": "```sqf\n[\"class_1\",\"class_2\"] call BIS_fnc_formatCuratorChallengeObjects;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "classes",
                            "description": "`Array` of `String`s - CfgVehicle classes"
                        }
                    ],
                    "outline": "classes call `BIS_fnc_formatCuratorChallengeObjects`",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_formatCuratorChallengeObjects"
        },
        "configuration": {
            "label": "BIS_fnc_formatCuratorChallengeObjects",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Function to measure FPS. Spawns code running for given time and displays result on screen _via_ `titleText`, `globalChat` **and** `diag_log`.\nVariable **BIS_fps_output** is filled with `diag_log` content too.",
            "examples": [
                {
                    "text": "```sqf\nprivate _scriptHandle = [10, \"50 units on screen\", 3] call BIS_fnc_fps;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "duration",
                            "description": "`Number` - the FPS test duration"
                        },
                        {
                            "name": "sceneId",
                            "description": "`String` - (Optional, default \"\") scene ID, used in outputs. Fills global variable **currentScene**"
                        },
                        {
                            "name": "startDelay",
                            "description": "`Number` - (Optional, default 0) delay before starting measurement"
                        }
                    ],
                    "outline": "[duration, sceneId, startDelay] call `BIS_fnc_fps`",
                    "returns": "[Script Handle](https://community.bistudio.com/wiki/Script%20Handle)"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_fps"
        },
        "configuration": {
            "label": "BIS_fnc_fps",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns sides allied to the given side / object.",
            "examples": [
                {
                    "text": "```sqf\nplayer call BIS_fnc_friendlySides; // -can- return [FRIENDLY,WEST,GUER,CIV]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "toCheck",
                            "description": "`Side` or `Object`: Side or object whose friendly sides should be returned"
                        }
                    ],
                    "outline": "toCheck call `BIS_fnc_friendlySides`",
                    "returns": "`Array` of `Side`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_friendlySides"
        },
        "configuration": {
            "label": "BIS_fnc_friendlySides",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**FTL** (**F**riendly **T**o **L**ocal) manager tracks relationship between player and civilian side.\n\n**FTL State** can be one of the following: \"LOW\", \"NEUTRAL\", \"HIGH\". See [FriendlyToLocal System](https://community.bistudio.com/wiki/FriendlyToLocal%20System).",
            "examples": [
                {
                    "text": "```sqf\n[\"Init\"] call BIS_fnc_FTLmanager;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "functionCalled",
                            "description": "`String` - one of the following:"
                        },
                        {
                            "name": "type",
                            "description": "`String` - can be one of the following:"
                        }
                    ],
                    "outline": "[functionCalled, type] call `BIS_fnc_FTLmanager`",
                    "returns": "`Boolean` - `false` if the manager is not initialised yet"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_FTLmanager"
        },
        "configuration": {
            "label": "BIS_fnc_FTLmanager",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns function's meta data.",
            "examples": [
                {
                    "text": "```sqf\n// returns [\"A3\\functions_f\\Debug\\fn_functionMeta.sqf\", \".sqf\", 0, false, false, false, \"A3\", \"Debug\", \"functionMeta\"]\n\"BIS_fnc_functionMeta\" call BIS_fnc_functionMeta;\n```"
                },
                {
                    "text": "```sqf\n// returns [\"\", \"\", 0, false, false, false, \"\", \"\", \"\"]\n\"unknownFunction\" call BIS_fnc_functionMeta;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "functionName",
                            "description": "`String` - (Optional, default parent function's name) function name, e.g., \"`BIS_fnc_stalk`\""
                        }
                    ],
                    "outline": "functionName call `BIS_fnc_functionMeta`",
                    "returns": "`Array` to format [fileLocation, extension, headerType, preInit, postInit, recompile, game, category, name]:\n* fileLocation: `String`\n* extension: `String` - to format \".extension\", e.g \".sqf\", \".fsm\"\n* headerType: `Number` - one of:\n** 0: No Debug - header saves parent script name and current script name into variables\n** 1: Save script Map - header additionaly save an array of all parent scripts into variable\n** 2: Save and log script map - apart from saving into variable, script map is also logged through debugLog\n* preInit: `Boolean`\n* postInit: `Boolean`\n* recompile: `Boolean`\n* game: `String`\n* category: `String`\n* name: `String` - simple name, without TAG_fnc"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_functionMeta"
        },
        "configuration": {
            "label": "BIS_fnc_functionMeta",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns path to function file.",
            "examples": [
                {
                    "text": "```sqf\nprivate _path = \"BIS_fnc_wpLand\" call BIS_fnc_functionPath;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "functionName",
                            "description": "`String` - function name (if not defined, name of parent function is used)"
                        }
                    ],
                    "outline": "functionName call `BIS_fnc_functionPath`",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_functionPath"
        },
        "configuration": {
            "label": "BIS_fnc_functionPath",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Changes debug mode used when compiling functions from the [Arma 3: Functions Library](https://community.bistudio.com/wiki/Arma%203%3A%20Functions%20Library). Also recompiles all functions. See [Arma 3: Functions Library](https://community.bistudio.com/wiki/Arma%203%3A%20Functions%20Library) for more information.",
            "examples": [
                {
                    "text": "```sqf\n2 call BIS_fnc_functionsDebug;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`Number` - debug mode, can be:"
                        }
                    ],
                    "outline": "mode call `BIS_fnc_functionsDebug`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_functionsDebug"
        },
        "configuration": {
            "label": "BIS_fnc_functionsDebug",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Splendid&trade; Virtual Arsenal Garage.",
            "examples": [
                {
                    "text": "```sqf\n[] call BIS_fnc_garage;\n```"
                },
                {
                    "text": "```sqf\n\nplayer addAction [\"Open Garage\", {\n\n \t// create a position 30 meters infront of the player\n\t_pos = player getPos [30,getDir player];\n\n\t// create empty helipad at the position and save it in the global variable BIS_fnc_garage_center\n\tBIS_fnc_garage_center = createVehicle [\"Land_HelipadEmpty_F\", _pos, [], 0, \"CAN_COLLIDE\"];\n\n\t[\"Open\", true] call BIS_fnc_garage;\n}];\n\n```"
                },
                {
                    "text": "```sqf\n\nplayer addAction [\"Open Garage\", {\n\n \t// create a position 30 meters infront of the player\n\t_pos = player getPos [30, getDir player];\n\n\t// create empty helipad at the position\n\t_vehicle = createVehicle [\"Land_HelipadEmpty_F\", _pos, [], 0, \"CAN_COLLIDE\"];\n\n\t// pass created vehicle to function for use as position\n\t[\"Open\", [true, _vehicle]] call BIS_fnc_garage;\n}];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`String` - (Optional, default \"Open\") **case-sensitive**. Can be \"Open\"; other cases are for internal use"
                        },
                        {
                            "name": "params",
                            "description": "`Anything` - (Optional, default <sqf inline>[]) depending on _mode_, can be:"
                        }
                    ],
                    "outline": "[mode, params] call `BIS_fnc_garage`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_garage"
        },
        "configuration": {
            "label": "BIS_fnc_garage",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "The code is identical to the one of `BIS_fnc_garage`, except that `**FNC_IS3DEN}} is set to 1. For more information about the garage, visit `BIS_fnc_garage` {{Feature|important|This function is used internally by the [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor).**`",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_garage3DEN"
        },
        "configuration": {
            "label": "BIS_fnc_garage3DEN",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Sends an entity to the garbage collection queue. Replaces [Arma 2 Garbage Collector](https://community.bistudio.com/wiki/Arma_2%3A_Garbage_Collector).",
            "examples": [
                {
                    "text": "```sqf\n[dude1] spawn BIS_fnc_GC;\n```"
                },
                {
                    "text": "```sqf\n[dude1, group dude1, \"marker1\"] spawn BIS_fnc_GC;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "entity",
                            "description": "`Object` or `Group` or `String` (marker) or `Array` (array of entities)"
                        }
                    ],
                    "outline": "entity spawn `BIS_fnc_GC`",
                    "returns": "`Boolean` - true if function was executed successfuly"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_GC"
        },
        "configuration": {
            "label": "BIS_fnc_GC",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Initializes Garbage Collection.",
            "examples": [
                {
                    "text": "```sqf\n[] call BIS_fnc_GCinit;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "[] call `BIS_fnc_GCinit`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_GCinit"
        },
        "configuration": {
            "label": "BIS_fnc_GCinit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Play generic sentence with probablity set by bis_genericSentenceMode variable (0.5 = 50%, 1 = 100%)",
            "examples": [
                {
                    "text": "```sqf\n[\"FeedbackFlightNegativeHeightTooHigh\"] call BIS_fnc_genericSentence;\n```"
                },
                {
                    "text": "```sqf\n[\"FeedbackFlightNegativeSpeedTooSlow\",nil,5,true] call BIS_fnc_genericSentence;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "class",
                            "description": "`String` - sentence name (from _class RadioProtocol_EN_H_)"
                        },
                        {
                            "name": "speaker",
                            "description": "`Object` or `Code` - (Optional) sentence speaker (when code, speaker is it is returned value). Default is 2nd `crew` member."
                        },
                        {
                            "name": "delay",
                            "description": "`Number` - (Optional) delay from previous generic sentence: When negative, sentence is played always."
                        },
                        {
                            "name": "canRepeat",
                            "description": "`Boolean` - (Optional) true to allow repeating same sentence"
                        }
                    ],
                    "outline": "[class, speaker, delay, canRepeat] call `BIS_fnc_genericSentence`",
                    "returns": "`Boolean` - true if sentence was played"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_genericSentence"
        },
        "configuration": {
            "label": "BIS_fnc_genericSentence",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_genericSentenceInit;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_genericSentenceInit` -->"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_genericSentenceInit"
        },
        "configuration": {
            "label": "BIS_fnc_genericSentenceInit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns the {{Link|https://en.wikipedia.org/wiki/Geometric_mean|geometric mean}} of an array of numbers.",
            "examples": [
                {
                    "text": "```sqf\n[0,1,3] call BIS_fnc_geometricMean;//Returns 1.73205\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array` - array of numbers."
                        }
                    ],
                    "outline": "array call `BIS_fnc_geometricMean`",
                    "returns": "`Number` - geometric mean"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_geometricMean"
        },
        "configuration": {
            "label": "BIS_fnc_geometricMean",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns the smallest difference between two angles in degrees.",
            "examples": [
                {
                    "text": "```sqf\nprivate _delta = [90,193] call BIS_fnc_getAngleDelta;//-103\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "angleA",
                            "description": "`Number` - first angle"
                        },
                        {
                            "name": "angleB",
                            "description": "`Number` - second angle"
                        }
                    ],
                    "outline": "[angleA, angleB] call `BIS_fnc_getAngleDelta`",
                    "returns": "`Number` - angle delta"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getAngleDelta"
        },
        "configuration": {
            "label": "BIS_fnc_getAngleDelta",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Extracts area information from trigger, marker, location or array",
            "examples": [
                {
                    "text": "```sqf\nprivate _area = [player, 100] call BIS_fnc_getArea;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "param",
                            "description": "* `Object` - trigger"
                        }
                    ],
                    "outline": "param call `BIS_fnc_getArea`",
                    "returns": "`Array` - in format [center, a, b, angle, isRectangle, height]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getArea"
        },
        "configuration": {
            "label": "BIS_fnc_getArea",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Retrieves marker names used in the border restrictions module.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_getBorderMarkers;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_getBorderMarkers`",
                    "returns": "`Array` of `String`s - list of markers"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getBorderMarkers"
        },
        "configuration": {
            "label": "BIS_fnc_getBorderMarkers",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Smart-return config (extension for BIS_fnc_getCfgXXXX functions).\nCan by called 2 ways:\n* 1st way - passing config directly\n* 2nd way - passing array of strings or config and strings",
            "examples": [
                {
                    "text": "```sqf\n( configFile >> \"BulletBubbles\" >> \"BulletBubbles1\" ) call BIS_fnc_getCfg;\n```"
                },
                {
                    "text": "```sqf\n[configFile >> \"BulletBubbles\" >> \"BulletBubbles1\"] call BIS_fnc_getCfg;\n```"
                },
                {
                    "text": "```sqf\n[configFile, \"BulletBubbles\", \"BulletBubbles1\"] call BIS_fnc_getCfg;\n```"
                },
                {
                    "text": "```sqf\n[\"Hubs\", \"A1\", \"QuickStart\", \"trigger\"] call BIS_fnc_getCfg;\n```"
                },
                {
                    "text": "```sqf\n[\"Hubs\"] call BIS_fnc_getCfg;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "input",
                            "description": "`Config` or `Array` - can be `Config` path or array of strings with config names"
                        }
                    ],
                    "outline": "input call `BIS_fnc_getCfg`",
                    "returns": "`Config`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getCfg"
        },
        "configuration": {
            "label": "BIS_fnc_getCfg",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Smart-return number, text or array value from config.\n* Default syntax works for any config.\n* Alternative syntax is for working comfortably with [[Description.ext]].",
            "examples": [
                {
                    "text": "```sqf\nprivate _value = (configFile >> \"BulletBubbles\" >> \"BulletBubbles1\" >> \"type\") call BIS_fnc_getCfgData;\n```"
                },
                {
                    "text": "```sqf\nprivate _value = (missionConfigFile >> \"Hubs\" >> \"A1\" >> \"QuickStart\" >> \"trigger\") call BIS_fnc_getCfgData;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "config",
                            "description": "`Config` - `Config` path"
                        },
                        {
                            "name": "`Array` of `String`s",
                            "description": "`missionConfigFile` classes and an attribute"
                        }
                    ],
                    "outline": "array call `BIS_fnc_getCfgData`",
                    "returns": "`Array`, `String`, `Number` or `nil`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getCfgData"
        },
        "configuration": {
            "label": "BIS_fnc_getCfgData",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Gets an array defined in Config. If the value is not an array, it is retyped into one.\n\n- Default syntax works for any config.\n\n- Alternative syntax is for comfortable working with mission [[Description.ext|description.ext]].",
            "examples": [
                {
                    "text": "```sqf\nprivate _array = (missionConfigFile >> \"Characters\" >> \"Default\" >> \"equipAdjust\") call BIS_fnc_getCfgDataArray;\n```"
                },
                {
                    "text": "```sqf\nprivate _array = [\"Characters\",\"Default\",\"equipAdjust\"] call BIS_fnc_getCfgDataArray;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "config",
                            "description": "`Config` - `Config` path"
                        },
                        {
                            "name": "`Array` of `String`s",
                            "description": "`missionConfigFile` classes and an attribute"
                        }
                    ],
                    "outline": "array call `BIS_fnc_getCfgDataArray`",
                    "returns": "`Array` or `nil`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getCfgDataArray"
        },
        "configuration": {
            "label": "BIS_fnc_getCfgDataArray",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Gets a number defined in config and retype it into a boolean. Everything greater than 0 is `true`, otherwise it is `false`.\n* Default syntax works for any config\n* Alternative syntax is for comfortable working with mission's [[Description.ext]].",
            "examples": [
                {
                    "text": "```sqf\nprivate _value = (missionConfigFile >> \"Characters\" >> \"Default\" >> \"equipAdjust\") call BIS_fnc_getCfgDataBool;\n```"
                },
                {
                    "text": "```sqf\nprivate _value = [\"Characters\", \"Default\", \"equipAdjust\"] call BIS_fnc_getCfgDataBool;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "config",
                            "description": "`Config` - `Config` path"
                        },
                        {
                            "name": "`Array` of `String`s",
                            "description": "`missionConfigFile` classes and an attribute"
                        }
                    ],
                    "outline": "array call `BIS_fnc_getCfgDataBool`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getCfgDataBool"
        },
        "configuration": {
            "label": "BIS_fnc_getCfgDataBool",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tGet the object defined in cfg by its name (global variable).\n\n\tRemark(s):\n\t* Can by called 2 ways:\n\t\t* 1st way (general) works for any config.\n\t\t* 2nd way is for comfortable working with mission description.ext.\n\n\tParameter(s):\n\t\t_this: CFG\n\t\t_this: ARRAY of STRINGS - missionConfigFile classes and an attribute.\n\n\tExample:\n\n\t* 1st way of calling:\n\n\t\t_value = (missionconfigfile >> \"Hubs\" >> \"A1\" >> \"QuickStart\" >> \"trigger\") call BIS_fnc_getCfgDataObject;\n\n\t* 2nd way of calling:\n\n\t\t_value = [\"Hubs\",\"A1\",\"QuickStart\",\"trigger\"] call BIS_fnc_getCfgDataObject;\n\n\tReturns:\n\t\tOBJECT or OBJNULL\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_getCfgDataObject;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_getCfgDataObject` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getCfgDataObject"
        },
        "configuration": {
            "label": "BIS_fnc_getCfgDataObject",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\t* Get array of attribute values out of the parent config class.\n\t* Attributes need to be in this format: \"_n\", where n is an index number (starting from 0).\n\t* If any discrepancy in indexing is detected, loading will stop and only the correctly indexed values will be returned.\n\t* Max. index supported is 99.\n\t* If more then 9 attributes used, 0-9 need to use leading zeroes.\n\n\tCFG example:\n\n\tclass Timeline\n\t{\n\t\tclass StageA\n\t\t{\n\t\t\t_0[] = {2035,7,7,04,30};\n\t\t\t_1[] = {2035,7,7,06,15};\n\t\t\t_2[] = {2035,7,7,18,35};\n\t\t\t_3[] = {2035,7,8,09,05};\n\t\t\t_4[] = {2035,7,8,13,25};\n\t\t\t_5[] = {2035,7,8,17,10};\n\t\t\t_6[] = {2035,7,8,21,40};\n\t\t\t_7[] = {2035,7,9,19,55};\n\t\t};\n\t};\n\n\tRemark(s):\n\t* Can by called 2 ways:\n\t\t* 1st way (general) works for any config.\n\t\t* 2nd way is for comfortable working with mission description.ext.\n\n\tParameter(s):\n\t\t_this: CFG\n\t\t_this: ARRAY of STRINGS - missionConfigFile classes.\n\n\tExample:\n\n\t* 1st way of calling:\n\n\t\t_array = (configfile >> \"BulletBubbles\" >> \"BulletBubbles1\") call BIS_fnc_getCfgData;\n\t\t_array = (missionconfigfile >> \"Timeline\" >> \"StageA\") call BIS_fnc_getCfgData;\n\n\t* 2nd way of calling:\n\n\t\t_array = [\"Timeline\",\"StageA\"] call BIS_fnc_getCfgData;\n\n\tReturns:\n\t\tARRAY or nil, if parent class is not found\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_getCfgDataPool;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_getCfgDataPool` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getCfgDataPool"
        },
        "configuration": {
            "label": "BIS_fnc_getCfgDataPool",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return true if it is a class. Can by called in two ways:\n* first way (general) works for any config\n* second way is for comfortable working with mission description.ext",
            "examples": [
                {
                    "text": "```sqf\nprivate _isClass = (missionConfigFile >> \"Hubs\" >> \"A1\" >> \"QuickStart\") call BIS_fnc_getCfgIsClass;\n```"
                },
                {
                    "text": "```sqf\nprivate _isClass = [\"Hubs\"] call BIS_fnc_getCfgIsClass;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "configEntry",
                            "description": "`Config`"
                        },
                        {
                            "name": "classNames",
                            "description": "`Array` of `String` - `missionConfigFile` classes and an attribute"
                        }
                    ],
                    "outline": "classNames call `BIS_fnc_getCfgIsClass`",
                    "returns": "`Boolean` - `true` if it is a class"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getCfgIsClass"
        },
        "configuration": {
            "label": "BIS_fnc_getCfgIsClass",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tReturn all child classes of given class.\n\n\tRemark(s):\n\t* Can by called 2 ways:\n\t\t* 1st way (general) works for any config.\n\t\t* 2nd way is for comfortable working with mission description.ext.\n\n\tParameter(s):\n\t\t_this: CFG\n\t\t_this: ARRAY of STRINGS - missionConfigFile classes and an attribute.\n\n\tExample:\n\n\t* 1st way of calling:\n\n\t\t_subclasses = (missionconfigfile >> \"Hubs\" >> \"A1\" >> \"QuickStart\") call Bis_fnc_getCfgSubClasses;\n\n\t* 2nd way of calling:\n\n\t\t_subclasses = [\"Hubs\"] call Bis_fnc_getCfgSubClasses;\n\n\tReturns:\n\t\tARRAY (of STRINGS with sub-classes names)\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "```sqf\nprivate _allVehHitPoints = (configfile >> \"CfgVehicles\" >> \"C_Hatchback_01_sport_F\" >> \"HitPoints\") call BIS_fnc_getCfgSubClasses;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_getCfgSubClasses`; -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getCfgSubClasses"
        },
        "configuration": {
            "label": "BIS_fnc_getCfgSubClasses",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return particle params of CfgCloudlets class.",
            "examples": [
                {
                    "text": "```sqf\n[\"AmmoLightSmokeParticles\"] call BIS_fnc_getCloudletParams;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "cfgCloudletClass",
                            "description": "`String` - wanted class in cfgCloudlets"
                        }
                    ],
                    "outline": "[cfgCloudletClass] call `BIS_fnc_getCloudletParams`",
                    "returns": "`Array` - format [<nowiki/>`setParticleParams`, `setParticleRandom`, `setDropInterval`]\n\n<spoiler text=\"Show format\">\n [\n \t[\n \t\t[particleShape, particleFSNtieth, particleFSIndex, particleFSFrameCount, particleFSLoop],\n \t\tanimationName,\n \t\tparticleType,\n \t\ttimerPeriod,\n \t\tlifeTime,\n \t\tposition,\n \t\tmoveVelocity,\n \t\trotationVelocity,\n \t\tweight,\n \t\tvolume,\n \t\trubbing,\n \t\tsize,\n \t\tcolor,\n \t\tanimationSpeed,\n \t\trandomDirectionPeriod,\n \t\trandomDirectionIntensity,\n \t\tonTimerScript,\n \t\tbeforeDestroyScript,\n \t\t\"\",\n \t\tangle,\n \t\tonSurface,\n \t\tbounceOnSurface,\n \t\temissiveColor\n \t],\n \t[\n \t\tlifeTimeVar,\n \t\tpositionVar,\n \t\tmoveVelocityVar,\n \t\trotationVelocityVar,\n \t\tsizeVar,\n \t\tcolorVar,\n \t\trandomDirectionPeriodVar,\n \t\trandomDirectionIntensityVar,\n \t\tangleVar,\n \t\tbounceOnSurfaceVar\n \t],\n \tinterval\n]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getCloudletParams"
        },
        "configuration": {
            "label": "BIS_fnc_getCloudletParams",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Gets list and sides of current factions.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_getFactions; // returns all factions\n```"
                },
                {
                    "text": "```sqf\n[] call BIS_fnc_getFactions; // same as Example 1\n```"
                },
                {
                    "text": "```sqf\n[player] call BIS_fnc_getFactions; // returns index of player's faction\n```"
                },
                {
                    "text": "```sqf\n[\"BLU_F\"] call BIS_fnc_getFactions; // returns index of given faction\n```"
                },
                {
                    "text": "```sqf\n[[]] call BIS_fnc_getFactions; // will return all faction sides\n```"
                },
                {
                    "text": "```sqf\n[[player]] call BIS_fnc_getFactions; // will return player's side\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "parameter",
                            "description": "* `Nothing` or empty `Array` - returns all factions"
                        }
                    ],
                    "outline": "[parameter] call `BIS_fnc_getFactions`",
                    "returns": "* `Array` of `String`s\n* `Array` of `Side`s\n* `Number` - an index"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getFactions"
        },
        "configuration": {
            "label": "BIS_fnc_getFactions",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Searches the associative array for the 1st occurance of the key string and returns the value associated with it. Search is not case sensitiv.",
            "examples": [
                {
                    "text": "```sqf\n[[[\"apple\",3],[\"pear\",\"test\"]],\"pear\"] call BIS_fnc_getFromPairs; // Returns \"test\"\n```"
                },
                {
                    "text": "```sqf\n[[[\"apple\",3],[\"pear\",6]],\"pear\"] call BIS_fnc_getFromPairs; // Returns \"6\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array` - array to search through"
                        },
                        {
                            "name": "key",
                            "description": "`String` - key to search for"
                        },
                        {
                            "name": "defaultValue",
                            "description": "`Anything` - (Optional, default `nil`) default return value if no match was found"
                        }
                    ],
                    "outline": "[array, key, defaultValue] call `BIS_fnc_getFromPairs`",
                    "returns": "`Anything` - value associated with the key."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getFromPairs"
        },
        "configuration": {
            "label": "BIS_fnc_getFromPairs",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns IDD of given display.",
            "examples": [
                {
                    "text": "```sqf\nprivate _IDC = [configFile >> \"Display3DENPlace\", \"ButtonCancel\"] call BIS_fnc_getIDC;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "config",
                            "description": "`Config` - config path to display"
                        },
                        {
                            "name": "ctrlName",
                            "description": "`String` - config name of [control](https://community.bistudio.com/wiki/Control)"
                        }
                    ],
                    "outline": "[config, ctrlName] call `BIS_fnc_getIDC`",
                    "returns": "`Number` - IDC, returns -1 if control was not found"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getIDC"
        },
        "configuration": {
            "label": "BIS_fnc_getIDC",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns IDD of given display.",
            "examples": [
                {
                    "text": "```sqf\nprivate _IDD = [configFile >> \"display3DENPublishMissionSelectImage\"] call BIS_fnc_getIDD;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "config",
                            "description": "`Config` - config path to display"
                        }
                    ],
                    "outline": "[config] call `BIS_fnc_getIDD`",
                    "returns": "`Number` - IDD"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getIDD"
        },
        "configuration": {
            "label": "BIS_fnc_getIDD",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns intersections under cursor. For more information see `lineIntersectsSurfaces`.",
            "examples": [
                {
                    "text": "```sqf\n[0.5, 0.5, player, objNull, true, \"VIEW\"] call BIS_fnc_getIntersectionsUnderCursor;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "screenX",
                            "description": "`Number` - (Optional, default 0) cursor's X position - see `screenToWorld`"
                        },
                        {
                            "name": "screenY",
                            "description": "`Number` - (Optional, default 0) cursor's Y position - see `screenToWorld`"
                        },
                        {
                            "name": "ignoreObj1",
                            "description": "`Object` - (Optional, default `objNull`) first object to ignore"
                        },
                        {
                            "name": "ignoreObj2",
                            "description": "`Object` - (Optional, default `objNull`) second object to ignore"
                        },
                        {
                            "name": "sortMode",
                            "description": "`Boolean` - (Optional, default `true`) `true`: closest to furthest, `false`: furthest to closest"
                        },
                        {
                            "name": "maxResults",
                            "description": "`Number` - (Optional, default 1) max results to return. -1 to return every result"
                        },
                        {
                            "name": "LOD1",
                            "description": "`String` - (Optional, default \"VIEW\") primary `LOD` to look for intersection. Can be one of:"
                        },
                        {
                            "name": "LOD2",
                            "description": "`String` - (Optional, default \"FIRE\") secondary `LOD` to look for intersection. See _LOD1_ for possible values"
                        }
                    ],
                    "outline": "[screenX, screenY, ignoreObj1, ignoreObj2, sortMode, maxResults, LOD1, LOD2] call `BIS_fnc_getIntersectionsUnderCursor`",
                    "returns": "`Array` of intersections in format [<nowiki/>[intersectPosASL, surfaceNormal, intersectObj, parentObject, selectionNames, pathToBisurf], ...] where:\n* intersectPosASL: `PositionASL` - the actual position where line intersects surface\n* `surfaceNormal`: `Vector` - a normal to the intersected surface \n* intersectObject: `Object` - the object the surface belongs to (could be proxy object) - `objNull` if terrain\n* parentObject: `Object` - the object proxy object belongs to (not always the same as intersect object) - `objNull` if terrain\n* {{GVI|arma3|2.10"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getIntersectionsUnderCursor"
        },
        "configuration": {
            "label": "BIS_fnc_getIntersectionsUnderCursor",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return the distance between two sections of a virtual straight line.\n\n\n\n[[File:BIS_fnc_getLineDistSchema.png]]",
            "examples": [
                {
                    "text": "```sqf\nprivate _distance = [0,5,15,20] call BIS_fnc_getLineDist; // returns 10\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "start1",
                            "description": "`Number` - segment 1 beginning. Can be negative"
                        },
                        {
                            "name": "length1",
                            "description": "`Number` - segment 1 length. Can be negative"
                        },
                        {
                            "name": "start2",
                            "description": "`Number` - segment 2 beginning. Can be negative"
                        },
                        {
                            "name": "length2",
                            "description": "`Number` - segment 2 length. Can be negative"
                        }
                    ],
                    "outline": "[start1, length1, start2, length2] call `BIS_fnc_getLineDist`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getLineDist"
        },
        "configuration": {
            "label": "BIS_fnc_getLineDist",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns markers in format PREFIX_N where PREFIX_ is the provided argument and N is an integer between 1 and 128. If there are 128 markers but marker 123 is missing, then only the first 122 marker will be returned.",
            "examples": [
                {
                    "text": "```sqf\n[\"BIS_marker_\"] call BIS_fnc_getMarkers; // [\"BIS_marker_1\",\"BIS_marker_2\",...]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerPrefix",
                            "description": "`String` - prefix of the markers"
                        }
                    ],
                    "outline": "[markerPrefix] call `BIS_fnc_getMarkers`",
                    "returns": "`Array` - an array of markers"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getMarkers"
        },
        "configuration": {
            "label": "BIS_fnc_getMarkers",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns the state of a marker.",
            "examples": [
                {
                    "text": "```sqf\nprivate _state = [\"BIS_marker_1\"] call BIS_fnc_getMarkerState;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "marker",
                            "description": "`String` - marker"
                        }
                    ],
                    "outline": "[marker] call `BIS_fnc_getMarkerState`",
                    "returns": "`String` - returns state of the marker. \"Shown\", \"Hidden\", \"Canceled\", \"Default\", if marker does not exist, `nil` is returned"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getMarkerState"
        },
        "configuration": {
            "label": "BIS_fnc_getMarkerState",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns name of a unit. Name of unit is stored in it is namespace so it can be retrieved later, mainly for when unit dies. Name is stored in the variable **BIS_fnc_getName_name**.",
            "examples": [
                {
                    "text": "```sqf\n[player] call BIS_fnc_getName;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - object whose name should be returned"
                        }
                    ],
                    "outline": "[object] call `BIS_fnc_getName`",
                    "returns": "`String` - unit's name"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getName"
        },
        "configuration": {
            "label": "BIS_fnc_getName",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns the current net mode as a string.",
            "examples": [
                {
                    "text": "```sqf\nprivate _netMode = call BIS_fnc_getNetMode;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_getNetMode`",
                    "returns": "`String` - can be one of:\n* \"DedicatedServer\"\n* \"Server\"\n* \"HeadlessClient\"\n* \"Client\"\n* \"SinglePlayer\""
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getNetMode"
        },
        "configuration": {
            "label": "BIS_fnc_getNetMode",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Get object `boundingBoxReal` max values and store them with `setVariable` [\"BIS_EGSpectator_objectBBD\", [maxWidth, maxLength, maxHeight]] for later calls.",
            "examples": [
                {
                    "text": "```sqf\n[player] call BIS_fnc_getObjectBBD;\n```"
                },
                {
                    "text": "```sqf\n[vehicle player] call BIS_fnc_getObjectBBD;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - object to measure"
                        }
                    ],
                    "outline": "[object] call `BIS_fnc_getObjectBBD`",
                    "returns": "`Array` to format [maxWidth, maxLength, maxHeight]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getObjectBBD"
        },
        "configuration": {
            "label": "BIS_fnc_getObjectBBD",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns the value of mission param given by the class name. This function is global and will return selected param value on any PC including JIP. For backward compatibility it also supports \"param1\" and \"param2\".",
            "examples": [
                {
                    "text": "```sqf\nprivate _viewDistance = \"ViewDistance\" call BIS_fnc_getParamValue;\n```"
                },
                {
                    "text": "```sqf\nprivate _viewDistance = [\"ViewDistance\", 2] call BIS_fnc_getParamValue;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "paramClass",
                            "description": "`String` - class name of one of [Mission Parameters](https://community.bistudio.com/wiki/Mission%20Parameters)"
                        },
                        {
                            "name": "paramClass",
                            "description": "`String` - class name of one of [Mission Parameters](https://community.bistudio.com/wiki/Mission%20Parameters)"
                        },
                        {
                            "name": "defaultValue (Optional)",
                            "description": "`Number` - default value to return if param doesn't exist"
                        }
                    ],
                    "outline": "[paramClass, defaultValue] call `BIS_fnc_getParamValue`",
                    "returns": "`Number` - param value. Default: 0"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getParamValue"
        },
        "configuration": {
            "label": "BIS_fnc_getParamValue",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns the pitch and bank of an object, in degrees. **Yaw** can be found using the `getDir` command.\n\n**Pitch** is 0 when the object is level; 90 when pointing straight up; and -90 when pointing straight down.\n\n**Bank** is 0 when level; 90 when the object is rolled to the right, -90 when rolled to the left, and 180 when rolled upside down.\n\n**IMPORTANT**: The **bank** returned by this command is not fully accurate, it can be off by up to 5% or so (depending on pitch) due to an unknown bug.",
            "examples": [
                {
                    "text": "```sqf\nprivate _pitchBank = vehicle player call BIS_fnc_getPitchBank;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "object call `BIS_fnc_getPitchBank`",
                    "returns": "`Array` of `Number`s - format [pitch, bank]"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getPitchBank"
        },
        "configuration": {
            "label": "BIS_fnc_getPitchBank",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return respawn inventories available for the given target.",
            "examples": [
                {
                    "text": "```sqf\nprivate _respawnInfo = [player] call BIS_fnc_getRespawnInventories;\n```"
                },
                {
                    "text": "```sqf\nprivate _respawnInfo = [west, true, false] call BIS_fnc_getRespawnInventories;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Namespace`, `Side`, `Group` or `Object`"
                        },
                        {
                            "name": "showDisabled",
                            "description": "`Boolean` - (Optional, default `false`) `true` to show even inventories disabled by curator"
                        },
                        {
                            "name": "returnAllInfo",
                            "description": "`Boolean` - (Optional, default `false`) `true` to return namespace, inventory and role limits (used in the new respawn screen), `false` to return only inventories"
                        }
                    ],
                    "outline": "[target, showDisabled, returnAllInfo] call `BIS_fnc_getRespawnInventories`",
                    "returns": "`Array` of `String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getRespawnInventories"
        },
        "configuration": {
            "label": "BIS_fnc_getRespawnInventories",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns all respawn markers for given side.",
            "examples": [
                {
                    "text": "```sqf\n[west, false] call BIS_fnc_getRespawnMarkers;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "side",
                            "description": "`Side` - (Optional, default <sqf inline>player call BIS_fnc_objectSide) side to which returned markers belong to"
                        },
                        {
                            "name": "vehicleMarkers",
                            "description": "`Boolean` - (Optional, default `false`) `true` to return vehicle respawn markers, `false` to return units respawn markers"
                        }
                    ],
                    "outline": "[side, vehicleMarkers] call `BIS_fnc_getRespawnMarkers`",
                    "returns": "`Array` of `String`s - respawn markers of given side"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getRespawnMarkers"
        },
        "configuration": {
            "label": "BIS_fnc_getRespawnMarkers",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return scripted respawn positions available for the given unit.",
            "examples": [
                {
                    "text": "```sqf\nprivate _respawnPositions = missionNamespace call BIS_fnc_getRespawnPositions; // can be e.g [bis_o1, [1337, 4200, 0.01], \"myMarker\", myVehicle]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "input",
                            "description": "`Object`, `Group`, `Side` or `Namespace` - where the respawn positions are saved"
                        }
                    ],
                    "outline": "input call `BIS_fnc_getRespawnPositions`",
                    "returns": "`Array` - array of respawn positions (`Position`, `Object` or `String`) - see `BIS_fnc_addRespawnPosition`)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getRespawnPositions"
        },
        "configuration": {
            "label": "BIS_fnc_getRespawnPositions",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Fetch a variable saved on server.\nUsed when you want to share variables only to specific clients to prevent large traffic.\nMust be run in [scheduled environment](https://community.bistudio.com/wiki/Scheduler%23Scheduled_Environment) because communication with server takes some time.",
            "examples": [
                {
                    "text": "```sqf\n[missionNamespace, \"BIS_someVar\", \"defaultValue\"] call BIS_fnc_getServerVariable;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Namespace`, `Object` or `Group` - variable name space"
                        },
                        {
                            "name": "varName",
                            "description": "`String` - variable name"
                        },
                        {
                            "name": "default",
                            "description": "`Anything` - default value returned when variable is `nil`"
                        }
                    ],
                    "outline": "[target, varName, default] call `BIS_fnc_getServerVariable`",
                    "returns": "`Anything` - default value or saved variable"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getServerVariable"
        },
        "configuration": {
            "label": "BIS_fnc_getServerVariable",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns vehicle turrets.",
            "examples": [
                {
                    "text": "```sqf\n[vehicle player]  call BIS_fnc_getTurrets;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "input",
                            "description": "`Object` or `String` - object or object's class name"
                        },
                        {
                            "name": "outputType",
                            "description": "`Config` or `Array` - output type (array of config paths or IDs)"
                        }
                    ],
                    "outline": "[input, outputType] call `BIS_fnc_getTurrets`",
                    "returns": "`Array` of [configs](https://community.bistudio.com/wiki/Config) or `Array` - vehicle turrets"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getTurrets"
        },
        "configuration": {
            "label": "BIS_fnc_getTurrets",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns player-controlled unit (if any) according to the provided [player UID](https://community.bistudio.com/wiki/getPlayerUID).",
            "examples": [
                {
                    "text": "```sqf\nprivate _unitPlayedByUID550055 = \"550055\" call BIS_fnc_getUnitByUID;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "playerUID",
                            "description": "`String` - see `getPlayerUID`"
                        }
                    ],
                    "outline": "playerUID call `BIS_fnc_getUnitByUID`",
                    "returns": "`Object` - the unit controlled by _playerUID_ player"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getUnitByUID"
        },
        "configuration": {
            "label": "BIS_fnc_getUnitByUID",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Get a unit's uniform insignia class set with `BIS_fnc_setUnitInsignia`.",
            "examples": [
                {
                    "text": "```sqf\nprivate _insigniaClass = [player] call BIS_fnc_getUnitInsignia\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Object` - object from which to return its insignia's class"
                        }
                    ],
                    "outline": "[target] call `BIS_fnc_getUnitInsignia`",
                    "returns": "`String` - insignia classname"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getUnitInsignia"
        },
        "configuration": {
            "label": "BIS_fnc_getUnitInsignia",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return vehicle customization settings.",
            "examples": [
                {
                    "text": "```sqf\n[vehicle player] call BIS_fnc_getVehicleCustomization;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "class",
                            "description": "`String` - (Optional, default \"\") object class override"
                        }
                    ],
                    "outline": "[object, class] call `BIS_fnc_getVehicleCustomization`",
                    "returns": "`Array` in format: [<texture>, <animations>], for example (<nowiki>[</nowiki>[\"wasp\",1],[\"AddTread\",0,\"AddTread_Short\",1]])"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getVehicleCustomization"
        },
        "configuration": {
            "label": "BIS_fnc_getVehicleCustomization",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Get virtual backpacks from an object (e.g., ammo box). Virtual items can be selected in the `Arsenal`.",
            "examples": [
                {
                    "text": "```sqf\nBIS_ammoBox call BIS_fnc_getVirtualBackpackCargo;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "object call `BIS_fnc_getVirtualBackpackCargo`",
                    "returns": "`Array` of `String`s - all virtual backpacks"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getVirtualBackpackCargo"
        },
        "configuration": {
            "label": "BIS_fnc_getVirtualBackpackCargo",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Get virtual items from an object (e.g., ammo box). Virtual items can be selected in the `Arsenal`.",
            "examples": [
                {
                    "text": "```sqf\nBIS_ammoBox call BIS_fnc_getVirtualItemCargo;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "object call `BIS_fnc_getVirtualItemCargo`",
                    "returns": "`Array` of `String`s - all virtual items"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getVirtualItemCargo"
        },
        "configuration": {
            "label": "BIS_fnc_getVirtualItemCargo",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Get virtual magazines from an object (e.g., ammo box). Virtual items can be selected in the `Arsenal`.",
            "examples": [
                {
                    "text": "```sqf\nBIS_ammoBox call BIS_fnc_getVirtualMagazineCargo;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "object call `BIS_fnc_getVirtualMagazineCargo`",
                    "returns": "`Array` of `String`s - all virtual magazines"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getVirtualMagazineCargo"
        },
        "configuration": {
            "label": "BIS_fnc_getVirtualMagazineCargo",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Get virtual weapons from an object (e.g., ammo box). Virtual items can be selected in the `Arsenal`.",
            "examples": [
                {
                    "text": "```sqf\nBIS_ammoBox call BIS_fnc_getVirtualWeaponCargo;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "object call `BIS_fnc_getVirtualWeaponCargo`",
                    "returns": "`Array` of `String`s - all virtual weapons"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_getVirtualWeaponCargo"
        },
        "configuration": {
            "label": "BIS_fnc_getVirtualWeaponCargo",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns the greatest number out of the passed set.",
            "examples": [
                {
                    "text": "```sqf\nprivate _result = [7,2,1,5,10] call BIS_fnc_greatestNum; //_result = 10\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "numbers",
                            "description": "`Array` - a set of numbers"
                        }
                    ],
                    "outline": "numbers call `BIS_fnc_greatestNum`",
                    "returns": "`Number` - greatest number in the set"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_greatestNum"
        },
        "configuration": {
            "label": "BIS_fnc_greatestNum",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Converts grid coordinates to world position.\n**IMPORTANT**: \n* Correct results outside of the map area are not guaranteed.\n* Does not work on machines with no UI like [Dedicated Server](https://community.bistudio.com/wiki/Arma%203%3A%20Dedicated%20Server) or [Headless Client](https://community.bistudio.com/wiki/Arma%203%3A%20Headless%20Client) - see `hasInterface`.",
            "examples": [
                {
                    "text": "```sqf\nprivate _realPosition = \"183221\" call BIS_fnc_gridToPos;\n```"
                },
                {
                    "text": "```sqf\nprivate _realPosition = \"He11\" call BIS_fnc_gridToPos;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "gridPosition",
                            "description": "`String` - (Optional, default <sqf inline>mapGridPosition position cameraOn) accepts both \"024577\" or \"De82\" format"
                        }
                    ],
                    "outline": "gridPosition call `BIS_fnc_gridToPos`",
                    "returns": "`Array` of `Number`s in format [<nowiki/>[gridX, gridY], [gridWidth, gridHeight]]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_gridToPos"
        },
        "configuration": {
            "label": "BIS_fnc_gridToPos",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Extends MP-only `groupFromNetId` functionality to SP",
            "examples": [
                {
                    "text": "```sqf\nprivate _grp = \"0:3\" call BIS_fnc_groupFromNetId;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "netId",
                            "description": "`String`"
                        }
                    ],
                    "outline": "netId call `BIS_fnc_groupFromNetId`",
                    "returns": "`Group` - existing group or `grpNull`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_groupFromNetId"
        },
        "configuration": {
            "label": "BIS_fnc_groupFromNetId",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Displays Group Indicator (to the right of the screen in **(Arma 3)**)",
            "examples": [
                {
                    "text": "```sqf\n[] call BIS_fnc_groupIndicator; // starts group indicator\n```"
                },
                {
                    "text": "```sqf\n[\"Exit\"] call BIS_fnc_groupIndicator; // closes group indicator\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "argument",
                            "description": "`Array` - **case-sensitive**, can be:"
                        }
                    ],
                    "outline": "argument call `BIS_fnc_groupIndicator`",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_groupIndicator"
        },
        "configuration": {
            "label": "BIS_fnc_groupIndicator",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns all vehicles a group possesses, assigned vehicles can be included.",
            "examples": [
                {
                    "text": "```sqf\n[group player, true] call BIS_fnc_groupVehicles;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Object` or `Group` - the unit or group to check, if unit is given it is group is then used"
                        },
                        {
                            "name": "assignedVeh",
                            "description": "`Boolean` - if assigned vehicles should also be returned (vehicles that unit's may not be inside of but assigned to)"
                        }
                    ],
                    "outline": "[target, assignedVeh] call `BIS_fnc_groupVehicles`",
                    "returns": "`Array` - list of all vehicles in control/assigned to the group, empty if group has none"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_groupVehicles"
        },
        "configuration": {
            "label": "BIS_fnc_groupVehicles",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Creates GUI background.",
            "examples": [
                {
                    "text": "```sqf\n[1,1,1,1] call BIS_fnc_GUIbackground;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Array` - in format:"
                        }
                    ],
                    "outline": "[position] call `BIS_fnc_GUIbackground`",
                    "returns": "`Display`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_GUIbackground"
        },
        "configuration": {
            "label": "BIS_fnc_GUIbackground",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Opens the [Arma 3: User Interface Editor](https://community.bistudio.com/wiki/Arma%203%3A%20User%20Interface%20Editor).",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_GUIeditor;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_GUIeditor`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_GUIeditor"
        },
        "configuration": {
            "label": "BIS_fnc_GUIeditor",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Used in dialogs to animate background UAV tiles. See notes for a full working example.",
            "examples": [
                {
                    "text": "```sqf\n[findDisplay 49] call BIS_fnc_guiEffectTiles // display 49 - pause menu\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "display",
                            "description": "`Display` - display to be animated"
                        }
                    ],
                    "outline": "[display] call `BIS_fnc_guiEffectTiles`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_guiEffectTiles"
        },
        "configuration": {
            "label": "BIS_fnc_guiEffectTiles",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns grid params and stores it into `uiNamespace`.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_GUIgrid; //[-0.452381,0.214286,1.2,1]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "category",
                            "description": "`String` - (Optional, default \"GUI\") category name"
                        },
                        {
                            "name": "grid",
                            "description": "`String` - (Optional, default \"GRID\") grid name"
                        }
                    ],
                    "outline": "[category, grid] call `BIS_fnc_GUIgrid`",
                    "returns": "`Array` - in format [<nowiki/>[x,y,w,h],gridW,gridH]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_GUIgrid"
        },
        "configuration": {
            "label": "BIS_fnc_GUIgrid",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_GUIgridToProfile` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_GUIgridToProfile"
        },
        "configuration": {
            "label": "BIS_fnc_GUIgridToProfile",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tCreates advanced hintC dialog\n\n\tParameter(s):\n\t_this select 0: ARRAY in format\n\t\t[text,picture]\n\t\t\t* text: STRING - hint text\n\t\t\t* picture: STRING - picture\n\t\t[item1,item2...] - Listbox item ARRAYs in format\n\t\t\t[itemText,itemDescription,picture,icon]\n\t\t\t\t* itemText: STRING - Text displayed in listbox\n\t\t\t\t* itemDescription (Optional): STRING - text displayed after clicking on item\n\t\t\t\t* picture (Optional): STRING - picture displayed after clicking on item\n\t\t\t\t* icon (Optional): STRING - icon displayed in listbox left from text\n\t_this select 1 (Optional): STRING - hint header\n\t_this select 2 (Optional): ARRAY - [STRING,CODE,NUMBER] - text on left button (when \"\", button is hidden), code executed upon clicking and fade out delay. If only text is present, button is disabled.\n\t_this select 3 (Optional): ARRAY - [STRING,CODE,NUMBER] - STRING - text on right button and code executed upon clicking\n\t_this select 4 (Optional): ARRAY - [STRING,CODE,NUMBER] - STRING - text on middle button and code executed upon clicking\n\t_this select 5 (Optional): NUMBER or ARRAY - width or [width,height] of picture (in grid coordinates). Width > 17 means only picture is used.\n\n\tReturns:\n\tARRAY - [endState(,lbId)]\n\t\t* endState: NUMBER - 1 when clicked on right button, -1 when clicked on left button, 0 when escaped\n\t\t* lbId: NUMBER - selected listbox item (when listbox was used)\n*/\n</pre>\n\n{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_GUIhint` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_GUIhint"
        },
        "configuration": {
            "label": "BIS_fnc_GUIhint",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Load newsfeed.",
            "examples": [
                {
                    "text": "```sqf\n[_display] call BIS_fnc_GUInewsfeed;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "display",
                            "description": "`Display` - display where newsfeed with IDC 1101 is"
                        }
                    ],
                    "outline": "[display] call `BIS_fnc_GUInewsfeed`",
                    "returns": "`Boolean` - `true` when online"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_GUInewsfeed"
        },
        "configuration": {
            "label": "BIS_fnc_GUInewsfeed",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Makes a High Altitude Low Opening (HALO) parachute jump.\n**Arma**: 3|HALO feature is already implemented in {{arma3. Using this function will result in incorrect behaviour and animation.}}",
            "examples": [
                {
                    "text": "```sqf\n[player] call BIS_fnc_halo; // instantly parachutes the player object\n```"
                },
                {
                    "text": "```sqf\n[player, 100] call BIS_fnc_halo; // increases the altitude of player by 100 before HALO\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - the HALO-performing unit"
                        },
                        {
                            "name": "altitude",
                            "description": "`Number` - (Optional, default 0) altitude added to the unit before HALO"
                        }
                    ],
                    "outline": "[unit, altitude] call `BIS_fnc_halo`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_halo"
        },
        "configuration": {
            "label": "BIS_fnc_halo",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Halts current function and all its parents and logs an error message.",
            "examples": [
                {
                    "text": "```sqf\n[\"You are now supposed to be %1\", rank player] call BIS_fnc_halt;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "param1",
                            "description": "`String` - logged message ([formatted](https://community.bistudio.com/wiki/format))"
                        },
                        {
                            "name": "param2",
                            "description": "param10: `Anything`"
                        }
                    ],
                    "outline": "[param1, param2, ..., param10] call `BIS_fnc_halt`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_halt"
        },
        "configuration": {
            "label": "BIS_fnc_halt",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if object contains given item in inventory / cargo storage.\n**IMPORTANT**:  This function performs a deep search of inventory / cargo storage, thus is not suitable for per-frame execution.",
            "examples": [
                {
                    "text": "```sqf\n[player, \"ItemMap\"] call BIS_fnc_hasItem;\n```"
                },
                {
                    "text": "```sqf\n[tank, \"FirstAidKit\", true] call BIS_fnc_hasItem;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` or `Group` - unit, vehicle, container or group of units (since v1.95)"
                        },
                        {
                            "name": "item",
                            "description": "`String` - item to find"
                        },
                        {
                            "name": "searchCrew",
                            "description": "`Boolean` - (Optional, default `false`) `true` to search vehicle crew as well if object is a vehicle"
                        }
                    ],
                    "outline": "[object, item, searchCrew] call `BIS_fnc_hasItem`",
                    "returns": "`Boolean` - `true` if has item"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_hasItem"
        },
        "configuration": {
            "label": "BIS_fnc_hasItem",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_hatchClose`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_hatchClose"
        },
        "configuration": {
            "label": "BIS_fnc_hatchClose",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_hatchOpen`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_hatchOpen"
        },
        "configuration": {
            "label": "BIS_fnc_hatchOpen",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Healing postprocess. Supposed to give healing postprocess effects.\n**WARNING**: This function is unfinished, must not and **cannot** be used!",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_healing; // do NOT use\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_healing`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_healing"
        },
        "configuration": {
            "label": "BIS_fnc_healing",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Effects when player is hit. Parameters are sent by the [HandleDamage](https://community.bistudio.com/wiki/Arma%203%3A%20Event%20Handlers%23HandleDamage) event handler.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_healthEffects;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_healthEffects`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_healthEffects"
        },
        "configuration": {
            "label": "BIS_fnc_healthEffects",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_helicopterCanFly;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_helicopterCanFly` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_helicopterCanFly"
        },
        "configuration": {
            "label": "BIS_fnc_helicopterCanFly",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Handling EH-based helicopter damage, event handler in question being {{sic|[Da_mm_aged](https://community.bistudio.com/wiki/Arma%203%3A%20Event%20Handlers%23Dammaged)}}.\n\n**NOTE**: \nExecuted script is:\n\n```sqf\nhelicopter execVM \"hsim\\air_h\\data\\scripts\\main_rotor_destruction.sqf\";\n```\n\n\nhelicopter rotor status can be found _via_ variable **HSim_mainRotorDestroyed**:\n\n```sqf\n_isRotorDestroyed = helicopter getVariable [\"HSim_mainRotorDestroyed\", false];\n```",
            "examples": [
                {
                    "text": "```sqf\nmyHelicopter addEventHandler [\"Dammaged\", { _this call BIS_fnc_helicopterDamage; }];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "helicopter",
                            "description": "`Object`"
                        },
                        {
                            "name": "selection",
                            "description": "`String` - name of the helicopter selection receiving damage. Must be \"main rotor\""
                        },
                        {
                            "name": "damage",
                            "description": "`Number` - _selection_s damage. Will only trigger effects if _damage_ &gt; 0.999"
                        }
                    ],
                    "outline": "[helicopter, selection, damage] call `BIS_fnc_helicopterDamage`",
                    "returns": "`Boolean` - `true` when done"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_helicopterDamage"
        },
        "configuration": {
            "label": "BIS_fnc_helicopterDamage",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return all hitpoints for a helicopter.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_helicopter] call BIS_fnc_helicopterGetHitpoints;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - helicopter"
                        }
                    ],
                    "outline": "object call `BIS_fnc_helicopterGetHitpoints`",
                    "returns": "`Array` of `String`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_helicopterGetHitpoints"
        },
        "configuration": {
            "label": "BIS_fnc_helicopterGetHitpoints",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Check if unit sits on right or left seat.",
            "examples": [
                {
                    "text": "```sqf\nplayer call BIS_fnc_helicopterSeat;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit which should be checked."
                        }
                    ],
                    "outline": "unit call `BIS_fnc_helicopterSeat`",
                    "returns": "`Number`:\n* -1: Not in a vehicle\n* &nbsp;0: left seat\n* &nbsp;1: right seat"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_helicopterSeat"
        },
        "configuration": {
            "label": "BIS_fnc_helicopterSeat",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Plays cockpit animation. **{{tkoh}} only**.",
            "examples": [
                {
                    "text": "```sqf\n[instructor, \"thumbUp\"] call BIS_fnc_helicopterSeatMove;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "gesture",
                            "description": "`String` - can be one of:"
                        }
                    ],
                    "outline": "[unit, gesture] call `BIS_fnc_helicopterSeatMove`",
                    "returns": "`String` - animation full name - \"\" if animation not found"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_helicopterSeatMove"
        },
        "configuration": {
            "label": "BIS_fnc_helicopterSeatMove",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns helicopter type.",
            "examples": [
                {
                    "text": "```sqf\nprivate _helicopterType = [vehicle player] call BIS_fnc_helicopterType;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "start",
                            "description": "`Object` - helicopter to be checked."
                        }
                    ],
                    "outline": "[object] call `BIS_fnc_helicopterType`",
                    "returns": "`Number` - one of:\n* -1 - Unknown\n* &nbsp;0 - Light\n* &nbsp;1 - Medium\n* &nbsp;2 - Heavy"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_helicopterType"
        },
        "configuration": {
            "label": "BIS_fnc_helicopterType",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Opens the Functions Viewer which lists all functions defined in:\n* [Arma 2: Functions Library](https://community.bistudio.com/wiki/Arma%202%3A%20Functions%20Library) (Also Arma 2: Operation Arrowhead)\n* [Arma 3: Functions Library](https://community.bistudio.com/wiki/Arma%203%3A%20Functions%20Library)\n* [Take On Helicopters: Functions Library](https://community.bistudio.com/wiki/Take%20On%20Helicopters%3A%20Functions%20Library)\n\n<gallery>\nFile:Fnc_help.jpg|Arma 2 and Arma 2: Operation Arrowhead\nFile:Take On Helicopters Functions Viewer.jpg|{{tkoh}}\nFile:A3 FunctionViewer Overview.png|Arma 3\n</gallery>",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_help;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "parentDisplay",
                            "description": "`Display` - (Optional, default `displayNull`)"
                        }
                    ],
                    "outline": "parentDisplay call `BIS_fnc_help`",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_help"
        },
        "configuration": {
            "label": "BIS_fnc_help",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_hermite`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_hermite"
        },
        "configuration": {
            "label": "BIS_fnc_hermite",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_hermiteVector`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_hermiteVector"
        },
        "configuration": {
            "label": "BIS_fnc_hermiteVector",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Convert hexcode color into RGBA array format.",
            "examples": [
                {
                    "text": "```sqf\n[\"025D00FF\"] call BIS_fnc_HEXtoRGB; // [1,0.843138,0,1]\n```"
                },
                {
                    "text": "Usually HEX code is represented as 3 octet without alpha, so you can add it yourself:\n\n```sqf\n[_hexString + \"FF\"] call BIS_fnc_HEXtoRGB; // Add 4th octet to get alpha\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "hexString",
                            "description": "`String` - string representing **4 octets** of HEX color"
                        }
                    ],
                    "outline": "[hexString] call `BIS_fnc_HEXtoRGB`",
                    "returns": "`Array` of `Number`s - array of **4** numbers in range 0..1"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_HEXtoRGB"
        },
        "configuration": {
            "label": "BIS_fnc_HEXtoRGB",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Gradual hiding of a marker by setting its alpha to 0.",
            "examples": [
                {
                    "text": "```sqf\n[\"BIS_marker\",2] spawn BIS_fnc_hideMarker;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "marker",
                            "description": "`String` - marker name"
                        },
                        {
                            "name": "duration",
                            "description": "`Number` - (Optional, default 1) duration of the hiding"
                        }
                    ],
                    "outline": "[marker, duration] spawn `BIS_fnc_hideMarker`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_hideMarker"
        },
        "configuration": {
            "label": "BIS_fnc_hideMarker",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Hides a list of markers one by one.",
            "examples": [
                {
                    "text": "```sqf\n[[\"BIS_marker_1\", \"BIS_marker_2\", \"BIS_marker_3\"], 5] spawn BIS_fnc_hideMarkerArray;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerArray",
                            "description": "`Array` of `String`s - array of marker names"
                        },
                        {
                            "name": "duration",
                            "description": "`Number` - (Optional, default 1) duration in seconds until all markers are hidden. If duration is 0 markers are hidden as fast as possible"
                        }
                    ],
                    "outline": "[markerArray, duration] spawn `BIS_fnc_hideMarkerArray`",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_hideMarkerArray"
        },
        "configuration": {
            "label": "BIS_fnc_hideMarkerArray",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Highlights given control by drawing a border around it and letting it pulsate. The effect is visible until explicitly removed. \n\n[[File:A3 BIS_fnc_highlightControl.jpg]]",
            "examples": [
                {
                    "text": "```sqf\n\n[findDisplay 313 displayCtrl 1023] call BIS_fnc_highlightControl;\t// highlights the play button in Eden Editor\n[findDisplay 313] call BIS_fnc_highlightControl;\t\t\t\t\t// removes the previously created highlight effect\n\n```"
                },
                {
                    "text": "```sqf\n\n[] spawn\n{\n  disableSerialization;\n  private _ctrlHighlight = [findDisplay 313 displayCtrl 1023),5] call BIS_fnc_highlightControl;\n  sleep 2;\n  ctrlDelete _ctrlHighlight;\n}; // highlights the play button in Eden Editor and removes the effect after two seconds\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "displayOrControl",
                            "description": "`Control` - can be a `Control` or a `Display`. When a display is passed as parameter, the function will delete the previously created highlight control on that given display."
                        },
                        {
                            "name": "thickness",
                            "description": "`Number` - (Optional, default 20) thickness of the border"
                        }
                    ],
                    "outline": "[displayOrControl, thickness] call `BIS_fnc_highlightControl`",
                    "returns": "`Control` - returns the created highlight control."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_highlightControl"
        },
        "configuration": {
            "label": "BIS_fnc_highlightControl",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "[[File:A3 HoldActionIcons v2.02.png|thumb|Note: This image does not contain all available icons.|300px]]\nAdds an action to an object which requires the user to hold a key to perform the action.\n\n{{Wiki|extractionScript}}\n\nAvailable official icons as of **(Arma 3)**:\n\n<spoiler text=\"Show holdActionAdd list\">\n{{Columns|2|\n* \"\\a3\\Missions_F_Orange\\Data\\Img\\Showcase_LawsOfWar\\action_access_fm_CA.paa\"\n* \"\\a3\\Missions_F_Orange\\Data\\Img\\Showcase_LawsOfWar\\action_end_sim_CA.paa\"\n* \"\\a3\\Missions_F_Orange\\Data\\Img\\Showcase_LawsOfWar\\action_exit_CA.paa\"\n* \"\\a3\\Missions_F_Orange\\Data\\Img\\Showcase_LawsOfWar\\action_start_sim_CA.paa\"\n* \"\\a3\\Missions_F_Orange\\Data\\Img\\Showcase_LawsOfWar\\action_view_article_CA.paa\"\n* \"\\a3\\data_f_destroyer\\data\\UI\\IGUI\\Cfg\\holdactions\\holdAction_loadVehicle_ca.paa\"\n* \"\\a3\\data_f_destroyer\\data\\UI\\IGUI\\Cfg\\holdactions\\holdAction_unloadVehicle_ca.paa\"\n* \"\\a3\\missions_f_oldman\\data\\img\\holdactions\\holdAction_box_ca.paa\"\n* \"\\a3\\missions_f_oldman\\data\\img\\holdactions\\holdAction_follow_start_ca.paa\"\n* \"\\a3\\missions_f_oldman\\data\\img\\holdactions\\holdAction_follow_stop_ca.paa\"\n* \"\\a3\\missions_f_oldman\\data\\img\\holdactions\\holdAction_talk_ca.paa\"\n* \"\\a3\\props_f_enoch\\items\\tools\\data\\tinfoil_action_ca.paa\"\n* \"\\a3\\ui_f\\data\\IGUI\\Cfg\\holdactions\\holdAction_connect_ca.paa\"\n* \"\\a3\\ui_f\\data\\IGUI\\Cfg\\holdactions\\holdAction_forceRespawn_ca.paa\"\n* \"\\a3\\ui_f\\data\\IGUI\\Cfg\\holdactions\\holdAction_hack_ca.paa\"\n* \"\\a3\\ui_f\\data\\IGUI\\Cfg\\holdactions\\holdAction_loaddevice_ca.paa\"\n* \"\\a3\\ui_f\\data\\IGUI\\Cfg\\holdactions\\holdAction_passleadership_ca.paa\"\n* \"\\a3\\ui_f\\data\\IGUI\\Cfg\\holdactions\\holdAction_requestleadership_ca.paa\"\n* \"\\a3\\ui_f\\data\\IGUI\\Cfg\\holdactions\\holdAction_reviveMedic_ca.paa\"\n* \"\\a3\\ui_f\\data\\IGUI\\Cfg\\holdactions\\holdAction_revive_ca.paa\"\n* \"\\a3\\ui_f\\data\\IGUI\\Cfg\\holdactions\\holdAction_search_ca.paa\"\n* \"\\a3\\ui_f\\data\\IGUI\\Cfg\\holdactions\\holdAction_secure_ca.paa\"\n* \"\\a3\\ui_f\\data\\IGUI\\Cfg\\holdactions\\holdAction_takeOff1_ca.paa\"\n* \"\\a3\\ui_f\\data\\IGUI\\Cfg\\holdactions\\holdAction_takeOff2_ca.paa\"\n* \"\\a3\\ui_f\\data\\IGUI\\Cfg\\holdactions\\holdAction_thumbsdown_ca.paa\"\n* \"\\a3\\ui_f\\data\\IGUI\\Cfg\\holdactions\\holdAction_thumbsup_ca.paa\"\n* \"\\a3\\ui_f\\data\\IGUI\\Cfg\\holdactions\\holdAction_unbind_ca.paa\"\n* \"\\a3\\ui_f\\data\\IGUI\\Cfg\\holdactions\\holdAction_unloaddevice_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\idle\\idle_0_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\idle\\idle_1_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\idle\\idle_2_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\idle\\idle_3_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\idle\\idle_4_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\idle\\idle_5_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\idle\\idle_6_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\idle\\idle_7_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\idle\\idle_8_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\idle\\idle_9_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\idle\\idle_10_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\idle\\idle_11_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\in\\in_0_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\in\\in_1_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\in\\in_2_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\in\\in_3_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress2\\progress_0_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress2\\progress_1_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress2\\progress_2_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress2\\progress_3_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress2\\progress_4_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress2\\progress_5_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress2\\progress_6_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress2\\progress_7_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress2\\progress_8_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress2\\progress_9_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress2\\progress_10_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress2\\progress_11_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress2\\progress_12_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress2\\progress_13_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress2\\progress_14_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress2\\progress_15_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress2\\progress_16_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress2\\progress_17_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress2\\progress_18_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress2\\progress_19_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress2\\progress_20_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress2\\progress_21_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress2\\progress_22_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress2\\progress_23_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress2\\progress_24_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress\\progress_0_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress\\progress_1_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress\\progress_2_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress\\progress_3_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress\\progress_4_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress\\progress_5_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress\\progress_6_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress\\progress_7_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress\\progress_8_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress\\progress_9_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress\\progress_10_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress\\progress_11_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress\\progress_12_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress\\progress_13_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress\\progress_14_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress\\progress_15_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress\\progress_16_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress\\progress_17_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress\\progress_18_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress\\progress_19_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress\\progress_20_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress\\progress_21_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress\\progress_22_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress\\progress_23_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\holdactions\\progress\\progress_24_ca.paa\"\n* \"\\a3\\ui_f_oldman\\data\\IGUI\\Cfg\\holdactions\\attack_ca.paa\"\n* \"\\a3\\ui_f_oldman\\data\\IGUI\\Cfg\\holdactions\\destroy_ca.paa\"\n* \"\\a3\\ui_f_oldman\\data\\IGUI\\Cfg\\holdactions\\holdAction_market_ca.paa\"\n* \"\\a3\\ui_f_oldman\\data\\IGUI\\Cfg\\holdactions\\holdAction_sleep2_ca.paa\"\n* \"\\a3\\ui_f_oldman\\data\\IGUI\\Cfg\\holdactions\\holdAction_sleep_ca.paa\"\n* \"\\a3\\ui_f_oldman\\data\\IGUI\\Cfg\\holdactions\\map_ca.paa\"\n* \"\\a3\\ui_f_oldman\\data\\IGUI\\Cfg\\holdactions\\meet_ca.paa\"\n* \"\\a3\\ui_f_oldman\\data\\IGUI\\Cfg\\holdactions\\refuel_ca.paa\"\n* \"\\a3\\ui_f_oldman\\data\\IGUI\\Cfg\\holdactions\\repair_ca.paa\"\n* \"\\a3\\ui_f_orange\\Data\\CfgOrange\\Missions\\action_aaf_ca.paa\"\n* \"\\a3\\ui_f_orange\\Data\\CfgOrange\\Missions\\action_csat_ca.paa\"\n* \"\\a3\\ui_f_orange\\Data\\CfgOrange\\Missions\\action_escape_ca.paa\"\n* \"\\a3\\ui_f_orange\\Data\\CfgOrange\\Missions\\action_fia_ca.paa\"\n* \"\\a3\\ui_f_orange\\Data\\CfgOrange\\Missions\\action_fragment_back_ca.paa\"\n* \"\\a3\\ui_f_orange\\Data\\CfgOrange\\Missions\\action_fragment_ca.paa\"\n* \"\\a3\\ui_f_orange\\Data\\CfgOrange\\Missions\\action_idap_ca.paa\"\n* \"\\a3\\ui_f_orange\\Data\\CfgOrange\\Missions\\action_nato_ca.paa\"\n* \"\\a3\\ui_f_aow\\data\\igui\\cfg\\holdactions\\holdaction_charity_ca.paa\"\n}}<spoiler text=\"Show addAction list\">\n{{Columns|2|\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\takeflag_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\talk_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\unloadallvehicles_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\unloadincapacitated_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\unloadvehicle_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\vtolvectoring_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\vtolvectoringcancel_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\arrow_down_gs.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\arrow_up_gs.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\autohover_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\bandage_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\beacons_off_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\beacons_on_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\cancelhover_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\clear_empty_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\close_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\eject_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\engine_off_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\engine_on_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\flapsextend_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\flapsretract_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\gear_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\getincargo_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\getincommander_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\getindriver_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\getingunner_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\getinpilot_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\getout_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\heal_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\ico_cpt_batt_off_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\ico_cpt_batt_on_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\ico_cpt_brk_on_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\ico_cpt_col_off_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\ico_cpt_col_on_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\ico_cpt_land_off_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\ico_cpt_land_on_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\ico_cpt_start_off_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\ico_cpt_start_on_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\ico_cpt_thtl_idl_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\ico_cpt_thtl_off_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\ico_cpt_thtl_on_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\ico_off_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\ico_on_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\ladderdown_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\ladderoff_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\ladderup_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\landingautopilot_off_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\landingautopilot_on_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\loadvehicle_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\open_door_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\periscopedepth_off_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\periscopedepth_on_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\radaroff_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\radaron_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\reammo_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\refuel_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\reload_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\repair_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\returnflag_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\settimer_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\take_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\obsolete\\ui_action_arrow_up_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\obsolete\\ui_action_cancel_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\obsolete\\ui_action_cancel_manualfire_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\obsolete\\ui_action_deactivate_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\obsolete\\ui_action_enter_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\obsolete\\ui_action_exit_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\obsolete\\ui_action_fire_in_flame_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\obsolete\\ui_action_fire_put_down_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\obsolete\\ui_action_gear_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\obsolete\\ui_action_getin_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\obsolete\\ui_action_getincargo.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\obsolete\\ui_action_ladderondown_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\obsolete\\ui_action_ladderonup_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\obsolete\\ui_action_manualfire_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\obsolete\\ui_action_open_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\obsolete\\ui_action_takemagazine_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\obsolete\\ui_action_takemine_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\obsolete\\ui_action_takeweapon_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\obsolete\\ui_action_teamswitch_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\obsolete\\ui_action_turnin_ca.paa\"\n* \"\\a3\\ui_f\\data\\igui\\cfg\\actions\\obsolete\\ui_action_turnout_ca.paa\"\n* \"\\a3\\ui_f_jets\\data\\igui\\cfg\\actions\\action_attachtocatapult_ca.paa\"\n* \"\\a3\\ui_f_jets\\data\\igui\\cfg\\actions\\action_detachtocatapult_ca.paa\"\n* \"\\a3\\ui_f_jets\\data\\igui\\cfg\\actions\\action_launchfromcatapult_ca.paa\"\n}}<spoiler text=\"UI that shows all icons\">\n\n```sqf\n\n0 spawn\n{\n\t// EXECUTE IN EDEN EDITOR OR EDITOR PREVIEW!\n\tdisableSerialization;\n\n\tprivate _display = findDisplay 313 createDisplay \"RscDisplayEmpty\";\n\n\tprivate _edit = _display ctrlCreate [\"RscEdit\", 645];\n\t_edit ctrlSetPosition [safezoneX + 50 * pixelW, safezoneY + 50 * pixelH, safezoneW - 500 * pixelW, 50 * pixelH];\n\t_edit ctrlSetBackgroundColor [0,0,0,1];\n\t_edit ctrlCommit 0;\n\n\tprivate _status = _display ctrlCreate [\"RscEdit\", 1337];\n\t_status ctrlSetPosition [safezoneX + safezoneW - 400 * pixelW, safezoneY + 50 * pixelH, 350 * pixelW, 50 * pixelH];\n\t_status ctrlSetBackgroundColor [0,0,0,1];\n\t_status ctrlCommit 0;\n\t_status ctrlEnable false;\n\n\tprivate _tv = _display ctrlCreate [\"RscTreeSearch\", -1];\n\t_tv ctrlSetFont \"EtelkaMonospacePro\";\n\t_tv ctrlSetFontHeight 0.05;\n\t_tv ctrlSetPosition [safezoneX + 50 * pixelW, safezoneY + 125 * pixelH, safezoneW - 100 * pixelW, safeZoneH - 175 * pixelH];\n\t_tv ctrlSetBackgroundColor [0,0,0,1];\n\t_tv ctrlCommit 0;\n\n\t_tv ctrlAddEventHandler [\"treeSelChanged\",\n\t{\n\t\tparams [\"_ctrlTV\", \"_selectionPath\"];\n\t\tcopyToClipboard (_ctrlTV tvText _selectionPath);\n\t\tplaySound (\"RscDisplayCurator_ping\" + selectRandom [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\"]);\n\t\t(ctrlParent _ctrlTv) displayCtrl 1337 ctrlSetText \"Path copied to clipboard!\";\n\t}];\n\n\tprivate _counter = 0;\n\t{\n\t\tprivate _files = addonFiles [_x # 0, \".paa\"];\n\t\t{\n\t\t\tif (\"\\actions\" in _x || \"\\holdaction\" in _x) then\n\t\t\t{\n\t\t\t\t_counter = _counter + 1;\n\t\t\t\t_status ctrlSetText format [\"%1 textures found.\", _counter];\n\t\t\t\tprivate _index = _tv tvAdd [[], _x];\n\t\t\t\t_tv tvSetPicture [[_index], _x];\n\t\t\t};\n\t\t} forEach _files;\n\t} foreach allAddonsInfo;\n\n\t_tv tvSortall [[], false];\n};\n\n```",
            "examples": [
                {
                    "text": "```sqf\n\n[\n\tplayer,\n\t\"Kill\",\n\t\"\", \"\",\n\t\"true\", \"true\",\n\t{ hint \"Started!\" },\n\t{ systemChat str (_this select 3) },\n\t{ player setDamage 1 },\n\t{ hint \"Afraid of death?\" },\n\t[], 10, nil, true, false\n] call BIS_fnc_holdActionAdd;\n\n```"
                },
                {
                    "text": "```sqf\n\n// adds the action to every client and JIP, but also adds it when it was already removed. E.g., Laptop has already been hacked by a player\n[\n\t_myLaptop,\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Object the action is attached to\n\t\"Hack Laptop\",\t\t\t\t\t\t\t\t\t\t\t\t\t// Title of the action\n\t\"\\a3\\ui_f\\data\\IGUI\\Cfg\\holdactions\\holdAction_connect_ca.paa\",\t// Idle icon shown on screen\n\t\"\\a3\\ui_f\\data\\IGUI\\Cfg\\holdactions\\holdAction_connect_ca.paa\",\t// Progress icon shown on screen\n\t\"_this distance _target < 3\",\t\t\t\t\t\t\t\t\t// Condition for the action to be shown\n\t\"_caller distance _target < 3\",\t\t\t\t\t\t\t\t\t// Condition for the action to progress\n\t{},\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Code executed when action starts\n\t{},\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Code executed on every progress tick\n\t{ _this call MY_fnc_hackingCompleted },\t\t\t\t\t\t\t// Code executed on completion\n\t{},\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Code executed on interrupted\n\t[],\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Arguments passed to the scripts as _this select 3\n\t12,\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Action duration in seconds\n\t0,\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Priority\n\ttrue,\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Remove on completion\n\tfalse\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Show in unconscious state\n] remoteExec [\"BIS_fnc_holdActionAdd\", 0, _myLaptop];\t\t\t\t// MP-compatible implementation\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Object` - object the action is attached to"
                        },
                        {
                            "name": "title",
                            "description": "`String` - title of the action shown in the action menu.It can contain [Structured Text](https://community.bistudio.com/wiki/Structured%20Text) tags, such as <syntaxhighlight lang=\"html\" inline><t color='#FFAA00'>text</t></syntaxhighlight>"
                        },
                        {
                            "name": "idleIcon",
                            "description": "`String` - (Optional, default \"\\A3\\Ui_f\\data\\IGUI\\Cfg\\HoldActions\\holdAction_revive_ca.paa\") path of the idle icon shown on screen"
                        },
                        {
                            "name": "progressIcon",
                            "description": "`String` - (Optional, default \"\\A3\\Ui_f\\data\\IGUI\\Cfg\\HoldActions\\holdAction_revive_ca.paa\") path of the progress icon shown on screen"
                        },
                        {
                            "name": "conditionShow",
                            "description": "`String` - (Optional, default \"true\") condition for the action to be shown."
                        },
                        {
                            "name": "conditionProgress",
                            "description": "`String` - (Optional, default \"true\") condition for the action to progress; if false is returned action progress is paused."
                        },
                        {
                            "name": "codeStart",
                            "description": "`Code` - (Optional, default <sqf inline>{}) code executed when action starts."
                        },
                        {
                            "name": "codeProgress",
                            "description": "`Code` - (Optional, default <sqf inline>{}) code executed on every progress tick."
                        },
                        {
                            "name": "codeCompleted",
                            "description": "`Code` - (Optional, default <sqf inline>{}) code executed on completion."
                        },
                        {
                            "name": "codeInterrupted",
                            "description": "`Code` - (Optional, default <sqf inline>{}) code executed on interrupted."
                        },
                        {
                            "name": "arguments",
                            "description": "`Array` - (Optional, default <sqf inline>[]) arguments passed to **codeStart**, **codeProgress**, **codeCompleted** and **codeInterrupted** (max 10) in format:"
                        },
                        {
                            "name": "duration",
                            "description": "`Number` - (Optional, default 10) action duration, i.e. how much time it takes to complete the action"
                        },
                        {
                            "name": "priority",
                            "description": "`Number` - (Optional, default 1000) priority value; actions are arranged in descending order according to this value"
                        },
                        {
                            "name": "removeCompleted",
                            "description": "`Boolean` - (Optional, default `true`) remove on completion"
                        },
                        {
                            "name": "showUnconscious",
                            "description": "`Boolean` - (Optional, default `false`) show in unconscious state"
                        },
                        {
                            "name": "showWindow",
                            "description": "`Boolean` - (Optional, default `true`) show on screen; if false action needs to be selected from action menu to appear on screen"
                        }
                    ],
                    "outline": "[target, title, idleIcon, progressIcon, conditionShow, conditionProgress, codeStart, codeProgress, codeCompleted, codeInterrupted, arguments, duration, priority, removeCompleted, showUnconscious, showWindow] call `BIS_fnc_holdActionAdd`",
                    "returns": "`Number` - action ID"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_holdActionAdd"
        },
        "configuration": {
            "label": "BIS_fnc_holdActionAdd",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Removes a hold action. This does exactly the same as `removeAction`.",
            "examples": [
                {
                    "text": "```sqf\n[player,10] call BIS_fnc_holdActionRemove;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Object` - object the action is attached to"
                        },
                        {
                            "name": "ID",
                            "description": "`Number` - action ID"
                        }
                    ],
                    "outline": "[target,ID] call `BIS_fnc_holdActionRemove`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_holdActionRemove"
        },
        "configuration": {
            "label": "BIS_fnc_holdActionRemove",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Function that executes code when a key has been held down for a long enough time - \"Hold X to Advance\" text is displayed when any key is pressed.\n\nAll other keys (but {{Controls|Esc}}) are deactivated until the conditions are met - only mouse controls work (character rotation and fire).",
            "examples": [
                {
                    "text": "```sqf\n[findDisplay 46, 36, 5, { hint \"Key 'J' pressed for 5 seconds\" }] spawn BIS_fnc_holdKey; // action is added to the mission display\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "display",
                            "description": "`Display` - (Optional, default <sqf inline>findDisplay 12 for map display) display the event is attached to. By default it is the map display"
                        },
                        {
                            "name": "key",
                            "description": "`Number` - (Optional, default 57 for {{Controls|Space}}) what key to press - see [DIK KeyCodes](https://community.bistudio.com/wiki/DIK%20KeyCodes)"
                        },
                        {
                            "name": "time",
                            "description": "`Number` - (Optional, default 3) how long the key has to be held down in seconds"
                        },
                        {
                            "name": "code",
                            "description": "`Code` - (Optional, default <sqf inline>{}) [scheduled](https://community.bistudio.com/wiki/Scheduler%23Scheduled%20Environment) code to be executed when key is held down for long enough"
                        },
                        {
                            "name": "control",
                            "description": "`Control` - (Optional, default `controlNull`) text control to be used in place of the default \"Press X to skip\" control."
                        }
                    ],
                    "outline": "[display, key, time, code, control] call `BIS_fnc_holdKey`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_holdKey"
        },
        "configuration": {
            "label": "BIS_fnc_holdKey",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Set helicopter advanced flight model HUD limits and prevents overwriting existing values. See also `setHUDMovementLevels`.\n**NOTE**: \n* default value is 0, which means no limits were assigned\n* using 0 in min or max value will hide the corresponding limit\n* same or higher priority will replace currently set priority\n* using a negative priority will reset the values if absolute value is same or higher than current level",
            "examples": [
                {
                    "text": "```sqf\n[[0,0,0], [1, 0, 50], [0,0,0]] call BIS_fnc_HUDLimits; // limits altitude on HUD to 50m max\n```"
                },
                {
                    "text": "```sqf\n[[0,0,0], [0, 0, 0], [1,330,30, myTarget]] call BIS_fnc_HUDLimits; // limits orientation towards myTarget by ±30°\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "speedLimit",
                            "description": "`Array` in format [priority, min, max]:"
                        },
                        {
                            "name": "altLimit",
                            "description": "`Array` in format [priority, min, max]:"
                        },
                        {
                            "name": "dirLimit",
                            "description": "`Array` in format [priority, min, max, target]:"
                        }
                    ],
                    "outline": "[speedLimit, altLimit, dirLimit] call `BIS_fnc_HUDLimits`",
                    "returns": "`Array` - current value of `HUDMovementLevels`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_HUDLimits"
        },
        "configuration": {
            "label": "BIS_fnc_HUDLimits",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Imports CfgVehicles image links from Community Wiki (https://community.bistudio.com/).\n# Run the script. It will copy a text into clipboard\n# Open your [[Special:MyPage/Sandbox|Sandbox]] and paste the text into edit field\n# **Preview** the page (don't save it)\n# Copy the resulting text and use it in your scripts\n\nResult is to the following format:\n\n```sqf\n\n_imagesCfgVehicles = [\n\t\"papercar\",\"https://community.bistudio.com/wikidata/images/8/85/Arma3_CfgVehicles_PaperCar.jpg\",\n\t\"firesectortarget\",\"\",\n\t\"building\",\"\",\n\t// etc\n];\n\n```\n\n\n**IMPORTANT**: Be wary that this function is **CPU-demanding** and may lock your computer for 5-10 seconds!",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_importImageLinks;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_importImageLinks`",
                    "returns": "`Boolean` - `true` when done"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_importImageLinks"
        },
        "configuration": {
            "label": "BIS_fnc_importImageLinks",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "[[File:BIS_fnc_inAngleSector.jpg|500px|right]]\nChecks if a position lies within an angle sector.",
            "examples": [
                {
                    "text": "```sqf\n[getPosWorld player, getDir player, 30, getPosWorld enemy_tank] call BIS_fnc_inAngleSector;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "center ",
                            "description": "`Array` - center position"
                        },
                        {
                            "name": "centerAngle ",
                            "description": "`Number` - defines the center angle of the sector"
                        },
                        {
                            "name": "sectorWidth",
                            "description": "`Number` - defines the width of the sector in degrees"
                        },
                        {
                            "name": "position",
                            "description": "`Array` - the position which should be checked"
                        }
                    ],
                    "outline": "[center, centerAngle, sectorWidth, position] call `BIS_fnc_inAngleSector`",
                    "returns": "`Boolean` - `true` if the position lies within the defined sector"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_inAngleSector"
        },
        "configuration": {
            "label": "BIS_fnc_inAngleSector",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "A draft of incapacitated effects function. **WARNING**: Does nothing, as the whole code is commented out.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_incapacitatedEffect;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_incapacitatedEffect`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_incapacitatedEffect"
        },
        "configuration": {
            "label": "BIS_fnc_incapacitatedEffect",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Shows a PP effect which indicates bleeding.\n **IMPORTANT**: Do not use,WIP!",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_indicateBleeding;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_indicateBleeding`",
                    "returns": "`Nothing` (**BIS_applyPP7** returns `true`)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_indicateBleeding"
        },
        "configuration": {
            "label": "BIS_fnc_indicateBleeding",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "[[File:BIS_fnc_infoText.gif|thumb|right|Example (Click to enlarge)]] Display a text in the \"mission\" GUI area with some effects. Good for the beginning of a mission.",
            "examples": [
                {
                    "text": "```sqf\n[\"Somewhere on Altis\", format [\"Year %1\", date select 0], mapGridPosition player] spawn BIS_fnc_infoText;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[string_1, string_2, string_n] spawn `BIS_fnc_infoText`",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_infoText"
        },
        "configuration": {
            "label": "BIS_fnc_infoText",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: This function is used internally by the [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor) to set the inventory of vehicles.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_initAmmoBox"
        },
        "configuration": {
            "label": "BIS_fnc_initAmmoBox",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_initCuratorAttribute;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_initCuratorAttribute` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_initCuratorAttribute"
        },
        "configuration": {
            "label": "BIS_fnc_initCuratorAttribute",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "This function is a central part of how BI handles UIs. For a full explanation see [this page](https://community.bistudio.com/wiki/GUI_Tutorial%23BIS_fnc_initDisplay).",
            "examples": [
                {
                    "text": "```sqf\n[\"onLoad\", _this, \"RscDisplayAAR\", \"GUI\", true] call (uiNamespace getVariable \"BIS_fnc_initDisplay\");\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "parameters",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "parameters call `BIS_fnc_initDisplay`",
                    "returns": "Nothing"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_initDisplay"
        },
        "configuration": {
            "label": "BIS_fnc_initDisplay",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Disable parts of the main menu during public presentation. Press {{Controls|Ctrl|Shift|U}} to toggle the lock.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_initExpo;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_initExpo`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_initExpo"
        },
        "configuration": {
            "label": "BIS_fnc_initExpo",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Initialize inspectable object: add \"Inspect\" action to the object. When a player activates it, full-screen detail of the objects is shown.",
            "examples": [
                {
                    "text": "```sqf\n[myLeaflet, \"#(argb,8,8,3)color(1,0,1,1)\", \"This is some Magic Pink\"] call BIS_fnc_initInspectable; // initialize\n```"
                },
                {
                    "text": "```sqf\n[myLeaflet, true] call BIS_fnc_initLeaflet; // Show preview instantly\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "inspectable",
                            "description": "`Object` - object on which the action is added"
                        },
                        {
                            "name": "textureInfos",
                            "description": "can be one of the following:"
                        },
                        {
                            "name": "fullScreenText",
                            "description": "`String` - text to be shown after clicking on READ button. Ideally localized."
                        },
                        {
                            "name": "soundName",
                            "description": "`String` - sound played when entering full-screen preview. Sould be defined in [[Description.ext#CfgSounds|CfgSounds]]."
                        }
                    ],
                    "outline": "[inspectable, textureInfos, fullScreenText, soundName] call `BIS_fnc_initInspectable`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_initInspectable"
        },
        "configuration": {
            "label": "BIS_fnc_initInspectable",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "This function sets up an object as intel retrievable by the players by adding a \"Take Intel\" `addAction` to it.\n\nWhen a player uses the action, they will play an animation to pick the object up and the object will be deleted from the mission.\n\nThe player and any defined recipients will then receive a diary entry which can contain a _title_, _description_ and _picture_.\n\nThe diary entry will also contain a marker shortcut showing where the intel was found.\n\n\nThis function is similar to placing an intel object as Zeus, but the Zeus interface provides some extra options like:\n\n* Which sides can interact with the action\n* The picture, title and description used in the diary entry\n\n\nWhen using this function from script there are several variables that need to be set up to acquire the same results (see the examples below).\n\nWithout this extra setup the functionality provided is minimal and only includes:\n* The \"Take Intel\" action on the object\n* The object can be picked up by a player from any side\n* When picked up it will have no title or description and the picture will be a default exclamation mark\n* The diary entry will only be given to the person who picked it up\n\n\nThere are some optional features of intel objects that can be used:\n* The diary entry's _description_ can be further enhanced by using the supported tags found on the `createDiaryRecord` page.\n* There is also a [scripted eventhandler](https://community.bistudio.com/wiki/BIS_fnc_addScriptedEventHandler) called _\"IntelObjectFound\"_ that can be registered  on the intel object. The event provides the parameters [object, caller] where _object_ is the intel object and _caller_ the person who picked it up.\n* A Zeus who has the intel object registered as a curator editable object can also receive feedback that the intel has been picked up if the [scripted eventhandler](https://community.bistudio.com/wiki/BIS_fnc_addScriptedEventHandler) called _\"intelObjectFound\"_ was registered on the curator module. The event provides the parameters [zeus, caller, object] where _zeus_ is the curator module, _caller_ the person who picked it up and _object_ is the intel object.\nThe usage of these scripted event handlers is shown in {{Link|#Example 3}}.",
            "examples": [
                {
                    "text": "Setup an object as intel from its init attribute in the editor.\n\nBasic version including _picture_, _title_, _description_, _recipients_ and _sides that can interact with it_:\n\n```sqf\n\n[this] call BIS_fnc_initIntelObject;\n\nif (isServer) then\n{\n\t// Diary picture:\n\tthis setVariable [\n\t\t\"RscAttributeDiaryRecord_texture\",\n\t\t\"a3\\structures_f_epc\\Items\\Documents\\Data\\document_secret_01_co.paa\", // Path to picture\n\t\ttrue\n\t];\n\n\t// Diary Title and Description:\n\t[\n\t\tthis,\n\t\t\"RscAttributeDiaryRecord\",\n\t\t[\"New Intel\", \"The enemies have a cave troll!\"] // Array in format [Title, Description]\n\t] call BIS_fnc_setServerVariable;\n\n\t// Diary entry shared with (follows BIS_fnc_MP target rules):\n\tthis setVariable [\"recipients\", west, true];\n\n\t// Sides that can interact with the intel object:\n\tthis setVariable [\"RscAttributeOwners\", [west], true];\n};\n\n```"
                },
                {
                    "text": "To set up an object as intel from its init attribute in the editor with a custom `addAction` title, replace the first line of {{Link|#Example 1}} with the following:\n\n```sqf\n\nif (hasInterface) then\n{\n\tthis addAction [\n\t\t\"Pick up laptop\", // custom addAction title\n\t\t{ [_this, \"action\"] spawn BIS_fnc_initIntelObject },\n\t\t[],\n\t\t10,\n\t\ttrue,\n\t\ttrue,\n\t\t\"\",\n\t\t\"isPlayer _this && { _this distance _target < 2 } &&\n\t\t{ (side group _this) in (_target getVariable ['RscAttributeOwners', [west, east, resistance, civilian]]) }\"\n\t];\n};\n\n```"
                },
                {
                    "text": "Set up an object as intel from its init attribute in the editor.\n\nBasic version plus curator and scripted event handlers:\n\n```sqf\n\n[this] call BIS_fnc_initIntelObject;\n\nif (isServer) then\n{\n\t// Diary picture:\n\tthis setVariable [\n\t\t\"RscAttributeDiaryRecord_texture\",\n\t\t\"a3\\structures_f_epc\\Items\\Documents\\Data\\document_secret_01_co.paa\", // Path to picture\n\t\ttrue\n\t];\n\n\t// Diary Title and Description:\n\t[\n\t\tthis,\n\t\t\"RscAttributeDiaryRecord\",\n\t\t[\"New Intel\", \"The enemies have a cave troll!\"] // Array in format [Title, Description]\n\t] call BIS_fnc_setServerVariable;\n\n\t// Diary entry shared with (follows BIS_fnc_MP target rules):\n\tthis setVariable [\"recipients\", west, true];\n\n\t// Sides that can interact with the intel object:\n\tthis setVariable [\"RscAttributeOwners\", [west], true];\n\n\t// Register intel object with Zeus as curator editable (_zeus is the curator module):\n\t_zeus addCuratorEditableObjects [[this], false];\n\n\t// Add Zeus scripted event:\n\t[_zeus, \"IntelObjectFound\", {hint \"Intel found\"}] call BIS_fnc_addScriptedEventHandler;\n\n\t// Add a scripted event that notifies all clients via systemChat when the intel is found:\n\t[\n\t\tthis,\n\t\t\"IntelObjectFound\",\n\t\t{\n\t\t\tparams [\"\", \"_foundBy\"];\n\t\t\tprivate _msg = format [\"Intel found by %1\", name _foundBy];\n\t\t\t_msg remoteExec [\"systemChat\", 0];\n\t\t}\n\t] call BIS_fnc_addScriptedEventHandler;\n};\n\n```\n\nAlthough both scripted event handlers supply a reference to the intel object, it is deleted from the mission almost immediately, so it could already be [null](https://community.bistudio.com/wiki/objNull) when queried."
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - object to place intel action on"
                        }
                    ],
                    "outline": "[object] call `BIS_fnc_initIntelObject`",
                    "returns": "`Boolean` - `true` when done"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_initIntelObject"
        },
        "configuration": {
            "label": "BIS_fnc_initIntelObject",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Initialise interactive leaflet.",
            "examples": [
                {
                    "text": "```sqf\n[\"init\", [myLeaflet, \"#(argb,8,8,3)color(1,1,0,1)\", \"Yellow pages\"]] call BIS_fnc_initLeaflet;\n```"
                },
                {
                    "text": "```sqf\n[\"init\", [myLeaflet, \"Custom_02\"]] call BIS_fnc_initLeaflet;\n```"
                },
                {
                    "text": "```sqf\n[\"init\", [myLeaflet, \"West\"]] call BIS_fnc_initLeaflet;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`String` - \"init\" for scripted initialization, other modes are used when leaflets are fired as a weapon"
                        },
                        {
                            "name": "parameters",
                            "description": "`Array` in format:"
                        }
                    ],
                    "outline": "[mode, parameters] call `BIS_fnc_initLeaflet`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_initLeaflet"
        },
        "configuration": {
            "label": "BIS_fnc_initLeaflet",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "[[File:A3_BIS_fnc_initListNBoxSorting_example.jpg|thumb|right|A GUI using `BIS_fnc_initListNBoxSorting`]]\nAutomatically creates buttons and sets them up so they can be used to sort a `CT_LISTNBOX`. The buttons will automatically be resized to fit the column width of **ctrlFilter**.\n\nBy default, the **ctrlContent** columns are sorted by `lnbText` (using `lnbSort`). If a specific column should be sorted by `lnbValue` (using `lnbSortByValue`) instead, then something needs to be set in the data of the corresponding **ctrlFilter** column (literally _something_, the condition in the source code is <sqf inline>(_ctrlFilter lnbData [0, _i]) != \"\").\n\nRegarding **ctrlFilter**:\n* The position and size of this control define where the buttons for sorting are created, thus it should be placed above **ctrlContent** and its columns should have the same size as the columns of **ctrlContent**.\n* The text set in the columns is displayed as text for the buttons (the buttons are actually transparent).\n* The control can also be part of a `CT_CONTROLS_GROUP`. If that is the case, the buttons will be created as children of that group.\n* To keep a uniform style between vanilla and custom controls it is recommended to create a background with `CT_STATIC` behind **ctrlFilter** with <syntaxhighlight lang=\"cpp\" inline>colorBackground[] = { 0, 0, 0, 1 };</syntaxhighlight>.\nSee {{Link|CT_LISTNBOX#BIS_fnc_initListNBoxSorting Example}} for a full example including a config.",
            "examples": [
                {
                    "text": "```sqf\n[_lnbFilter, _lnbContent, [0,1,2,3]] call BIS_fnc_initListNBoxSorting;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "ctrlFilter",
                            "description": "`Control` - dummy `CT_LISTNBOX` control used for setting up the filter."
                        },
                        {
                            "name": "ctrlContent",
                            "description": "`Control` - the `CT_LISTNBOX` which actually contains the sortable content."
                        },
                        {
                            "name": "columnIndexes",
                            "description": "`Array` of `Number`s - (Optional, default: []) these are the column indexes of _ctrlContent_ which should be sortable. An empty array means all columns are sortable."
                        },
                        {
                            "name": "idc",
                            "description": "`Number` - (Optional, default: 200) used to assign IDCs to the buttons created by this function. The first button has **idc**, the second button has **idc** + 1 and so on."
                        }
                    ],
                    "outline": "[ctrlFilter, ctrlContent, columnIndexes, idc] call `BIS_fnc_initListNBoxSorting`",
                    "returns": "`Boolean` - `true` on success, otherwise `false`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_initListNBoxSorting"
        },
        "configuration": {
            "label": "BIS_fnc_initListNBoxSorting",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Wait until all modules using the [[Modules|Arma 3: Module Framework]] are initialised.",
            "examples": [
                {
                    "text": "```sqf\n[module_1,module_2] call BIS_fnc_initModules;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "modules",
                            "description": "`Array` of `Object`s - modules to be activated"
                        }
                    ],
                    "outline": "[modules] call `BIS_fnc_initModules`",
                    "returns": "`Boolean` - always returns `true`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_initModules"
        },
        "configuration": {
            "label": "BIS_fnc_initModules",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Multiplayer mission init, executed automatically upon mission start. **Arma**: 3|This is an internal function.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_initMultiplayer;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_initMultiplayer`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_initMultiplayer"
        },
        "configuration": {
            "label": "BIS_fnc_initMultiplayer",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Initialize [mission params](https://community.bistudio.com/wiki/Mission%20Parameters) and create log in the diary.<br/>\n\nSince **(Arma 3)** it is possible to deactivate automatic parameter initialization in **singleplayer** by setting `**BIS_fnc_initParams_skip**` to `true` in [preInit](https://community.bistudio.com/wiki/Arma%203%3A%20Functions%20Library).",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_initParams;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "[modules] call `BIS_fnc_initParams`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_initParams"
        },
        "configuration": {
            "label": "BIS_fnc_initParams",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_initPlayable;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_initPlayable` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_initPlayable"
        },
        "configuration": {
            "label": "BIS_fnc_initPlayable",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_initRespawn;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_initRespawn` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_initRespawn"
        },
        "configuration": {
            "label": "BIS_fnc_initRespawn",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Init respawn backpack.\n\tWhover \"assembles\" it will receive a new respawn position.\n\tWhen backpack object has 'respawnNearbyPlayers' attribute set to 1, nearby player will receive the respawn as well.",
            "examples": [
                {
                    "text": "`call` `BIS_fnc_initRespawnBackpack`;"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_initRespawnBackpack`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_initRespawnBackpack"
        },
        "configuration": {
            "label": "BIS_fnc_initRespawnBackpack",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Initialises a slider attribute control within the [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor). Can also be used outside of [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor). **NOTE**:  The slider and the edit control have to share the same controls group!",
            "examples": [
                {
                    "text": "```sqf\n[_this controlsGroupCtrl 100, _this controlsGroupCtrl 101, \"m\", 50] call BIS_fnc_initSliderValue;\n```"
                },
                {
                    "text": "```sqf\n// Execute in Eden Editor to preview the functionality\nif !(is3DEN) exitWith {};\n\nprivate _display = findDisplay 313;\nprivate _GRID_H = pixelGrid * pixelH * 0.5;\nprivate _GRID_W = pixelGrid * pixelW * 0.5;\n\n// Function only works if slider and edit control share the same group\nprivate _ctrlGroup = _display ctrlCreate [\"ctrlControlsGroupNoScrollbars\", -100];\n_ctrlGroup ctrlSetPosition [0, 0, 101 * _GRID_W, 5 * _GRID_H];\n\n// Setup the slider\nprivate _ctrlSlider = _display ctrlCreate [\"ctrlXSliderH\", -101, _ctrlGroup];\n_ctrlSlider ctrlSetPosition [0, 0, 50 * _GRID_W, 5 * _GRID_H];\n_ctrlSlider sliderSetRange [100, 2000];\n\n// Setup the edit control\nprivate _ctrlEdit = _display ctrlCreate [\"ctrlEdit\", -102, _ctrlGroup];\n_ctrlEdit ctrlSetPosition [51 * _GRID_W, 0, 25 * _GRID_W, 5 * _GRID_H];\n\n_ctrlSlider ctrlCommit 0;\n_ctrlEdit ctrlCommit 0;\n_ctrlGroup ctrlCommit 0;\n\n// Set default value\n[_ctrlSlider, _ctrlEdit, \"m\", 200] call BIS_fnc_initSliderValue;\n\n// Added eventhandlers to controls\n[_ctrlSlider, _ctrlEdit, \"m\"] call BIS_fnc_initSliderValue;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "ctrlSlider",
                            "description": "`Control` - slider control, usually the first control within the controls group"
                        },
                        {
                            "name": "ctrlEdit",
                            "description": "`Control` - edit Box, usually the second control within the controls group"
                        },
                        {
                            "name": "unit",
                            "description": "`String` - measurement unit added behind the number within the edit box (\"%\" by default)"
                        },
                        {
                            "name": "default",
                            "description": "`Number` - when present, only the value is set, functionality is not initialized"
                        }
                    ],
                    "outline": "[ctrlSlider, ctrlEdit, unit, default] call `BIS_fnc_initSliderValue`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_initSliderValue"
        },
        "configuration": {
            "label": "BIS_fnc_initSliderValue",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "This function changes the textures, animation sources and/or mass of a given vehicle.\n\nUnless explicitly mentioned , the function will restore the initial state of every animation sources of the given object (see {{Link|#Example 3}}).",
            "examples": [
                {
                    "text": "```sqf\nresult = [this, \"\", []] call BIS_fnc_initVehicle;\n```"
                },
                {
                    "text": "```sqf\nresult = [this, [\"MyTextureSource1\", 0.5, \"MyTextureSource2\", 0.6], []] call BIS_fnc_initVehicle;\n```"
                },
                {
                    "text": "```sqf\nresult = [this, nil, [\"MyAnimationSource1\", 0.5, \"MyAnimationSource2\", 0.7]] call BIS_fnc_initVehicle;\n```"
                },
                {
                    "text": "```sqf\n\n// randomise camo net options with 50% probability\n[vehicle player, false, [\"showcamonethull\", 0.5, \"showcamonetturret\", 0.5, \"showcamonetcannon\", 0.5, \"showslathull\", 0.5]] call BIS_fnc_initVehicle;\n\n```"
                },
                {
                    "text": "```sqf\n\n// force show all camo net options. Use animationNames to get all available animation sources. Vehicles that don't support certain animations are simply ignored.\n[vehicle player, false, [\"showcamonethull\", 1, \"showcamonetturret\", 1, \"showcamonetcannon\", 1, \"showslathull\", 1]] call BIS_fnc_initVehicle;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - vehicle to customize"
                        },
                        {
                            "name": "variant",
                            "description": "(Optional, default `false`)"
                        },
                        {
                            "name": "animations",
                            "description": "(Optional, default `false`)"
                        },
                        {
                            "name": "mass",
                            "description": "(Optional, default `false`)"
                        }
                    ],
                    "outline": "[vehicle, variant, animations, mass] call `BIS_fnc_initVehicle`",
                    "returns": "`Boolean` - function success or not"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_initVehicle"
        },
        "configuration": {
            "label": "BIS_fnc_initVehicle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Moves units into vehicle seats. When units don't exist, it will create them in a group of vehicle's side.",
            "examples": [
                {
                    "text": "```sqf\n[someVehicle, [player, \"driver\", 0], true, true] call BIS_fnc_initVehicleCrew;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "params",
                            "description": "`Array` - in format:"
                        },
                        {
                            "name": "deleteCrew",
                            "description": "`Boolean` - (Optional, default `false`) `true` to delete existing crew"
                        },
                        {
                            "name": "anySeat",
                            "description": "`Boolean` - (Optional, default `false`) when desired seats are occuppied, move crew in the vehicle to any other available seat"
                        },
                        {
                            "name": "agents",
                            "description": "`Boolean` - (Optional, default `false`) create crew as `agents`"
                        }
                    ],
                    "outline": "[object, params, deleteCrew, anySeat, agents] call `BIS_fnc_initVehicleCrew`",
                    "returns": "`Array` - created units"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_initVehicleCrew"
        },
        "configuration": {
            "label": "BIS_fnc_initVehicleCrew",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Customise given kart and its driver.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_kart, [9,7], -1, -1] call BIS_fnc_initVehicleKart;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "kart",
                            "description": "`Object`"
                        },
                        {
                            "name": "number",
                            "description": "`Array` - (Optional, default [-1,-1]) kart number from 00 to 99"
                        },
                        {
                            "name": "livery",
                            "description": "`Number` - (Optional, default _Random_) kart livery. A integer from 0 to 9"
                        },
                        {
                            "name": "raceTeam",
                            "description": "`Number` - (Optional, default _Matches the livery_) driver uniform"
                        }
                    ],
                    "outline": "[kart,number,livery,raceTeam] call `BIS_fnc_initVehicleKart`",
                    "returns": "`Boolean` - always `true`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_initVehicleKart"
        },
        "configuration": {
            "label": "BIS_fnc_initVehicleKart",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Initialize virtual unit. Disable it, turn the camera upwards and save its correct side.",
            "examples": [
                {
                    "text": "```sqf\nsomeObject call BIS_fnc_initVirtualUnit;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - object to be turned into virtual unit"
                        }
                    ],
                    "outline": "[object] call `BIS_fnc_initVirtualUnit`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_initVirtualUnit"
        },
        "configuration": {
            "label": "BIS_fnc_initVirtualUnit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Karel Moricky\n\n\tDescription:\n\t\tInitialize world scene\n\n\tParameter(s):\n\t\tARRAY of CODEs - random code will be selected and called. The code should contain scene init\n\n\tReturns:\n\t\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_initWorldScene`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_initWorldScene"
        },
        "configuration": {
            "label": "BIS_fnc_initWorldScene",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Find a string within a string.",
            "examples": [
                {
                    "text": "```sqf\n[\"rabbit\", \"I ate a rabbit today\"] call BIS_fnc_inString // will return true\n```"
                },
                {
                    "text": "```sqf\n[\"RaBbiT\", \"I ate a rabbit today\"] call BIS_fnc_inString // will return true\n```"
                },
                {
                    "text": "```sqf\n[\"RaBbiT\", \"I ate a rabbit today\", true] call BIS_fnc_inString // will return false because of case sensitivity\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "searchTerm",
                            "description": "`String` - string to find"
                        },
                        {
                            "name": "searchText",
                            "description": "`String` - string to search in"
                        },
                        {
                            "name": "caseSensitive (optional)",
                            "description": "`Boolean` - defines whether the search is case-sensitive (true) or not (false, by default)"
                        }
                    ],
                    "outline": "[searchTerm, searchText, caseSensitive] call `BIS_fnc_inString`",
                    "returns": "`Boolean` - true if search term is found, false if not"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_inString"
        },
        "configuration": {
            "label": "BIS_fnc_inString",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>\n/*******************************************************************************\n\tVersion:\t\t0.1\n\tName:\t\t\tInstructor Figure\n\tDESCRIPTION:\twww.  \n\tPARAMETERS:\t\t1) function called - string, list of functions:\n\t\t\t\t\t\t- Init\n\t\t\t\t\t\t- Destroy\n\t\t\t\t\t2) parameter for the function\n\t\t\t\t\tFor more information see https://wiki.bistudio.com/index.php/A3_InstructorFigure\n\tRETURNED VALUE:\tdepends on the function called\n\t\n\tTODO:\t        + PlayTopic\n\t\t\t\t\t+ Fade out New Intel text\n\t\t\t\t\t+ wait for TAB press\n\t\t\t\t\t+ use functions for dynamic text\n\t\t\t\t\t- kbTell support\n\t\t\t\t\t\t- logging\n\t\t\t\t\t\t+ rework data structure (add, remove, search)\n\t\t\t\t\t\t- ContainerExists function\n\t\t\t        + display only if difficulty is low\n\t\t\t\t\t+ disableSerialization\n\t\t\t\t\t+ GetTopics should return array, not just debuglog info\n\t\t\t\t\t+ deny play more than one topic in a time\n\t\t\t\t\t+ Localize\n\t\t\t\t\t+ check and fix return values of functions\n\t\t\t\t\t+ correct debuglog information\n\t\t\t\t\t- deny addtopic during playing\n\t\t\t\t\t+ safe work with BIS_GroupCommunication - dont overwrite user menus\n\t\t\t\t\t+ remove INSTRUCTOR FIGURE from BIS_GroupCommunication  \n\t\t\t\t\t+ PlayTopicRandom - rule exceeding selection of a previous sentence\n*******************************************************************************/\n\n//Variables\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_instructorFigure;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_instructorFigure` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_instructorFigure"
        },
        "configuration": {
            "label": "BIS_fnc_instructorFigure",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Interpolates scalar to target, starts fast, eases out",
            "examples": [
                {
                    "text": "```sqf\nprivate _value = [4,8,0.2,0.1] call BIS_fnc_interpolate;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "currentValue",
                            "description": "`Number` - the current value"
                        },
                        {
                            "name": "targetValue",
                            "description": "`Number` - the target value"
                        },
                        {
                            "name": "delta",
                            "description": "`Number` - (Optional, default 0) the delta time"
                        },
                        {
                            "name": "interpSpeed",
                            "description": "`Number` - (Optional, default 0) the interpolation speed"
                        }
                    ],
                    "outline": "[currentValue, targetValue, delta, interpSpeed] call `BIS_fnc_interpolate`",
                    "returns": "`Number` - the interpolated value"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_interpolate"
        },
        "configuration": {
            "label": "BIS_fnc_interpolate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Interpolates scalar to target linearly.",
            "examples": [
                {
                    "text": "```sqf\nprivate _value = [4,8,0.2,0.1] call BIS_fnc_interpolateConstant;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "currentValue",
                            "description": "`Number` - the current value"
                        },
                        {
                            "name": "targetValue",
                            "description": "`Number` - the target value"
                        },
                        {
                            "name": "delta",
                            "description": "`Number` - (Optional, default 0) the delta time"
                        },
                        {
                            "name": "interpSpeed",
                            "description": "`Number` - (Optional, default 0) the interpolation speed"
                        }
                    ],
                    "outline": "[currentValue, targetValue, delta, interpSpeed] call `BIS_fnc_interpolateConstant`",
                    "returns": "`Number` - the interpolated value"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_interpolateConstant"
        },
        "configuration": {
            "label": "BIS_fnc_interpolateConstant",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Interpolates vector to target, scaled by distance.\nStarts very fast and smoothes out.",
            "examples": [
                {
                    "text": "```sqf\n[[1,1,1], [20,20,20], 0.2, 0.1] call BIS_fnc_interpolateVector;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "currentValue",
                            "description": "`Array` - the current value"
                        },
                        {
                            "name": "targetValue",
                            "description": "`Array` - the target value"
                        },
                        {
                            "name": "delta",
                            "description": "`Number` - (Optional, default 0) the delta time"
                        },
                        {
                            "name": "interpSpeed",
                            "description": "`Number` - (Optional, default 0) the interpolation speed"
                        }
                    ],
                    "outline": "[currentValue, targetValue, delta, interpSpeed] call `BIS_fnc_interpolateVector`",
                    "returns": "`Array` - the interpolated value"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_interpolateVector"
        },
        "configuration": {
            "label": "BIS_fnc_interpolateVector",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Interpolates vector to target linearly.",
            "examples": [
                {
                    "text": "```sqf\n[[1,1,1], [20,20,20], 0.2, 0.1] call BIS_fnc_interpolateVectorConstant;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "currentValue",
                            "description": "`Array` - the current value"
                        },
                        {
                            "name": "targetValue",
                            "description": "`Array` - the target value"
                        },
                        {
                            "name": "delta",
                            "description": "`Number` - (Optional, default 0) the delta time"
                        },
                        {
                            "name": "interpSpeed",
                            "description": "`Number` - (Optional, default 0) the interpolation speed"
                        }
                    ],
                    "outline": "[currentValue, targetValue, delta, interpSpeed] call `BIS_fnc_interpolateVectorConstant`",
                    "returns": "`Array` - the interpolated value"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_interpolateVectorConstant"
        },
        "configuration": {
            "label": "BIS_fnc_interpolateVectorConstant",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tInterpolate weather (overcast and fog) according to 2 boundry dates and their weather conditions.\n\n\tParameter(s):\n\t_this select 0: array\t- _date1 \t[_year1,_month1,_day1,_hour1,_min1]\n\t_this select 1: array\t- _weather1\t[_overcast1,_fog1]\n\t_this select 2: array\t- _date2 \t[_year2,_month2,_day2,_hour2,_min2]\n\t_this select 3: array\t- _weather2\t[_overcast2,_fog2]\n\t_this select 4: array\t- _subjectDate \t[_year,_month,_day,_hour,_min] (default: current date)\n\n\tReturns:\n\t[_interpolatedOvercast,_interpolatedFog]\n\n\tExample:\n\t[_overcast,_fog] = [[2035,1,5,24,00],[0.1,0.5],[2035,1,10,24,00],[0.3,0.2],[2035,1,7,24,00]] call BIS_fnc_interpolateWeather;\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_interpolateWeather;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_interpolateWeather` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_interpolateWeather"
        },
        "configuration": {
            "label": "BIS_fnc_interpolateWeather",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Detects whether position is within area **or** calculates distance to the nearest edge of trigger area by using optional params.\n**Arma**: 3|Since {{arma3 v1.57 `inArea` is available for an area check.}}",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _trigger = createTrigger [\"EmptyDetector\", getPosATL player];\n_trigger setTriggerArea [10, 10, 0, false];\n_inTrigger = [_trigger, player] call BIS_fnc_inTrigger; // _inTrigger = true\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "area",
                            "description": "`Object`, `String`, `Location` or `Array`"
                        },
                        {
                            "name": "position",
                            "description": "`Object` or `Array` - position to check (e.g. `player`) or `Position`"
                        },
                        {
                            "name": "returnDistance",
                            "description": "`Boolean` - (Optional, default `false`) `true` to return distance to nearest edge of trigger area"
                        },
                        {
                            "name": "includeFloorCeiling",
                            "description": "`Boolean` - (Optional, default `false`) to include trigger area floor and ceiling in calculation when calculating distance to nearest edge"
                        }
                    ],
                    "outline": "[area, position, returnDistance, includeFloorCeiling] call `BIS_fnc_inTrigger`",
                    "returns": "* `Boolean` - `true` when position is in area, false if not\n* `Number` - (when _returnDistance_ is `true`) - distance from closest border: negative distance - from inside, positive distance - from outside"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_inTrigger"
        },
        "configuration": {
            "label": "BIS_fnc_inTrigger",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns inventory contents of given vehicle (unit). For vehicles it returns mounted gun and its ammo, **not** cargo weapons and ammo.",
            "examples": [
                {
                    "text": "```sqf\n[player] call BIS_fnc_inv;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit or vehicle"
                        }
                    ],
                    "outline": "[unit] call `BIS_fnc_inv`",
                    "returns": "`Array` of `Config` - weapons then magazines"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_inv"
        },
        "configuration": {
            "label": "BIS_fnc_inv",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Adds item to inventory - checks if there is room for it. Checks if add was done by engine.",
            "examples": [
                {
                    "text": "```sqf\n[player,\"someClass\"] call BIS_fnc_invAdd;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "class",
                            "description": "`String` - item class to be added"
                        },
                        {
                            "name": "force",
                            "description": "`Boolean` - (Optional, default `false`) `true` to force add item, other items might be removed"
                        }
                    ],
                    "outline": "[object,class,force] call `BIS_fnc_invAdd`",
                    "returns": "`Boolean` or `Array` - `true` when successfull, `Array` if force is set to `true` and items were removed (retuns items)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_invAdd"
        },
        "configuration": {
            "label": "BIS_fnc_invAdd",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Converts inventory code (used in configs) to array with numbers for weapons and magazines (and their counts).",
            "examples": [
                {
                    "text": "```sqf\n[call compile getText (configfile >> \"CfgVehicles\" >> typeOf player >> \"weaponSlots\")] call BIS_fnc_invCodeToArray;//Can return [1,0,0,0,0,0,0,0]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "configCode",
                            "description": "`Number` - config code, see example"
                        }
                    ],
                    "outline": "[configCode] call `BIS_fnc_invCodeToArray`",
                    "returns": "`Array` of `Number`s - items slots numbers"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_invCodeToArray"
        },
        "configuration": {
            "label": "BIS_fnc_invCodeToArray",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Check if loadout with given name exists.",
            "examples": [
                {
                    "text": "```sqf\nprivate _hasSuperLoadout = [missionNamespace, \"mySuperLoadout\"] call BIS_fnc_inventoryExists;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "source",
                            "description": "`Namespace`, `Group` or `Object` - (Optional, default `missionNamespace`) loadout location"
                        },
                        {
                            "name": "name",
                            "description": "`String` - (Optional, default \"\")"
                        }
                    ],
                    "outline": "[source, name] call `BIS_fnc_inventoryExists`",
                    "returns": "`Boolean` - `true` if found, `false` otherwise"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_inventoryExists"
        },
        "configuration": {
            "label": "BIS_fnc_inventoryExists",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Inverse of `BIS_fnc_lerp`.",
            "examples": [
                {
                    "text": "```sqf\n[10,20,0.5] call BIS_fnc_inverseLerp;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "currentValue",
                            "description": "`Number` - start"
                        },
                        {
                            "name": "targetValue",
                            "description": "`Number` - end"
                        },
                        {
                            "name": "alpha",
                            "description": "`Number` - alpha"
                        }
                    ],
                    "outline": "[currentValue, targetValue, alpha] call `BIS_fnc_inverseLerp`",
                    "returns": "`Number` - interpolated value"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_inverseLerp"
        },
        "configuration": {
            "label": "BIS_fnc_inverseLerp",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Removes from inventory. Given number of items. Returns actually removed items count.",
            "examples": [
                {
                    "text": "```sqf\n[player,\"someClass\",5] call BIS_fnc_invRemove;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "class",
                            "description": "`String` - item class to be added"
                        },
                        {
                            "name": "count",
                            "description": "`Number` - (Optional, default 1) number of items to be removed"
                        }
                    ],
                    "outline": "[object,class,count] call `BIS_fnc_invRemove`",
                    "returns": "`Number` - number of items which were removed"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_invRemove"
        },
        "configuration": {
            "label": "BIS_fnc_invRemove",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns config inventory slots of given unit (total numbers of available slots in array).",
            "examples": [
                {
                    "text": "```sqf\n\n[player] call BIS_fnc_invSlots;\t// returns [1,1,1,8,12,1,0,12] for \"B_T_Recon_TL_F\" class\n\t\t\t\t\t\t\t\t// means: 1 x WeaponSlotPrimary, 1 x WeaponSlotHangun, ... , 12 x WeaponSlotInventory\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "[object] call `BIS_fnc_invSlots`",
                    "returns": "`Array` - array with total available slots of all types that are given by config"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_invSlots"
        },
        "configuration": {
            "label": "BIS_fnc_invSlots",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns empty inventory slots of given unit.",
            "examples": [
                {
                    "text": "```sqf\n[player] call BIS_fnc_invSlotsEmpty;//Can return [0,0,-1,-7,0,-1,0,-12]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "[object] call `BIS_fnc_invSlotsEmpty`",
                    "returns": "`Array` - array with empty slots"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_invSlotsEmpty"
        },
        "configuration": {
            "label": "BIS_fnc_invSlotsEmpty",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns empty inventory slots of given unit.",
            "examples": [
                {
                    "text": "```sqf\n[currentWeapon player] call BIS_fnc_invSlotType;//Can return [1,0,0,0,0,0,0,0]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "class",
                            "description": "`String` - inventory item"
                        }
                    ],
                    "outline": "[class] call `BIS_fnc_invSlotType`",
                    "returns": "`Array` of `Number`s - numbers representing slots taken by given item (one item can take more slots of same or different type), empty if type 0 or not found"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_invSlotType"
        },
        "configuration": {
            "label": "BIS_fnc_invSlotType",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns inventory contents of given vehicle (unit).\n\t\n\tNote: for vehicles it returns mounted gun and its ammo, not cargo weapons and ammo.",
            "examples": [
                {
                    "text": "```sqf\n[player] call BIS_fnc_invString;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "[object] call `BIS_fnc_invString`",
                    "returns": "`Array` - weapons and magazines"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_invString"
        },
        "configuration": {
            "label": "BIS_fnc_invString",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Check whether a building or structure has available positions defined within model.",
            "examples": [
                {
                    "text": "```sqf\n[_building] call BIS_fnc_isBuildingEnterable;\n```"
                },
                {
                    "text": "```sqf\n[_building, _minNumberOfPositions] call BIS_fnc_isBuildingEnterable;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "param",
                            "description": "`Object`"
                        },
                        {
                            "name": "param",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "param call `BIS_fnc_isBuildingEnterable`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_isBuildingEnterable"
        },
        "configuration": {
            "label": "BIS_fnc_isBuildingEnterable",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Checks to see if a mission is being run in a campaign.",
            "examples": [
                {
                    "text": "```sqf\n[] call BIS_fnc_isCampaign;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "[] call `BIS_fnc_isCampaign`",
                    "returns": "`Boolean` - `true` if being run in a campaign, `false` if not"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_isCampaign"
        },
        "configuration": {
            "label": "BIS_fnc_isCampaign",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns if given object is curator logic. Despite the misleading name this does not check if a player has access to Zeus. It just check if the given object's simulation is of type \"curator\".",
            "examples": [
                {
                    "text": "```sqf\nplayer call BIS_fnc_isCurator;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - object which should be checked"
                        }
                    ],
                    "outline": "object call `BIS_fnc_isCurator`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_isCurator"
        },
        "configuration": {
            "label": "BIS_fnc_isCurator",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return `true` if given object is editable by player (when he's curator).",
            "examples": [
                {
                    "text": "```sqf\n[object_1] call BIS_fnc_isCuratorEditable;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - object to be checked"
                        }
                    ],
                    "outline": "[object] call `BIS_fnc_isCuratorEditable`",
                    "returns": "`Boolean` - `true` if editable, otherwise `false`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_isCuratorEditable"
        },
        "configuration": {
            "label": "BIS_fnc_isCuratorEditable",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns true if the first passed datetime is newer than the second one.",
            "examples": [
                {
                    "text": "```sqf\nprivate _isNewer = [[2035,5,28,13,37], [2032,5,28,13,37]] call BIS_fnc_isDateTimeNewer;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "date1",
                            "description": "`Array` format `Date`"
                        },
                        {
                            "name": "date2",
                            "description": "`Array` format `Date`"
                        }
                    ],
                    "outline": "[date1, date2] call `BIS_fnc_isDateTimeNewer`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_isDateTimeNewer"
        },
        "configuration": {
            "label": "BIS_fnc_isDateTimeNewer",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns true if debug console is allowed in current context",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_isDebugConsoleAllowed;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "returns": "`Boolean` - return `true` if allowed, `false` if not"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_isDebugConsoleAllowed"
        },
        "configuration": {
            "label": "BIS_fnc_isDebugConsoleAllowed",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns true when game version is demo.",
            "examples": [
                {
                    "text": "```sqf\nprivate _isDemo = call BIS_fnc_isDemo;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_isDemo`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_isDemo"
        },
        "configuration": {
            "label": "BIS_fnc_isDemo",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Checks whether two vectors are equal with given tolerance.",
            "examples": [
                {
                    "text": "```sqf\n[[1,1,1], [2,2,2], 1] call BIS_fnc_isEqualVector; // returns true\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vector1",
                            "description": "`Array` - vector 1"
                        },
                        {
                            "name": "vector2",
                            "description": "`Array` - vector 2"
                        },
                        {
                            "name": "tolerance",
                            "description": "`Number` - the tolerance"
                        }
                    ],
                    "outline": "[vector1, vector2, tolerance] call `BIS_fnc_isEqualVector`",
                    "returns": "`Boolean` - returns `true` if in tolerance, otherwise `false`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_isEqualVector"
        },
        "configuration": {
            "label": "BIS_fnc_isEqualVector",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return if curator interface is forced (user cannot leave it by pressing Zeus key).",
            "examples": [
                {
                    "text": "```sqf\nprivate _isForced = call BIS_fnc_isForcedCuratorInterface;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "[] call `BIS_fnc_isForcedCuratorInterface`",
                    "returns": "`Boolean` - `true` if forced, else `false`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_isForcedCuratorInterface"
        },
        "configuration": {
            "label": "BIS_fnc_isForcedCuratorInterface",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Check if an object is in front of another object (in the front 180°)",
            "examples": [
                {
                    "text": "```sqf\nprivate _isInstructorInFrontOfPlayer = [player, instructor, 0] call BIS_fnc_isInFrontOf;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "reference",
                            "description": "`Object` - the reference object"
                        },
                        {
                            "name": "checked",
                            "description": "`Object` - the object that has to be in front of _reference_"
                        },
                        {
                            "name": "offset",
                            "description": "`Number` - (Optional, default 0) allows to check from _offset_ meters in front of (positive), or behind (negative) _reference_"
                        }
                    ],
                    "outline": "[reference, checked, offset] call `BIS_fnc_isInFrontOf`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_isInFrontOf"
        },
        "configuration": {
            "label": "BIS_fnc_isInFrontOf",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Detects whether a position is within a square area of given size about center.",
            "examples": [
                {
                    "text": "```sqf\n// Check an area, centered on the player that is 10m wide and 10m tall\n_size = [5, 5];\n_checkPos = getPos player;\n_inArea = [_checkPos, _size, _checkPos] call BIS_fnc_isInsideArea;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "center",
                            "description": "`Array` - center `Position` of area to check"
                        },
                        {
                            "name": "size",
                            "description": "`Array` - [x,y] offsets from center"
                        },
                        {
                            "name": "position",
                            "description": "`Array` - `Position` to check"
                        }
                    ],
                    "outline": "[center, size, position] call `BIS_fnc_isInsideArea`",
                    "returns": "`Boolean` - true when position is in area, false otherwise"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_isInsideArea"
        },
        "configuration": {
            "label": "BIS_fnc_isInsideArea",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Checks if map zoom level is in between given interval.",
            "examples": [
                {
                    "text": "```sqf\n\nif ([[0.001, 0.02]] call BIS_fnc_isInZoom) then \n{\n  hint \"Zoom level is in between 0.001 and 0.02\";\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "min",
                            "description": "`Number` - start of interval"
                        },
                        {
                            "name": "max",
                            "description": "`Number` - end of interval"
                        }
                    ],
                    "outline": "[<nowiki/>[min, max]] call `BIS_fnc_isInZoom`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_isInZoom"
        },
        "configuration": {
            "label": "BIS_fnc_isInZoom",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns true if given year is a leap year, otherwise false.",
            "examples": [
                {
                    "text": "```sqf\nprivate _isLeapYear = 2035 call BIS_fnc_isLeapYear;\n```"
                },
                {
                    "text": "```sqf\nprivate _isLeapYear = 2036 call BIS_fnc_isLeapYear; // 2036 is a leap year\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "year",
                            "description": "`Number` - a non-decimal number (a.k.a integer)"
                        }
                    ],
                    "outline": "year call `BIS_fnc_isLeapYear`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_isLeapYear"
        },
        "configuration": {
            "label": "BIS_fnc_isLeapYear",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Check if a loading screen is opened.",
            "examples": [
                {
                    "text": "```sqf\nprivate _isLoading = call BIS_fnc_isLoading;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_isLoading`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_isLoading"
        },
        "configuration": {
            "label": "BIS_fnc_isLoading",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Checks if string is localized. Obsolete variant before `isLocalized` command was introduced.",
            "examples": [
                {
                    "text": "```sqf\n[\"STR_someLocalizedString\"] call BIS_fnc_isLocalized;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "localizationString",
                            "description": "`String`"
                        }
                    ],
                    "outline": "[localizationString] call `BIS_fnc_isLocalized`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_isLocalized"
        },
        "configuration": {
            "label": "BIS_fnc_isLocalized",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Function checks a blacklist and sees if the given position is in it or not.",
            "examples": [
                {
                    "text": "```sqf\n[[50,50], [[0,0], [100,100]]] call BIS_fnc_isPosBlacklisted;\n```"
                },
                {
                    "text": "```sqf\n[getPosATL player, myTrigger] call BIS_fnc_isPosBlacklisted;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Array` format `Position`"
                        },
                        {
                            "name": "blacklistArea",
                            "description": "* `Array` of `Position`s - array to format [topLeft, bottomRight]"
                        }
                    ],
                    "outline": "[position, blacklistArea] call `BIS_fnc_isPosBlacklisted`",
                    "returns": "`Boolean` - is the position blacklisted or not"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_isPosBlacklisted"
        },
        "configuration": {
            "label": "BIS_fnc_isPosBlacklisted",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns true if given magazine is throwable",
            "examples": [
                {
                    "text": "```sqf\nprivate _isThrowable = \"SmokeShellGreen\" call BIS_fnc_isThrowable;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "magazine",
                            "description": "`String` - magazine class name"
                        }
                    ],
                    "outline": "magazine call `BIS_fnc_isThrowable`",
                    "returns": "`Boolean` - `true` if throwable"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_isThrowable"
        },
        "configuration": {
            "label": "BIS_fnc_isThrowable",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return if unit is virtual (used for example for Zeus players).",
            "examples": [
                {
                    "text": "```sqf\nprivate _isVirtual = someObject call BIS_fnc_isUnitVirtual;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - object to be turned into virtual unit"
                        }
                    ],
                    "outline": "[object] call `BIS_fnc_isUnitVirtual`",
                    "returns": "`Boolean` - `true` if virtual unit"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_isUnitVirtual"
        },
        "configuration": {
            "label": "BIS_fnc_isUnitVirtual",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Be very careful with this function as certain mods modify the categories making this function unreliable!\nReturns item category and type.\n{{{!}} class=\"wikitable\"\n! Weapon / VehicleWeapon\n! VehicleWeapon\n! Item\n! Equipment\n! Magazine\n! Mine\n{{!}}- style=\"vertical-align: top\"\n{{!}}\n* AssaultRifle\n* BombLauncher\n* Cannon\n* GrenadeLauncher\n* Handgun\n* Launcher\n* MachineGun\n* Magazine\n* MissileLauncher\n* Mortar\n* RocketLauncher\n* Shotgun\n* Throw\n* Rifle\n* SubmachineGun\n* SniperRifle\n{{!}}\n* Horn\n* CounterMeasuresLauncher\n* LaserDesignator\n{{!}}\n* AccessoryMuzzle\n* AccessoryPointer\n* AccessorySights\n* AccessoryBipod\n* Binocular\n* Compass\n* FirstAidKit\n* GPS\n* LaserDesignator\n* Map\n* Medikit\n* MineDetector\n* NVGoggles\n* Radio\n* Toolkit\n* UAVTerminal\n* VehicleWeapon\n* Unknown\n* UnknownEquipment\n* UnknownWeapon\n* Watch\n{{!}}\n* Glasses\n* Headgear\n* Vest\n* Uniform\n* Backpack\n{{!}}\n* Artillery\n* Bullet\n* CounterMeasures\n* Flare\n* Grenade\n* Laser\n* Missile\n* Rocket\n* Shell\n* ShotgunShell\n* SmokeShell\n* UnknownMagazine\n{{!}}\n* Mine\n* MineBounding\n* MineDirectional\n{{!}}}",
            "examples": [
                {
                    "text": "```sqf\n\"arifle_MX_pointer_F\" call BIS_fnc_itemType;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "weaponClass",
                            "description": "`String` - weapon's class name"
                        }
                    ],
                    "outline": "weaponClass call `BIS_fnc_itemType`",
                    "returns": "`Array` in format\n* 0: category\n* 1: type"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_itemType"
        },
        "configuration": {
            "label": "BIS_fnc_itemType",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Plays music, depending on the player group status.\n**NOTE**: If no music classes are given, the function will get them from config automatically.",
            "examples": [
                {
                    "text": "```sqf\n[] call BIS_fnc_jukebox;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "function",
                            "description": "`String` - (Optional, default \"initialize\") can be one of:"
                        },
                        {
                            "name": "parameters",
                            "description": "`Array` - (Optional)"
                        }
                    ],
                    "outline": "[function, parameters] call `BIS_fnc_jukebox`",
                    "returns": "* `Array` for:\n** \"readContainerFromConfig\"\n** \"nearEnemies\" - a list of enemies nearby\n\n* `Boolean` for:\n** \"isInitialized\"\n** \"hasContact\"\n** \"isContact\"\n** \"isStealth\"\n** \"isCombat\"\n** \"isSafe\"\n\n* `String` for:\n** \"status\" - can be \"stealth\", \"combat\", \"safe\" or \"error\"\n** \"randomMusic\" - one of the available musics\n** \"selectMusic\"\n\n* `Nothing` for:\n** \"initialize\"\n** \"terminate\"\n** \"forceBehaviour\"\n** \"playMusic\"\n** \"onEachFrame\""
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_jukebox"
        },
        "configuration": {
            "label": "BIS_fnc_jukebox",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Check if person is not locked by some [conversation](https://community.bistudio.com/wiki/Conversations).",
            "examples": [
                {
                    "text": "```sqf\nprivate _canPlayerTalk = player call BIS_fnc_kbCanSpeak;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - checked person"
                        }
                    ],
                    "outline": "unit call `BIS_fnc_kbCanSpeak`",
                    "returns": "`Boolean` - if the person can speak"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_kbCanSpeak"
        },
        "configuration": {
            "label": "BIS_fnc_kbCanSpeak",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Creates a dummy speaker (as a [Game Logic](https://community.bistudio.com/wiki/Game%20Logic)). If given dummy variable has already been created, returns this one.",
            "examples": [
                {
                    "text": "```sqf\nprivate _dummySpeaker = \"BIS_dummySpeaker\" call BIS_fnc_kbCreateDummy; // _dummySpeaker == BIS_dummySpeaker now\n```"
                },
                {
                    "text": "```sqf\nprivate _dummySpeaker = \"Miller\" call BIS_fnc_kbCreateDummy; // given Miller is defined in CfgIdentities\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "dummyVarName",
                            "description": "`String` - can be anything, but if an identity from [[Description.ext#CfgIdentities|CfgIdentities]] the dummy will take this identity."
                        }
                    ],
                    "outline": "dummyVarName call `BIS_fnc_kbCreateDummy`",
                    "returns": "`Object` - dummy speaker game logic"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_kbCreateDummy"
        },
        "configuration": {
            "label": "BIS_fnc_kbCreateDummy",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Check if speaker is locked for different conversation.",
            "examples": [
                {
                    "text": "```sqf\nplayer call BIS_fnc_kbIsSpeaking;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - the speaker"
                        }
                    ],
                    "outline": "unit call `BIS_fnc_kbIsSpeaking`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_kbIsSpeaking"
        },
        "configuration": {
            "label": "BIS_fnc_kbIsSpeaking",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tOpens conversation menu. Script terminates itself when menu selection is finished.\n\n\tParameter(s):\n\t_this select 0: ARRAY or STRING - List of responses (of type ARRAY) or Menu name\n\t\tResponses are in format:\n\t\t_response select 0: STRING or ANY - Display name when STRING, otherwise used as default option when menu is closed without selecting anything.\n\t\t_response select 1:\n\t\t\tSTRING - expression\n\t\t\tARRAY - BIS_fnc_kbTell params\n\n\tReturns:\n\tNUMBER - ID of select option\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_kbMenu;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_kbMenu` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_kbMenu"
        },
        "configuration": {
            "label": "BIS_fnc_kbMenu",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tSet conversation priority. Conversations with priority not in the list won't be played\n\n\tParameter(s):\n\t_this:\n\t\tARRAY - List of priorities. Empty array will just return current value.\n\t\tNUMBER\n\t\t\t>0 - add priority to already existing list\n\t\t\t<0 - remove priority from already existing list\n\t\t\tPriority 0 cannot be tempered with\n\n\tReturns:\n\tARRAY - List of priorities\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_kbPriority;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_kbPriority` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_kbPriority"
        },
        "configuration": {
            "label": "BIS_fnc_kbPriority",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_kbSentence;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_kbSentence` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_kbSentence"
        },
        "configuration": {
            "label": "BIS_fnc_kbSentence",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Skip a conversation started with `BIS_fnc_kbTell`. Currently played sentence will be finished.",
            "examples": [
                {
                    "text": "```sqf\n[\"topic1\", \"currentMission\"] call BIS_fnc_kbSkip;\n```"
                },
                {
                    "text": "```sqf\n[player] call BIS_fnc_kbSkip;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "topicName",
                            "description": "`String` or `Object` - either topic name or the person currently talking"
                        },
                        {
                            "name": "mission",
                            "description": "`String` - (Optional, default `missionName`)"
                        },
                        {
                            "name": "wait",
                            "description": "`Boolean` or `Array` or `Number`"
                        }
                    ],
                    "outline": "[topicName, mission, wait] call `BIS_fnc_kbSkip`",
                    "returns": "`Boolean` or `Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_kbSkip"
        },
        "configuration": {
            "label": "BIS_fnc_kbSkip",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Play given sentence/conversation. Script terminates itself when conversation is finished.\n\nConversation must be declared in [[Description.ext#CfgSentences|Description.ext/CfgSentences]].\n**NOTE**: This function can also be executed with `call`. Doing so will make it internally `spawn` since it needs to be able suspend its execution.",
            "examples": [
                {
                    "text": "```sqf\n[\"01_Wave\", \"A_in\", nil, \"SIDE\", nil, nil, 1, false] spawn BIS_fnc_kbTell;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "topic",
                            "description": "`String` - topic name"
                        },
                        {
                            "name": "container",
                            "description": "`String` - (Optional, default `missionName`) container name ([[Description.ext#CfgSentences|CfgSentences]] sub-category)"
                        },
                        {
                            "name": "section",
                            "description": "`Array` or `String` - (Optional, default \"\") section to be played. Elements can be:"
                        },
                        {
                            "name": "radioMode",
                            "description": "`Boolean`, `String`, `Object` or `Code` - (Optional, default: `false`) can be:"
                        },
                        {
                            "name": "code",
                            "description": "`Code` or `Array` - (Optional, default <sqf inline>{ true }) can be:"
                        },
                        {
                            "name": "speakers",
                            "description": "`Array` or `Boolean` - (Optional, default <sqf inline>[]) can be:"
                        },
                        {
                            "name": "soundVolume",
                            "description": "`Number` - (Optional, default 0.1) music and sound volumes will be multiplied by this value when conversation starts"
                        },
                        {
                            "name": "radioProtocol",
                            "description": "`Boolean` - (Optional, default `true`) true to disable radio protocol message while the conversation is playing"
                        }
                    ],
                    "outline": "[topic, container, section, radioMode, code, speakers, soundVolume, radioProtocol] spawn `BIS_fnc_kbTell`",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_kbTell"
        },
        "configuration": {
            "label": "BIS_fnc_kbTell",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Play given sentence, disable radio and/or lower sounds. Will use `BIS_fnc_showSubtitle` for better effects if channel is DIRECT or VEHICLE.\n**IMPORTANT**:  This function is intended to be used by `BIS_fnc_kbTell` only.",
            "examples": [
                {
                    "text": "```sqf\n[\"sentence\", [player, [BIS_HQ, \"myTopic\", \"playerSentence1\"]]] call BIS_fnc_kbTellLocal;\n```"
                },
                {
                    "text": "```sqf\n[\"conversationStart\", [0.5, true]] call BIS_fnc_kbTellLocal;\n```"
                },
                {
                    "text": "```sqf\n[\"conversationEnd\", [0.5, true]] call BIS_fnc_kbTellLocal;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`String` - can be either \"sentence\", \"conversationStart\" or \"conversationEnd\""
                        },
                        {
                            "name": "parameters",
                            "description": "`Array` - depends on the mode:"
                        }
                    ],
                    "outline": "[mode, parameters] call `BIS_fnc_kbTellLocal`",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_kbTellLocal"
        },
        "configuration": {
            "label": "BIS_fnc_kbTellLocal",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Reads the [configs](https://community.bistudio.com/wiki/Config) to return a matching `**config [[config greater greater name|&gt;&gt;]] [[Description.ext#CfgSentences|CfgSentences]] [[config greater greater name|&gt;&gt;]] missionName [[config greater greater name|&gt;&gt;]] topic**` entry.\n**NOTE**: `Config`s are checked in that order: `configFile`, `campaignConfigFile`, `missionConfigFile`.\n**IMPORTANT**:  This function is intended to be used by `BIS_fnc_kbTell` only.",
            "examples": [
                {
                    "text": "```sqf\nprivate _configTopic = [\"missionName\", \"topic\"] call BIS_fnc_kbTopicConfig;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "missionName",
                            "description": "`String`"
                        },
                        {
                            "name": "topic",
                            "description": "`String`"
                        }
                    ],
                    "outline": "[missionName, topic] call `BIS_fnc_kbTopicConfig`",
                    "returns": "`Config` - the topic's config entry. `nil` on error or not found"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_kbTopicConfig"
        },
        "configuration": {
            "label": "BIS_fnc_kbTopicConfig",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tComputes data for a key\n\n\tParameter(s):\n\t_this select 0: Object - The key\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_key_compute`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_key_compute"
        },
        "configuration": {
            "label": "BIS_fnc_key_compute",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tComputes the curve that owns key\n\n\tParameter(s):\n\t_this select 0: Object - The key\n\n\tReturns:\n\tCurve - The owner curve object\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_key_computeOwnerCurve`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_key_computeOwnerCurve"
        },
        "configuration": {
            "label": "BIS_fnc_key_computeOwnerCurve",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tComputes the time of given key\n\n\tParameter(s):\n\t_this select 0: Object - The key\n\n\tReturns:\n\tFloat - The key time\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_key_computeTime`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_key_computeTime"
        },
        "configuration": {
            "label": "BIS_fnc_key_computeTime",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tWhether control points of given key are set to locked\n\n\tParameter(s):\n\t_this select 0: Object - The key object\n\n\tReturns:\n\tBool - True if control points are locked, false if not\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_key_edenAreControlPointsLocked`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_key_edenAreControlPointsLocked"
        },
        "configuration": {
            "label": "BIS_fnc_key_edenAreControlPointsLocked",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tAttributes change in EDEN for a key\n\n\tParameter(s):\n\t_this select 0: Object\t- The key\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_key_edenAttributesChanged`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_key_edenAttributesChanged"
        },
        "configuration": {
            "label": "BIS_fnc_key_edenAttributesChanged",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tAttributes change in EDEN for a key\n\n\tParameter(s):\n\t_this select 0: Object\t- The key\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_key_edenConnectionChanged`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_key_edenConnectionChanged"
        },
        "configuration": {
            "label": "BIS_fnc_key_edenConnectionChanged",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tEntity is dragged in 3DEN\n\n\tParameter(s):\n\t_this select 0: Object\t- The key\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_key_edenDragged`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_key_edenDragged"
        },
        "configuration": {
            "label": "BIS_fnc_key_edenDragged",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tWhether given key is selected in 3den\n\n\tParameter(s):\n\t_this select 0: Object\t- The key object\n\n\tReturns:\n\tBool - True if selected, false if not\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_key_edenIsSelected`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_key_edenIsSelected"
        },
        "configuration": {
            "label": "BIS_fnc_key_edenIsSelected",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tAttributes change in EDEN for a key\n\n\tParameter(s):\n\t_this select 0: Object\t- The key\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_key_edenRegisteredToWorld`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_key_edenRegisteredToWorld"
        },
        "configuration": {
            "label": "BIS_fnc_key_edenRegisteredToWorld",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tAttributes change in EDEN for a key\n\n\tParameter(s):\n\t_this select 0: Object\t- The key\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_key_edenUnregisteredFromWorld`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_key_edenUnregisteredFromWorld"
        },
        "configuration": {
            "label": "BIS_fnc_key_edenUnregisteredFromWorld",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tReturns the arrive control point of a key\n\n\tParameter(s):\n\t_this select 0: Object - The key\n\n\tReturns:\n\tObject - The control point\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_key_getArriveControlPoint`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_key_getArriveControlPoint"
        },
        "configuration": {
            "label": "BIS_fnc_key_getArriveControlPoint",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tReturns the key arrive tangent\n\n\tParameter(s):\n\t_this select 0: Object - The key\n\n\tReturns:\n\tFloat - The key arrive tangent\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_key_getArriveTangent`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_key_getArriveTangent"
        },
        "configuration": {
            "label": "BIS_fnc_key_getArriveTangent",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tReturns the key arrive tangent weight\n\n\tParameter(s):\n\t_this select 0: Object - The key\n\n\tReturns:\n\tFloat - The key arrive tangent weight\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_key_getArriveTangentWeight`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_key_getArriveTangentWeight"
        },
        "configuration": {
            "label": "BIS_fnc_key_getArriveTangentWeight",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tReturns the time of given key\n\n\tParameter(s):\n\t_this select 0: Object - The key\n\n\tReturns:\n\tFloat - The key time\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_key_getConfigTime`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_key_getConfigTime"
        },
        "configuration": {
            "label": "BIS_fnc_key_getConfigTime",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tReturns the FOV value of a key\n\n\tParameter(s):\n\t_this select 0: Object - The key\n\n\tReturns:\n\tFloat - The fov value\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_key_getFOV`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_key_getFOV"
        },
        "configuration": {
            "label": "BIS_fnc_key_getFOV",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tReturns the key interp mode index\n\t* 0  - Linear\n\t* 1  - Cubic\n\t* 2  - EaseIn\n\t* 3  - EaseOut\n\t* 4  - EaseInOut\n\t* 5  - Hermite\n\t* 6  - Berp\n\t* 7  - BounceIn\n\t* 8  - BounceOut\n\t* 9  - BounceInOut\n\t* 10 - QuinticIn\n\t* 11 - QuinticOut\n\t* 12 - QuinticInOut\n\t* 13 - ElasticIn\n\t* 14 - ElasticOut\n\t* 15 - ElasticInOut\n\n\tParameter(s):\n\t_this select 0: Object - The key\n\n\tReturns:\n\tInteger - The mode as integer\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_key_getInterpMode`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_key_getInterpMode"
        },
        "configuration": {
            "label": "BIS_fnc_key_getInterpMode",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tReturns the leave control point of key\n\n\tParameter(s):\n\t_this select 0: Object - The key\n\n\tReturns:\n\tObject - The control point\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_key_getLeaveControlPoint`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_key_getLeaveControlPoint"
        },
        "configuration": {
            "label": "BIS_fnc_key_getLeaveControlPoint",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tReturns the key leave tangent\n\n\tParameter(s):\n\t_this select 0: Object - The key\n\n\tReturns:\n\tFloat - The key leave tangent\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_key_getLeaveTangent`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_key_getLeaveTangent"
        },
        "configuration": {
            "label": "BIS_fnc_key_getLeaveTangent",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tReturns the key leave tangent weight\n\n\tParameter(s):\n\t_this select 0: Object - The key\n\n\tReturns:\n\tFloat - The key leave tangent weight\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_key_getLeaveTangentWeight`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_key_getLeaveTangentWeight"
        },
        "configuration": {
            "label": "BIS_fnc_key_getLeaveTangentWeight",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tReturns the curve that owns key\n\n\tParameter(s):\n\t_this select 0: Object - The key\n\n\tReturns:\n\tCurve - The owner curve object\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_key_getOwnerCurve`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_key_getOwnerCurve"
        },
        "configuration": {
            "label": "BIS_fnc_key_getOwnerCurve",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tReturns the time of given key\n\n\tParameter(s):\n\t_this select 0: Object - The key\n\n\tReturns:\n\tFloat - The key time\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_key_getTime`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_key_getTime"
        },
        "configuration": {
            "label": "BIS_fnc_key_getTime",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tReturns the value of given key\n\n\tParameter(s):\n\t_this select 0: Object - The key\n\n\tReturns:\n\tFloat - The key value\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_key_getValue`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_key_getValue"
        },
        "configuration": {
            "label": "BIS_fnc_key_getValue",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tReturns true if this is a key with float value, false if not\n\n\tParameter(s):\n\t_this select 0: Object - The key\n\n\tReturns:\n\tBool - True if key is of float data type, false if not\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_key_isFloat`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_key_isFloat"
        },
        "configuration": {
            "label": "BIS_fnc_key_isFloat",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tReturns true if this is a key with vector value, false if not\n\n\tParameter(s):\n\t_this select 0: Object - The key\n\n\tReturns:\n\tBool - True if key is of vector data type, false if not\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_key_isVector`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_key_isVector"
        },
        "configuration": {
            "label": "BIS_fnc_key_isVector",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tSet's the key arrive tangent\n\n\tParameter(s):\n\t_this select 0: Object \t- The key\n\t_this select 1: float\t- The new arrive tangent\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_key_setArriveTangent`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_key_setArriveTangent"
        },
        "configuration": {
            "label": "BIS_fnc_key_setArriveTangent",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tSet's the key arrive tangent weight\n\n\tParameter(s):\n\t_this select 0: Object\t- The key\n\t_this select 1: Float\t- The new arrive tangent weight\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_key_setArriveTangentWeight`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_key_setArriveTangentWeight"
        },
        "configuration": {
            "label": "BIS_fnc_key_setArriveTangentWeight",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tSet's the interpolation mode of the key\n\n\tParameter(s):\n\t_this select 0: Object\t- The key\n\t_this select 1: Integer\t- The new key interp mode\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_key_setInterpMode`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_key_setInterpMode"
        },
        "configuration": {
            "label": "BIS_fnc_key_setInterpMode",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tSet's the key leave tangent\n\n\tParameter(s):\n\t_this select 0: Object \t- The key\n\t_this select 1: Float \t- The new leave tangent\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_key_setLeaveTangent`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_key_setLeaveTangent"
        },
        "configuration": {
            "label": "BIS_fnc_key_setLeaveTangent",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tSet's the key leave tangent weight\n\n\tParameter(s):\n\t_this select 0: Object \t- The key\n\t_this select 1: Float\t- The new leave tangent weight\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_key_setLeaveTangentWeight`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_key_setLeaveTangentWeight"
        },
        "configuration": {
            "label": "BIS_fnc_key_setLeaveTangentWeight",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tSet's the time of given key\n\n\tParameter(s):\n\t_this select 0: Object \t- The key\n\t_this select 1: Float\t- The new time\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_key_setTime`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_key_setTime"
        },
        "configuration": {
            "label": "BIS_fnc_key_setTime",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tSet's the value of given key\n\n\tParameter(s):\n\t_this select 0: Object\t- The key\n\t_this select 1: Float\t- The new value\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_key_setValue`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_key_setValue"
        },
        "configuration": {
            "label": "BIS_fnc_key_setValue",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns DIK code of a given key.",
            "examples": [
                {
                    "text": "```sqf\n13 call BIS_fnc_keyCode; // Returns \"EQUALS\"\n```"
                },
                {
                    "text": "```sqf\n\"EQUALS\" call BIS_fnc_keyCode; // returns 13\n```"
                },
                {
                    "text": "```sqf\ntrue call BIS_fnc_keyCode; // returns [\"ESCAPE\",1,\"1\",2,\"2\",3,\"3\",4,\"4\",5,\"5\",6,\"6\",7,\"7\",8,\"8\",9,\"9\",10,\"0\",11,\"MINUS\",12,\"EQUALS\",13...]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "input",
                            "description": "* `Number`: Key code"
                        }
                    ],
                    "outline": "input call `BIS_fnc_keyCode`",
                    "returns": "`String`, `Number` or `Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_keyCode"
        },
        "configuration": {
            "label": "BIS_fnc_keyCode",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_keyframeAnimation_deltaTime`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_keyframeAnimation_deltaTime"
        },
        "configuration": {
            "label": "BIS_fnc_keyframeAnimation_deltaTime",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_keyframeAnimation_init`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_keyframeAnimation_init"
        },
        "configuration": {
            "label": "BIS_fnc_keyframeAnimation_init",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Allows for hold button interactions. Hold action is started by pressing {{Controls|Space}}.",
            "examples": [
                {
                    "text": "```sqf\n[\"Hold that key!\", 2, { alive player }] spawn BIS_fnc_keyHold;\n```"
                },
                {
                    "text": "Function can be called in [scheduled environment](https://community.bistudio.com/wiki/Scheduler%23Scheduled_Environment) to return values and be used for further code execution.\n\n```sqf\n\n0 spawn {\n\tprivate _success = [\"Hold that key!\", 2, { alive player }] call BIS_fnc_keyHold;\n\tif (_success) then { hint \"Function executed\" } else { hint \"Function interrupted\" };\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "description",
                            "description": "`String` - description of the performed action, displayed inside the progress bar."
                        },
                        {
                            "name": "duration",
                            "description": "`Number` - (Optional, default 2) action duration"
                        },
                        {
                            "name": "condition",
                            "description": "`Code` or `String` - (Optional, default <sqf inline>{ true }) condition that must be met for the action to display"
                        },
                        {
                            "name": "arguments",
                            "description": "`Array` - (Optional, default <sqf inline>[]) arguments passed to the condition"
                        },
                        {
                            "name": "loaded",
                            "description": "`Boolean` - (Optional, default `false`) defines if function is already loaded. This is handled by the function"
                        }
                    ],
                    "outline": "[description, duration, condition, arguments, loaded] spawn `BIS_fnc_keyHold`",
                    "returns": "* `spawn`: [Script Handle](https://community.bistudio.com/wiki/Script%20Handle)\n* `call`: `true` if action was successful or `false` if it was interrupted."
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_keyHold"
        },
        "configuration": {
            "label": "BIS_fnc_keyHold",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_keypointsExport;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_keypointsExport` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_keypointsExport"
        },
        "configuration": {
            "label": "BIS_fnc_keypointsExport",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tImports and marks positions from KLM file.\n\n\tParameter(s):\n\t_this: STRING - path to .kml file\n\n\tReturns:\n\tSTRING - config output (also copied to clipboard)\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_keypointsExportFromKML;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_keypointsExportFromKML` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_keypointsExportFromKML"
        },
        "configuration": {
            "label": "BIS_fnc_keypointsExportFromKML",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Read positions from a {{Link|https://en.wikipedia.org/wiki/Keyhole_Markup_Language|KML file}}.\n**NOTE**: Recommended to execute in loading screen.",
            "examples": [
                {
                    "text": "```sqf\nprivate _data = \"subDir\\myFile.kml\" call BIS_fnc_KMLimport;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "filePath",
                            "description": "`String` - (Optional, default <sqf inline>\"hsim\\Doc_H\\GoogleEarth\\Missions\\\" + missionName + \".kml\") KML file path"
                        }
                    ],
                    "outline": "filePath call `BIS_fnc_KMLimport`",
                    "returns": "`Array` of `Array`s in format [type, positionXYZ, folder, name, description]\n* type: `Number` - 0 for a point, 1 for a line, 2 for a polygon\n* positionXYZ: `Position` - format [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL)\n* folder: `String` - path to the value, \"\" if in the .kml root\n* name: `String` - location's name\n* description: `String` - location's description"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_KMLimport"
        },
        "configuration": {
            "label": "BIS_fnc_KMLimport",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Adds an [Easter egg](https://community.bistudio.com/wiki/%3ACategory%3AEaster%20Eggs) to the laptop, that is active only if the mission date is set to **2001-06-22**.\n**NOTE**: Best used with the Old Laptop.",
            "examples": [
                {
                    "text": "```sqf\nprivate _actionId = _myLaptop call BIS_fnc_laptopInit;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "laptop",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "laptop call `BIS_fnc_laptopInit`",
                    "returns": "`Nothing` or `Number` (action ID)"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_laptopInit"
        },
        "configuration": {
            "label": "BIS_fnc_laptopInit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Plays an easter egg video on the screen of an old laptop.",
            "examples": [
                {
                    "text": "```sqf\nthis call BIS_fnc_laptopPlayVideo;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "laptop",
                            "description": "`Object` - the old laptop to play the video on"
                        }
                    ],
                    "outline": "laptop call `BIS_fnc_laptopPlayVideo`",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_laptopPlayVideo"
        },
        "configuration": {
            "label": "BIS_fnc_laptopPlayVideo",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Linear floating point interpolation. {{Link|https://en.wikipedia.org/wiki/Linear_interpolation|Linear Interpolation (Wikipedia)}}",
            "examples": [
                {
                    "text": "```sqf\n[1,10,0.5] call BIS_fnc_lerp; // Returns 5.5\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "currentValue",
                            "description": "`Number` - first point (start)"
                        },
                        {
                            "name": "targetValue",
                            "description": "`Number` - second point (end)"
                        },
                        {
                            "name": "alpha",
                            "description": "`Number` - interpolation speed"
                        }
                    ],
                    "outline": "[currentValue,targetValue,alpha] call `BIS_fnc_lerp`",
                    "returns": "`Number` - interpolated value"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_lerp"
        },
        "configuration": {
            "label": "BIS_fnc_lerp",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Given two different vectors A and B, think of a straight line drawn between them, _alpha_ saying how far along that line is the wanted vector.",
            "examples": [
                {
                    "text": "```sqf\n[[1592.74,6558.36,0], [2240.43,7459.69,0], 0.3] call BIS_fnc_lerpVector; // returns [1787.05,6828.76,0]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "currentValue",
                            "description": "`Array` - vector start"
                        },
                        {
                            "name": "targetValue",
                            "description": "`Array` - vector end"
                        },
                        {
                            "name": "alpha",
                            "description": "`Number` - alpha"
                        }
                    ],
                    "outline": "[currentValue, targetValue, alpha] call `BIS_fnc_lerpVector`",
                    "returns": "`Array` - interpolated vector"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_lerpVector"
        },
        "configuration": {
            "label": "BIS_fnc_lerpVector",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Limits the number of magazines carried by individual unit. Each container (uniform, vest and backpack) can be limited separately or left untouched.\n\tThe function limits the number of magazines of each unique ammo category in respective container. Items like First Aid Kit or Mine Detector are not affected by the function\n\nSet the minimum and maximum values in an array, for example [0.5,1] will set the magazine count anywhere between 50-100% of default count.",
            "examples": [
                {
                    "text": "```sqf\nplayer call BIS_fnc_limitAmmunition;\n```"
                },
                {
                    "text": "```sqf\n[player,[],[0.5,0.5],[0,1]] call BIS_fnc_limitAmmunition;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "uniformMags",
                            "description": "`Array` - (Optional, default [0.4,0.8]) amount of magazines in uniform. Array in form:"
                        },
                        {
                            "name": "vestMags",
                            "description": "`Array` - (Optional, default [0.4,0.8]) amount of magazines in vest. Array in form:"
                        },
                        {
                            "name": "backpackMags",
                            "description": "`Array` - (Optional, default [0.4,0.8]) amount of magazines in backpack. Array in form:"
                        }
                    ],
                    "outline": "[unit,uniformMags,vestMags,BackpackMags] call `BIS_fnc_limitAmmunition`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_limitAmmunition"
        },
        "configuration": {
            "label": "BIS_fnc_limitAmmunition",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Keeps or removes unit's items (including NVGs and binocular/designator) based on probability user sets.",
            "examples": [
                {
                    "text": "```sqf\nplayer call BIS_fnc_limitItems;\n```"
                },
                {
                    "text": "```sqf\n[player, 0, 15, 30, 45, 60, 75, 90] call BIS_fnc_limitItems;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "chanceNVG",
                            "description": "`Number` - (Optional, default 50) chance to keep NVGs in % (range 0..100)"
                        },
                        {
                            "name": "chanceBino",
                            "description": "`Number` - (Optional, default 50) chance to keep binoculars in %"
                        },
                        {
                            "name": "chanceGPS",
                            "description": "`Number` - (Optional, default 50) chance to keep GPS in %"
                        },
                        {
                            "name": "chanceMap",
                            "description": "`Number` - (Optional, default 50) chance to keep Map in %"
                        },
                        {
                            "name": "chanceRadio",
                            "description": "`Number` - (Optional, default 50) chance to keep radio in %"
                        },
                        {
                            "name": "chanceCompass",
                            "description": "`Number` - (Optional, default 50) chance to keep compass in %"
                        },
                        {
                            "name": "chanceWatch",
                            "description": "`Number` - (Optional, default 50) chance to keep watch in %"
                        }
                    ],
                    "outline": "[unit, chanceNVG, chanceBino, chanceGPS, chanceMap, chanceRadio, chanceCompass, chanceWatch] call `BIS_fnc_limitItems`",
                    "returns": "`Boolean` - always `true`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_limitItems"
        },
        "configuration": {
            "label": "BIS_fnc_limitItems",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Limits support runs during a mission.",
            "examples": [
                {
                    "text": "```sqf\n[reqModule, \"Transport\", -1] call BIS_fnc_limitSupport;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "module",
                            "description": "`Object` - the requester module"
                        },
                        {
                            "name": "supportType",
                            "description": "`String` - can be one of:"
                        },
                        {
                            "name": "quantity",
                            "description": "`Number` - support run limit. -1 for unlimited support"
                        }
                    ],
                    "outline": "[module, supportType, quantity] call `BIS_fnc_limitSupport`",
                    "returns": "`Boolean` - `true` when done"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_limitSupport"
        },
        "configuration": {
            "label": "BIS_fnc_limitSupport",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Keeps or remove unit's weapon attachments based on probability user sets. Apply for primary, secondary or handgun weapon separately.",
            "examples": [
                {
                    "text": "```sqf\nplayer call BIS_fnc_limitWeaponItems;\n```"
                },
                {
                    "text": "```sqf\n[[player, 0, 25, 50, 75, 100]]  call BIS_fnc_limitWeaponItems;\n```"
                },
                {
                    "text": "```sqf\n[[player, 0, [\"optic_lrps\", 100], [\"acc_pointer_ir\", 100], [\"muzzle_snds_B\", 100], [\"bipod_01_F_blk\", 100]]] call BIS_fnc_limitWeaponItems;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - target unit"
                        },
                        {
                            "name": "mode",
                            "description": "`Number` - (Optional, default 0) can be:"
                        },
                        {
                            "name": "chanceOptics",
                            "description": "`Number` or `Array` in format [\"itemClass\", chance] - (Optional, default 50) chance to keep optics from 0 to 100%"
                        },
                        {
                            "name": "chanceAttach",
                            "description": "`Number` or `Array` in format [\"itemClass\", chance] - (Optional, default 50) chance to keep side attachments from 0 to 100%"
                        },
                        {
                            "name": "chanceMuzzle",
                            "description": "`Number` or `Array` in format [\"itemClass\", chance] - (Optional, default 50) chance to keep muzzle attachment from 0 to 100%"
                        },
                        {
                            "name": "chanceUnderbarrel",
                            "description": "`Number` or `Array` in format [\"itemClass\",chance] - (Optional, default 50) chance to keep underbarrel attachment from 0 to 100%"
                        }
                    ],
                    "outline": "[unit, mode, chanceOptics, chanceAttach, chanceMuzzle, chanceUnderbarrel] call `BIS_fnc_limitWeaponItems`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_limitWeaponItems"
        },
        "configuration": {
            "label": "BIS_fnc_limitWeaponItems",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Linear conversion of a value from one set to another\n**Arma**: 3|This function became obsolete with the introduction of `linearConversion`.",
            "examples": [
                {
                    "text": "```sqf\n\n[[-50, 50], -50, [0, 1]] call BIS_fnc_linearConversion; // returns 0\n[[-50, 50],   0, [0, 1]] call BIS_fnc_linearConversion; // returns 0.5\n[[-50, 50], +50, [0, 1]] call BIS_fnc_linearConversion; // returns 1\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "minFrom",
                            "description": "`Number`"
                        },
                        {
                            "name": "maxFrom",
                            "description": "`Number`"
                        },
                        {
                            "name": "value",
                            "description": "`Number`"
                        },
                        {
                            "name": "minTo",
                            "description": "`Number`"
                        },
                        {
                            "name": "maxTo",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "[[minFrom, maxFrom], value, [minTo, maxTo]] call `BIS_fnc_linearConversion`",
                    "returns": "`Number` _value_ adapted to [_minTo_, _maxTo_] range"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_linearConversion"
        },
        "configuration": {
            "label": "BIS_fnc_linearConversion",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns list of playable units with access to curator.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_listCuratorPlayers;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "[] call `BIS_fnc_listCuratorPlayers`",
                    "returns": "`Array` - list of players"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_listCuratorPlayers"
        },
        "configuration": {
            "label": "BIS_fnc_listCuratorPlayers",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns a list of _currently played_ units, alive or dead.",
            "examples": [
                {
                    "text": "```sqf\nprivate _allPlayers = call BIS_fnc_listPlayers;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_listPlayers`",
                    "returns": "`Array` of `Object`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_listPlayers"
        },
        "configuration": {
            "label": "BIS_fnc_listPlayers",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Display a live feed.",
            "examples": [
                {
                    "text": "```sqf\n[myUAV, player, player, 2] call BIS_fnc_liveFeed;\n```"
                },
                {
                    "text": "live feed display:\n\n```sqf\nprivate _UAVFeedDisplay = uiNamespace getVariable \"BIS_fnc_PIP_RscPIP\";\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "source",
                            "description": "`Object` or `Position` - live feed source"
                        },
                        {
                            "name": "target",
                            "description": "`Object` or `Position` - live feed target"
                        },
                        {
                            "name": "receiver",
                            "description": "`Object` - player that will see the feed - if not [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality), function will do nothing"
                        },
                        {
                            "name": "effect",
                            "description": "`Number` - (Optional, default 0)  live feed effect. Can be one of:"
                        }
                    ],
                    "outline": "[source, target, receiver, effect] call `BIS_fnc_liveFeed`",
                    "returns": "`Boolean` - `true` if successful, `false` if not"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_liveFeed"
        },
        "configuration": {
            "label": "BIS_fnc_liveFeed",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Add effect to the current live feed.",
            "examples": [
                {
                    "text": "```sqf\n1 call BIS_fnc_liveFeedEffects;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "effect",
                            "description": "`Number` - (Optional, default 0) live feed effect. Can be one of:"
                        }
                    ],
                    "outline": "effect call `BIS_fnc_liveFeedEffects`",
                    "returns": "`Boolean` - `true` if successful, `false` if not"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_liveFeedEffects"
        },
        "configuration": {
            "label": "BIS_fnc_liveFeedEffects",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\n\tDescription:\n\tAdd effects to a live feed via a module.\n\t\n\tParameters:\n\t\t_this: OBJECT - Live Feed - Effects module\n*/\n\n// They ran me on a dedicated server. I stopped their function.\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_liveFeedModuleEffects;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_liveFeedModuleEffects` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_liveFeedModuleEffects"
        },
        "configuration": {
            "label": "BIS_fnc_liveFeedModuleEffects",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\n\tDescription:\n\tDisplay a live feed via a module.\n\t\n\tParameters:\n\t\t_this: OBJECT - Live Feed - Init module\n*/\n\n// Need not be run on dedicated servers\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_liveFeedModuleInit;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_liveFeedModuleInit` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_liveFeedModuleInit"
        },
        "configuration": {
            "label": "BIS_fnc_liveFeedModuleInit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\n\tDescription:\n\tSet a live feed's source via a module.\n\t\n\tParameters:\n\t\t_this: OBJECT - Live Feed - Set Source module\n*/\n\n// <insert smart comment about dedicated servers here>\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_liveFeedModuleSetSource;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_liveFeedModuleSetSource` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_liveFeedModuleSetSource"
        },
        "configuration": {
            "label": "BIS_fnc_liveFeedModuleSetSource",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\n\tDescription:\n\tSet a live feed's target via a module.\n\t\n\tParameters:\n\t\t_this: OBJECT - Live Feed - Set Target module\n*/\n\n// On dedicated servers, player is not you\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_liveFeedModuleSetTarget;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_liveFeedModuleSetTarget` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_liveFeedModuleSetTarget"
        },
        "configuration": {
            "label": "BIS_fnc_liveFeedModuleSetTarget",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Set the source of the current live feed.",
            "examples": [
                {
                    "text": "```sqf\n[player, [0, 0.25, 1.6]] call BIS_fnc_liveFeedSetSource;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "source",
                            "description": "* `Object`"
                        }
                    ],
                    "outline": "source call `BIS_fnc_liveFeedSetSource`",
                    "returns": "`Boolean` - `true` if successful, `false` if not"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_liveFeedSetSource"
        },
        "configuration": {
            "label": "BIS_fnc_liveFeedSetSource",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Set the target of the current live feed.",
            "examples": [
                {
                    "text": "```sqf\nplayer call BIS_fnc_liveFeedSetTarget;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Object` or `Position`"
                        }
                    ],
                    "outline": "target call `BIS_fnc_liveFeedSetTarget`",
                    "returns": "`Boolean` - `true` if successful, `false` if not."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_liveFeedSetTarget"
        },
        "configuration": {
            "label": "BIS_fnc_liveFeedSetTarget",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Terminate a live feed.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_liveFeedTerminate;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_liveFeedTerminate`",
                    "returns": "`Boolean` - `true` if successful, `false` if not"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_liveFeedTerminate"
        },
        "configuration": {
            "label": "BIS_fnc_liveFeedTerminate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Searches for class in mission, campaign and then in global config file.",
            "examples": [
                {
                    "text": "```sqf\n[[\"bin\\config.bin\"], configFile >> \"Cfg3DEN\" >> \"Camera\"] call BIS_fnc_loadClass\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "**input**",
                            "description": "`Array` of `String`s - containing [config](https://community.bistudio.com/wiki/Config) paths"
                        },
                        {
                            "name": "**defaultValue**",
                            "description": "`Config` - default [config](https://community.bistudio.com/wiki/Config) used if **input** cannot be found"
                        }
                    ],
                    "outline": "[input, defaultValue] call `BIS_fnc_loadClass`",
                    "returns": "`Config`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_loadClass"
        },
        "configuration": {
            "label": "BIS_fnc_loadClass",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Searches for config entry in mission, campaign and then in global config file.",
            "examples": [
                {
                    "text": "```sqf\n[[\"CfgWeapons\",\"hgun_Rook40_snds_F\",\"bullet3\"], configfile >> \"CfgWeapons\" >> \"hgun_Rook40_snds_F\" >> \"baseWeapon\"] call BIS_fnc_loadEntry;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "path",
                            "description": "`Array` of `String`s - path"
                        },
                        {
                            "name": "defaultConfig",
                            "description": "`Config` - default path used in case when the original one is not found"
                        }
                    ],
                    "outline": "[path,defaultConfig] call `BIS_fnc_loadEntry`",
                    "returns": "`Array`, `Number` or `String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_loadEntry"
        },
        "configuration": {
            "label": "BIS_fnc_loadEntry",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Compile scripts and save them into globally available functions. Defines `_fnc_scriptName` variable.",
            "examples": [
                {
                    "text": "```sqf\n[\"scripts\\myDir\\\", \"MY_fnc_\", [\"script1\", \"script2\"], true] call BIS_fnc_loadFunctions;\n```"
                },
                {
                    "text": "```sqf\n[\"scripts\\myDir\\\", \"MY_fnc_\", [[\"script1\", \"script1file\"], [\"script2\", \"script2file\"]], false] call BIS_fnc_loadFunctions;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "fileDirectory",
                            "description": "`String` - script path"
                        },
                        {
                            "name": "prefix",
                            "description": "`String` - variable prefix **NOTE**: `**\"BIS_fnc_\" prefix is reserved and cannot be used.**`"
                        },
                        {
                            "name": "nameVars",
                            "description": "`Array` of `String`s **or** `Array` of `Array` - list of variables to be declared."
                        },
                        {
                            "name": "global",
                            "description": "`Boolean` - `true` for global persistent execution on all clients"
                        }
                    ],
                    "outline": "[fileDirectory, prefix, nameVars, global] call `BIS_fnc_loadFunctions`",
                    "returns": "`Boolean` - `true` when done"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_loadFunctions"
        },
        "configuration": {
            "label": "BIS_fnc_loadFunctions",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Adds a predefined loadout (either via `**CfgVehicles}}, {{hl|CfgRespawnInventory**`, or a custom inventory saved via `BIS_fnc_saveInventory`) to a specified unit.",
            "examples": [
                {
                    "text": "```sqf\n_loadout = [player, configFile >> \"CfgVehicles\" >> \"B_Soldier_SL_F\"] call BIS_fnc_loadInventory; // gives BLUFOR Squad Leader's loadout to player unit\n```"
                },
                {
                    "text": "to save and load the inventory:\n\n```sqf\n\n[player, [missionNamespace, \"TAG_SavedInventory\"]] call BIS_fnc_saveInventory;\t// save it\n[player, [missionNamespace, \"TAG_SavedInventory\"]] call BIS_fnc_loadInventory;\t// load it\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "`Object`",
                            "description": "unit to receive the loadout"
                        },
                        {
                            "name": "`Config` or `Array`",
                            "description": "can be one of:"
                        },
                        {
                            "name": "`Array`",
                            "description": "(Optional, default <sqf inline>[]) array of `String`s that define what part of the loadout to ignore, e.g [\"weapons\", \"uniform\"]"
                        }
                    ],
                    "outline": "param call `BIS_fnc_loadInventory`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_loadInventory"
        },
        "configuration": {
            "label": "BIS_fnc_loadInventory",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Load vehicle appearance saved with `BIS_fnc_saveVehicle`.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_tank, [missionNamespace, \"BIS_someTankSave\"]] call BIS_fnc_loadVehicle;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - vehicle"
                        },
                        {
                            "name": "target",
                            "description": "`Array` - in format:"
                        }
                    ],
                    "outline": "[object,target] call `BIS_fnc_loadVehicle`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_loadVehicle"
        },
        "configuration": {
            "label": "BIS_fnc_loadVehicle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Checks if passed string is localization key and if so, return the localized text. Else, returns the passed string itself.",
            "examples": [
                {
                    "text": "```sqf\n\n// assuming the stringtable contains a key \"STR_someString\" with the value \"Hello world\"\n\"STR_someString\" call BIS_fnc_localize; // returns \"Hello world\"\n\n// assuming the stringtable does not contain a key \"STR_anotherString\"\n\"STR_anotherString\" call BIS_fnc_localize; // returns \"STR_anotherString\"\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "localizationString",
                            "description": "`String`"
                        }
                    ],
                    "outline": "localizationString call `BIS_fnc_localize`",
                    "returns": "`String` - the localized text behind the key or the key itself (if not localized)."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_localize"
        },
        "configuration": {
            "label": "BIS_fnc_localize",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return location description (e.g. \"NE of Agia Marina\")",
            "examples": [
                {
                    "text": "```sqf\nhint format [\"Player's position: %1\", player call BIS_fnc_locationDescription];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Position` - (Optional, default <sqf inline>cameraOn call BIS_fnc_position)"
                        }
                    ],
                    "outline": "position call `BIS_fnc_locationDescription`",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_locationDescription"
        },
        "configuration": {
            "label": "BIS_fnc_locationDescription",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Creates or registers location logics (used in various modules, like [Ambient Civilians](https://community.bistudio.com/wiki/Ambient%20Civilians), [Ambient Civilian Vehicles](https://community.bistudio.com/wiki/Ambient%20Civilian%20Vehicles) or Warfare 2).\n\nUpon registering, function will set following variables into location logic's variable space:\n* \"class\" - unique class of location (either `**BIS_loc_<configname>}} or {{hl|BIS_loc_custom_<ID>**`)\n* \"name\" - name of location from config or `setName` command. If none is defined, class is used\n* \"type\" - config type\n* \"neighbors\" - config defined neighbor locations\n\nIf you are registering currently existing object and some of variables above is already stored in it, it will **not** be replaced.",
            "examples": [
                {
                    "text": "```sqf\n[\"CityCenter\", [getPosATL player, 1000]] call BIS_fnc_locations;\n```"
                },
                {
                    "text": "```sqf\n[[\"acityc_dolina\"]] call BIS_fnc_locations;\n```"
                },
                {
                    "text": "```sqf\n[[myLocation1, myLocation2], [], true] call BIS_fnc_locations;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "types",
                            "description": "`String` or `Array` of `String`s"
                        },
                        {
                            "name": "area",
                            "description": "`Array` in format [center, distance]"
                        },
                        {
                            "name": "debug",
                            "description": "`Boolean` (Optional)"
                        },
                        {
                            "name": "objects",
                            "description": "Array of `Object`s or `Location`s - list of specific locations to be registered"
                        }
                    ],
                    "outline": "[objects] call `BIS_fnc_locations`",
                    "returns": "`Array` - list of registered locations"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_locations"
        },
        "configuration": {
            "label": "BIS_fnc_locations",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_lockedDoorNoHandleOpen`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_lockedDoorNoHandleOpen"
        },
        "configuration": {
            "label": "BIS_fnc_lockedDoorNoHandleOpen",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_lockedDoorOpen`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_lockedDoorOpen"
        },
        "configuration": {
            "label": "BIS_fnc_lockedDoorOpen",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Shows a utility tool checking length of weapon info texts.\n[[File:BIS_fnc_locWeaponInfo screenshot.png|500px]]",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_locWeaponInfo;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_locWeaponInfo`",
                    "returns": "`Boolean` - `true` when done"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_locWeaponInfo"
        },
        "configuration": {
            "label": "BIS_fnc_locWeaponInfo",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Log debug message.\n**NOTE**: `**[[Description.ext#allowFunctionsLog|allowFunctionsLog]] has to be set to **1** in [[Description.ext]] for this function to have any effect.**`",
            "examples": [
                {
                    "text": "```sqf\ndiag_tickTime call BIS_fnc_log;\n```"
                },
                {
                    "text": "```sqf\n[dayTime, overcast, fog] call BIS_fnc_log;\n```"
                },
                {
                    "text": "```sqf\n(name player) call BIS_fnc_log;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "param",
                            "description": "`Anything`"
                        }
                    ],
                    "outline": "param call `BIS_fnc_log`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_log"
        },
        "configuration": {
            "label": "BIS_fnc_log",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Display debug message. \n**NOTE**: `**[[Description.ext#allowFunctionsLog|allowFunctionsLog]] has to be set to **1** in [[Description.ext]] for this function to have any effect.**`",
            "examples": [
                {
                    "text": "```sqf\n[\"My logged name: %1, My position: %2\", name player, getPos player] call BIS_fnc_logFormat;\n// RPT output:\n// 12:34:56 \"BIS_fnc_log: [BIS_fnc_debugConsoleExec] My logged name: Miller, My position: [4866.73,21947.9,0.00143433]\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "**text**",
                            "description": "`String` - formatted message or first param"
                        },
                        {
                            "name": "**parameters**",
                            "description": "`Anything` - (Optional) additional parameters"
                        }
                    ],
                    "outline": "[text, parameters] call `BIS_fnc_logFormat`",
                    "returns": "`Boolean` - `true` when done"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_logFormat"
        },
        "configuration": {
            "label": "BIS_fnc_logFormat",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Logs (using `diag_log`) a debug message (`profileName`, [playerUID](https://community.bistudio.com/wiki/getPlayerUID), [_fnc_scriptName](https://community.bistudio.com/wiki/Magic%20Variables%23fnc_scriptName), provided text) to **server**<nowiki/>'s [[Crash Files|.RPT]]. In singleplayer, `BIS_fnc_logFormat` is used.\n**NOTE**: `**[[Description.ext#allowFunctionsLog|allowFunctionsLog]] has to be set to **1** in [[Description.ext]] for this function to have any effect.**`",
            "examples": [
                {
                    "text": "```sqf\nprivate _currentFPS = diag_fps;\nif (_currentFPS < 10) then\n{\n\t[\"Player %1 has performance issues (%2 FPS)\", name player, _currentFPS] call BIS_fnc_logFormatServer;\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "text",
                            "description": "`String` or `Anything` - text using `format` standard (with %). Any non-`String` value will be converted (with `str`)"
                        },
                        {
                            "name": "argument1..n",
                            "description": "`Anything` - same as `format` arguments - referenced in _text_ as %1, %2 etc"
                        }
                    ],
                    "outline": "[text, argument1, argument2, ...] call `BIS_fnc_logFormatServer`",
                    "returns": "`Boolean` - `true` when done"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_logFormatServer"
        },
        "configuration": {
            "label": "BIS_fnc_logFormatServer",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Executes a code when one of the specified objects is looked at (player's cursor pointed towards it) for enough time",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _lookAtArray = \n[\n\t[\n\t\tBIS_apc,\t\t\t\t\t\t\t\t\t\t// name of object\n\t\t2,\t\t\t\t\t\t\t\t\t\t\t\t// time we have to look at it\n\t\tfalse,\t\t\t\t\t\t\t\t\t\t\t// do we destroy the entry after we looked at it\n\t\t{ [\"What a wonderful APC\"] call BIS_fnc_log; }\t// code\n\t],\n\t[\n\t\tBIS_otherUnit, \n\t\t2,\n\t\tfalse,\n\t\t{ [\"apc looked at\"] call BIS_fnc_log; }\n\t]\n];\n[true, _lookAtArray] spawn \"BIS_fnc_lookAtArray\";\nsleep 15;\n[false] spawn \"BIS_fnc_lookAtArray\";\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "initialize",
                            "description": "`Boolean` - `true` to initialize, `false` to remove it"
                        },
                        {
                            "name": "lookAtData",
                            "description": "`Array` - an array with arrays of look-up-data in form of:"
                        }
                    ],
                    "outline": "[initialize, lookAtData] call `BIS_fnc_lookAtArray`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_lookAtArray"
        },
        "configuration": {
            "label": "BIS_fnc_lookAtArray",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Event handler function for the `BIS_fnc_lookAtArray` function.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_lookAtArrayEH"
        },
        "configuration": {
            "label": "BIS_fnc_lookAtArrayEH",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Loop stacked code/function with timing and conditional control. Code and conditions are executed in [[Scheduler#Unscheduled_Environment|non-scheduled environment]].",
            "examples": [
                {
                    "text": "```sqf\n// hints time every five seconds\n[\"itemAdd\", [\"uniqueId\", { hint str time; }, 5]] call BIS_fnc_loop;\n```"
                },
                {
                    "text": "```sqf\n// removes stacked loop with id of uniqueId\n[\"itemRemove\", [\"uniqueId\"]] call BIS_fnc_loop;\n```"
                },
                {
                    "text": "```sqf\n// hints time every frame after BIS_variable is assigned\n[\"itemAdd\", [\"uniqueId\", { hint str time; }, nil, nil, { !isNil { BIS_variable } }]] call BIS_fnc_loop;\n```"
                },
                {
                    "text": "```sqf\n// hints time every five seconds after BIS_variable is assigned\n[\"itemAdd\", [\"uniqueId\", { hint str time; }, 5, \"seconds\", { !isNil { BIS_variable } }]] call BIS_fnc_loop;\n```"
                },
                {
                    "text": "```sqf\n// hints time every frame\n[\"itemAdd\", [\"uniqueId\", { hint str time; }]] call BIS_fnc_loop;\n```"
                },
                {
                    "text": "```sqf\n// remove item from loop with id \"uniqueId\"\n[\"itemRemove\", [\"uniqueId\"]] call BIS_fnc_loop;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "action",
                            "description": "`String` - can be one of:"
                        },
                        {
                            "name": "parameters",
                            "description": "`Array` - used with \"itemAdd\" and \"itemRemove\" _action_ (\"itemRemove\" only takes id):"
                        }
                    ],
                    "outline": "[action, parameters] call `BIS_fnc_loop`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_loop"
        },
        "configuration": {
            "label": "BIS_fnc_loop",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns the lowest number out of the passed set.",
            "examples": [
                {
                    "text": "```sqf\nprivate _result = [7,2,1,5,10] call BIS_fnc_lowestNum; //_result = 1\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "numbers",
                            "description": "`Array` - a set of numbers"
                        }
                    ],
                    "outline": "numbers call `BIS_fnc_lowestNum`",
                    "returns": "`Number` - lowest number in the set"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_lowestNum"
        },
        "configuration": {
            "label": "BIS_fnc_lowestNum",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return object's magazines as defined in config. Scans also turrets and pylons.",
            "examples": [
                {
                    "text": "```sqf\n\n\"O_MBT_04_cannon_F\" call BIS_fnc_magazinesEntityType;\n/*\n\treturns\n\t[\n\t\t\"20Rnd_125mm_APFSDS_T_Green\",\n\t\t\"12Rnd_125mm_HEAT_T_Green\",\n\t\t\"12Rnd_125mm_HE_T_Green\",\n\t\t\"1000Rnd_762x51_Belt_Green\",\n\t\t\"1000Rnd_762x51_Belt_Green\",\n\t\t\"500Rnd_127x99_mag_Tracer_Yellow\",\n\t\t\"SmokeLauncherMag\"\n\t]\n*/\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "class",
                            "description": "`String` - object class"
                        }
                    ],
                    "outline": "class call `BIS_fnc_magazinesEntityType`",
                    "returns": "`Array` of `String`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_magazinesEntityType"
        },
        "configuration": {
            "label": "BIS_fnc_magazinesEntityType",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns the magnitude of an array of numbers. The vector can have any number of elements. **Arma**: 3|Use `vectorMagnitude` instead",
            "examples": [
                {
                    "text": "```sqf\n[5,3] call BIS_fnc_magnitude;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vector",
                            "description": "`Array` - vector"
                        }
                    ],
                    "outline": "vector call `BIS_fnc_magnitude`",
                    "returns": "`Array` - new vector"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_magnitude"
        },
        "configuration": {
            "label": "BIS_fnc_magnitude",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns the square magnitude of an array of numbers. The vector can have any number of elements. **Arma**: 3|Use `vectorMagnitudeSqr` instead",
            "examples": [
                {
                    "text": "```sqf\n[5,3] call BIS_fnc_magnitudeSqr;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vector",
                            "description": "`Array` - vector"
                        }
                    ],
                    "outline": "vector call `BIS_fnc_magnitudeSqr`",
                    "returns": "`Array` - new vector"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_magnitudeSqr"
        },
        "configuration": {
            "label": "BIS_fnc_magnitudeSqr",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Set which vision modes curator can access.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_curator,[\"A3_Air_F_Heli\"],{count allPlayers > 15},\"Helicopters unlocked!\"] call BIS_fnc_manageCuratorAddons;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curator",
                            "description": "`Object` or `Array` of objects - curator(s)"
                        },
                        {
                            "name": "classes `Array` of `String`s",
                            "description": "CfgPatches classes"
                        },
                        {
                            "name": "classes `Code`",
                            "description": "unlock condition, must return `true`"
                        },
                        {
                            "name": "classes `String`",
                            "description": "notification text"
                        }
                    ],
                    "outline": "[curators,classes,condition,text] call `BIS_fnc_manageCuratorAddons`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_manageCuratorAddons"
        },
        "configuration": {
            "label": "BIS_fnc_manageCuratorAddons",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Handle repeated curator challenges.\n\tWhen rewards defined in the argument are exceeded, refilling points bar fill be offered instead.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_curator, nil, 1, [[{ hint \"Message\" }, \"Description\"]]] call BIS_fnc_manageCuratorChallenges;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curator `Object`",
                            "description": "curator"
                        },
                        {
                            "name": "challenges `Array`",
                            "description": "(Optional, default all challenges) list of supported challenges from CfgCuratorChallenges"
                        },
                        {
                            "name": "challenges `Number`",
                            "description": "(Optional, default 3) number of added challenges"
                        },
                        {
                            "name": "rewards `Array` of [arrays](https://community.bistudio.com/wiki/Array)",
                            "description": "(Optional, default <sqf inline>[]) rewards and their descriptions in format:"
                        },
                        {
                            "name": "defaultRewards `Array` of [arrays](https://community.bistudio.com/wiki/Array)",
                            "description": "(Optional, default <sqf inline>[]) default reward, used when previous rewards are exausted  in format:"
                        }
                    ],
                    "outline": "[curator,challenges,numChallenges,rewards,defaultRewards]] call `BIS_fnc_manageCuratorChallenges`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_manageCuratorChallenges"
        },
        "configuration": {
            "label": "BIS_fnc_manageCuratorChallenges",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Similar to `mapAnimAdd`, yet it provides additional parameters to allow for a non-linear zoom and various position interpolation modes.",
            "examples": [
                {
                    "text": "```sqf\n\nopenMap true; // the function will not work if the map is not open\n[2.0, 0.05, getPosASL player] call BIS_fnc_mapAnimAdd;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "duration",
                            "description": "`Number` - (Optional, default 1.0) the animation duration in seconds"
                        },
                        {
                            "name": "toZoom",
                            "description": "`Number` - (Optional, default 0.05) the zoom at the end of the animation, ranging from 0.01 (max. zoom) to 1 (zoomed out)"
                        },
                        {
                            "name": "toPosition",
                            "description": "`Position` - (Optional, default [0, 0, 0]) the position vector"
                        },
                        {
                            "name": "interpModeZoom",
                            "description": "`Number` - (Optional, default 12) the interpolation mode for the zoom"
                        },
                        {
                            "name": "interpModePosition",
                            "description": "`Number` - (Optional, default 12) the interpolation mode for the position"
                        },
                        {
                            "name": "fromZoom",
                            "description": "`Number` - (Optional, default current map zoom) the zoom at the begnning of the animation, ranging from 0.01 (max. zoom) to 1 (zoomed out)"
                        },
                        {
                            "name": "fromPosition",
                            "description": "`Array` format `Position` - (Optional, default current map position) the position vector from which to start the animation"
                        }
                    ],
                    "outline": "[duration, toZoom, toPosition, interpModeZoom, interpModePosition, fromZoom, fromPosition] call `BIS_fnc_mapAnimAdd`",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_mapAnimAdd"
        },
        "configuration": {
            "label": "BIS_fnc_mapAnimAdd",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor:\n\tNelson Duarte\n\n\tDescription:\n\tSame as mapAnimClear\n\n\tParameters:\n\tNothing\n\n\tReturns:\n\tNothing\n\n\tExamples:\n\t[] call BIS_fnc_mapAnimClear;\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_mapAnimClear`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_mapAnimClear"
        },
        "configuration": {
            "label": "BIS_fnc_mapAnimClear",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor:\n\tNelson Duarte\n\n\tDescription:\n\tSame as mapAnimAdd but with possibility for non linear zoom and position interpolation modes\n\n\tParameters:\n\tNothing\n\n\tReturns:\n\tBool - False if map animation is in progress, true if not\n\n\tExamples:\n\t[] call BIS_fnc_mapAnimDone;\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_mapAnimDone`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_mapAnimDone"
        },
        "configuration": {
            "label": "BIS_fnc_mapAnimDone",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns the size of map grid square at current zoom level.\n**NOTE**: This function caches config lookup result on the first use and for the duration of the mission, making subsequent access 2-3 times faster.",
            "examples": [
                {
                    "text": "```sqf\nprivate _gridSize = [] call BIS_fnc_mapGridSize;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "map",
                            "description": "`Control` - (Optional, default main mission map (`findDisplay` 12 `displayCtrl` 51)) map control"
                        }
                    ],
                    "outline": "[map] call `BIS_fnc_mapGridSize`",
                    "returns": "`Number` - map grid size"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_mapGridSize"
        },
        "configuration": {
            "label": "BIS_fnc_mapGridSize",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns map size from config. Do not confuse with `worldSize`. The engine command calculates the map size and doesn't read it from config.",
            "examples": [
                {
                    "text": "```sqf\n\"Altis\" call BIS_fnc_mapSize;\n```"
                },
                {
                    "text": "```sqf\nworldName call BIS_fnc_mapSize;\n```"
                },
                {
                    "text": "```sqf\ncall BIS_fnc_mapSize;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "terrainName",
                            "description": "`String` - (Optional, default `worldName`) world name"
                        }
                    ],
                    "outline": "terrainName call `BIS_fnc_mapSize`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_mapSize"
        },
        "configuration": {
            "label": "BIS_fnc_mapSize",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tCreates marker with given params.\n\tReads config to recognize settings - use for quick debugging only.\n\n\tParameter(s):\n\t_this: ARRAY of values:\n\t\tSTRING - one of type, color, brush or shape. If no corresponding class is found, value is used as marker text\n\t\tARRAY\n\t\t\t[STRING(,ANY,ANY,...)] - marker name with optional arguments\n\t\t\t[NUMBER] - marker size [a,a]\n\t\t\t[NUMBER,NUMBER] - marker size [x,y]\n\t\t\t[NUMBER,NUMBER,NUMBER] - marker position [x,y,z]\n\t\tOBJECT - object's position\n\t\tNUMBER - marker dir\n\t\tBOOL - marker locality (true if global)\n\n\tReturns:\n\tSTRING - created marker\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_markerCreate;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_markerCreate` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_markerCreate"
        },
        "configuration": {
            "label": "BIS_fnc_markerCreate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns marker params in format compatible with `BIS_fnc_markerCreate`.",
            "examples": [
                {
                    "text": "```sqf\nprivate _params = \"marker_1\" call BIS_fnc_markerParams;\n```"
                },
                {
                    "text": "```sqf\n\n(\"marker_1\" call BIS_fnc_markerParams) params [\"_nameArray\", \"_position\", \"_size\", \"_colour\", \"_type\", \"_brush\", \"_shape\", \"_alpha\", \"_text\"];\n_position params [\"_posX\", \"_posY\"];\n_nameArray params [\"_marker\"];\n_size params [\"_a\", \"_b\"];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "varName",
                            "description": "`String` - variable name of the marker"
                        }
                    ],
                    "outline": "varName call `BIS_fnc_markerParams`",
                    "returns": "`Array` - marker parameters in format [varName, pos, size, colour, type, brush, shape, alpha, name] where:\n* varName: `Array` with `String` - variable name\n* pos: `Array` format `Position` - position (see `setMarkerPos`)\n* size: `Array` of `Number`s in format [x, y] (see `setMarkerSize`)\n* colour: `String` - colour (see `setMarkerColor`)\n* type: `String` - type (see `setMarkerType`)\n* brush: `String` - brush (see `setMarkerBrush`)\n* shape: `String` - shape (see `setMarkerShape`)\n* alpha: `Number` - transparency (see `setMarkerAlpha`)\n* text: `String` - text (see `setMarkerText`)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_markerParams"
        },
        "configuration": {
            "label": "BIS_fnc_markerParams",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Create marker(s) between two points.",
            "examples": [
                {
                    "text": "```sqf\n[\"markerStart\", \"markerEnd\"] call BIS_fnc_markerPath;\n```"
                },
                {
                    "text": "```sqf\n[player, nearestLocation [getPos player, \"nameCity\"]] call BIS_fnc_markerPath;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "start",
                            "description": "`Position`, `Waypoint`, `Object`, `Location` or `String`:"
                        },
                        {
                            "name": "end",
                            "description": "same as _start_"
                        },
                        {
                            "name": "spacing",
                            "description": "`Number` - (Optional, default 1000) distance between markers. When value is negative, line marker is used instead with thickness of this value"
                        },
                        {
                            "name": "params",
                            "description": "`Array` - (Optional, default [\"BIS_fnc_markerPath_marker__#_\", \"mil_triangle\", \"colorgreen\"]) marker params (see `BIS_fnc_markerCreate` for details)"
                        }
                    ],
                    "outline": "[start, end, spacing, params] call `BIS_fnc_markerPath`",
                    "returns": "`Array` - list of created markers"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_markerPath"
        },
        "configuration": {
            "label": "BIS_fnc_markerPath",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Converts existing marker to `String`, for example: `**<nowiki>\"|marker_0|[3799.0110,2781.9880,0.0000]|mil_pickup|ICON|[1,1]|0|Solid|Default|1|You are here\"</nowiki>**`",
            "examples": [
                {
                    "text": "```sqf\n\"marker1\" call BIS_fnc_markerToString;\n```"
                },
                {
                    "text": "```sqf\n[\"marker1\", \":\"] call BIS_fnc_markerToString;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String` - existing marker"
                        },
                        {
                            "name": "delimiter",
                            "description": "`String` - (Optional, default `**{{!}}**`) a single data delimiter character"
                        }
                    ],
                    "outline": "[markerName, delimiter] call `BIS_fnc_markerToString`",
                    "returns": "`String` - serialized marker to be used with `BIS_fnc_stringToMarker` or `BIS_fnc_stringToMarkerLocal`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_markerToString"
        },
        "configuration": {
            "label": "BIS_fnc_markerToString",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Makes an existing or new marker cover a trigger area.",
            "examples": [
                {
                    "text": "```sqf\nprivate _createdMarker = [\"marker1\", myTrigger] call BIS_fnc_markerToTrigger;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String` - marker name - if no marker uses the name, a marker will be created"
                        },
                        {
                            "name": "trigger",
                            "description": "`Object` - trigger that will be covered by the marker"
                        },
                        {
                            "name": "localChange",
                            "description": "`Boolean` (Optional, default `false`) are changes local (local marker creation and/or local marker changes)"
                        }
                    ],
                    "outline": "[markerName, trigger_, localChange_] call `BIS_fnc_markerToTrigger`",
                    "returns": "`String` - marker name or \"\" if marker couldn't be moved or created or if provided _markerName_ is \"\""
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_markerToTrigger"
        },
        "configuration": {
            "label": "BIS_fnc_markerToTrigger",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tCreates a marker on each uncompleted waypoint and marks it checked after completing that WP.\n\tNote: \"On Activation\" WP code is used for handling the markers; if this code is overwritten during the course, it can break this functionality\n\n\tParameter(s):\n\t_this select 0: OBJECT - unit who will have its waypoints marked\n\t_this select 1 (Optional, use \"\" for default): STRING - text of hint shown after completing a waypoint, %1 is used for WP number (default \"\")\n\t_this select 2 (Optional, use [] for default): ARRAY of STRINGS - marker text format for [uncompleted, completed] waypoints, %1 is used for WP number (default [\"%1\", \"%1\"])\n\t_this select 3 (Optional, use [] for default): ARRAY of STRINGS - marker icon for [uncompleted, completed] waypoints (default [\"mil_circle\", \"mil_circle\"])\n\t_this select 4 (Optional, use [] for default): ARRAY of STRINGS - marker color for [uncompleted, completed] waypoints (default [\"ColorRed\", \"ColorGreen\"])\n\t_this select 5 (Optional, use [] for default): ARRAY of NUMBERS - marker size for [uncompleted, completed] waypoints (default [0.75, 0.75])\n\n\tReturns:\n\tNOTHING\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_markWaypoints;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_markWaypoints` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_markWaypoints"
        },
        "configuration": {
            "label": "BIS_fnc_markWaypoints",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Function to return the maximum difference between all values in an array.",
            "examples": [
                {
                    "text": "```sqf\nprivate _maxDiff = [[0, 5, 10, -5]] call BIS_fnc_maxDiffArray; // will return 15 (-5 to 10)\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "arrayOfNumbers",
                            "description": "`Array` - numbers to be tested"
                        }
                    ],
                    "outline": "[arrayOfNumbers] call `BIS_fnc_maxDiffArray`",
                    "returns": "`Number` - the biggest difference"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_maxDiffArray"
        },
        "configuration": {
            "label": "BIS_fnc_maxDiffArray",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Mirrors settings from one curator to another.",
            "examples": [
                {
                    "text": "```sqf\n[\n\t[curator_1, curator_2], \n\t[curator_3, curator_4], \n\t[\"addons\", \"objects\", \"coefs\"] \n] call BIS_fnc_mirrorCuratorSettings;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "from",
                            "description": "`Object` or `Array` of objects - curators(s) from which settings are taken"
                        },
                        {
                            "name": "to",
                            "description": "`Object` or `Array` of objects - curators(s) to which settings are applied to"
                        },
                        {
                            "name": "modes",
                            "description": "`Array` of `String`s - copy modes, can be:"
                        },
                        {
                            "name": "shareType",
                            "description": "`Boolean` - `true` to share settings both ways, `false` to make second curator slave to the first one"
                        }
                    ],
                    "outline": "[from, to, modes, shareType] call `BIS_fnc_mirrorCuratorSettings`",
                    "returns": "`Boolean`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_mirrorCuratorSettings"
        },
        "configuration": {
            "label": "BIS_fnc_mirrorCuratorSettings",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Setting up the animations with correct positions for object - choose correct performance. For ex. fixingTowingTractor (read the description). **WARNING**: This function most likely doesn't work outside of Arma 2 and Arma 2: Operation Arrowhead.",
            "examples": [
                {
                    "text": "```sqf\n[\"twoTalking1\", unit1, myCar, unit2] call BIS_fnc_miscAnim;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "anim",
                            "description": "`String` - **case-sensitive**, can be one of:"
                        },
                        {
                            "name": "person1",
                            "description": "`Object` - first actor"
                        },
                        {
                            "name": "vehicle",
                            "description": "`String` - reference object (chair, table, vehicle etc.). Only used for certain anims"
                        },
                        {
                            "name": "person2",
                            "description": "`Object` - (Optional, default _person1_) - second actor, if any"
                        },
                        {
                            "name": "isOnBoard",
                            "description": "`Boolean` - (Optional, default `false`) is the unit on Arma 2 LHD (15m height)"
                        },
                        {
                            "name": "altitude",
                            "description": "`Number` - (Optional, default 0) custom altitude to use instead of 0 or 15m"
                        },
                        {
                            "name": "doMove",
                            "description": "`Anything` - (Optional, default `false`) nil to `setPos` unit, any value to make it move _via_ "
                        }
                    ],
                    "outline": "[anim, person1, vehicle_, person2, isOnBoard, altitude, doMove_] call `BIS_fnc_miscAnim`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_miscAnim"
        },
        "configuration": {
            "label": "BIS_fnc_miscAnim",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Workaround fix for ATGM/SAM launch positions",
            "examples": [
                {
                    "text": "```sqf\n[_vehicle,_missile,\"missile_move\",\"MissileBase\"] call BIS_fnc_missileLaunchPositionFix;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - vehicle"
                        },
                        {
                            "name": "projectile",
                            "description": "`Object` - projectile"
                        },
                        {
                            "name": "selection",
                            "description": "`Object` - selection to adjust the missile's position to"
                        },
                        {
                            "name": "projectileType",
                            "description": "`Object` - type of projectile that should be adjusted"
                        }
                    ],
                    "outline": "[vehicle, projectile, selection, projectileType] call `BIS_fnc_missileLaunchPositionFix`",
                    "returns": "`Boolean` - returns `true` if successful"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_missileLaunchPositionFix"
        },
        "configuration": {
            "label": "BIS_fnc_missileLaunchPositionFix",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tHeader function of local mission conversations\n\n\tParameter(s):\n\t\t0: STRING - unique mode\n\t\t1 (Optional): ANY - additional params\n\n\tReturns:\n\tBOOL\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_missionConversations;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_missionConversations` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_missionConversations"
        },
        "configuration": {
            "label": "BIS_fnc_missionConversations",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**NOTE**: This function is blank and does nothing.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_missionConversationsLocal;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_missionConversationsLocal`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_missionConversationsLocal"
        },
        "configuration": {
            "label": "BIS_fnc_missionConversationsLocal",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "This function is automatically run in [[Arma 3: Functions Library#Attributes|post-init]] by a [CfgFunctions](https://community.bistudio.com/wiki/Arma%203%3A%20Functions%20Library) declaration. If the mission contains a `**missionFlow.fsm**` file, it will be loaded, otherwise an empty, default one will be used.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_missionFlow;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_missionFlow`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_missionFlow"
        },
        "configuration": {
            "label": "BIS_fnc_missionFlow",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>#define VAR_RELOADS\t(missionname + \"_reloads_\" + str ismultiplayer)\n\n//--- Mission end type and rating\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_missionHandlers;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_missionHandlers` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_missionHandlers"
        },
        "configuration": {
            "label": "BIS_fnc_missionHandlers",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return respawn type defined in [[Description.ext]]. Can return as `Number` (e.g 1) or `String` (e.g \"BIRD\").",
            "examples": [
                {
                    "text": "```sqf\nprivate _respawnAsNumber = 0 call BIS_fnc_missionRespawnType;\n```"
                },
                {
                    "text": "```sqf\nprivate _respawnAsString = \"\" call BIS_fnc_missionRespawnType;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`Number` or `String` - wanted return value type"
                        }
                    ],
                    "outline": "type call `BIS_fnc_missionRespawnType`",
                    "returns": "`Number` or `String` - return type depends on _type_"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_missionRespawnType"
        },
        "configuration": {
            "label": "BIS_fnc_missionRespawnType",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Function that draws clickable, hoverable and animated icons on the map that execute a user-defined code when pressed.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _area = [750, 400];\nprivate _missionsList =\n[\n\t[\n\t\tgetMarkerPos \"BIS_briefMarkerINFANTRY\",\n\t\t\"Infantry\",\n\t\t\"Your mission is to do stuff\",\n\t\t\"AnimBriefing\\intro_stage1a_CA.paa\",\n\t\t{ hint \"infantry mission selected\" }\n\t],\n\t[\n\t\tgetMarkerPos \"BIS_briefMarkerSPECIALFORCES\",\n\t\t\"Special Forces\",\n\t\t\"Your mission is to do stuff but in a more special way\",\n\t\t\"AnimBriefing\\intro_stage1a_CA.paa\",\n\t\t{ hint \"special forces mission selected\" }\n\t]\n];\n\nprivate _index = [_area, getMarkerPos \"BIS_cameraCenter\", _missionsList] call BIS_fnc_missionSelector;\nprivate _missionDetails = _missionsList select _index;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "area",
                            "description": "`Array` of `Number` - (Optional, default [100,100]) used to determine map's zoom, format [width, height]"
                        },
                        {
                            "name": "mapCenter",
                            "description": "[Position2D](https://community.bistudio.com/wiki/Position%23Introduction) - (Optional, default [0,0]) center position where the map camera will be positioned"
                        },
                        {
                            "name": "missionsArray",
                            "description": "`Array` - (Optional, default <sqf inline>[]) list of selectable missions and their parameters, to format [pos, text, tooltip, picture, code]:"
                        }
                    ],
                    "outline": "[area, mapCenter, missionsArray] call `BIS_fnc_missionSelector`",
                    "returns": "`Number` - index of the chosen mission"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_missionSelector"
        },
        "configuration": {
            "label": "BIS_fnc_missionSelector",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tHeader function of local mission tasks.\n\tAutomatically declares following variables:\n\t\t_taskID: STRING\n\t\t_taskState: STRING\n\t\t_taskExists: BOOL\n\n\tParameter(s):\n\t\t0: STRING - unique mode\n\t\t1 (Optional): ANY - additional params\n\t\t2 (Optional): CODE - specific task function (default: \"BIS_fnc_missionTasksLocal\")\n\n\tReturns:\n\tBOOL\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_missionTasks;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_missionTasks` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_missionTasks"
        },
        "configuration": {
            "label": "BIS_fnc_missionTasks",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**NOTE**: This function is blank and does nothing.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_missionTasksLocal;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_missionTasksLocal`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_missionTasksLocal"
        },
        "configuration": {
            "label": "BIS_fnc_missionTasksLocal",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns time in seconds until the mission end. Remaining time can be set using `estimatedTimeLeft` command or using `BIS_fnc_countdown`.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_missionTimeLeft;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_missionTimeLeft`",
                    "returns": "`Number` - time left"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_missionTimeLeft"
        },
        "configuration": {
            "label": "BIS_fnc_missionTimeLeft",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleAI;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleAI` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleAI"
        },
        "configuration": {
            "label": "BIS_fnc_moduleAI",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleAmmo;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleAmmo` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleAmmo"
        },
        "configuration": {
            "label": "BIS_fnc_moduleAmmo",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleAnimals;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleAnimals` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleAnimals"
        },
        "configuration": {
            "label": "BIS_fnc_moduleAnimals",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleArsenal;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleArsenal` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleArsenal"
        },
        "configuration": {
            "label": "BIS_fnc_moduleArsenal",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleBleedTickets;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleBleedTickets` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleBleedTickets"
        },
        "configuration": {
            "label": "BIS_fnc_moduleBleedTickets",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tChange the current Stage in Bootcamp MP Guided Mode\n\n\tParameter(s):\n\thttp://community.bistudio.com/wiki/Arma_3_Modules\n\n\tReturns:\n\tNONE\n*/\n\n// Parameters\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleBootcampStage;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleBootcampStage` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleBootcampStage"
        },
        "configuration": {
            "label": "BIS_fnc_moduleBootcampStage",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleCAS;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleCAS` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleCAS"
        },
        "configuration": {
            "label": "BIS_fnc_moduleCAS",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Make a list of units use any *chat command (`groupChat`, `vehicleChat`, `sideChat`, `commandChat`, `globalChat`).",
            "examples": [
                {
                    "text": "```sqf\nmyLogic setVariable [\"Channel\", \"2\"];\nmyLogic setVariable [\"Text\", \"Hello everyone, this is side chat!\"];\n[myLogic, [player], true] call BIS_fnc_moduleChat;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "logic",
                            "description": "`Object` the logic. Possible `setVariable` parameters:"
                        },
                        {
                            "name": "units",
                            "description": "`Array` of `Object`s - list of chatting units"
                        },
                        {
                            "name": "isActivated",
                            "description": "`Boolean` - (Optional, default `true`) if `true`, the module is activated and chat is send. `false` disables the module"
                        }
                    ],
                    "outline": "[logic, units, isActivated] call `BIS_fnc_moduleChat`",
                    "returns": "`Boolean` - `true` when done, even if _isActivated_ equals `false`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleChat"
        },
        "configuration": {
            "label": "BIS_fnc_moduleChat",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*--------------------------------------------------------------------------------------------------\n\n\tExample:\n\t[\"getObjects\",[_module,\"ModuleCivilianPresenceSafeSpot_F\"]] call BIS_fnc_moduleCivilianPresence;\n\n--------------------------------------------------------------------------------------------------*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_moduleCivilianPresence`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleCivilianPresence"
        },
        "configuration": {
            "label": "BIS_fnc_moduleCivilianPresence",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*--------------------------------------------------------------------------------------------------\n\n--------------------------------------------------------------------------------------------------*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_moduleCivilianPresenceSafeSpot`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleCivilianPresenceSafeSpot"
        },
        "configuration": {
            "label": "BIS_fnc_moduleCivilianPresenceSafeSpot",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*--------------------------------------------------------------------------------------------------\n\n--------------------------------------------------------------------------------------------------*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_moduleCivilianPresenceUnit`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleCivilianPresenceUnit"
        },
        "configuration": {
            "label": "BIS_fnc_moduleCivilianPresenceUnit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleCombatGetIn;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleCombatGetIn` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleCombatGetIn"
        },
        "configuration": {
            "label": "BIS_fnc_moduleCombatGetIn",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleCountdown;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleCountdown` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleCountdown"
        },
        "configuration": {
            "label": "BIS_fnc_moduleCountdown",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "[[File:BIS_fnc_moduleCoverMap.jpg|right|500px]]\nCovers the map except for a defined area. This function was designed to be used by the [Modules framework](https://community.bistudio.com/wiki/Modules), but it can also be used without the module. The effect does not move with the centerObject.\n\n**IMPORTANT**: \nIt is essential for the function to work that **centerObject** has the **objectArea** variable defined.\n\n```sqf\ncenterObject setVariable [\"objectArea\", [sizeX, sizeY, rotation]]\n```\n\n* centerObject: `Object` - object which is used as center\n* sizeX: `Number` - length in x in meters\n* sizeY: `Number` - length in y in meters\n* rotation: `Number` - shape's rotation in degree",
            "examples": [
                {
                    "text": "```sqf\n\n// covers the whole map except an area of 1000m by 1000m\n// can be used to dynamically change size of the area during mission\ncenterObject setVariable [\"objectArea\",[1000, 1000, 0]];\t// same format with [[triggerArea]], except the function only needs first three\n[centerObject, [], true] call BIS_fnc_moduleCoverMap;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "centerUnit",
                            "description": "`Object` - object which is used as center"
                        },
                        {
                            "name": "units",
                            "description": "`Array` - **Not used inside the function**"
                        },
                        {
                            "name": "init",
                            "description": "`Boolean` - `true` to create cover map effect, `false` to remove all markers and destroy the effect"
                        }
                    ],
                    "outline": "[centerUnit, units, init] call `BIS_fnc_moduleCoverMap`",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleCoverMap"
        },
        "configuration": {
            "label": "BIS_fnc_moduleCoverMap",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleCreateDiaryRecord;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleCreateDiaryRecord` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleCreateDiaryRecord"
        },
        "configuration": {
            "label": "BIS_fnc_moduleCreateDiaryRecord",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleCreateProjectile;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleCreateProjectile` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleCreateProjectile"
        },
        "configuration": {
            "label": "BIS_fnc_moduleCreateProjectile",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleCurator;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleCurator` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleCurator"
        },
        "configuration": {
            "label": "BIS_fnc_moduleCurator",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleCuratorAddAddons;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleCuratorAddAddons` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleCuratorAddAddons"
        },
        "configuration": {
            "label": "BIS_fnc_moduleCuratorAddAddons",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleCuratorAddCameraArea;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleCuratorAddCameraArea` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleCuratorAddCameraArea"
        },
        "configuration": {
            "label": "BIS_fnc_moduleCuratorAddCameraArea",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleCuratorAddEditableObjects;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleCuratorAddEditableObjects` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleCuratorAddEditableObjects"
        },
        "configuration": {
            "label": "BIS_fnc_moduleCuratorAddEditableObjects",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleCuratorAddEditingArea;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleCuratorAddEditingArea` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleCuratorAddEditingArea"
        },
        "configuration": {
            "label": "BIS_fnc_moduleCuratorAddEditingArea",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleCuratorAddEditingAreaPlayers;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleCuratorAddEditingAreaPlayers` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleCuratorAddEditingAreaPlayers"
        },
        "configuration": {
            "label": "BIS_fnc_moduleCuratorAddEditingAreaPlayers",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleCuratorAddIcon;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleCuratorAddIcon` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleCuratorAddIcon"
        },
        "configuration": {
            "label": "BIS_fnc_moduleCuratorAddIcon",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleCuratorAddPoints;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleCuratorAddPoints` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleCuratorAddPoints"
        },
        "configuration": {
            "label": "BIS_fnc_moduleCuratorAddPoints",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleCuratorSetAttributes;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleCuratorSetAttributes` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleCuratorSetAttributes"
        },
        "configuration": {
            "label": "BIS_fnc_moduleCuratorSetAttributes",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleCuratorSetCamera;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleCuratorSetCamera` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleCuratorSetCamera"
        },
        "configuration": {
            "label": "BIS_fnc_moduleCuratorSetCamera",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleCuratorSetCoefs;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleCuratorSetCoefs` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleCuratorSetCoefs"
        },
        "configuration": {
            "label": "BIS_fnc_moduleCuratorSetCoefs",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleCuratorSetCostsDefault;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleCuratorSetCostsDefault` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleCuratorSetCostsDefault"
        },
        "configuration": {
            "label": "BIS_fnc_moduleCuratorSetCostsDefault",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleCuratorSetCostsSide;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleCuratorSetCostsSide` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleCuratorSetCostsSide"
        },
        "configuration": {
            "label": "BIS_fnc_moduleCuratorSetCostsSide",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleCuratorSetCostsVehicleClass;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleCuratorSetCostsVehicleClass` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleCuratorSetCostsVehicleClass"
        },
        "configuration": {
            "label": "BIS_fnc_moduleCuratorSetCostsVehicleClass",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleCuratorSetEditingAreaType;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleCuratorSetEditingAreaType` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleCuratorSetEditingAreaType"
        },
        "configuration": {
            "label": "BIS_fnc_moduleCuratorSetEditingAreaType",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleCuratorSetObjectCost;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleCuratorSetObjectCost` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleCuratorSetObjectCost"
        },
        "configuration": {
            "label": "BIS_fnc_moduleCuratorSetObjectCost",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Damage given vehicles.\n**NOTE**: Regarding locality: if a hitpoint is defined,\n{{Icon|localArgument|32 `setHitPointDamage` is used. Else,\n\n{{Icon|globalArgument|32}} `setDamage` is used.}}",
            "examples": [
                {
                    "text": "```sqf\n[myLogic, vehicle player, true] call BIS_fnc_moduleDamage;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "logic",
                            "description": "`Object` - the logic. Possible `setVariable` parameter:"
                        },
                        {
                            "name": "vehicles",
                            "description": "`Array` of `Object`s - list of vehicles"
                        },
                        {
                            "name": "isActivated",
                            "description": "`Boolean` - (Optional, default `true`) if `true`, the fuel is set"
                        }
                    ],
                    "outline": "[logic, vehicles, isActivated] call `BIS_fnc_moduleDamage`",
                    "returns": "`Boolean` - `true` when done, even if _isActivated_ equals `false`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleDamage"
        },
        "configuration": {
            "label": "BIS_fnc_moduleDamage",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Used by the Date module.",
            "examples": [
                {
                    "text": "```sqf\n[logic, nil, true] call BIS_fnc_moduleDate;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "logic",
                            "description": "`Object` - date module"
                        },
                        {
                            "name": "null",
                            "description": "`Anything` - not used"
                        },
                        {
                            "name": "activated",
                            "description": "`Boolean` - (Optional, default `true`) if `false` nothing will happen"
                        }
                    ],
                    "outline": "[logic, null, activated] call `BIS_fnc_moduleDate`",
                    "returns": "`Boolean` - always `true`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleDate"
        },
        "configuration": {
            "label": "BIS_fnc_moduleDate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleDiary;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleDiary` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleDiary"
        },
        "configuration": {
            "label": "BIS_fnc_moduleDiary",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleDoorOpen;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleDoorOpen` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleDoorOpen"
        },
        "configuration": {
            "label": "BIS_fnc_moduleDoorOpen",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*--------------------------------------------------------------------------------------------------\n\n\tSetups given terrain object.\n\n--------------------------------------------------------------------------------------------------*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_moduleEditTerrainObject`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleEditTerrainObject"
        },
        "configuration": {
            "label": "BIS_fnc_moduleEditTerrainObject",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Creates underwater bubble effect on defined place (called usually by `BIS_fnc_moduleEffectsEmitterCreator`).**NOTE**: Mainly meant to be used by modules available in [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor)",
            "examples": [
                {
                    "text": "```sqf\n[BIS_module] call BIS_fnc_moduleEffectsBubbles;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "module",
                            "description": "`Object` - module"
                        }
                    ],
                    "outline": "[module] call `BIS_fnc_moduleEffectsBubbles`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleEffectsBubbles"
        },
        "configuration": {
            "label": "BIS_fnc_moduleEffectsBubbles",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tFile: fn_moduleEffectsEmitterCreator.sqf\n\n\tDescription:\n\tModule function. Creates particle emitters and calls effect function.\n\n\tParameter(s):\n\t_this select 0 (Object) - Module logic.\n\t_this select 1 (String) - Function name.\n\t_this select 2 (Number) - Optional - Number of emitters.\n\t\n\tReturned value:\n\tNone.\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleEffectsEmitterCreator;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleEffectsEmitterCreator` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleEffectsEmitterCreator"
        },
        "configuration": {
            "label": "BIS_fnc_moduleEffectsEmitterCreator",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Creates fire on position of module (called usually by `BIS_fnc_moduleEffectsEmitterCreator`). **NOTE**: Mainly meant to be used by modules available in [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor)",
            "examples": [
                {
                    "text": "```sqf\n[BIS_module] call BIS_fnc_moduleEffectsFire;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "module",
                            "description": "`Object` - module"
                        }
                    ],
                    "outline": "[module] call `BIS_fnc_moduleEffectsFire`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleEffectsFire"
        },
        "configuration": {
            "label": "BIS_fnc_moduleEffectsFire",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Creates underwater plankton effect around player (called usually by `BIS_fnc_moduleEffectsEmitterCreator`).**NOTE**: Mainly meant to be used by modules available in [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor)",
            "examples": [
                {
                    "text": "```sqf\n[BIS_module] call BIS_fnc_moduleEffectsPlankton;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "module",
                            "description": "`Object` - module"
                        }
                    ],
                    "outline": "[module] call `BIS_fnc_moduleEffectsPlankton`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleEffectsPlankton"
        },
        "configuration": {
            "label": "BIS_fnc_moduleEffectsPlankton",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Creates empty ammo cartridges on position of the module logic. **NOTE**: Mainly meant to be used by modules available in [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor).",
            "examples": [
                {
                    "text": "```sqf\n[BIS_module] call BIS_fnc_moduleEffectsShells;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "module",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "[module] call `BIS_fnc_moduleEffectsShells`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleEffectsShells"
        },
        "configuration": {
            "label": "BIS_fnc_moduleEffectsShells",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Creates smoke on position of module (called usually by `BIS_fnc_moduleEffectsEmitterCreator`).**NOTE**: Mainly meant to be used by modules available in [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor)",
            "examples": [
                {
                    "text": "```sqf\n[BIS_module] call BIS_fnc_moduleEffectsSmoke;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "module",
                            "description": "`Object` - module"
                        }
                    ],
                    "outline": "[module] call `BIS_fnc_moduleEffectsSmoke`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleEffectsSmoke"
        },
        "configuration": {
            "label": "BIS_fnc_moduleEffectsSmoke",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleEndMission;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleEndMission` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleEndMission"
        },
        "configuration": {
            "label": "BIS_fnc_moduleEndMission",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleExecute;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleExecute` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleExecute"
        },
        "configuration": {
            "label": "BIS_fnc_moduleExecute",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleFDBalloonAirDestruction;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleFDBalloonAirDestruction` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleFDBalloonAirDestruction"
        },
        "configuration": {
            "label": "BIS_fnc_moduleFDBalloonAirDestruction",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleFDBalloonWaterDestruction;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleFDBalloonWaterDestruction` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleFDBalloonWaterDestruction"
        },
        "configuration": {
            "label": "BIS_fnc_moduleFDBalloonWaterDestruction",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleFDCPClear;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleFDCPClear` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleFDCPClear"
        },
        "configuration": {
            "label": "BIS_fnc_moduleFDCPClear",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleFDCPIn;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleFDCPIn` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleFDCPIn"
        },
        "configuration": {
            "label": "BIS_fnc_moduleFDCPIn",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleFDCPOut;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleFDCPOut` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleFDCPOut"
        },
        "configuration": {
            "label": "BIS_fnc_moduleFDCPOut",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Gradually change the alpha of the given marker.",
            "examples": [
                {
                    "text": "```sqf\n[\"tankMarker\", 0.25] spawn BIS_fnc_moduleFDFadeMarker;\n```"
                },
                {
                    "text": "Creates a pulsating marker:\n\n```sqf\n[] spawn \n{\n\twhile { alive enemyTank } do\n\t{\n\t\t[\"tankMarker\", 1] call BIS_fnc_moduleFDFadeMarker;\n\t\t[\"tankMarker\", 0] call BIS_fnc_moduleFDFadeMarker;\n\t\tsleep 0.05;\n\t};\n\t[\"tankMarker\", 0] call BIS_fnc_moduleFDFadeMarker;\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "markerName",
                            "description": "`String`"
                        },
                        {
                            "name": "alpha",
                            "description": "`Number` - wanted marker alpha"
                        }
                    ],
                    "outline": "[markerName, alpha] spawn `BIS_fnc_moduleFDFadeMarker`",
                    "returns": "`Boolean` - `true` when done"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleFDFadeMarker"
        },
        "configuration": {
            "label": "BIS_fnc_moduleFDFadeMarker",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleFDSkeetDestruction;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleFDSkeetDestruction` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleFDSkeetDestruction"
        },
        "configuration": {
            "label": "BIS_fnc_moduleFDSkeetDestruction",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleFDStatsClear;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleFDStatsClear` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleFDStatsClear"
        },
        "configuration": {
            "label": "BIS_fnc_moduleFDStatsClear",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleFiringDrill;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleFiringDrill` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleFiringDrill"
        },
        "configuration": {
            "label": "BIS_fnc_moduleFiringDrill",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*******************************************************************************\n\tVersion:\t\t\t2.0\n\tName:\t\t\t\tFriendly Fire\n\tAuthor:\t\t\t\tZozo\n\tDESCRIPTION:\tHandles the friendly fire. Use either the module interface in the editor, or call individual functions.\n\tPARAMETERS:\t\t1) function called - string, list of functions:\n\t\t\t\t- Init\n\t\t\t\t- Destroy\n\t\t\t\t- AddUnits\n\t\t\t\t- RemoveUnits\n\t\t\t\t- ChangePriority\n\t\t\t\t- ListActiveUnit\n\t\t\t\t2) parameter for the function\n\tRETURNED VALUE:\tdepends on the function called\n\t\tEXAMPLES:\n\t\t\t\t// Initializes the module if not added in editor\n\t\t\t\t// No units are directly checked for friendly fire, but renegade state is checked anyway\n\t\t\t\t_ret = [\"Init\", []] call BIS_fnc_moduleFriendlyFire\n\n\t\t\t\t// Initializes the module if not added in editor\n\t\t\t\t// BIS_vip1, BIS_vip2, BIS_noVip units are directly checked for friendly fire\n\t\t\t\tx = [\"Init\", [[BIS_vip1, BIS_vip2, BIS_noVip],true]] call BIS_fnc_moduleFriendlyFire\n\n\t\t\t\t// De-initializes the module\n\t\t\t\t_ret = [\"Destroy\"] call BIS_fnc_moduleFriendlyFire\n\n\t\t\t\t// Add BIS_vip3 unit to be checked for friendly fire\n\t\t\t\tx = [\"AddUnits\", `BIS_vip3`] call BIS_fnc_moduleFriendlyFire\n\n\t\t\t\t// Remove BIS_vip1 unit from active units\n\t\t\t\tx = [\"RemoveUnits\", `BIS_vip1`] call BIS_fnc_moduleFriendlyFire\n\n\t\t\t\t// set another priority for a vehicle- if it is hit once, considered as friendly fire\n\t\t\t\tx = [\"ChangePriority\",  [BIS_vip,1]] call BIS_fnc_moduleFriendlyFire\n\n*******************************************************************************/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleFriendlyFire;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleFriendlyFire` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleFriendlyFire"
        },
        "configuration": {
            "label": "BIS_fnc_moduleFriendlyFire",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Set fuel of linked units' **vehicles**.\n**NOTE**: Regarding locality: unit's **vehicle** must be local to the machine, the unit itself can be remote.",
            "examples": [
                {
                    "text": "```sqf\n[myLogic, [unit1, unit2, vehicle1], true] call BIS_fnc_moduleFuel;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "logic",
                            "description": "`Object` - the logic. Possible `setVariable` parameter:"
                        },
                        {
                            "name": "units",
                            "description": "`Array` of `Object`s - list of units"
                        },
                        {
                            "name": "isActivated",
                            "description": "`Boolean` - (Optional, default `true`) if `true`, the fuel is set"
                        }
                    ],
                    "outline": "[logic, units, isActivated] call `BIS_fnc_moduleFuel`",
                    "returns": "`Boolean` - `true` when done, even if _isActivated_ equals `false`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleFuel"
        },
        "configuration": {
            "label": "BIS_fnc_moduleFuel",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleGenericRadio;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleGenericRadio` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleGenericRadio"
        },
        "configuration": {
            "label": "BIS_fnc_moduleGenericRadio",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_moduleGrenade`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleGrenade"
        },
        "configuration": {
            "label": "BIS_fnc_moduleGrenade",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleGroupID;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleGroupID` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleGroupID"
        },
        "configuration": {
            "label": "BIS_fnc_moduleGroupID",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleHandle;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleHandle` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleHandle"
        },
        "configuration": {
            "label": "BIS_fnc_moduleHandle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleHealth;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleHealth` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleHealth"
        },
        "configuration": {
            "label": "BIS_fnc_moduleHealth",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*--------------------------------------------------------------------------------------------------\n\n\t3DEN MOD: Hiddes closest terrain object.\n\n--------------------------------------------------------------------------------------------------*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_moduleHideTerrainObjects`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleHideTerrainObjects"
        },
        "configuration": {
            "label": "BIS_fnc_moduleHideTerrainObjects",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tShow a hint to all players of side\n\n\tParameter(s):\n\thttp://community.bistudio.com/wiki/Arma_3_Modules\n\n\tReturns:\n\tNONE\n*/\n\n// Parameters\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleHint;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleHint` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleHint"
        },
        "configuration": {
            "label": "BIS_fnc_moduleHint",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tRegister or return side HQ speaker\n\t\n\tParameter(s):\n\t\t0:\n\t\t\tOBJECT - register the HQ\n\t\t\tSIDE - return HQ of the side\n\t\n\tReturns:\n\tOBJECT - the HQ\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleHQ;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleHQ` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleHQ"
        },
        "configuration": {
            "label": "BIS_fnc_moduleHQ",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_moduleHvtInit`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleHvtInit"
        },
        "configuration": {
            "label": "BIS_fnc_moduleHvtInit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*, _objects*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_moduleHvtObjective`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleHvtObjective"
        },
        "configuration": {
            "label": "BIS_fnc_moduleHvtObjective",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_moduleHvtObjectives`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleHvtObjectives"
        },
        "configuration": {
            "label": "BIS_fnc_moduleHvtObjectives",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_moduleHvtObjectivesInstance`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleHvtObjectivesInstance"
        },
        "configuration": {
            "label": "BIS_fnc_moduleHvtObjectivesInstance",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleInit;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleInit` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleInit"
        },
        "configuration": {
            "label": "BIS_fnc_moduleInit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Zeus lightning strike.\n**IMPORTANT**: Note that _target_ will be deleted by the function (part of how Zeus modules work).",
            "examples": [
                {
                    "text": "```sqf\nplayer addAction \n[\n\t\"Eat that!\", \n\t{\n\t\tprivate _tempTarget = createSimpleObject [\"Land_HelipadEmpty_F\", getPosASL cursorTarget];\n\t\t[_tempTarget, nil, true] spawn BIS_fnc_moduleLightning;\n\t\tcursorTarget setDamage 1;\n\t},\n\t[],\n\t1.5, \n\ttrue, \n\ttrue, \n\t\"\",\n\t\"!isNull cursorTarget\"\n];\n```"
                },
                {
                    "text": "```sqf\n[] spawn // Who gets hit first? ;-)\n{\n\t{\n\t\tprivate _tempTarget = createSimpleObject [\"Land_HelipadEmpty_F\", getPosASL _x];\n\t\t[_tempTarget, nil, true] spawn BIS_fnc_moduleLightning;\n\t\tsleep (1 + random 4);\n\t} forEach (allPlayers call BIS_fnc_arrayShuffle);\n};\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Object` - where the lightning bolt hits - **will** be deleted by the function!"
                        },
                        {
                            "name": "nil",
                            "description": "`Nothing` - not used"
                        },
                        {
                            "name": "activate",
                            "description": "`Boolean` - `true` to activate, `false` does nothing"
                        }
                    ],
                    "outline": "[target, nil, activate] call `BIS_fnc_moduleLightning`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleLightning"
        },
        "configuration": {
            "label": "BIS_fnc_moduleLightning",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleMine;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleMine` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleMine"
        },
        "configuration": {
            "label": "BIS_fnc_moduleMine",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleMissionName;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleMissionName` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleMissionName"
        },
        "configuration": {
            "label": "BIS_fnc_moduleMissionName",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleMode;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleMode` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleMode"
        },
        "configuration": {
            "label": "BIS_fnc_moduleMode",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Scans synchronized objects and returns synchronized modules",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleModules;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "[module] call BIS_fnc_moduleModules",
                    "returns": "Array - array of Objects - Modules"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleModules"
        },
        "configuration": {
            "label": "BIS_fnc_moduleModules",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleMPTypeDefense;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleMPTypeDefense` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleMPTypeDefense"
        },
        "configuration": {
            "label": "BIS_fnc_moduleMPTypeDefense",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleMPTypeGameMaster;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleMPTypeGameMaster` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleMPTypeGameMaster"
        },
        "configuration": {
            "label": "BIS_fnc_moduleMPTypeGameMaster",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>// Debug log\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleMPTypeGroundSupport;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleMPTypeGroundSupport` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleMPTypeGroundSupport"
        },
        "configuration": {
            "label": "BIS_fnc_moduleMPTypeGroundSupport",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleMPTypeGroundSupportBase;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleMPTypeGroundSupportBase` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleMPTypeGroundSupportBase"
        },
        "configuration": {
            "label": "BIS_fnc_moduleMPTypeGroundSupportBase",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleMPTypeSectorControl;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleMPTypeSectorControl` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleMPTypeSectorControl"
        },
        "configuration": {
            "label": "BIS_fnc_moduleMPTypeSectorControl",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleMPTypeSeize;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleMPTypeSeize` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleMPTypeSeize"
        },
        "configuration": {
            "label": "BIS_fnc_moduleMPTypeSeize",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleObjective;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleObjective` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleObjective"
        },
        "configuration": {
            "label": "BIS_fnc_moduleObjective",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleObjectiveFind;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleObjectiveFind` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleObjectiveFind"
        },
        "configuration": {
            "label": "BIS_fnc_moduleObjectiveFind",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleObjectiveGetIn;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleObjectiveGetIn` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleObjectiveGetIn"
        },
        "configuration": {
            "label": "BIS_fnc_moduleObjectiveGetIn",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleObjectiveMove;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleObjectiveMove` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleObjectiveMove"
        },
        "configuration": {
            "label": "BIS_fnc_moduleObjectiveMove",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleObjectiveRaceCP;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleObjectiveRaceCP` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleObjectiveRaceCP"
        },
        "configuration": {
            "label": "BIS_fnc_moduleObjectiveRaceCP",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleObjectiveRaceFinish;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleObjectiveRaceFinish` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleObjectiveRaceFinish"
        },
        "configuration": {
            "label": "BIS_fnc_moduleObjectiveRaceFinish",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleObjectiveRaceStart;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleObjectiveRaceStart` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleObjectiveRaceStart"
        },
        "configuration": {
            "label": "BIS_fnc_moduleObjectiveRaceStart",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleObjectiveSector;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleObjectiveSector` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleObjectiveSector"
        },
        "configuration": {
            "label": "BIS_fnc_moduleObjectiveSector",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleObjectiveTarget;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleObjectiveTarget` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleObjectiveTarget"
        },
        "configuration": {
            "label": "BIS_fnc_moduleObjectiveTarget",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_modulePositioning;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_modulePositioning` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_modulePositioning"
        },
        "configuration": {
            "label": "BIS_fnc_modulePositioning",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_modulePoster;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_modulePoster` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_modulePoster"
        },
        "configuration": {
            "label": "BIS_fnc_modulePoster",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**NOTE**: This function is used by the [[Post Process Effects|Post-Process]] module.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-<!-- [] call `BIS_fnc_modulePostprocess`; -->",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_modulePostprocess"
        },
        "configuration": {
            "label": "BIS_fnc_modulePostprocess",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleProjectile;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleProjectile` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleProjectile"
        },
        "configuration": {
            "label": "BIS_fnc_moduleProjectile",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tMake a unit play a punishment animation\n\n\tParameter(s):\n\thttp://community.bistudio.com/wiki/Arma_3_Modules\n\n\tReturns:\n\tNONE\n*/\n\n// Parameters\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_modulePunishment;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_modulePunishment` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_modulePunishment"
        },
        "configuration": {
            "label": "BIS_fnc_modulePunishment",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleRadioChannelCreate;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleRadioChannelCreate` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleRadioChannelCreate"
        },
        "configuration": {
            "label": "BIS_fnc_moduleRadioChannelCreate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Used by the Set Rank module.",
            "examples": [
                {
                    "text": "```sqf\n[rankLogic, [player]] call BIS_fnc_moduleRank;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "logic",
                            "description": "`Object` - logic"
                        },
                        {
                            "name": "units",
                            "description": "`Array` - units to set rank to"
                        },
                        {
                            "name": "activated",
                            "description": "`Boolean` - (Optional, default `true`) if `false` nothing will happen"
                        }
                    ],
                    "outline": "[logic, units, activated] call `BIS_fnc_moduleRank`",
                    "returns": "`Boolean` - always `true`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleRank"
        },
        "configuration": {
            "label": "BIS_fnc_moduleRank",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Function used by the Rating [module](https://community.bistudio.com/wiki/Arma_3%3A_Editor_Modules).",
            "examples": [
                {
                    "text": "```sqf\n[myLogic, units group player, true] call BIS_fnc_moduleRating;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "logic",
                            "description": "`Object` - a logic, but can be any object. Rating and Score are set with `setVariable`"
                        },
                        {
                            "name": "units",
                            "description": "`Array` of `Object`s - units to add rating/score to"
                        },
                        {
                            "name": "activated",
                            "description": "`Boolean` - (Optional, default true) `true` to activate"
                        }
                    ],
                    "outline": "[logic, units, activated] call `BIS_fnc_moduleRating`",
                    "returns": "`Boolean` - `true` when done"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleRating"
        },
        "configuration": {
            "label": "BIS_fnc_moduleRating",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleRemoteControl;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleRemoteControl` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleRemoteControl"
        },
        "configuration": {
            "label": "BIS_fnc_moduleRemoteControl",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tSet respawn loadouts a curator can assign to players\n\n\tParameter(s):\n\t\t0: OBJECT - curator logic\n\t\t1: BOOL - true to make all loadouts availale, false to base them on units the curator can place\n\n\tReturns:\n\tBOOL\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleRespawnInventory;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleRespawnInventory` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleRespawnInventory"
        },
        "configuration": {
            "label": "BIS_fnc_moduleRespawnInventory",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleRespawnPosition;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleRespawnPosition` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleRespawnPosition"
        },
        "configuration": {
            "label": "BIS_fnc_moduleRespawnPosition",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleRespawnTickets;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleRespawnTickets` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleRespawnTickets"
        },
        "configuration": {
            "label": "BIS_fnc_moduleRespawnTickets",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tSet vehicle respawn, compatible both with SP and MP.\n\n\tParameter(s):\n\t\t0: OBJECT - vehicle\n\t\t1:\n\t\t\tNUMBER - respawn delay in seconds (default is 0)\n\t\t\tBOOL - true to remove vehicle respawn (further params are ignored), false to check if the vehicle is marked for respawn\n\t\t2: NUMBER - how long until the vehicle is automatically respawned after its crew leaves it (default is -1, i.e., disabled)\n\t\t3: NUMBER - number of time the vehicle can be respawned (default is -1, i.e., unlimited)\n\t\t4: CODE - code executed upon respawn. Passed arguments are [<newVehicle>,<oldVehicle>]. The old vehicle is deleted only after this code is completed.\n\t\t5: POSITION - type of respawn position:\n\t\t\t0 = where it started\n\t\t\t1 = where it was destroyed\n\t\t\t2 = on vehicle's side respawn marker (e.g., \"respawn_vehicle_west\")\n\t\t\t3 = on BLUFOR respawn marker\n\t\t\t4 = on OPFOR respawn marker\n\t\t\t5 = on Independent respawn marker\n\t\t\t6 = on Civilian respawn marker\n\t\t\t7 = on side respawn marker of unit which destroyed the vehicle\n\t\t6: NUMBER - position selection type (0 = random, 1 = newest, 2 = oldest)\n\t\t7: NUMBER - type of old vehicle deletion (0 = don't delete, 1 = delete, 2 = delete with an explosion effect)\n\t\t8: BOOL - true to show notifcation when the vehicle is respawned\n\n\tReturns:\n\tBOOL\n*/</pre>\n\n**NOTE**: Respawned abandoned vehicles do not reduce respawn tickets\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleRespawnVehicle;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleRespawnVehicle` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleRespawnVehicle"
        },
        "configuration": {
            "label": "BIS_fnc_moduleRespawnVehicle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Saves the game. Saving has to be enabled.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_moduleSaveGame;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "nil",
                            "description": "`Nothing` - not used"
                        },
                        {
                            "name": "nil",
                            "description": "`Nothing` - not used"
                        },
                        {
                            "name": "activated",
                            "description": "`Boolean` - (Optional, default `true`) when `true` game will be saved"
                        }
                    ],
                    "outline": "[nil,nil,activated] call `BIS_fnc_moduleSaveGame`",
                    "returns": "`Boolean` - always `true`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleSaveGame"
        },
        "configuration": {
            "label": "BIS_fnc_moduleSaveGame",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tInitialize a sector module. Can be also used to get sector parameters.\n\n\t--- Get all sectors ---\n\tParameter(s):\n\t\t0: BOOL\n\n\tReturns:\n\tARRAY of OBJECTs\n\n\t--- Get number of sectors held by a side ---\n\tParameter(s):\n\t\t0: SIDE\n\n\tReturns:\n\tNUMBER - number of sectors owned by the side\n\n\t--- Set sector owner ---\n\tParameter(s):\n\t\t0: OBJECT - sector module\n\t\t1: SIDE\n\n\tReturns:\n\tBOOL\n\n\t--- Initialize ---\n\tParameter(s):\n\t\t0: OBJECT - sector module\n\n\tReturns:\n\tNOTHING\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleSector;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleSector` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleSector"
        },
        "configuration": {
            "label": "BIS_fnc_moduleSector",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleSFX;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleSFX` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleSFX"
        },
        "configuration": {
            "label": "BIS_fnc_moduleSFX",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleShowHide;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleShowHide` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleShowHide"
        },
        "configuration": {
            "label": "BIS_fnc_moduleShowHide",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleSimulationManager;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleSimulationManager` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleSimulationManager"
        },
        "configuration": {
            "label": "BIS_fnc_moduleSimulationManager",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_moduleSimulationManager_grab`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleSimulationManager_grab"
        },
        "configuration": {
            "label": "BIS_fnc_moduleSimulationManager_grab",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_moduleSiteInit`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleSiteInit"
        },
        "configuration": {
            "label": "BIS_fnc_moduleSiteInit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleSkill;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleSkill` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleSkill"
        },
        "configuration": {
            "label": "BIS_fnc_moduleSkill",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleSkiptime;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleSkiptime` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleSkiptime"
        },
        "configuration": {
            "label": "BIS_fnc_moduleSkiptime",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_moduleSlingload`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleSlingload"
        },
        "configuration": {
            "label": "BIS_fnc_moduleSlingload",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleSound;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleSound` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleSound"
        },
        "configuration": {
            "label": "BIS_fnc_moduleSound",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*--------------------------------------------------------------------------------------------------\n\n\tDEBUG LOG FLAG\n\n--------------------------------------------------------------------------------------------------*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_moduleSpawnAI`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleSpawnAI"
        },
        "configuration": {
            "label": "BIS_fnc_moduleSpawnAI",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*--------------------------------------------------------------------------------------------------\n\n\tTERMINATE ALL BUT 1ST MODULE\n\n--------------------------------------------------------------------------------------------------*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_moduleSpawnAIOptions`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleSpawnAIOptions"
        },
        "configuration": {
            "label": "BIS_fnc_moduleSpawnAIOptions",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_moduleSpawnAIPoint`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleSpawnAIPoint"
        },
        "configuration": {
            "label": "BIS_fnc_moduleSpawnAIPoint",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*--------------------------------------------------------------------------------------------------\n\n\tRUN ONCE\n\n--------------------------------------------------------------------------------------------------*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_moduleSpawnAISectorTactic`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleSpawnAISectorTactic"
        },
        "configuration": {
            "label": "BIS_fnc_moduleSpawnAISectorTactic",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleStrategicMapImage;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleStrategicMapImage` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleStrategicMapImage"
        },
        "configuration": {
            "label": "BIS_fnc_moduleStrategicMapImage",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleStrategicMapInit;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleStrategicMapInit` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleStrategicMapInit"
        },
        "configuration": {
            "label": "BIS_fnc_moduleStrategicMapInit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleStrategicMapMission;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleStrategicMapMission` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleStrategicMapMission"
        },
        "configuration": {
            "label": "BIS_fnc_moduleStrategicMapMission",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleStrategicMapOpen;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleStrategicMapOpen` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleStrategicMapOpen"
        },
        "configuration": {
            "label": "BIS_fnc_moduleStrategicMapOpen",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleStrategicMapORBAT;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleStrategicMapORBAT` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleStrategicMapORBAT"
        },
        "configuration": {
            "label": "BIS_fnc_moduleStrategicMapORBAT",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_moduleSupportsInitProvider`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleSupportsInitProvider"
        },
        "configuration": {
            "label": "BIS_fnc_moduleSupportsInitProvider",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_moduleSupportsInitProviderVirtual`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleSupportsInitProviderVirtual"
        },
        "configuration": {
            "label": "BIS_fnc_moduleSupportsInitProviderVirtual",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_moduleSupportsInitRequester`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleSupportsInitRequester"
        },
        "configuration": {
            "label": "BIS_fnc_moduleSupportsInitRequester",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\n\tDescription:\n\tCreate Task module function\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleTaskCreate;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleTaskCreate` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleTaskCreate"
        },
        "configuration": {
            "label": "BIS_fnc_moduleTaskCreate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\n\tDescription:\n\tSet Task Description module function\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleTaskSetDescription;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleTaskSetDescription` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleTaskSetDescription"
        },
        "configuration": {
            "label": "BIS_fnc_moduleTaskSetDescription",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\n\tDescription:\n\tSet Task Destination module function\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleTaskSetDestination;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleTaskSetDestination` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleTaskSetDestination"
        },
        "configuration": {
            "label": "BIS_fnc_moduleTaskSetDestination",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\t\n\tDescription:\n\tSet Task State module function\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleTaskSetState;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleTaskSetState` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleTaskSetState"
        },
        "configuration": {
            "label": "BIS_fnc_moduleTaskSetState",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_moduleTimeMultiplier`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleTimeMultiplier"
        },
        "configuration": {
            "label": "BIS_fnc_moduleTimeMultiplier",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for Time Trials, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleTimeTrial"
        },
        "configuration": {
            "label": "BIS_fnc_moduleTimeTrial",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Function used by the Tracers [module](https://community.bistudio.com/wiki/Arma_3%3A_Editor_Modules).",
            "examples": [
                {
                    "text": "```sqf\n[myLogic, true] call BIS_fnc_moduleTracers;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "logic",
                            "description": "`Object` - a logic, but can be any object"
                        },
                        {
                            "name": "activated",
                            "description": "`Boolean` - `true` to activate"
                        }
                    ],
                    "outline": "[logic, activated] call `BIS_fnc_moduleTracers`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleTracers"
        },
        "configuration": {
            "label": "BIS_fnc_moduleTracers",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleTrident;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleTrident` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleTrident"
        },
        "configuration": {
            "label": "BIS_fnc_moduleTrident",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleTriggers;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleTriggers` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleTriggers"
        },
        "configuration": {
            "label": "BIS_fnc_moduleTriggers",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for Time Trials, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleTTCPClear"
        },
        "configuration": {
            "label": "BIS_fnc_moduleTTCPClear",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for Time Trials, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleTTCPIn"
        },
        "configuration": {
            "label": "BIS_fnc_moduleTTCPIn",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for Time Trials, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleTTCPOut"
        },
        "configuration": {
            "label": "BIS_fnc_moduleTTCPOut",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleTTCPTrigger;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleTTCPTrigger` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleTTCPTrigger"
        },
        "configuration": {
            "label": "BIS_fnc_moduleTTCPTrigger",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleTTCPTriggerBehind;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleTTCPTriggerBehind` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleTTCPTriggerBehind"
        },
        "configuration": {
            "label": "BIS_fnc_moduleTTCPTriggerBehind",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleTTStatsClear;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleTTStatsClear` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleTTStatsClear"
        },
        "configuration": {
            "label": "BIS_fnc_moduleTTStatsClear",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleUnits;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleUnits` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleUnits"
        },
        "configuration": {
            "label": "BIS_fnc_moduleUnits",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleUnlockArea;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleUnlockArea` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleUnlockArea"
        },
        "configuration": {
            "label": "BIS_fnc_moduleUnlockArea",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleUnlockObject;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleUnlockObject` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleUnlockObject"
        },
        "configuration": {
            "label": "BIS_fnc_moduleUnlockObject",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*--------------------------------------------------------------------------------------------------\n\n--------------------------------------------------------------------------------------------------*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_moduleVanguardFob`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleVanguardFob"
        },
        "configuration": {
            "label": "BIS_fnc_moduleVanguardFob",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*--------------------------------------------------------------------------------------------------\n\n--------------------------------------------------------------------------------------------------*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_moduleVanguardObjective`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleVanguardObjective"
        },
        "configuration": {
            "label": "BIS_fnc_moduleVanguardObjective",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*--------------------------------------------------------------------------------------------------\n\n--------------------------------------------------------------------------------------------------*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_moduleVanguardScorePersistence`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleVanguardScorePersistence"
        },
        "configuration": {
            "label": "BIS_fnc_moduleVanguardScorePersistence",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleVolume;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleVolume` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleVolume"
        },
        "configuration": {
            "label": "BIS_fnc_moduleVolume",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tSet overcast and fog\n\n\tParameter(s):\n\t\t0: STRING - mode, can be one of following\n\n\t\t\t\"enableDelay\" - enable delayed activation (i.e., weather changes are not applied manually and have to be confirmed by mission)\n\t\t\t\t1: BOOL - true to enbale, false to disable\n\t\t\t\tReturns: Nothing\n\t\t\n\t\t\t\"isDelayEnabled\"\n\t\t\t\tReturns: true if delayed activation is enabled, otherwise false\n\n\t\t\t\"commit\" - apply weather changes\n\tReturns:\n\tNothing\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleWeather;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleWeather` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleWeather"
        },
        "configuration": {
            "label": "BIS_fnc_moduleWeather",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleZoneProtection;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleZoneProtection` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleZoneProtection"
        },
        "configuration": {
            "label": "BIS_fnc_moduleZoneProtection",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_moduleZoneRestriction;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_moduleZoneRestriction` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moduleZoneRestriction"
        },
        "configuration": {
            "label": "BIS_fnc_moduleZoneRestriction",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns number of days in given month. Takes in account for leap year.",
            "examples": [
                {
                    "text": "```sqf\nprivate _daysInThisMonth = [date select 0, date select 1] call BIS_fnc_monthDays;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "year",
                            "description": "`Number` - a non-decimal number"
                        },
                        {
                            "name": "month",
                            "description": "`Number` - a non-decimal number in range 1..12"
                        }
                    ],
                    "outline": "[year, month] call `BIS_fnc_monthDays`",
                    "returns": "`Number` - number of days in given month"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_monthDays"
        },
        "configuration": {
            "label": "BIS_fnc_monthDays",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return current move action (used in `playAction`, `playActionNow` and `switchAction`)",
            "examples": [
                {
                    "text": "```sqf\n\n_actionName\t\t= [player, false] call BIS_fnc_moveAction;\n_actionConfig\t= [player,  true] call BIS_fnc_moveAction;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "returnConfig",
                            "description": "`Boolean` - (Optional, default `false`) `true` to return action config path, `false` to return the action name"
                        }
                    ],
                    "outline": "[unit, returnConfig] call `BIS_fnc_moveAction`",
                    "returns": "`Config` or `String` - depends on _returnConfig_"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moveAction"
        },
        "configuration": {
            "label": "BIS_fnc_moveAction",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Moves a unit into vehicle. Compatible with `assignedVehicleRole` output.",
            "examples": [
                {
                    "text": "```sqf\n[myCar, player, \"cargo\"] call BIS_fnc_moveIn;\n```"
                },
                {
                    "text": "```sqf\n[myTank, player, [\"turret\", [0]]] call BIS_fnc_moveIn;\n```"
                },
                {
                    "text": "```sqf\n[myTank, player, [\"turret\", -1]] call BIS_fnc_moveIn; // will moveInDriver the player\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "unit",
                            "description": "`Object` - the unit to move into _vehicle_ - must be [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality)"
                        },
                        {
                            "name": "role",
                            "description": "`Array` - wanted seat, in format [_\"role\"_] or [_\"role\"_, turretPath]. Can be one of:"
                        }
                    ],
                    "outline": "[vehicle, unit, role] call `BIS_fnc_moveIn`",
                    "returns": "`Boolean` - `true` if moved in successfully"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moveIn"
        },
        "configuration": {
            "label": "BIS_fnc_moveIn",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Moves marker to a new position",
            "examples": [
                {
                    "text": "```sqf\n[\"BIS_marker\", [1111,2222,0]] call BIS_fnc_moveMarker;\n```"
                },
                {
                    "text": "```sqf\n[\"BIS_marker\", getMarkerPos \"BIS_marker2\", 2, 9] call BIS_fnc_moveMarker;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "marker",
                            "description": "`String` - marker"
                        },
                        {
                            "name": "newPosition",
                            "description": "`Array` - new position"
                        },
                        {
                            "name": "duration",
                            "description": "`Number` - (Optional, default 5) how long it takes to move the marker in seconds"
                        },
                        {
                            "name": "interpolationType",
                            "description": "`Number` - (Optional, default 4) can be one of:"
                        }
                    ],
                    "outline": "[marker, newPosition, duration, interpolationType] call `BIS_fnc_moveMarker`",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moveMarker"
        },
        "configuration": {
            "label": "BIS_fnc_moveMarker",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Move given unit to given respawn position. Units moved to height <nowiki>>=</nowiki> 30m will start on parachute. Position [0,0,0] is blacklisted. This function must be executed where unit to be moved is [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality).",
            "examples": [
                {
                    "text": "```sqf\n[player, \"SpawnMarker1\"] call BIS_fnc_moveToRespawnPosition;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit to move"
                        },
                        {
                            "name": "position",
                            "description": "`Object`, `Group`, `String` or `Array`"
                        },
                        {
                            "name": "canBeDead",
                            "description": "`Boolean` - (Optional, default `true`) whether or not dead are allowed:"
                        }
                    ],
                    "outline": "[unit, position, canBeDead] call `BIS_fnc_moveToRespawnPosition`",
                    "returns": "`Boolean` - `true`: move succeeded, `false`: move failed"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_moveToRespawnPosition"
        },
        "configuration": {
            "label": "BIS_fnc_moveToRespawnPosition",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Execute received remote execution. This function is used by `BIS_fnc_MP` and should not be called directly.\n**Arma**: 3|Obsolete and entirely effectless (empty file) since **(Arma 3)**",
            "examples": [
                {
                    "text": "```sqf\n[\"BIS_fnc_MP_packet\", [\"Hello World\", \"hint\", true, true]] call BIS_fnc_MPexec;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "packetName",
                            "description": "`String` - packet variable name - always \"BIS_fnc_MP_packet\" (not used in the function)"
                        },
                        {
                            "name": "packetValue",
                            "description": "`Array` format [params, functionName, target, isSpawn, isPersistent] - packet sent by `BIS_fnc_MP`; see its page for more details"
                        }
                    ],
                    "outline": "[packetName, packetValue] call `BIS_fnc_MPexec`",
                    "returns": "`Boolean` - true if function was executed successfully"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_MPexec"
        },
        "configuration": {
            "label": "BIS_fnc_MPexec",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n * Author: Zozo\n * Multiplies the square matrix by a vector: A(m,m) x V(m)\n *\n * Arguments:\n * 0: _matrix ARRAY (multi-dimensional)\n * 1: _vector ARRAY ([x,y,z] or [x,y,z,1])\n *\n * Return Value:\n * ARRAY [x,y,z]\n *\n * Example:\n * [_transformMatrix, vectorDir player] call BIS_multiplySquareMatrixVector\n *\n */</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_multiplySquareMatrixByVector`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_multiplySquareMatrixByVector"
        },
        "configuration": {
            "label": "BIS_fnc_multiplySquareMatrixByVector",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Randomly play provided tracks defined in [[Description.ext#CfgMusic|CfgMusic]] and does a 3 seconds [fade out](https://community.bistudio.com/wiki/fadeMusic). This function takes `accTime` into account. See also `BIS_fnc_jukebox`.\n**NOTE**: The function stores the script handle in the `**BIS_fnc_music_spawn variable that can be used to stop the function; see {{Link|#Example 3}} for its usage example.**`",
            "examples": [
                {
                    "text": "```sqf\n[[\"myMusic1\", \"myMusic2\"], 1] call BIS_fnc_music; // play the two musics in a random order\n```"
                },
                {
                    "text": "```sqf\n[] call BIS_fnc_music; // play all game tracks randomly\n```"
                },
                {
                    "text": "```sqf\n\n[] call BIS_fnc_music;\nprivate _startingPos = getPosWorld player;\nprivate _timeLimit = time + 30;\nwaitUntil { sleep 1; getPosWorld player distance _startingPos > 50 || time > _timeLimit };\nif (!isNil \"BIS_fnc_music_spawn\") then { terminate BIS_fnc_music_spawn };\nplayMusic \"\";\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "tracklist",
                            "description": "`Array` of `String`s - (Optional, default all game musics) a list of [[Description.ext#CfgMusic|CfgMusic]] classes"
                        },
                        {
                            "name": "delay",
                            "description": "`Number` - (Optional, default 3) delay in seconds between tracks"
                        }
                    ],
                    "outline": "[tracklist, delay] call `BIS_fnc_music`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_music"
        },
        "configuration": {
            "label": "BIS_fnc_music",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Finds the nearest helipad of given type.",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Array` format `Position` - (Optional, default `position` `vehicle` `player`) center position"
                        },
                        {
                            "name": "radius",
                            "description": "`Number` - (Optional, default 999999) radius of the area to search in meters"
                        },
                        {
                            "name": "random",
                            "description": "`Boolean` - (Optional, default `false`) if `true` a random helipad will be selected if multiple are found"
                        },
                        {
                            "name": "types",
                            "description": "`Array` - (Optional, default [\"Heliport\"]) location types to be searched for. See `nearestLocations` for more information **Arma**: 3|Default value won't work in {{arma3. Only types listed in CfgLocationTypes are supported}}"
                        }
                    ],
                    "outline": "[position, radius, random, types] call `BIS_fnc_nearestHelipad`",
                    "returns": "`Array` in format:\n* 0: `Position` - Position of the selected location\n* 1: `Object` - Helipad \n* 2: `Position` - Position of the helipad"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_nearestHelipad"
        },
        "configuration": {
            "label": "BIS_fnc_nearestHelipad",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns the provided set closest number to the target number.",
            "examples": [
                {
                    "text": "```sqf\nprivate _closestValueTo4 = [[1,5,10], 4] call BIS_fnc_nearestNum; // returns 5\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "values",
                            "description": "`Array` of `Number`s - values to choose from"
                        },
                        {
                            "name": "value",
                            "description": "`Number` - the reference value"
                        }
                    ],
                    "outline": "[values, value] call `BIS_fnc_nearestNum`",
                    "returns": "`Number` - the closest value"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_nearestNum"
        },
        "configuration": {
            "label": "BIS_fnc_nearestNum",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Computes nearest point in a line.",
            "examples": [
                {
                    "text": "```sqf\nprivate _idealLocation = [getMarkerPos \"base\", getMarkerPos \"destination\", getPos player, true] call BIS_fnc_nearestPoint;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "start",
                            "description": "`Position` - line start"
                        },
                        {
                            "name": "end",
                            "description": "`Position` - line end"
                        },
                        {
                            "name": "point",
                            "description": "`Position` - point to check against"
                        },
                        {
                            "name": "is2D",
                            "description": "`Boolean` - (Optional, default `false`) 2D calculation instead of 3D"
                        }
                    ],
                    "outline": "[start, end, point, _is2D_] call `BIS_fnc_nearestPoint`",
                    "returns": "`Position` - the line point that is closest to _point_"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_nearestPoint"
        },
        "configuration": {
            "label": "BIS_fnc_nearestPoint",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Function to find the nearest Object or position from a list, when compared to a given reference.",
            "examples": [
                {
                    "text": "```sqf\n// Find the nearest marker from player\n_nearestMarker = [allMapMarkers, player] call BIS_fnc_nearestPosition;\n```"
                },
                {
                    "text": "```sqf\n// Find the nearest marker to trigger using trigger onActivation code\n_nearestMarker = [allMapMarkers, thisTrigger] call BIS_fnc_nearestPosition;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "items",
                            "description": "`Array` of `Object`, `Location`, `Group`, `String` (marker) **and/or** `Position` - note that for a group, **leader's position** is used"
                        },
                        {
                            "name": "origin",
                            "description": "`Object`, `Location`, `Group`, `String` (marker) or `Position`"
                        }
                    ],
                    "outline": "[items, origin] call `BIS_fnc_nearestPosition`",
                    "returns": "`Object`, `Location`, `Group`, `String` (marker) or `Position` - the closest from _items_"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_nearestPosition"
        },
        "configuration": {
            "label": "BIS_fnc_nearestPosition",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Find the nearest road segment to certain position, within given radius.",
            "examples": [
                {
                    "text": "```sqf\nprivate _nearestRoad = [getPosATL player, 500] call BIS_fnc_nearestRoad;\n```"
                },
                {
                    "text": "```sqf\nprivate _nearestRoad = [getPosATL vehicle player, 50, getPosATL vehicle player nearRoads 20] call BIS_fnc_nearestRoad;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "center",
                            "description": "`Position`"
                        },
                        {
                            "name": "radius",
                            "description": "`Number` - (Optional, default 50) search radius from _center_"
                        },
                        {
                            "name": "blacklist",
                            "description": "`Array` - (Optional, default <sqf inline>[]) blacklisted road objects"
                        }
                    ],
                    "outline": "[center_, radius, blacklist_] call `BIS_fnc_nearestRoad`",
                    "returns": "`Object` - nearest road object, `objNull` if not found"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_nearestRoad"
        },
        "configuration": {
            "label": "BIS_fnc_nearestRoad",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Extends MP-only `netId` functionality to SP",
            "examples": [
                {
                    "text": "```sqf\nprivate _objNetId = player call BIS_fnc_netId; // \"0:2\"\n```"
                },
                {
                    "text": "```sqf\nprivate _grpNetId = group player call BIS_fnc_netId; // \"0:3\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "objOrGrp",
                            "description": "`Object` or `Group`"
                        }
                    ],
                    "outline": "objOrGrp call `BIS_fnc_netId`",
                    "returns": "`String` - net Id in format \"owner:id\" or \"\"."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_netId"
        },
        "configuration": {
            "label": "BIS_fnc_netId",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Neutralize an object by intrinsic means:\n* soldiers are blown up by mine\n*  vehicles are shelled by artillery\n*  air units are hit by AA missile\n*  underwater units are simply killed.\n\n**NOTE**: `allowDamage` will **not** prevent the unit getting killed.",
            "examples": [
                {
                    "text": "```sqf\ncursorTarget call BIS_fnc_neutralizeUnit;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "object call `BIS_fnc_neutralizeUnit`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_neutralizeUnit"
        },
        "configuration": {
            "label": "BIS_fnc_neutralizeUnit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_noFlyZone;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_noFlyZone` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_noFlyZone"
        },
        "configuration": {
            "label": "BIS_fnc_noFlyZone",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_noFlyZonesCreate;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_noFlyZonesCreate` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_noFlyZonesCreate"
        },
        "configuration": {
            "label": "BIS_fnc_noFlyZonesCreate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_noFlyZonesExport;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_noFlyZonesExport` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_noFlyZonesExport"
        },
        "configuration": {
            "label": "BIS_fnc_noFlyZonesExport",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Break number into array of digits.",
            "examples": [
                {
                    "text": "```sqf\n12345678 call BIS_fnc_numberDigits; // returns [1,2,3,4,5,6,7,8]\n```"
                },
                {
                    "text": "```sqf\n123.9999 call BIS_fnc_numberDigits; // returns [1,2,3]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "number",
                            "description": "`Number` - number that should be broken down. A float will be **truncated**, not rounded"
                        }
                    ],
                    "outline": "number call `BIS_fnc_numberDigits`",
                    "returns": "`Array` of `Number`s - array of _number_ digits"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_numberDigits"
        },
        "configuration": {
            "label": "BIS_fnc_numberDigits",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Convert a number into string (avoiding scientific notation).",
            "examples": [
                {
                    "text": "```sqf\n[4096] call BIS_fnc_numberText; // \"4 096\"\n```"
                },
                {
                    "text": "```sqf\n[512, 1] call BIS_fnc_numberText; // \"5 1 2\"\n```"
                },
                {
                    "text": "```sqf\n[999999999999] call BIS_fnc_numberText; // \"909 999 995 904\"\n```"
                },
                {
                    "text": "```sqf\n[1234.5678] call BIS_fnc_numberText; // \"1 234\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "number",
                            "description": "`Number`"
                        },
                        {
                            "name": "modulo",
                            "description": "`Number` - (Optional, default 3)"
                        }
                    ],
                    "outline": "[number, modulo] call `BIS_fnc_numberText`",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_numberText"
        },
        "configuration": {
            "label": "BIS_fnc_numberText",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Extends MP-only `objectFromNetId` functionality to SP",
            "examples": [
                {
                    "text": "```sqf\nprivate _obj = \"0:2\" call BIS_fnc_objectFromNetId;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "netId",
                            "description": "`String`"
                        }
                    ],
                    "outline": "netId call `BIS_fnc_objectFromNetId`",
                    "returns": "`Object` - existing object or `objNull`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_objectFromNetId"
        },
        "configuration": {
            "label": "BIS_fnc_objectFromNetId",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return object height defined by its bounding box and eventual offset fix. For the following classes an offset is used.\n\n{{{!}} class=\"wikitable\"\n{{!}}-\n! z-offset: -0.1 !! z-offset: -0.08\n{{!}}-\n{{!}} \n* \"box_east_support_f\"\n* \"box_ind_support_f\"\n* \"box_nato_support_f\"\n* \"box_east_ammoord_f\"\n* \"box_ind_ammoord_f\"\n* \"box_nato_ammoord_f\"\n* \"box_east_ammo_f\"\n* \"box_ind_ammo_f\"\n* \"box_nato_ammo_f\n{{!}}\n* \"box_east_wpslaunch_f\"\n* \"box_ind_wpslaunch_f\"\n* \"box_nato_wpslaunch_f\"\n* \"box_east_wpsspecial_f\"\n* \"box_ind_wpsspecial_f\"\n* \"box_nato_wpsspecial_f\"\n* \"box_ind_wps_f\"\n* \"box_east_wps_f\"\n* \"box_nato_wps_f\"\n{{!}}}",
            "examples": [
                {
                    "text": "```sqf\nplayer call BIS_fnc_objectHeight;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - evaluated object"
                        }
                    ],
                    "outline": "object call `BIS_fnc_objectHeight`",
                    "returns": "`Number` - height of the object"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_objectHeight"
        },
        "configuration": {
            "label": "BIS_fnc_objectHeight",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Animates an object being closed, for example a drawer. The counter set by `BIS_fnc_objectInventoryAnimatedOpen` gets reset when this function is called.",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - object"
                        },
                        {
                            "name": "animationArray",
                            "description": "`Array` - an Array in form of:"
                        }
                    ],
                    "outline": "[object, animationArray] call `BIS_fnc_objectInventoryAnimatedClose`",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_objectInventoryAnimatedClose"
        },
        "configuration": {
            "label": "BIS_fnc_objectInventoryAnimatedClose",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Animates an object being opened, for example a drawer. It also sets a counter which prevents animation to be played multiple time if more than one player accesses that drawer.",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - object"
                        },
                        {
                            "name": "animationArray",
                            "description": "`Array` - an Array in form of:"
                        }
                    ],
                    "outline": "[object, animationArray] call `BIS_fnc_objectInventoryAnimatedOpen`",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_objectInventoryAnimatedOpen"
        },
        "configuration": {
            "label": "BIS_fnc_objectInventoryAnimatedOpen",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Converts a set of placed objects to an object array (**as a `String`**) for the [DynO mapper](https://community.bistudio.com/wiki/BIS_fnc_objectsMapper).\n\nFormat is the following. First, the header:\n\n```sqf\n\n/*\nGrab data:\nMission: TheMissionName\nWorld: Stratis\nAnchor position: [3781.59, 3289.67]\nArea size: 50\nUsing orientation of objects: yes/no\n*/\n\n```\n\n\nThen, data:\n\n```sqf\n\n[\n\t[\"B_UAV_01_F\",[-5.23706,-0.183594,-0.00126648],167.39,1,0,[0.605018,-0.575293],\"\",\"\",true,false], \n\t[\"C_Offroad_01_F\",[-4.25903,4.62158,0.0630951],224.14,1,0,[0.812812,0.190543],\"\",\"\",true,false]\n]\n\n```\n\n\nor, if object orientation is not used:\n\n```sqf\n\n[\n\t[\"B_UAV_01_F\",[-5.23706,-0.183594,-0.00126648],167.39,1,0,[],\"\",\"\",true,false], \n\t[\"C_Offroad_01_F\",[-4.25903,4.62158,0.0630951],224.14,1,0,[],\"\",\"\",true,false]\n]\n\n```",
            "examples": [
                {
                    "text": "```sqf\n[getPos player, 20, true] call BIS_fnc_objectsGrabber;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Position` - (Optional, default [0,0]) 2D or 3D position, center of the \"grabbing\" area"
                        },
                        {
                            "name": "size",
                            "description": "`Number` - (Optional, default 50) size (radius) of the \"grabbing\" area"
                        },
                        {
                            "name": "objectOrientation",
                            "description": "`Boolean` - (Optional, default `false`) capture object orientation or not. Format `BIS_fnc_getPitchBank`"
                        }
                    ],
                    "outline": "[position, size, objectOrientation] call `BIS_fnc_objectsGrabber`",
                    "returns": "`String` - arrays are in format [classname, relPos, azimuth, fuel, damage, pitchBankResult, vehicleVarName, initCommands, simulationEnabled, isASL]:\n* classname: `String`\n* relPos: `Array`\n* azimuth: `Number`\n* fuel: `Number`\n* damage: `Number`\n* pitchBankResult: `Array` - return from `BIS_fnc_getPitchBank` (only if _objectOrientation_ is true)\n* vehicleVarName: `String`\n* initCommands: `String`\n* simulationEnabled: `Boolean`\n* isASL: `Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_objectsGrabber"
        },
        "configuration": {
            "label": "BIS_fnc_objectsGrabber",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns object side as defined in config (i.e. not affected by dynamic changing like rating)",
            "examples": [
                {
                    "text": "```sqf\nprivate _realVehicleSide = [vehicle player, true] call BIS_fnc_objectSide;\n```"
                },
                {
                    "text": "```sqf\n\nprivate _unknownSide = [objNull, false] call BIS_fnc_objectSide; // will return sideUnknown\nprivate _eastSide    = [objNull, true]  call BIS_fnc_objectSide; // will return east\n\n```"
                },
                {
                    "text": "```sqf\n\n// same results\n_result1 = myVehicle call BIS_fnc_objectSide;\n_result2 = [myVehicle] call BIS_fnc_objectSide;\n_result3 = [myVehicle, false] call BIS_fnc_objectSide;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Object` - the object to be tested"
                        },
                        {
                            "name": "boolean",
                            "description": "`Boolean` (optional) - false (default) to return actual object side, true to return the default config value"
                        },
                        {
                            "name": "target",
                            "description": "`Object` - the object to be tested. This syntax is equal to calling the method with `false` as a second parameter."
                        }
                    ],
                    "outline": "target call `BIS_fnc_objectSide`",
                    "returns": "`Side`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_objectSide"
        },
        "configuration": {
            "label": "BIS_fnc_objectSide",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Takes an array of data about a dynamic object template and creates the objects.",
            "examples": [
                {
                    "text": "```sqf\nprivate _objectsArray = [\n\t[\"B_UAV_01_F\",[-5.23706,-0.183594,-0.00126648],167.39,1,0,[],\"\",\"\",true,false], \n\t[\"C_Offroad_01_F\",[-4.25903,4.62158,0.0630951],224.14,1,0,[],\"\",\"\",true,false]\n];\n[getMarkerPos \"myBase\", 0, _objectsArray, 0.5] call BIS_fnc_objectsMapper;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Array` - (Optional, default [0,0]) in format [Position2D](https://community.bistudio.com/wiki/Position)"
                        },
                        {
                            "name": "azimuth",
                            "description": "`Number` - (Optional, default 0) the template orientation"
                        },
                        {
                            "name": "objectsArray",
                            "description": "`Array` - created with `BIS_fnc_objectsGrabber`"
                        },
                        {
                            "name": "badChance",
                            "description": "`Number` - (Optional, default 0) chances of object non-creation for each object, in range 0..1"
                        }
                    ],
                    "outline": "[position, azimuth, objectsArray, badChance] call `BIS_fnc_objectsMapper`",
                    "returns": "`Array` of `Object`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_objectsMapper"
        },
        "configuration": {
            "label": "BIS_fnc_objectsMapper",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return object category and type.",
            "examples": [
                {
                    "text": "```sqf\nprivate _myType = player call BIS_fnc_objectType;\n```"
                },
                {
                    "text": "```sqf\nprivate _myType = \"B_MRAP_01_F\" call BIS_fnc_objectType;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "anObject",
                            "description": "`String` or `Object`"
                        }
                    ],
                    "outline": "anObject call `BIS_fnc_objectType`",
                    "returns": "`Array` - in format [category, type]. One of:\n{{{!}} class=\"wikitable\"\n! Soldier\n! Vehicle / VehicleAutonomous\n! Logic\n! Object\n{{!}}- style=\"vertical-align: top\"\n{{!}}\n* AT\n* Civilian\n* Diver\n* Infantry\n* Medic\n* MG\n* Officer\n* Pilot\n* Sniper\n* SpecialForces\n* UAVPilot\n{{!}}\n* Car\n* Helicopter\n* Motorcycle\n* Plane\n* Ship\n* StaticWeapon\n* Submarine\n* TrackedAPC\n* Tank\n* WheeledAPC\n{{!}}\n* Logic\n* Module\n{{!}}\n{{Columns|2|\n* Ammobox\n* Animal\n* Backpack\n* Camera\n* Church\n* Effect\n* Fire\n* Flag\n* Helipad\n* House\n* Marker\n* Mine\n* Parachute\n* Seagull\n* Sound\n* Target\n* Thing\n* Trigger\n* UnknownObject\n* VASI\n* Wreck\n}}\n{{!}}}"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_objectType"
        },
        "configuration": {
            "label": "BIS_fnc_objectType",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return a unique object variable. The variable is preserved after unit respawn.",
            "examples": [
                {
                    "text": "```sqf\nhint str (player call BIS_fnc_objectVar); // \"bis_o1\"\nhint str (player == (missionNamespace getVariable \"bis_o1\")); // true\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "varNameRoot",
                            "description": "`String` - (Optional, default \"bis_o\") - variable name root - a number will be added behind it"
                        }
                    ],
                    "outline": "[object, varNameRoot] call `BIS_fnc_objectVar`",
                    "returns": "`String` - generated variable name"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_objectVar"
        },
        "configuration": {
            "label": "BIS_fnc_objectVar",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_addLoadedEH` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_addLoadedEH"
        },
        "configuration": {
            "label": "BIS_fnc_OM_addLoadedEH",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_allInfectedDeadCode` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_allInfectedDeadCode"
        },
        "configuration": {
            "label": "BIS_fnc_OM_allInfectedDeadCode",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_AS_ShowStaticText` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_AS_ShowStaticText"
        },
        "configuration": {
            "label": "BIS_fnc_OM_AS_ShowStaticText",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_BuildSectorsData` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_BuildSectorsData"
        },
        "configuration": {
            "label": "BIS_fnc_OM_BuildSectorsData",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_camera` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_camera"
        },
        "configuration": {
            "label": "BIS_fnc_OM_camera",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_conversation` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_conversation"
        },
        "configuration": {
            "label": "BIS_fnc_OM_conversation",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_createConversation` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_createConversation"
        },
        "configuration": {
            "label": "BIS_fnc_OM_createConversation",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_credits` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_credits"
        },
        "configuration": {
            "label": "BIS_fnc_OM_credits",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_Epicentrum` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_Epicentrum"
        },
        "configuration": {
            "label": "BIS_fnc_OM_Epicentrum",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_EXEC` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_EXEC"
        },
        "configuration": {
            "label": "BIS_fnc_OM_EXEC",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_HandleMapControls` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_HandleMapControls"
        },
        "configuration": {
            "label": "BIS_fnc_OM_HandleMapControls",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_infectedGroupHandle` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_infectedGroupHandle"
        },
        "configuration": {
            "label": "BIS_fnc_OM_infectedGroupHandle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_init` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_init"
        },
        "configuration": {
            "label": "BIS_fnc_OM_init",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_medicineDeliveredCode` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_medicineDeliveredCode"
        },
        "configuration": {
            "label": "BIS_fnc_OM_medicineDeliveredCode",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_medicineRanOutCode` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_medicineRanOutCode"
        },
        "configuration": {
            "label": "BIS_fnc_OM_medicineRanOutCode",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Initialize slider with edit box showing its value supporting small decimal numbers.",
            "examples": [
                {
                    "text": "```sqf\n[_ctrlSlider,_ctrlEdit,\"m\",500] call BIS_fnc_OM_Module_initSmallValueSilder;//Set default value only.\n```"
                },
                {
                    "text": "```sqf\n[_ctrlSlider,_ctrlEdit,\"m\"] call BIS_fnc_OM_Module_initSmallValueSilder;//Initialize functionality.\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "ctrlSlider",
                            "description": "`Control` - slider Control"
                        },
                        {
                            "name": "ctrlEdit",
                            "description": "`Control` - edit Control"
                        },
                        {
                            "name": "unit",
                            "description": "`String` - (Optional, default \"%\") measurement unit added behind the number"
                        },
                        {
                            "name": "defaultValue",
                            "description": "`Number` - (Optional, default nil) when present, only the value is set, functionality is not initialized"
                        }
                    ],
                    "outline": "[ctrlSlider, ctrlEdit, unit, defaultValue] call `BIS_fnc_OM_Module_initSmallValueSilder`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_Module_initSmallValueSilder"
        },
        "configuration": {
            "label": "BIS_fnc_OM_Module_initSmallValueSilder",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_moduleActionQueue` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_moduleActionQueue"
        },
        "configuration": {
            "label": "BIS_fnc_OM_moduleActionQueue",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_moduleAwareness` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_moduleAwareness"
        },
        "configuration": {
            "label": "BIS_fnc_OM_moduleAwareness",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_moduleCheckpoint_checkAngleToObject` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_moduleCheckpoint_checkAngleToObject"
        },
        "configuration": {
            "label": "BIS_fnc_OM_moduleCheckpoint_checkAngleToObject",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_moduleCheckpoint_checkDistanceFromObject` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_moduleCheckpoint_checkDistanceFromObject"
        },
        "configuration": {
            "label": "BIS_fnc_OM_moduleCheckpoint_checkDistanceFromObject",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_moduleCheckpoint_handleStates` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_moduleCheckpoint_handleStates"
        },
        "configuration": {
            "label": "BIS_fnc_OM_moduleCheckpoint_handleStates",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_moduleCheckpoint_intersect` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_moduleCheckpoint_intersect"
        },
        "configuration": {
            "label": "BIS_fnc_OM_moduleCheckpoint_intersect",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_moduleCheckpoint_navigateVehicleToCheck` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_moduleCheckpoint_navigateVehicleToCheck"
        },
        "configuration": {
            "label": "BIS_fnc_OM_moduleCheckpoint_navigateVehicleToCheck",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_moduleCheckpoint_playAnim` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_moduleCheckpoint_playAnim"
        },
        "configuration": {
            "label": "BIS_fnc_OM_moduleCheckpoint_playAnim",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_moduleDepot` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_moduleDepot"
        },
        "configuration": {
            "label": "BIS_fnc_OM_moduleDepot",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_moduleEconomy` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_moduleEconomy"
        },
        "configuration": {
            "label": "BIS_fnc_OM_moduleEconomy",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_moduleFastTravel` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_moduleFastTravel"
        },
        "configuration": {
            "label": "BIS_fnc_OM_moduleFastTravel",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_moduleMarket` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_moduleMarket"
        },
        "configuration": {
            "label": "BIS_fnc_OM_moduleMarket",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_ModuleQuest_defend` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_ModuleQuest_defend"
        },
        "configuration": {
            "label": "BIS_fnc_OM_ModuleQuest_defend",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_ModuleQuest_destroyObject` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_ModuleQuest_destroyObject"
        },
        "configuration": {
            "label": "BIS_fnc_OM_ModuleQuest_destroyObject",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_moduleRadio` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_moduleRadio"
        },
        "configuration": {
            "label": "BIS_fnc_OM_moduleRadio",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_moduleRandomConversation` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_moduleRandomConversation"
        },
        "configuration": {
            "label": "BIS_fnc_OM_moduleRandomConversation",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_moduleReputation` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_moduleReputation"
        },
        "configuration": {
            "label": "BIS_fnc_OM_moduleReputation",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_moduleRestPoint` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_moduleRestPoint"
        },
        "configuration": {
            "label": "BIS_fnc_OM_moduleRestPoint",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_moduleSmartMarkers` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_moduleSmartMarkers"
        },
        "configuration": {
            "label": "BIS_fnc_OM_moduleSmartMarkers",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_ModuleSyndikatAgent` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_moduleSyndikatAgent"
        },
        "configuration": {
            "label": "BIS_fnc_OM_moduleSyndikatAgent",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_ModuleSyndikatTeam` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_moduleSyndikatTeam"
        },
        "configuration": {
            "label": "BIS_fnc_OM_moduleSyndikatTeam",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_pause` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_pause"
        },
        "configuration": {
            "label": "BIS_fnc_OM_pause",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_phone_addCall` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_phone_addCall"
        },
        "configuration": {
            "label": "BIS_fnc_OM_phone_addCall",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_phone_addContact` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_phone_addContact"
        },
        "configuration": {
            "label": "BIS_fnc_OM_phone_addContact",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_phone_core` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_phone_core"
        },
        "configuration": {
            "label": "BIS_fnc_OM_phone_core",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_phone_customSectionInit` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_phone_customSectionInit"
        },
        "configuration": {
            "label": "BIS_fnc_OM_phone_customSectionInit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_phone_customSectionShow` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_phone_customSectionShow"
        },
        "configuration": {
            "label": "BIS_fnc_OM_phone_customSectionShow",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_phone_customSectionWeatherShow` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_phone_customSectionWeatherShow"
        },
        "configuration": {
            "label": "BIS_fnc_OM_phone_customSectionWeatherShow",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_phone_getDiaryListIndexByName` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_phone_getDiaryListIndexByName"
        },
        "configuration": {
            "label": "BIS_fnc_OM_phone_getDiaryListIndexByName",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_phone_incomingCall` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_phone_incomingCall"
        },
        "configuration": {
            "label": "BIS_fnc_OM_phone_incomingCall",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_phone_menuHandler` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_phone_menuHandler"
        },
        "configuration": {
            "label": "BIS_fnc_OM_phone_menuHandler",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_phone_menuInit` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_phone_menuInit"
        },
        "configuration": {
            "label": "BIS_fnc_OM_phone_menuInit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_phone_removeCall` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_phone_removeCall"
        },
        "configuration": {
            "label": "BIS_fnc_OM_phone_removeCall",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_phone_SMS` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_phone_SMS"
        },
        "configuration": {
            "label": "BIS_fnc_OM_phone_SMS",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_phone_SMSSend` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_phone_SMSSend"
        },
        "configuration": {
            "label": "BIS_fnc_OM_phone_SMSSend",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Saves the game - simply calls `saveGame`.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_OM_saveGame;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_OM_saveGame`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_saveGame"
        },
        "configuration": {
            "label": "BIS_fnc_OM_saveGame",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_savingEnabled` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_savingEnabled"
        },
        "configuration": {
            "label": "BIS_fnc_OM_savingEnabled",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_SectorGetSectors` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_sectorGetSectors"
        },
        "configuration": {
            "label": "BIS_fnc_OM_sectorGetSectors",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_sellEquipment` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_sellEquipment"
        },
        "configuration": {
            "label": "BIS_fnc_OM_sellEquipment",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_SentryDrone` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_SentryDrone"
        },
        "configuration": {
            "label": "BIS_fnc_OM_SentryDrone",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_skip` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_skip"
        },
        "configuration": {
            "label": "BIS_fnc_OM_skip",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_warnCriticalCode` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_warnCriticalCode"
        },
        "configuration": {
            "label": "BIS_fnc_OM_warnCriticalCode",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OM_warnMildCode` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OM_warnMildCode"
        },
        "configuration": {
            "label": "BIS_fnc_OM_warnMildCode",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OMSetForecastLimit` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OMSetForecastLimit"
        },
        "configuration": {
            "label": "BIS_fnc_OMSetForecastLimit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OMWeatherManagerCore` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OMWeatherManagerCore"
        },
        "configuration": {
            "label": "BIS_fnc_OMWeatherManagerCore",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OMWeatherManagerMain` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OMWeatherManagerMain"
        },
        "configuration": {
            "label": "BIS_fnc_OMWeatherManagerMain",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OMWeatherManagerRain` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OMWeatherManagerRain"
        },
        "configuration": {
            "label": "BIS_fnc_OMWeatherManagerRain",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OMWeatherReport` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OMWeatherReport"
        },
        "configuration": {
            "label": "BIS_fnc_OMWeatherReport",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3oldman",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_OMWeatherUICalc` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_OMWeatherUICalc"
        },
        "configuration": {
            "label": "BIS_fnc_OMWeatherUICalc",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tRegister code to be executed when diary item changes.\n\n\tArguments passed into code are:\n\t\t0: DISPLAY - map display\n\t\t1: BOOL - true if clicked on subject list, false when on record list (clicking on subject may also trigger record)\n\t\t2: STRING - subject name\n\t\t3: STRING - record name\n\t\t4: ANY - passed arguments (index of onDiaryChanged code when no custom arguments were used)\n\n\tParameter(s):\n\t_this:\n\t\tCODE\n\t\tARRAY - code with custom arguments in format [CODE,ARG1,ARG2,...]\n\t\tNUMBER - remove code of given index\n\n\tReturns:\n\tNUMBER - index of onDiaryChanged code\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_onDiaryChanged;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_onDiaryChanged` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_onDiaryChanged"
        },
        "configuration": {
            "label": "BIS_fnc_onDiaryChanged",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Register code to be executed after mission end.\n**Arma**: 3|\nReplaced by [[Arma 3: Mission Event Handlers#Ended|\"Ended\" mission event handler]].\n\nThis function now exists only because of backward compatibility.",
            "examples": [
                {
                    "text": "```sqf\nprivate _onEndIndex = { player addRating 10000; } call BIS_fnc_onEnd;\n```"
                },
                {
                    "text": "```sqf\nprivate _onEndIndex = [{ { _x addRating 10000; } forEach _this; }, units group player] call BIS_fnc_onEnd;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "argument",
                            "description": "`Code`, `Array` or `Number`:"
                        }
                    ],
                    "outline": "argument call `BIS_fnc_onEnd`",
                    "returns": "`Number` - index of onEnd code"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_onEnd"
        },
        "configuration": {
            "label": "BIS_fnc_onEnd",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Register code to be executed after a mission load (from a save, for example).\n**IMPORTANT**: Replaced by [[Arma 3: Mission Event Handlers#Loaded|\"loaded\" mission event handler]].\n\nThis function now exists only because of backward compatibility",
            "examples": [
                {
                    "text": "```sqf\nprivate _codeIndex = { hint \"Welcome back!\"; } call BIS_fnc_onLoad;\n```"
                },
                {
                    "text": "```sqf\n0 call BIS_fnc_onLoad; // removes code with index 0\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "parameter",
                            "description": "`Code` or `Number`:"
                        }
                    ],
                    "outline": "parameter call `BIS_fnc_onLoad`",
                    "returns": "`Number` - index of onLoad code"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_onLoad"
        },
        "configuration": {
            "label": "BIS_fnc_onLoad",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Executes a function on server every time a player connects the mission.",
            "examples": [
                {
                    "text": "```sqf\n[\n {\n   params [\"_player\", \"_params\"];\n   hint name _player; hint _params;\n }, \n \"Parameter\" \n] call BIS_fnc_onPlayerConnected;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "code",
                            "description": "`Code` or `String` - function name or [code](https://community.bistudio.com/wiki/Code) to be executed. Following parameters are passed to the function or code:"
                        },
                        {
                            "name": "params",
                            "description": "`Anything` - parameters passed to the code or function"
                        }
                    ],
                    "outline": "[code, params]] call `BIS_fnc_onPlayerConnected`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_onPlayerConnected"
        },
        "configuration": {
            "label": "BIS_fnc_onPlayerConnected",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Opens Field Manual in briefing (SP, MP Server, MP Client) and players's map or journal.\nSelects the topic and hint passed as parameters.\nCan apply a (search) filter if desired.",
            "examples": [
                {
                    "text": "```sqf\n[\"Damage\", \"HitDamage\"] call BIS_fnc_openFieldManual;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "topic",
                            "description": "`String` - class name of a topic that will be selected in the opened Field Manual (e.g. \"Damage\")"
                        },
                        {
                            "name": "hint",
                            "description": "`String` - class name of a hint that will be selected in the opened Field Manual (e.g. \"HitDamage\")"
                        },
                        {
                            "name": "display",
                            "description": "`Display` - (Optional) desired parent `Display` to open the Field Manual display under"
                        },
                        {
                            "name": "filter",
                            "description": "`String` - (Optional) pre-filled search field filter in the opened Field Manual (recommended to use localized string)"
                        }
                    ],
                    "outline": "[topic, hint, display, filter] call `BIS_fnc_openFieldManual`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_openFieldManual"
        },
        "configuration": {
            "label": "BIS_fnc_openFieldManual",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Register texture(s) to be displayed over CfgORBAT group.",
            "examples": [
                {
                    "text": "```sqf\n[configFile >> \"CfgORBAT\" >> \"BIS\" >> \"B_1_A_1\", \"\\A3\\weapons_f\\data\\UI\\icon_MG_CA.paa\", [0,0,01], 3, 3, 0, \"Some Text\", true] call BIS_fnc_ORBATAddGroupOverlay;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Config` - path to group in CfgORBAT"
                        },
                        {
                            "name": "texture",
                            "description": "`String` - texture"
                        },
                        {
                            "name": "colour",
                            "description": "`Array` - colour in format [R,G,B,A]"
                        },
                        {
                            "name": "widthMulti",
                            "description": "`Number` - original icon width multiplier"
                        },
                        {
                            "name": "heightMulti",
                            "description": "`Number` - original icon height multiplier"
                        },
                        {
                            "name": "angle",
                            "description": "`Number` - angle"
                        },
                        {
                            "name": "text",
                            "description": "`String` - text"
                        },
                        {
                            "name": "shadow",
                            "description": "`Boolean` - shadow outlining the texture"
                        }
                    ],
                    "outline": "[target, texture, colour, widthMulti, heightMulti, angle, text, shadow] call `BIS_fnc_ORBATAddGroupOverlay`",
                    "returns": "`Number` - overlay ID, used by `BIS_fnc_ORBATRemoveGroupOverlay`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_ORBATAddGroupOverlay"
        },
        "configuration": {
            "label": "BIS_fnc_ORBATAddGroupOverlay",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Animates an ORBAT viewer.",
            "examples": [
                {
                    "text": "```sqf\n[configFile >> \"CfgORBAT\" >> \"BIS\" >> \"B_1_A_1\", 0.5, 3] spawn BIS_fnc_ORBATAnimate;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Config` or `Array` - path to group in CfgORBAT or offset position from structure center in format **[X, Y]**."
                        },
                        {
                            "name": "zoom",
                            "description": "`Number` - zoom in range from 0 (max. zoom) to 1 (min. zoom)"
                        },
                        {
                            "name": "duration",
                            "description": "`Number` - commit time in seconds"
                        }
                    ],
                    "outline": "[target, zoom, duration] spawn `BIS_fnc_ORBATAnimate`",
                    "returns": "`Boolean` - `true` when animation is applied"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_ORBATAnimate"
        },
        "configuration": {
            "label": "BIS_fnc_ORBATAnimate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Opens config viewer and shows CfgORBAT. Used to retrieve CfgOrbat data\n**WARNING**: This function seems to be broken **(Arma 3)**",
            "examples": [
                {
                    "text": "```sqf\n[configFile >> \"CfgORBAT\" >> \"BIS\" >> \"B_1_A_1\"] call BIS_fnc_ORBATConfigPreview;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "class",
                            "description": "- `Config` - Path to group in CfgORBAT"
                        }
                    ],
                    "outline": "[class] call `BIS_fnc_ORBATConfigPreview`",
                    "returns": "`String` or `Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_ORBATConfigPreview"
        },
        "configuration": {
            "label": "BIS_fnc_ORBATConfigPreview",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns group params from CfgORBAT.",
            "examples": [
                {
                    "text": "```sqf\n[configFile >> \"CfgORBAT\" >> \"BIS\" >> \"B_1_A_1\"] call BIS_fnc_ORBATGetGroupParams;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "path",
                            "description": "`Config` - path to group in CfgORBAT."
                        }
                    ],
                    "outline": "[path] call `BIS_fnc_ORBATGetGroupParams`",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_ORBATGetGroupParams"
        },
        "configuration": {
            "label": "BIS_fnc_ORBATGetGroupParams",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Opens the [ORBAT Viewer](https://community.bistudio.com/wiki/ORBAT%20Viewer).",
            "examples": [
                {
                    "text": "```sqf\n[configFile >> \"CfgORBAT\" >> \"BIS\" >> \"O_Brigade\", findDisplay 46, [], 4, [\"ConfigClass_1\", { systemChat \"ConfigClass_1\" }]] call BIS_fnc_ORBATOpen;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "path",
                            "description": "`Config` - config path to displayed structure"
                        },
                        {
                            "name": "display",
                            "description": "`Display` - (Optional, default <sqf inline>[] call BIS_fnc_displayMission) parent display"
                        },
                        {
                            "name": "tags",
                            "description": "`Array` of `String`s - (Optional, default <sqf inline>[]) list of tags. Searching will stop on groups which do not contain at least one of the tags"
                        },
                        {
                            "name": "numTiers",
                            "description": "`Number` - (Optional, default -1 (all)) Number of tiers displayed"
                        },
                        {
                            "name": "parameters",
                            "description": "`Array` of `Array`s - (Optional, default <sqf inline>[]) sub-arrays in format [config, code] where:"
                        }
                    ],
                    "outline": "[path, display, tags, numTiers, parameters] call `BIS_fnc_ORBATOpen`",
                    "returns": "`Display`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_ORBATOpen"
        },
        "configuration": {
            "label": "BIS_fnc_ORBATOpen",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Unregister texture(s) to be displayed over CfgORBAT group.",
            "examples": [
                {
                    "text": "```sqf\n[configFile >> \"CfgORBAT\" >> \"BIS\" >> \"O_Brigade\", 4] call BIS_fnc_ORBATRemoveGroupOverlay;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "path",
                            "description": "`Config` - path to group in CfgORBAT. `configFile` >> \"CfgORBAT\" >> \"BIS\" >> \"O_Brigade\""
                        },
                        {
                            "name": "number",
                            "description": "`Display` - overlay ID returned by `BIS_fnc_ORBATAddGroupOverlay`"
                        }
                    ],
                    "outline": "[path, number] call `BIS_fnc_ORBATRemoveGroupOverlay`",
                    "returns": "`Boolean`  - `true` if overlay entry was removed"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_ORBATRemoveGroupOverlay"
        },
        "configuration": {
            "label": "BIS_fnc_ORBATRemoveGroupOverlay",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Set fade value of CfgORBAT group and all groups below it.",
            "examples": [
                {
                    "text": "```sqf\n[configFile >> \"CfgORBAT\" >> \"BIS\" >> \"O_Brigade\", 0.5, 5] call BIS_fnc_ORBATSetGroupFade;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "path",
                            "description": "`Config` - path to group in CfgORBAT. If only this parameter is passed, visibility settings for the group are removed."
                        },
                        {
                            "name": "alpha",
                            "description": "`Number` - alpha (0 = transparent, 1 = full color)"
                        },
                        {
                            "name": "time",
                            "description": "`time` - commit time in seconds"
                        }
                    ],
                    "outline": "[path, alpha, time] call `BIS_fnc_ORBATSetGroupFade`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_ORBATSetGroupFade"
        },
        "configuration": {
            "label": "BIS_fnc_ORBATSetGroupFade",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Overrides group params from CfgORBAT. See [ORBAT Viewer](https://community.bistudio.com/wiki/ORBAT%20Viewer) for a detailed explanation.",
            "examples": [
                {
                    "text": "```sqf\n\n[\n\tconfigFile >> \"CfgORBAT\" >> \"BIS\" >> \"B_1_A_1\",\n\t1,\n\t\"Platoon\",\n\t\"Infantry\",\n\t\"West\",\n\t\"Name: %1 %2 %3\",\n\t\"Short Name: %1 %2 %3\",\n\t\"b_air\",\n\t3,\n\t\"\\A3\\Air_F_EPB\\Heli_Light_03\\data\\UI\\Heli_Light_03_CA.paa\",\n\t[0,0,0,1],\n\t\"Commander Name\",\n\t\"General\",\n\t\"Description\",\n\t[[\"B_MRAP_01_F\",5]]\n] call BIS_fnc_ORBATSetGroupParams;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Config` - path to class in CfgORBAT"
                        },
                        {
                            "name": "idType",
                            "description": "`Number` or `String` - ID Type (e.g. `**1**` to result in \"1st\", or a specific string)"
                        },
                        {
                            "name": "size",
                            "description": "`String` - size as a class from CfgChainOfCommand > Sizes (e.g., \"Platoon\")"
                        },
                        {
                            "name": "type",
                            "description": "`String` - type as a class from CfgChainOfCommand > Types (e.g., \"Infantry\")"
                        },
                        {
                            "name": "side",
                            "description": "`String` - side as a class from CfgChainOfCommand > Sides (e.g., \"West\")"
                        },
                        {
                            "name": "name",
                            "description": "`String` - name. Passed arguments are: %1 - ID, %2 - type, %3 - size)"
                        },
                        {
                            "name": "shortName",
                            "description": "`String` - short name. Passed arguments are: %1 - ID, %2 - type, %3 - size)"
                        },
                        {
                            "name": "texture",
                            "description": "`String` - texture. Can be link to a file or a class from CfgMarkers"
                        },
                        {
                            "name": "textSizeCoef",
                            "description": "`Number` - texture size coeficient. 1 is the default size"
                        },
                        {
                            "name": "insignia",
                            "description": "`String` - insignia displayed in tooltip and in the ORBAT viewer background"
                        },
                        {
                            "name": "textColour",
                            "description": "`Array` - texture color in format RGBA"
                        },
                        {
                            "name": "commName",
                            "description": "`String` - commander name. Can be the name directly or a class from CfgWorlds > GenericNames"
                        },
                        {
                            "name": "commRank",
                            "description": "`String` - commander rank"
                        },
                        {
                            "name": "description",
                            "description": "`String` - description shown in tooltip"
                        },
                        {
                            "name": "assets",
                            "description": "`Array` of `Array`s in format [vehicleClass, count]:"
                        }
                    ],
                    "outline": "[target, idType, size, type, side, name, shortName, texture, textSizeCoef, insignia, textColour, commName, commRank, description, assets] call `BIS_fnc_ORBATSetGroupParams`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_ORBATSetGroupParams"
        },
        "configuration": {
            "label": "BIS_fnc_ORBATSetGroupParams",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Animates an ORBAT viewer.",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Config` or `Array` - path to group in CfgORBAT or group params returned by `BIS_fnc_ORBATGetGroupParams`"
                        },
                        {
                            "name": "control",
                            "description": "`Control` - tooltip control"
                        },
                        {
                            "name": "position",
                            "description": "`Array` - mouse position in format **[x,y]**"
                        }
                    ],
                    "outline": "[target, control, position] call `BIS_fnc_ORBATTooltip`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_ORBATTooltip"
        },
        "configuration": {
            "label": "BIS_fnc_ORBATTooltip",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return number as ordinal number (e.g. 1 become \"1st\")",
            "examples": [
                {
                    "text": "```sqf\nprivate _second = [42] call BIS_fnc_ordinalNumber; // will return \"42nd\" for English-speaking players\n```"
                },
                {
                    "text": "```sqf\n\nprivate _num1enm = [1, \"English\", false] call BIS_fnc_ordinalNumber;\t// returns \"1st\"\n_num1frm = [1, \"French\",  false] call BIS_fnc_ordinalNumber;\t\t\t// returns \"1er\"\n_num1frw = [1, \"French\",   true] call BIS_fnc_ordinalNumber;\t\t\t// returns \"1re\"\n_num1esm = [1, \"Spanish\", false] call BIS_fnc_ordinalNumber;\t\t\t// returns \"1\"\n_num1esw = [1, \"Spanish\",  true] call BIS_fnc_ordinalNumber;\t\t\t// returns \"1*\" for Portuguese, Italian and Spanish\n\n```"
                },
                {
                    "text": "```sqf\n\nprivate _num1en = [1, \"English\"] call BIS_fnc_ordinalNumber;\t\t\t// returns \"1st\"\n_num2en = [2, \"English\"] call BIS_fnc_ordinalNumber;\t\t\t\t\t// returns \"2nd\"\n_num3en = [3, \"English\"] call BIS_fnc_ordinalNumber;\t\t\t\t\t// returns \"3rd\"\n_num4en = [4, \"English\"] call BIS_fnc_ordinalNumber;\t\t\t\t\t// returns \"4th\"\n_num9en = [9, \"English\"] call BIS_fnc_ordinalNumber;\t\t\t\t\t// returns \"9th\"\n\n```"
                },
                {
                    "text": "```sqf\nprivate _second = [1, \"unknownLanguage\"] call BIS_fnc_ordinalNumber; // will return \"1.\" if language is not recognised/supported\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "number",
                            "description": "`Number`"
                        },
                        {
                            "name": "language",
                            "description": "`String` - (Optional, current game `language`)"
                        },
                        {
                            "name": "isFeminine",
                            "description": "`Boolean` - (Optional, default `false`)"
                        }
                    ],
                    "outline": "[number, language, isFeminine] call `BIS_fnc_ordinalNumber`",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_ordinalNumber"
        },
        "configuration": {
            "label": "BIS_fnc_ordinalNumber",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns the mission author's name preceded by \"by\", e.g \"by Username\". See {{Link|Description.ext#author}}.",
            "examples": [
                {
                    "text": "```sqf\nhint format [\"%1, %2\", briefingName, call BIS_fnc_overviewAuthor];\n```"
                },
                {
                    "text": "```sqf\nhint format [\"%1, %2\", briefingName, [missionConfigFile] call BIS_fnc_overviewAuthor];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "config",
                            "description": "`Config` - (Optional, default `configFile`) where the function will look for **author** entry"
                        },
                        {
                            "name": "control",
                            "description": "`Control` - (Optional, default `controlNull`) if provided, will be filled with author's name"
                        }
                    ],
                    "outline": "[config, control] call `BIS_fnc_overviewAuthor`",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_overviewAuthor"
        },
        "configuration": {
            "label": "BIS_fnc_overviewAuthor",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_overviewDifficulty;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_overviewDifficulty` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_overviewDifficulty"
        },
        "configuration": {
            "label": "BIS_fnc_overviewDifficulty",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>#define CONTROL_SHOW(CONTROL) \\\n\tCONTROL ctrlshow true; \\\n\tCONTROL ctrlsetfade 0; \\\n\tCONTROL ctrlcommit 0;\n\n#define CONTROL_HIDE(CONTROL) \\\n\tCONTROL ctrlshow false; \\\n\tCONTROL ctrlsetfade 1; \\\n\tCONTROL ctrlcommit 0;\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_overviewMission;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_overviewMission` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_overviewMission"
        },
        "configuration": {
            "label": "BIS_fnc_overviewMission",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_overviewTerrain;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_overviewTerrain` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_overviewTerrain"
        },
        "configuration": {
            "label": "BIS_fnc_overviewTerrain",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns the dynamically composed overview text for Time Trial scenarios.",
            "examples": [
                {
                    "text": "```sqf\n\"BIS_someTimeTrail\" call BIS_fnc_overviewTimeTrial;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "class",
                            "description": "`String` - scenario class name"
                        }
                    ],
                    "outline": "class call `BIS_fnc_overviewTimeTrial`",
                    "returns": "`String` - overview (structured text)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_overviewTimeTrial"
        },
        "configuration": {
            "label": "BIS_fnc_overviewTimeTrial",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "This function will make weapon team pack a static weapon. The weapon crew will pack carried weapon (or given weapon if different) and follow leader. Requires three personnel in the team: Team Leader, Gunner and Asst. Gunner. This function is MP compatible\n\n\n\nWhen the weapon is packed, scripted EH \"StaticWeaponPacked\" is called with the following params: \n* [group, leader, gunner, assistant, weaponBag, tripodBag]\n\n**NOTE**: If a unit flees, all bets are off and the function will exit leaving units on their own. To guarantee weapon disassembly, make sure the group has maximum courage \n```sqf\n_group allowFleeing 0;\n```",
            "examples": [
                {
                    "text": "```sqf\n[leader1] call BIS_fnc_packStaticWeapon;\n```"
                },
                {
                    "text": "```sqf\n\ngroup1 allowFleeing 0;\n[group1, nil, \"leaderpos_marker\"] call BIS_fnc_packStaticWeapon;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group` or `Object` - the support team group or a unit from this group"
                        },
                        {
                            "name": "weapon",
                            "description": "`Object` - (Optional) weapon to pack. If `nil`, current group weapon is packed"
                        },
                        {
                            "name": "leaderPos",
                            "description": "`Array`, `String` or `Object` - (Optional) position, object or marker to which the group leader should move after the weapon is packed. By default the group will resume on to the next assigned waypoint. If this param is provided, group will not go to the next waypoint and will move to given position instead"
                        }
                    ],
                    "outline": "[group, weapon, leaderPos] call `BIS_fnc_packStaticWeapon`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_packStaticWeapon"
        },
        "configuration": {
            "label": "BIS_fnc_packStaticWeapon",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Load a script parameter. See [[Arma 3: Functions Library#Loading Parameters|Arma 3: Functions Library]] for detailed description.\n\n**Arma**: 3|Use `param` or `params` commands instead.",
            "examples": [
                {
                    "text": "```sqf\n_target = [_this, 0, objNull, [objNull,[]], [2,3]] call BIS_fnc_param;\n```\n\n* if (_this select 0) is not defined, default objnull is used.\n* if (_this select 0) is defined, but is neither of type `Object` nor `Array`, error message is logged and default `objNull` is used.\n* if (_this select 0) and is `Array`, but it is count is neither 2 nor 3, error message is logged and default `objNull` is used."
                },
                {
                    "text": "```sqf\n_answer = [_this, 1, 42] call BIS_fnc_param;\n```\n\n* if (_this select 1) is not defined, default 42 is used.\n* no limit for data types or number of elements exists."
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "input",
                            "description": "`Array` - list of params"
                        },
                        {
                            "name": "index",
                            "description": "`Number` - selected index"
                        },
                        {
                            "name": "defaultValue",
                            "description": "`Anything` - (Optional, default `Nothing`) default param (used when param is missing or of wrong type)."
                        },
                        {
                            "name": "dataTypes",
                            "description": "`Array` - (Optional, default `Anything`) list of allowed type examples (e.g. [\"\",[],0,`objNull`<nowiki>]</nowiki>)"
                        },
                        {
                            "name": "requiredCount",
                            "description": "`Number` or `Array` - (Optional) if value is Array, checks if it has required number of elements"
                        }
                    ],
                    "outline": "[input, index, defaultValue, dataTypes, requiredCount] call `BIS_fnc_param`",
                    "returns": "`Anything`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_param"
        },
        "configuration": {
            "label": "BIS_fnc_param",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Set side mission time.",
            "examples": [
                {
                    "text": "```sqf\n360 call BIS_fnc_paramCountdown;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "number",
                            "description": "`Number` - mission time in seconds"
                        }
                    ],
                    "outline": "number call `BIS_fnc_paramCountdown`",
                    "returns": "`Boolean`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_paramCountdown"
        },
        "configuration": {
            "label": "BIS_fnc_paramCountdown",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Sets time of the day to the hour. Minutes will always be zero.",
            "examples": [
                {
                    "text": "```sqf\nprivate _date = 12 call BIS_fnc_paramDaytime;\n```"
                },
                {
                    "text": "```sqf\nprivate _date = [2001, 01, 01, 12, 00] call BIS_fnc_paramDaytime;\n```"
                },
                {
                    "text": "```sqf\nprivate _date = call BIS_fnc_paramDaytime;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "datetime",
                            "description": "`Number` or `Array` - (Optional, default `dayTime`):"
                        }
                    ],
                    "outline": "datetime call `BIS_fnc_paramDaytime`",
                    "returns": "`Array` - set date"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_paramDaytime"
        },
        "configuration": {
            "label": "BIS_fnc_paramDaytime",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Set relationship between Independents and remaining sides.",
            "examples": [
                {
                    "text": "```sqf\n2 call BIS_fnc_paramGuerFriendly;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "number",
                            "description": "`Number` - side relation, can be:"
                        },
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "number call `BIS_fnc_paramGuerFriendly`",
                    "returns": "`Boolean`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_paramGuerFriendly"
        },
        "configuration": {
            "label": "BIS_fnc_paramGuerFriendly",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "See `BIS_fnc_param`.\nOverloading default values is disabled in this variant.\nIt's intended to be used where [_this](https://community.bistudio.com/wiki/Magic%20Variables%23this) is not used as an input param.",
            "examples": [
                {
                    "text": "```sqf\nprivate _array = [_this, 0, [], [[]]] call BIS_fnc_param;\n_item = [_array,0,true,[true]] call BIS_fnc_paramIn;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "See `BIS_fnc_param`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_paramIn"
        },
        "configuration": {
            "label": "BIS_fnc_paramIn",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Set side respawn tickets.",
            "examples": [
                {
                    "text": "```sqf\n360 call BIS_fnc_paramRespawnTickets;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "number",
                            "description": "`Number` - respawn tickets"
                        }
                    ],
                    "outline": "number call `BIS_fnc_paramRespawnTickets`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_paramRespawnTickets"
        },
        "configuration": {
            "label": "BIS_fnc_paramRespawnTickets",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Grabs server param into global variable. (**bis_reviveParam_bleedOutDuration**)",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_paramReviveBleedOutDuration;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_paramReviveBleedOutDuration`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_paramReviveBleedOutDuration"
        },
        "configuration": {
            "label": "BIS_fnc_paramReviveBleedOutDuration",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Grabs server param into global variable. (**bis_reviveParam_duration**)",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_paramReviveDuration;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_paramReviveDuration`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_paramReviveDuration"
        },
        "configuration": {
            "label": "BIS_fnc_paramReviveDuration",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Grabs server param into global variable. (**bis_reviveParam_forceRespawnDuration**)",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_paramReviveForceRespawnDuration;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_paramReviveForceRespawnDuration`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_paramReviveForceRespawnDuration"
        },
        "configuration": {
            "label": "BIS_fnc_paramReviveForceRespawnDuration",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Grabs server param into global variable. (**bis_reviveParam_medicSpeedMultiplier**)",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_paramReviveMedicSpeedMultiplier;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_paramReviveMedicSpeedMultiplier`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_paramReviveMedicSpeedMultiplier"
        },
        "configuration": {
            "label": "BIS_fnc_paramReviveMedicSpeedMultiplier",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Grabs server param into global variable. (**bis_reviveParam_mode**)",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_paramReviveMode;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_paramReviveMode`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_paramReviveMode"
        },
        "configuration": {
            "label": "BIS_fnc_paramReviveMode",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Grabs server param into global variable. (**bis_reviveParam_requiredItems**)",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_paramReviveRequiredItems;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_paramReviveRequiredItems`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_paramReviveRequiredItems"
        },
        "configuration": {
            "label": "BIS_fnc_paramReviveRequiredItems",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Grabs server param into global variable. (**bis_reviveParam_requiredTrait**)",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_paramReviveRequiredTrait;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_paramReviveRequiredTrait`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_paramReviveRequiredTrait"
        },
        "configuration": {
            "label": "BIS_fnc_paramReviveRequiredTrait",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Grabs server param into global variable. (**bis_reviveParam_unconsciousStateMode**)",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_paramReviveUnconsciousStateMode;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_paramReviveUnconsciousStateMode`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_paramReviveUnconsciousStateMode"
        },
        "configuration": {
            "label": "BIS_fnc_paramReviveUnconsciousStateMode",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Manages `setTimeMultiplier` Multiplayer setting (set with [[Mission Parameters|paramTimeAcceleration.hpp]])",
            "examples": [
                {
                    "text": "```sqf\n5 call BIS_fnc_paramTimeAcceleration;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "timeMultiplier",
                            "description": "`Number` - (Optional, default `timeMultiplier`)"
                        }
                    ],
                    "outline": "timeMultiplier call `BIS_fnc_paramTimeAcceleration`",
                    "returns": "`Number` - the set ratio"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_paramTimeAcceleration"
        },
        "configuration": {
            "label": "BIS_fnc_paramTimeAcceleration",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Set view distance.",
            "examples": [
                {
                    "text": "```sqf\n7500 call BIS_fnc_paramViewDistance;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "viewDistance",
                            "description": "`Number` - wanted view distance"
                        }
                    ],
                    "outline": "`viewDistance` call `BIS_fnc_paramViewDistance`",
                    "returns": "`Number` - `viewDistance`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_paramViewDistance"
        },
        "configuration": {
            "label": "BIS_fnc_paramViewDistance",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Sets overcast using `BIS_fnc_setOvercast`.",
            "examples": [
                {
                    "text": "```sqf\noverCastValue = [1] call BIS_fnc_paramWeather;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "`Number`",
                            "description": "overcast value. _Multiplied by 0.01 inside the function. Default value is **current overcast value**._"
                        }
                    ],
                    "outline": "[0] call `BIS_fnc_paramWeather`",
                    "returns": "`Number` - overcast value (ranging from 0 to 1)."
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_paramWeather"
        },
        "configuration": {
            "label": "BIS_fnc_paramWeather",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return number from expression",
            "examples": [
                {
                    "text": "```sqf\nprivate _result = 7.62 call BIS_fnc_parseNumber;\n_result = \"7.62\" call BIS_fnc_parseNumber;\n_result = { 7.62 } call BIS_fnc_parseNumber;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "value",
                            "description": "`Number`, `String`, `Code` or `Config`"
                        }
                    ],
                    "outline": "value call `BIS_fnc_parseNumber`",
                    "returns": "`Number` - parsed number, -1 if value is not a number"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_parseNumber"
        },
        "configuration": {
            "label": "BIS_fnc_parseNumber",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Converts expression into a number. Can also convert array of expressions into an array of numbers. If expression does not return a number, 0 is returned.",
            "examples": [
                {
                    "text": "```sqf\n[safeZoneX, safeZoneWAbs, configFile] call BIS_fnc_parseNumberSafe;\t// returns [-0.452381,1.90476,0]\n```"
                },
                {
                    "text": "```sqf\n[\"1337\", \"2013\", date] call BIS_fnc_parseNumberSafe;\t\t\t\t\t// returns [1337,2013,[2036,1,1,6,58]]\n```"
                },
                {
                    "text": "```sqf\n[blufor, opfor, independent, civilian] call BIS_fnc_parseNumberSafe;\t// returns [1,0,2,3]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "input",
                            "description": "`Number`, `String`, `Side`, `Config` or `Array` - if type is array, array may contain any of the mentioned data types"
                        }
                    ],
                    "outline": "[input] call `BIS_fnc_parseNumberSafe`",
                    "returns": "`Number` or `Array` of `Number`s if _input_ is an `Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_parseNumberSafe"
        },
        "configuration": {
            "label": "BIS_fnc_parseNumberSafe",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Convert number to NATO phonetical alphabet word (e.g. 2 becomes \"Bravo\") or letter of alphabet.",
            "examples": [
                {
                    "text": "```sqf\n[1] call BIS_fnc_phoneticalWord; // returns \"Alpha\"\n```"
                },
                {
                    "text": "```sqf\n[1, true] call BIS_fnc_phoneticalWord; // returns \"A\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "integer",
                            "description": "`Number` - any integer from 1 to 26."
                        },
                        {
                            "name": "short",
                            "description": "`Boolean` - (Optional, default `false`) `true` for the short version, `false` for the long version."
                        }
                    ],
                    "outline": "[integer, short] call `BIS_fnc_phoneticalWord`",
                    "returns": "`String` - phonetical word or letter of alphabet. In case of full word the returned string [is localised](https://community.bistudio.com/wiki/isLocalized)."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_phoneticalWord"
        },
        "configuration": {
            "label": "BIS_fnc_phoneticalWord",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Displays Picture in Picture.",
            "examples": [
                {
                    "text": "```sqf\n[\"rendertarget0\", [heli1, heli1 selectionPosition \"slingload0\"], cargo1], heli1, false] call BIS_fnc_PIP;\n```"
                },
                {
                    "text": "```sqf\n[\"rendertarget0\", _myCamera] call BIS_fnc_PIP;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "renderTarget",
                            "description": "`String` - render target"
                        },
                        {
                            "name": "cameraParams",
                            "description": "`Object` or `Array`"
                        },
                        {
                            "name": "vehicle",
                            "description": "`Object` - (Optional) helicopter to which action is added (to memory point \"action_screen1\")"
                        },
                        {
                            "name": "replace",
                            "description": "`Boolean` - (Optional, default `true`) true to replace existing PIP on same target"
                        }
                    ],
                    "outline": "[renderTarget, cameraParams, vehicle, replace] call `BIS_fnc_PIP`",
                    "returns": "`Object` - camera"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_PIP"
        },
        "configuration": {
            "label": "BIS_fnc_PIP",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Bravo Zero One development\n\t- John_Spartan\n\n\tDescription:\n\t- This function is designed as part of set of functions to implement semi-authenthic ejection system on fixed wing aircrfat that have such functionality enabled/configured.\n\t- AI behaviour handler.\n\n\tExucution:\n\t- Call the function via attached EH to the aircrfat itself.\n\n\t\tExample:\n\t\tclass Eventhandlers : Eventhandlers\n\t\t{\n\t\t\tHit = \"_this call BIS_fnc_planeAiEject\";\n\t\t};\n\n\tRequirments:\n\t- Compatible aircrfat must have a config definition for all subsytems that will be invoked by ejection system (see BIS_fnc_PlaneEjection).\n\n\tParameter(s):\n\t\t_this select 0: mode (Scalar)\n\t\t0: plane/object\n\n\tReturns: nothing\n\tResult: AI pilot will be forced to eject from aircrfat upon damage treshold reached. Semi-authenthic behaviour.\n\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_planeAiEject;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_planeAiEject` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_planeAiEject"
        },
        "configuration": {
            "label": "BIS_fnc_planeAiEject",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Bravo Zero One development\n\t- John_Spartan\n\n\tDescription:\n\t- This function is designed to implement semi-authenthic ejection system on fixed wing aircrfat that have such functionality enabled/configured.\n\n\tExucution:\n\t- Call the function via user action added to the aircrfat itself.\n\n\t\t\tclass Plane_Eject_UserActionExample\n\t\t\t{\n\t\t\t\tpriority = 0.05;\n\t\t\t\tshortcut = \"Eject\";\n\t\t\t\tdisplayName = \"$STR_A3_action_eject\";\n\t\t\t\tcondition = \"player in this\";\n\t\t\t\tstatement = \"[this] spawn BIS_fnc_planeEjection\";\n\t\t\t\tposition = \"pilotcontrol\";\n\t\t\t\tradius = 10;\n\t\t\t\tonlyforplayer = 1;\n\t\t\t\tshowWindow = 0;\n\t\t                hideOnUse = 1;\n\t\t\t};\n\n\tRequirments:\n\t- Compatible aircrfat must have a config definition for all sub-sytems that will be invoked by this function.\n\t\t1. Old legacy ejection must be disabled in aircrfat's cfgVehicles configuration.\n\t\tdriverCanEject = 0;\n\t\tgunnerCanEject = 0;\n\t\tcargoCanEject = 0;\n\n\t\t2. Aircrfat must have a set of parameters defined in CfgVehicles subClass (EjectionSystem) for ejection system. Theese parameters will affect the ejection behaviour.\n\t\texample of cfgVehicles subclass definitions;\n\n\t\tclass EjectionSystem\n\t\t{\n\t\t\tEjectionSeatEnabled = 1;\t\t\t\t\t\t\t\t\t\t//enable advanced ejection system\n\t\t\tEjectionDual = 0;\t\t\t\t\t\t\t\t\t\t\t//currently only single seat aircraft ejectiion supported (to do for latter)\n\t\t\tEjectionSeatClass = \"B_Ejection_Seat_Plane_Fighter_01_F\";\t\t\t\t\t\t\t\t//class name of ejector seat to use (separate vehicle/object)\n\t\t\tCanopyClass = \"Plane_Fighter_01_Canopy_F\";\t\t\t\t\t\t\t\t//class name of canopy to use (separate vehicle/object)\n\t\t\tEjectionSeatHideAnim = \"ejection_seat_hide\";\t\t\t\t\t\t\t\t//name of the hide animation that will hide ejector seat mesh in plane\n\t\t\tEjectionSeatRailAnim = \"ejection_seat_motion\";\t\t\t\t\t\t\t\t//name of the animation that will be played to start a smooth ejection motion out of cockpit\n\t\t\tCanopyHideAnim = \"canopy_hide\";\t\t\t\t\t\t\t\t\t\t//name of the hide animation that will hide canopy mesh in plane\n\t\t\tEjectionSeatPos = \"pos_eject\";\t\t\t\t\t\t\t\t\t\t//position memory point whwre to attach ejector seat\n\t\t\tCanopyPos = \"pos_eject_canopy\";\t\t\t\t\t\t\t\t\t\t//position memory point where to attach dummy canopy\n\t\t\tEjectionSoundExt = \"Plane_Fighter_01_ejection_ext_sound\";\t\t\t\t\t\t//sound to play when ejection trigered (external)\n\t\t\tEjectionSoundInt = \"Plane_Fighter_01_ejection_in_sound\";\t\t\t\t\t\t//sound to play when ejection trigered (in-ternal)\n\t\t\tEjectionParachute = \"Steerable_Parachute_F\";\t\t\t\t\t\t\t\t//class name parachute used in ejection\n\t\t\tEjectionSeatForce = 50;\t\t\t\t\t\t\t\t\t\t\t//ejection seat blast force\n\t\t\tCanopyForce = 30;\t\t\t\t\t\t\t\t\t\t\t//canopy bast force\n\n\t\t};\n\n\t\t3. Aircrfat model must have momory points definig positions where to attach new vehicle ejector seat, new vehicle canopy.\n\t\t4. Aircrfat model (in model cfg & class AnimationSources) must have a set of hide animations defined to hide ejector seat and canopy in model when new seaparate vehicles are spawned.\n\n\t\tIn model.cfg\n\t\tclass canopy_hide\n\t\t{\n\t\t\ttype=\"hide\";\n\t\t\tsource=\"user\";\n\t\t\tselection=\"canopy_hide\";\n\t\t\tminValue = 0.0;\n\t\t\tmaxValue = 1.0;\n\t\t\tminPhase = 0.0;\n\t\t\tmaxPhase = 1.0;\n\t\t\tinitPhase = 0;\n\t\t\thideValue = 0.001;\n\t\t};\n\n\t\tclass ejection_seat_hide\n\t\t{\n\t\t\ttype=\"hide\";\n\t\t\tsource=\"user\";\n\t\t\tselection=\"ejection_seat\";\n\t\t\tminValue = 0.0;\n\t\t\tmaxValue = 1.0;\n\t\t\tminPhase = 0.0;\n\t\t\tmaxPhase = 1.0;\n\t\t\tinitPhase = 0;\n\t\t\thideValue = 0.001;\n\t\t}\n\n\t\tIn cfgVehicles >> class AnimationSources\n\t\tclass canopy_hide\n\t\t{\n\t\t\tsource = \"user\";\n\t\t\tanimPeriod = 0.001;\n\t\t\tinitPhase = 0;\n\t\t};\n\n\t\tclass ejection_seat_hide\n\t\t{\n\t\t\tsource = \"user\";\n\t\t\tanimPeriod = 0.001;\n\t\t\tinitPhase = 0;\n\t\t};\n\n\t\t5. Aircrfat model must have an animation for initial ejection stage, where new ejector seat with pilot is pushed gradualy out of cockpit (done to avaoid PhysX colisions and make this feature look good, rathre than spawnig ejetor seat above plane).\n\t\tNew ejector seat with pilot will be attached to this animation (via animated meory point).\n\t\tMemory point EjectionSeatPos must be part of this animated selection.\n\n\t\tIn model.cfg\n\t\tclass ejection_seat_motion\n\t\t{\n\t\t\ttype = \"translation\";\n\t\t\tsource = \"user\";\n\t\t\tselection = \"ejection_seat\";\n\t\t\tbegin = \"tns_ejection_seat\";\n\t\t\tend = \"tns_ejection_seat_e\";\n\t\t\tanimPeriod = 0;\n\t\t\tmemory = 1;\n\t\t\tminValue = 0.0;\n\t\t\tmaxValue = 1.0;\n\t\t\toffset0 = 0.0;\n\t\t\toffset1 = 3.0;\n\t\t};\n\n\t\tIn cfgVehicles >> class AnimationSources\n\t\tclass ejection_seat_motion\n\t\t{\n\t\t\tsource = \"user\";\n\t\t\tanimPeriod = 0.25;\n\t\t\tinitPhase = 0;\n\t\t};\n\n\t\t6. Ejector seat and canopy must be created/defined as separate objects. Can be reused.\n\n\tParameter(s):\n\t\t_this select 0: mode (Scalar)\n\t\t0: plane/object\n\n\t\tother parameters are gathered from configuration files.\n\n\tReturns: nothing\n\tResult: Pilot will be ejected from aircraft. Semi-authenthic behaviour.\n\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_planeEjection;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_planeEjection` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_planeEjection"
        },
        "configuration": {
            "label": "BIS_fnc_planeEjection",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Bravo Zero One development\n\t- John_Spartan\n\n\tDescription:\n\t- This function is designed as part of set of functions to implement semi-authenthic ejection system on fixed wing aircrfat that have such functionality enabled/configured.\n\t- Function created to add FX (sound/particles) for ejection feature.\n\n\tExucution:\n\t- Call from within the main ejection fnc (on demand).\n\n\t\tExample:\n\t\t[_plane, _ejectionSeat] spawn BIS_fnc_planeEjectionFX;\n\n\tRequirments:\n\t- Compatible ejector seat must have a hide animation for rocket motor flash and position for FX to be attached. (TO DO PARAMETARIZE)\n\t\tInehector seats model.cfg\n\t\tclass Animations\n\t\t{\n\n\t\t\tclass Rocket_Flash_hide\n\t\t\t{\n\t\t\t\ttype = \"hide\";\n\t\t\t\tsource = \"user\";\n\t\t\t\tselection = \"rocket_flash\";\n\t\t\t\tsourceAddress = \"mirror\";\n\t\t\t\tminValue = -1.5;\n\t\t\t\tmaxValue = 0;\n\t\t\t\thideValue = 0.99;\n\n\t\t\t};\n\t\t};\n\n\tParameter(s):\n\t\t_this select 0: mode (Scalar)\n\t\t0: plane/object\n\t\t1: ejector seat/object\n\n\tReturns: nothing\n\tResult: Set of particle FX and sound FX will be aplied to ejection feature.\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_planeEjectionFX;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_planeEjectionFX` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_planeEjectionFX"
        },
        "configuration": {
            "label": "BIS_fnc_planeEjectionFX",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Play mission end music (when it is nearing the end)",
            "examples": [
                {
                    "text": "```sqf\ntrue call BIS_fnc_playEndMusic;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "play",
                            "description": "`Boolean` - `true` to play it, `false` to stop playing"
                        }
                    ],
                    "outline": "play call `BIS_fnc_playEndMusic`",
                    "returns": "`Boolean` - `true` when function is done"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_playEndMusic"
        },
        "configuration": {
            "label": "BIS_fnc_playEndMusic",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return current profile's name. Deprecated since Arma 3, use `profileName` instead.",
            "examples": [
                {
                    "text": "```sqf\nprivate _myPlayerName = call BIS_fnc_playerName;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_playerName`",
                    "returns": "`String` - `profileName`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_playerName"
        },
        "configuration": {
            "label": "BIS_fnc_playerName",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return representative faction of the given side. Faction of the first detected player is used.",
            "examples": [
                {
                    "text": "```sqf\nwest call BIS_fnc_playerSideFaction;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "side",
                            "description": "`Side`"
                        }
                    ],
                    "outline": "side call `BIS_fnc_playerSideFaction`",
                    "returns": "`String` - CfgFactionClasses class"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_playerSideFaction"
        },
        "configuration": {
            "label": "BIS_fnc_playerSideFaction",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Plays given song.",
            "examples": [
                {
                    "text": "```sqf\n[\"LeadTrack04_F\", 10, 0.5] call BIS_fnc_playMusic; // song starts at 10 seconds with 50% volume.\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "class",
                            "description": "`String` - classname of song"
                        },
                        {
                            "name": "start",
                            "description": "`Number` - time of start in seconds - Default: 0"
                        },
                        {
                            "name": "volume",
                            "description": "`Number` - music volume from 0 to 1 - Default: `musicVolume`"
                        }
                    ],
                    "outline": "[class,start,volume] call `BIS_fnc_playMusic`",
                    "returns": "`Boolean` - true"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_playMusic"
        },
        "configuration": {
            "label": "BIS_fnc_playMusic",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Plays given sound. Identical to `playSound`.",
            "examples": [
                {
                    "text": "```sqf\n\"3DEN_visionMode\" call BIS_fnc_playSound;\n```"
                },
                {
                    "text": "```sqf\n[\"3DEN_visionMode\", true] call BIS_fnc_playSound;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "sound",
                            "description": "`String` - sound name"
                        },
                        {
                            "name": "forced",
                            "description": "`Boolean` - (Optional, default `false`)"
                        }
                    ],
                    "outline": "[sound, forced] call `BIS_fnc_playSound`",
                    "returns": "`Boolean` - always `true`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_playSound"
        },
        "configuration": {
            "label": "BIS_fnc_playSound",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Plays in-game video with a range of options. The function can be `call`ed or `spawn`ed. If `spawn`ed, `scriptDone` command can be used to see if video is stopped or finished. If `call`ed in scheduled environment, the next line of code will not process until the video is stopped or finished.\n\nThe function also calls `**\"BIS_fnc_playVideo_started\"}} and {{hl|\"BIS_fnc_playVideo_stopped\"**` Scripted Event Handlers in `missionNamespace` - see `BIS_fnc_addScriptedEventHandler` and [Arma 3: Scripted Event Handlers](https://community.bistudio.com/wiki/Arma%203%3A%20Scripted%20Event%20Handlers).\n\n**NOTE**: \n* to play the video on an object, e.g an in-game screen, see {{Link|#Example 3\n* the video can be stopped in a variety of ways - see {{Link|#Example 4}}\n* see [OGV File Format](https://community.bistudio.com/wiki/OGV%20File%20Format) for format and conversion information.\n}}",
            "examples": [
                {
                    "text": "```sqf\nprivate _video = [\"A3\\Missions_F_EPA\\video\\A_in_intro.ogv\"] spawn BIS_fnc_playVideo;\n```"
                },
                {
                    "text": "```sqf\nprivate _video = [\"\\a3\\missions_f_exp\\video\\exp_m04_v01.ogv\"] call BIS_fnc_playVideo;\n```"
                },
                {
                    "text": "```sqf\n\n_video = \"a3\\missions_f_exp\\video\\exp_m07_vout.ogv\";\n_screen = \"Land_TripodScreen_01_large_F\" createVehicle (player modelToWorld [0,10,0]);\n_screen setObjectTexture [0, _video];\n[_video, [10, 10]] call BIS_fnc_playVideo;\n\n```"
                },
                {
                    "text": "How to stop the video:\n* call or spawn the function with an empty string: \n```sqf\n[\"\"] call BIS_fnc_playVideo;\n```\n\n* call or spawn the function with another video: \n```sqf\n[\"\\a3\\missions_f_exp\\video\\exp_m04_v02.ogv\"] call BIS_fnc_playVideo;\n```\n\n* set the variable \"BIS_fnc_playVideo_skipVideo\" to `true`: \n```sqf\nmissionNamespace setVariable [\"BIS_fnc_playVideo_skipVideo\", true];\n```\n\n* set the custom skip variable (_skipVarName_) to `true`: \n```sqf\n\nmissionNamespace setVariable [\"MyCustomSkipVar\", true];\nsleep 1;\nmissionNamespace setVariable [\"MyCustomSkipVar\", nil]; // so it can be reused later\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "content",
                            "description": "`String` - full path to `**.ogv**` file"
                        },
                        {
                            "name": "size",
                            "description": "`Array` of `Number`s - (Optional, default [<nowiki/>`safeZoneX`, `safeZoneY`, `safeZoneW`, `safeZoneH`]) screen size in format [x, y, w, h]"
                        },
                        {
                            "name": "color",
                            "description": "`Array` of `Number`s - (Optional, default [1,1,1,1]) foreground color in format [r, g, b, a]"
                        },
                        {
                            "name": "skipVarName",
                            "description": "`String` - (Optional, default \"BIS_fnc_playVideo_skipVideo\") `missionNamespace` variable to skip the video when variable is `true`"
                        },
                        {
                            "name": "bgColor",
                            "description": "`Array` format [[Color|Color (RGBA)]] - (Optional, default: [0,0,0,1]) background color in format [r, g, b, a]"
                        },
                        {
                            "name": "keepAspect",
                            "description": "`Boolean` - (Optional, default `true`) `true` to keep original video aspect ratio (background color will fill the void), `false` to stretch"
                        }
                    ],
                    "outline": "[content, size, color, skipVarName, bgColor, keepAspect] spawn `BIS_fnc_playVideo`",
                    "returns": "`Boolean` - `true`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_playVideo"
        },
        "configuration": {
            "label": "BIS_fnc_playVideo",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Generate a {{Link|https://en.wikipedia.org/wiki/Universal_Transverse_Mercator_coordinate_system#UTM_zone|UTM Zone}}, Easting and Northing from lat and long fields.\nIt uses {{Link|https://en.wikipedia.org/wiki/North_American_Datum|NAD83 constants}}.",
            "examples": [
                {
                    "text": "```sqf\nprivate _utmZone = [47.63959,-122.127249] call BIS_fnc_posDegToUTM;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "longitude",
                            "description": "`Number`"
                        },
                        {
                            "name": "latitude",
                            "description": "`Number`"
                        },
                        {
                            "name": "zone",
                            "description": "`Number` - (Optional, default <sqf inline>31 + floor (_longitude / 6))"
                        }
                    ],
                    "outline": "[longitude, latitude_, zone_] call `BIS_fnc_posDegToUTM`",
                    "returns": "`Array` of `Number`s - format [easting, northing, zone]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_posDegToUTM"
        },
        "configuration": {
            "label": "BIS_fnc_posDegToUTM",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Convert latitude/longtitude coordinates into game world position.\n\nWorld config **must** contain following settings to convert the position correctly:\n```cpp\n// Required for scripting\nmapSize = 61440;\t// Can differ from mapArea size, as ingame world can be resized\nmapZone = 10;\t\t// UTM zone\nmapArea[] = {\t\t// lon/lat coordinates (not in UTM to assure .kml precision)\n\t-122.754367782585,47.3272454065969,\t// Bottom Left\n\t-121.930117859276,47.8753494907418\t// Top Right\n};\n```",
            "examples": [
                {
                    "text": "```sqf\n[47.63959,-122.127249] call BIS_fnc_posDegToWorld;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "longitude",
                            "description": "`Number`"
                        },
                        {
                            "name": "latitude",
                            "description": "`Number`"
                        },
                        {
                            "name": "world",
                            "description": "`String` - (Optional, default `worldName`)"
                        }
                    ],
                    "outline": "[longitude, latitude, world] call `BIS_fnc_posDegToWorld`",
                    "returns": "`Array` of `Number`s - format [easting, northing, zone]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_posDegToWorld"
        },
        "configuration": {
            "label": "BIS_fnc_posDegToWorld",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns [PositionAGL](https://community.bistudio.com/wiki/Position%23PositionAGL), unless passed argument is `Array`, then the same array is returned. When position is `Object` and alternative position is stored in `**\"BIS_fnc_position_forced\"**` variable on this object, the stored position is used rather than actual object position. This function is a pretty safe way to get the position of an entity.",
            "examples": [
                {
                    "text": "```sqf\nprivate _pos = player call BIS_fnc_position;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "argument",
                            "description": "could be one of:"
                        }
                    ],
                    "outline": "argument call `BIS_fnc_position`",
                    "returns": "`Array` - position in format `**[x, y]}} or {{hl|[x, y ,z]**`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_position"
        },
        "configuration": {
            "label": "BIS_fnc_position",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Converts array position to map grid position.\n{{Feature|obsolete|This function is replaced by `mapGridPosition`.|arma2|1.04}}",
            "examples": [
                {
                    "text": "```sqf\nplayer call BIS_fnc_posToGrid; // [\"046\", \"049\"]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "element",
                            "description": "`Object`, `Array` in format `Position` or `String` marker name"
                        }
                    ],
                    "outline": "element call `BIS_fnc_posToGrid`",
                    "returns": "`Array` of `String`s - format [\"X\", \"Y\"]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_posToGrid"
        },
        "configuration": {
            "label": "BIS_fnc_posToGrid",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Generate Lat and Long fields from {{Link|https://en.wikipedia.org/wiki/Universal_Transverse_Mercator_coordinate_system#UTM_zone|UTM Zone}}, Easting and Northing.\nIt uses {{Link|https://en.wikipedia.org/wiki/North_American_Datum|NAD83 constants}}.",
            "examples": [
                {
                    "text": "```sqf\n[5273702, 560561, 10] call BIS_fnc_posUTMToDeg;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "easting",
                            "description": "`Number`"
                        },
                        {
                            "name": "northing",
                            "description": "`Number`"
                        },
                        {
                            "name": "zone",
                            "description": "`Number`"
                        },
                        {
                            "name": "hemisphere",
                            "description": "`String` - (Optional, default \"N\") \"N\" for northern hemisphere, \"S\" for southern hemisphere"
                        }
                    ],
                    "outline": "[easting, northing, zone_, hemisphere_] call `BIS_fnc_posUTMToDeg`",
                    "returns": "`Array` of `Number`s - format [longitude, latitude]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_posUTMToDeg"
        },
        "configuration": {
            "label": "BIS_fnc_posUTMToDeg",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return value1 raised to the power of value2. Identical to [[a ^ b]]. **IMPORTANT**: Use [[a ^ b]] as it is 5 times faster.\n<!--",
            "examples": [
                {
                    "text": "```sqf\n[2, 10] call BIS_fnc_pow; // returns 2^10 = 1024\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "value1",
                            "description": "`Number`"
                        },
                        {
                            "name": "value2",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "[value1, value2] call `BIS_fnc_pow`",
                    "returns": "`Number` - _value1_ raised to the power of _value2_"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_pow"
        },
        "configuration": {
            "label": "BIS_fnc_pow",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Start automatic loading screen upon mission start.\nOn client, it will finish only when server is finished.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_preload;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_preload`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_preload"
        },
        "configuration": {
            "label": "BIS_fnc_preload",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Spawns random patrols and/or vehicles in trigger areas with proper names. Side selected in the triggers \"Activation\" listbox will determine the side of the spawned asset(s).\n\n\nTrigger **names** (a.k.a \"Trigger text\", **not** \"Variable Name\") defines the kind of spawn. Supported trigger names are:\n* **GEN_infantry**: spawns random infantry patrol with sentry waypoints (**NOTE:** only circular triggers are supported, min. axis should be 500m)\n* **GEN_patrolVeh**: spawns a random vehicle. If a civilian unit is synchronized with the trigger, its waypoint will be used by the spawned vehicle\n<!--\n-->You can specify the vehicle type by typing one of the following into the trigger's \"On Act.\" field:\n** car\n** apc\n** tank\n* **GEN_ammo**: spawns a random number of ammoboxes. You can get and idea of the shape this composition will have by making this trigger rectangular with dimensions 5m x 1m. You can also specify the amount of crates spawned by using min. and max. Timeout values (supported range is 1 to 6 crates).\n* **GEN_civilCar**: spawns a random empty civil car",
            "examples": [
                {
                    "text": "```sqf\n0.75 call BIS_fnc_prepareAO;\n```"
                },
                {
                    "text": "```sqf\ncall BIS_fnc_prepareAO;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "density",
                            "description": "`Number` - (Optional, default 1) enemy presence density index used for random footpatrols"
                        }
                    ],
                    "outline": "density call `BIS_fnc_prepareAO`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_prepareAO"
        },
        "configuration": {
            "label": "BIS_fnc_prepareAO",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Zozo\n\n\tDescription:\n\tGet the highest priority in the queue\n\n\tParameters:\n\t_handle:INT - Queue handle (get it with BIS_fnc_PriorityQueue_Init)\n\n\tReturns:\n\t_priority:SCALAR - the priority\n\n\tSyntax:\n\t_item:ANY = [_handle] call BIS_fnc_PriorityQueue_GetHighestPriority;\n\n\tExample:\n\t_myItem = [_priorityQueue_1] call BIS_fnc_PriorityQueue_PopItem;\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_priorityQueue_GetHighestPriority`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_priorityQueue_GetHighestPriority"
        },
        "configuration": {
            "label": "BIS_fnc_priorityQueue_GetHighestPriority",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Zozo\n\n\tDescription:\n\tGet the highest priority in the queue\n\n\tParameters:\n\t_handle:INT - Queue handle (get it with BIS_fnc_PriorityQueue_Init)\n\n\tReturns:\n\t_priority:SCALAR - the priority\n\n\tSyntax:\n\t_item:ANY = [_handle] call BIS_fnc_PriorityQueue_GetHighestPriority;\n\n\tExample:\n\t_myItem = [_priorityQueue_1] call BIS_fnc_PriorityQueue_PopItem;\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_priorityQueue_GetLowestPriority`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_priorityQueue_GetLowestPriority"
        },
        "configuration": {
            "label": "BIS_fnc_priorityQueue_GetLowestPriority",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Zozo\n\n\tDescription:\n\tInitialize the Priority Queue data structure.\n\tThe Priority Queue is sorted on inserting. Bigger numbers are set on higher indexes.\n\n\tParameters:\n\t_maxSize:INT - OPTIONAL, sets the Queue MAX SIZE (otherwise it is set to the constant defined in the .inc file)\n\n\tReturns:\n\t_handle: Handle to the Queue (essential for manipulation with the Queue)\n\n\tSyntax:\n\t_handle:INT = [_maxSize] call BIS_fnc_PriorityQueue_Init;\n\n\tExample:\n\t_priorityQueue_1 = [10] call BIS_fnc_PriorityQueue_Init;\n*</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_priorityQueue_Init`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_priorityQueue_Init"
        },
        "configuration": {
            "label": "BIS_fnc_priorityQueue_Init",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Zozo\n\n\tDescription:\n\tChecks if the Queue is empty\n\n\tParameters:\n\t_handle:INT - Queue handle (get it with BIS_fnc_PriorityQueue_Init)\n\n\tReturns:\n\t_empty:BOOL - true if the Queue is empty\n\n\tSyntax:\n\t_empty:BOOL = [_handle] call BIS_fnc_PriorityQueue_IsEmpty;\n\n\tExample:\n\t_isTheQueueEmpty = [_priorityQueue_1] call BIS_fnc_PriorityQueue_IsEmpty;\n*</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_priorityQueue_IsEmpty`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_priorityQueue_IsEmpty"
        },
        "configuration": {
            "label": "BIS_fnc_priorityQueue_IsEmpty",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Zozo\n\n\tDescription:\n\tChecks if the Queue is full\n\n\tParameters:\n\t_handle:INT - Queue handle (get it with BIS_fnc_PriorityQueue_Init)\n\n\tReturns:\n\t_full:BOOL - true if the Queue is full\n\n\tSyntax:\n\t_full:BOOL = [_handle] call BIS_fnc_PriorityQueue_IsFull;\n\n\tExample:\n\t_isTheQueueFull = [_priorityQueue_1] call BIS_fnc_PriorityQueue_IsFull;\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_priorityQueue_IsFull`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_priorityQueue_IsFull"
        },
        "configuration": {
            "label": "BIS_fnc_priorityQueue_IsFull",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Zozo\n\n\tDescription:\n\tPops the item with the highest priority from the Queue (item with highest index).\n\tThe item is removed from the Queue.\n\tComplexity: O(1)\n\n\tParameters:\n\t_handle:INT - Queue handle (get it with BIS_fnc_PriorityQueue_Init)\n\t_keep:BOOL - if true, the item is not removed from the Queue\n\n\tReturns:\n\t_item:ANY - the item stored in the Queue\n\n\tSyntax:\n\t_item:ANY = [_handle] call BIS_fnc_PriorityQueue_PopItem;\n\n\tExample:\n\t_myItem = [_priorityQueue_1] call BIS_fnc_PriorityQueue_PopItem;\n*</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_priorityQueue_PopItem`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_priorityQueue_PopItem"
        },
        "configuration": {
            "label": "BIS_fnc_priorityQueue_PopItem",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Zozo\n\n\tDescription:\n\tInserts item with a defined priority to the Queue\n\tThe Priority Queue is sorted on inserting. Bigger numbers are set on higher indexes.\n\tComplexity: O(n)\n\n\tParameters:\n\t_handle:INT - Queue handle (get it with BIS_fnc_PriorityQueue_Init)\n\t_item:ANY - item, can be whatever\n\t_priority:INT - the priority the item is inserted with\n\n\tReturns:\n\t_success:BOOL - true if item was inserted into the Queue, otherwise false\n\n\tSyntax:\n\t_success:BOOL = [_handle, _item, _priority] call BIS_fnc_PriorityQueue_InsertItem;\n\n\tExample:\n\t_s = [_priorityQueue_1, \"myItem\", 5] call BIS_fnc_PriorityQueue_InsertItem;\n*</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_priorityQueue_PushItem`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_priorityQueue_PushItem"
        },
        "configuration": {
            "label": "BIS_fnc_priorityQueue_PushItem",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Progress scripted loading screen. The value will be preserved even when a new screen is opened.",
            "examples": [
                {
                    "text": "```sqf\nprivate _IDD = _prog = [0.75] call BIS_fnc_progressLoadingScreen;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "progress",
                            "description": "`Number` - progress in range from 0 to 1"
                        }
                    ],
                    "outline": "[progress] call `BIS_fnc_progressLoadingScreen`",
                    "returns": "`Number` - progress"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_progressLoadingScreen"
        },
        "configuration": {
            "label": "BIS_fnc_progressLoadingScreen",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Pulsates a value from 0 to 1.",
            "examples": [
                {
                    "text": "```sqf\n200 call BIS_fnc_pulsate; // 0.113001\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "frequency",
                            "description": "`Number` - the frequency in Hz, 1 / _frequency = 0.1 second is the period"
                        }
                    ],
                    "outline": "[frequency] call `BIS_fnc_pulsate`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_pulsate"
        },
        "configuration": {
            "label": "BIS_fnc_pulsate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_quinticIn`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_quinticIn"
        },
        "configuration": {
            "label": "BIS_fnc_quinticIn",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_quinticInOut`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_quinticInOut"
        },
        "configuration": {
            "label": "BIS_fnc_quinticInOut",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_quinticInOutVector`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_quinticInOutVector"
        },
        "configuration": {
            "label": "BIS_fnc_quinticInOutVector",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_quinticInVector`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_quinticInVector"
        },
        "configuration": {
            "label": "BIS_fnc_quinticInVector",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_quinticOut`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_quinticOut"
        },
        "configuration": {
            "label": "BIS_fnc_quinticOut",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_quinticOutVector`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_quinticOutVector"
        },
        "configuration": {
            "label": "BIS_fnc_quinticOutVector",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Display a quotation video. \n[[File:A3 quotation.png|thumb]]",
            "examples": [
                {
                    "text": "```sqf\n[\"a3\\missions_f_mark\\video\\ffv.ogv\"] spawn BIS_fnc_quotations;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "videoPath",
                            "description": "`String` - path to video. "
                        },
                        {
                            "name": "nonEnglishSubtitle",
                            "description": "`String` - string, localised or not, used for subtitles that is only shown if the game's language is not English"
                        }
                    ],
                    "outline": "[videoPath, nonEnglishSubtitle] call `BIS_fnc_quotations`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_quotations"
        },
        "configuration": {
            "label": "BIS_fnc_quotations",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Red radial postprocess (hit damage, fire damage). Parameters are the same as the first four of [HandleDamage EH](https://community.bistudio.com/wiki/Arma_3%3A_Event_Handlers%23HandleDamage).",
            "examples": [
                {
                    "text": "```sqf\nplayer addEventHandler [\"HandleDamage\", { _this call BIS_fnc_radialRed; }];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "victim",
                            "description": "`Object` - unit who gets damage"
                        },
                        {
                            "name": "bodyPart",
                            "description": "`String` - body part which gets damage"
                        },
                        {
                            "name": "damage",
                            "description": "`Number` - received damage amount"
                        },
                        {
                            "name": "shooter",
                            "description": "`Object` - (Optional, default objNull) requested only if _bodyPart_ is not empty string"
                        }
                    ],
                    "outline": "[victim, bodyPart, damage, shooter] call `BIS_fnc_radialRed`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_radialRed"
        },
        "configuration": {
            "label": "BIS_fnc_radialRed",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Removes red radial postprocess (fire damage) created by `BIS_fnc_radialRed`.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_radialRedOut;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_radialRedOut`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_radialRedOut"
        },
        "configuration": {
            "label": "BIS_fnc_radialRedOut",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tSet a specific or random music channel.\n\n\tParameter(s):\n\t_this select 0: channel (String)\n\t_this select 1: next (Bool)\n\t_this select 2: override (Bool)\n\n\tReturns:\n\tBool\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_radioSetChannel;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_radioSetChannel` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_radioSetChannel"
        },
        "configuration": {
            "label": "BIS_fnc_radioSetChannel",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Set a random music playlist for the current set channel (default \"Rock\"). Musics with \"genre\" set in [[Description.ext#CfgMusic|CfgMusic]] are selected and shuffled.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_radioSetPlaylist;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_radioSetPlaylist`",
                    "returns": "`Array` of `String`s - created music playlist"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_radioSetPlaylist"
        },
        "configuration": {
            "label": "BIS_fnc_radioSetPlaylist",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tSet a specific or random music track.\n\n\tParameter(s):\n\t_this select 0: track (String)\n\t_this select 1: override (Bool)\n\t_this select 2: Bool (first track? -> start randomly within the track)\n\n\tReturns:\n\tArray (duration (s): Scalar, start time (s): Scalar)\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_radioSetTrack;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_radioSetTrack` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_radioSetTrack"
        },
        "configuration": {
            "label": "BIS_fnc_radioSetTrack",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return a random integer representing an index in the passed array.",
            "examples": [
                {
                    "text": "```sqf\n[\"a\", 0, objNull] call BIS_fnc_randomIndex; // returns 0, 1 or 2\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array` of `Anything`"
                        }
                    ],
                    "outline": "array call `BIS_fnc_randomIndex`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_randomIndex"
        },
        "configuration": {
            "label": "BIS_fnc_randomIndex",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns a random integer between the two passed numbers (inclusive). The order of parameters doesn't matter: it can be `**[min, max]}} or {{hl|[max, min]**`.",
            "examples": [
                {
                    "text": "```sqf\n[1, 3] call BIS_fnc_randomInt; // will return 1, 2 or 3\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "min",
                            "description": "`Number` - minimum value, included"
                        },
                        {
                            "name": "max",
                            "description": "`Number` - maximum value, included"
                        }
                    ],
                    "outline": "[min, max] call `BIS_fnc_randomInt`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_randomInt"
        },
        "configuration": {
            "label": "BIS_fnc_randomInt",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns a random (float) number between the two passed numbers. The order of parameters doesn't matter: it can be `**[min, max]}} or {{hl|[max, min]**`.",
            "examples": [
                {
                    "text": "```sqf\n[1, 3] call BIS_fnc_randomNum; // return a number between 1 and 3, including 1\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "min",
                            "description": "`Number` - minimum value, inclusive"
                        },
                        {
                            "name": "max",
                            "description": "`Number` - maximum value, exclusive"
                        }
                    ],
                    "outline": "[min, max] call `BIS_fnc_randomNum`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_randomNum"
        },
        "configuration": {
            "label": "BIS_fnc_randomNum",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Selects random position according to given params within given area",
            "examples": [
                {
                    "text": "```sqf\nprivate _randomPosMapNoWater = [] call BIS_fnc_randomPos;\n```"
                },
                {
                    "text": "```sqf\nprivate _randomPosMapNoWater = [nil, [\"water\"]] call BIS_fnc_randomPos;\n```"
                },
                {
                    "text": "```sqf\nprivate _randomPosMapNoLand = [nil, [\"ground\"]] call BIS_fnc_randomPos;\n```"
                },
                {
                    "text": "```sqf\nprivate _randomPosMap = [nil, []] call BIS_fnc_randomPos;\n```"
                },
                {
                    "text": "```sqf\nprivate _randomPosAroundPlayer = [[[position player, 50]], []] call BIS_fnc_randomPos;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "whitelist",
                            "description": "`Array` - whitelisted areas. If not given, whole map is used. Areas can be:"
                        },
                        {
                            "name": "blacklist",
                            "description": "`Array` - (Optional, default <sqf inline>[]) blacklisted areas. If not given, water is blacklisted. Areas can be:"
                        },
                        {
                            "name": "code",
                            "description": "`Code` - (Optional, default <sqf inline>{ true }) custom condition which should return true for current position candidate passed in [_this](https://community.bistudio.com/wiki/Magic%20Variables%23this) variable to be accepted. If not specified all candidates are accepted"
                        }
                    ],
                    "outline": "[whitelist, blacklist, code] call `BIS_fnc_randomPos`",
                    "returns": "`Array` - position candidate in format [x,y,z] or [0,0] if position cannot be found"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_randomPos"
        },
        "configuration": {
            "label": "BIS_fnc_randomPos",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns random 2D position inside the intersection of two circles. [-1,-1] is returned if the circles do not intersect.",
            "examples": [
                {
                    "text": "```sqf\n[trigger1, trigger2, 0.75, 0.75] call BIS_fnc_randomPosIntersection;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "firstCircle",
                            "description": "`Object`, `String` or `Array` - first circle. Can be a trigger, a marker or an array in form "
                        },
                        {
                            "name": "secondCircle",
                            "description": "`Object`, `String` or `Array` - second circle. Same as above."
                        },
                        {
                            "name": "positioning1",
                            "description": "`Number` - (Optional, default -1) if a value between 0 and 1 is passed (0 and 1 included), then a gaussian distribution is used. This will influence the random position along the axis which connects the two circles' centers. A lower value means the position will be close to the first circle"
                        },
                        {
                            "name": "positioning2",
                            "description": "`Number` - (Optional, default -1) if a value between 0 and 1 is passed (0 and 1 included), then a gaussian distribution is used. This will influence the random position along the axis perpendicular to the axis which connects the two circles' centers"
                        }
                    ],
                    "outline": "[firstCircle, secondCircle, positioning1, positioning2] call `BIS_fnc_randomPosIntersection`",
                    "returns": "`Array` - 2D Position"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_randomPosIntersection"
        },
        "configuration": {
            "label": "BIS_fnc_randomPosIntersection",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Selects random position within trigger, marker, location area or area defined by array",
            "examples": [
                {
                    "text": "```sqf\nmarker1 call BIS_fnc_randomPosTrigger;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "param",
                            "description": "can be one of:"
                        }
                    ],
                    "outline": "param call `BIS_fnc_randomPosTrigger`",
                    "returns": "`Array` - random position in format [x,y,z]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_randomPosTrigger"
        },
        "configuration": {
            "label": "BIS_fnc_randomPosTrigger",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return information about military rank.\n\n\t1: STRING - requited data, can be one of following:\n\t\t\"displayName\" - full localized name (e.g. \"Major\")\n\t\t\"displayNameShort\" - short localized name (e.g. \"Maj.\")\n\t\t\"classname\" - system name (e.g. \"MAJOR\")\n\t\t\"texture\" - path to rank insignia",
            "examples": [
                {
                    "text": "```sqf\nprivate _shortRank = [player, \"displayNameShort\"] call BIS_fnc_rankParams;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "source",
                            "description": "`Number`, `String` or `Object` - can be one of:"
                        },
                        {
                            "name": "infoType",
                            "description": "`String` - can be one of:"
                        }
                    ],
                    "outline": "[source, infoType] call `BIS_fnc_rankParams`",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_rankParams"
        },
        "configuration": {
            "label": "BIS_fnc_rankParams",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Can be used to recompile functions.\n**NOTE**: As a security measure, functions are by default protected against rewriting during the mission. This restriction does **not** apply to:\n* missions previewed from the editor\n* missions with the following attribute in [[Description.ext]]: ```cpp\nallowFunctionsRecompile = 1;\n```",
            "examples": [
                {
                    "text": "```sqf\n[] call BIS_fnc_recompile;\n```"
                },
                {
                    "text": "```sqf\n[3] call BIS_fnc_recompile;\n```"
                },
                {
                    "text": "```sqf\n[\"BIS_fnc_spawnVehicle\"] call BIS_fnc_recompile;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode (Optional, default 0)",
                            "description": "* `String` - name of the function to be recompiled"
                        }
                    ],
                    "outline": "[mode] call `BIS_fnc_recompile`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_recompile"
        },
        "configuration": {
            "label": "BIS_fnc_recompile",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Enable revive on given unit. Revive system needs to be initialized and running.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_unit] call BIS_fnc_reenableRevive;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "player",
                            "description": "`Object` - affected player"
                        }
                    ],
                    "outline": "[player] call `BIS_fnc_reenableRevive`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_reenableRevive"
        },
        "configuration": {
            "label": "BIS_fnc_reenableRevive",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Refresh the communication menu variable.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_refreshCommMenu;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_refreshCommMenu`",
                    "returns": "`Boolean` - `true` if successful"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_refreshCommMenu"
        },
        "configuration": {
            "label": "BIS_fnc_refreshCommMenu",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Get individual cost of an object.\n**IMPORTANT**: This function is obsolete.",
            "examples": [
                {
                    "text": "```sqf\n[\"someClass\", true, 5] call BIS_fnc_registerCuratorObject;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "class",
                            "description": "`String` - object class"
                        },
                        {
                            "name": "status",
                            "description": "`Boolean` - `true` to show status"
                        },
                        {
                            "name": "status",
                            "description": "`Number` - default cost"
                        }
                    ],
                    "outline": "[class, status, cost] call `BIS_fnc_registerCuratorObject`",
                    "returns": "`Array` in format:\n# show\n# cost\n# cost"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_registerCuratorObject"
        },
        "configuration": {
            "label": "BIS_fnc_registerCuratorObject",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns the relative direction from object 1 to object/position 2. Return value is always in between 0 and 360.\n**Arma**: 3|Use `getRelDir` instead.",
            "examples": [
                {
                    "text": "```sqf\n[[0,0,0], player] call BIS_fnc_relativeDirTo;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "from",
                            "description": "`Object`"
                        },
                        {
                            "name": "to",
                            "description": "`Object` or `Array` format `Position`"
                        }
                    ],
                    "outline": "[from, to] call `BIS_fnc_relativeDirTo`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_relativeDirTo"
        },
        "configuration": {
            "label": "BIS_fnc_relativeDirTo",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns a position that is a specified distance and compass direction from the passed position or object.\n**Arma**: 3|In {{arma3 use `getPos`' [alternative syntax](https://community.bistudio.com/wiki/getPos%23Syntax%203) instead.}}",
            "examples": [
                {
                    "text": "```sqf\n[[0,0,0], 1000, 50] call BIS_fnc_relPos; // [766.044,642.788,0]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "origin",
                            "description": "`Object` or `Position` - object or position which should be used as initial point."
                        },
                        {
                            "name": "distance",
                            "description": "`Number` - distance from initial point"
                        },
                        {
                            "name": "direction",
                            "description": "`Number` - direction from the intial position"
                        }
                    ],
                    "outline": "[origin, distance, direction] call `BIS_fnc_relPos`",
                    "returns": "`Position`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_relPos"
        },
        "configuration": {
            "label": "BIS_fnc_relPos",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Place an object relative to another object, like a _setRelPos_ command.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_briefingTable, BIS_map, [0, -0.58, 0.857], 98] call BIS_fnc_relPosObject;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "parent",
                            "description": "`Object` - the parent object"
                        },
                        {
                            "name": "child",
                            "description": "`Object` - the child object"
                        },
                        {
                            "name": "relPos",
                            "description": "`Position` - _child_ position relative to _parent_"
                        },
                        {
                            "name": "direction",
                            "description": "`Number` - (Optional, default 0) direction of the child object"
                        }
                    ],
                    "outline": "[parent, child, relPos, direction] call `BIS_fnc_relPosObject`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_relPosObject"
        },
        "configuration": {
            "label": "BIS_fnc_relPosObject",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Exponentially inflated rational number between 0 and 1, with 1 being center and 0 being edge of the trigger. This function can be used to check where in a trigger area an object is. Is it near the border of the trigger area the number will go against 0.",
            "examples": [
                {
                    "text": "```sqf\n[myTrigger, player] call BIS_fnc_relScaledDist;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "referenceObject",
                            "description": "`Object`"
                        },
                        {
                            "name": "relativeObject",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "[referenceObject, relativeObject] call `BIS_fnc_relScaledDist`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_relScaledDist"
        },
        "configuration": {
            "label": "BIS_fnc_relScaledDist",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Removes all scripted event handler with given name.\nAdditionally \"ScriptedEventHandlerRemoved\" scripted EH is called for every removed event handler.\n**NOTE**: For a list of available scripted event handlers, see [Arma 3: Scripted Event Handlers](https://community.bistudio.com/wiki/Arma%203%3A%20Scripted%20Event%20Handlers).",
            "examples": [
                {
                    "text": "```sqf\n[missionNamespace, \"event\"] call BIS_fnc_removeAllScriptedEventHandlers;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "namespace",
                            "description": "`Namespace`, `Object`, `Group`, `Location`, `Boolean`, `Control` or `Display` - namespace in which handler is saved"
                        },
                        {
                            "name": "name",
                            "description": "`String` - handler name"
                        }
                    ],
                    "outline": "[namespace, name] call `BIS_fnc_removeAllScriptedEventHandlers`",
                    "returns": "`Boolean` - `false` if never existed, `true` otherwise"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_removeAllScriptedEventHandlers"
        },
        "configuration": {
            "label": "BIS_fnc_removeAllScriptedEventHandlers",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Remove an item from the [communication menu](https://community.bistudio.com/wiki/Arma_3_Communication_Menu).",
            "examples": [
                {
                    "text": "```sqf\n[player, 2] call BIS_fnc_removeCommMenuItem;\n```"
                },
                {
                    "text": "```sqf\n\nprivate _supportHeli = [player, \"Support_Request_CAS_Heli\"] call BIS_fnc_addCommMenuItem;\n[player, _supportHeli] call BIS_fnc_removeCommMenuItem;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "**owner**",
                            "description": "`Object` - object to which the item belongs to"
                        },
                        {
                            "name": "**itemID**",
                            "description": "`Number` - item ID returned by `BIS_fnc_addCommMenuItem` command"
                        }
                    ],
                    "outline": "[owner,itemID] call `BIS_fnc_removeCommMenuItem`",
                    "returns": "`Boolean` - true when the item was removed"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_removeCommMenuItem"
        },
        "configuration": {
            "label": "BIS_fnc_removeCommMenuItem",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Remove icon displayed in curator interface.",
            "examples": [
                {
                    "text": "```sqf\n[curatorModule, 5] call BIS_fnc_removeCuratorIcon;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - curator module"
                        },
                        {
                            "name": "id",
                            "description": "`Array` - icon ID returned by `BIS_fnc_addCuratorIcon` function"
                        }
                    ],
                    "outline": "[object, id] call `BIS_fnc_removeCuratorIcon`",
                    "returns": "`Boolean` - `true` when removed"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_removeCuratorIcon"
        },
        "configuration": {
            "label": "BIS_fnc_removeCuratorIcon",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Make destroyed curator objects non-editable.",
            "examples": [
                {
                    "text": "```sqf\n[curatorModule, [\"Man\"]] call BIS_fnc_removeDestroyedCuratorEditableObjects;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - curator module or objects to be removed after death"
                        },
                        {
                            "name": "parentClasses",
                            "description": "`Array` of `String`s - parent classes of objects to be removed (e.g., \"Man\")"
                        }
                    ],
                    "outline": "[object, parentClasses] call `BIS_fnc_removeDestroyedCuratorEditableObjects`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_removeDestroyedCuratorEditableObjects"
        },
        "configuration": {
            "label": "BIS_fnc_removeDestroyedCuratorEditableObjects",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Removes an item from pair array, modifying or not the original array.",
            "examples": [
                {
                    "text": "```sqf\nprivate _pairs = [[[\"apple\", 3], [\"pear\", 2]], \"pear\"];\n[_pairs, \"pear\", true]\tcall BIS_fnc_removeFromPairs; // returns [<nowiki/>[\"apple\", 3]] - _pairs is not modified\n[_pairs, \"pear\"]\t\tcall BIS_fnc_removeFromPairs; // returns [<nowiki/>[\"apple\", 3]] - _pairs is now [<nowiki/>[\"apple\", 3]]\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array` - array to search through"
                        },
                        {
                            "name": "key",
                            "description": "`String` - key to search for"
                        },
                        {
                            "name": "copyArray",
                            "description": "`Boolean` - (Optional, default `false`) `true` to copy the array and return it, `false` to modify the original array"
                        }
                    ],
                    "outline": "[array, key, copyArray] call `BIS_fnc_removeFromPairs`",
                    "returns": "`Array` - resulting modified array or a copy"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_removeFromPairs"
        },
        "configuration": {
            "label": "BIS_fnc_removeFromPairs",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Takes an array, and returns a new array with the specified index(es) removed.\nThis takes the array passed in the first parameter, and returns an array that has the index number in the second parameter removed.\nIf a third parameter is passed, then a range of indexes will be removed.\nAlternatively, an array of indices to remove can be passed in the second parameter.\n\n**Arma**: 3|Use `deleteAt` or `deleteRange` instead.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _array = [0,1,2,3,4];\n[array, 0] call BIS_fnc_removeIndex; // returns [1,2,3,4]\n\n```"
                },
                {
                    "text": "```sqf\n\nprivate _array = [0,1,2,3,4];\n[_array, 0, 4] call BIS_fnc_removeIndex; // returns []\n\n```"
                },
                {
                    "text": "```sqf\n\nprivate _array = [0,1,2,3,4];\n[_array, [0,4]] call BIS_fnc_removeIndex; // returns [1,2,3]\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array`"
                        },
                        {
                            "name": "startIndex",
                            "description": "`Number` - start index to be removed, if {{Link|#Parameter 3}} is not provided, only this index is removed"
                        },
                        {
                            "name": "endIndex",
                            "description": "`Number` - (Optional, default `Nothing`) -  end index, if provided the indexs from startIndex to endIndex will be removed"
                        },
                        {
                            "name": "array",
                            "description": "`Array`"
                        },
                        {
                            "name": "indices",
                            "description": "`Array` of `Number`s - indices to be removed"
                        }
                    ],
                    "outline": "[array, indices] call `BIS_fnc_removeIndex`",
                    "returns": "`Array` - new array with new values"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_removeIndex"
        },
        "configuration": {
            "label": "BIS_fnc_removeIndex",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Function to remove an item in a nested array. Modifies the array by reference.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _array = [[1, 2], [3, 3, 4]];\nprivate _success = [_array, 3] call BIS_fnc_removeNestedElement; // _array is now [[1, 2], [4]]\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array`"
                        },
                        {
                            "name": "itemToRemove",
                            "description": "`Anything`"
                        }
                    ],
                    "outline": "[array, itemToRemove] call `BIS_fnc_removeNestedElement`",
                    "returns": "`Boolean` - `true` on success, `false` on failure"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_removeNestedElement"
        },
        "configuration": {
            "label": "BIS_fnc_removeNestedElement",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Remove a respawn inventory added by `BIS_fnc_addRespawnInventory`.",
            "examples": [
                {
                    "text": "```sqf\n[west, 1] call BIS_fnc_removeRespawnInventory;\n```"
                },
                {
                    "text": "```sqf\n\nprivate _myRespawnInventory = [missionNamespace,\"ATSniper\"] call BIS_fnc_addRespawnInventory;\n_myRespawnInventory call BIS_fnc_removeRespawnInventory;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Namespace`, `Side`, `Group` or `Object`"
                        },
                        {
                            "name": "id",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "[target, id] call `BIS_fnc_removeRespawnInventory`",
                    "returns": "`Boolean`"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_removeRespawnInventory"
        },
        "configuration": {
            "label": "BIS_fnc_removeRespawnInventory",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Remove a respawn position added by `BIS_fnc_addRespawnPosition`.",
            "examples": [
                {
                    "text": "```sqf\n[west, 1] call BIS_fnc_removeRespawnPosition;\n```"
                },
                {
                    "text": "```sqf\n\nmyRespawn = [missionNamespace,\"arena\"] call BIS_fnc_addRespawnPosition;\nmyRespawn call BIS_fnc_removeRespawnPosition;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "**target**",
                            "description": "`Namespace`, `Side`, `Group` or `Object`"
                        },
                        {
                            "name": "**id**",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "[target, id] call `BIS_fnc_removeRespawnPosition`",
                    "returns": "`Boolean`"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_removeRespawnPosition"
        },
        "configuration": {
            "label": "BIS_fnc_removeRespawnPosition",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Removes scripted event handler with given name and id.\nAdditionally \"ScriptedEventHandlerRemoved\" scripted EH is called.\n**NOTE**: For a list of available scripted event handlers, see [Arma 3: Scripted Event Handlers](https://community.bistudio.com/wiki/Arma%203%3A%20Scripted%20Event%20Handlers).",
            "examples": [
                {
                    "text": "```sqf\n[missionNamespace, \"event\", 2] call BIS_fnc_removeScriptedEventHandler;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "namespace",
                            "description": "`Namespace`, `Object`, `Group`, `Location`, `Boolean`, `Control` or `Display` - namespace in which handler is saved"
                        },
                        {
                            "name": "name",
                            "description": "`String` - handler name"
                        },
                        {
                            "name": "id",
                            "description": "`Number` - EH id"
                        }
                    ],
                    "outline": "[namespace, name, id] call `BIS_fnc_removeScriptedEventHandler`",
                    "returns": "`Boolean` - `true` if removed, `false` if didn't exist"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_removeScriptedEventHandler"
        },
        "configuration": {
            "label": "BIS_fnc_removeScriptedEventHandler",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Removes a stacked event handler with specified custom id.",
            "examples": [
                {
                    "text": "```sqf\n[\"someId\", \"onEachFrame\"] call BIS_fnc_removeStackedEventHandler;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "key",
                            "description": "`String` - custom id, a unique identifier, also returned by `BIS_fnc_addStackedEventHandler`"
                        },
                        {
                            "name": "event",
                            "description": "`String` - event handler name, see `BIS_fnc_addStackedEventHandler` fr supported event handlers"
                        }
                    ],
                    "outline": "[id, event] call `BIS_fnc_removeStackedEventHandler`",
                    "returns": "`Boolean` - `true` on success, `false` on failure"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_removeStackedEventHandler"
        },
        "configuration": {
            "label": "BIS_fnc_removeStackedEventHandler",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Removes support types during a mission.",
            "examples": [
                {
                    "text": "```sqf\n[requesterMod, providerMod] call BIS_fnc_removeSupportLink;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "requester",
                            "description": "`Object` - requester module"
                        },
                        {
                            "name": "provider",
                            "description": "`Object` - provider module"
                        }
                    ],
                    "outline": "[requester, provider] call `BIS_fnc_removeSupportLink`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_removeSupportLink"
        },
        "configuration": {
            "label": "BIS_fnc_removeSupportLink",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Remove virtual backpacks from an object (e.g., ammo box). Virtual items can be selected in the `Arsenal`.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_ammoBox, [\"class_1\",\"class_2\"], true] call BIS_fnc_removeVirtualBackpackCargo;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - object from which items will be removed"
                        },
                        {
                            "name": "backpackClasses",
                            "description": "`Boolean`, `String` or `Array` of `String`s - backpack classes"
                        },
                        {
                            "name": "removeGlobally",
                            "description": "`Boolean` - (Optional, default `false`) `true` to remove items globally"
                        }
                    ],
                    "outline": "[object,backpackClasses,removeGlobally] call `BIS_fnc_removeVirtualBackpackCargo`",
                    "returns": "`Array` of [arrays](https://community.bistudio.com/wiki/Array) - all virtual items in objects's space in format:\n*0: `Array` - Items\n*1: `Array` - Weapons\n*2: `Array` - Magazines\n*3: `Array` - Backpacks"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_removeVirtualBackpackCargo"
        },
        "configuration": {
            "label": "BIS_fnc_removeVirtualBackpackCargo",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Remove virtual items from an object (e.g., ammo box). Virtual items can be selected in the `Arsenal`.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_ammoBox, [\"class_1\",\"class_2\"], true] call BIS_fnc_removeVirtualItemCargo;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - object from which items will be removed"
                        },
                        {
                            "name": "itemClasses",
                            "description": "`Boolean`, `String` or `Array` of `String`s - item classes"
                        },
                        {
                            "name": "removeGlobally",
                            "description": "`Boolean` - (Optional, default `false`) `true` to remove items globally"
                        }
                    ],
                    "outline": "[object,itemClasses,removeGlobally] call `BIS_fnc_removeVirtualItemCargo`",
                    "returns": "`Array` of [arrays](https://community.bistudio.com/wiki/Array) - all virtual items in objects's space in format:\n*0: `Array` - Items\n*1: `Array` - Weapons\n*2: `Array` - Magazines\n*3: `Array` - Backpacks"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_removeVirtualItemCargo"
        },
        "configuration": {
            "label": "BIS_fnc_removeVirtualItemCargo",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Remove virtual magazines from an object (e.g., ammo box). Virtual items can be selected in the `Arsenal`.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_ammoBox, [\"class_1\", \"class_2\"], true] call BIS_fnc_removeVirtualMagazineCargo;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - object from which items will be removed"
                        },
                        {
                            "name": "magClasses",
                            "description": "`Boolean`, `String` or `Array` of `String`s - magazine classes"
                        },
                        {
                            "name": "removeGlobally",
                            "description": "`Boolean` - (Optional, default `false`) `true` to remove items globally"
                        }
                    ],
                    "outline": "[object, magClasses, removeGlobally] call `BIS_fnc_removeVirtualMagazineCargo`",
                    "returns": "`Array` of `Array`s of all virtual items in objects's space in format [items, weapons, magazines, backpacks]<!--:\n* 0: `Array` - Items\n* 1: `Array` - Weapons\n* 2: `Array` - Magazines\n* 3: `Array` - Backpacks\n-->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_removeVirtualMagazineCargo"
        },
        "configuration": {
            "label": "BIS_fnc_removeVirtualMagazineCargo",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Remove virtual weapons from an object (e.g., ammo box). Virtual items can be selected in the `Arsenal`.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_ammoBox, [\"class_1\",\"class_2\"], true] call BIS_fnc_removeVirtualWeaponCargo;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - object from which items will be removed"
                        },
                        {
                            "name": "weaponClasses",
                            "description": "`Boolean`, `String` or `Array` of `String`s - weapon classes"
                        },
                        {
                            "name": "removeGlobally",
                            "description": "`Boolean` - (Optional, default `false`) `true` to remove items globally"
                        }
                    ],
                    "outline": "[object,weaponClasses,removeGlobally] call `BIS_fnc_removeVirtualWeaponCargo`",
                    "returns": "`Array` of [arrays](https://community.bistudio.com/wiki/Array) - all virtual items in objects's space in format:\n*0: `Array` - Items\n*1: `Array` - Weapons\n*2: `Array` - Magazines\n*3: `Array` - Backpacks"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_removeVirtualWeaponCargo"
        },
        "configuration": {
            "label": "BIS_fnc_removeVirtualWeaponCargo",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Replaces a normal object with a [Simple Object](https://community.bistudio.com/wiki/Arma%203%3A%20Simple%20Objects).\nObject must not contain any crew and must be placed on the ground.\n**NOTE**: \n* Useful if you do not have access to simple object adjustment data - e.g. in case of unsupported/discontinued asset.\n* All official assets have the adjustment data defined in config.",
            "examples": [
                {
                    "text": "```sqf\n[tank] call BIS_fnc_replaceWithSimpleObject;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - the object that will be replaced by a simple object"
                        }
                    ],
                    "outline": "[object] call `BIS_fnc_replaceWithSimpleObject`",
                    "returns": "`Object` - the created [Simple Object](https://community.bistudio.com/wiki/Arma%203%3A%20Simple%20Objects)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_replaceWithSimpleObject"
        },
        "configuration": {
            "label": "BIS_fnc_replaceWithSimpleObject",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Resize marker. Use either absolute values or proportional values.",
            "examples": [
                {
                    "text": "```sqf\n[\"BIS_marker\",[2,2],3] spawn BIS_fnc_resizeMarker;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "marker",
                            "description": "`String` - marker"
                        },
                        {
                            "name": "size",
                            "description": "`Array` - (Optional, default [1,1]) array in form of:"
                        },
                        {
                            "name": "duration",
                            "description": "`Number` - (Optional, default 1) duration of the transition"
                        }
                    ],
                    "outline": "[marker, size, duration] spawn `BIS_fnc_resizeMarker`",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_resizeMarker"
        },
        "configuration": {
            "label": "BIS_fnc_resizeMarker",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Handles respawn camps functionality. Whoever \"assembles\" a camp from backpack it will receive a new respawn position. When backpack object has 'respawnNearbyPlayers' attribute set to 1, nearby players will receive the respawn position as well.\n**IMPORTANT**: Only for use with respawn camp event handlers!",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`String` - mode"
                        },
                        {
                            "name": "arguments",
                            "description": "`Array` - mode arguments"
                        }
                    ],
                    "outline": "[] call `BIS_fnc_respawnBackpack`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_respawnBackpack"
        },
        "configuration": {
            "label": "BIS_fnc_respawnBackpack",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**NOTE**: This function contains no code.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_respawnBase`; -->",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_respawnBase"
        },
        "configuration": {
            "label": "BIS_fnc_respawnBase",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Shows a message box which the user needs to accept in order to respawn.",
            "examples": [
                {
                    "text": "```sqf\n[3] spawn BIS_fnc_respawnConfirm;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "respawnDelay",
                            "description": "`Number` - (Optional, default 3) respawn delay"
                        }
                    ],
                    "outline": "[respawnDelay] spawn `BIS_fnc_respawnConfirm`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_respawnConfirm"
        },
        "configuration": {
            "label": "BIS_fnc_respawnConfirm",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Set or execute respawn counter params.",
            "examples": [
                {
                    "text": "```sqf\n[\"Some text\", 2] call BIS_fnc_respawnCounter;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "text",
                            "description": "`String` - text displayed below the respawn counter"
                        },
                        {
                            "name": "colour",
                            "description": "`Number` - (Optional, default 0) can be:"
                        }
                    ],
                    "outline": "[text,colour] call `BIS_fnc_respawnCounter`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_respawnCounter"
        },
        "configuration": {
            "label": "BIS_fnc_respawnCounter",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "End a mission if all players are dead _and_ there are no more respawn tickets (if any).\n* **Standard syntax** is for when [[Description.ext#respawn|Respawn]] is \"NONE\", \"BIRD\", \"GROUP\" or \"SIDE\"\n* **Alternative syntax** is for when [[Description.ext#respawn|Respawn]] is \"INSTANT\" or \"BASE\"\n  **IMPORTANT**: Only works in Multiplayer!",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_respawnEndMission;\n```"
                },
                {
                    "text": "```sqf\nplayer call BIS_fnc_respawnEndMission;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "unit call `BIS_fnc_respawnEndMission`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_respawnEndMission"
        },
        "configuration": {
            "label": "BIS_fnc_respawnEndMission",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Camera script used by the \"group respawn\" template - when the player dies and gets transferred to the new group member.",
            "examples": [
                {
                    "text": "```sqf\n\n// in onPlayerRespawn.sqf\nparams [\"_newUnit\", \"_oldUnit\", \"_respawn\", \"_respawnDelay\"];\n[_oldUnit, _newUnit] spawn BIS_fnc_respawnGroup;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "oldUnit",
                            "description": "`Object`"
                        },
                        {
                            "name": "newUnit",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "[oldUnit, newUnit] call `BIS_fnc_respawnGroup`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_respawnGroup"
        },
        "configuration": {
            "label": "BIS_fnc_respawnGroup",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**NOTE**: This file contains no code.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_respawnInstant`; -->",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_respawnInstant"
        },
        "configuration": {
            "label": "BIS_fnc_respawnInstant",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>\n/*******************************************************************************\n\tVersion:\t2.0\n\tName:\t\tRespawn manager\n\tDESCRIPTION:\tAll checkpoints must be markers with name prefix BIS_checkpointnr  \n\tPARAMETERS:\t1) function called - string, list of functions:\n\t\t\t\t- Init\n\t\t\t\t- Destroy\n\t\t\t\t- AddCheckpoint\n\t\t\t\t- RemoveCheckpoint\t\t\t\n\t\t\t2) parameter for the function\n\t\t\tFor more information see https://wiki.bistudio.com/index.php/RespawnManager\n\tRETURNED VALUE: depends on the function called\n\t\n\tTODO:\t\t-performance: add markers positions to the array instead of the testing \n\t\t\ttheir positions every loop in _CheckNearestCheckpoint function - DONE\n\t\t\t-pridat funkci GetActualCheckpoint(character) - DONE \n\t\t\t-osetrit pripad, kdy postava neexistuje (je prave v respawnu/zahynula) - NEPOTREBUJEME\n\t\t\t-typy markeru podle modu: normal/debug - DONE\n\t\t\t-optional parameter marker name - DONE\n\t\t\t-optional prefix marker name as a parameter to the Init procedure\n\t\t\t-add functionality for 3 parameters function call - DONE\n\t\t\t-vlastni lokalni checkpointy(markery) pro hratelne postavy(AddCheckpoint/RemoveCheckpoint)\n*******************************************************************************/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_respawnManager;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_respawnManager` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_respawnManager"
        },
        "configuration": {
            "label": "BIS_fnc_respawnManager",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Handles respawn inventory menu.",
            "examples": [
                {
                    "text": "```sqf\n[player,5] call BIS_fnc_respawnMenuInventory;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "player",
                            "description": "`Object` - player unit"
                        },
                        {
                            "name": "respawnDelay",
                            "description": "`Number` - (Optional, default 3) respawn delay"
                        },
                        {
                            "name": "revive",
                            "description": "`Boolean` - (Optional, default `false`) if unit was revived"
                        }
                    ],
                    "outline": "[player, respawnDelay, revive] call `BIS_fnc_respawnMenuInventory`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_respawnMenuInventory"
        },
        "configuration": {
            "label": "BIS_fnc_respawnMenuInventory",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Shows respawn menu. Closes it if the player is alive.",
            "examples": [
                {
                    "text": "```sqf\n[player,5] call BIS_fnc_respawnMenuPosition;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "player",
                            "description": "`Object` - player unit"
                        },
                        {
                            "name": "respawnDelay",
                            "description": "`Number` - (Optional, default 3) respawn delay"
                        },
                        {
                            "name": "revive",
                            "description": "`Boolean` - (Optional, default `false`) if unit was revived"
                        }
                    ],
                    "outline": "[player, respawnDelay, revive] call `BIS_fnc_respawnMenuPosition`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_respawnMenuPosition"
        },
        "configuration": {
            "label": "BIS_fnc_respawnMenuPosition",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Handles the spectator mode.",
            "examples": [
                {
                    "text": "```sqf\n[player,5] call BIS_fnc_respawnMenuSpectator;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "player",
                            "description": "`Object` - player unit"
                        },
                        {
                            "name": "respawnDelay",
                            "description": "`Number` - (Optional, default 3) respawn delay"
                        }
                    ],
                    "outline": "[player, respawnDelay] call `BIS_fnc_respawnMenuSpectator`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_respawnMenuSpectator"
        },
        "configuration": {
            "label": "BIS_fnc_respawnMenuSpectator",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Create a death screen.",
            "examples": [
                {
                    "text": "```sqf\n[player, someUnit] spawn BIS_fnc_respawnNone;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "killed",
                            "description": "`Object` - killed unit (`player`)"
                        },
                        {
                            "name": "killer",
                            "description": "`Object` - any unit"
                        }
                    ],
                    "outline": "[killed, killer] spawn `BIS_fnc_respawnNone`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_respawnNone"
        },
        "configuration": {
            "label": "BIS_fnc_respawnNone",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tDisable respawn until players of only one side (including its allies) remains, then respawn everyone at once.\n\tWhen \"Rounds\" respawn is used by only one side, wait until all its players are dead.\n\n\tParameter(s):\n\t\tBOOL - true to force round end\n\t\tSIDE - use any side to return side affected by round system (based on description.ext respawnTemplates settings)\n\t\tARRAY - empty array to return if a round is still on (players of more than one involved faction are alive)\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_respawnRounds;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_respawnRounds` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_respawnRounds"
        },
        "configuration": {
            "label": "BIS_fnc_respawnRounds",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_respawnSeagull;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_respawnSeagull` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_respawnSeagull"
        },
        "configuration": {
            "label": "BIS_fnc_respawnSeagull",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_respawnSide;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_respawnSide` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_respawnSide"
        },
        "configuration": {
            "label": "BIS_fnc_respawnSide",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_respawnSpectator;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_respawnSpectator` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_respawnSpectator"
        },
        "configuration": {
            "label": "BIS_fnc_respawnSpectator",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Manage respawn tickets used by [Tickets](https://community.bistudio.com/wiki/Arma%203%3A%20Respawn%23Respawn%20Templates) respawn template.\n\n\nWhen player dies, number of tickets is decreased by 1. The most local tickets are always used. Example: When you first add tickets to player's side, they will be affected. If you later define tickets also to player's group, they will completely replace the side tickets.\n\nWhen player runs out of the tickets, his respawn is disabled. If you use also _EndMission_ respawn template, the mission will automatically end once tickets in all name spaces are exhausted.",
            "examples": [
                {
                    "text": "Add 5 tickets for BLUFOR:\n\n```sqf\n[west, 5] call BIS_fnc_respawnTickets;\n```"
                },
                {
                    "text": "Return number of global tickets:\n\n```sqf\n_globalTickets = [missionNamespace] call BIS_fnc_respawnTickets;\n```"
                },
                {
                    "text": "Return number of player's tickets:\n\n```sqf\n_playerTickets = [player, nil, true] call BIS_fnc_respawnTickets;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "**target**",
                            "description": "Receiver of the respawn tickets. Can be of type:"
                        },
                        {
                            "name": "**tickets**",
                            "description": "`Number` - added respawn tickets. When missing or set to 0, number of tickets won't be affected, which means you can use the function to simply get amount of tickets."
                        },
                        {
                            "name": "**dynamicTarget**",
                            "description": "`Boolean` - when `true`, set/get tickets based on the target. **target** must be an `Object`."
                        }
                    ],
                    "outline": "[] call `BIS_fnc_respawnTickets`",
                    "returns": "`Number` - remaining tickets in all name spaces"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_respawnTickets"
        },
        "configuration": {
            "label": "BIS_fnc_respawnTickets",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tSet or execute respawn time penalty\n\n\tParameter(s):\n\t\t0: CODE - penalty condition\n\t\t1: NUMBER - penalty delay\n\t\t2: TEXT - text displayed when penalty is in effect\n\n\tReturns:\n\tBOOL\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_respawnTimePenalty;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_respawnTimePenalty` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_respawnTimePenalty"
        },
        "configuration": {
            "label": "BIS_fnc_respawnTimePenalty",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_respawnWave;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_respawnWave` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_respawnWave"
        },
        "configuration": {
            "label": "BIS_fnc_respawnWave",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "RESpect - The Effective Calculation Process.",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`String` - **case-sensitive**, can be one of \"SET\", \"ADD\", \"MODIFY\", \"KILLED\""
                        },
                        {
                            "name": "depending on _mode_",
                            "description": "* \"SET\" - set respect default values"
                        }
                    ],
                    "outline": "[mode, param1, param2, param3] call `BIS_fnc_respect`",
                    "returns": "* \"SET\": `Array` with zero respect values  (if `Object` is passed as argument, 1 is on place of object's faction)\n* \"ADD\": unit's respect values\n* \"MODIFY\": modified respect value\n* \"KILLED\": modified town respect value"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_respect"
        },
        "configuration": {
            "label": "BIS_fnc_respect",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns all subclasses within given class.",
            "examples": [
                {
                    "text": "```sqf\n[configFile >> \"CfgFunctions\", 2] call BIS_fnc_returnChildren; // returns config paths of all functions\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "config",
                            "description": "`Config` - class which is searched"
                        },
                        {
                            "name": "depth",
                            "description": "`Number` - depth, (0 = return only subclasses, 1 = return subclasses of subclasses, and so on..."
                        },
                        {
                            "name": "lastTier",
                            "description": "`Boolean` - (Optional, default `true`) `false` to return only the last one, `true` to return all classes"
                        },
                        {
                            "name": "firstTier",
                            "description": "`Boolean` - (Optional, default `true`) `true` to return the first class, `false` to return only the last one"
                        }
                    ],
                    "outline": "[config, depth, lastTier, firstTier] call `BIS_fnc_returnChildren`",
                    "returns": "`Array` - classes"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_returnChildren"
        },
        "configuration": {
            "label": "BIS_fnc_returnChildren",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Explores parent classes in the run-time config for the value of a config entry.",
            "examples": [
                {
                    "text": "```sqf\n[configfile >> \"Cfg3DEN\" >> \"Attributes\" >> \"ActivationType\",\"idc\"] call BIS_fnc_returnConfigEntry;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "config",
                            "description": "`Config` - starting config"
                        },
                        {
                            "name": "attribute",
                            "description": "`String` - config attribute to be returned"
                        },
                        {
                            "name": "defaultValue",
                            "description": "`Anything` - (Optional, default `Nothing`) value to be returned if attribute is not existent"
                        }
                    ],
                    "outline": "[config,attribute,defaultValue] call `BIS_fnc_returnConfigEntry`",
                    "returns": "`Array`, `String` or `Number` - attribute value"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_returnConfigEntry"
        },
        "configuration": {
            "label": "BIS_fnc_returnConfigEntry",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>\n/*\n\tFile: returnGroupComp.sqf\n\n\tDescription:\n\tFunction which returns a logical group composition based on a number of parameters.\n\n\tParameter(s):\n\t_this select 0: side (Side).\n\t_this select 1: number of characters (Number).\n\t_this select 2: (optional) type (String):\n\t\t- \"riflesquad\": (default) standard rifle squad.\n\t\t- \"sniper\": sniper team.\n\n\tReturns:\n\tArray of Strings - object types.\n\t\n\tTODO: use CfgGroups instead?\n*/\n\n//Validate parameter count\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_returnGroupComposition;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_returnGroupComposition` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_returnGroupComposition"
        },
        "configuration": {
            "label": "BIS_fnc_returnGroupComposition",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Function to return an item at a path in an array.",
            "examples": [
                {
                    "text": "```sqf\nprivate _array = [[1, 2], [3, 4]];\n_value = [_array, [0, 1]] call BIS_fnc_returnNestedElement; // returns 2\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` of `Number`s"
                        }
                    ],
                    "outline": "[array, path] call `BIS_fnc_returnNestedElement`",
                    "returns": "`Anything` - `nil` if path is incorrect"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_returnNestedElement"
        },
        "configuration": {
            "label": "BIS_fnc_returnNestedElement",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns list of all parent classes.",
            "examples": [
                {
                    "text": "```sqf\n[configFile >> \"CfgVehicles\" >> \"Land_FirePlace_F\", true] call BIS_fnc_returnParents;\n//Returns [\"Land_FirePlace_F\",\"House_F\",\"House\",\"HouseBase\",\"NonStrategic\",\"Building\",\"Static\",\"All\"]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "config",
                            "description": "`Config` - starting config class"
                        },
                        {
                            "name": "onlyClassNames",
                            "description": "`Boolean` - (Optional, default `false`) `true` to return only class names"
                        }
                    ],
                    "outline": "[config, onlyClassNames] call `BIS_fnc_returnParents`",
                    "returns": "`Array` - list of all classes (including starting one)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_returnParents"
        },
        "configuration": {
            "label": "BIS_fnc_returnParents",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return the path to all turrets and sub-turrets in a vehicle.\n**Arma**: 3|Does not seem to work in {{arma3. Use `allTurrets` and `BIS_fnc_allTurrets` instead.}}",
            "examples": [
                {
                    "text": "```sqf\n[configFile >> \"CfgVehicles\" >> \"B_MBT_01_TUSK_F\"] call BIS_fnc_returnVehicleTurrets;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "configEntry",
                            "description": "`Config` - vehicle config entry"
                        }
                    ],
                    "outline": "[configEntry] call `BIS_fnc_returnVehicleTurrets`",
                    "returns": "`Array` - turret paths ([0], [0, 1] format)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_returnVehicleTurrets"
        },
        "configuration": {
            "label": "BIS_fnc_returnVehicleTurrets",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns true if unit is in general able to revive someone.",
            "examples": [
                {
                    "text": "```sqf\nprivate _canRevive = [medic,target] call BIS_fnc_reviveAllowed;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "medic",
                            "description": "`Object` - unit performing revive"
                        },
                        {
                            "name": "unit",
                            "description": "`Array` - unit that will be revived"
                        }
                    ],
                    "outline": "[medic, unit] call `BIS_fnc_reviveAllowed`",
                    "returns": "`Boolean` - returns `true` if possible, `false` is not"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_reviveAllowed"
        },
        "configuration": {
            "label": "BIS_fnc_reviveAllowed",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Make a unit bleed out over time while incapacitated.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_unit] call BIS_fnc_reviveBleedOut;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "player",
                            "description": "`Object` - unit that is bleeding out"
                        }
                    ],
                    "outline": "[player] call `BIS_fnc_reviveBleedOut`",
                    "returns": "`Boolean` - returns `true` if successful, `false` is not"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_reviveBleedOut"
        },
        "configuration": {
            "label": "BIS_fnc_reviveBleedOut",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Resets player's damage data and received damage.",
            "examples": [
                {
                    "text": "```sqf\n[player] call BIS_fnc_reviveDamageReset;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "player",
                            "description": "`Object` - player"
                        }
                    ],
                    "outline": "[player] call `BIS_fnc_reviveDamageReset`",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_reviveDamageReset"
        },
        "configuration": {
            "label": "BIS_fnc_reviveDamageReset",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Debug script for revive system.",
            "examples": [
                {
                    "text": "```sqf\n[1] call BIS_fnc_reviveDebug;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`Number` - mode, can be:"
                        }
                    ],
                    "outline": "[mode] call `BIS_fnc_reviveDebug`",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_reviveDebug"
        },
        "configuration": {
            "label": "BIS_fnc_reviveDebug",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nunit: Object - Object the event handler is assigned to\nhitSelection: String - Name of the selection where the unit was damaged\ndamage: Number - Resulting level of damage\nhitPartIndex: Number - hit index of the hit selection\nhitPoint: String - hit point Cfg name\nshooter: Object - shooter reference (to get instigator use getShotParents on projectile)\nprojectile: Object - the projectile that caused damage\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_reviveEhDammaged`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_reviveEhDammaged"
        },
        "configuration": {
            "label": "BIS_fnc_reviveEhDammaged",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Should be excuted by HandleDamage event handler. See example. Handles damage calculation.",
            "examples": [
                {
                    "text": "```sqf\n\nBIS_unit addEventHandler [\"HandleDamage\", \n{\n\t_this call BIS_fnc_reviveEhHandleDamage;\n}];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_reviveEhHandleDamage"
        },
        "configuration": {
            "label": "BIS_fnc_reviveEhHandleDamage",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Handles healing of unit. Unit gets fully healed after 10 seconds if current damage is smaller than initial damage, e.g. a medic healed the unit.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_unit] call BIS_fnc_reviveEhHandleHeal;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit to be healed"
                        }
                    ],
                    "outline": "[unit] call `BIS_fnc_reviveEhHandleHeal`",
                    "returns": "`Boolean` - if revive is enabled for given unit it always returns `false`, if revive is disabled it returns `Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_reviveEhHandleHeal"
        },
        "configuration": {
            "label": "BIS_fnc_reviveEhHandleHeal",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Should be called from Killed event handler. Handles what happens if unit dies if revive system is enabled.",
            "examples": [
                {
                    "text": "```sqf\nBIS_unit addEventHandler [\"Killed\", \n{\n _this call BIS_fnc_reviveEhKilled;\n}];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_reviveEhKilled"
        },
        "configuration": {
            "label": "BIS_fnc_reviveEhKilled",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Sets  unit's state to respawned. Should probably only be called on respawn event.",
            "examples": [
                {
                    "text": "```sqf\nBIS_unit call BIS_fnc_reviveEhRespawn;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit"
                        }
                    ],
                    "outline": "[unit] call `BIS_fnc_reviveEhRespawn`",
                    "returns": "`Boolean` - `true`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_reviveEhRespawn"
        },
        "configuration": {
            "label": "BIS_fnc_reviveEhRespawn",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns is revive is enabled or not for the unit.",
            "examples": [
                {
                    "text": "```sqf\nprivate _reviveEnabled = [BIS_unit] call BIS_fnc_reviveEnabled;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit that is checked"
                        }
                    ],
                    "outline": "[unit] call `BIS_fnc_reviveEhRespawn`",
                    "returns": "`Boolean` - `true` if enabled, `false` if not"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_reviveEnabled"
        },
        "configuration": {
            "label": "BIS_fnc_reviveEnabled",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns structured text that can be displayed in 'Hold Action' tech as animated unconscious state icon.",
            "examples": [
                {
                    "text": "```sqf\nprivate _structuredText = [BIS_unit] call BIS_fnc_reviveGet3dIcons;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unconscious unit"
                        }
                    ],
                    "outline": "[unit] call `BIS_fnc_reviveGet3dIcons`",
                    "returns": "[Structured Text](https://community.bistudio.com/wiki/Structured%20Text) - structured text with animated unconscious state 'Hold Action' icon."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_reviveGet3dIcons"
        },
        "configuration": {
            "label": "BIS_fnc_reviveGet3dIcons",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns structured text that can be displayed in 'Hold Action' tech as animated unconscious state icon.",
            "examples": [
                {
                    "text": "```sqf\nprivate _structuredText = [BIS_unit] call BIS_fnc_reviveGetActionIcon;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unconscious unit"
                        }
                    ],
                    "outline": "[unit] call `BIS_fnc_reviveGetActionIcon`",
                    "returns": "[Structured Text](https://community.bistudio.com/wiki/Structured%20Text) - structured text with animated unconscious state 'Hold Action' icon."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_reviveGetActionIcon"
        },
        "configuration": {
            "label": "BIS_fnc_reviveGetActionIcon",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Manage the adding, removing, and effects applied to 3D icons used for visualizing incapacitated units.",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`String` - mode"
                        },
                        {
                            "name": "unitVar",
                            "description": "`String` - (Optional, default \"\") unit variable"
                        }
                    ],
                    "outline": "[mode, unitVar] call `BIS_fnc_reviveIconControl`",
                    "returns": "`Boolean` - `true` if successful, `false` if not"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_reviveIconControl"
        },
        "configuration": {
            "label": "BIS_fnc_reviveIconControl",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Initialize the Revive system on all machines.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_reviveInit;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "returns": "`Boolean` - returns `true` if successful, otherwise `false`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_reviveInit"
        },
        "configuration": {
            "label": "BIS_fnc_reviveInit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Check if player can perform revive action on given unit.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_player] call BIS_fnc_reviveIsValid;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit to be checked"
                        }
                    ],
                    "outline": "[unit] call `BIS_fnc_reviveIsValid`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_reviveIsValid"
        },
        "configuration": {
            "label": "BIS_fnc_reviveIsValid",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Check if player can perform secure action on given unit.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_player] call BIS_fnc_reviveIsValidSecure;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit to be checked"
                        }
                    ],
                    "outline": "[unit] call `BIS_fnc_reviveIsValidSecure`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_reviveIsValidSecure"
        },
        "configuration": {
            "label": "BIS_fnc_reviveIsValidSecure",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Used to execute specific code locally on every client whenever \"being revived\" flag changes.",
            "examples": [
                {
                    "text": "```sqf\n[nil, true, squadLeader] call BIS_fnc_reviveOnBeingRevived;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "nil",
                            "description": "`Nothing` - _This parameter has not been implemented_"
                        },
                        {
                            "name": "flagState",
                            "description": "`Boolean` - (Optional, default `false`) flag state - `true` or `false`"
                        },
                        {
                            "name": "unit",
                            "description": "`Object` - unit to set the flag for"
                        }
                    ],
                    "outline": "[nil, flagState, unit] call `BIS_fnc_reviveOnBeingRevived`",
                    "returns": "`Boolean` - returns `true` or `Nothing` if state didn't change"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_reviveOnBeingRevived"
        },
        "configuration": {
            "label": "BIS_fnc_reviveOnBeingRevived",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Jiri Wainar\n\n\tDescription:\n\tUsed to execute specific code localy on every client whenever 'forcing respawn' flag changes.\n\n\tParameters:\n\t\t_this select 0: STRING - Variable that carries the 'being revived' flag over the network, defined by macro VAR_TRANSFER_FORCING_RESPAWN.\n\t\t_this select 1: BOOL - Flag state - true or false.\n\t\t_this select 2: OBJECT - Unit to set the flag for.\n\n\tReturns:\n\tTrue if successful, false if not.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_reviveOnForcingRespawn`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_reviveOnForcingRespawn"
        },
        "configuration": {
            "label": "BIS_fnc_reviveOnForcingRespawn",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Jiri Wainar\n\n\tDescription:\n\tUsed to execute specific code localy on every client whenever unit's state changes.\n\n\tParameters:\n\t\t_this select 0: STRING - Variable that carries the state value over the network, defined by macro VAR_TRANSFER_STATE.\n\t\t_this select 1: SCALAR - State.\n\t\t_this select 2: OBJECT - Unit to set the status for.\n\n\tReturns:\n\tTrue if successful, false if not.\n\n\tStates:\n\t\t#define STATE_RESPAWNED\t\t\t0\n\t\t#define STATE_REVIVED\t\t\t1\n\t\t#define STATE_INCAPACITATED\t\t2\n\t\t#define STATE_DEAD\t\t\t\t3\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [
                {
                    "text": "```sqf\n{ [objNull, 1, _x] call BIS_fnc_reviveOnState; } forEach (curatorSelected select 0);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_reviveOnState`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_reviveOnState"
        },
        "configuration": {
            "label": "BIS_fnc_reviveOnState",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Jiri Wainar\n\n\tDescription:\n\tUsed to execute state specific code localy on client that is JIPping.\n\n\tParameters:\n\t\t_this select 0: STRING - Variable that carries the state value over the network, defined by macro VAR_TRANSFER_STATE.\n\t\t_this select 1: SCALAR - State.\n\t\t_this select 2: OBJECT - Unit to set the status for.\n\n\tReturns:\n\tTrue if successful, false if not.\n\n\tStates:\n\t\t#define STATE_RESPAWNED\t\t\t0\n\t\t#define STATE_REVIVED\t\t\t1\n\t\t#define STATE_INCAPACITATED\t\t2\n\t\t#define STATE_DEAD\t\t\t\t3\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_reviveOnStateJIP`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_reviveOnStateJIP"
        },
        "configuration": {
            "label": "BIS_fnc_reviveOnStateJIP",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Make player secured (killed without execution penalties) by _source unit.",
            "examples": [
                {
                    "text": "```sqf\n[player_1,player2] call BIS_fnc_reviveSecureUnit;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit to be checked"
                        },
                        {
                            "name": "source",
                            "description": "`Object` - reviving unit"
                        }
                    ],
                    "outline": "[unit, source] call `BIS_fnc_reviveSecureUnit`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_reviveSecureUnit"
        },
        "configuration": {
            "label": "BIS_fnc_reviveSecureUnit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tComputes curve data\n\n\tParameter(s):\n\t_this select 0: Object \t- The curve\n\t_this select 1: Bool \t- Whether this is a forced computation (from on attributes changed and not from on drag)\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_compute`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_compute"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_compute",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tComputes curve arc length\n\n\tParameter(s):\n\t_this select 0: Object \t- The curve\n\n\tReturns:\n\tFloat - The curve arc length\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_computeCurveArcLength`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_computeCurveArcLength"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_computeCurveArcLength",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tGet's keys assigned to given curve\n\n\tParameter(s):\n\t_this select 0: Object \t- The curve\n\t_this select 1: Bool\t- Whether or not to sort the keys by time\n\n\tReturns:\n\tArray - List of assigned keys\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_computeKeys`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_computeKeys"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_computeKeys",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tStores owner timeline\n\n\tParameter(s):\n\t_this select 0: Object - The curve\n\n\tReturns:\n\tObject - The owner timeline object\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_computeOwnerTimeline`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_computeOwnerTimeline"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_computeOwnerTimeline",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tGet's all simulated objects\n\n\tParameter(s):\n\t_this select 0: Object - The curve\n\n\tReturns:\n\tArray - List of objects simulated by given curve\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_computeSimulatedObjects`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_computeSimulatedObjects"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_computeSimulatedObjects",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\t3DEN attributes of a curve change\n\n\tParameter(s):\n\t_this select 0: Object - The curve\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_edenAttributesChanged`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_edenAttributesChanged"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_edenAttributesChanged",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tBakes a curve to a set of points\n\n\tParameter(s):\n\t_this select 0: Object  - The curve\n\t_this select 1: Integer - The amount of segments for curve baking (higher numbers mean more detail but also a lot more cpu time)\n\n\tReturns:\n\tARRAY - All the baked curve points\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_edenBakeCurve3D`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_edenBakeCurve3D"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_edenBakeCurve3D",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tComputes the nearest baked segment from given 3D position\n\n\tParameter(s):\n\t_this select 0: Object - The curve\n\n\tReturns:\n\tArray - The start and end vectors of segment\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_edenComputeNearestSegment`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_edenComputeNearestSegment"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_edenComputeNearestSegment",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\t3DEN connection of a curve change\n\n\tParameter(s):\n\t_this select 0: Object - The curve\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_edenConnectionChanged`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_edenConnectionChanged"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_edenConnectionChanged",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tEntity is dragged in 3DEN\n\n\tParameter(s):\n\t_this select 0: Object\t- The curve\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_edenDragged`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_edenDragged"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_edenDragged",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tDraws all control points of a curve\n\n\tParameter(s):\n\t_this select 0: Curve - The curve\n\t_this select 1: Array - The color of the icons rendering\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_edenDrawControlPoints3D`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_edenDrawControlPoints3D"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_edenDrawControlPoints3D",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tDraws a location curve in 3D\n\n\tParameter(s):\n\t_this select 0: Array\t- The baked curve\n\t_this select 1: Array\t- The color of the curve rendering\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_edenDrawCurve3D`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_edenDrawCurve3D"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_edenDrawCurve3D",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tWhether given curve is selected in 3den\n\n\tParameter(s):\n\t_this select 0: Object\t- The curve object\n\n\tReturns:\n\tBool - True if selected, false if not\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_edenIsSelected`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_edenIsSelected"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_edenIsSelected",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tMarks a curve state as dirty, so it knows it needs to recalculate\n\tFor example, moving a key in EDEN\n\n\tParameter(s):\n\t_this select 0: Object\t- The Curve\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_edenMarkStateDirty`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_edenMarkStateDirty"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_edenMarkStateDirty",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\t3DEN 3D drawing\n\n\tParameter(s):\n\t_this select 0: Object - The curve\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_edenTick`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_edenTick"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_edenTick",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tCalculates distance between all keys, returning the total length\n\n\tParameter(s):\n\t_this select 0: Object \t- The curve\n\n\tReturns:\n\tFloat - The curve length\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_getCurveLength`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_getCurveLength"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_getCurveLength",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tReturns the computed curve points\n\n\tParameter(s):\n\t_this select 0: Object \t- The curve\n\n\tReturns:\n\tArray - The curve points (array of 3D vectors)\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_getCurvePoints`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_getCurvePoints"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_getCurvePoints",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tGet's curve value at given time\n\n\tParameter(s):\n\t_this select 0: Object \t- The curve\n\t_this select 1: Float \t- The time\n\t_this select 2: Integer\t- Value type\n\n\tReturns:\n\tfloat - The value at given time\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_getCurveValueFloat`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_getCurveValueFloat"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_getCurveValueFloat",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tGet's curve value at given time\n\n\tParameter(s):\n\t_this select 0: Object \t- The curve\n\t_this select 1: Float \t- The time\n\t_this select 2: Integer\t- Value type\n\n\tReturns:\n\tArray - The vector value at given time\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_getCurveValueVector`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_getCurveValueVector"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_getCurveValueVector",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tGet's the first key on given curve\n\n\tParameter(s):\n\t_this select 0: Object - The curve\n\n\tReturns:\n\tObject - The first key of given curve\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_getFirstKey`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_getFirstKey"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_getFirstKey",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tGet's the key in given index of given curve\n\n\tParameter(s):\n\t_this select 0: Object - The curve\n\t_this select 1: Integer - The key index\n\n\tReturns:\n\tObject - The key at given index\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_getKeyFromIndex`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_getKeyFromIndex"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_getKeyFromIndex",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tGet's the index of given key in given curve\n\n\tParameter(s):\n\t_this select 0: Object - The curve\n\t_this select 1: Object - The key\n\n\tReturns:\n\tInteger - The index of the given key in given curve\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_getKeyIndex`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_getKeyIndex"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_getKeyIndex",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tGet's keys assigned to given curve\n\n\tParameter(s):\n\t_this select 0: Object - The curve\n\n\tReturns:\n\tArray - List of assigned keys\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_getKeys`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_getKeys"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_getKeys",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tGet's keys (prev / next) at given time\n\n\tParameter(s):\n\t_this select 0: Object \t- The curve\n\t_this select 1: Float\t- The time\n\n\tReturns:\n\tArray - Previous and next keys\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_getKeysAtTime`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_getKeysAtTime"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_getKeysAtTime",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tReturns given key time in alpha\n\n\tParameter(s):\n\t_this select 0: Object - The curve\n\n\tReturns:\n\tFloat - The time in alpha of given key (from 0 to 1)\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_getKeyTime`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_getKeyTime"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_getKeyTime",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tGet's the last key on given curve\n\n\tParameter(s):\n\t_this select 0: Object - The curve\n\n\tReturns:\n\tObject - The last key of given curve\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_getLastKey`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_getLastKey"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_getLastKey",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tReturns the look at position of this curve, [0.0, 0.0, 0.0] if not set\n\n\tParameter(s):\n\t_this select 0: Object - The curve\n\n\tReturns:\n\tArray - Target position, [0.0, 0.0, 0.0] if not set\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_getLookAtPosition`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_getLookAtPosition"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_getLookAtPosition",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tGet's the next key from given key, null if none exists\n\n\tParameter(s):\n\t_this select 0: Object - The curve\n\t_this select 1: Object - The key\n\n\tReturns:\n\tObject - The next key\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_getNextKey`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_getNextKey"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_getNextKey",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tReturns orientation mode for objects animated by this curve\n\n\tParameter(s):\n\t_this select 0: Object - The curve\n\n\tReturns:\n\tInteger - The mode (0 = None, 1 = Look At, 2 = Movement Direction)\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_getOrientationMode`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_getOrientationMode"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_getOrientationMode",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tReturns a curve's simulated objects\n\n\tParameter(s):\n\t_this select 0: Object - The curve\n\n\tReturns:\n\tObject - The owner timeline object\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_getOwnerTimeline`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_getOwnerTimeline"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_getOwnerTimeline",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tGet's the previous key from given key, null if none exists\n\n\tParameter(s):\n\t_this select 0: Object - The curve\n\t_this select 1: Object - The key\n\n\tReturns:\n\tObject - The previous key\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_getPreviousKey`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_getPreviousKey"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_getPreviousKey",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tReturns a curve's simulated objects\n\n\tParameter(s):\n\t_this select 0: Object - The curve\n\n\tReturns:\n\tArray - List of objects simulated by given curve\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_getSimulatedObjects`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_getSimulatedObjects"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_getSimulatedObjects",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tReturns min / max time range of given curve\n\n\tParameter(s):\n\t_this select 0: Object - The curve\n\n\tReturns:\n\tArray - Min / Max time range\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_getTimeRange`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_getTimeRange"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_getTimeRange",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tWhether the time of the keys belonging to this curve are in seconds\n\n\tParameter(s):\n\t_this select 0: Object - The curve\n\n\tReturns:\n\tBool - True if in seconds, false if in alpha\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_isTimeInSeconds`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_isTimeInSeconds"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_isTimeInSeconds",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tReturns number of keys registered with given curve\n\n\tParameter(s):\n\t_this select 0: Object - The curve\n\n\tReturns:\n\tInteger - Number of keys assigned to this curve\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_numKeys`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_numKeys"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_numKeys",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tClears all curves (and deletes them)\n\n\tParameter(s):\n\t_this select 0: Object - The curve\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_reset`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_reset"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_reset",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tReset's flag on all keys about handled events\n\n\tParameter(s):\n\t_this select 0: Object - The curve\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_resetKeysEventState`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_resetKeysEventState"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_resetKeysEventState",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tSet's keys assigned to given curve\n\n\tParameter(s):\n\t_this select 0: Object - The curve\n\t_this select 1: Array - The keys\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_setKeys`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_setKeys"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_setKeys",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tSet's the curve's orientation mode\n\n\tParameter(s):\n\t_this select 0: Object \t- The curve\n\t_this select 1: Integer - The orientation mode (0 = None / 1 = Animation / 2 = Look At / 3 = Movement Direction)\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_richCurve_setOrientationMode`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_richCurve_setOrientationMode"
        },
        "configuration": {
            "label": "BIS_fnc_richCurve_setOrientationMode",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Convert integer to roman numerals (e.g. 42 becomes \"XLII\").",
            "examples": [
                {
                    "text": "```sqf\n\n1 call BIS_fnc_romanNumeral;\t\t// returns \"I\"\n2035 call BIS_fnc_romanNumeral;\t// returns \"MMXXXV\"\n3999 call BIS_fnc_romanNumeral;\t// returns \"MMMCMXCIX\"\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "integer",
                            "description": "`Number`, `String`, `Code` or `Config`, same as `BIS_fnc_parseNumber` (used in this function) - any **integer** between 1 and 3999"
                        }
                    ],
                    "outline": "integer call `BIS_fnc_romanNumeral`",
                    "returns": "`String` - roman numerals"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_romanNumeral"
        },
        "configuration": {
            "label": "BIS_fnc_romanNumeral",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Rotating a marker to new azimuth, using shortest turn, clockwise or anticlockwise movement.",
            "examples": [
                {
                    "text": "```sqf\n[\"BIS_marker\",90] spawn BIS_fnc_rotateMarker;\n```"
                },
                {
                    "text": "```sqf\n[\"BIS_marker\",90,false,2,5] spawn BIS_fnc_rotateMarker;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "marker",
                            "description": "`String` - marker to rotate"
                        },
                        {
                            "name": "newAzimuth",
                            "description": "`Number` - new azimuth"
                        },
                        {
                            "name": "absoluteOrRelativ",
                            "description": "`Boolean` - (Optional, default `true`) defines if the azimuth is absolute `true` or relative `false`"
                        },
                        {
                            "name": "shortestTurn",
                            "description": "`Number` - (Optional, default 0) 0 - shortest turn (default, if used with relative dir, counter clockwise is used)"
                        },
                        {
                            "name": "duraton",
                            "description": "`Number` - (Optional, default 2) duration for the complete rotation in seconds"
                        }
                    ],
                    "outline": "[marker, newAzimuth, absoluteOrRelativ, shortestTurn, duraton] spawn `BIS_fnc_rotateMarker`",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_rotateMarker"
        },
        "configuration": {
            "label": "BIS_fnc_rotateMarker",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "This function returns a 2D vector rotated a specified number of degrees around the origin.",
            "examples": [
                {
                    "text": "```sqf\n[[5,3], 60] call BIS_fnc_rotateVector2D;//Returns[-0.0980766,5.83013]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vector2D",
                            "description": "`Array` - 2D vector"
                        },
                        {
                            "name": "angle",
                            "description": "`Number` - angle in degree"
                        }
                    ],
                    "outline": "[vector2D, angle] call `BIS_fnc_rotateVector2D`",
                    "returns": "`Array` - new vector"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_rotateVector2D"
        },
        "configuration": {
            "label": "BIS_fnc_rotateVector2D",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Rotates the vector around the given axis by the given angle",
            "examples": [
                {
                    "text": "```sqf\n[vectorDir player, 90, 2] call BIS_fnc_rotateVector3D;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vector",
                            "description": "`Array` in format `Vector3D`"
                        },
                        {
                            "name": "angle",
                            "description": "`Number` - given angle (taken in the opposite direction to the one defined by the {{Link|https://en.wikipedia.org/wiki/Right-hand_rule|right hand rule}})"
                        },
                        {
                            "name": "axis",
                            "description": "`Number` - rotation axis:"
                        }
                    ],
                    "outline": "[vector, angle, axis] call `BIS_fnc_rotateVector3D`",
                    "returns": "`Array` - rotated vector in format `Vector3D`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_rotateVector3D"
        },
        "configuration": {
            "label": "BIS_fnc_rotateVector3D",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Round direction to nearest set rounding; used for determining cardinal direction.",
            "examples": [
                {
                    "text": "```sqf\nplayer setDir ([getDir player, 45] call BIS_fnc_roundDir);\n```"
                },
                {
                    "text": "```sqf\n[204.2, 10] call BIS_fnc_roundDir; // will return 200\n```"
                },
                {
                    "text": "```sqf\n[271, 180] call BIS_fnc_roundDir; // will return 360\n```"
                },
                {
                    "text": "```sqf\n70 call BIS_fnc_roundDir; // will return 90\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "rawDirection",
                            "description": "`Number` - direction to round"
                        },
                        {
                            "name": "rounding",
                            "description": "`Number` - (Optional, default 90) - rounding value. With 90° possible return values are 0, 90, 180 and 270"
                        }
                    ],
                    "outline": "[rawDirection, rounding] call `BIS_fnc_roundDir`",
                    "returns": "`Number` - rounded direction, depending on input. **Can be negative or over 360**"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_roundDir"
        },
        "configuration": {
            "label": "BIS_fnc_roundDir",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Round a number to the provided factor.",
            "examples": [
                {
                    "text": "```sqf\n[10.254,2,3] call BIS_fnc_roundNum;//Returns 9\n```"
                },
                {
                    "text": "```sqf\n[10.254,1,3] call BIS_fnc_roundNum;//Returns 10\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "number",
                            "description": "`Number` - number that should be rounded."
                        },
                        {
                            "name": "factor",
                            "description": "`Number` - factor"
                        },
                        {
                            "name": "secondary factor",
                            "description": "`Number` - (optional) Secondary factor, used when number / primary factor is smaller than 10 (scalar)."
                        }
                    ],
                    "outline": "[number, factor, secondary factor] call `BIS_fnc_roundNum`",
                    "returns": "`Number` - rounded number"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_roundNum"
        },
        "configuration": {
            "label": "BIS_fnc_roundNum",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Register RSC layer and returns a **unique** ID.",
            "examples": [
                {
                    "text": "```sqf\nprivate _id = [\"myLayerName\"] call BIS_fnc_rscLayer;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "layerName",
                            "description": "`String` - layer name. Parent function name is used automatically when param is `nil`."
                        }
                    ],
                    "outline": "[layerName] call `BIS_fnc_rscLayer`",
                    "returns": "`Number` - layer ID"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_rscLayer"
        },
        "configuration": {
            "label": "BIS_fnc_rscLayer",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Stack code/function that should be run later, after some time/frames or/and custom condition. Internally calls `BIS_fnc_loop`.",
            "examples": [
                {
                    "text": "```sqf\n// Hints current game time in the next frame after 5 seconds have passed\n[\"uniqueId\", { hint str time; }, 5] call BIS_fnc_runLater;\n```"
                },
                {
                    "text": "```sqf\n// Hints current game time in the next frame after 120 frames have passed\n[\"uniqueId\", { hint str time; }, 120, \"frames\"] call BIS_fnc_runLater;\n```"
                },
                {
                    "text": "```sqf\n// Hints current game time in the next frame after BIS_variable is assigned\n[\"uniqueId\", { hint str time; }, nil, nil, { !isNil { BIS_variable } }] call BIS_fnc_runLater;\n```"
                },
                {
                    "text": "```sqf\n// Hints current game time in the next frame after 5 seconds have passed and BIS_variable is assigned\n[\"uniqueId\", { hint str time; }, 5, \"seconds\", { !isNil { BIS_variable } }] call BIS_fnc_runLater;\n```"
                },
                {
                    "text": "```sqf\n// Hints current game time in the next frame\n[\"uniqueId\", { hint str time; }] call BIS_fnc_runLater;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "id",
                            "description": "`String` - unique Id"
                        },
                        {
                            "name": "code",
                            "description": "`Code` or `String` - code/function that is executed later"
                        },
                        {
                            "name": "timer",
                            "description": "`Number` - the timer value (can be in seconds or frames)"
                        },
                        {
                            "name": "timerType",
                            "description": "`String` - can be \"seconds\" or \"frames\""
                        },
                        {
                            "name": "condition",
                            "description": "`Code` - the custom condition, code is only executed if timer is validated and condition is met"
                        }
                    ],
                    "outline": "[id, code, timer, timerType, condition] call `BIS_fnc_runLater`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_runLater"
        },
        "configuration": {
            "label": "BIS_fnc_runLater",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Creates particle sandstorm round given object. **Arma**: 3|The _newspapers_ parameter is disabled in {{arma3.}}",
            "examples": [
                {
                    "text": "```sqf\n[player, 0.04, 0.8, false] call BIS_fnc_sandstorm;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Object` - sandstorm center (should usually be `player`)"
                        },
                        {
                            "name": "interval",
                            "description": "`Number` - (Optional, default 0.07) particle refresh time; a lower number makes the sandstorm more dense"
                        },
                        {
                            "name": "brightness",
                            "description": "`Number` - (Optional, default 1) brightness coeficient; 1 is bright, 0 is dark"
                        },
                        {
                            "name": "newspapers",
                            "description": "`Boolean` - (Optional, default `true`) `true` if flying newspapers should be present"
                        }
                    ],
                    "outline": "[object, interval, brightness, newspapers] call `BIS_fnc_sandstorm`",
                    "returns": "`Array` of created particle effect"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_sandstorm"
        },
        "configuration": {
            "label": "BIS_fnc_sandstorm",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Evaluates the current battlefield situation and saves the game when appropriate.",
            "examples": [
                {
                    "text": "```sqf\n[unit_1, unit_2] call BIS_fnc_saveGame;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "objects",
                            "description": "`Array` - units to check"
                        }
                    ],
                    "outline": "[objects] call `BIS_fnc_saveGame`",
                    "returns": "`Boolean` - `true` if saved"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_saveGame"
        },
        "configuration": {
            "label": "BIS_fnc_saveGame",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Save unit's loadout.",
            "examples": [
                {
                    "text": "```sqf\n[player, [missionNamespace, \"BIS_inv\"], [], true] call BIS_fnc_saveInventory;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit whose inventory should be saved"
                        },
                        {
                            "name": "input",
                            "description": "`Array` in format:"
                        },
                        {
                            "name": "params",
                            "description": "`Array` - (Optional, default []) custom parameters stored with the loadout"
                        },
                        {
                            "name": "delete",
                            "description": "`Boolean` - (Optional, default `false`) whether or not to delete the loadout"
                        }
                    ],
                    "outline": "[unit,input,params,delete] call `BIS_fnc_saveInventory`",
                    "returns": "`Array` - saved value"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_saveInventory"
        },
        "configuration": {
            "label": "BIS_fnc_saveInventory",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Save vehicle's params (textures, animations, crew).",
            "examples": [
                {
                    "text": "```sqf\n[BIS_tank, [missionNamespace, \"BIS_someTankSave\"], [\"SomeRandomParam\"], false] call BIS_fnc_saveVehicle;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - vehicle"
                        },
                        {
                            "name": "target",
                            "description": "`Array` - in format:"
                        },
                        {
                            "name": "params",
                            "description": "`Array` - (Optional, default <sqf inline>[]) additional parameters to be saved"
                        },
                        {
                            "name": "delete",
                            "description": "`Boolean` - (Optional, default `false`) `true` to delete the save"
                        }
                    ],
                    "outline": "[object,target,params,delete] call `BIS_fnc_saveVehicle`",
                    "returns": "`Array` - saved value"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_saveVehicle"
        },
        "configuration": {
            "label": "BIS_fnc_saveVehicle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Make a speaker say a message.",
            "examples": [
                {
                    "text": "```sqf\n[leader player, \"to_c01_m01_brief_001_br_briefing_a_CENTAUR_0\", \"say3D\"] call BIS_fnc_sayMessage;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "speaker",
                            "description": "`Object` or `Side`"
                        },
                        {
                            "name": "message",
                            "description": "`String` - must be defined in either [[Description.ext#CfgSounds|CfgSounds]] or [[Description.ext#CfgRadio|CfgRadio]]"
                        },
                        {
                            "name": "channel",
                            "description": "`String` or `Number` - (Optional, default \"side\") can be \"say3D\", \"direct\", \"group\", \"vehicle\", \"side\", \"command\", \"global\", or custom channel ID"
                        }
                    ],
                    "outline": "[speaker, message, channel] call `BIS_fnc_sayMessage`",
                    "returns": "`Boolean` - `true` when done"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_sayMessage"
        },
        "configuration": {
            "label": "BIS_fnc_sayMessage",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Translates, scales (with pivot) and fades a picture control over time.",
            "examples": [
                {
                    "text": "```sqf\n\n[_controlFront, 0.8, \"topLeft\"] call BIS_fnc_scaleAndTranslate;\nprivate _t = [_controlFront, 1, \"bottomRight\", [0.1, 0.1], 0.5, false] call BIS_fnc_scaleAndTranslate;\nsleep (_t * 2);\n[_controlFront, 0.8, \"topRight\", [0.5, 0.3]] call BIS_fnc_scaleAndTranslate;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "picture",
                            "description": "`Control` - picture that has to be modified"
                        },
                        {
                            "name": "scaleFactor",
                            "description": "`Number` - (Optional, default 1) how much the picture has to be scaled (> 1 makes it bigger, 1 keeps it the same, < 1 makes it smaller)"
                        },
                        {
                            "name": "pivot",
                            "description": "`String` - (Optional, default \"center\") select the pivot's position (i.e. center of the scaling process); can be one of:"
                        },
                        {
                            "name": "translation",
                            "description": "`Array` format [x, y] - (Optional, default [0, 0]) how much the picture has to be moved"
                        },
                        {
                            "name": "durationOrSpeed",
                            "description": "`Number` - (Optional, default 2) either the duration of the animation(default) or the speed of the translation, depending on what the next parameter is set to"
                        },
                        {
                            "name": "isDuration",
                            "description": "`Boolean` - (Optional, default `true`) if `true`, _durationOrSpeed_ is considered duration; if `false` it is considered speed"
                        },
                        {
                            "name": "fade",
                            "description": "`Number` - (Optional, default 0) transparency of the image at the end of the animation (in range 0..1: 0 = visible, 1 = invisible)"
                        }
                    ],
                    "outline": "[picture, scaleFactor, pivot, translation, durationOrSpeed, isDuration, fade] call `BIS_fnc_scaleAndTranslate`",
                    "returns": "`Number` - duration of the animation; useful for determining how much sleep time is needed between animations"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_scaleAndTranslate"
        },
        "configuration": {
            "label": "BIS_fnc_scaleAndTranslate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Removes object clutter within a set trigger, for use within cutscenes.",
            "examples": [
                {
                    "text": "```sqf\n[triggerArea1] spawn BIS_fnc_sceneAreaClearance;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "trigger",
                            "description": "`Object` - trigger to use as center point"
                        },
                        {
                            "name": "objects",
                            "description": "`Array` - (Optional, default <sqf inline>[]) list of objects that will be kept during cutscene"
                        },
                        {
                            "name": "destination",
                            "description": "`Array` in format `Position` - (Optional, default [-5000, 10000, 0]) where to move all unwanted objects"
                        }
                    ],
                    "outline": "[trigger, objects, destination] spawn `BIS_fnc_sceneAreaClearance`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_sceneAreaClearance"
        },
        "configuration": {
            "label": "BIS_fnc_sceneAreaClearance",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Checks if participants have not missing weapon or have not it selected before scene\nFunction works as a toggle:\n* 1st run of script: running in SETUP mode - sets correct weapons for scene\n* 2nd run of script: running in RESTORE mode - restore origin weapons(delete weapons after scene if character hadn't any)",
            "examples": [
                {
                    "text": "```sqf\n\n[\n\t[BIS_Cooper, \"primary\"],\n\t[BIS_Ohara, \"primary\"],\n\t[BIS_Rodriguez, \"primary\"],\n\t[BIS_Sykes, \"primary\"],\n\t[BIS_Miles, \"primary\"]\n] call BIS_fnc_sceneCheckWeapons;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "participants",
                            "description": "`Array` of `Array`s - (Optional, default <sqf inline>[[BIS_Cooper, \"primary\"],[BIS_Ohara, \"primary\"],[BIS_Rodriguez, \"primary\"],[BIS_Sykes, \"primary\"],[BIS_Miles, \"primary\"]]) an array of arrays in format:"
                        }
                    ],
                    "outline": "[participants] call `BIS_fnc_sceneCheckWeapons`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_sceneCheckWeapons"
        },
        "configuration": {
            "label": "BIS_fnc_sceneCheckWeapons",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Create trigger for scene which can interrupt scene with name passed during creating the trigger. Scene name is saved in format **BIS_SceneIntDetector%1** where %1 is sceneName.",
            "examples": [
                {
                    "text": "```sqf\n[\"BIS_scene\", west, 5, 500, [1337,1337,0], false] call BIS_fnc_sceneCreateSceneTrigger;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "sceneName",
                            "description": "`String` - name of scene to associate with"
                        },
                        {
                            "name": "side",
                            "description": "`Side` - for which side create trigger - which presence then interrupt the scene"
                        },
                        {
                            "name": "timeout",
                            "description": "`Number` - timeout of interrupt"
                        },
                        {
                            "name": "triggerSize",
                            "description": "`Number` - size of the trigger"
                        },
                        {
                            "name": "triggerPosition",
                            "description": "`Array` - where to create the trigger"
                        },
                        {
                            "name": "deleteTrigger",
                            "description": "`Boolean` - if `true`, trigger will be deleted"
                        }
                    ],
                    "outline": "[sceneName, side, timeout, triggerSize, triggerPosition] call `BIS_fnc_sceneCreateSceneTrigger`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_sceneCreateSceneTrigger"
        },
        "configuration": {
            "label": "BIS_fnc_sceneCreateSceneTrigger",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>\n/*******************************************************************************\n *\tversion: \t1.0\n *\tname:\t\tcreate sound entities\t\n *\tdescription:\tcreates sound entities(logic objects) and attaches to \n *\t\t\tan objects passed as parameter     \n *\t\t\tAfter scene end it will detach and delete all created \n *\t\t\tsound entities (if scene was executed from scenes\n *\t\t\tcontroller.\n *\t\t\t \t\n *\tparamater:\tobjects - ARRAY of OBJECTS in format without \"BIS_\" \n *\t\t\tprefix. For example, if you have BIS_Cooper in mission \n *\t\t\tthan parameter will be [Cooper]. Then you can use \n *\t\t\tcreated sound entities as BIS_ZvukCooper say \"something\"    \n *\t\t\t\t\t\t \t\n *\treturn value:\tnothing \t\n * \n</pre>\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_sceneCreateSoundEntities;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_sceneCreateSoundEntities` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_sceneCreateSoundEntities"
        },
        "configuration": {
            "label": "BIS_fnc_sceneCreateSoundEntities",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**WARNING**: This function is broken (at least in Arma 3) as it has a typo, displaying an error on each use!  (typo **line 63**, `**[centrum] instead of {{hl|[_centrum]}}).**`\nThis function gets objects (but centre object) positions and direction relative to the choosen object and copies the result to the clipboard _via_ `copyToClipboard`.\n\nResult is to format:\n\n```sqf\n[\n\t// 11 elements for one object\n\t_nameOfObject, _objectClass, _objectToGet, _computedAngle, _distance, _newDir, _vectorUp, _vectorDir, _animation, _elevASL, _elev,\n\t_nameOfObject, _objectClass, _objectToGet, _computedAngle, _distance, _newDir, _vectorUp, _vectorDir, _animation, _elevASL, _elev,\n\t// ...\n]\n```\n\n**IMPORTANT**: Please note that the clipboard result is a one-level array, meaning that all parameters are defined one after the other!",
            "examples": [
                {
                    "text": "```sqf\n[player, 20, \"Car\"] call BIS_fnc_sceneGetObjects;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "centre",
                            "description": "`Object` or `String` - object or marker name - **NOT** a `Position`"
                        },
                        {
                            "name": "radius",
                            "description": "`Number` - (Optional, default 20)"
                        },
                        {
                            "name": "type",
                            "description": "`String` - (Optional, default \"All\") - objects type (see `nearestObjects`)"
                        }
                    ],
                    "outline": "[centre, radius, type] call `BIS_fnc_sceneGetObjects`",
                    "returns": "[Script Handle](https://community.bistudio.com/wiki/Script%20Handle)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_sceneGetObjects"
        },
        "configuration": {
            "label": "BIS_fnc_sceneGetObjects",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "gets members of unit's group who are in unit's range.",
            "examples": [
                {
                    "text": "```sqf\n[player, 20] call BIS_fnc_sceneGetParticipants;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - if `nil` is passed, `player` is used - `nil` must then **not** be used on a dedicated server"
                        },
                        {
                            "name": "maxDistance",
                            "description": "`Number` - if `nil` is passed, 30 is used."
                        }
                    ],
                    "outline": "[unit, maxDistance] call `BIS_fnc_sceneGetParticipants`",
                    "returns": "`Array` of units in _unit_s group within _maxDistance_ from _unit_"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_sceneGetParticipants"
        },
        "configuration": {
            "label": "BIS_fnc_sceneGetParticipants",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>\n/*******************************************************************************\n *\n *\tversion: \t1.0\n *\tname:\t\tsceneGetPositionByAngle\n *\tdescription:\treturns new calculated position of object from angle and distance from specified object   \n *\tparameters:\tdescribed below\t\n *\treturn value:\tarray of new coordinates [x, y]\n *\t  \n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_sceneGetPositionByAngle;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_sceneGetPositionByAngle` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_sceneGetPositionByAngle"
        },
        "configuration": {
            "label": "BIS_fnc_sceneGetPositionByAngle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Checks if there are intruders during scene. All intruders during scene will be disabled if they \n   will get into the detector trigger. Checking is deactivated by passing \n```sqf\nBIS_sceneIntruderDetectorLogic setVariable [\"_detectInProgress\", false];\n```",
            "examples": [
                {
                    "text": "```sqf\n[[1337,1337,0],[42,42]] call BIS_fnc_sceneCreateSceneTrigger;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "sceneCenter",
                            "description": "`Array` - (Optional, default `position` `player`) center position of scene"
                        },
                        {
                            "name": "triggerSize",
                            "description": "`Array` - (Optional, default [60,60]) trigger size as array in format:"
                        }
                    ],
                    "outline": "[sceneCenter, triggerSize] call `BIS_fnc_sceneIntruderDetector`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_sceneIntruderDetector"
        },
        "configuration": {
            "label": "BIS_fnc_sceneIntruderDetector",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>\n/*********************************************************************\n\tVersion:\t1.0\n\tName:\t\tsceneMiscStuff\n\tDESCRIPTION:\tDoes the basic minor stuff for scene - cinema borders, map is denied etc.  \n\tPARAMETERS:\t1) _cameraPositions - [[cameraTarget],[cameraPos]] - Coordinates. If BIS_debugScene is true then external camera is activated\n\t\t\t2) _skipInitBlackout - BOOL - if true, initial blackout is skipped\n\t\t\t3) _skipFinalBlackout - BOOL - if true, final blackout is skipped\n\t\t\t4) _noUseCheckTheWeapons - BOOL - if true, checking of weapon before scene is skipped\n\t\t\t5) _noUseLoadingScreen - BOOL - if true, loadingscreen is bypassed\n\t\t\t6) __excludedObjectsForIntruderDetector - ARRAY of objects - objects will be excluded from intruder detector\n\tRETURNED VALUE:\t\n**********************************************************************/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_sceneMiscStuff;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_sceneMiscStuff` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_sceneMiscStuff"
        },
        "configuration": {
            "label": "BIS_fnc_sceneMiscStuff",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Compute new object coordinates from given center and angle from MOTION BUILDER",
            "examples": [
                {
                    "text": "```sqf\n[[1337,1337,0], 42, 120, [200,200,0]] call BIS_fnc_sceneRotate; // returns [[1337.15,1334.18,0],-258]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "center",
                            "description": "`Array` - center position from MOTION BUILDER"
                        },
                        {
                            "name": "centerAngle",
                            "description": "`Number` - rotation of center from MOTION BUILDER"
                        },
                        {
                            "name": "angle",
                            "description": "`Number` - rotation"
                        },
                        {
                            "name": "iniPosition",
                            "description": "`Array` - inital position"
                        }
                    ],
                    "outline": "[center, centerAngle, angle, iniPosition] call `BIS_fnc_sceneRotate`",
                    "returns": "`Array` - array in format [<noWiki>[</noWiki>PositionX,PositionY,PositionZ], Rotation]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_sceneRotate"
        },
        "configuration": {
            "label": "BIS_fnc_sceneRotate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Plays a range of animations for a specific set of units, intended for use during cutscenes.",
            "examples": [
                {
                    "text": "```sqf\nprivate _setAnims = [group player, [\"AmovPercMstpSrasWrflDnon\"]] call BIS_fnc_sceneSetAnimationsForGroup;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "`Array`",
                            "description": "units that should play animations."
                        },
                        {
                            "name": "`Array`",
                            "description": "array of animation names (in format `String`) to play."
                        }
                    ],
                    "outline": "param call `BIS_fnc_sceneSetAnimationsForGroup`",
                    "returns": "`Boolean` - returns true if all animations started."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_sceneSetAnimationsForGroup"
        },
        "configuration": {
            "label": "BIS_fnc_sceneSetAnimationsForGroup",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Enables / disables a specific set of AI units, usable for cutscenes.",
            "examples": [
                {
                    "text": "```sqf\n[\"disableAI\", [unit1, player, unit2, unit3]] call BIS_fnc_sceneSetBehaviour;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "`String`",
                            "description": "string to toggle AI (\"enableAI\",\"disableAI\")"
                        },
                        {
                            "name": "`Array`",
                            "description": "AI units that should be affected by function."
                        }
                    ],
                    "outline": "param call `BIS_fnc_sceneSetBehaviour`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_sceneSetBehaviour"
        },
        "configuration": {
            "label": "BIS_fnc_sceneSetBehaviour",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "This function sets objects positions and direction relative to the chosen object.\n**WARNING**: Same as its [GET](https://community.bistudio.com/wiki/BIS_fnc_sceneGetObjects) counterpart (at least in Arma 3), this function does not work as intended as it does not set objects' direction properly. All objects will be created with a zero azimuth.",
            "examples": [
                {
                    "text": "```sqf\n[player, _arrayOfObjects, false] call BIS_fnc_sceneSetObjects;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "centre",
                            "description": "`Object` or `String` - object or marker name - **NOT** a `Position`"
                        },
                        {
                            "name": "objectsArray",
                            "description": "`Array` - see `BIS_fnc_sceneGetObjects` for format information"
                        },
                        {
                            "name": "applyOffset",
                            "description": "`Boolean` - `true` to apply height offset"
                        },
                        {
                            "name": "stopped",
                            "description": "`Anything` - if provided and if `**BIS_debugModules**` is defined, units will be [stopped](https://community.bistudio.com/wiki/stop)"
                        }
                    ],
                    "outline": "[centre, objectsArray, applyOffset, stopped] call `BIS_fnc_sceneSetObjects`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_sceneSetObjects"
        },
        "configuration": {
            "label": "BIS_fnc_sceneSetObjects",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Adjusts units into a pre-determined formation, using a few variables. Part of S.C.E.N.E.S function group.",
            "examples": [
                {
                    "text": "```sqf\n[units group player, bluforCommander, player, \"HALFCIRCLE\", 0] spawn BIS_fnc_sceneSetPosFormation;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "`Array`",
                            "description": "array of units involved"
                        },
                        {
                            "name": "`Object`",
                            "description": "scene initiator"
                        },
                        {
                            "name": "`Object`",
                            "description": "talking partner of scene initiator"
                        },
                        {
                            "name": "`String`",
                            "description": "formation in which to place units. Possible values: \"LINE\", \"CIRCLE\", \"HALFCIRCLE"
                        },
                        {
                            "name": "`Number`",
                            "description": "true / false in format `Number` (0 = false, 1 = true), determines debug mode (showing markers)."
                        },
                        {
                            "name": "`Number`",
                            "description": "(Optional, default 0) - determines angle offset"
                        }
                    ],
                    "outline": "param spawn `BIS_fnc_sceneSetPosFormation`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_sceneSetPosFormation"
        },
        "configuration": {
            "label": "BIS_fnc_sceneSetPosFormation",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return CfgWaypoints type of scripted waypoint.\n\tReturns empty string/config when waypoint is not scripted\n\tReturns \"Custom\"/CfgWaypoints root when waypoint is using custom script.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_scripted_WP_01,\"returnString\"] call BIS_fnc_scriptedWaypointType;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "waypoint",
                            "description": "`Array` - waypoint in question"
                        },
                        {
                            "name": "type",
                            "description": "`String` or `Config` - (Optional, default `configFile`) type of returned value, can by any string and any config"
                        }
                    ],
                    "outline": "[waypoint,type] call `BIS_fnc_scriptedWaypointType`",
                    "returns": "`String` or `Config` - string in format (\"category/class\") or config in format (CfgWaypoints path)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_scriptedWaypointType"
        },
        "configuration": {
            "label": "BIS_fnc_scriptedWaypointType",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Convert seconds to formatted string.",
            "examples": [
                {
                    "text": "```sqf\nhint format [\"Hi, it is currently %1.\", [time, \"HH:MM\"] call BIS_fnc_secondsToString];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "totalSeconds",
                            "description": "`Number` - time in seconds (see `time`)"
                        },
                        {
                            "name": "format",
                            "description": "`String` - (Optional, default \"HH:MM:SS\") can be one of:"
                        },
                        {
                            "name": "returnArray",
                            "description": "`Boolean` - (Optional, default false)"
                        }
                    ],
                    "outline": "[totalSeconds, format, returnArray] call `BIS_fnc_secondsToString`",
                    "returns": "`String` or `Array` of `String`s if _returnArray_ is set to `true`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_secondsToString"
        },
        "configuration": {
            "label": "BIS_fnc_secondsToString",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return an appropriate crew type for a certain vehicle.\n\n**IMPORTANT**: \nThis function should work properly in Arma 3, but be aware that if \"crew\" config entry is not defined in vehicle config then specific Arma 2 class names will be used as default values (_\"USMC_Soldier_Crew\"_, _\"US_Soldier_Crew_EP1\"_, _\"RU_Soldier_Crew\"_, _\"TK_Soldier_Crew_EP1\"_)",
            "examples": [
                {
                    "text": "```sqf\nprivate _crewType = [blufor, configFile >> \"CfgVehicles\" >> \"B_MRAP_01_F\"] call BIS_fnc_selectCrew;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "side",
                            "description": "`Side` - only supports `west` (`blufor`) and `east` (`opfor`) for default value (if \"crew\" entry is not found)"
                        },
                        {
                            "name": "configEntry",
                            "description": "`Config` - the vehicle config path"
                        }
                    ],
                    "outline": "[side, configEntry] call `BIS_fnc_selectCrew`",
                    "returns": "`String` - crew type, empty if crew type not found"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_selectCrew"
        },
        "configuration": {
            "label": "BIS_fnc_selectCrew",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Selects a diary subject. \n**NOTE**: This was a temporary replacement for `selectDiarySubject` scripting command which **had been broken** until v2.04.",
            "examples": [
                {
                    "text": "```sqf\n[\"someSubject\"] call BIS_fnc_selectDiarySubject;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "diaryName",
                            "description": "`String` - diary subject name"
                        }
                    ],
                    "outline": "[diaryName] call `BIS_fnc_selectDiarySubject`",
                    "returns": "`Boolean` - `true` if the subject was found and selected"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_selectDiarySubject"
        },
        "configuration": {
            "label": "BIS_fnc_selectDiarySubject",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Selects one of the arguments at random.\n**Arma**: 3|Use `selectRandom` instead.",
            "examples": [
                {
                    "text": "```sqf\nprivate _bestShooter = [_rento, _ben, _trit] call BIS_fnc_selectRandom; // returns one of the variables\n_bestSeries = [[\"halo1\",\"halo2\"],[\"ofp\",\"arma2\"]] call BIS_fnc_selectRandom; // returns one of the arrays\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "values",
                            "description": "`Array` - array of values of which one will be selected at random"
                        }
                    ],
                    "outline": "values call `BIS_fnc_selectRandom`",
                    "returns": "`Anything` - one of the values you passed, chosen at random"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_selectRandom"
        },
        "configuration": {
            "label": "BIS_fnc_selectRandom",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Selects a random item from an array, taking into account item weight.\n**NOTE**: \n* The weights do not have to total to 1\n* The length of weights and items arrays may not match, in which case the shortest array is used for length\n\n\n**Arma**: 3|See `selectRandomWeighted` for an engine solution.",
            "examples": [
                {
                    "text": "```sqf\n[\"apples\",.3,\"pears\",.2,\"bananas\",.4,\"diamonds\",.1,\"unicorns\",.00001] call BIS_fnc_selectRandomWeighted;\n```"
                },
                {
                    "text": "```sqf\n[[\"apples\",\"pears\",\"bananas\",\"diamonds\"], [0.3,0.2,0.4,0.1]] call BIS_fnc_selectRandomWeighted;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "itemsAndWeights",
                            "description": "`Array` - array of items and weights [item, weight, item, weight...]"
                        },
                        {
                            "name": "items",
                            "description": "`Array` - items array of `Anything`"
                        },
                        {
                            "name": "weights",
                            "description": "`Array` - weights array of `Number`s"
                        }
                    ],
                    "outline": "[items, weights] call `BIS_fnc_selectRandomWeighted`",
                    "returns": "`Anything`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_selectRandomWeighted"
        },
        "configuration": {
            "label": "BIS_fnc_selectRandomWeighted",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Select respawn template from CfgRespawnTemplates and execute its script / function. Internal use.",
            "examples": [
                {
                    "text": "```sqf\n[\"playerKilledScript\", []] call BIS_fnc_selectRespawnTemplate;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`String` - **case-sensitive**, can be one of:"
                        },
                        {
                            "name": "arguments",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "[mode, arguments] call `BIS_fnc_selectRespawnTemplate`",
                    "returns": "`Array` of [Script Handle](https://community.bistudio.com/wiki/Script%20Handle)s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_selectRespawnTemplate"
        },
        "configuration": {
            "label": "BIS_fnc_selectRespawnTemplate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tSet which attributes are available for given entity  or entity type.\n\n\tParameter(s):\n\t\t0: OBJECT - curator\n\t\t1:\n\t\t\tSTRING - general setting for all entities of the given type, can be  \"object\", \"player\", \"group', \"waypoint\" or \"marker\"\n\t\t\tOBJECT - setting for specific object, overrides general settings\n\t\t\tGROUP - setting for specific group, overrides general settings\n\t\t2: ARRAY of STRINGs - attributes\n\t\t\tobject:\n\t\t\t\tSkill\n\t\t\t\tUnitPos\n\t\t\t\tRank\n\t\t\t\tDamage\n\t\t\t\tFuel\n\t\t\t\tLock\n\t\t\t\tRespawnVehicle\n\t\t\t\tRespawnPosition\n\t\t\t\tExec\n\t\t\tgroup:\n\t\t\t\tGroupID\n\t\t\t\tBehaviour\n\t\t\t\tFormation\n\t\t\twaypoint:\n\t\t\t\tBehaviour\n\t\t\t\tFormation\n\t\t\tmarker:\n\t\t\t\tMarkerText\n\t\t\t\tMarkerColor\n\n\tReturns:\n\tBOOL\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_setCuratorAttributes;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_setCuratorAttributes` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_setCuratorAttributes"
        },
        "configuration": {
            "label": "BIS_fnc_setCuratorAttributes",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Move curator camera to a position and direction. Finished when animation ends.",
            "examples": [
                {
                    "text": "```sqf\n[nil, player, 5] spawn BIS_fnc_setCuratorCamera;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "camPos",
                            "description": "`Position` - (Optional, default `getPosATL` `curatorCamera`) position, for supported types see `BIS_fnc_position`"
                        },
                        {
                            "name": "targetPos",
                            "description": "`Array` format `Vector3D`, `Position` or `Object` - (Optional, default `vectorDir` `curatorCamera`) vector dir or target object/position"
                        },
                        {
                            "name": "time",
                            "description": "`Number` or `Boolean` - (Optional, default 0) commit time or `true` to calculate time automatically"
                        }
                    ],
                    "outline": "[camPos, targetPos, time] spawn `BIS_fnc_setCuratorCamera`",
                    "returns": "`Boolean` `true` when done"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_setCuratorCamera"
        },
        "configuration": {
            "label": "BIS_fnc_setCuratorCamera",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Set which vision modes curator can access.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_curator,[-1,-2]] call BIS_fnc_setCuratorVisionModes;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        },
                        {
                            "name": "mode `Array` of `Number`s",
                            "description": "vision modes, can be:"
                        }
                    ],
                    "outline": "[curator,mode] call `BIS_fnc_setCuratorVisionModes`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_setCuratorVisionModes"
        },
        "configuration": {
            "label": "BIS_fnc_setCuratorVisionModes",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tBIS_fnc_setCustomSoundController\n\n\ta: reyhard\n*/</pre>{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "call `BIS_fnc_setCustomSoundController`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_setCustomSoundController"
        },
        "configuration": {
            "label": "BIS_fnc_setCustomSoundController",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Instantly set date and share it across network with optional transition effect. [[File:BIS_fnc_setDate.jpg|right|300px]]",
            "examples": [
                {
                    "text": "```sqf\n[[2035, 12, 31, 23, 59], true, true] call BIS_fnc_setDate;\n```"
                },
                {
                    "text": "```sqf\n[4, true, true] call BIS_fnc_setDate; // skip 4 hours. Same as image in description\n```"
                },
                {
                    "text": "```sqf\n[30 / 60, true, true] call BIS_fnc_setDate; // skip 30 minutes and show a \"30 minutes later\" message\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "value",
                            "description": "`Number` or `Array` in format `Date`"
                        },
                        {
                            "name": "global",
                            "description": "`Boolean` - (Optional, default `true`) `true` for global execution"
                        },
                        {
                            "name": "transition",
                            "description": "`Boolean` (Optional, default `false`) `true` to show a transition effect instead of an immediate skip"
                        }
                    ],
                    "outline": "[value, global, transition] call `BIS_fnc_setDate`",
                    "returns": "`Date` - the new date"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_setDate"
        },
        "configuration": {
            "label": "BIS_fnc_setDate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Instantly set weather conditions and share it across network.",
            "examples": [
                {
                    "text": "```sqf\n[1,1,100] call BIS_fnc_setFog; // returns [1,1,100]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "strength",
                            "description": "`Number` - fog strength from 0 to 1"
                        },
                        {
                            "name": "density",
                            "description": "`Number` - fog density from 0 to 1"
                        },
                        {
                            "name": "altitude",
                            "description": "`Number` - fog base altitude in metres."
                        }
                    ],
                    "outline": "[strength, density, altitude] call `BIS_fnc_setFog`",
                    "returns": "`Array` - array with set values"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_setFog"
        },
        "configuration": {
            "label": "BIS_fnc_setFog",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Set an object's altitude.",
            "examples": [
                {
                    "text": "```sqf\n\n// will place player's vehicle on \"myHeightMarker\", 50m above terrain\n[vehicle player, 50, getMarkerPos \"myHeightMarker\", \"ATL\"] call BIS_fnc_setHeight;\n\n```"
                },
                {
                    "text": "```sqf\n\n// will set the \"this\" object 50m above sea level at its position\n// use where \"this\" has a value like in an init field\n[50, \"ASL\"] call BIS_fnc_setHeight;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Object` - affected object"
                        },
                        {
                            "name": "height",
                            "description": "`Number` - (Optional, default 0) height to set"
                        },
                        {
                            "name": "position",
                            "description": "`Position` - (Optional, default <sqf inline>position target) position to place the target with calculated height"
                        },
                        {
                            "name": "mode",
                            "description": "`String` - (Optional, default \"ROADWAY\") can be:"
                        },
                        {
                            "name": "height",
                            "description": "`Number` - (Optional, default 0) height to set"
                        },
                        {
                            "name": "mode",
                            "description": "`String` - (Optional, default \"ROADWAY\") can be:"
                        }
                    ],
                    "outline": "[height, mode] call `BIS_fnc_setHeight`\n**IMPORTANT**: This syntax uses <sqf inline>this and is therefore meant to be used in init fields. Not to be used in MP.",
                    "returns": "`Boolean` - `true` when done"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_setHeight"
        },
        "configuration": {
            "label": "BIS_fnc_setHeight",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Sets damage to HitPoint with dependency or not.",
            "examples": [
                {
                    "text": "```sqf\n[player, \"HitFace\", 0.9] call BIS_fnc_setHitPointDamage;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - entity to which damage applies"
                        },
                        {
                            "name": "hitPoint",
                            "description": "`String` - hitPoint to which damage applies"
                        },
                        {
                            "name": "damage",
                            "description": " `Number` - amount of damage to apply"
                        },
                        {
                            "name": "useDependency",
                            "description": "`Boolean` - (Optional, default `true`) "
                        }
                    ],
                    "outline": "[object, hitPoint, damage, useDependency] call `BIS_fnc_setHitPointDamage`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_setHitPointDamage"
        },
        "configuration": {
            "label": "BIS_fnc_setHitPointDamage",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Shows or hides UI control according to state of the Stream Friendly UI switch in Game Options.",
            "examples": [
                {
                    "text": "```sqf\n[(findDisplay 1337) displayCtrl 42] call BIS_fnc_setIDCStreamFriendly;\n```"
                },
                {
                    "text": "```sqf\n[findDisplay 1337, 42] call BIS_fnc_setIDCStreamFriendly;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Display` or `Control`"
                        },
                        {
                            "name": "IDC",
                            "description": "`Number` - (Optional, default -1) control IDC when the first parameter is a display"
                        }
                    ],
                    "outline": "[target,IDC] call `BIS_fnc_setIDCStreamFriendly`",
                    "returns": "`Boolean` - `true` when visible, `false` when hidden"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_setIDCStreamFriendly"
        },
        "configuration": {
            "label": "BIS_fnc_setIDCStreamFriendly",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Sets the unit's identity.\n**NOTE**: When executed on server, the identity will be [JIP](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Join%20In%20Progress) compatible.",
            "examples": [
                {
                    "text": "```sqf\n[player, \"Kerry\", \"Male01ENGB\", 1.05, \"Big Daddy\"] call BIS_fnc_setIdentity;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "face",
                            "description": "`String` - (Optional, default \"\") face from CfgFaces"
                        },
                        {
                            "name": "speaker",
                            "description": "`String` - (Optional, default \"\") speaker from CfgVoice"
                        },
                        {
                            "name": "pitch",
                            "description": "`String` - (Optional, default -1) speaker pitch (1 is unchanged pitch)"
                        },
                        {
                            "name": "callsign",
                            "description": "`String` - (Optional, default \"\") callsign"
                        }
                    ],
                    "outline": "[object, face, speaker, pitch, callsign] call `BIS_fnc_setIdentity`",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_setIdentity"
        },
        "configuration": {
            "label": "BIS_fnc_setIdentity",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Set  a slot for mission status with sectors, respawn tickets, etc.",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "id",
                            "description": "`Number`  - slot ID. Use -1 to assign it automatically"
                        },
                        {
                            "name": "text",
                            "description": "`String` - text"
                        },
                        {
                            "name": "texture",
                            "description": "`String` - icon path"
                        },
                        {
                            "name": "color",
                            "description": "`Array` - color in RGBA format"
                        },
                        {
                            "name": "fade",
                            "description": "`Number` - slot fade, 0 is fully visible, 0 hidden"
                        },
                        {
                            "name": "position",
                            "description": "`Array` in Position format - position top which camera moves after clicking on the slot"
                        },
                        {
                            "name": "barHeight",
                            "description": "`Number` - slot progress bar height in range <0;1>"
                        }
                    ],
                    "outline": "[id, text, texture, color, fade, position, barHeight] call `BIS_fnc_setMissionStatusSlot`",
                    "returns": "`Number` - slot ID"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_setMissionStatusSlot"
        },
        "configuration": {
            "label": "BIS_fnc_setMissionStatusSlot",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Function to set an item in a nested array using a path. Modifies the array by reference.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _array = [[1, 2], [3, 4]];\n_bool = [_array, [0, 0], 0] call BIS_fnc_setNestedElement; // _array is now [[0, 2], [3, 4]]\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array`"
                        },
                        {
                            "name": "path",
                            "description": "`Array` of `Number`s"
                        },
                        {
                            "name": "value",
                            "description": "`Anything`"
                        }
                    ],
                    "outline": "[array, path, value] call `BIS_fnc_setNestedElement`",
                    "returns": "`Boolean` - `true` on success, `false` on failure"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_setNestedElement"
        },
        "configuration": {
            "label": "BIS_fnc_setNestedElement",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Set object rotation.",
            "examples": [
                {
                    "text": "```sqf\n[cursorObject, [100,100,100]] call BIS_fnc_setObjectRotation;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - object to manipulate"
                        },
                        {
                            "name": "rotation",
                            "description": "`Array` - vector in format:"
                        }
                    ],
                    "outline": "[object, rotation] call `BIS_fnc_setObjectRotation`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_setObjectRotation"
        },
        "configuration": {
            "label": "BIS_fnc_setObjectRotation",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_setObjectShotParents;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_setObjectShotParents` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_setObjectShotParents"
        },
        "configuration": {
            "label": "BIS_fnc_setObjectShotParents",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Set object textures.",
            "examples": [
                {
                    "text": "```sqf\n[player, \"#(rgb,8,8,3)color(0,0,1,1)\"] call BIS_fnc_setObjectTexture;\n```"
                },
                {
                    "text": "```sqf\n\n[\n\tvehicle player,\n\t[\n\t\t\"#(rgb,8,8,3)color(1,0,0,1)\",\n\t\t\"#(rgb,8,8,3)color(0,1,0,1)\",\n\t\t\"#(rgb,8,8,3)color(0,0,1,1)\"\n\t]\n] call BIS_fnc_setObjectTexture;\n\n```\n\nidentical to:\n\n```sqf\n\nvehicle player setObjectTexture [0, \"#(rgb,8,8,3)color(1,0,0,1)\"];\nvehicle player setObjectTexture [1, \"#(rgb,8,8,3)color(0,1,0,1)\"];\nvehicle player setObjectTexture [2, \"#(rgb,8,8,3)color(0,0,1,1)\"];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "textures",
                            "description": "`String` or `Array` of `String`s"
                        }
                    ],
                    "outline": "[object, textures] call `BIS_fnc_setObjectTexture`",
                    "returns": "`Boolean` - `true` when done"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_setObjectTexture"
        },
        "configuration": {
            "label": "BIS_fnc_setObjectTexture",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Instantly set weather conditions and share it across network. Must be executed in [scheduled environment](https://community.bistudio.com/wiki/Scheduler%23Scheduled_Environment).",
            "examples": [
                {
                    "text": "```sqf\n[0.5] call BIS_fnc_setOvercast;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "value",
                            "description": "`Number` - value ranging from 0 (sunny) to 1 (stormy)."
                        }
                    ],
                    "outline": "[value] call `BIS_fnc_setOvercast`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_setOvercast"
        },
        "configuration": {
            "label": "BIS_fnc_setOvercast",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Rotate an object, giving it the specified pitch and bank, in degrees.\n\n**Pitch** is 0 when the object is level; 90 when pointing straight up; and -90 when pointing straight down.\n\n**Bank** is 0 when level; 90 when the object is rolled to the right, -90 when rolled to the left, and 180 when rolled upside down.\n\nNote that the object's **yaw** can be set with the `setDir` command, which should be issued before using this function, if required.\n\nThe pitch/bank can be leveled out (set to 0) by using the `setDir` command.",
            "examples": [
                {
                    "text": "```sqf\n[player, 45, -45] call BIS_fnc_setPitchBank;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        },
                        {
                            "name": "pitch",
                            "description": "`Number`"
                        },
                        {
                            "name": "bank",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "[object, pitch, bank] call `BIS_fnc_setPitchBank`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_setPitchBank"
        },
        "configuration": {
            "label": "BIS_fnc_setPitchBank",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Apply post-process effects according to template from [[Description.ext#CfgPostprocessTemplates|CfgPostprocessTemplates]].",
            "examples": [
                {
                    "text": "```sqf\n[\"Mediterranean\", 3, false] call BIS_fnc_setPPeffectTemplate;\n```"
                },
                {
                    "text": "```sqf\n\"RealIsBrown\" call BIS_fnc_setPPeffectTemplate;\n```"
                },
                {
                    "text": "```sqf\n\"MyPurplePP\" call BIS_fnc_setPPeffectTemplate; // can use a template defined in Description.ext\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "template",
                            "description": "`String` - (Optional, default \"Default\") the template name. An invalid value will fall back to \"Default\"."
                        },
                        {
                            "name": "transition",
                            "description": "`Number` - (Optional, default 0) time to apply the post-process"
                        },
                        {
                            "name": "global",
                            "description": "`Boolean` - (Optional, default `isMultiplayer`) should the post-process be broadcast over the network"
                        }
                    ],
                    "outline": "[template, transition, global] call `BIS_fnc_setPPeffectTemplate`",
                    "returns": "`Boolean` - true when done"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_setPPeffectTemplate"
        },
        "configuration": {
            "label": "BIS_fnc_setPPeffectTemplate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "A helper function for setting `rainParams` in multiplayer. The call to the function could be placed in [[Event Scripts#init.sqf|init.sqf]] to sync `rainParams` between all clients and JIP. Alternatively execute on server.",
            "examples": [
                {
                    "text": "```sqf\n\n0 setOvercast 1;\n0 setRain 1;\n0 setFog 0.1;\t\t\t\t\t\t// snow affects visibility at distance\nsetHumidity 0.9;\t\t\t\t\t// don't want to see dust clouds\nenableEnvironment [false, true];\t// don't want to see snakes and butterflies either\nforceWeatherChange;\n[\n\t\"a3\\data_f\\rainnormal_ca.paa\",\t// rainDropTexture\n\t1,\t\t\t\t\t\t\t\t// texDropCount\n\t0.01,\t\t\t\t\t\t\t// minRainDensity\n\t15,\t\t\t\t\t\t\t\t// effectRadius\n\t0.1,\t\t\t\t\t\t\t// windCoef\n\t2,\t\t\t\t\t\t\t\t// dropSpeed\n\t0.5,\t\t\t\t\t\t\t// rndSpeed\n\t0.5,\t\t\t\t\t\t\t// rndDir\n\t0.02,\t\t\t\t\t\t\t// dropWidth\n\t0.02,\t\t\t\t\t\t\t// dropHeight\n\t[0.1, 0.1, 0.1, 1],\t\t\t\t// dropColor\n\t0.1,\t\t\t\t\t\t\t// lumSunFront\n\t0.1,\t\t\t\t\t\t\t// lumSunBack\n\t5.5,\t\t\t\t\t\t\t// refractCoef\n\t0.3,\t\t\t\t\t\t\t// refractSaturation\n\ttrue,\t\t\t\t\t\t\t// snow\n\tfalse\t\t\t\t\t\t\t// dropColorStrong\n] call BIS_fnc_setRain;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "rainParams",
                            "description": "`Array` or `Config` - custom [ RainParticles](https://community.bistudio.com/wiki/Arma_3%3A_CfgWorlds_Config_Reference%23class_RainParticles%20) params, see `rainParams`. Use empty array [] or `configNull` to reset to default values"
                        }
                    ],
                    "outline": "rainParams `call` `BIS_fnc_setRain`",
                    "returns": "`Boolean`"
                }
            ],
            "effectLocality": "Global Effect",
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_setRain"
        },
        "configuration": {
            "label": "BIS_fnc_setRain",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Set rank of vehicle crew.",
            "examples": [
                {
                    "text": "```sqf\n[vehicle player, \"Captain\"] call BIS_fnc_setRank;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Object` - the vehicle whose crew's rank should be adjusted"
                        },
                        {
                            "name": "rank",
                            "description": "`String` or `Number` - rank name or rank ID, can be:"
                        }
                    ],
                    "outline": "[target, rank] call `BIS_fnc_setRank`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_setRank"
        },
        "configuration": {
            "label": "BIS_fnc_setRank",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tIncrease the respawn time based on a condition\n\n\tParameter(s):\n\t\t0: CODE - Condition, must return BOOL\n\t\t1: NUMBER - delay in seconds which is applied when the condition is true\n\t\t2: STRING - description displayed when the delay is in effect\n\n\tReturns:\n\tNOTHING\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_setRespawnDelay;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_setRespawnDelay` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_setRespawnDelay"
        },
        "configuration": {
            "label": "BIS_fnc_setRespawnDelay",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Set respawn loadouts.",
            "examples": [
                {
                    "text": "```sqf\n[player, [\"B_T_Recon_TL_F\"]] call BIS_fnc_setRespawnInventory;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Namespace`, `Side`, `Group` or `Object` - target where respawn inventories should be saved"
                        },
                        {
                            "name": "inventory",
                            "description": "`Array` of `String`s - classes from CfgInventory or CfgVehicles"
                        }
                    ],
                    "outline": "[target, inventory] call `BIS_fnc_setRespawnInventory`",
                    "returns": "`Array` - in format [target, id] used in `BIS_fnc_removeRespawnInventory`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_setRespawnInventory"
        },
        "configuration": {
            "label": "BIS_fnc_setRespawnInventory",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Set variable stored only on server. Clients can the download it using `BIS_fnc_getServerVariable`. Used when you want to share variables only to specific clients to prevent large traffic.",
            "examples": [
                {
                    "text": "```sqf\n[nil, \"playerHealth\", damage player] call BIS_fnc_setServerVariable;\n```"
                },
                {
                    "text": "```sqf\n[player, \"playerHealth\", damage player] call BIS_fnc_setServerVariable;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "namespace",
                            "description": "`Namespace`, `Object` or `Group` - (Optional, default `missionNamespace`)"
                        },
                        {
                            "name": "varName",
                            "description": "`String` - variable name"
                        },
                        {
                            "name": "value",
                            "description": "`Anything` - variable value"
                        }
                    ],
                    "outline": "[namespace, varName, value] call `BIS_fnc_setServerVariable`",
                    "returns": "`Boolean` - `true` when done"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_setServerVariable"
        },
        "configuration": {
            "label": "BIS_fnc_setServerVariable",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Set task parameters.\n\nCreate the task when it doesn't exist. **NOTE**:  See [Arma 3: Task Framework](https://community.bistudio.com/wiki/Arma%203%3A%20Task%20Framework) for more information.",
            "examples": [
                {
                    "text": "```sqf\n[\"Task_01\", true, [\"Protect the respawn point.\",\"Respawn Point West\",\"respawn_west\"], [MHQ,false], \"ASSIGNED\", 5, true, true, \"Defend\", true] call BIS_fnc_setTask;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "**taskId**",
                            "description": "`String` - Task ID"
                        },
                        {
                            "name": "**target**",
                            "description": "Task owner(s)"
                        },
                        {
                            "name": "**description**",
                            "description": "`Array` - Task description in the format [\"description\", \"title\", \"marker\"]"
                        },
                        {
                            "name": "**destination** (Optional)",
                            "description": "Task destination"
                        },
                        {
                            "name": "**state** (Optional)",
                            "description": "Task state"
                        },
                        {
                            "name": "**priority** (Optional)",
                            "description": "`Number` - priority. When a current task is completed, system select a next one with the larges priority >{{=}} 0"
                        },
                        {
                            "name": "**showNotification** (Optional)",
                            "description": "`Boolean` - true to show notification (default), false to disable it"
                        },
                        {
                            "name": "**isGlobal** (Optional)",
                            "description": "`Boolean` - true to set task globally (default), false to set it only locally"
                        },
                        {
                            "name": "**type** (Optional)",
                            "description": "`String` - task type from CfgTaskTypes, if not defined, type \"\" is being used"
                        },
                        {
                            "name": "**visibleIn3D** (Optional)",
                            "description": "`Boolean` - true to make task always visible in 3D (default: false)"
                        }
                    ],
                    "outline": "[taskId, target, description, (destination, state, priority, showNotification, isGlobal, type, visibleIn3D)] call `BIS_fnc_setTask`",
                    "returns": "`String` - task ID"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_setTask"
        },
        "configuration": {
            "label": "BIS_fnc_setTask",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Local task management executed by `BIS_fnc_setTask`. Not to be called independently!",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_setTaskLocal"
        },
        "configuration": {
            "label": "BIS_fnc_setTaskLocal",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Works similar to the `BIS_fnc_addToPairs` but it doesn't try to add values. It just overwrites the volue if the key already exists.",
            "examples": [
                {
                    "text": "```sqf\n[[[\"apple\",3],[\"pear\",2]],\"pear\",10] call BIS_fnc_setToPairs; // Returns [[\"apple\",3],[\"pear\",10]]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array` - array to search through"
                        },
                        {
                            "name": "key",
                            "description": "`String` - key to search for"
                        },
                        {
                            "name": "newValue",
                            "description": "`Anything` - (Optional, default 1) new value set if match was found"
                        }
                    ],
                    "outline": "[array, key, newValue] call `BIS_fnc_setToPairs`",
                    "returns": "`Array` - resulting modified array"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_setToPairs"
        },
        "configuration": {
            "label": "BIS_fnc_setToPairs",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Sets unit insignia (e.g., shoulder insignia on soldiers). See [Arma 3: Unit Insignia](https://community.bistudio.com/wiki/Arma%203%3A%20Unit%20Insignia) for more details and a list of official insignias.",
            "examples": [
                {
                    "text": "Place insignia:\n\n```sqf\n[player, \"111thID\"] call BIS_fnc_setUnitInsignia;\n```"
                },
                {
                    "text": "Remove insignia:\n\n```sqf\n[player, \"\"] call BIS_fnc_setUnitInsignia;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Object` - unit to which the insignia is going to be attached"
                        },
                        {
                            "name": "class",
                            "description": "`String` - CfgUnitInsignia class name to use. Use an empty string to remove the current insignia."
                        }
                    ],
                    "outline": "[target, className] call `BIS_fnc_setUnitInsignia`",
                    "returns": "`Boolean` - returns `true` if successful."
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_setUnitInsignia"
        },
        "configuration": {
            "label": "BIS_fnc_setUnitInsignia",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Set mass relative to the default vehicle mass (default mass being vehicle mass on first execution of this function).",
            "examples": [
                {
                    "text": "```sqf\n\n// default behaviour, change the mass according to the current phase of the animation sources\nresult = [this]\t\t\tcall BIS_fnc_setVehicleMass;\nresult = [this, [], 0]\tcall BIS_fnc_setVehicleMass;\n\n```"
                },
                {
                    "text": "```sqf\n\n// doesn't care about the current phase of animations, it will change the mass for the given sources\nresult = [this, [\"source1\", 1, \"source2\", 0]] call BIS_fnc_initVehicle;\n\n```"
                },
                {
                    "text": "```sqf\n\n// will do the same as the first example, then subtract 150 to the mass\nresult = [this, [], -150] call BIS_fnc_initVehicle;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object`"
                        },
                        {
                            "name": "animationInformation",
                            "description": "`Boolean` or `Array` - (Optional, default <sqf inline>[])"
                        },
                        {
                            "name": "massDifference",
                            "description": "`Number` - (Optional, default 0) value to add to the mass (can be negative)"
                        }
                    ],
                    "outline": "[vehicle, animationInformation, massDifference] call `BIS_fnc_setVehicleMass`",
                    "returns": "`Boolean` - success state"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_setVehicleMass"
        },
        "configuration": {
            "label": "BIS_fnc_setVehicleMass",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Shake curator camera.",
            "examples": [
                {
                    "text": "```sqf\n[] spawn BIS_fnc_shakeCuratorCamera;\n```"
                },
                {
                    "text": "```sqf\n[0.1, 5, [BIS_explosion_center,500]] spawn BIS_fnc_shakeCuratorCamera;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "strength",
                            "description": "`Number` - (Optional, default 0.01) shaking strength"
                        },
                        {
                            "name": "duration",
                            "description": "`Number` - (Optional, default 0.7) duration in seconds"
                        },
                        {
                            "name": "area",
                            "description": "`Array` - (Optional, default <sqf inline>[]) shake only when camera is in given distance from center. In format:"
                        }
                    ],
                    "outline": "[strength,duration,area] spawn `BIS_fnc_shakeCuratorCamera`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_shakeCuratorCamera"
        },
        "configuration": {
            "label": "BIS_fnc_shakeCuratorCamera",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tShake analogue gauges\n\n\tParameter(s):\n\t_this select 0 (Optional): NUMBER - shake limit (max distance gauges can move on screen from original position)\n\t_this select 1 (Optional): NUMBER - number of repeats\n\t_this select 2 (Optional): NUMBER - delay between every position change\n\t_this select 3 (Optional): ARRAY - list of IDCs\n\n\tReturns:\n\tNOTHING\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_shakeGauges;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_shakeGauges` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_shakeGauges"
        },
        "configuration": {
            "label": "BIS_fnc_shakeGauges",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "\"Camera shake\" function for the map. Shakes the map for a given amount of time with a given amount of force around the given camera center. Exits if map is not open.",
            "examples": [
                {
                    "text": "```sqf\n[2,20,getMarkerPos \"BIS_markerExtraction0\"] call BIS_fnc_shakeMap;\n```"
                },
                {
                    "text": "```sqf\n[2,20,getPos player] call BIS_fnc_shakeMap;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "duration",
                            "description": "`Number` - duration of the effect"
                        },
                        {
                            "name": "magnitude",
                            "description": "`Number` - magnitude of the shaking force"
                        },
                        {
                            "name": "center",
                            "description": "`Array` - center [position](https://community.bistudio.com/wiki/Position) of the effect"
                        }
                    ],
                    "outline": "[duration, magnitude, center] call `BIS_fnc_shakeMap`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_shakeMap"
        },
        "configuration": {
            "label": "BIS_fnc_shakeMap",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Riccardo Argiolas\n\n\tDescription:\n\t\tEvent handler function for the shakeMap.sqf function\n\n\tParameters:\n\tSelect 0 - NUMBER: duration of shake effect.\n\tSelect 1 - NUMBER: magnitude of the shaking force.\n\tSelect 2 - ARRAY: position of the camera center around which the shake effect occurs.\n\tSelect 3 - NUMBER: starting shake time (i.e. time elapsed since mission started till the start of the shake animation).\n\n\tReturns: None\n\n\tExamples:\n\n\t\tprivate _shakeEventCode = format [\"[%1, %2, %3, %4] call BIS_fnc_drawMapShake\", _shakeDuration, _shakeMagnitude, _shakeCenter, time];\n\t\tBIS_shakeEventHandler = _map ctrladdeventhandler [\"draw\",_shakeEventCode];\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_shakeMapEH`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_shakeMapEH"
        },
        "configuration": {
            "label": "BIS_fnc_shakeMapEH",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Meant to be run by the [Arma 3: Task Framework](https://community.bistudio.com/wiki/Arma%203%3A%20Task%20Framework) in MP scenarions in postInit. Do not run it on its own!",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_sharedObjectives"
        },
        "configuration": {
            "label": "BIS_fnc_sharedObjectives",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Show an AAN article.",
            "examples": [
                {
                    "text": "[[File:a3 orange aan.jpg|thumb|480px|Result]]\n\n```sqf\n\n[\n\t[\n\t\t[\"title\",\"My Title\"], \n\t\t[\"meta\",[\"Katherine Bishop\",[2035,2,24,11,38],\"CET\"]], \n\t\t[\"textbold\",\"This is a bold text\"], \n\t\t[\"image\",[\"\\a3\\Missions_F_Orange\\Data\\Img\\orange_overview_ca.paa\",\"Some image description\"]], \n\t\t[\"box\",[\"\\a3\\Missions_F_Orange\\Data\\Img\\Faction_IDAP_overview_CA.paa\",\"You won't believe how playing Showcase Laws of War can change your life!\"]], \n\t\t[\"text\",\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi tincidunt pretium ultricies. Etiam ac ornare est, quis posuere nisl. Mauris facilisis lectus eu turpis maximus consequat. Donec ut metus nec risus tristique mattis. Ut posuere rutrum tellus, ut molestie orci mattis id. Cras ultrices euismod diam, in venenatis nunc commodo eget. Interdum et malesuada fames ac ante ipsum primis in faucibus. Morbi congue dolor rutrum lectus euismod, ac faucibus magna molestie. Aliquam in libero sit amet eros sagittis tristique. Nam pellentesque dignissim aliquam.\"], \n\t\t[\"textlocked\",[\"Sed non est risus. Nulla condimentum at leo sed bibendum. Phasellus laoreet sit amet leo tincidunt consequat. Curabitur nec hendrerit purus. Nam massa nisi, mattis in aliquet consectetur, ornare eget nibh. Nunc dignissim, nibh sit amet ultrices tincidunt, mi nulla fermentum quam, non condimentum dolor eros vulputate massa.\",\"SUBSCRIBE PLZ\"]], \n\t\t[\"author\",[\"\\a3\\Missions_F_Orange\\Data\\Img\\avatar_journalist_ca.paa\",\"Katherine Bishop is a journalist\"]] \n\t]\n] call BIS_fnc_showAANArticle;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "arrayOfArrays",
                            "description": "[array](https://community.bistudio.com/wiki/Array) of [arrays](https://community.bistudio.com/wiki/Array); each subarray defines part of an article, can be:"
                        },
                        {
                            "name": "display",
                            "description": "`Display` - a display to make the AAN article a child of it"
                        },
                        {
                            "name": "fade",
                            "description": "`Boolean` - (Optional, default false) true to fade from black"
                        }
                    ],
                    "outline": "[arrayOfArrays, display, fade] call `BIS_fnc_showAANArticle`",
                    "returns": "`Display` - the AAN article display"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_showAANArticle"
        },
        "configuration": {
            "label": "BIS_fnc_showAANArticle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Show attributes window of an entity. When no attributes are available, no window is opened.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_vehicle] call BIS_fnc_showCuratorAttributes;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Object`, `Group`, `Array` (Waypoint) or `String` - entity whose attributes should be shown"
                        }
                    ],
                    "outline": "[target] call `BIS_fnc_showCuratorAttributes`",
                    "returns": "`Boolean` - `true` if windows was opened"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_showCuratorAttributes"
        },
        "configuration": {
            "label": "BIS_fnc_showCuratorAttributes",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Show feedback message when illegal operation is attempted in curator interface.\n\n\n{{{!}} class=\"valign-top\"\n{{!}} style=\"padding-right: 2em\" {{!}}\n**Interface**\n* **000**: Cannot exit Zeus interface\n* **003**: Cannot move camera outside the camera area\n**Placing**\n* **101**: Placing objects is not available\n* **102**: Insufficient resources\n* **103**: Selected position is not in an editing area\n**Placing waypoints**\n* **201**: Placing waypoints is not available\n* **206**: No objects, groups or waypoints selected\n**Editing**\n* **301**: Editing entities is not available\n* **303**: Selected position is not inside editing area\n* **304**: One of the selected entities is not in an editing area\n* **307**: Players cannot be edited\n* **308**: The vehicle is full\n{{!}}\n**Deleting**\n* **401**: Deleting entities is not available\n* **404**: One of the selected objects is not in an editing area\n* **405**: One of selected vehicles has non-editable crew in it\n* **407**: Players cannot be deleted\n** Destroying**\n* **501**: Destroying entities is not available\n* **504**: One of the selected objects is not in an editing area\n* **505**: One of the selected vehicles has non-editable crew in it\n* **506**: No objects selected\n* **507**: Players cannot be destroyed\n**Syncing**\n* **609**: At least one AI unit has to be present in synchronization\n* **610**: Cannot change player side (typo: _\"changle\"_)\n{{!}}}",
            "examples": [
                {
                    "text": "```sqf\n[objNull, 404] call BIS_fnc_showCuratorFeedbackMessage;\n```"
                },
                {
                    "text": "```sqf\n[objNull, \"You can't do that!\"] call BIS_fnc_showCuratorFeedbackMessage;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curator",
                            "description": "`Object` - _not used_"
                        },
                        {
                            "name": "messageInfo",
                            "description": "`Number` or `String` - error ID, or text message to be displayed"
                        }
                    ],
                    "outline": "[curator, messageInfo] call `BIS_fnc_showCuratorFeedbackMessage`",
                    "returns": "`Boolean` - `true` when done"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_showCuratorFeedbackMessage"
        },
        "configuration": {
            "label": "BIS_fnc_showCuratorFeedbackMessage",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Gradual revealing of a marker by setting its alpha to its original alpha or to a user-specified alpha.",
            "examples": [
                {
                    "text": "```sqf\n[\"BIS_marker\",2] spawn BIS_fnc_showMarker;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "marker",
                            "description": "`String` - marker name"
                        },
                        {
                            "name": "duration",
                            "description": "`Number` - (Optional, default 1) duration of revealing"
                        },
                        {
                            "name": "finalAlpha",
                            "description": "`Number` - (Optional, default 1) final alpha while showing is finished"
                        }
                    ],
                    "outline": "[marker, duration, finalAlpha] spawn `BIS_fnc_showMarker`",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_showMarker"
        },
        "configuration": {
            "label": "BIS_fnc_showMarker",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Unhide the markers sequentially.",
            "examples": [
                {
                    "text": "```sqf\n[[\"marker_1\",\"marker_2\",\"marker_n\"], 3, false] spawn BIS_fnc_showMarkers;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "marker",
                            "description": "`Array` - `Array` of `String`s markers"
                        },
                        {
                            "name": "duration",
                            "description": "`Number` - (Optional, default 1) duration"
                        },
                        {
                            "name": "hideAfter",
                            "description": "`Boolean` - (Optional, default `true`) `true` to keep markers displayed, `false` to hide them again afterward"
                        }
                    ],
                    "outline": "[marker, duration, hideAfter] spawn `BIS_fnc_showMarkerArray`",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_showMarkerArray"
        },
        "configuration": {
            "label": "BIS_fnc_showMarkerArray",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Show or hide given markers using fade effect.",
            "examples": [
                {
                    "text": "```sqf\n[\"hide\", [\"respawn_west\", \"respawn_east\"]] call BIS_fnc_showMarkers;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "action",
                            "description": "`String` - can be \"show\" or \"hide\". Any other value will be ignored."
                        },
                        {
                            "name": "markers",
                            "description": "`Array` of `String`s - markers to show/hide"
                        }
                    ],
                    "outline": "[action, markers] call `BIS_fnc_showMarkers`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_showMarkers"
        },
        "configuration": {
            "label": "BIS_fnc_showMarkers",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Show mission status with sectors, respawn tickets, etc.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_showMissionStatus;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "[] call `BIS_fnc_showMissionStatus`",
                    "returns": "`Boolean`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_showMissionStatus"
        },
        "configuration": {
            "label": "BIS_fnc_showMissionStatus",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Show a config-defined [notification](https://community.bistudio.com/wiki/Arma%203%3A%20Notification).",
            "examples": [
                {
                    "text": "```sqf\n[\"TaskSucceeded\", [\"\", \"Disable the nuke\"]] call BIS_fnc_showNotification;\n```"
                },
                {
                    "text": "```sqf\n[\"ScoreAdded\", [\"Disabled the nuke without triggering an alarm.\", 5]] call BIS_fnc_showNotification;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "**template**",
                            "description": "`String` - notification class name from [CfgNotifications](https://community.bistudio.com/wiki/Arma%203%3A%20Notification)"
                        },
                        {
                            "name": "**arguments**",
                            "description": "`Array` - (Optional, default <sqf inline>[]) additional `format` arguments to fill notification's fields (`**title}}, {{hl|description}}, {{hl|iconPicture}}, {{hl|iconText}}, {{hl|soundRadio**`)"
                        }
                    ],
                    "outline": "[template, arguments] call `BIS_fnc_showNotification`",
                    "returns": "`Boolean`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_showNotification"
        },
        "configuration": {
            "label": "BIS_fnc_showNotification",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Triggers the respawn screen in the given mode",
            "examples": [
                {
                    "text": "```sqf\n[\"open\"] call BIS_fnc_showRespawnMenu; // spawn does work as well\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "`String` - possible modes are \"open\", \"map\", \"spectate\" and \"close\""
                        }
                    ],
                    "outline": "<!-- [mode] call `BIS_fnc_showRespawnMenu`; -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_showRespawnMenu"
        },
        "configuration": {
            "label": "BIS_fnc_showRespawnMenu",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Disables respawn loadout, role or position for [Arma 3: Respawn](https://community.bistudio.com/wiki/Arma%203%3A%20Respawn).\n* Only role or only loadout can be limited at one moment, if there is limit for both, then only role uses limit.\n* If the limit definition for role is called multiple times with different numbers, then the highest number is used. \n* If disabling a position then respawnReference must be supplied",
            "examples": [
                {
                    "text": "```sqf\n[\n\t\"disable\",\n\tuiNamespace getVariable \"BIS_RscRespawnControlsMap_ctrlLocList\",\n\t2,\n\t\"Restricted for this part of mission!\",\n\tmyRespawnModule call BIS_fnc_objectVar\n] call BIS_fnc_showRespawnMenuDisableItem;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "**mode**",
                            "description": "`String` - available options are _disable_, _enable_ and _state_"
                        },
                        {
                            "name": "**uiControl**",
                            "description": "`Control` - list in which item should be disabled/enabled"
                        },
                        {
                            "name": "**listboxItem**",
                            "description": "`Number` or `String` - index or name of item in the respawn loadout/role/position listbox"
                        },
                        {
                            "name": "**message**",
                            "description": "`String` - message shown when disabled item is selected, use \"\" for default message"
                        },
                        {
                            "name": "**respawnReference**",
                            "description": "`String` - reference to respawn position either Marker name or [Object var name](https://community.bistudio.com/wiki/vehicleVarName)"
                        }
                    ],
                    "outline": "[mode, uiControl, listboxItem, message, respawnReference] call `BIS_fnc_showRespawnMenuDisableItem`",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_showRespawnMenuDisableItem"
        },
        "configuration": {
            "label": "BIS_fnc_showRespawnMenuDisableItem",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_showRespawnMenuDisableItemCheck;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_showRespawnMenuDisableItemCheck` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_showRespawnMenuDisableItemCheck"
        },
        "configuration": {
            "label": "BIS_fnc_showRespawnMenuDisableItemCheck",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_showRespawnMenuDisableItemDraw;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_showRespawnMenuDisableItemDraw` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_showRespawnMenuDisableItemDraw"
        },
        "configuration": {
            "label": "BIS_fnc_showRespawnMenuDisableItemDraw",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_showRespawnMenuHeader;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_showRespawnMenuHeader` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_showRespawnMenuHeader"
        },
        "configuration": {
            "label": "BIS_fnc_showRespawnMenuHeader",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_showRespawnMenuInventory;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_showRespawnMenuInventory` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_showRespawnMenuInventory"
        },
        "configuration": {
            "label": "BIS_fnc_showRespawnMenuInventory",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_showRespawnMenuInventoryDetails;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_showRespawnMenuInventoryDetails` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_showRespawnMenuInventoryDetails"
        },
        "configuration": {
            "label": "BIS_fnc_showRespawnMenuInventoryDetails",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_showRespawnMenuInventoryItems;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_showRespawnMenuInventoryItems` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_showRespawnMenuInventoryItems"
        },
        "configuration": {
            "label": "BIS_fnc_showRespawnMenuInventoryItems",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_showRespawnMenuInventoryLimit;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_showRespawnMenuInventoryLimit` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_showRespawnMenuInventoryLimit"
        },
        "configuration": {
            "label": "BIS_fnc_showRespawnMenuInventoryLimit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_showRespawnMenuInventoryLimitRefresh;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_showRespawnMenuInventoryLimitRefresh` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_showRespawnMenuInventoryLimitRefresh"
        },
        "configuration": {
            "label": "BIS_fnc_showRespawnMenuInventoryLimitRefresh",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_showRespawnMenuInventoryLimitRespawn;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_showRespawnMenuInventoryLimitRespawn` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_showRespawnMenuInventoryLimitRespawn"
        },
        "configuration": {
            "label": "BIS_fnc_showRespawnMenuInventoryLimitRespawn",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_showRespawnMenuInventoryList;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_showRespawnMenuInventoryList` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_showRespawnMenuInventoryList"
        },
        "configuration": {
            "label": "BIS_fnc_showRespawnMenuInventoryList",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_showRespawnMenuInventoryLoadout;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_showRespawnMenuInventoryLoadout` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_showRespawnMenuInventoryLoadout"
        },
        "configuration": {
            "label": "BIS_fnc_showRespawnMenuInventoryLoadout",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_showRespawnMenuInventoryMetadata;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_showRespawnMenuInventoryMetadata` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_showRespawnMenuInventoryMetadata"
        },
        "configuration": {
            "label": "BIS_fnc_showRespawnMenuInventoryMetadata",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_showRespawnMenuPosition;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_showRespawnMenuPosition` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_showRespawnMenuPosition"
        },
        "configuration": {
            "label": "BIS_fnc_showRespawnMenuPosition",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_showRespawnMenuPositionList;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_showRespawnMenuPositionList` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_showRespawnMenuPositionList"
        },
        "configuration": {
            "label": "BIS_fnc_showRespawnMenuPositionList",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_showRespawnMenuPositionMap;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_showRespawnMenuPositionMap` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_showRespawnMenuPositionMap"
        },
        "configuration": {
            "label": "BIS_fnc_showRespawnMenuPositionMap",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Internal function used by the [Arma 3: Respawn](https://community.bistudio.com/wiki/Arma%203%3A%20Respawn) system.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_showRespawnMenuPositionMapDraw"
        },
        "configuration": {
            "label": "BIS_fnc_showRespawnMenuPositionMapDraw",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_showRespawnMenuPositionMapHandle;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_showRespawnMenuPositionMapHandle` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_showRespawnMenuPositionMapHandle"
        },
        "configuration": {
            "label": "BIS_fnc_showRespawnMenuPositionMapHandle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Internal function used by the [Arma 3: Respawn](https://community.bistudio.com/wiki/Arma%203%3A%20Respawn) system.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_showRespawnMenuPositionMetadata"
        },
        "configuration": {
            "label": "BIS_fnc_showRespawnMenuPositionMetadata",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Internal function used by the [Arma 3: Respawn](https://community.bistudio.com/wiki/Arma%203%3A%20Respawn) system.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_showRespawnMenuPositionName"
        },
        "configuration": {
            "label": "BIS_fnc_showRespawnMenuPositionName",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_showRespawnMenuPositionRefresh;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_showRespawnMenuPositionRefresh` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_showRespawnMenuPositionRefresh"
        },
        "configuration": {
            "label": "BIS_fnc_showRespawnMenuPositionRefresh",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Displays a subtitle at the bottom of the screen.\n**NOTE**: If you want to play more subtitles, or want them to be played at a certain time, it might be easier to use `BIS_fnc_EXP_camp_playSubtitles`.",
            "examples": [
                {
                    "text": "```sqf\n[\"CROSSROAD\", \"Mission is a go, I repeat, mission is a go, Crossroad, out.\"] spawn BIS_fnc_showSubtitle;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "name",
                            "description": "`String` - name of the speaker"
                        },
                        {
                            "name": "subtitle",
                            "description": "`String` - subtitle to display"
                        }
                    ],
                    "outline": "[name, subtitle] spawn `BIS_fnc_showSubtitle`",
                    "returns": "[Script Handle](https://community.bistudio.com/wiki/Script%20Handle) - script controlling the displayed subtitle."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_showSubtitle"
        },
        "configuration": {
            "label": "BIS_fnc_showSubtitle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Shows time gap between two dates.",
            "examples": [
                {
                    "text": "```sqf\nprivate _dayStart = date;\n_dayStart set [3, 0]; // set hours to 0\n_dayStart set [4, 0]; // set minutes to 0\n_now = date;\n[_dayStart, _now] spawn BIS_fnc_showTime;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "startDate",
                            "description": "`Array` in `date` format"
                        },
                        {
                            "name": "endDate",
                            "description": "`Array` in `date` format"
                        }
                    ],
                    "outline": "[startDate, endDate] spawn `BIS_fnc_showTime`",
                    "returns": "Resource Layer"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_showTime"
        },
        "configuration": {
            "label": "BIS_fnc_showTime",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Hides or shows **weapon** information. Also hides _grenades_ information.",
            "examples": [
                {
                    "text": "```sqf\nfalse call BIS_fnc_showUnitInfo; // hides weapon information\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "showUnitInfo",
                            "description": "`Boolean` - `true` to show weapon information, `false` to hide it"
                        }
                    ],
                    "outline": "[showUnitInfo] call `BIS_fnc_showUnitInfo`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_showUnitInfo"
        },
        "configuration": {
            "label": "BIS_fnc_showUnitInfo",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Show welcome screen. Used in the main menu (works fine in [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor)).\n\n\n\n[[File:BIS_fnc_showWelcomeScreen.jpg|500px|center]]",
            "examples": [
                {
                    "text": "```sqf\n[findDisplay 313, true] call BIS_fnc_showWelcomeScreen;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "display",
                            "description": "`Display` - parent display where welcome screen is to be shown"
                        },
                        {
                            "name": "forceLatest",
                            "description": "`Boolean` - (Optional, default `false`) show latest welcome screen automatically"
                        }
                    ],
                    "outline": "[display, forceLatest] call `BIS_fnc_showWelcomeScreen`",
                    "returns": "`Boolean` - `true` when screen is opened"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_showWelcomeScreen"
        },
        "configuration": {
            "label": "BIS_fnc_showWelcomeScreen",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Shut downs the game.\n**Arma**: 3|this function will only close the game once back to the main menu.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_shutdown;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_shutdown`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_shutdown"
        },
        "configuration": {
            "label": "BIS_fnc_shutdown",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns colour of define side either as `Array` in format RGBA or the name of the colour as `String`",
            "examples": [
                {
                    "text": "```sqf\n[blufor, false] call BIS_fnc_sideColor; // returns [0,0.3,0.6,1]\n```"
                },
                {
                    "text": "```sqf\n[blufor, true] call BIS_fnc_sideColor; // returns \"ColorWEST\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "side",
                            "description": "`Side`"
                        },
                        {
                            "name": "returnString",
                            "description": "`Boolean` - (Optional, default `false`) wanted output:"
                        }
                    ],
                    "outline": "[side, returnString] call `BIS_fnc_sideColor`",
                    "returns": "or `String` or `Array` format [[Color|Color (RGBA)]]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_sideColor"
        },
        "configuration": {
            "label": "BIS_fnc_sideColor",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return config side number.\n{{Columns|4|\n* 0 {{=}} `opfor` (`east`)\n* 1 {{=}} `blufor` (`west`)\n* 2 {{=}} `independent` (`resistance`)\n* 3 {{=}} `civilian`\n* 4 {{=}} `sideUnknown`\n* 5 {{=}} `sideEnemy`\n* 6 {{=}} `sideFriendly`\n* 7 {{=}} `sideLogic`\n* 8 {{=}} `sideEmpty`\n* 9 {{=}} `sideAmbientLife`\n}}",
            "examples": [
                {
                    "text": "```sqf\nwest call BIS_fnc_sideID; // returns 1\n```"
                },
                {
                    "text": "```sqf\nhint format [\"Your side (%1) ID is %2\", playerSide, playerSide call BIS_fnc_sideID];\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "testedSide",
                            "description": "`Side` - the tested side (west, east, etc.)"
                        }
                    ],
                    "outline": "testedSide call `BIS_fnc_sideID`",
                    "returns": "`Number`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_sideID"
        },
        "configuration": {
            "label": "BIS_fnc_sideID",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Determines if side B is enemy to side A the way the game engine does it. The relationship table can be found here:  [Side Relations](https://community.bistudio.com/wiki/Side%20Relations).",
            "examples": [
                {
                    "text": "```sqf\nprivate _isEnemy = [west, east] call BIS_fnc_sideIsEnemy; //Checks if EAST is enemy to WEST.\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "sideA",
                            "description": "`Side`"
                        },
                        {
                            "name": "sideB",
                            "description": "`Side`"
                        }
                    ],
                    "outline": "[sideA, sideB] call `BIS_fnc_sideIsEnemy`",
                    "returns": "`Boolean` - true if side B is enemy to side A."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_sideIsEnemy"
        },
        "configuration": {
            "label": "BIS_fnc_sideIsEnemy",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Determines if side B is friendly to side A the way the game engine does it. The relationship table can be found here:  [Side Relations](https://community.bistudio.com/wiki/Side%20Relations).",
            "examples": [
                {
                    "text": "```sqf\nprivate _isFriendly = [west, east] call BIS_fnc_sideIsFriendly; //Checks if EAST is friendly to WEST.\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "sideA",
                            "description": "`Side`"
                        },
                        {
                            "name": "sideB",
                            "description": "`Side`"
                        }
                    ],
                    "outline": "[sideA, sideB] call `BIS_fnc_sideIsFriendly`",
                    "returns": "`Boolean` - true if side B is friendly to side A."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_sideIsFriendly"
        },
        "configuration": {
            "label": "BIS_fnc_sideIsFriendly",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns localized side name.\n{{Columns|2|\n* 0 / `opfor` (`east`) {{=}} \"OPFOR\"\n* 1 / `blufor` (`west`) {{=}} \"BLUFOR\"\n* 2 / `independent` (`resistance`) {{=}} \"Independent\"\n* 3 / `civilian` {{=}} \"Civilian\"\n* 4 / `sideUnknown` {{=}} \"Unknown\"\n* 5 / `sideEnemy` {{=}} \"Enemy\"\n* 6 / `sideFriendly` {{=}} \"Friendly\"\n* 7 / `sideLogic` {{=}} \"Game Logic\"\n* 8 / `sideEmpty` {{=}} \"Empty\"\n* 9 / `sideAmbientLife` {{=}} \"Ambient life\"\n}}",
            "examples": [
                {
                    "text": "```sqf\n[2] call BIS_fnc_sideName;\n```"
                },
                {
                    "text": "```sqf\n[independent] call BIS_fnc_sideName;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "input",
                            "description": "`Side` or `Number` - either side or side ID"
                        }
                    ],
                    "outline": "[input] call `BIS_fnc_sideName`",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_sideName"
        },
        "configuration": {
            "label": "BIS_fnc_sideName",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns unlocalized side name.",
            "examples": [
                {
                    "text": "```sqf\nwest call BIS_fnc_sideNameUnlocalized;//Returns \"WEST\"\n```"
                },
                {
                    "text": "```sqf\n0 call BIS_fnc_sideNameUnlocalized;//Returns \"EAST\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "input",
                            "description": "`Number` or `Side` - side ID or `side`"
                        }
                    ],
                    "outline": "input call `BIS_fnc_sideNameUnlocalized`",
                    "returns": "`String` - unlocalized name"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_sideNameUnlocalized"
        },
        "configuration": {
            "label": "BIS_fnc_sideNameUnlocalized",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns side type based on side ID. See `BIS_fnc_sideID` for more information.",
            "examples": [
                {
                    "text": "```sqf\n0 call BIS_fnc_sideType; // returns EAST\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "sideID",
                            "description": "`Number` - Side ID."
                        }
                    ],
                    "outline": "sideID call `BIS_fnc_sideType`",
                    "returns": "`Side` - side based on side ID"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_sideType"
        },
        "configuration": {
            "label": "BIS_fnc_sideType",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Moves marker to a new position. Simple version of `BIS_fnc_moveMarker`.",
            "examples": [
                {
                    "text": "```sqf\n[\"BIS_marker\",[1111,2222,0]] call BIS_fnc_moveMarker;\n```"
                },
                {
                    "text": "```sqf\n[\"BIS_marker\",(getMarkerPos \"BIS_marker2\"),2] call BIS_fnc_simpleMoveMarker;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "marker",
                            "description": "`String` - marker"
                        },
                        {
                            "name": "newPosition",
                            "description": "`Array` - new position"
                        },
                        {
                            "name": "duration",
                            "description": "`Number` - (Optional, default 5) how long it takes to move the marker in seconds"
                        }
                    ],
                    "outline": "[marker, newPosition, duration] call `BIS_fnc_simpleMoveMarker`",
                    "returns": "`Nothing`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_simpleMoveMarker"
        },
        "configuration": {
            "label": "BIS_fnc_simpleMoveMarker",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Get complete data needed for simple object creation.",
            "examples": [
                {
                    "text": "```sqf\n\n[\"B_Boat_Armed_01_minigun_F\"] call BIS_fnc_simpleObjectData;\n/*\n\t[\n\t\t\"B_Boat_Armed_01_minigun_F\",\n\t\t\"A3\\Boat_F\\Boat_Armed_01\\Boat_Armed_01_minigun_F.p3d\",\n\t\t1,\n\t\t3.323,\n\t\t[\n\t\t\t[\"damagehide\", 0],\n\t\t\t[\"turret_shake\", 0],\n\t\t\t[\"turret_shake_aside\", 0],\n\t\t\t[\"magazine_hide\", 0],\n\t\t\t[\"mainturret\", 0],\n\t\t\t[\"damagehideotocvez\", 0],\n\t\t\t[\"maingun\", 0.09],\n\t\t\t[\"damagehideotochlaven\", 0],\n\t\t\t[\"rearturret\", -3.16],\n\t\t\t[\"reargun\", 0.09],\n\t\t\t[\"muzzleflash\", 0],\n\t\t\t[\"zaslehrot\", 79],\n\t\t\t[\"zasleh2rot\", 600],\n\t\t\t[\"fuel\", 1],\n\t\t\t[\"mph\", 0],\n\t\t\t[\"rpm\", 0],\n\t\t\t[\"amps_random\", 0],\n\t\t\t[\"oil_random\", 0],\n\t\t\t[\"trim_random\", 0],\n\t\t\t[\"tmp_random\", 0],\n\t\t\t[\"volt_random\", 0],\n\t\t\t[\"drivingwheel\", 0],\n\t\t\t[\"ammobelt_hide\", 0],\n\t\t\t[\"bullet001_2_hide\", 0.33],\n\t\t\t[\"bullet002_2_hide\", 0.33],\n\t\t\t[\"bullet003_2_hide\", 0.33],\n\t\t\t[\"bullet004_2_hide\", 0.33],\n\t\t\t[\"bullet005_2_hide\", 0.33],\n\t\t\t[\"bullet006_2_hide\", 0.33],\n\t\t\t[\"positionlights\", 0],\n\t\t\t[\"gun_revolving\", 0.33],\n\t\t\t[\"muzzleflash2\", 0],\n\t\t\t[\"reargunner\", 0.09]\n\t\t],\n\t\t[\"zasleh\", \"p svetlo\", \"zadni svetlo\", \"brzdove svetlo\", \"clan\", \"podsvit pristroju\", \"poskozeni\"],\n\t\t-0.148,\n\t\t[\n\t\t\t\"\\A3\\boat_f\\Boat_Armed_01\\data\\Boat_Armed_01_ext_co.paa\",\n\t\t\t\"\\A3\\boat_f\\Boat_Armed_01\\data\\Boat_Armed_01_int_co.paa\",\n\t\t\t\"\\A3\\boat_f\\Boat_Armed_01\\data\\Boat_Armed_01_crows_blufor_co.paa\"\n\t\t],\n\t\tfalse,\n\t\tfalse\n\t]\n*/\n\n```"
                },
                {
                    "text": "```sqf\n[BIS_boat] call BIS_fnc_simpleObjectData;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "classname",
                            "description": "`Object` or `String`:"
                        }
                    ],
                    "outline": "[classname] call `BIS_fnc_simpleObjectData`",
                    "returns": "`Array` in format [class, model, reversed, verticalOffset, animationAdjustments, selectionsToHide, verticalOffsetWorld, textures, randomizeAnims, randomizeTexs]:\n* class: `String` - (Default \"\") class name from CfgVehicles\n* model: `String` - (Default \"\") path to the vehicle p3d mode\n* reversed: `Number` - (Default 0) reverse value, to fix orientation. 0: no change, 1: reverse\n* verticalOffset: `Array` - (Default 0) vertical offset\n* animationAdjustments: `Array` - (Default []) animation to animate, every element has this format: [_animationName:string, _animationState:scalar]\n* hiddenSelections: `Array` - (Default []) all listed selection will be hidden\n* verticalOffsetWorld: `Number` - vertical offset in World coordinates; similar to `ASL` but refers to object at [0, 0, 0], not its land contacts\n* textures: `Array` - textures currently applied to the object\n* randomizeAnims: `Boolean` - (Default false) true if vehicle supports randomization through animations\n* randomizeTexs: `Boolean` - (Default false) true if vehicle supports randomization of textures\n\n**NOTE**: Return values can directly be used with `BIS_fnc_adjustSimpleObject`."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_simpleObjectData"
        },
        "configuration": {
            "label": "BIS_fnc_simpleObjectData",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns config of current single mission.",
            "examples": [
                {
                    "text": "```sqf\nprivate _config = call BIS_fnc_singleMissionConfig;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_singleMissionConfig`",
                    "returns": "`Config` or `Nothing` - returns `Config` if mission was found, otherwise `Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_singleMissionConfig"
        },
        "configuration": {
            "label": "BIS_fnc_singleMissionConfig",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Activate mission related keys.",
            "examples": [
                {
                    "text": "```sqf\nprivate _activatedKeys = call BIS_fnc_singleMissionKeys;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_singleMissionKeys`",
                    "returns": "`Array` - list of activated keys"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_singleMissionKeys"
        },
        "configuration": {
            "label": "BIS_fnc_singleMissionKeys",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns name of currently selected single mission.",
            "examples": [
                {
                    "text": "```sqf\nprivate _missionName = call BIS_fnc_singleMissionName;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_singleMissionName`",
                    "returns": "`String` - the mission name"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_singleMissionName"
        },
        "configuration": {
            "label": "BIS_fnc_singleMissionName",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_singleWingSlideDoorClose`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_singleWingSlideDoorClose"
        },
        "configuration": {
            "label": "BIS_fnc_singleWingSlideDoorClose",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_singleWingSlideDoorOpen`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_singleWingSlideDoorOpen"
        },
        "configuration": {
            "label": "BIS_fnc_singleWingSlideDoorOpen",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "An internally used .fsm.",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_skirmishTrigger;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_skirmishTrigger` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_skirmishTrigger"
        },
        "configuration": {
            "label": "BIS_fnc_skirmishTrigger",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Spherical lerp, for correct lerping of normalized direction vectors",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "currentValue",
                            "description": "`Array` - the current value"
                        },
                        {
                            "name": "targetValue",
                            "description": "`Array` - the target value"
                        },
                        {
                            "name": "alpha",
                            "description": "`Number` - the alpha"
                        }
                    ],
                    "outline": "[currentValue, targetValue, alpha] call `BIS_fnc_slerp`",
                    "returns": "`Array` - interpolated value"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_slerp"
        },
        "configuration": {
            "label": "BIS_fnc_slerp",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Interpolates between 0 and 1 with smoothing at the limits. Formula is `**n<sup>2</sup> &times; (3 - 2n)**`.",
            "examples": [
                {
                    "text": "```sqf\nprivate _smoothedStep = 0.75 call BIS_fnc_smoothStep;\n```"
                },
                {
                    "text": "```sqf\n\n[0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0] apply { _x call BIS_fnc_smoothStep; };\n// returns [0, 0.028, 0.104, 0.216, 0.352, 0.5, 0.648, 0.784, 0.896, 0.972, 1]\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "number",
                            "description": "`Number` - a number in range 0..1. A value not in range will be [floored](https://community.bistudio.com/wiki/floor) to 0 or [ceiled](https://community.bistudio.com/wiki/ceil) to 1"
                        }
                    ],
                    "outline": "number call `BIS_fnc_smoothStep`",
                    "returns": "`Number` - interpolation result"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_smoothStep"
        },
        "configuration": {
            "label": "BIS_fnc_smoothStep",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Alphabetically sort an array of strings without modifying the original. See also `sort`.",
            "examples": [
                {
                    "text": "```sqf\nprivate _sortedNames = [\"John\", \"Jane\", \"Julia\", \"Geronimo\"] call BIS_fnc_sortAlphabetically; // will return [\"Geronimo\", \"Jane\", \"John\", \"Julia\"]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "arrayOfStrings",
                            "description": "`Array` of `String`s"
                        }
                    ],
                    "outline": "arrayOfStrings call `BIS_fnc_sortAlphabetically`",
                    "returns": "`Array` of `String`s sorted alphabetically."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_sortAlphabetically"
        },
        "configuration": {
            "label": "BIS_fnc_sortAlphabetically",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Sorts an array according to given algorithm. See `sort` for simple sorts.",
            "examples": [
                {
                    "text": "```sqf\n\n// sort numbers from lowest to highest\n_sortedNumbers = [[1,-80,0,480,15,-40], [], {_x}, \"ASCEND\"] call BIS_fnc_sortBy;\n\n```"
                },
                {
                    "text": "```sqf\n\n// sort helicopters by distance from player\n_closestHelicopters = [[_heli1,_heli2,_heli3], [], { player distance _x }, \"ASCEND\"] call BIS_fnc_sortBy;\n\n```"
                },
                {
                    "text": "```sqf\n\n// sort enemy by distance from friendly unit (referenced by local variable), the furthest first\n_furtherstEnemy = [[_enemy1,_enemy2,_enemy3], [_friendly], { _input0 distance _x }, \"DESCEND\", { canMove _x }] call BIS_fnc_sortBy;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array` - any unsorted array. Can contain any types"
                        },
                        {
                            "name": "parameters",
                            "description": "`Array`"
                        },
                        {
                            "name": "algorithm",
                            "description": "`Code` - (Optional, default <sqf inline>{ _x })"
                        },
                        {
                            "name": "direction",
                            "description": "`String` - (Optional, default \"ASCEND\") case-insensitive"
                        },
                        {
                            "name": "filter",
                            "description": "`Code` - (Optional, default <sqf inline>{ true }) code that needs to evaluate true for the array item to be sorted, otherwise item is removed"
                        }
                    ],
                    "outline": "[array, parameters, algorithm, direction, filter] call `BIS_fnc_sortBy`",
                    "returns": "`Array` - sorted array"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_sortBy"
        },
        "configuration": {
            "label": "BIS_fnc_sortBy",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Sorts an array of numbers from lowest (left) to highest (right). The passed array is modified by reference.\nThis function uses the quick sort algorithm.\n\n**Arma**: 3|If you do not need the return value, use `sort` instead.",
            "examples": [
                {
                    "text": "```sqf\n[5,9,987,6,97,8,6] call BIS_fnc_sortNum; // returns [5,6,6,8,9,97,987]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array` of `Number`s"
                        }
                    ],
                    "outline": "array call `BIS_fnc_sortNum`",
                    "returns": "`Array` - sorted array"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_sortNum"
        },
        "configuration": {
            "label": "BIS_fnc_sortNum",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Execute given code with or without parameter.\n**Arma**: 3|Since **(Arma 3)**",
            "examples": [
                {
                    "text": "Show a message for the current player:\n\n```sqf\n[[\"Hello\"],  { hint (_this select 0) }] spawn BIS_fnc_spawn;\n```"
                },
                {
                    "text": "Show a message to all connected players:\n\n```sqf\n\n[[[\"Hello\"], { hint (_this select 0) }], \"BIS_fnc_spawn\", true, false, false] call BIS_fnc_MP; // obsolete, use remoteExec\n\n[\"Hello\", { hint (_this select 0) }] remoteExec [\"BIS_fnc_spawn\"];\t// since the introduction of remoteExec\n[\"Hello\", { hint (_this select 0) }] remoteExec [\"spawn\"];\t\t\t// BIS_fnc_spawn is obsolete\n[\"Hello\"] remoteExec [\"hint\"];\t\t\t\t\t\t\t\t\t\t// best solution here\n\n```"
                },
                {
                    "text": "```sqf\n{ hint \"Hello\" } spawn BIS_fnc_spawn;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "params",
                            "description": "`Anything` - function arguments"
                        },
                        {
                            "name": "code",
                            "description": "`Code` - function code"
                        },
                        {
                            "name": "code",
                            "description": "`Code`"
                        }
                    ],
                    "outline": "code spawn `BIS_fnc_spawn`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_spawn"
        },
        "configuration": {
            "label": "BIS_fnc_spawn",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Function to fill all crew positions in a vehicle, including turrets.\nIn dummy mode no objects are created and the returned array contains only ones; this mode can be used to count the actual crew of an existing vehicle or vehicle type (see also `crew`, `fullCrew`).",
            "examples": [
                {
                    "text": "```sqf\n[BIS_vehicle, group player] call BIS_fnc_spawnCrew;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - vehicle"
                        },
                        {
                            "name": "group",
                            "description": "`Group` - crew's group"
                        },
                        {
                            "name": "dummyMode",
                            "description": "`Boolean` - (Optional, default `false`) `true` to enable dummy mode"
                        },
                        {
                            "name": "dummyType",
                            "description": "`String` - (Optional, default \"\") dummy type"
                        },
                        {
                            "name": "crewType",
                            "description": "`String` - (Optional, default \"\") crew type"
                        }
                    ],
                    "outline": "[vehicle, group, dummyMode, dummyType, crewType]] call `BIS_fnc_spawnCrew`",
                    "returns": "`Array` or `Number` - created crew objects or crew count"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_spawnCrew"
        },
        "configuration": {
            "label": "BIS_fnc_spawnCrew",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Constantly spawns enemies around a player according to array of enemy classes. The units will try to hunt down the player.",
            "examples": [
                {
                    "text": "```sqf\n[player, player, opfor, [\"O_Soldier_F\"]] spawn BIS_fnc_spawnEnemy;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "aPlayer",
                            "description": "`Object` - a unit that [is a player](https://community.bistudio.com/wiki/isPlayer)"
                        },
                        {
                            "name": "target",
                            "description": "`Object` - reference object (enemies will be spawned on same direction in respect to the player)"
                        },
                        {
                            "name": "side",
                            "description": "`Side` - side of the spawned enemies"
                        },
                        {
                            "name": "classes",
                            "description": "`Array` of `String`s - list of enemy classes (units will form a group together)"
                        },
                        {
                            "name": "maxEnemies",
                            "description": "`Number` - (Optional, default 10) maximum number of enemies at once"
                        },
                        {
                            "name": "delay",
                            "description": "`Number` - (Optional, default 30) time between spawn waves"
                        },
                        {
                            "name": "code",
                            "description": "`Code` - (Optional, default {}) - code to execute on each unit (referenced by [_this](https://community.bistudio.com/wiki/Magic%20Variables%23this))"
                        }
                    ],
                    "outline": "[aPlayer, target, side, classes, maxEnemies, delay, code] spawn `BIS_fnc_spawnEnemy`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_spawnEnemy"
        },
        "configuration": {
            "label": "BIS_fnc_spawnEnemy",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Function which handles the spawning of a dynamic group of characters.  The composition of the `group` can be passed to the function.  Alternatively a number can be passed and the function will spawn that amount of characters with a random type.\n\n**NOTE**: **Before Arma 3** a side's Center must have been created before a group may be spawned either by using `createCenter` or an editor placed (0% Probability of Presence is fine) unit of the appropriate side.",
            "examples": [
                {
                    "text": "Spawn five random EAST units at aPosition:\n\n```sqf\n[getPosATL aPosition, east, 5] call BIS_fnc_spawnGroup;\n```"
                },
                {
                    "text": "Spawn a Stryker MGS Platoon at marker \"tankSpawn\":\n\n```sqf\n[getMarkerPos \"tankSpawn\", side player, (configFile >> \"CfgGroups\" >> \"West\" >> \"BIS_US\" >> \"Armored\" >> \"US_MGSPlatoon\")] call BIS_fnc_spawnGroup;\n```"
                },
                {
                    "text": "Spawn a TK Militia Medic and Soldier at aPos facing south:\n\n```sqf\n[getPos aPos, east, [\"TK_INS_Bonesetter_EP1\", \"TK_INS_Soldier_2_EP1\"],[],[],[],[],[],180] call BIS_fnc_spawnGroup;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Array` format `Position` - group's starting position"
                        },
                        {
                            "name": "side",
                            "description": "`Side` - group's side"
                        },
                        {
                            "name": "toSpawn",
                            "description": "can be one of:"
                        },
                        {
                            "name": "relPositions",
                            "description": "`Array` of `Position`s (Optional, default <sqf inline>[]) a list of relative positions"
                        },
                        {
                            "name": "ranks",
                            "description": "`Array` of `String`s/`Number`s - (Optional, default <sqf inline>[]) ranks (see `BIS_fnc_setRank`) - **must** be same size as _toSpawn_<nowiki/>'s array"
                        },
                        {
                            "name": "skillRange",
                            "description": "`Array` of `Number`s - (Optional, default <sqf inline>[]) skill range format [min, max]"
                        },
                        {
                            "name": "ammoRange",
                            "description": "`Array` of `Number`s - (Optional, default <sqf inline>[]) ammunition range (0..1) format [min, max]"
                        },
                        {
                            "name": "randomControls",
                            "description": "`Array` of `Number`s - (Optional, default [-1, 1]) to format [minUnits, chance]:"
                        },
                        {
                            "name": "azimuth",
                            "description": "`Number` - (Optional, default 0) azimuth/`direction`"
                        },
                        {
                            "name": "precisePos",
                            "description": "`Boolean` - (Optional, default `true`) forces precise position placement"
                        },
                        {
                            "name": "maxVehicles",
                            "description": "`Number` - (Optional, default 10e10) vehicle number limit"
                        }
                    ],
                    "outline": "[position, side, toSpawn, relPositions, ranks, skillRange, ammoRange, randomControls, azimuth, precisePos, maxVehicles] call `BIS_fnc_spawnGroup`",
                    "returns": "`Group`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_spawnGroup"
        },
        "configuration": {
            "label": "BIS_fnc_spawnGroup",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Create a stack of objects at given position or on top of given object (eg. table).",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _randomPos = [(random 0.2) -0.1, (random 0.2) -0.1, 0];\n_objects = [[_table, \"TOP\"], \"Box_NATO_Wps_F\", 3, _randomPos,(random 20)-10] call BIS_fnc_spawnObjects;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Array` format [PositionASL](https://community.bistudio.com/wiki/Position%23PositionASL), or `Array` as [referenceObject, placement]"
                        },
                        {
                            "name": "className",
                            "description": "`String` - class of the object(s) to spawn; all will use the same class"
                        },
                        {
                            "name": "count",
                            "description": "`Number` - (Optional, default: 1) how many objects will be spawned"
                        },
                        {
                            "name": "offsetMatrix",
                            "description": "`Array` - (Optional, default: [0,0,0]) starting spawning position offset"
                        },
                        {
                            "name": "offsetDir",
                            "description": "`Number` - (Optional, default: 0) starting spawning direction offset"
                        },
                        {
                            "name": "dirNoise",
                            "description": "`Code` - (Optional, default: {0}) spawned object direction delta from the starting direction, defined as code returning dir delta value"
                        },
                        {
                            "name": "enableSimulation",
                            "description": "`Boolean` - (Optional, default: false) shall the simulation of the spawned objects be enabled or not"
                        }
                    ],
                    "outline": "[position, className, count, offsetMatrix, offsetDir, dirNoise, enableSimulation] call `BIS_fnc_spawnObjects`",
                    "returns": "`Array` of created `Object`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_spawnObjects"
        },
        "configuration": {
            "label": "BIS_fnc_spawnObjects",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Spawns given function and executes it in the order it was called in case multiple calls are made. If mutex name is not specified, function name is used.",
            "examples": [
                {
                    "text": "```sqf\n\nmyFnc = { diag_log [_this, canSuspend] };\nfor \"_i\" from 0 to 1000 do { [_i, \"myFnc\"] call BIS_fnc_spawnOrdered };\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "params",
                            "description": "`Anything` - function parameters"
                        },
                        {
                            "name": "functionName",
                            "description": "`String` - function name in current namespace"
                        },
                        {
                            "name": "mutexName",
                            "description": "`String` - (Optional, default functionName) this is a reference to group of spawns. It's saved in the `missionNamespace` variable **BIS_fnc_spawnOrdered_mutexName**"
                        }
                    ],
                    "outline": "[params, functionName, mutexName] call `BIS_fnc_spawnOrdered`",
                    "returns": "`Boolean` - returns `false` if function name is empty, otherwise `true`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_spawnOrdered"
        },
        "configuration": {
            "label": "BIS_fnc_spawnOrdered",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Function to spawn a certain vehicle type with all crew (including turrets). The vehicle can either become part of an existing `group` or create a new `group`.\n\n**IMPORTANT**: Before **Arma 3** (Arma 2, {{tkoh):\n* a [Functions Module](https://community.bistudio.com/wiki/Functions%20Library) **must** be placed in order to use this function\n* a side's [center](https://community.bistudio.com/wiki/createCenter) has to exist (by already having a unit of said side on the map)/be created _via_ `createCenter` or the vehicle will spawn empty.\n}}",
            "examples": [
                {
                    "text": "```sqf\n[getPos player, 180, \"BMP3\", east] call BIS_fnc_spawnVehicle;\n```"
                },
                {
                    "text": "```sqf\n\nprivate _result = [getPos player, 180, \"BMP3\", east] call BIS_fnc_spawnVehicle;\n\nprivate _vehicle = _result select 0;\n_result params [\"_vehicle\", \"_crew\", \"_group\"];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Array` format `Position` - desired `position`"
                        },
                        {
                            "name": "direction",
                            "description": "`Number` - desired azimuth/`direction`"
                        },
                        {
                            "name": "type",
                            "description": "`String` - [type](https://community.bistudio.com/wiki/typeOf) of the vehicle"
                        },
                        {
                            "name": "sideOrGroup",
                            "description": "`Side` or `Group` - side or existing group"
                        }
                    ],
                    "outline": "[position, direction, type, sideOrGroup] call `BIS_fnc_spawnVehicle`",
                    "returns": "`Array` format [createdVehicle, crew, group]:\n* createdVehicle: `Object` - the created vehicle\n* crew: `Array` of `Object`s - the vehicle's crew members\n* group: `Group` - created or passed group"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_spawnVehicle"
        },
        "configuration": {
            "label": "BIS_fnc_spawnVehicle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Splits given string according to given separator(s).\n**Arma**: 3|See `splitString`.",
            "examples": [
                {
                    "text": "```sqf\n[\"this is a test\", \" \"] call BIS_fnc_splitString; // returns [\"this\", \"is\", \"a\", \"test\"]\n```"
                },
                {
                    "text": "```sqf\n[\"this is a test\", \"st\"] call BIS_fnc_splitString; // returns [\"hi\",\" i\",\" a \",\"e\"]\n```"
                },
                {
                    "text": "```sqf\n[\"this is a test\", \"is\"] call BIS_fnc_splitString; // returns [\"th\",\" \",\" a te\",\"t\"]\n```"
                },
                {
                    "text": "```sqf\n[\"this is a test\", \"is\", true] call BIS_fnc_splitString; // returns [\"th\",\" \",\" a test\"]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "stringToSplit",
                            "description": "`String`"
                        },
                        {
                            "name": "separators",
                            "description": "`String` - (Optional, default \"\") by default each letter is a separator. If _byWord_ is set to `true`, the separator will be treated as whole word"
                        },
                        {
                            "name": "byWord",
                            "description": "`Boolean` - (Optional, default `false`) by default uses `splitString` behaviour e.g. each letter is a separator. If set to `true`, the separator will be treated as whole word"
                        }
                    ],
                    "outline": "[stringToSplit, separators, byWord] call `BIS_fnc_splitString`",
                    "returns": "`Array` of `String`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_splitString"
        },
        "configuration": {
            "label": "BIS_fnc_splitString",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Make spotter report target distance to sniper. Will only stop if one of the two units dies.",
            "examples": [
                {
                    "text": "```sqf\n[player, spotter] spawn BIS_fnc_spotter;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "sniper",
                            "description": "`Object` - sniper unit"
                        },
                        {
                            "name": "spotter",
                            "description": "`Object` - spotter unit"
                        }
                    ],
                    "outline": "[sniper, spotter] spawn `BIS_fnc_spotter`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_spotter"
        },
        "configuration": {
            "label": "BIS_fnc_spotter",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Continuously set WP of one group to a different group to hunt it. It does not change the group's behaviour.\n\nScript terminates if one of the groups is eliminated or if the optional condition is activated.",
            "examples": [
                {
                    "text": "```sqf\nprivate _stalking = [BIS_grpStalkers, BIS_grpPlayer] spawn BIS_fnc_stalk;\n```"
                },
                {
                    "text": "```sqf\nprivate _stalking = [grp1, group player, nil, nil, { player distance BIS_Heli < 100 }, \"BIS_mrkRetreatMarker\"] spawn BIS_fnc_stalk;\n```"
                },
                {
                    "text": "```sqf\nprivate _stalking = [BIS_grpStalkers, BIS_grpPlayer, 20, 10, { BIS_Return }, 1] spawn BIS_fnc_stalk;\n```"
                },
                {
                    "text": "```sqf\nprivate _stalking = [BIS_grpStalkers, BIS_grpPlayer, 5, 0, { dayTime > 20 }, [3600,600,0]] spawn BIS_fnc_stalk;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "stalker",
                            "description": "`Group` - the group that will move towards the other"
                        },
                        {
                            "name": "stalked",
                            "description": "`Group` - the group that will be followed"
                        },
                        {
                            "name": "refresh",
                            "description": "`Number` - (Optional, default 10, minimum 5) time between waypoint updates"
                        },
                        {
                            "name": "radius",
                            "description": "`Number` - (Optional, default 0, minimum 0) waypoint \"precision\""
                        },
                        {
                            "name": "endCondition",
                            "description": "`Code` - (Optional, default {`false`}) condition that if true stops _stalker_ to follow _stalked_"
                        },
                        {
                            "name": "endDestination",
                            "description": "`String` or `Position` or `Object` or `Number` - (Optional, default 0) destination _stalker_ will go after _endCondition_ is met (or _stalked_ is killed)"
                        }
                    ],
                    "outline": "[stalker, stalked, refresh, radius, endCondition, endDestination] spawn `BIS_fnc_stalk`",
                    "returns": "`Boolean` - `true` when done"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_stalk"
        },
        "configuration": {
            "label": "BIS_fnc_stalk",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Register a loading screen. Start the loading when it is the first one registered.",
            "examples": [
                {
                    "text": "```sqf\n[\"myLoadingScreen\", \"Loading… wait for my splendid™ mission!\"] call BIS_fnc_startLoadingScreen;\nuiSleep 3;\n\"myLoadingScreen\" call BIS_fnc_endLoadingScreen;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "screenId",
                            "description": "`String` - screen ID, will be used in `BIS_fnc_endLoadingScreen`"
                        },
                        {
                            "name": "layout",
                            "description": "`String` - loading text. _has no effect in Arma 3_"
                        }
                    ],
                    "outline": "[screenId, layout] call `BIS_fnc_startLoadingScreen`",
                    "returns": "`Boolean` - true when registered"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_startLoadingScreen"
        },
        "configuration": {
            "label": "BIS_fnc_startLoadingScreen",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Parses mission params and stores them into public variable **\"BIS_fnc_storeParamsValues_data\"**. Use `BIS_fnc_getParamValue` to retrieve params values from the variable.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_storeParamsValues;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_storeParamsValues`",
                    "returns": "`Nothing`"
                }
            ],
            "serverExecution": true,
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_storeParamsValues"
        },
        "configuration": {
            "label": "BIS_fnc_storeParamsValues",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Animates a Strategic Map.",
            "examples": [
                {
                    "text": "```sqf\n[configFile >> \"CfgORBAT\" >> \"BIS\" >> \"B_1_A_1_2\", 5] spawn BIS_fnc_strategicMapAnimate;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Config` or `Position` - either config path to target group, or absolute position in format [x,y,z] or [x,y]"
                        },
                        {
                            "name": "time",
                            "description": "`Number` - commit time in seconds"
                        }
                    ],
                    "outline": "[target,time] spawn `BIS_fnc_strategicMapAnimate`",
                    "returns": "`Boolean` - `true` when animation is applied"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_strategicMapAnimate"
        },
        "configuration": {
            "label": "BIS_fnc_strategicMapAnimate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Internal function used by `BIS_fnc_strategicMapOpen`.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_strategicMapMouseButtonClick"
        },
        "configuration": {
            "label": "BIS_fnc_strategicMapMouseButtonClick",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Creates a strategic map.\n[[File:A3 strategicMap.jpg|center|600px]]",
            "examples": [
                {
                    "text": "```sqf\n\n[\n\tfindDisplay 46,\n\t[2000,2000,0],\n\t[\n\t\t[\n\t\t\t[2000,2000,0],\n\t\t\t{systemChat format [\"%1\",name ((_this # 9) # 0)]},\n\t\t\t\"1st Mission\",\n\t\t\t\"This is mission one\",\n\t\t\t\"Name of mission's player\",\n\t\t\t\"\\A3\\Data_F_Exp\\Logos\\arma3_exp_icon_ca.paa\",\n\t\t\t1.5,\n\t\t\t[player]\n\t\t],\n\t\t[\n\t\t\t[1000,1000,0],\n\t\t\t{systemChat format [\"%1\",name ((_this # 9) # 0)]},\n\t\t\t\"2nd Mission\",\n\t\t\t\"This is mission two\",\n\t\t\t\"Name of mission's player\",\n\t\t\t\"\\A3\\Data_F_Argo\\Logos\\arma3_argo_logoTitle_ca.paa\",\n\t\t\t1.5,\n\t\t\t[player]\n\t\t]\n\t],\n\t[\n\t\t[\n\t\t\t[3000,3000,0],\n\t\t\tconfigFile >> \"CfgORBAT\" >> \"BIS\" >> \"B_1_A_1_2\",\n\t\t\tconfigFile >> \"CfgORBAT\" >> \"BIS\" >> \"B_1\",\n\t\t\t[],\n\t\t\t10\n\t\t]\n\t],\n\t[\n\t\t\"marker_1\",\n\t\t\"marker_2\"\n\t],\n\t[\n\t\t[\n\t\t\t\"\\A3\\Ui_f\\data\\Logos\\arma3_white_ca.paa\",\n\t\t\t[0,0,0,1],\n\t\t\t[4000,4000,0],\n\t\t\t8,\n\t\t\t8,\n\t\t\t0,\n\t\t\t\"Arma 3 Logo\",\n\t\t\ttrue\n\t\t]\n\t],\n\t0,\n\tfalse,\n\t1,\n\ttrue,\n\t\"Strategic Map Example\",\n\tfalse,\n\t\"\\A3\\Ui_f\\data\\Logos\\arma3_white_ca.paa\"\n] call BIS_fnc_strategicMapOpen;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "display",
                            "description": "`Display` - parent display. When empty, mission display is used."
                        },
                        {
                            "name": "pos",
                            "description": "`Array` format `Position` - default view position in format [x,y,y] or [x,y]"
                        },
                        {
                            "name": "missions",
                            "description": "`Array` - list of missions, each `Array` in format:"
                        },
                        {
                            "name": "ORBATs",
                            "description": "`Array` - list of ORBAT, each `Array` in format:"
                        },
                        {
                            "name": "markers",
                            "description": "`Array` of `String`s - list of markers revealed in strategic map (will be hidden when map is closed)"
                        },
                        {
                            "name": "images",
                            "description": "`Array` - list of custom images, each `Array` in format:"
                        },
                        {
                            "name": "weather",
                            "description": "`Number` - overcast, from 0 - 1, where 1 means cloudy weather"
                        },
                        {
                            "name": "night",
                            "description": "`Boolean` - `true` for night version of strategic map (darker with blue tone)"
                        },
                        {
                            "name": "scale",
                            "description": "`Number` - default map scale coeficient (1 is automatic scale)"
                        },
                        {
                            "name": "simulation",
                            "description": "`Boolean`] - (Optional, default `false` `true` to enable simulation while the map is opened"
                        },
                        {
                            "name": "label",
                            "description": "`String` - (Optional, default \"Select a mission\") bottom bar action label text"
                        },
                        {
                            "name": "missionName",
                            "description": "`Boolean` - (Optional, default `true`) `true` to show icon label as a mission name"
                        },
                        {
                            "name": "missionIcon",
                            "description": "`String` - (Optional, default \"\\A3\\Ui_f\\data\\Map\\GroupIcons\\badge_rotate_%1_gs.paa\") path to mission icon texture "
                        }
                    ],
                    "outline": "[display, pos, missions, ORBATs, markers, images, weather, night, scale, simulation, label, missionName, missionIcon] call `BIS_fnc_strategicMapOpen`",
                    "returns": "`Display` - rscDisplayStrategicMap"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_strategicMapOpen"
        },
        "configuration": {
            "label": "BIS_fnc_strategicMapOpen",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Converts serialized data from `BIS_fnc_markerToString` into a global map marker",
            "examples": [
                {
                    "text": "```sqf\n\"|marker_0|[3799.0110,2781.9880,0.0000]|mil_pickup|ICON|[1,1]|0|Solid|Default|1|You are here\" call BIS_fnc_stringToMarker;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "data",
                            "description": "`String` - serialized data"
                        }
                    ],
                    "outline": "data call `BIS_fnc_stringToMarker`",
                    "returns": "`String` - created global marker"
                }
            ],
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_stringToMarker"
        },
        "configuration": {
            "label": "BIS_fnc_stringToMarker",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Converts serialized data from `BIS_fnc_markerToString` into a [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality) map marker",
            "examples": [
                {
                    "text": "```sqf\n\"|marker_0|[3799.0110,2781.9880,0.0000]|mil_pickup|ICON|[1,1]|0|Solid|Default|1|You are here\" call BIS_fnc_stringToMarkerLocal;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "data",
                            "description": "`String` - serialized data"
                        }
                    ],
                    "outline": "data call `BIS_fnc_stringToMarkerLocal`",
                    "returns": "`String` - created [local](https://community.bistudio.com/wiki/Multiplayer%20Scripting%23Locality) marker"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_stringToMarkerLocal"
        },
        "configuration": {
            "label": "BIS_fnc_stringToMarkerLocal",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_Same function as `BIS_fnc_returnChildren`_",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_subClasses;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_subClasses` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_subClasses"
        },
        "configuration": {
            "label": "BIS_fnc_subClasses",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns a sub-selection of the passed array.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _array = [\"a\", \"b\", true, 3, 8];\n[_array, 2] call BIS_fnc_subSelect;\t\t\t// returns [true,3,8]\n\n```"
                },
                {
                    "text": "```sqf\n[_array, -2] call BIS_fnc_subSelect;\t\t\t// returns [3,8]\n```"
                },
                {
                    "text": "```sqf\n[_array, 1, 3] call BIS_fnc_subSelect;\t\t\t// returns [\"b\",true,3]\n```"
                },
                {
                    "text": "```sqf\n[_array, 1, -2] call BIS_fnc_subSelect;\t\t// returns [\"b\",true]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "array",
                            "description": "`Array` array to select sub array from"
                        },
                        {
                            "name": "start",
                            "description": "`Number` index of array to begin sub-array. **If negative**, index is counted from the end of array"
                        },
                        {
                            "name": "endOrLength",
                            "description": "`Number` - index of array to end the sub-array. If ommitted, remainder of the array will be selected. **If negative**, it specifies the length of the sub-array (in absolute form)"
                        }
                    ],
                    "outline": "[array, start, endOrLength] call `BIS_fnc_subSelect`",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_subSelect"
        },
        "configuration": {
            "label": "BIS_fnc_subSelect",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Calculate sunrise and sunset time.",
            "examples": [
                {
                    "text": "```sqf\nprivate _sunriseSunsetTime = date call BIS_fnc_sunriseSunsetTime; // get sunrise/sunset time for the current date\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "date",
                            "description": "`Array`  - date in format `Date`"
                        }
                    ],
                    "outline": "date call `BIS_fnc_sunriseSunsetTime`",
                    "returns": "`Array` of `Number` - [sunriseTime, sunsetTime]. Returns special values when the world position is behind the polar cicle: [0,-1] - polar summer (i.e., no sunset), [-1,0] - polar winter (i.e., no sunrise)."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_sunriseSunsetTime"
        },
        "configuration": {
            "label": "BIS_fnc_sunriseSunsetTime",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Script for para-drop of objects. Spawns waitUntil that handles ground hit (detaching of object from parachute). Used by supplydrop service.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_airDropVeh, \"reammobox\"] spawn BIS_fnc_supplydrop;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "airUnit",
                            "description": "`Object` - air Unit"
                        },
                        {
                            "name": "class",
                            "description": "`String` - object class which is dropped, two default values are available:"
                        }
                    ],
                    "outline": "[airUnit,class] spawn `BIS_fnc_supplydrop`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_supplydrop"
        },
        "configuration": {
            "label": "BIS_fnc_supplydrop",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>\n/*\n\tFile: supplydropService.sqf\n\n\tDescription:\n\tSupply drop service - controls approach and departure of transporting air vehicle and actual cargo drop. Used by Supply drop support request.\n\n\tParameter(s):\n\t1: <object> unit allowed to use the transport system\n\t2: <object> vehicle providing transport\n\t4: <array> positions to be cosen by player; accepted strings are \"pickup\" and \"unload\", the second position is defined by the next paramter (OPTIONAL)\n\t5: <position> (NEEDED ONLY IF PARAMETER #4 IS USED)\n\n\tReturns:\n\tN/A\n*/\n</pre>\n\n{{Wiki|placeholder}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_supplydropService;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_supplydropService` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_supplydropService"
        },
        "configuration": {
            "label": "BIS_fnc_supplydropService",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Swaps the values of two variables **passed as `String`**.\n\nNothing is returned as this function modifies the variables directly.",
            "examples": [
                {
                    "text": "```sqf\nprivate _a = 1;\n_b = 2;\n[\"_a\", \"_b\"] call BIS_fnc_swapVars;\n_a == 2; // true\n_b == 1; // true\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "variableName1",
                            "description": "`String`"
                        },
                        {
                            "name": "variableName2",
                            "description": "`String`"
                        }
                    ],
                    "outline": "[variableName1, variableName2] call `BIS_fnc_swapVars`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_swapVars"
        },
        "configuration": {
            "label": "BIS_fnc_swapVars",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Switch streetlamp on/off.",
            "examples": [
                {
                    "text": "```sqf\n\n// switches all lamps off in a radius of 200m\nprivate _lampsIn200m = nearestObjects [player, [\"Lamps_base_F\", \"PowerLines_base_F\", \"PowerLines_Small_base_F\"], 200];\n{ [_x, false] call BIS_fnc_switchLamp; } forEach _lampsIn200m;\n\n```"
                },
                {
                    "text": "```sqf\n\n// simulates a damaged street light\naLamp spawn {\n\tparams [\n\t\t[\"_lamp\", objNull, [objNull]]\n\t];\n\twhile { player distance _lamp < 200 } do\n\t{\n\t\t[_lamp, selectRandom [true, false]] call BIS_fnc_switchLamp;\n\t\tsleep 0.1 + random 0.5;\n\t};\n};\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - street Lamp"
                        },
                        {
                            "name": "state",
                            "description": "`Boolean` - true to turn lamp on, false to turn it off"
                        }
                    ],
                    "outline": "[object, state] call `BIS_fnc_switchLamp`",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_switchLamp"
        },
        "configuration": {
            "label": "BIS_fnc_switchLamp",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Get all objects of given type directly synchronized to the given object. Works in [Eden Editor](https://community.bistudio.com/wiki/%3ACategory%3AEden%20Editor) too.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_Poliakko, \"LocationArea_F\"] call BIS_fnc_synchronizedObjects;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - parent object"
                        },
                        {
                            "name": "filter",
                            "description": "`String` or `Array` of strings - class name filter; 1 or more class name of objects in which we are interested"
                        },
                        {
                            "name": "preciseMatch",
                            "description": "`Boolean` - (Optional, default `true`) if `true` only precise class names are considered, if `false` inheritance is considered"
                        }
                    ],
                    "outline": "[object, filter, preciseMatch] call `BIS_fnc_synchronizedObjects`",
                    "returns": "`Array` of synchronized objects"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_synchronizedObjects"
        },
        "configuration": {
            "label": "BIS_fnc_synchronizedObjects",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Jiri Wainar\n\n\tDescription:\n\tReturn sequence of all synchronized objects forming either line or circle.\n\n\tParameter(s):\n\t\t0: OBJECT - starting object\n\t\t1: STRING or ARRAY of STRINGs (Optional) - object types that are considered\n\t\t2: BOOL (Optional) - class filter uses exact match\n\t\t\ttrue (default): objects need to match exectly one of the filter classes\n\t\t\tfalse: exact match is not required, objects can inherit from one of the listed classes\n\t\t3: NUMBER (Optional) - expected connection shape\n\t\t\t0 (default): none, can be either line or circle\n\t\t\t1: line expected\n\t\t\t2: circle expected\n\n\tReturns:\n\tARRAY of OBJECTs or empty ARRAY if error is encountered\n\n\tErrors:\n\t\t* There are more then 2 objects matching class filter connected.\n\t\t* Circle is required but closing connection is not detected.\n\n\tExample:\n\t[_start,[\"ModuleToWAreaVertex_F\",\"ModuleToWAreaOptions_F\"],true,0] call BIS_fnc_synchronizedObjectsQueue;\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_synchronizedObjectsQueue`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_synchronizedObjectsQueue"
        },
        "configuration": {
            "label": "BIS_fnc_synchronizedObjectsQueue",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "[[File:A3 BIS_fnc_target.jpg|300px|thumb|right|Target Board display]]\nHandles the shooting targets in the Bootcamp DLC, statistics, animation, etc. (targets such as `**TargetBootcampHuman_f**`)\n\n{{{!}} class=\"wikitable mw-collapsible mw-collapsed\" style=\"min-width: 50em\"\n{{!}}+ Action/Parameter Table\n! Action (`String`)\n! Parameters (`Array`) arguments\n{{!}}-\n{{!}} **initialize**\nInitializes the target and sets it to the \"up\" position \n{{!}}\n* target: `Object` - Target object of type \"TargetBootcamp_base_F\"\n\n{{!}}-\n{{!}} **terminate**\nDoesn't do anything {{!}}{{!}} {{n/a}}\n\n{{!}}-\n{{!}} **animate**\nAnimate the object to the given position (\"up\" or \"down\")\n{{!}}\n* target: `Object` - Target object of type \"TargetBootcamp_base_F\"\n* position: `String` - \"up\" or \"down\" (default)\n\n{{!}}-\n{{!}} **getAnimationPhase**\n\n**Return Value:** `Number` - 0 (up) or 1 (down) depending on current state\n{{!}}\n* target: `Object` - Target object of type \"TargetBootcamp_base_F\"\n\n{{!}}-\n{{!}} **getAnimationPhaseString**\n\n**Return Value:** `String` - \"up\" or \"down\" depending on current state\n{{!}}\n* target: `Object` - Target object of type \"TargetBootcamp_base_F\"\n\n{{!}}-\n{{!}}**getAnimatedSelection**\n\n**Return Value:** `String` - the name of the \"animatedSelection\" from object config\n{{!}}\n* target: `Object` - Target object of type \"TargetBootcamp_base_F\"\n\n{{!}}-\n{{!}} **hit**\nHandles the hit event to animate the target down and up again\n{{!}}\n* target: `Object` - Target object of type \"TargetBootcamp_base_F\"\n* unit: `Object` - Unit which shot the target\n* damage: `Number` - Amount of damage done to the target\n\n{{!}}-\n{{!}} **hitPart**\nHandles the hit event and stores the data\n{{!}}\n* partsList: `Array` - Contains list of all parts which got hit (see [HitPart EH](https://community.bistudio.com/wiki/Arma%203%3A%20Event%20Handlers%23HitPart) format) to format [target, shooter]:\n** target: `Object` - Target object of type 'TargetBootcamp_base_F'\n** shooter: `Object` - Unit which shot the target\n\n{{!}}-\n{{!}} **getShooterDataIndex**\n\n**Return Value:** `Number` - index from Shooter Data for specific unit\n{{!}}\n* target: `Object` - Target object of type \"TargetBootcamp_base_F\"\n* uid: `String` - Player UID of unit who shot the target\n\n{{!}}-\n{{!}} **getShooterData**\n\n**Return Value:** `Array` - all data from Shooter Data for specific unit\n\nFormat: `**<nowiki>[[\"uid\", \"\"], [\"name\", \"\"], [\"shots\", [[[\"time\", 0], [\"distance\", 0], [\"weapon\", \"\"], [\"direct\", 0]]]]]</nowiki>**`\n{{!}}\n* target: `Object` - Target object of type \"TargetBootcamp_base_F\"\n* uid: `String` - Player UID of unit who shot the target\n\n{{!}}-\n{{!}} **setShooterData**\nSet Shooter Data for specific unit\n{{!}}\n* target: `Object` - Target object of type \"TargetBootcamp_base_F\"\n* uid: `String` - Player UID of unit who shot the target\n* data: `Array` - Shooter Data\n\n{{!}}-\n{{!}} **getShotsData**\n\n**Return Value:** `Array` - Shots Data for specific unit\n{{!}}\n* target: `Object` - Target object of type \"TargetBootcamp_base_F\"\n* uid: `String` - Player UID of unit who shot the target\n\n{{!}}-\n{{!}} **getShotsDataFromTargets**\n\n**Return Value:** `Number` - total amount of shots hit\n{{!}}\n* targets: `Array` of `Object` - List of target objects of type \"TargetBootcamp_base_F\"\n* uid: `String` - Player UID of unit who shot the target\n\n{{!}}-\n{{!}} **getShotsDataWithFilter**\n\n**Return Value:** `Array` - Shot Data after custom filter\n{{!}}\n* target: `Object` - Target object of type \"TargetBootcamp_base_F\"\n* uid: `String` - Player UID of unit who shot the target\n* filter: `String` - One of \"time\", \"distance\", \"weapon\" or \"direct\"\n* code: `Code` - Custom code to validate the shot. _this is the value of filtered data\n\n{{!}}-\n{{!}} **setShotsData**\nSet Shots Data for specific unit\n{{!}}\n* target: `Object` - Target object of type \"TargetBootcamp_base_F\"\n* uid: `String` - Player UID of unit who shot the target\n* data: `Array` - Shots Data\n\n{{!}}-\n{{!}} **getShootersData**\n\n**Return Value:** `Array` - full Shooters Data\n{{!}}\n* target: `Object` - Target object of type \"TargetBootcamp_base_F\"\n\n{{!}}-\n{{!}} **setShootersData**\nSet full Shooters Data\n{{!}}\n* target: `Object` - Target object of type \"TargetBootcamp_base_F\"\n* data: `Array` - Shooter Data\n\n{{!}}-\n{{!}} **resetShootersData**\nRemove all data from Shooters Data array\n{{!}}\n* target: `Object` - Target object of type \"TargetBootcamp_base_F\"\n\n{{!}}-\n{{!}} **getShooterTemplate**\n\n**Return Value:** `Array` - template for Shooter Data\n{{!}}\n* target: `Object` - Target object of type \"TargetBootcamp_base_F\"\n* uid: `String` - Player UID of unit who shot the target\n\n{{!}}-\n{{!}} **getShotTemplate**\n\n**Return Value:** `Array` - template for Shot Data (see [HitPart EH](https://community.bistudio.com/wiki/Arma%203%3A%20Event%20Handlers%23HitPart) format)\n{{!}}\n* target: `Object` - Target object of type \"TargetBootcamp_base_F\"\n* shooter: `Object` - Unit who shot the target\n* projectile: `Object` - (\"_bullet\" not used)\n* position: `Array` format `Position` - (\"_position\" not used)\n* velocity: `Array` - (\"_velocity\" not used)\n* selection: `Array` - (\"_selection\" not used)\n* ammo: `Array` - (\"_ammo\" not used)\n* vector: `Array` - (\"_direction\" not used)\n* radius: `Array` - (\"_radius\" not used)\n* surfaceType: `String` - (\"_surface\" not used)\n* isDirect: `Boolean` - `true` if object was directly hit, `false` if it was hit by indirect/splash damage.\n\n{{!}}-\n{{!}} **getShooterByUid**\n\n**Return Value:** `Object` - corresponding shooter unit\n{{!}}\n* uid: `String` - Player UID of unit who shot the target\n\n{{!}}-\n{{!}} **uiOpen**\nOpens the Target Board display\n{{!}}\n* target: `Object` - Target object of type \"TargetBootcamp_base_F\"\n\n{{!}}-\n{{!}} **uiOpenToAll**\nOpens the Target Board display for all connected players\n{{!}}\n* target: `Object` - Target object of type \"TargetBootcamp_base_F\"\n\n{{!}}-\n{{!}} **uiOnLoad**\nTriggered when display is opened (internal)\n{{!}}\n* display: `Display`\n\n{{!}}-\n{{!}} **uiFillTable**\nTriggered when display is opened, fills UI with Shooters Data (internal)\n{{!}}\n* target: `Object` - Target object of type \"TargetBootcamp_base_F\"\n* control: `Control` - \"_listBox\"\n\n{{!}}-\n{{!}} **uiFillTableRow**\nTriggered when display is opened, fills UI with Shooter Data (internal)\n{{!}}\n* target: `Object` - Target object of type \"TargetBootcamp_base_F\"\n* control: `Control` - \"_listBox\"\n* data: `Array` - Shooter Data\n{{!}}}",
            "examples": [
                {
                    "text": "```sqf\n\n// open the Score Board\n[\"uiOpen\", [myTarget]] call BIS_fnc_target;\n\n```"
                },
                {
                    "text": "```sqf\n\n// open the Score Board for all players in MP\n[\"uiOpenToAll\", [myTarget]] call BIS_fnc_target;\n\n```"
                },
                {
                    "text": "```sqf\n\n// clear all data from Score Board\n[\"resetShootersData\", [myTarget]] call BIS_fnc_target;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "action",
                            "description": "`String`"
                        },
                        {
                            "name": "parameters",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "[action, parameters] call `BIS_fnc_target`",
                    "returns": "See [above table](https://community.bistudio.com/wiki/%23Description)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_target"
        },
        "configuration": {
            "label": "BIS_fnc_target",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns `true` if task is forced to be always visible (default: `false`). **NOTE**:  See [Arma 3: Task Framework](https://community.bistudio.com/wiki/Arma%203%3A%20Task%20Framework) for more information.",
            "examples": [
                {
                    "text": "```sqf\nprivate _isForcedVisible = \"task_1\" call BIS_fnc_taskAlwaysVisible;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "taskID",
                            "description": "`String` - ID of the task"
                        }
                    ],
                    "outline": "taskID call `BIS_fnc_taskAlwaysVisible`",
                    "returns": "`Boolean` - returns `true` if forced visible, otherwise `false`"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_taskAlwaysVisible"
        },
        "configuration": {
            "label": "BIS_fnc_taskAlwaysVisible",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "This function adds a [[Waypoints#Seek_.26_Destroy|Seek and Destroy]] waypoint on defined position to the group and set its `behaviour` to \"AWARE\". If the group has other waypoints, the waypoint will be added at the end of the list.",
            "examples": [
                {
                    "text": "```sqf\n[opforGroup, getPosATL player] call BIS_fnc_taskAttack;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group`"
                        },
                        {
                            "name": "position",
                            "description": "`Position`"
                        }
                    ],
                    "outline": "[group, position] call `BIS_fnc_taskAttack`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_taskAttack"
        },
        "configuration": {
            "label": "BIS_fnc_taskAttack",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return a task's sub-tasks. **NOTE**:  See [Arma 3: Task Framework](https://community.bistudio.com/wiki/Arma%203%3A%20Task%20Framework) for more information.",
            "examples": [
                {
                    "text": "```sqf\n\"task_1\" call BIS_fnc_taskChildren;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "taskID",
                            "description": "`String` - ID of the task"
                        }
                    ],
                    "outline": "taskID call `BIS_fnc_taskChildren`",
                    "returns": "`Array` or `Object` - array with sub tasks or `objNull` if parent task ID does not exist"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_taskChildren"
        },
        "configuration": {
            "label": "BIS_fnc_taskChildren",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Checks if task is completed. **NOTE**:  See [Arma 3: Task Framework](https://community.bistudio.com/wiki/Arma%203%3A%20Task%20Framework) for more information.",
            "examples": [
                {
                    "text": "```sqf\nprivate _completed = \"task_1\" call BIS_fnc_taskCompleted;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "taskID",
                            "description": "`String` - ID or name of the task"
                        }
                    ],
                    "outline": "taskID call `BIS_fnc_taskCompleted`",
                    "returns": "`Boolean` - returns `true` if task state is either \"SUCCEEDED\", \"FAILED\" or \"CANCELED\". Returns `false` for all other states and if task does not exist"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_taskCompleted"
        },
        "configuration": {
            "label": "BIS_fnc_taskCompleted",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Create a task.",
            "examples": [
                {
                    "text": "```sqf\n[civilian, \"task1\", [\"Do this and you get a cookie\", \"Earn Cookie\", \"cookiemarker\"], [0,0,0], \"ASSIGNED\", 2, true] call BIS_fnc_taskCreate;\n```"
                },
                {
                    "text": "```sqf\n\n[west, \"parentTask\", [\"This is the parent task.\", \"Parent task\", \"cookiemarker2\"], objNull, 1, 3, true] call BIS_fnc_taskCreate;\n[west, [\"subTask\", \"parentTask\"], [\"This is the subTask.\", \"subTask\", \"cookiemarker2\"], objNull, 1, 3, true] call BIS_fnc_taskCreate;\n\n```"
                },
                {
                    "text": "in [[Description.ext]]\n```cpp\nclass CfgTaskTypes\n{\n\tclass my_CfgTaskType\n\t{\n\t\tdisplayname = \"Tank\";\n\t\ticon = \"Tank_MCO.paa\";\n\t\ticon3D = \"Tank_MCO.paa\";\n\t};\n};\n```\nSQF:\n\n```sqf\n[east, [\"taskType_\"], [\"Setting taskType\", \"The simple way\", \"marker2\"], objNull, 1, 3, true, \"my_CfgTaskType\"] call BIS_fnc_taskCreate; // task with a custom icon\n```"
                },
                {
                    "text": "in [[Stringtable.xml]]\n```xml\n<Key ID=\"STR_CITY_TASK\">\n\t<English>Clear %1 of enemies</English>\n\t<!-- more languages -->\n</Key>\n```\n\nSQF:\n\n```sqf\n\n[\n\t_side,\n\t_taskID,\n\t[\n\t\t// format array, string to be localised, parameters for format %1, %2 ...\n\t\t[ \"STR_CITY_TASK\", _cityName ],\n\t\t[ \"STR_CITY_TASK\", _cityName ],\n\t\t\"\"\n\t]\n] call BIS_fnc_taskCreate;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "**owner**",
                            "description": "Task owner(s)"
                        },
                        {
                            "name": "**taskID**",
                            "description": "* `String` - Task ID"
                        },
                        {
                            "name": "**description**",
                            "description": "* `Array` - Task description in the format [\"description\", \"title\", \"marker\"] - \"marker\" is depreciated, functionally does nothing"
                        },
                        {
                            "name": "**destination** (Optional)",
                            "description": "Task destination"
                        },
                        {
                            "name": "**state**",
                            "description": "(Optional, default \"CREATED\") task state. Can be:"
                        },
                        {
                            "name": "**priority**",
                            "description": "`Number` - (Optional) priority. When the current task is completed, the system selects the one with the largest priority >= 0. To avoid auto assignment of that task, give it a priority of -1."
                        },
                        {
                            "name": "**showNotification**",
                            "description": "`Boolean` - (Optional, default `true`) true to show notification, false to disable it"
                        },
                        {
                            "name": "**type**",
                            "description": "`String` - (Optional, default \"\") task type from [[Description.ext#CfgTaskTypes|CfgTaskTypes]], if not defined, type \"\" is being used"
                        },
                        {
                            "name": "**visibleIn3D**",
                            "description": "`Boolean` - (Optional, default `false`) true to make task always visible in 3D"
                        }
                    ],
                    "outline": "[owner, taskID, description, destination, state, priority, showNotification, type, visibleIn3D] call `BIS_fnc_taskCreate`",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_taskCreate"
        },
        "configuration": {
            "label": "BIS_fnc_taskCreate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns unit's current task. **NOTE**:  See [Arma 3: Task Framework](https://community.bistudio.com/wiki/Arma%203%3A%20Task%20Framework) for more information.",
            "examples": [
                {
                    "text": "```sqf\nprivate _currentTask = player call BIS_fnc_taskCurrent;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit to be checked"
                        }
                    ],
                    "outline": "unit call `BIS_fnc_taskCurrent`",
                    "returns": "`String` - task ID"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_taskCurrent"
        },
        "configuration": {
            "label": "BIS_fnc_taskCurrent",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Group will man nearby static defenses within a 100 metre radius of the defense position and guard the position. Some units will man weapons, others will patrol and the remainder will sit on the ground.",
            "examples": [
                {
                    "text": "```sqf\n[group player, getPosATL leader player] call BIS_fnc_taskDefend;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group`"
                        },
                        {
                            "name": "position",
                            "description": "`Array` in format `Position`"
                        }
                    ],
                    "outline": "[group, position] call `BIS_fnc_taskDefend`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_taskDefend"
        },
        "configuration": {
            "label": "BIS_fnc_taskDefend",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return a task's description. **NOTE**:  See [Arma 3: Task Framework](https://community.bistudio.com/wiki/Arma%203%3A%20Task%20Framework) for more information.",
            "examples": [
                {
                    "text": "```sqf\n\"BIS_task_01\" call BIS_fnc_taskDescription;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "taskName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "taskName call `BIS_fnc_taskDescription`",
                    "returns": "`Array` - task's description in the format [\"description\", \"title\", \"marker\"]"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_taskDescription"
        },
        "configuration": {
            "label": "BIS_fnc_taskDescription",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return a task's destination. **NOTE**:  See [Arma 3: Task Framework](https://community.bistudio.com/wiki/Arma%203%3A%20Task%20Framework) for more information.",
            "examples": [
                {
                    "text": "```sqf\n\"BIS_task_01\" call BIS_fnc_taskDestination;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "taskName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "taskName call `BIS_fnc_taskDestination`",
                    "returns": "`Object` or `Array` - either position in format [x,y,z], or [object,precision] as used by `setSimpleTaskTarget` command. Returns just `objNull` if task was not found"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_taskDestination"
        },
        "configuration": {
            "label": "BIS_fnc_taskDestination",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return `true` if a task exists. **NOTE**:  See [Arma 3: Task Framework](https://community.bistudio.com/wiki/Arma%203%3A%20Task%20Framework) for more information.",
            "examples": [
                {
                    "text": "```sqf\nprivate _exists = [\"MyTask\"] call BIS_fnc_taskExists;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "taskName",
                            "description": "`String` - task name"
                        }
                    ],
                    "outline": "[taskName] call `BIS_fnc_taskExists`",
                    "returns": "`Boolean` - `true` if it exists"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_taskExists"
        },
        "configuration": {
            "label": "BIS_fnc_taskExists",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>\n/*******************************************************************************\n *\n *\tversion: \t\t1.0\n *\tname:\t\t\tTask handler\n *\tdescription:\tautomatically sets tasks as current \t\n *\tparameters:\t\t_this select 0: a unit whose tasks will be handled (Array)\n \t\t\t\t\t_this select 1: links to tasks created via MP Framwork with\n \t\t\t\t\t\t\t\t\tpriorities (loewr number means higher\n \t\t\t\t\t\t\t\t\tpriority)\n *\treturn value:\tnone \t\n * \texample:\t \t[\n \t\t\t\t\t\tBIS_cooper,\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t[\"objShaftoe\",   \t\t1],\n\t\t\t\t\t\t\t[\"objGorka\",\t\t\t3],\n\t\t\t\t\t\t\t[\"objNikolayev\",\t\t5],\n\t\t\t\t\t\t\t[\"objLagushina\",   \t\t5],\n\t\t\t\t\t\t\t[\"objSmugglers\",   \t\t5],\n\t\t\t\t\t\t\t[\"objFindBase\",    \t\t4],\n\t\t\t\t\t\t\t[\"objSentries\",   \t\t3],\n\t\t\t\t\t\t\t[\"objLeader\",\t\t\t3],\n\t\t\t\t\t\t\t[\"objDestroyBase\",\t\t3],\n\t\t\t\t\t\t\t[\"objEscortLagushina\",\t1],\n\t\t\t\t\t\t\t[\"objRescueCrew\",   \t2],\n\t\t\t\t\t\t\t[\"objSafehouse\",    \t3],\n\t\t\t\t\t\t\t[\"objMaksim\",    \t\t6],\n\t\t\t\t\t\t\t[\"objEvidence\",    \t\t7]\n\t\t\t\t\t\t]\n\t\t\t\t\t] call BIS_fnc_taskHandler\n\n *\tTODO:\t\t\t* generalize so it can be used in WF\n \t\t\t\t\t* add support for standard tasks\n \t\t\t\t\t* randomize the selection of tasks with the same priority\n*/\n</pre>\n{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_taskHandler`; -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_taskHandler"
        },
        "configuration": {
            "label": "BIS_fnc_taskHandler",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Shows a task hint. **NOTE**:  See [Arma 3: Task Framework](https://community.bistudio.com/wiki/Arma%203%3A%20Task%20Framework) for more information.",
            "examples": [
                {
                    "text": "```sqf\n[\"BIS_task_01\",\"CANCELED\"] call BIS_fnc_taskHint;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "taskName",
                            "description": "`String`"
                        },
                        {
                            "name": "taskState",
                            "description": "`String` - can be:"
                        }
                    ],
                    "outline": "[taskName, taskState] call `BIS_fnc_taskHint`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_taskHint"
        },
        "configuration": {
            "label": "BIS_fnc_taskHint",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return a sub-task's parent task. **NOTE**:  See [Arma 3: Task Framework](https://community.bistudio.com/wiki/Arma%203%3A%20Task%20Framework) for more information.",
            "examples": [
                {
                    "text": "```sqf\n\"BIS_task_01\" call BIS_fnc_taskParent;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "taskName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "taskName call `BIS_fnc_taskParent`",
                    "returns": "`String` - parent task"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_taskParent"
        },
        "configuration": {
            "label": "BIS_fnc_taskParent",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Create a random patrol of several [waypoints](https://community.bistudio.com/wiki/Waypoint) around a given `position`.\n**NOTE**: In Arma 2, the [Functions Module](https://community.bistudio.com/wiki/Functions%20Library) is required.",
            "examples": [
                {
                    "text": "```sqf\n[group _unit, getPos _unit, 1000] call BIS_fnc_taskPatrol;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group` - the `group` to patrol"
                        },
                        {
                            "name": "position",
                            "description": "`Position` - the `position` on which to base the patrol"
                        },
                        {
                            "name": "distance",
                            "description": "`Number` - maximum `distance` between waypoints in meters"
                        },
                        {
                            "name": "blacklist",
                            "description": "`Array` - (optional) blacklist of areas"
                        }
                    ],
                    "outline": "[group, position, distance, blacklist] call `BIS_fnc_taskPatrol`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_taskPatrol"
        },
        "configuration": {
            "label": "BIS_fnc_taskPatrol",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Find the actual task associated with a task name assigned to a unit.\n**NOTE**: See [Arma 3: Task Framework](https://community.bistudio.com/wiki/Arma%203%3A%20Task%20Framework) for more information.",
            "examples": [
                {
                    "text": "```sqf\n[\"testTask\", player] call BIS_fnc_taskReal; // returns \"Task testTask (id 0)\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "taskName",
                            "description": "`String`"
                        },
                        {
                            "name": "owner",
                            "description": "`Object` - task owner"
                        }
                    ],
                    "outline": "[taskName, owner] call `BIS_fnc_taskReal`",
                    "returns": "`Task` - task"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_taskReal"
        },
        "configuration": {
            "label": "BIS_fnc_taskReal",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Flags task to be or not to be always visible. **NOTE**:  See [Arma 3: Task Framework](https://community.bistudio.com/wiki/Arma%203%3A%20Task%20Framework) for more information.",
            "examples": [
                {
                    "text": "```sqf\n[\"BIS_Task_01\",true] call BIS_fnc_taskSetAlwaysVisible;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "taskID",
                            "description": "`String` - task ID"
                        },
                        {
                            "name": "alwaysVisible",
                            "description": "`Boolean` - `true` for always visible `false` if not"
                        }
                    ],
                    "outline": "[taskID,alwaysVisible] call `BIS_fnc_taskSetAlwaysVisible`",
                    "returns": "`String` - task ID."
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_taskSetAlwaysVisible"
        },
        "configuration": {
            "label": "BIS_fnc_taskSetAlwaysVisible",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Set a task to current. Identical to assigning a task. **NOTE**:  See [Arma 3: Task Framework](https://community.bistudio.com/wiki/Arma%203%3A%20Task%20Framework).",
            "examples": [
                {
                    "text": "```sqf\n\"BIS_task_01\" call BIS_fnc_taskSetCurrent;\n```"
                },
                {
                    "text": "```sqf\n[\"BIS_task_01\", false] call BIS_fnc_taskSetCurrent; //Assign without notificiation\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "taskName",
                            "description": "`String`"
                        },
                        {
                            "name": "showNotification",
                            "description": "`Boolean` - (Optional, default true) true to show notification, false to disable it"
                        }
                    ],
                    "outline": "taskName call `BIS_fnc_taskSetCurrent`",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_taskSetCurrent"
        },
        "configuration": {
            "label": "BIS_fnc_taskSetCurrent",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Set a task description. **NOTE**:  See [Arma 3: Task Framework](https://community.bistudio.com/wiki/Arma%203%3A%20Task%20Framework) for more information.",
            "examples": [
                {
                    "text": "```sqf\n[\n\t\"tsk_destroyAA\",\n\t[\n\t\t\"You should plant Satchels under those Shilkas! Good luck.\",\n\t\t\"Destroy the Shilkas\",\n\t\t\"Shilkas\"\n\t]\n] call BIS_fnc_taskSetDescription;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "taskId",
                            "description": "`String`"
                        },
                        {
                            "name": "taskDescription",
                            "description": "`String`"
                        },
                        {
                            "name": "taskTitle",
                            "description": "`String`"
                        },
                        {
                            "name": "taskMarker",
                            "description": "`String`"
                        }
                    ],
                    "outline": "[taskId, [taskDescription, taskTitle, taskMarker]] call `BIS_fnc_taskSetDescription`",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_taskSetDescription"
        },
        "configuration": {
            "label": "BIS_fnc_taskSetDescription",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Set a task's destination. **NOTE**: See [Arma 3: Task Framework](https://community.bistudio.com/wiki/Arma%203%3A%20Task%20Framework) for more information.",
            "examples": [
                {
                    "text": "```sqf\n[\"BIS_task_01\", [1337, 1337, 0]] call BIS_fnc_taskSetDestination;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "taskName",
                            "description": "`String`"
                        },
                        {
                            "name": "destination",
                            "description": "`Object`, `Array`, `Position` or `String` - task destination:"
                        }
                    ],
                    "outline": "[taskName, destination] call `BIS_fnc_taskSetDestination`",
                    "returns": "`String` - task ID"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_taskSetDestination"
        },
        "configuration": {
            "label": "BIS_fnc_taskSetDestination",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Set a task's state. **NOTE**:  See [Arma 3: Task Framework](https://community.bistudio.com/wiki/Arma%203%3A%20Task%20Framework) for more information.",
            "examples": [
                {
                    "text": "```sqf\n[\"BIS_task_01\",\"CANCELED\"] call BIS_fnc_taskSetState;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "taskName",
                            "description": "`String`"
                        },
                        {
                            "name": "taskState",
                            "description": "`String` - can be:"
                        },
                        {
                            "name": "showHint",
                            "description": "`Boolean` - (Optional, default `true`) `true` to show a hint"
                        }
                    ],
                    "outline": "[taskName, taskState, showHint] call `BIS_fnc_taskSetState`",
                    "returns": "`Boolean`"
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_taskSetState"
        },
        "configuration": {
            "label": "BIS_fnc_taskSetState",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Sets task type to given task. **NOTE**:  See [Arma 3: Task Framework](https://community.bistudio.com/wiki/Arma%203%3A%20Task%20Framework) for more information.",
            "examples": [
                {
                    "text": "```sqf\n[\"BIS_Task_01\",\"attack\"] call BIS_fnc_taskSetType;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "taskID",
                            "description": "`String` - task ID"
                        },
                        {
                            "name": "taskType",
                            "description": "`String` - task Type from `configfile`  >> \"CfgTaskTypes\""
                        }
                    ],
                    "outline": "[taskID,type] call `BIS_fnc_taskSetType`",
                    "returns": "`String` - task ID."
                }
            ],
            "argumentLocality": "Global Argument",
            "effectLocality": "Global Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_taskSetType"
        },
        "configuration": {
            "label": "BIS_fnc_taskSetType",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns task's state. **NOTE**:  See [Arma 3: Task Framework](https://community.bistudio.com/wiki/Arma%203%3A%20Task%20Framework) for more information.",
            "examples": [
                {
                    "text": "```sqf\n\"task_1\" call BIS_fnc_taskState;\n```"
                },
                {
                    "text": "```sqf\n[\"task_1\"] call BIS_fnc_taskState;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "taskID",
                            "description": "`String` - ID of the task"
                        }
                    ],
                    "outline": "taskID call `BIS_fnc_taskState`",
                    "returns": "`String` - state of the task. Can be:\n* \"AUTOASSIGNED\"\n* \"ASSIGNED\"\n* \"CREATED\"\n* \"SUCCEEDED\"\n* \"FAILED\"\n* \"CANCELED\""
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_taskState"
        },
        "configuration": {
            "label": "BIS_fnc_taskState",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Grab all tasks currently created for a given unit. **NOTE**:  See [Arma 3: Task Framework](https://community.bistudio.com/wiki/Arma%203%3A%20Task%20Framework) for more information.",
            "examples": [
                {
                    "text": "```sqf\nplayer call BIS_fnc_tasksUnit;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "target",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "target call `BIS_fnc_tasksUnit`",
                    "returns": "`Array` - array with task names"
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_tasksUnit"
        },
        "configuration": {
            "label": "BIS_fnc_tasksUnit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns type of given task. **NOTE**:  See [Arma 3: Task Framework](https://community.bistudio.com/wiki/Arma%203%3A%20Task%20Framework) for more information.",
            "examples": [
                {
                    "text": "```sqf\n[\"BIS_Task_01\"] call BIS_fnc_taskType;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "taskID",
                            "description": "`String` - task ID"
                        }
                    ],
                    "outline": "taskID call `BIS_fnc_taskType`",
                    "returns": "`String` - task type or type 'Default' if not defined."
                }
            ],
            "argumentLocality": "Global Argument",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_taskType"
        },
        "configuration": {
            "label": "BIS_fnc_taskType",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns path to the icon texture associated with given task type. **NOTE**:  See [Arma 3: Task Framework](https://community.bistudio.com/wiki/Arma%203%3A%20Task%20Framework) for more information.",
            "examples": [
                {
                    "text": "```sqf\n[\"attack\",configFile >> \"CfgTaskTypes\" >> \"Run\" >> \"icon\"] call BIS_fnc_taskTypeIcon;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "type",
                            "description": "`String` - task type"
                        },
                        {
                            "name": "default",
                            "description": "`Config` - config path to get default path from, if **type** does not exist"
                        }
                    ],
                    "outline": "[type, default] call `BIS_fnc_taskTypeIcon`",
                    "returns": "`String` - path to the task type texture."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_taskTypeIcon"
        },
        "configuration": {
            "label": "BIS_fnc_taskTypeIcon",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns task's variable name. **NOTE**:  See [Arma 3: Task Framework](https://community.bistudio.com/wiki/Arma%203%3A%20Task%20Framework) for more information.",
            "examples": [
                {
                    "text": "```sqf\n\"task_1\" call BIS_fnc_taskVar;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "taskID",
                            "description": "`String` - ID of the task"
                        }
                    ],
                    "outline": "taskID call `BIS_fnc_taskVar`",
                    "returns": "`String` - returns **\"@test\"** for a task with the variable name **\"test\"**."
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_taskVar"
        },
        "configuration": {
            "label": "BIS_fnc_taskVar",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Convert number to color team name or color.",
            "examples": [
                {
                    "text": "```sqf\n[2, true] call BIS_fnc_teamColor;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "teamId",
                            "description": "`Number` - in range 1..5"
                        },
                        {
                            "name": "getColour",
                            "description": "`Boolean` - (Optional, default `false`) `true` to get [[Color|Color (RGBA)]], `false` to get localized team name"
                        }
                    ],
                    "outline": "[teamId, getColour] call `BIS_fnc_teamColor`",
                    "returns": "[[Color|Color (RGBA)]] or `String` - color format [r, g, b, a] or localized team name"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_teamColor"
        },
        "configuration": {
            "label": "BIS_fnc_teamColor",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns the gradient angle (in radians) of the terrain at a specified position and a compass direction.\nIt is an angle of the slope of a tangent plane to the terrain at the specified position in the specified direction.",
            "examples": [
                {
                    "text": "```sqf\nprivate _radGrad = [getPos player, getDir player] call BIS_fnc_terrainGradAngle;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` or `Position`"
                        },
                        {
                            "name": "direction",
                            "description": "`Number` - direction where should be gradient calculated (compass direction)"
                        },
                        {
                            "name": "delta",
                            "description": "`Number` - which stepsize should be used"
                        }
                    ],
                    "outline": "<!-- [object, direction, delta] call `BIS_fnc_terrainGradAngle`; -->",
                    "returns": "`Number` - gradient angle in radians"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_terrainGradAngle"
        },
        "configuration": {
            "label": "BIS_fnc_terrainGradAngle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "[[File:BIS_fnc_textTiles.gif|right|400px]]\nShows an animated text with background tiles.",
            "examples": [
                {
                    "text": "```sqf\n[parseText \"<t font='PuristaBold' size='1.6'>MyMission</t><br />by Username\", true, nil, 7, 0.7, 0] spawn BIS_fnc_textTiles;\n```"
                },
                {
                    "text": "```sqf\n[\"path\\to\\image.paa\"] spawn BIS_fnc_textTiles;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "content",
                            "description": "`String` or [Structured Text](https://community.bistudio.com/wiki/Structured%20Text)"
                        },
                        {
                            "name": "position",
                            "description": "`Boolean` or `Array` (optional, default [0, 0, 1, 1])"
                        },
                        {
                            "name": "tileSize",
                            "description": "`Number` or `Array` (optional, default 10 ([10,10])"
                        },
                        {
                            "name": "duration",
                            "description": "`Number` - (optional, default 5) duration in seconds"
                        },
                        {
                            "name": "fadeInOutTime",
                            "description": "`Number` or `Array` - (optional, default 0) duration of the fade effect in seconds"
                        },
                        {
                            "name": "tileTransparency",
                            "description": "`Number` - (optional, default 0.3) transparency or alpha value of the tiles. 0 means invisible and 1 fully visible"
                        }
                    ],
                    "outline": "[content, position, tileSize, duration, fadeInOutTime, tileTransparency] spawn `BIS_fnc_textTiles`",
                    "returns": "`Boolean` - returns always `true`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_textTiles"
        },
        "configuration": {
            "label": "BIS_fnc_textTiles",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Checks whether texture is defined in CfgMarkers and if so, returns the marker texture.",
            "examples": [
                {
                    "text": "```sqf\nprivate _notWhiteFlag = [\"flag_France\"] call BIS_fnc_textureMarker;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "wantedMarker",
                            "description": "`String` - marker type"
                        }
                    ],
                    "outline": "[wantedMarker] call `BIS_fnc_textureMarker`",
                    "returns": "`String` - icon texture path, or _wantedMarker_ if not found"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_textureMarker"
        },
        "configuration": {
            "label": "BIS_fnc_textureMarker",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Checks whether icon is defined in CfgVehicleIcons and if so, returns the icon.",
            "examples": [
                {
                    "text": "```sqf\nprivate _mediTexture = [\"iconManMedic\"] call BIS_fnc_textureVehicleIcon;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "wantedIcon",
                            "description": "`String`"
                        }
                    ],
                    "outline": "[wantedIcon] call `BIS_fnc_textureVehicleIcon`",
                    "returns": "`String` - icon texture path, or _wantedIcon_ if not found"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_textureVehicleIcon"
        },
        "configuration": {
            "label": "BIS_fnc_textureVehicleIcon",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Calculates threat values of given unit.",
            "examples": [
                {
                    "text": "```sqf\nprivate _threatLevel = [player] call BIS_fnc_threat;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - given unit"
                        }
                    ],
                    "outline": "[unit] call `BIS_fnc_threat`",
                    "returns": "`Number` - threat level in range from 0 to 3"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_threat"
        },
        "configuration": {
            "label": "BIS_fnc_threat",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Destroys timeline and all related objects.",
            "examples": [
                {
                    "text": "```sqf\n[timeline] call BIS_fnc_timeline_cleanup;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "timeline",
                            "description": "`Object` - the timeline object"
                        }
                    ],
                    "outline": "[timeline] call `BIS_fnc_timeline_cleanup`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_cleanup"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_cleanup",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Deletes given timeline and updates.\n\n```sqf\nmissionNamespace getVariable \"Timelines\";\n```",
            "examples": [
                {
                    "text": "```sqf\n[timeline] call BIS_fnc_timeline_deleted;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "timeline",
                            "description": "`Object` - the timeline object"
                        }
                    ],
                    "outline": "[timeline] call `BIS_fnc_timeline_deleted`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_deleted"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_deleted",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tAttributes change in EDEN for a timeline\n\n\tParameter(s):\n\t_this select 0: Object\t- The timeline\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_timeline_edenAttributesChanged`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_edenAttributesChanged"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_edenAttributesChanged",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\t3DEN connections of a timeline is changed\n\n\tParameter(s):\n\t_this select 0: Object\t- The timeline\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_timeline_edenConnectionChanged`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_edenConnectionChanged"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_edenConnectionChanged",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tTimeline is deleted\n\n\tParameter(s):\n\t_this select 0: Object - The destroyed timeline\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_timeline_edenDeleted`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_edenDeleted"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_edenDeleted",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tEntity is dragged in 3DEN\n\n\tParameter(s):\n\t_this select 0: Object\t- The timeline\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_timeline_edenDragged`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_edenDragged"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_edenDragged",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tTime line is initialized in 3den\n\n\tParameter(s):\n\t_this select 0: Object\t- The timeline\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_timeline_edenInit`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_edenInit"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_edenInit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tWhether this timeline is selected in 3den\n\n\tParameter(s):\n\t_this select 0: Object\t- The timeline\n\n\tReturns:\n\tBool - True if selected, false if not\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_timeline_edenIsSelected`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_edenIsSelected"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_edenIsSelected",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Called when timeline finishes playing (reaches it is end).",
            "examples": [
                {
                    "text": "```sqf\n[timeline] call BIS_fnc_timeline_finish;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "timeline",
                            "description": "`Object` - the timeline object"
                        }
                    ],
                    "outline": "[timeline] call `BIS_fnc_timeline_finish`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_finish"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_finish",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Get's current alpha in given timeline.",
            "examples": [
                {
                    "text": "```sqf\nprivate _alpha = [timeline] call BIS_fnc_timeline_getAlpha;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "timeline",
                            "description": "`Object` - the timeline object"
                        }
                    ],
                    "outline": "[timeline] call `BIS_fnc_timeline_getAlpha`",
                    "returns": "`Number` - current Alpha value"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_getAlpha"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_getAlpha",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "The current time of this timeline.",
            "examples": [
                {
                    "text": "```sqf\nprivate _time = [timeline] call BIS_fnc_timeline_getCurrentTime;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "timeline",
                            "description": "`Object` - the timeline object"
                        }
                    ],
                    "outline": "[timeline] call `BIS_fnc_timeline_getCurrentTime`",
                    "returns": "`Number` - current time value"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_getCurrentTime"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_getCurrentTime",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns the timeline interp mode index.",
            "examples": [
                {
                    "text": "```sqf\nprivate _interpolationMode = [timeline] call BIS_fnc_timeline_getInterpMode;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "timeline",
                            "description": "`Object` - the timeline object"
                        }
                    ],
                    "outline": "[timeline] call `BIS_fnc_timeline_getInterpMode`",
                    "returns": "`Number` - can return:\n{{Columns|4|\n* 0  - Linear\n* 1  - Cubic\n* 2  - EaseIn\n* 3  - EaseOut\n* 4  - EaseInOut\n* 5  - Hermite\n* 6  - Berp\n* 7  - BounceIn\n* 8  - BounceOut\n* 9  - BounceInOut\n* 10 - QuinticIn\n* 11 - QuinticOut\n* 12 - QuinticInOut\n* 13 - ElasticIn\n* 14 - ElasticOut\n* 15 - ElasticInOut\n}}"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_getInterpMode"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_getInterpMode",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "The time left of given timeline.",
            "examples": [
                {
                    "text": "```sqf\nprivate _timeLeft = [timeline] call BIS_fnc_timeline_getLength;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "timeline",
                            "description": "`Object` - the timeline object"
                        }
                    ],
                    "outline": "[timeline] call `BIS_fnc_timeline_getLength`",
                    "returns": "`Number` - can return: * 0  - Linear"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_getLength"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_getLength",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Whether timeline is flagged as play from start on scenario begin.",
            "examples": [
                {
                    "text": "```sqf\nprivate _playFromStart = [timeline] call BIS_fnc_timeline_getPlayFromStart;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "timeline",
                            "description": "`Object` - the timeline object"
                        }
                    ],
                    "outline": "[timeline] call `BIS_fnc_timeline_getPlayFromStart`",
                    "returns": "`Boolean` - returns `true` if timeline should play from start, otherwise `false`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_getPlayFromStart"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_getPlayFromStart",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns the play rate of this timeline.",
            "examples": [
                {
                    "text": "```sqf\nprivate _playRate = [timeline] call BIS_fnc_timeline_getPlayRate;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "timeline",
                            "description": "`Object` - the timeline object"
                        }
                    ],
                    "outline": "[timeline] call `BIS_fnc_timeline_getPlayRate`",
                    "returns": "`Number` - returns play rate"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_getPlayRate"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_getPlayRate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "The time at which timeline started playing.",
            "examples": [
                {
                    "text": "```sqf\nprivate _startTime = [timeline] call BIS_fnc_timeline_getPlayTime;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "timeline",
                            "description": "`Object` - the timeline object"
                        }
                    ],
                    "outline": "[timeline] call `BIS_fnc_timeline_getPlayTime`",
                    "returns": "`Number` - returns start time"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_getPlayTime"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_getPlayTime",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns the position of given timeline.",
            "examples": [
                {
                    "text": "```sqf\nprivate _position = [timeline] call BIS_fnc_timeline_getPosition;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "timeline",
                            "description": "`Object` - the timeline object"
                        }
                    ],
                    "outline": "[timeline] call `BIS_fnc_timeline_getPosition`",
                    "returns": "`Number` - returns position of given timeline"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_getPosition"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_getPosition",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns the simulated curves of a timeline.",
            "examples": [
                {
                    "text": "```sqf\nprivate _curves = [timeline] call BIS_fnc_timeline_getSimulatedCurves;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "timeline",
                            "description": "`Object` - the timeline object"
                        }
                    ],
                    "outline": "[timeline] call `BIS_fnc_timeline_getSimulatedCurves`",
                    "returns": "`Array` - returns a list of vurves that are simulated by this timeline"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_getSimulatedCurves"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_getSimulatedCurves",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "The time at which timeline stopped playing",
            "examples": [
                {
                    "text": "```sqf\nprivate _timeStopped = [timeline] call BIS_fnc_timeline_getStopTime;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "timeline",
                            "description": "`Object` - the timeline object"
                        }
                    ],
                    "outline": "[timeline] call `BIS_fnc_timeline_getStopTime`",
                    "returns": "`Number` - returns the time at which timeline stopped playing"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_getStopTime"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_getStopTime",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "The time left of given timeline.",
            "examples": [
                {
                    "text": "```sqf\nprivate _timeLeft = [timeline] call BIS_fnc_timeline_getTimeLeft;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "timeline",
                            "description": "`Object` - the timeline object"
                        }
                    ],
                    "outline": "[timeline] call `BIS_fnc_timeline_getTimeLeft`",
                    "returns": "`Number` - returns time left"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_getTimeLeft"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_getTimeLeft",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Initialized a timeline.",
            "examples": [
                {
                    "text": "```sqf\n[timeline] call BIS_fnc_timeline_init;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "timeline",
                            "description": "`Object` - the timeline object"
                        },
                        {
                            "name": "initPosition",
                            "description": "`Number` - (Optional, default <sqf inline>_timeline getVariable [\"Pos\", 0.0]) initial position"
                        },
                        {
                            "name": "length",
                            "description": "`Number` - (Optional, default \t<sqf inline>_timeline getVariable [\"Length\", 10.0]) length"
                        },
                        {
                            "name": "playRate",
                            "description": "`Number` - (Optional, default <sqf inline>_timeline getVariable [\"PlayRate\", 1.0]) play rate"
                        },
                        {
                            "name": "loop",
                            "description": "`Boolean` - (Optional, default <sqf inline>_timeline getVariable [\"Loop\", false]) `true` - loop enabled, `false` - loop disabled"
                        },
                        {
                            "name": "reverse",
                            "description": "`Boolean` - (Optional, default <sqf inline>_timeline getVariable [\"Reverse\", false]) `true` - reverse, `false` - Do not reverse"
                        },
                        {
                            "name": "playOnStart",
                            "description": "`Boolean` - (Optional, default <sqf inline>_timeline getVariable [\"PlayFromStart\", false]) `true` - play at scenario start, `false` - Do not play at scenario start"
                        },
                        {
                            "name": "destroyWhenFinished",
                            "description": "`Boolean` - (Optional, default <sqf inline>_timeline getVariable [\"DestroyWhenFinished\", false]) `true` - Destroy when done, `false` - Do not destroy when done"
                        }
                    ],
                    "outline": "[timeline, initPosition, length, playRate, loop] call `BIS_fnc_timeline_init`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_init"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_init",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns whether given timeline has finished.",
            "examples": [
                {
                    "text": "```sqf\nprivate _isFinished = [timeline] call BIS_fnc_timeline_isFinished;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "timeline",
                            "description": "`Object` - the timeline object"
                        }
                    ],
                    "outline": "[timeline] call `BIS_fnc_timeline_isFinished`",
                    "returns": "`Boolean` - returns `true` if finished, otherwise `false`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_isFinished"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_isFinished",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns whether given timeline is in loop mode.",
            "examples": [
                {
                    "text": "```sqf\nprivate _isLooping = [timeline] call BIS_fnc_timeline_isLooping;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "timeline",
                            "description": "`Object` - the timeline object"
                        }
                    ],
                    "outline": "[timeline] call `BIS_fnc_timeline_isLooping`",
                    "returns": "`Boolean` - returns `true` if looping, otherwise `false`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_isLooping"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_isLooping",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns whether given timeline is paused.",
            "examples": [
                {
                    "text": "```sqf\nprivate _isPaused = [timeline] call BIS_fnc_timeline_isPaused;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "timeline",
                            "description": "`Object` - the timeline object"
                        }
                    ],
                    "outline": "[timeline] call `BIS_fnc_timeline_isPaused`",
                    "returns": "`Boolean` - returns `true` if paused, otherwise `false`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_isPaused"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_isPaused",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Whether given timeline is playing (can be paused at same time!)",
            "examples": [
                {
                    "text": "```sqf\nprivate _isPlaying = [timeline] call BIS_fnc_timeline_isPlaying;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "timeline",
                            "description": "`Object` - the timeline object"
                        }
                    ],
                    "outline": "[timeline] call `BIS_fnc_timeline_isPlaying`",
                    "returns": "`Boolean` - returns `true` if playing, otherwise `false`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_isPlaying"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_isPlaying",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Whether given timeline is in reverse mode",
            "examples": [
                {
                    "text": "```sqf\nprivate _isReverse = [timeline] call BIS_fnc_timeline_isReverse;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "timeline",
                            "description": "`Object` - the timeline object"
                        }
                    ],
                    "outline": "[timeline] call `BIS_fnc_timeline_isReverse`",
                    "returns": "`Boolean` - returns `true` if timeline is reversed, otherwise `false`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_isReverse"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_isReverse",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Play given timeline if currently not playing. If we are playing and paused, we unpause.",
            "examples": [
                {
                    "text": "```sqf\n[timeline] call BIS_fnc_timeline_play;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "timeline",
                            "description": "`Object` - the timeline object"
                        }
                    ],
                    "outline": "[timeline] call `BIS_fnc_timeline_play`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_play"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_play",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Set's the interpolation mode of the timeline.",
            "examples": [
                {
                    "text": "```sqf\n[timeline,15] call BIS_fnc_timeline_setInterpMode;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "timeline",
                            "description": "`Object` - the timeline object"
                        },
                        {
                            "name": "mode",
                            "description": "`Number` - (Optional, default 0) interpolation mode, see `BIS_fnc_timeline_getInterpMode`'s return value for possible values"
                        }
                    ],
                    "outline": "[timeline, mode] call `BIS_fnc_timeline_setInterpMode`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_setInterpMode"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_setInterpMode",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Set's the length of this timeline in seconds.",
            "examples": [
                {
                    "text": "```sqf\n[timeline,5.5] call BIS_fnc_timeline_setLength;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "timeline",
                            "description": "`Object` - the timeline object"
                        },
                        {
                            "name": "length",
                            "description": "`Number` - (Optional, default 10) new length"
                        }
                    ],
                    "outline": "[timeline, length] call `BIS_fnc_timeline_setLength`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_setLength"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_setLength",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Set's this timeline playback loop mode",
            "examples": [
                {
                    "text": "```sqf\n[timeline] call BIS_fnc_timeline_setLoop;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "timeline",
                            "description": "`Object` - the timeline object"
                        },
                        {
                            "name": "loop",
                            "description": "`Boolean` - (Optional, default `true`) `true` to enable loop, `false` to disable"
                        }
                    ],
                    "outline": "[timeline, loop] call `BIS_fnc_timeline_setLoop`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_setLoop"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_setLoop",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Pauses or unpauses timeline.",
            "examples": [
                {
                    "text": "```sqf\n[timeline] call BIS_fnc_timeline_setPause;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "timeline",
                            "description": "`Object` - the timeline object"
                        },
                        {
                            "name": "pause",
                            "description": "`Boolean` - (Optional, default `true`) `true` to pause, `false` to unpause"
                        }
                    ],
                    "outline": "[timeline, pause] call `BIS_fnc_timeline_setPause`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_setPause"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_setPause",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Sets playrate of timeline.",
            "examples": [
                {
                    "text": "```sqf\n[timeline,2] call BIS_fnc_timeline_setPlayRate;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "timeline",
                            "description": "`Object` - the timeline object"
                        },
                        {
                            "name": "rate",
                            "description": "`Boolean` - (Optional, default 1) play rate"
                        }
                    ],
                    "outline": "[timeline, rate] call `BIS_fnc_timeline_setPlayRate`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_setPlayRate"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_setPlayRate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Sets position of timeline.",
            "examples": [
                {
                    "text": "```sqf\n[timeline,2] call BIS_fnc_timeline_setPosition;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "timeline",
                            "description": "`Object` - the timeline object"
                        },
                        {
                            "name": "position",
                            "description": "`Boolean` - (Optional, default 0) position"
                        }
                    ],
                    "outline": "[timeline, position] call `BIS_fnc_timeline_setPosition`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_setPosition"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_setPosition",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Change direction of timeline.",
            "examples": [
                {
                    "text": "```sqf\n[timeline, false] call BIS_fnc_timeline_setReverse;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "timeline",
                            "description": "`Object` - the timeline object"
                        },
                        {
                            "name": "reverse",
                            "description": "`Boolean` - (Optional, default `true`) `true` to reverse timeline, `false` to not reverse it"
                        }
                    ],
                    "outline": "[timeline, reverse] call `BIS_fnc_timeline_setReverse`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_setReverse"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_setReverse",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\tAuthor: Nelson Duarte <@Nelson_G_Duarte>\n\n\tDescription:\n\tSets this timeline playback as reverse or not.\n\n\tParameter(s):\n\t_this select 0: Object\t\t- The timeline\n\t_this select 1: Alpha\t\t- Current timeline alpha\n\t_this select 1: DeltaT\t\t- Delta time\n\n\tReturns:\n\tNothing\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "[] call `BIS_fnc_timeline_simulateCurves`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_simulateCurves"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_simulateCurves",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Stops a timeline.",
            "examples": [
                {
                    "text": "```sqf\n[timeline] call BIS_fnc_timeline_stop;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "timeline",
                            "description": "`Object` - the timeline object"
                        }
                    ],
                    "outline": "[timeline] call `BIS_fnc_timeline_stop`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_stop"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_stop",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Ticks a timeline.",
            "examples": [
                {
                    "text": "```sqf\n[timeline] call BIS_fnc_timeline_tick;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "timeline",
                            "description": "`Object` - the timeline object"
                        }
                    ],
                    "outline": "[timeline] call `BIS_fnc_timeline_tick`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeline_tick"
        },
        "configuration": {
            "label": "BIS_fnc_timeline_tick",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "This function returns a 24-hour time as a string (or array) from a decimal.",
            "examples": [
                {
                    "text": "```sqf\nprivate _time = 7.36;\n[_time] call BIS_fnc_timeToString; // 07:21:36\n```"
                },
                {
                    "text": "```sqf\nprivate _time = 7.36;\n[_time, \"HH:MM\"] call BIS_fnc_timeToString; // 07:21\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "time",
                            "description": "`Number` - time to convert (format `dayTime`)"
                        },
                        {
                            "name": "format",
                            "description": "`String` - (Optional, default \"HH:MM:SS\") one of the following:"
                        }
                    ],
                    "outline": "[time, format] call `BIS_fnc_timeToString`",
                    "returns": "`String` or `Array`"
                }
            ],
            "argumentLocality": "Local Argument",
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_timeToString"
        },
        "configuration": {
            "label": "BIS_fnc_timeToString",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Display a mission-specific titlecard before the mission begins. Only works the first time it is called.",
            "examples": [
                {
                    "text": "```sqf\n[\"\\a3\\missions_f_epb\\video\\b_out2_quotation.ogv\", \"your translation\"] call BIS_fnc_titlecard;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "path",
                            "description": "`String` - path to video"
                        },
                        {
                            "name": "subtitle",
                            "description": "`String` - (Optional, default \"\") subtitle displayed"
                        }
                    ],
                    "outline": "[path, subtitle] call `BIS_fnc_titlecard`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_titlecard"
        },
        "configuration": {
            "label": "BIS_fnc_titlecard",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Display given string as structured text. **Arma**: 3|In {{arma3 this function displays a bottom-left message, limited to two lines of approximately 53 characters each.}}",
            "examples": [
                {
                    "text": "[[File:BIS_fnc_titleText.jpg|right|300px]]\n```sqf\n\"Stratis, 2035-07-14 0130<br />A dark night ahead…\" call BIS_fnc_titleText;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "message",
                            "description": "`String` - [Structured Text](https://community.bistudio.com/wiki/Structured%20Text) formatting supported"
                        }
                    ],
                    "outline": "message call `BIS_fnc_titleText`",
                    "returns": "`Boolean` - `true` when done"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_titleText"
        },
        "configuration": {
            "label": "BIS_fnc_titleText",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Toggle curator vision mode.",
            "examples": [
                {
                    "text": "```sqf\n[Curator, -2] call BIS_fnc_toggleCuratorVisionMode;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "curator",
                            "description": "`Object` - curator"
                        },
                        {
                            "name": "mode",
                            "description": "`Number` - (Optional, default 1) mode index"
                        }
                    ],
                    "outline": "[curator, mode] call `BIS_fnc_toggleCuratorVisionMode`",
                    "returns": "`Boolean`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_toggleCuratorVisionMode"
        },
        "configuration": {
            "label": "BIS_fnc_toggleCuratorVisionMode",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Converts text of selected classes in one display to upper-case except classes with name **PlayersName**. Also searches inside `CT_CONTROLS_GROUP`s.",
            "examples": [
                {
                    "text": "```sqf\n[\"RscDisplayOptionsAudio\", [\"RscText\"]] call BIS_fnc_toUpperDisplayTexts;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "displayClass",
                            "description": "`String` - class name of the display to manipulate"
                        },
                        {
                            "name": "controlClasses",
                            "description": "`Array` of `String`s - class names of parents of controls you want to turn upper case (e. g. [\"RscText\", \"RscTitle\"])"
                        },
                        {
                            "name": "blacklist",
                            "description": "`Array` of `String`s - (Optional: Default []) Class names of controls you don't want to turn upper case (e. g. [\"CA_VehicleAuthor\"])"
                        }
                    ],
                    "outline": "[displayClass, controlClasses, blacklist] call `BIS_fnc_toUpperDisplayTexts`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_toUpperDisplayTexts"
        },
        "configuration": {
            "label": "BIS_fnc_toUpperDisplayTexts",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Visualise unit's bullet trajectories. Can only be used on one shooter in a single instance.\n\nIf you want to change the unit, first set <sqf inline>BIS_tracedShooter = nil _then_ execute the script again.",
            "examples": [
                {
                    "text": "```sqf\n[player] spawn BIS_fnc_traceBullets;\n```"
                },
                {
                    "text": "```sqf\n[player, 50] spawn BIS_fnc_traceBullets;\n```"
                },
                {
                    "text": "```sqf\n[player, 0] spawn BIS_fnc_traceBullets; // remove bullet tracing\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "number",
                            "description": "`Number` - (Optional, default 20) maximum displayed trajectories"
                        }
                    ],
                    "outline": "[unit, number] call `BIS_fnc_traceBullets`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_traceBullets"
        },
        "configuration": {
            "label": "BIS_fnc_traceBullets",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Tracks mission time by storing time in `profileNamespace`.",
            "examples": [
                {
                    "text": "```sqf\n[true, true] call BIS_fnc_trackMissionTime; // Delete saved mission time\n```"
                },
                {
                    "text": "```sqf\n[true] call BIS_fnc_trackMissionTime; // Save mission time\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "save",
                            "description": "`Boolean` (Optional, default `true`)"
                        },
                        {
                            "name": "delete",
                            "description": "`Boolean` (Optional, default `false`)"
                        }
                    ],
                    "outline": "[save, delete] call `BIS_fnc_trackMissionTime`",
                    "returns": "`Number` - time result"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_trackMissionTime"
        },
        "configuration": {
            "label": "BIS_fnc_trackMissionTime",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "[[File:transformVectorUpAndDir.jpg|300px|right]]\nRotates both `vectorDir` and `vectorUp` on 3 axes: z (yaw), x (pitch) and y (roll). Positive angle direction is according to the {{Link|https://en.wikipedia.org/wiki/Right-hand_rule|right hand rule}}.\n**NOTE**:  The vectors are rotated first on **z** axis then on **x** axis then on **y** axis. For example standard [[0,1,0],[0,0,1]] pair rotated 90 degrees on every axis will result in [[0,0,1],[0,-1,0]]",
            "examples": [
                {
                    "text": "```sqf\nprivate _vDirUp = [[vectorDirVisual uav, vectorUpVisual uav], 0, 0, 90] call BIS_fnc_transformVectorDirAndUp;\n```"
                },
                {
                    "text": "Create UAV object and make it pitch with mouse up/down and roll with mouse left/right:\n\n```sqf\n\nuav = \"B_UAV_05_F\" createVehicle [0,0,0];\nuav attachTo [player, [0,30,10]];\nfindDisplay 46 displayAddEventHandler [\"MouseMoving\", \n{\n\tuav setVectorDirAndUp\n\t(\n\t\t[\n\t\t\t[vectorDirVisual uav, vectorUpVisual uav],\n\t\t\tgetDirVisual uav,\n\t\t\t_this select 2,\n\t\t\t_this select 1\n\t\t]\n\t\tcall BIS_fnc_transformVectorDirAndUp\n\t);\n}];\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vectorDirAndUp",
                            "description": "`Array` in format [vectorDir, vectorUp] -(Optional, default [[0,1,0],[0,0,1]])"
                        },
                        {
                            "name": "yaw",
                            "description": "`Number` - (Optional, default 0) yaw angle"
                        },
                        {
                            "name": "pitch",
                            "description": "`Number` - (Optional, default 0) pitch angle"
                        },
                        {
                            "name": "roll",
                            "description": "`Number` - (Optional, default 0) roll angle"
                        }
                    ],
                    "outline": "[vectorDirAndUp, yaw, pitch, roll] call `BIS_fnc_transformVectorDirAndUp`",
                    "returns": "`Array` in format [vectorDir, vectorUp]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_transformVectorDirAndUp"
        },
        "configuration": {
            "label": "BIS_fnc_transformVectorDirAndUp",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>\n/*\n\tFile: transportService.sqf\n\n\tDescription:\n\tTransportation system\n\n\tParameter(s):\n\t1: <object> unit allowed to use the transport system\n\t2: <object> vehicle providing transport\n\t3: <array> positions to be chosen by player; accepted strings are \"pickup\" and \"unload\", the second position is defined by the next paramter (OPTIONAL)\n\t4: <position> (NEEDED ONLY IF PARAMETER #3 IS USED)\n\n\tReturns:\n\tN/A\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[caller, vehicle, position, mainScope, secopScope] call `BIS_fnc_transportService`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_transportService"
        },
        "configuration": {
            "label": "BIS_fnc_transportService",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_tridentClient` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_tridentClient"
        },
        "configuration": {
            "label": "BIS_fnc_tridentClient",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Execute a code based on Trident relationship.",
            "examples": [
                {
                    "text": "```sqf\n[west, east, { params [\"_higherScore\", \"_lowerScore\", \"_areAllied\"] }] call BIS_fnc_tridentExecute;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "side_1",
                            "description": "`Side`"
                        },
                        {
                            "name": "side_2",
                            "description": "`Side`"
                        },
                        {
                            "name": "codeFriendly",
                            "description": "`Code` - code executed when sides are friendly. Arguments passed to the code are:"
                        },
                        {
                            "name": "codeEnemy",
                            "description": "`Code` - code executed when sides are enemy"
                        }
                    ],
                    "outline": "[side_1, side_2, codeFriendly, codeEnemy] call `BIS_fnc_tridentExecute`",
                    "returns": "`Boolean` - `true` when the sides are allied"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_tridentExecute"
        },
        "configuration": {
            "label": "BIS_fnc_tridentExecute",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Gets the relationship of competing Trident sides. The value slowly decreases towards 0.",
            "examples": [
                {
                    "text": "```sqf\n[west, east] call BIS_fnc_tridentGetRelationship;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "sideA",
                            "description": "`Side`"
                        },
                        {
                            "name": "sideB",
                            "description": "`Side`"
                        }
                    ],
                    "outline": "[sideA, sideB] call `BIS_fnc_tridentGetRelationship`",
                    "returns": "`Number` - relationship value"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_tridentGetRelationship"
        },
        "configuration": {
            "label": "BIS_fnc_tridentGetRelationship",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Register a unit as Trident unit.\nWhen competing sides are still friendly and the unit is killed by the competing side,\nthe killer won't be punsihed by negative score. Instead, Trident relationship will decrease.",
            "examples": [
                {
                    "text": "```sqf\nBIS_tridentObject call BIS_fnc_tridentHandleDamage;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object`"
                        }
                    ],
                    "outline": "object call `BIS_fnc_tridentHandleDamage`",
                    "returns": "`Boolean` - `true` if event handler managing the functionality was added, `false` when it existed already"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_tridentHandleDamage"
        },
        "configuration": {
            "label": "BIS_fnc_tridentHandleDamage",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Set relationship of competing Trident sides.\nWhen the value reaches threshold, side relationship will change.\nThe value slowly decreases towards 0.",
            "examples": [
                {
                    "text": "```sqf\n[west, east, 0.5, true] call BIS_fnc_tridentSetRelationship;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "side1",
                            "description": "`Side`"
                        },
                        {
                            "name": "side2",
                            "description": "`Side`"
                        },
                        {
                            "name": "value",
                            "description": "`Number` - changed value"
                        },
                        {
                            "name": "absolute",
                            "description": "`Boolean` - `true` to add the value, `false` to set the value"
                        }
                    ],
                    "outline": "[side1, side2, value, absolute] call `BIS_fnc_tridentSetRelationship`",
                    "returns": "`Number` - relationship value after changes"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_tridentSetRelationship"
        },
        "configuration": {
            "label": "BIS_fnc_tridentSetRelationship",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Makes an existing or new trigger cover a marker area.",
            "examples": [
                {
                    "text": "```sqf\nprivate _createdTrigger = [objNull, myAreaTrigger] call BIS_fnc_triggerToMarker;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "trigger",
                            "description": "`Object` - trigger that will be used to cover the marker. `objNull` to create a new trigger"
                        },
                        {
                            "name": "markerName",
                            "description": "`String`"
                        }
                    ],
                    "outline": "[trigger, markerName] call `BIS_fnc_triggerToMarker`",
                    "returns": "`Object` - the (created) trigger. `objNull` if marker is not rectangular or elliptical."
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_triggerToMarker"
        },
        "configuration": {
            "label": "BIS_fnc_triggerToMarker",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Get a substring out of the string.\n**Arma**: 3|Use [select](https://community.bistudio.com/wiki/select%23Alternative%20Syntax%203) instead.",
            "examples": [
                {
                    "text": "```sqf\n[\"dreaded_is_the_man\", 0, 6] call BIS_fnc_trimString;\t// will return \"dreaded\"\n```"
                },
                {
                    "text": "```sqf\n[\"dreaded_is_the_man\", 15] call BIS_fnc_trimString;\t// will return \"man\"\n```"
                },
                {
                    "text": "```sqf\n[\"dreaded_is_the_man\"] call BIS_fnc_trimString;\t\t// will return \"dreaded_is_the_man\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "someText",
                            "description": "`String` - source string"
                        },
                        {
                            "name": "beginning",
                            "description": "`Number` (Optional, default 0) - start index; indexing starts at 0"
                        },
                        {
                            "name": "length",
                            "description": "`Number` (Optional, default end of string) - end index. A negative number means X chars _from the string end_"
                        }
                    ],
                    "outline": "[someText, beginning, length] call `BIS_fnc_trimString`",
                    "returns": "`String`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_trimString"
        },
        "configuration": {
            "label": "BIS_fnc_trimString",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns vehicle turret config for the turret given by the turret path.",
            "examples": [
                {
                    "text": "```sqf\ngetNumber ([\"B_APC_Wheeled_01_cannon_F\", [0,0]] call BIS_fnc_turretConfig >> \"hasGunner\") > 0;\n```"
                },
                {
                    "text": "```sqf\ngetNumber ([car1, [-1]] call BIS_fnc_turretConfig >> \"hasDriver\") > 0;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` or `String` - vehicle or vehicle type"
                        },
                        {
                            "name": "turret",
                            "description": "`Array` - turret path"
                        }
                    ],
                    "outline": "[vehicle, turret] call `BIS_fnc_turretConfig`",
                    "returns": "`Config` - turret config or `configNull`. Using `**[-1]**` for turret path returns vehicle config"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_turretConfig"
        },
        "configuration": {
            "label": "BIS_fnc_turretConfig",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_twoWingDoorNoHandleClose`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_twoWingDoorNoHandleClose"
        },
        "configuration": {
            "label": "BIS_fnc_twoWingDoorNoHandleClose",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_twoWingDoorNoHandleOpen`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_twoWingDoorNoHandleOpen"
        },
        "configuration": {
            "label": "BIS_fnc_twoWingDoorNoHandleOpen",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_twoWingDoorOneHandleClose`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_twoWingDoorOneHandleClose"
        },
        "configuration": {
            "label": "BIS_fnc_twoWingDoorOneHandleClose",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_twoWingDoorOneHandleOpen`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_twoWingDoorOneHandleOpen"
        },
        "configuration": {
            "label": "BIS_fnc_twoWingDoorOneHandleOpen",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_twoWingDoorTwoHandleClose`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_twoWingDoorTwoHandleClose"
        },
        "configuration": {
            "label": "BIS_fnc_twoWingDoorTwoHandleClose",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_twoWingDoorTwoHandleOpen`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_twoWingDoorTwoHandleOpen"
        },
        "configuration": {
            "label": "BIS_fnc_twoWingDoorTwoHandleOpen",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_twoWingSlideDoorClose`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_twoWingSlideDoorClose"
        },
        "configuration": {
            "label": "BIS_fnc_twoWingSlideDoorClose",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_twoWingSlideDoorOpen`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_twoWingSlideDoorOpen"
        },
        "configuration": {
            "label": "BIS_fnc_twoWingSlideDoorOpen",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Types a structured text on the screen, letter by letter, cursor blinking.\n\n[[File:BIS_fnc_typeText.gif|left|400px]]",
            "examples": [
                {
                    "text": "```sqf\n\n[\n\t[\n\t\t[\"CAMP ROGAIN,\", \"<t align = 'center' shadow = '1' size = '0.7' font='PuristaBold'>%1</t>\"],\n\t\t[\"RESUPPLY POINT\", \"<t align = 'center' shadow = '1' size = '0.7'>%1</t><br/>\"],\n\t\t[\"10 MINUTES LATER ...\", \"<t align = 'center' shadow = '1' size = '1.0'>%1</t>\", 15]\n\t]\n] spawn BIS_fnc_typeText;\n\n```"
                },
                {
                    "text": "```sqf\n[\n\t[\n\t\t[\"Hello there...\", nil, 30]\n\t],\n\t0, safeZoneY + safeZoneH / 2\n] spawn BIS_fnc_typeText;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "stringLines",
                            "description": "* `Array` of `String`s - array containing lines of text with same structured text formatting."
                        },
                        {
                            "name": "posX",
                            "description": "`Number` - (Optional, default 0)"
                        },
                        {
                            "name": "posY",
                            "description": "`Number` - (Optional, default 0)"
                        },
                        {
                            "name": "rootFormat",
                            "description": "`String` - (Optional, default \"<t>%1</t>\") the parent format"
                        }
                    ],
                    "outline": "[stringLines, posX, posY, rootFormat] spawn `BIS_fnc_typeText`",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_typeText"
        },
        "configuration": {
            "label": "BIS_fnc_typeText",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "[[File:BIS_fnc_typeText2.gif|400px|right]]\nTypes a structured text on the screen, letter by letter, cursor blinking. Note that line returns are manual, unlike `BIS_fnc_typeText`.",
            "examples": [
                {
                    "text": "```sqf\n\n[\n\t[\n\t\t[\"CAMP ROGAIN, \", \"align = 'center' shadow = '1' size = '0.7' font='PuristaBold'\"],\n\t\t[\"RESUPPLY POINT\", \"align = 'center' shadow = '1' size = '0.7'\", \"#aaaaaa\"],\n\t\t[\"\", \"<br/>\"], // line break\n\t\t[\"10 MINUTES LATER...\", \"align = 'center' shadow = '1' size = '1.0'\"]\n\t]\n] spawn BIS_fnc_typeText2;\n\n```"
                },
                {
                    "text": "```sqf\n\n[\n\t[\"Hello there\"],\n\tsafeZoneX, safeZoneH / 2,\n\ttrue,\n\t\"<t font='PuristaBold'>%1</t>\",\n\t[],\n\t{ false },\n\ttrue\n] spawn BIS_fnc_typeText2;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "stringLines",
                            "description": "* `Array` of `String`s - array containing lines of text with same structured text formatting."
                        },
                        {
                            "name": "posX",
                            "description": "`Number` - (Optional, default 0)"
                        },
                        {
                            "name": "posY",
                            "description": "`Number` - (Optional, default 0)"
                        },
                        {
                            "name": "alignBottom",
                            "description": "`Boolean` - (Optional, default `true`)"
                        },
                        {
                            "name": "rootFormat",
                            "description": "`String` - (Optional, default <sqf inline>\"<t>%1</t>\")"
                        },
                        {
                            "name": "abortParams",
                            "description": "`Array` - (Optional, default <sqf inline>[])"
                        },
                        {
                            "name": "abortCond",
                            "description": "`Code` - (Optional, default <sqf inline>{ false })"
                        },
                        {
                            "name": "playSounds",
                            "description": "`Boolean` - (Optional, default `true`)"
                        }
                    ],
                    "outline": "[stringLines, posX, posY, alignBottom, rootFormat, abortParams, abortCond, playSounds] call `BIS_fnc_typeText2`",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_typeText2"
        },
        "configuration": {
            "label": "BIS_fnc_typeText2",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Called by unflip thing action. Can be used to unflip vehicle without transition. The caller is made invincible during flipping and the original `isDamageAllowed` state is set afterward.",
            "examples": [
                {
                    "text": "```sqf\n[player, quad1] call BIS_fnc_unflipThing;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "caller",
                            "description": "`Object` - the unit that called the action, used in context of the unflip action"
                        },
                        {
                            "name": "thing",
                            "description": "`Object` - the thing that should be flipped"
                        }
                    ],
                    "outline": "[caller, thing] call `BIS_fnc_unflipThing`",
                    "returns": "`Boolean` - `true`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_unflipThing"
        },
        "configuration": {
            "label": "BIS_fnc_unflipThing",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Can be used to unflip a vehicle or a turret, without transition.",
            "examples": [
                {
                    "text": "```sqf\n[quad1] call BIS_fnc_unflipVehicle;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "veh",
                            "description": "`Object` - the vehicle/turret that should be flipped"
                        }
                    ],
                    "outline": "[veh] call `BIS_fnc_unflipVehicle`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_unflipVehicle"
        },
        "configuration": {
            "label": "BIS_fnc_unflipVehicle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\n\n\tDescription:\n\tComposes array of classes with unique param (based on returned value of passed code).\n\tIf class inherits the param from parent, it is not listed.\n\t\n\tParameter(s):\n\t\t0: CONFIG - class which is searched\n\t\t1: CODE - code executed on class, which is passed as _this\n\t\n\tReturns:\n\t\tARRAY - classes in format [class,value]\n\t\t\tclass: CONFIG - class with unique param\n\t\t\tvalue: ANY - value returned by the passed code for the given class\n*/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIS_fnc_uniqueClasses`; -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_uniqueClasses"
        },
        "configuration": {
            "label": "BIS_fnc_uniqueClasses",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return addon from CfgPatches to which a given object belongs to.",
            "examples": [
                {
                    "text": "```sqf\n[player] call BIS_fnc_unitAddon;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - object whose addon should be returned"
                        }
                    ],
                    "outline": "[object] call `BIS_fnc_unitAddon`",
                    "returns": "`String` - addon class"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_unitAddon"
        },
        "configuration": {
            "label": "BIS_fnc_unitAddon",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Records movement data of input unit over a specified period of time. Simplified.\nPressing the {{Controls|Esc}} key, the duration ending, or the unit dying ends the recording.\n\nCopies to clipboard an `Array` in format [frameTime, unitPosition, unitDirectionVector, unitUpVector, unitVelocity] for each frame.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_Vehicle, 50, 30, true, 10] spawn BIS_fnc_unitCapture;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit from which to capture movement data"
                        },
                        {
                            "name": "duration",
                            "description": "`Number` - capture's maximum duration"
                        },
                        {
                            "name": "FPS",
                            "description": "`Number` - (Optional, default 20) frames recorded per second (default 20). Range is 1..100"
                        },
                        {
                            "name": "firing",
                            "description": "`Boolean` - (Optional, default `false`) if set to `true`, will record the input unit's weapon fire data as well"
                        },
                        {
                            "name": "startTime",
                            "description": "`Number` - (Optional, default 0) starting time offset for the frame time"
                        }
                    ],
                    "outline": "[unit, duration, FPS, firing, startTime] spawn `BIS_fnc_unitCapture`",
                    "returns": "[Script Handle](https://community.bistudio.com/wiki/Script%20Handle)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_unitCapture"
        },
        "configuration": {
            "label": "BIS_fnc_unitCapture",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Records weapon fire data of input unit over a specified period of time. Pressing the {{Controls|ESC}} key, the duration ending, or the unit dying ends the recording.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_Vehicle, 50, 10] spawn BIS_fnc_unitCaptureFiring;\n```"
                },
                {
                    "text": "```sqf\n[[2.135, \"GAU8\", \"<NULL-object>\"], [2.157, \"GAU8\", \"<NULL-object>\"]] // output example\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit to capture weapon fire data from"
                        },
                        {
                            "name": "duration",
                            "description": "`Number` - maximum duration to capture"
                        },
                        {
                            "name": "startTime",
                            "description": "`Number` - (Optional, default 0) starting time offset for the frame time"
                        }
                    ],
                    "outline": "[unit, duration, startTime] spawn `BIS_fnc_unitCaptureFiring`",
                    "returns": "[Script Handle](https://community.bistudio.com/wiki/Script%20Handle)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_unitCaptureFiring"
        },
        "configuration": {
            "label": "BIS_fnc_unitCaptureFiring",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Records movement data of input unit over a specified period of time. Simplified.\nPressing the {{Controls|Esc}} key, the duration ending, or the unit dying ends the recording.",
            "examples": [
                {
                    "text": "```sqf\n[BIS_Vehicle, 50, 30, true, 10] spawn BIS_fnc_unitCaptureSimple;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit to capture movement data from"
                        },
                        {
                            "name": "duration",
                            "description": "`Array` - duration to capture for"
                        },
                        {
                            "name": "FPS",
                            "description": "`Number` - (Optional, default 20) frames recorded per second (default 20). Limit is 1 - 100"
                        },
                        {
                            "name": "firing",
                            "description": "`Boolean` - (Optional, default `false`)  if `true`, will record the input unit's weapon fire data as well"
                        },
                        {
                            "name": "startTime",
                            "description": "`Number` - (Optional, default 0) starting time offset for the frame time"
                        }
                    ],
                    "outline": "[unit, duration, FPS, firing, startTime] spawn `BIS_fnc_unitCaptureSimple`",
                    "returns": "[Script Handle](https://community.bistudio.com/wiki/Script%20Handle)\n**NOTE**: \n{{Link|copyToClipboard|Copies to clipboard an `Array` of `Array`s in format [frameTime, unitPosition, unitDirection] for each frame.\n}}"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_unitCaptureSimple"
        },
        "configuration": {
            "label": "BIS_fnc_unitCaptureSimple",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Randomise headgear and facewear of a character.\n**IMPORTANT**: If the randomization is disabled, only strings parameters will be processed, array will be ignored and considered as false.",
            "examples": [
                {
                    "text": "```sqf\n\n[this] call BIS_fnc_unitHeadgear;\t\t\t\t\t// headgear and face wear, same as [this, [], []]\n[this, [], []] call BIS_fnc_unitHeadgear;\t\t\t// headgear only\n[this, nil, []] call BIS_fnc_unitHeadgear;\t\t\t// facewear only\n[this, \"myTemplate\"] call BIS_fnc_unitHeadgear;\t// class defined in Description.ext - CfgUnitTemplates\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object`"
                        },
                        {
                            "name": "headgear",
                            "description": "`Boolean`, `String` or `Array` - (Optional, default `false`) can be one of:"
                        },
                        {
                            "name": "facewear",
                            "description": "`Boolean`, `String` or `Array` - (Optional, default `false`) can be one of:"
                        }
                    ],
                    "outline": "[unit, headgear, facewear] call `BIS_fnc_unitHeadgear`",
                    "returns": "`Boolean` - `true` when done"
                }
            ],
            "argumentLocality": "Local Argument",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_unitHeadgear"
        },
        "configuration": {
            "label": "BIS_fnc_unitHeadgear",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Plays back input movement data on input unit.",
            "examples": [
                {
                    "text": "```sqf\n[vehicle player, _unitCaptureData] spawn BIS_fnc_unitPlay\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit to play movement data on"
                        },
                        {
                            "name": "data",
                            "description": "`Array` - movement data recorder by `BIS_fnc_unitCapture`"
                        },
                        {
                            "name": "varDone",
                            "description": "`Array` - (Optional, default <sqf inline>[]) variable to set on specified Object once playback has finished in format:"
                        },
                        {
                            "name": "stateIgnore",
                            "description": "`Boolean` - (Optional, default `false`) whether to ignore if the Unit is dead and/or cannot move"
                        },
                        {
                            "name": "obsolete_1",
                            "description": "`Nothing` - obsolete param, preserved because of backward compatibility"
                        },
                        {
                            "name": "obsolete_2",
                            "description": "`Nothing` - obsolete param, preserved because of backward compatibility"
                        },
                        {
                            "name": "skipTime",
                            "description": "`Number` - (Optional, default 0) amount of time to skip at the start of playback. For example if you wish to play the data from halfway instead of the start."
                        }
                    ],
                    "outline": "[unit, data, varDone, stateIgnore, obsolete_1, obsolete_2, skipTime] spawn `BIS_fnc_unitPlay`",
                    "returns": "`Boolean` - always `true`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_unitPlay"
        },
        "configuration": {
            "label": "BIS_fnc_unitPlay",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Plays back input weapon fire data on input unit.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _capturedFireData = [[2.135, \"GAU8\", \"<NULL-object>\"]];\n[BIS_Vehicle, _capturedData, true] spawn BIS_fnc_unitPlayFiring;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit to play weapon fire data on"
                        },
                        {
                            "name": "data",
                            "description": "`Array` - firing data to use `BIS_fnc_unitCaptureFiring`"
                        },
                        {
                            "name": "stateIgnore",
                            "description": "`Boolean` - (Optional, default `false`) whether to ignore if the Unit is dead and/or cannot move"
                        }
                    ],
                    "outline": "[unit, data, stateIgnore] spawn `BIS_fnc_unitPlayFiring`",
                    "returns": "[Script Handle](https://community.bistudio.com/wiki/Script%20Handle)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_unitPlayFiring"
        },
        "configuration": {
            "label": "BIS_fnc_unitPlayFiring",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Plays back input movement data on input unit. Simplified.",
            "examples": [
                {
                    "text": "```sqf\n\nprivate _capturedData = [[0, [8208.26, 1953.13, 296.04], 67]];\n[BIS_Vehicle, _capturedData, [BIS_Object, \"DoneRecording\"], true, false, 0.2, 5] spawn BIS_fnc_unitPlaySimple;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "unit",
                            "description": "`Object` - unit to play movement data on"
                        },
                        {
                            "name": "data",
                            "description": "`Array` - movement data to use"
                        },
                        {
                            "name": "varDone",
                            "description": "`Array` - (Optional, default <sqf inline>[]) variable to set on specified Object once playback has finished in format:"
                        },
                        {
                            "name": "stateIgnore",
                            "description": "`Boolean` - (Optional, default `false`) whether to ignore if the Unit is dead and/or cannot move"
                        },
                        {
                            "name": "debug",
                            "description": "`Boolean` - (Optional, default `false` whether to give debug information on played frames per second"
                        },
                        {
                            "name": "sleep",
                            "description": "`Number` - (Optional, default 0) time to sleep between frames. This is if you want to be recording another unit and playing back movement data on another as well. Limit is 0-1 seconds."
                        },
                        {
                            "name": "skipTime",
                            "description": "`Number` - (Optional, default 0) amount of time to skip at the start of playback. For example if you wish to play the data from halfway instead of the start."
                        }
                    ],
                    "outline": "[unit, data, varDone, stateIngnore, debug, sleep, skipTime] spawn `BIS_fnc_unitPlaySimple`",
                    "returns": "[Script Handle](https://community.bistudio.com/wiki/Script%20Handle) - script handle"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_unitPlaySimple"
        },
        "configuration": {
            "label": "BIS_fnc_unitPlaySimple",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>\n/************************************************************\n\tUnit Vector\n\nReturns the unit vector for the passed vector (vector pointing\nin the same direction, but with magnitude == 1)\nThis does not modify the original array.\nThe array can have any number of elements (2, 3, etc).\n************************************************************/</pre>\n\n{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "<!-- [] call `BIS_fnc_unitVector`; -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_unitVector"
        },
        "configuration": {
            "label": "BIS_fnc_unitVector",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "This function will move given support team to the given weapon position.\nThe weapon crew will unpack carried weapon and start watching given target position.\nRequires three personnel in the team: Team Leader, Gunner and Asst. Gunner.\nThis function is MP compatible.\n\nWhen the weapon is unpacked, the [[Arma 3: Scripted Event Handlers#Events|\"StaticWeaponUnpacked\"]] scripted EH is called.\n\n**NOTE**: \nIf a unit flees, all bets are off and the function will exit leaving units on their own.\n<!--\n-->To guarantee weapon disassembly, make sure the group has maximum courage: <sqf inline>_group allowFleeing 0;.",
            "examples": [
                {
                    "text": "```sqf\n[leader1, \"weapon_mrk\", \"target_mrk\"] call BIS_fnc_unpackStaticWeapon;\n```"
                },
                {
                    "text": "```sqf\n\ngroup1 allowFleeing 0;\n[group1, \"weapon_mrk\", tank1, \"leader_mrk\"] call BIS_fnc_unpackStaticWeapon;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group` or `Object` - the support team group or a unit from this group"
                        },
                        {
                            "name": "weaponPos",
                            "description": "`Array`, `String` or `Object` - weapon placement position, object position or marker"
                        },
                        {
                            "name": "targetPos",
                            "description": "`Array`, `String` or `Object` - target position, object position to watch or marker"
                        },
                        {
                            "name": "leaderPos",
                            "description": " `Array`, `String` or `Object` - (Optional) position, object or marker group leader should move to"
                        }
                    ],
                    "outline": "[group, weaponPos, targetPos, leaderPos] call `BIS_fnc_unpackStaticWeapon`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_unpackStaticWeapon"
        },
        "configuration": {
            "label": "BIS_fnc_unpackStaticWeapon",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Updates dead player objects to their current respawned objects.",
            "examples": [
                {
                    "text": "```sqf\nprivate _newPlayerObjects = _oldPlayerObjects call BIS_fnc_updatePlayerArray;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "input",
                            "description": "`Array` of `Object`s - array of old player objects"
                        }
                    ],
                    "outline": "[input] call `BIS_fnc_updatePlayerArray`",
                    "returns": "`Array` - array with new player objects"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_updatePlayerArray"
        },
        "configuration": {
            "label": "BIS_fnc_updatePlayerArray",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Validating the parameters of a certain method in a class.",
            "examples": [
                {
                    "text": "```sqf\n[\"someClass\",\"someMethod\",[5,47,\"test\"]] call BIS_fnc_validateParametersOO;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "class",
                            "description": "`String` - class name"
                        },
                        {
                            "name": "method",
                            "description": "`String` - method used for validating (Taken from **class >> \"Methods\"**)"
                        },
                        {
                            "name": "params",
                            "description": "`Array` - to be validated parameters"
                        }
                    ],
                    "outline": "[class,method,params] call `BIS_fnc_validateParametersOO`",
                    "returns": "`Boolean` - validating flag"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_validateParametersOO"
        },
        "configuration": {
            "label": "BIS_fnc_validateParametersOO",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Add element to variable from someone's variable space.",
            "examples": [
                {
                    "text": "```sqf\n[player, \"someVar\", 1337, true, true] call BIS_fnc_variableSpaceAdd;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - owner of variable space"
                        },
                        {
                            "name": "varName",
                            "description": "`String` - name of variable"
                        },
                        {
                            "name": "element",
                            "description": "`Anything` - element which will be added (must be of same type as variable)"
                        },
                        {
                            "name": "global",
                            "description": "`Boolean` - (Optional, default `false`) `true` to save modified variable globally"
                        },
                        {
                            "name": "inArray",
                            "description": "`Boolean` - (Optional, default `false`) `true` to check if element is already in variable (only for `Array`s)"
                        }
                    ],
                    "outline": "[object, varName, element, global, inArray] call `BIS_fnc_variableSpaceAdd`",
                    "returns": "`Anything` - updated variable"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_variableSpaceAdd"
        },
        "configuration": {
            "label": "BIS_fnc_variableSpaceAdd",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Remove element from variable from someone's variable space.",
            "examples": [
                {
                    "text": "```sqf\n[player, \"someVar\", 1337, true] call BIS_fnc_variableSpaceRemove;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - owner of variable space"
                        },
                        {
                            "name": "varName",
                            "description": "`String` - name of variable"
                        },
                        {
                            "name": "element",
                            "description": "`Anything` - element which will be removed (must be of same type as variable)"
                        },
                        {
                            "name": "global",
                            "description": "`Boolean` - (Optional, default `false`) `true` to save modified variable globally]]"
                        }
                    ],
                    "outline": "[object,varName,element,global,inArray] call `BIS_fnc_variableSpaceRemove`",
                    "returns": "`Anything` - updated variable"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_variableSpaceRemove"
        },
        "configuration": {
            "label": "BIS_fnc_variableSpaceRemove",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns the sum of two vectors.\n**Arma**: 3|If the vector is either 2D or 3D use `vectorAdd` instead.",
            "examples": [
                {
                    "text": "```sqf\n[[1, 1, 1, 1, 1], [2, 5, 3, 1, 1]] call BIS_fnc_vectorAdd; // returns [3,6,4,2,2]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vector1",
                            "description": "`Array` of `Number`s"
                        },
                        {
                            "name": "vector2",
                            "description": "`Array` of `Number`s"
                        }
                    ],
                    "outline": "[vector1, vector2] call `BIS_fnc_vectorAdd`",
                    "returns": "`Array` of `Number`s - resulting vector"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_vectorAdd"
        },
        "configuration": {
            "label": "BIS_fnc_vectorAdd",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns a vector that is the difference between two vectors.\n**Arma**: 3|Use `vectorDiff` instead.",
            "examples": [
                {
                    "text": "```sqf\nprivate _vectorDiff = [[1,2,3], [5,6,7]] call BIS_fnc_vectorDiff;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vector1",
                            "description": "`Array`"
                        },
                        {
                            "name": "vector2",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "[vector1, vector2] call `BIS_fnc_vectorDiff`",
                    "returns": "`Array` - vector difference"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_vectorDiff"
        },
        "configuration": {
            "label": "BIS_fnc_vectorDiff",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns [vectorDirAndUp](https://community.bistudio.com/wiki/setVectorDirAndUp) of object 1 relative to object 2",
            "examples": [
                {
                    "text": "```sqf\nprivate _vectorDirAndUp = [tank, car] call BIS_fnc_vectorDirAndUpRelative;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object1",
                            "description": "`Object`"
                        },
                        {
                            "name": "object2",
                            "description": "`Object`"
                        },
                        {
                            "name": "visual",
                            "description": "`Boolean` - (Optional, default `true`) `true` for a render scope result, `false` for simulation scope"
                        }
                    ],
                    "outline": "[object1, object2, visual] call `BIS_fnc_vectorDirAndUpRelative`",
                    "returns": "`Array` in format [<nowiki/>`vectorDir`, `vectorUp`]"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_vectorDirAndUpRelative"
        },
        "configuration": {
            "label": "BIS_fnc_vectorDirAndUpRelative",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Divides vector by scalar, by dividing all vector elements.\n**NOTE**: \n`vectorMultiply` can be used instead as <sqf inline>vector vectorMultiply 1/scale, but:\n* _scale_ cannot be 0\n* in some rare cases, the result is not _exactly_ the same as `BIS_fnc_vectorDivide` - this is due to [Floating Point Number](https://community.bistudio.com/wiki/Floating%20Point%20Number) precision and rounding.",
            "examples": [
                {
                    "text": "```sqf\n[[123, 456, 789], 5] call BIS_fnc_vectorDivide;\n```"
                },
                {
                    "text": "```sqf\n[[1, 2, 3, 4, 5, 6, 7, 8, 9], 5] call BIS_fnc_vectorDivide;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vector",
                            "description": "`Array` of `Number`s - (Optional, default [0,0,0]) can be any array of numbers"
                        },
                        {
                            "name": "divider",
                            "description": "`Number` - (Optional, default 1)"
                        }
                    ],
                    "outline": "[vector, divider] call `BIS_fnc_vectorDivide`",
                    "returns": "`Array` of `Number`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_vectorDivide"
        },
        "configuration": {
            "label": "BIS_fnc_vectorDivide",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns a unit vector that 'points' from _vector1_ to _vector2_.\nThis is a very useful function as it can be used with the `velocity` command to move an object from one position to another (i.e _vector1_ to _vector2_).\n**NOTE**: Ensure both positions are found using `getPosASL`.\n**Arma**: 3|Since **(Arma 3)**",
            "examples": [
                {
                    "text": "```sqf\nprivate _resultVector = [getPosASL vehicle player, getPosASL airTarget] call BIS_fnc_vectorFromXToY;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vector1",
                            "description": "`Array`"
                        },
                        {
                            "name": "vector2",
                            "description": "`Array`"
                        }
                    ],
                    "outline": "[vector1, vector2] call `BIS_fnc_vectorFromXToY`",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_vectorFromXToY"
        },
        "configuration": {
            "label": "BIS_fnc_vectorFromXToY",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Multiplies 3D vector by a scalar. **Arma**: 3|Use `vectorMultiply` instead.",
            "examples": [
                {
                    "text": "```sqf\nprivate _newVector = [[1,2,3], 3] call BIS_fnc_vectorMultiply; // returns [3,6,9]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vector",
                            "description": "`Array` of `Number`s - to format [x,y,z]"
                        },
                        {
                            "name": "factor",
                            "description": "`Number`"
                        }
                    ],
                    "outline": "[vector, factor] call `BIS_fnc_vectorMultiply`",
                    "returns": "`Array` of `Number`s - result vector"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_vectorMultiply"
        },
        "configuration": {
            "label": "BIS_fnc_vectorMultiply",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns vehicle crew turrets, which will be filled with crew if `createVehicleCrew` command is executed on the vehicle. If vehicle class is passed as param, all vehicle crew turrets are returned.",
            "examples": [
                {
                    "text": "```sqf\n\"B_APC_Wheeled_01_cannon_F\" call BIS_fnc_vehicleCrewTurrets;\n```"
                },
                {
                    "text": "```sqf\ncar1 call BIS_fnc_vehicleCrewTurrets;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` or `String` - vehicle or vehicle type"
                        }
                    ],
                    "outline": "vehicle call `BIS_fnc_vehicleCrewTurrets`",
                    "returns": "`Array` - array of turrets in form of turret path ([-1] - is for driver turret)"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_vehicleCrewTurrets"
        },
        "configuration": {
            "label": "BIS_fnc_vehicleCrewTurrets",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns vehicle roles.",
            "examples": [
                {
                    "text": "```sqf\ncursorObject call BIS_fnc_vehicleRoles;\n```"
                },
                {
                    "text": "```sqf\n\"B_MBT_01_cannon_F\" call BIS_fnc_vehicleRoles;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "`Object` or `String`",
                            "description": "vehicle itself or a classname"
                        }
                    ],
                    "outline": "vehicle call `BIS_fnc_vehicleRoles`",
                    "returns": "`Array` - to format [<nowiki/>[role, path], [role, path], …] like this:\n\n```sqf\n[\n\t[\"Driver\",[]],\n\t[\"Turret\",[0]],\n\t[\"Turret\",[0,0]],\n\t[\"Cargo\",[0]],\n\t[\"Cargo\",[1]],\n\t// ...\n]\n```"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_vehicleRoles"
        },
        "configuration": {
            "label": "BIS_fnc_vehicleRoles",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Detects which **Arma 2** expansions and addons are available. Only works in Arma 2/Arma 2: Operation Arrowhead.\n**NOTE**: {{Name|arma2acr is not detected by this function.}}",
            "examples": [
                {
                    "text": "```sqf\nprivate _availableExpansions = call BIS_fnc_version;\n```"
                },
                {
                    "text": "```sqf\nprivate _playerHasPMC = 4 in (call BIS_fnc_version);\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_version`",
                    "returns": "`Array` of `Number`s - can contain:\n* 0: Arma 2\n* 1: Arma 2: Operation Arrowhead\n* 2: {{Name|arma2baf}}\n* 4: {{Name|arma2pmc}}"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_version"
        },
        "configuration": {
            "label": "BIS_fnc_version",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Fills the first passed control with game type and version number, and positions both controls according to the game type.",
            "examples": [
                {
                    "text": "```sqf\n[_ctrlVersion, _ctrlModded] call BIS_fnc_versionInfo;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "gameTypeVersionControl",
                            "description": "`Control` - Control for indication of game type (Stable/Dev) and version number (RscText)"
                        },
                        {
                            "name": "modControl",
                            "description": "`Control` - Control for indication of modded game (RscActiveText)"
                        }
                    ],
                    "outline": "[gameTypeVersionControl, modControl] call `BIS_fnc_versionInfo`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_versionInfo"
        },
        "configuration": {
            "label": "BIS_fnc_versionInfo",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseBallistics1"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseBallistics1",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseBallistics2"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseBallistics2",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseBallistics3"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseBallistics3",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseBallistics4"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseBallistics4",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseCommandingActions1"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseCommandingActions1",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseCommandingActions2"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseCommandingActions2",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseCommandingActions3"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseCommandingActions3",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseCommandingBehaviour1"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseCommandingBehaviour1",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseCommandingBehaviour2"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseCommandingBehaviour2",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseCommandingBehaviour3"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseCommandingBehaviour3",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseCommandingMovement1"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseCommandingMovement1",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseCommandingMovement2"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseCommandingMovement2",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseCommandingVehicles1"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseCommandingVehicles1",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseCommandingVehicles2"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseCommandingVehicles2",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseCommandingVehicles3"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseCommandingVehicles3",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseHeliAdvanced1"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseHeliAdvanced1",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseHeliAdvanced2"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseHeliAdvanced2",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseHeliAdvanced3"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseHeliAdvanced3",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseHeliAdvanced4"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseHeliAdvanced4",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseHeliAdvanced5"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseHeliAdvanced5",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseHeliAdvanced6"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseHeliAdvanced6",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseHeliBasics1"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseHeliBasics1",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseHeliBasics2"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseHeliBasics2",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseHeliBasics3"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseHeliBasics3",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseHeliSlingload1"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseHeliSlingload1",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseHeliWeapons1"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseHeliWeapons1",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseHeliWeapons2"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseHeliWeapons2",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseHeliWeapons3"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseHeliWeapons3",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseHeliWeapons4"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseHeliWeapons4",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseLaunchers1"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseLaunchers1",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseLaunchers2"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseLaunchers2",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseLaunchers3"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseLaunchers3",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCoursePlaceables1"
        },
        "configuration": {
            "label": "BIS_fnc_VRCoursePlaceables1",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCoursePlaceables2"
        },
        "configuration": {
            "label": "BIS_fnc_VRCoursePlaceables2",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCoursePlaceables3"
        },
        "configuration": {
            "label": "BIS_fnc_VRCoursePlaceables3",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseTargetDesignation1"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseTargetDesignation1",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseTargetDesignation2"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseTargetDesignation2",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseTargetDesignation3"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseTargetDesignation3",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseWeaponHandlingA1"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseWeaponHandlingA1",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseWeaponHandlingA2"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseWeaponHandlingA2",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseWeaponHandlingA3"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseWeaponHandlingA3",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseWeaponHandlingB1"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseWeaponHandlingB1",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseWeaponHandlingB2"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseWeaponHandlingB2",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseWeaponHandlingB3"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseWeaponHandlingB3",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseWeaponHandlingC1"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseWeaponHandlingC1",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: Used for VR Courses, internal use only.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRCourseWeaponHandlingC2"
        },
        "configuration": {
            "label": "BIS_fnc_VRCourseWeaponHandlingC2",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Visualizes area border (used primarily for VR missions).",
            "examples": [
                {
                    "text": "```sqf\n[[0,0,0], 200] call BIS_fnc_VRDrawBorder;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "center",
                            "description": "`Position` - center position"
                        },
                        {
                            "name": "radius",
                            "description": "`Number` - radius"
                        }
                    ],
                    "outline": "[center, radius] call `BIS_fnc_VRDrawBorder`",
                    "returns": "`Array` - list of created objects for easy deletion"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRDrawBorder"
        },
        "configuration": {
            "label": "BIS_fnc_VRDrawBorder",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Visualizes surface grid (used primarily for VR missions).\n\n**NOTE**: Only one instance of grid visualisation can run at any given time. Calling this function multiple times will only move the grid center.",
            "examples": [
                {
                    "text": "```sqf\n[getPosATL player, [0.078, 0.3647, 0.0]] call BIS_fnc_VRDrawGrid;\n```"
                },
                {
                    "text": "```sqf\n[false] call BIS_fnc_VRDrawGrid;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "location",
                            "description": "`Boolean` or `Array` format `Position`:"
                        },
                        {
                            "name": "colour",
                            "description": "`Array` - (Optional, default [0,0,0,1]) to format [{{Color|red|R}},{{Color|green|G}},{{Color|blue|B}},{{Color|grey|A}}]"
                        }
                    ],
                    "outline": "[location, colour] call `BIS_fnc_VRDrawGrid`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRDrawGrid"
        },
        "configuration": {
            "label": "BIS_fnc_VRDrawGrid",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Delete body of a virtual soldier after he's killed.",
            "examples": [
                {
                    "text": "```sqf\n[player] call BIS_fnc_VREffectKilled;\n```"
                },
                {
                    "text": "```sqf\n[player, true, 5] spawn BIS_fnc_VREffectKilled;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - object"
                        },
                        {
                            "name": "instant",
                            "description": "`Boolean` - (Optional, default `false`) `true` to delete the body right away, `false` to add **killed** [EH](https://community.bistudio.com/wiki/addEventHandler) which will delete it after death"
                        },
                        {
                            "name": "delay",
                            "description": "`Number` - (Optional, default 10) time in seconds before the body disappears"
                        }
                    ],
                    "outline": "[object, instant, delay] call `BIS_fnc_VREffectKilled`",
                    "returns": "`Boolean` - `true` when the function is done"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VREffectKilled"
        },
        "configuration": {
            "label": "BIS_fnc_VREffectKilled",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Fade In effect for VR.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_VRFadeIn;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_VRFadeIn`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRFadeIn"
        },
        "configuration": {
            "label": "BIS_fnc_VRFadeIn",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Fade Out effect for VR.",
            "examples": [
                {
                    "text": "```sqf\ncall BIS_fnc_VRFadeOut;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_VRFadeOut`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRFadeOut"
        },
        "configuration": {
            "label": "BIS_fnc_VRFadeOut",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Initialize hit effects on VR targets.\n\n\t\ngrey - undamaged\n\t\norange - damaged\n\t\nred - destroyed",
            "examples": [
                {
                    "text": "```sqf\nprivate _delta = [someObject, 60] call BIS_fnc_VRHitpart;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - VR Object"
                        },
                        {
                            "name": "time",
                            "description": "`Number` - (Optional, default 30) delay before hit parts are returned back to default"
                        }
                    ],
                    "outline": "[object,time] call `BIS_fnc_VRHitpart`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRHitpart"
        },
        "configuration": {
            "label": "BIS_fnc_VRHitpart",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "VR (unit) spawn effect.",
            "examples": [
                {
                    "text": "```sqf\n[player, false, 5] call BIS_fnc_VRSpawnEffect;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "object",
                            "description": "`Object` - object"
                        },
                        {
                            "name": "effectType",
                            "description": "`Boolean` - (Optional, default `false`) reverse effect (hiding)"
                        },
                        {
                            "name": "size",
                            "description": "`Number` - (Optional, default 0) size of the effect"
                        }
                    ],
                    "outline": "[object, reverse, size] call `BIS_fnc_VRSpawnEffect`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRSpawnEffect"
        },
        "configuration": {
            "label": "BIS_fnc_VRSpawnEffect",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Spawns the course selector (used primarily for VR missions).",
            "examples": [
                {
                    "text": "```sqf\n[[0,0,0], \"exit\"] call BIS_fnc_VRSpawnSelector;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "center",
                            "description": "`Position`"
                        },
                        {
                            "name": "type",
                            "description": "`String` - (Optional, default \"default\") can be:"
                        }
                    ],
                    "outline": "[center, type] call `BIS_fnc_VRSpawnSelector`",
                    "returns": "`Object` - created object for easy deletion"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRSpawnSelector"
        },
        "configuration": {
            "label": "BIS_fnc_VRSpawnSelector",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Timer for VR and time trials. The following `missionNamespace` variables can be used:\n* `**BIS_stopTimer**`: set to `true` to stop the timer. Once stopped, the function must be executed again to restart the timer\n* `**RscFiringDrillTime_current**`: fill with [Structured Text](https://community.bistudio.com/wiki/Structured%20Text) to display text instead of timer (when timer is stopped)\n* `**RscFiringDrillTime_done**`: set to `true` to close the display. **Stop the timer first**",
            "examples": [
                {
                    "text": "```sqf\n[] spawn BIS_fnc_VRTimer;\n```"
                },
                {
                    "text": "```sqf\n\"#025D00\" spawn BIS_fnc_VRTimer;\n```"
                },
                {
                    "text": "```sqf\n[\"#025D00\"] spawn BIS_fnc_VRTimer;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "colour",
                            "description": "`String` (Optional, default <sqf inline>([\"IGUI\", \"WARNING_RGB\"] call BIS_fnc_displayColorGet) call BIS_fnc_colorRGBtoHTML) timer colour in HTML format (#{{Color|red|RR}}{{Color|green|GG}}{{Color|blue|BB}})"
                        }
                    ],
                    "outline": "[colour] spawn `BIS_fnc_VRTimer`",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_VRTimer"
        },
        "configuration": {
            "label": "BIS_fnc_VRTimer",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return addon from CfgPatches to which a given weapon class belongs to.\n**IMPORTANT**:  This function is quite performance heavy, use only when absolutely necessary!",
            "examples": [
                {
                    "text": "```sqf\n\"arifle_MX_F\" call BIS_fnc_weaponAddon; // returns \"A3_Weapons_F_Rifles_MX\"\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "classname `String`",
                            "description": "weapon's classname"
                        }
                    ],
                    "outline": "classname call `BIS_fnc_weaponAddon`",
                    "returns": "`String` - addon's config name"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_weaponAddon"
        },
        "configuration": {
            "label": "BIS_fnc_weaponAddon",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns array with classname of the parent weapon (without attachments), followed by classnames of all its attachments.\n\n**IMPORTANT**:  The returned classnames are all converted to lower cases.",
            "examples": [
                {
                    "text": "```sqf\n\"arifle_mx_aco_pointer_f\" call BIS_fnc_weaponComponents; // [\"arifle_mx_f\",\"optic_aco\",\"acc_pointer_ir\"]\n```"
                },
                {
                    "text": "```sqf\n\"arifle_mx_gl_black_hamr_pointer_f\" call BIS_fnc_weaponComponents; // [\"arifle_mx_gl_black_f\",\"optic_hamr\",\"acc_pointer_ir\"]\n```"
                },
                {
                    "text": "```sqf\n\"arifle_mx_black_f\" call BIS_fnc_weaponComponents; // [\"arifle_mx_f\"]\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "classname",
                            "description": "`String` - classname of the parent weapon"
                        }
                    ],
                    "outline": "[classname] call `BIS_fnc_weaponComponents`",
                    "returns": "`Array`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_weaponComponents"
        },
        "configuration": {
            "label": "BIS_fnc_weaponComponents",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Returns relative direction vector of given weapon for the given vehicle",
            "examples": [
                {
                    "text": "```sqf\nprivate _relweapondir = [tank, \"cannon_105mm\"] call BIS_fnc_weaponDirectionRelative;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "vehicle",
                            "description": "`Object` - vehicle"
                        },
                        {
                            "name": "weapon",
                            "description": "`String` - vehicle weapon"
                        },
                        {
                            "name": "visual",
                            "description": "`Boolean` - (Optional, default `true`) if `true` - result is in render scope, `false` - simulation scope"
                        }
                    ],
                    "outline": "[vehicle, weapon, visual] call `BIS_fnc_weaponDirectionRelative`",
                    "returns": "`Array` format `Vector3D`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_weaponDirectionRelative"
        },
        "configuration": {
            "label": "BIS_fnc_weaponDirectionRelative",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Return object's weapons as defined in config. Scans also turrets and pylons.",
            "examples": [
                {
                    "text": "```sqf\n\n[\"B_Soldier_GL_F\"] call BIS_fnc_weaponsEntityType;\n// returns e.g [\"arifle_MX_GL_ACO_F\",\"hgun_P07_F\",\"Throw\",\"Put\"]\n\n```"
                },
                {
                    "text": "```sqf\n\n\"B_Plane_CAS_01_dynamicLoadout_F\" call BIS_fnc_weaponsEntityType;\n/*\n\treturns e.g\n\t[\n\t\t\"Gatling_30mm_Plane_CAS_01_F\",\n\t\t\"Laserdesignator_pilotCamera\",\n\t\t\"CMFlareLauncher\",\n\t\t\"Missile_AA_04_Plane_CAS_01_F\",\n\t\t\"Rocket_04_HE_Plane_CAS_01_F\",\n\t\t\"Missile_AGM_02_Plane_CAS_01_F\",\n\t\t\"Bomb_04_Plane_CAS_01_F\",\n\t\t\"Rocket_04_AP_Plane_CAS_01_F\"\n\t]\n*/\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "class",
                            "description": "`String` or `Array` of `String`s - entity classes"
                        }
                    ],
                    "outline": "class call `BIS_fnc_weaponsEntityType`",
                    "returns": "`Array` of `String`s"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_weaponsEntityType"
        },
        "configuration": {
            "label": "BIS_fnc_weaponsEntityType",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLAICore`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLAICore"
        },
        "configuration": {
            "label": "BIS_fnc_WLAICore",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Sets up a path and behavior for AI to a specific sector.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLAIPathSegmentation`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLAIPathSegmentation"
        },
        "configuration": {
            "label": "BIS_fnc_WLAIPathSegmentation",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLAIPurchases`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLAIPurchases"
        },
        "configuration": {
            "label": "BIS_fnc_WLAIPurchases",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Spawns a requested aircraft and makes it land properly.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLAircraftArrival`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLAircraftArrival"
        },
        "configuration": {
            "label": "BIS_fnc_WLAircraftArrival",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Spawns a requested asset and drops it on a specific location.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLAirdrop`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLAirdrop"
        },
        "configuration": {
            "label": "BIS_fnc_WLAirdrop",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Sector scan routine for AI.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLAISectorScan`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLAISectorScan"
        },
        "configuration": {
            "label": "BIS_fnc_WLAISectorScan",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLArsenalFilter`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLArsenalFilter"
        },
        "configuration": {
            "label": "BIS_fnc_WLArsenalFilter",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Recalculate CP income for a specific side.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLCalculateIncome`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLCalculateIncome"
        },
        "configuration": {
            "label": "BIS_fnc_WLCalculateIncome",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Evaluates sector grid so it can be drawn on map.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLCalculateSectorConnections`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLCalculateSectorConnections"
        },
        "configuration": {
            "label": "BIS_fnc_WLCalculateSectorConnections",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: System init (client-side).\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLClientInit`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLClientInit"
        },
        "configuration": {
            "label": "BIS_fnc_WLClientInit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Debug logging.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLDebug`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLDebug"
        },
        "configuration": {
            "label": "BIS_fnc_WLDebug",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Requested static weapon positionining routine.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLDefenceSetup`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLDefenceSetup"
        },
        "configuration": {
            "label": "BIS_fnc_WLDefenceSetup",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Airdrop location selection routine.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLDropPurchase`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLDropPurchase"
        },
        "configuration": {
            "label": "BIS_fnc_WLDropPurchase",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Funds & sector status UI handle\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLFundsInfo`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLFundsInfo"
        },
        "configuration": {
            "label": "BIS_fnc_WLFundsInfo",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLGarrisonRetreat`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLGarrisonRetreat"
        },
        "configuration": {
            "label": "BIS_fnc_WLGarrisonRetreat",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: System init.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLInit`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLInit"
        },
        "configuration": {
            "label": "BIS_fnc_WLInit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Checks if the given unit is inside a specific sector.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLInSectorArea`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLInSectorArea"
        },
        "configuration": {
            "label": "BIS_fnc_WLInSectorArea",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Reapply a saved loadout.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLLoadoutApply`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLLoadoutApply"
        },
        "configuration": {
            "label": "BIS_fnc_WLLoadoutApply",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Save a loadout for later.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLLoadoutGrab`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLLoadoutGrab"
        },
        "configuration": {
            "label": "BIS_fnc_WLLoadoutGrab",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Evaluates which sector was most voted for.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLMostVotedSector`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLMostVotedSector"
        },
        "configuration": {
            "label": "BIS_fnc_WLMostVotedSector",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Spawns a requested naval asset.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLNavalArrival`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLNavalArrival"
        },
        "configuration": {
            "label": "BIS_fnc_WLNavalArrival",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Opens Arsenal interface.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLOpenArsenal`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLOpenArsenal"
        },
        "configuration": {
            "label": "BIS_fnc_WLOpenArsenal",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Manages temporary info in hints.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLOSD`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLOSD"
        },
        "configuration": {
            "label": "BIS_fnc_WLOSD",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Handles icons selection visualization in map.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLOutlineIcons`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLOutlineIcons"
        },
        "configuration": {
            "label": "BIS_fnc_WLOutlineIcons",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLParseAssetList`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLParseAssetList"
        },
        "configuration": {
            "label": "BIS_fnc_WLParseAssetList",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Keeps track of player unit & its marker.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLPlayersTracking`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLPlayersTracking"
        },
        "configuration": {
            "label": "BIS_fnc_WLPlayersTracking",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Manage connecting and disconnecting players.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLPlayersTrackingServer`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLPlayersTrackingServer"
        },
        "configuration": {
            "label": "BIS_fnc_WLPlayersTrackingServer",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Purchase interface handle.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLPurchaseMenu`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLPurchaseMenu"
        },
        "configuration": {
            "label": "BIS_fnc_WLPurchaseMenu",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Returns a random position in rectangle area.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLRandomPosRect`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLRandomPosRect"
        },
        "configuration": {
            "label": "BIS_fnc_WLRandomPosRect",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Refreshes a side's available services.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLRecalculateServices`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLRecalculateServices"
        },
        "configuration": {
            "label": "BIS_fnc_WLRecalculateServices",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Units & vehicles garbage collector.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLRemovalHandle`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLRemovalHandle"
        },
        "configuration": {
            "label": "BIS_fnc_WLRemovalHandle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Calculate player's reputiation (how rapidly they lose subordinates).\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLReputation`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLReputation"
        },
        "configuration": {
            "label": "BIS_fnc_WLReputation",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Fast travel routine.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLRequestFastTravel`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLRequestFastTravel"
        },
        "configuration": {
            "label": "BIS_fnc_WLRequestFastTravel",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Funds transfer routine.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLRequestFundsTransfer`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLRequestFundsTransfer"
        },
        "configuration": {
            "label": "BIS_fnc_WLRequestFundsTransfer",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Handles proper purchase subroutine based on asset type.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLRequestPurchase`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLRequestPurchase"
        },
        "configuration": {
            "label": "BIS_fnc_WLRequestPurchase",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Sector scan routine (selection part).\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLRequestSectorScan`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLRequestSectorScan"
        },
        "configuration": {
            "label": "BIS_fnc_WLRequestSectorScan",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Voting reset routine.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLRequestVotingReset`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLRequestVotingReset"
        },
        "configuration": {
            "label": "BIS_fnc_WLRequestVotingReset",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLSectorFundsPayoff`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLSectorFundsPayoff"
        },
        "configuration": {
            "label": "BIS_fnc_WLSectorFundsPayoff",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLSectorHandle`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLSectorHandle"
        },
        "configuration": {
            "label": "BIS_fnc_WLSectorHandle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLSectorHandleServer`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLSectorHandleServer"
        },
        "configuration": {
            "label": "BIS_fnc_WLSectorHandleServer",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Handles sector icons.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLSectorIconUpdate`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLSectorIconUpdate"
        },
        "configuration": {
            "label": "BIS_fnc_WLSectorIconUpdate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Spawns sector garrison based on its size, sends a patrolling vehicle if feasible.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLSectorInit`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLSectorInit"
        },
        "configuration": {
            "label": "BIS_fnc_WLSectorInit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Keeps track of sectors status for a given side.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLSectorListing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLSectorListing"
        },
        "configuration": {
            "label": "BIS_fnc_WLSectorListing",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Spawns sector garrison.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLSectorPopulate`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLSectorPopulate"
        },
        "configuration": {
            "label": "BIS_fnc_WLSectorPopulate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLSectorScanHandle`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLSectorScanHandle"
        },
        "configuration": {
            "label": "BIS_fnc_WLSectorScanHandle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Sectors init (client-side).\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLSectorsCommonInit`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLSectorsCommonInit"
        },
        "configuration": {
            "label": "BIS_fnc_WLSectorsCommonInit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Sector voting termination subroutine.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLSectorSelectionEnd`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLSectorSelectionEnd"
        },
        "configuration": {
            "label": "BIS_fnc_WLSectorSelectionEnd",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLSectorSelectionHandle`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLSectorSelectionHandle"
        },
        "configuration": {
            "label": "BIS_fnc_WLSectorSelectionHandle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLSectorSelectionHandleServer`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLSectorSelectionHandleServer"
        },
        "configuration": {
            "label": "BIS_fnc_WLSectorSelectionHandleServer",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Initializes sector voting.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLSectorSelectionStart`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLSectorSelectionStart"
        },
        "configuration": {
            "label": "BIS_fnc_WLSectorSelectionStart",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Sectors init (server-side).\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLSectorsSetup`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLSectorsSetup"
        },
        "configuration": {
            "label": "BIS_fnc_WLSectorsSetup",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLSectorTaskHandle`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLSectorTaskHandle"
        },
        "configuration": {
            "label": "BIS_fnc_WLSectorTaskHandle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Sector update after its owner changed.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLSectorUpdate`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLSectorUpdate"
        },
        "configuration": {
            "label": "BIS_fnc_WLSectorUpdate",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Handles the seizing bar element in UI.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLSeizingBarHandle`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLSeizingBarHandle"
        },
        "configuration": {
            "label": "BIS_fnc_WLSeizingBarHandle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Spawns and manages response teams.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLSendResponseTeam`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLSendResponseTeam"
        },
        "configuration": {
            "label": "BIS_fnc_WLSendResponseTeam",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Hints buffer.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLShowInfo`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLShowInfo"
        },
        "configuration": {
            "label": "BIS_fnc_WLShowInfo",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Returns the primary faction for a given side.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLSideToFaction`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLSideToFaction"
        },
        "configuration": {
            "label": "BIS_fnc_WLSideToFaction",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Display given text smoothly.",
            "examples": [
                {
                    "text": "```sqf\n[\"Hello, hidden FX\", 2, 3, [1,0,0,1], true] spawn BIS_fnc_WLSmoothText; // no sounds, letters appear in a smooth transition\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "text",
                            "description": "`String` - text to display"
                        },
                        {
                            "name": "nbOfLines",
                            "description": "`Number` - (Optional, default 3) maximum number of lines to be shown at the same time"
                        },
                        {
                            "name": "duration",
                            "description": "`Number` - (Optional, default 5) on-screen duration"
                        },
                        {
                            "name": "color",
                            "description": "[[Color|Color (RGBA)]] - (Optional, default [1,1,1,1]) text color"
                        },
                        {
                            "name": "outline",
                            "description": "`Boolean` - (Optional, default `true`) `true` to outline the text, `false` not to"
                        }
                    ],
                    "outline": "[text, nbOfLines, duration, color, outline] call `BIS_fnc_WLSmoothText`",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLSmoothText"
        },
        "configuration": {
            "label": "BIS_fnc_WLSmoothText",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Play a given announcer message.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLSoundMsg`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLSoundMsg"
        },
        "configuration": {
            "label": "BIS_fnc_WLSoundMsg",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLSubroutine_purchaseMenuAssetAvailability`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLSubroutine_purchaseMenuAssetAvailability"
        },
        "configuration": {
            "label": "BIS_fnc_WLSubroutine_purchaseMenuAssetAvailability",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLSubroutine_purchaseMenuGetUIScale`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLSubroutine_purchaseMenuGetUIScale"
        },
        "configuration": {
            "label": "BIS_fnc_WLSubroutine_purchaseMenuGetUIScale",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLSubroutine_purchaseMenuHandleDLC`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLSubroutine_purchaseMenuHandleDLC"
        },
        "configuration": {
            "label": "BIS_fnc_WLSubroutine_purchaseMenuHandleDLC",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLSubroutine_purchaseMenuRefresh`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLSubroutine_purchaseMenuRefresh"
        },
        "configuration": {
            "label": "BIS_fnc_WLSubroutine_purchaseMenuRefresh",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLSubroutine_purchaseMenuSetAssetDetails`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLSubroutine_purchaseMenuSetAssetDetails"
        },
        "configuration": {
            "label": "BIS_fnc_WLSubroutine_purchaseMenuSetAssetDetails",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "_N/A_",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLSubroutine_purchaseMenuSetItemsList`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLSubroutine_purchaseMenuSetItemsList"
        },
        "configuration": {
            "label": "BIS_fnc_WLSubroutine_purchaseMenuSetItemsList",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Returns time synced between server and clients\n*/</pre>{{Wiki|placeholder}}",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLSyncedTime`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLSyncedTime"
        },
        "configuration": {
            "label": "BIS_fnc_WLSyncedTime",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Introduces a synchronized time value for server and clients.\nOBSOLETE NOW AFTER SERVERTIME FIX\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLSyncTime`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLSyncTime"
        },
        "configuration": {
            "label": "BIS_fnc_WLSyncTime",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Recalculates AO info (sector distribution).\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLUpdateAO`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLUpdateAO"
        },
        "configuration": {
            "label": "BIS_fnc_WLUpdateAO",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Init variables.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLVarsInit`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLVarsInit"
        },
        "configuration": {
            "label": "BIS_fnc_WLVarsInit",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Keeps track of spawned vehicles.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLVehicleHandle`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLVehicleHandle"
        },
        "configuration": {
            "label": "BIS_fnc_WLVehicleHandle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "<pre>/*\nWARLORDS-SPECIFIC FUNCTION\n\nAuthor: Josef Zemánek\n\nDescription: Handles the voting bar element in UI.\n*/</pre>{{Wiki|placeholder}}<!-- Remove this after fill-in -->",
            "examples": [],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": null,
                            "description": null
                        }
                    ],
                    "outline": "[] call `BIS_fnc_WLVotingBarHandle`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_WLVotingBarHandle"
        },
        "configuration": {
            "label": "BIS_fnc_WLVotingBarHandle",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Creates (or returns if it already exists) trigger with size of map.",
            "examples": [
                {
                    "text": "```sqf\nprivate _bigTrigger = call BIS_fnc_worldArea;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_worldArea`",
                    "returns": "`Object`: a [trigger](https://community.bistudio.com/wiki/Trigger) covering the whole _defined_ terrain. Referenced by **hsim_worldArea** variable"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_worldArea"
        },
        "configuration": {
            "label": "BIS_fnc_worldArea",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Let group members fire artillery barrage on waypoint position. Units must have magazine type.",
            "examples": [
                {
                    "text": "```sqf\n[group player, getMarkerPos \"artilleryStrike\", objNull, 30, \"8Rnd_82mm_Mo_shells\"] call BIS_fnc_wpArtillery;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group`"
                        },
                        {
                            "name": "position",
                            "description": "`Array` format `Position`"
                        },
                        {
                            "name": "target",
                            "description": "`Object` - (Optional, default `objNull`) **unused parameter**"
                        },
                        {
                            "name": "firedRounds",
                            "description": "`Number` - (Optional, default 100) number of fired rounds"
                        },
                        {
                            "name": "type",
                            "description": "`String` - (Optional, default \"\") magazine type to be used. If empty, first found magazine will be used"
                        }
                    ],
                    "outline": "[group, position, target, firedRounds, type] call `BIS_fnc_wpArtillery`",
                    "returns": "`Boolean` - `true` when done"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_wpArtillery"
        },
        "configuration": {
            "label": "BIS_fnc_wpArtillery",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Scripted \"CLEAR MINES\" [Advanced Waypoint](https://community.bistudio.com/wiki/Waypoints).\nThe script needs a unit with the abiility to demine (engineer or explosive specialist [trait](https://community.bistudio.com/wiki/getUnitTrait) **and** a toolkit).",
            "examples": [
                {
                    "text": "```sqf\n[group player, getMarkerPos \"mineField\", objNull, false] call BIS_fnc_wpDemine;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "group",
                            "description": "`Group` - a group with a mine expert"
                        },
                        {
                            "name": "position",
                            "description": "`Position` - the demining centre. Demining radius is defined by `waypointCompletionRadius`, and defaults to 50 if set to 0"
                        },
                        {
                            "name": "target",
                            "description": "`Anything` - (Optional, default `objNull`) unused parameter"
                        },
                        {
                            "name": "clearUnknownMines",
                            "description": "`Boolean` - (Optional, default `true`) should the group demine all mines or only the one [its side knows about](https://community.bistudio.com/wiki/detectedMines)"
                        }
                    ],
                    "outline": "[group, position, target, clearUnknownMines] call `BIS_fnc_wpDemine`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_wpDemine"
        },
        "configuration": {
            "label": "BIS_fnc_wpDemine",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: This function does not work.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_wpPatrol"
        },
        "configuration": {
            "label": "BIS_fnc_wpPatrol",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: This function does not work.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_wpRelax"
        },
        "configuration": {
            "label": "BIS_fnc_wpRelax",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**IMPORTANT**: This function does not work.",
            "examples": [
                {
                    "text": "-"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "-",
                    "returns": "-"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_wpSuppress"
        },
        "configuration": {
            "label": "BIS_fnc_wpSuppress",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Locks the camera in place when the map is open.",
            "examples": [
                {
                    "text": "```sqf\n[[0, 0]] call BIS_fnc_zoomLock;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "cameraCenter",
                            "description": "`Array` format [Position2D](https://community.bistudio.com/wiki/Position%23Introduction) - (Optional, default [0, 0]) position where the camera should be placed and locked"
                        }
                    ],
                    "outline": "[cameraCenter] call `BIS_fnc_zoomLock`",
                    "returns": "`Nothing`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_zoomLock"
        },
        "configuration": {
            "label": "BIS_fnc_zoomLock",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Event handler function for locking the camera.",
            "examples": [
                {
                    "text": "```sqf\n[position player] call BIS_fnc_zoomLockEH;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "position",
                            "description": "`Position` - position that the camera should focus"
                        }
                    ],
                    "outline": "position call `BIS_fnc_zoomLockEH`"
                }
            ],
            "effectLocality": "Local Effect",
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_zoomLockEH"
        },
        "configuration": {
            "label": "BIS_fnc_zoomLockEH",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Map will zoom on the given area. Function always takes the longer side of the area to zoom on.",
            "examples": [
                {
                    "text": "```sqf\n\nopenMap true;\n[markerSize \"BIS_areaMarker\", markerPos \"BIS_areaMarker\", 5] call BIS_fnc_zoomOnArea;\n\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [
                        {
                            "name": "area",
                            "description": "`Array` - area to zoom on"
                        },
                        {
                            "name": "center",
                            "description": "`Array` - coordinates of the center"
                        },
                        {
                            "name": "time",
                            "description": "`Number` - (Optional, default 1) time of the zoom operation"
                        },
                        {
                            "name": "handler",
                            "description": "`Control` - (Optional, default `nil`) handler to the map display control (you can pass one if already exists, if not, handler is created)"
                        },
                        {
                            "name": "forceCam",
                            "description": "`Boolean` - (Optional, default `false`) whether to force the camera in position after the zoom."
                        }
                    ],
                    "outline": "[area, center, time, handler, forceCam] call `BIS_fnc_zoomOnArea`",
                    "returns": "`Number` - zoom level"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_zoomOnArea"
        },
        "configuration": {
            "label": "BIS_fnc_zoomOnArea",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "Function that unlocks the camera in which has been previously locked with `BIS_fnc_zoomLock`.",
            "examples": [
                {
                    "text": "```sqf\n[] call BIS_fnc_zoomUnlock;\n```"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "call `BIS_fnc_zoomUnlock`",
                    "returns": "`Nothing`"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_zoomUnlock"
        },
        "configuration": {
            "label": "BIS_fnc_zoomUnlock",
            "grammarType": "function"
        }
    },
    {
        "documentation": {
            "description": "**Arma**: 3|This function is non functional in {{arma3 because of undefined variables.}}",
            "examples": [
                {
                    "text": "<!-- \n```sqf\n[] call BIS_fnc_zzRotate;\n```\n -->"
                }
            ],
            "syntaxes": [
                {
                    "parameters": [],
                    "outline": "<!-- [] call `BIS_fnc_zzRotate` -->"
                }
            ],
            "documentationLink": "https://community.bistudio.com/wiki/BIS_fnc_zzRotate"
        },
        "configuration": {
            "label": "BIS_fnc_zzRotate",
            "grammarType": "function"
        }
    }
]